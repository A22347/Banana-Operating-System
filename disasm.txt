
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d f4 00 00       	call   c000f42d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 4f 02 00       	call   c0024ff8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 90 5b 02 c0       	mov    ebx,0xc0025b90
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c 5b 02 c0    	cmp    ebx,0xc0025b9c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000049:	3d ac 99 02 c0       	cmp    eax,0xc00299ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 99 02 c0       	push   0xc00299ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000075:	2d ac 99 02 c0       	sub    eax,0xc00299ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 99 02 c0       	push   0xc00299ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d dc 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029fdc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 5b 02 c0       	mov    ebx,0xc0025ba4
c00000bb:	81 eb a0 5b 02 c0    	sub    ebx,0xc0025ba0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 5b 02 c0       	mov    esi,0xc0025ba0
c00000ca:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e0 9f 02 c0       	mov    ds:0xc0029fe0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 99 02 c0       	push   0xc00299ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 dc 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029fdc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e4 9f 02 c0       	push   0xc0029fe4
c000012c:	68 ac 99 02 c0       	push   0xc00299ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <goToVM86>:
c0000299:	fa                   	cli    
c000029a:	55                   	push   ebp
c000029b:	89 e5                	mov    ebp,esp
c000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002a0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002a3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a9:	25 ff ff 00 00       	and    eax,0xffff
c00002ae:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002c0:	52                   	push   edx
c00002c1:	51                   	push   ecx
c00002c2:	68 02 02 02 00       	push   0x20202
c00002c7:	53                   	push   ebx
c00002c8:	50                   	push   eax
c00002c9:	cf                   	iret   

c00002ca <goToUsermode>:
c00002ca:	fa                   	cli    
c00002cb:	55                   	push   ebp
c00002cc:	89 e5                	mov    ebp,esp
c00002ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002d1:	66 b8 23 00          	mov    ax,0x23
c00002d5:	66 8e d8             	mov    ds,ax
c00002d8:	66 8e c0             	mov    es,ax
c00002db:	66 8e e0             	mov    fs,ax
c00002de:	66 8e e8             	mov    gs,ax
c00002e1:	89 e0                	mov    eax,esp
c00002e3:	68 23 00 00 00       	push   0x23
c00002e8:	50                   	push   eax
c00002e9:	68 02 02 00 00       	push   0x202
c00002ee:	68 1b 00 00 00       	push   0x1b
c00002f3:	53                   	push   ebx
c00002f4:	cf                   	iret   

c00002f5 <switchToThreadASMFirstTime>:
c00002f5:	9c                   	pushf  
c00002f6:	fa                   	cli    
c00002f7:	50                   	push   eax
c00002f8:	53                   	push   ebx
c00002f9:	51                   	push   ecx
c00002fa:	52                   	push   edx
c00002fb:	56                   	push   esi
c00002fc:	57                   	push   edi
c00002fd:	55                   	push   ebp
c00002fe:	e9 11 00 00 00       	jmp    c0000314 <commonThreadSwitch>

c0000303 <switchToThreadASM>:
c0000303:	9c                   	pushf  
c0000304:	50                   	push   eax
c0000305:	53                   	push   ebx
c0000306:	51                   	push   ecx
c0000307:	52                   	push   edx
c0000308:	56                   	push   esi
c0000309:	57                   	push   edi
c000030a:	55                   	push   ebp
c000030b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000311:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000314 <commonThreadSwitch>:
c0000314:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000318:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000031e:	8b 06                	mov    eax,DWORD PTR [esi]
c0000320:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000323:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000326:	0f 20 d9             	mov    ecx,cr3
c0000329:	39 c8                	cmp    eax,ecx
c000032b:	74 03                	je     c0000330 <commonThreadSwitch.doneVAS>
c000032d:	0f 22 d8             	mov    cr3,eax

c0000330 <commonThreadSwitch.doneVAS>:
c0000330:	85 d2                	test   edx,edx
c0000332:	74 4e                	je     c0000382 <commonThreadSwitch.notFirstTime>
c0000334:	fa                   	cli    
c0000335:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000338:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000033d:	60                   	pusha  
c000033e:	e8 d9 1c 01 00       	call   c001201c <mapVASFirstTime>
c0000343:	61                   	popa   
c0000344:	89 c4                	mov    esp,eax
c0000346:	56                   	push   esi
c0000347:	52                   	push   edx
c0000348:	e8 0b b2 01 00       	call   c001b558 <changeTSS>
c000034d:	5a                   	pop    edx
c000034e:	5e                   	pop    esi
c000034f:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000356:	81 fa 01 00 00 00    	cmp    edx,0x1
c000035c:	74 39                	je     c0000397 <commonThreadSwitch.cameOffAFork>
c000035e:	5d                   	pop    ebp
c000035f:	5f                   	pop    edi
c0000360:	5e                   	pop    esi
c0000361:	59                   	pop    ecx
c0000362:	59                   	pop    ecx
c0000363:	5b                   	pop    ebx
c0000364:	58                   	pop    eax
c0000365:	81 c4 04 00 00 00    	add    esp,0x4
c000036b:	6a 02                	push   0x2
c000036d:	9d                   	popf   
c000036e:	52                   	push   edx
c000036f:	e8 f7 b5 01 00       	call   c001b96b <taskStartupFunction>
c0000374:	5a                   	pop    edx
c0000375:	50                   	push   eax
c0000376:	ff d2                	call   edx
c0000378:	e8 9d bb 01 00       	call   c001bf1a <taskReturned>
c000037d:	e9 fb ff ff ff       	jmp    c000037d <commonThreadSwitch.doneVAS+0x4d>

c0000382 <commonThreadSwitch.notFirstTime>:
c0000382:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000385:	56                   	push   esi
c0000386:	52                   	push   edx
c0000387:	e8 cc b1 01 00       	call   c001b558 <changeTSS>
c000038c:	5a                   	pop    edx
c000038d:	5e                   	pop    esi
c000038e:	5d                   	pop    ebp
c000038f:	5f                   	pop    edi
c0000390:	5e                   	pop    esi
c0000391:	5a                   	pop    edx
c0000392:	59                   	pop    ecx
c0000393:	5b                   	pop    ebx
c0000394:	58                   	pop    eax
c0000395:	9d                   	popf   
c0000396:	c3                   	ret    

c0000397 <commonThreadSwitch.cameOffAFork>:
c0000397:	31 c0                	xor    eax,eax
c0000399:	31 d2                	xor    edx,edx
c000039b:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000039e:	e9 7b 02 00 00       	jmp    c000061e <offAForkJumpThingy>

c00003a3 <detectCPUID>:
c00003a3:	9c                   	pushf  
c00003a4:	9c                   	pushf  
c00003a5:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003ac:	9d                   	popf   
c00003ad:	9c                   	pushf  
c00003ae:	58                   	pop    eax
c00003af:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003b2:	9d                   	popf   
c00003b3:	25 00 00 20 00       	and    eax,0x200000
c00003b8:	c3                   	ret    

c00003b9 <asmQuickAcquireLock>:
c00003b9:	55                   	push   ebp
c00003ba:	89 e5                	mov    ebp,esp
c00003bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003bf <asmQuickAcquireLock.retry>:
c00003bf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c4:	72 02                	jb     c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003c6:	fa                   	cli    
c00003c7:	c3                   	ret    

c00003c8 <asmQuickAcquireLock.spin_with_pause>:
c00003c8:	f3 90                	pause  
c00003ca:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d0:	75 f6                	jne    c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003d2:	e9 e8 ff ff ff       	jmp    c00003bf <asmQuickAcquireLock.retry>

c00003d7 <asmQuickReleaseLock>:
c00003d7:	55                   	push   ebp
c00003d8:	89 e5                	mov    ebp,esp
c00003da:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003e1:	5d                   	pop    ebp
c00003e2:	c3                   	ret    

c00003e3 <asmAcquireLock>:
c00003e3:	55                   	push   ebp
c00003e4:	89 e5                	mov    ebp,esp
c00003e6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e9 <asmAcquireLock.retry>:
c00003e9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ee:	72 05                	jb     c00003f5 <asmAcquireLock.spin_with_pause>
c00003f0:	9c                   	pushf  
c00003f1:	58                   	pop    eax
c00003f2:	fa                   	cli    
c00003f3:	5d                   	pop    ebp
c00003f4:	c3                   	ret    

c00003f5 <asmAcquireLock.spin_with_pause>:
c00003f5:	f3 90                	pause  
c00003f7:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003fd:	75 f6                	jne    c00003f5 <asmAcquireLock.spin_with_pause>
c00003ff:	e9 e5 ff ff ff       	jmp    c00003e9 <asmAcquireLock.retry>

c0000404 <asmReleaseLock>:
c0000404:	55                   	push   ebp
c0000405:	89 e5                	mov    ebp,esp
c0000407:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000040a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000040d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000413:	52                   	push   edx
c0000414:	9d                   	popf   
c0000415:	5d                   	pop    ebp
c0000416:	c3                   	ret    

c0000417 <loadGDT>:
c0000417:	0f 01 15 10 a4 02 c0 	lgdtd  ds:0xc002a410
c000041e:	66 b8 10 00          	mov    ax,0x10
c0000422:	66 8e d8             	mov    ds,ax
c0000425:	66 8e c0             	mov    es,ax
c0000428:	66 8e e0             	mov    fs,ax
c000042b:	66 8e e8             	mov    gs,ax
c000042e:	66 8e d0             	mov    ss,ax
c0000431:	e9 00 00 00 00       	jmp    c0000436 <flush2>

c0000436 <flush2>:
c0000436:	c3                   	ret    

c0000437 <isr0>:
c0000437:	fa                   	cli    
c0000438:	68 00 00 00 00       	push   0x0
c000043d:	68 00 00 00 00       	push   0x0
c0000442:	e9 a2 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000447 <isr1>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 01                	push   0x1
c000044c:	e9 98 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000451 <isr2>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 02                	push   0x2
c0000456:	e9 8e 01 00 00       	jmp    c00005e9 <int_common_stub>

c000045b <isr3>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 03                	push   0x3
c0000460:	e9 84 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000465 <isr4>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 04                	push   0x4
c000046a:	e9 7a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000046f <isr5>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 05                	push   0x5
c0000474:	e9 70 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000479 <isr6>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 06                	push   0x6
c000047e:	e9 66 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000483 <isr7>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 07                	push   0x7
c0000488:	e9 5c 01 00 00       	jmp    c00005e9 <int_common_stub>

c000048d <isr8>:
c000048d:	fa                   	cli    
c000048e:	6a 08                	push   0x8
c0000490:	e9 54 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000495 <isr9>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 09                	push   0x9
c000049a:	e9 4a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000049f <isr10>:
c000049f:	fa                   	cli    
c00004a0:	6a 0a                	push   0xa
c00004a2:	e9 42 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004a7 <isr11>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0b                	push   0xb
c00004aa:	e9 3a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004af <isr12>:
c00004af:	fa                   	cli    
c00004b0:	6a 0c                	push   0xc
c00004b2:	e9 32 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004b7 <isr13>:
c00004b7:	fa                   	cli    
c00004b8:	6a 0d                	push   0xd
c00004ba:	e9 2a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004bf <isr14>:
c00004bf:	fa                   	cli    
c00004c0:	6a 0e                	push   0xe
c00004c2:	e9 22 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004c7 <isr15>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 0f                	push   0xf
c00004cc:	e9 18 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004d1 <isr16>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 10                	push   0x10
c00004d6:	e9 0e 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004db <isr17>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 11                	push   0x11
c00004e0:	e9 04 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004e5 <isr18>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 12                	push   0x12
c00004ea:	e9 fa 00 00 00       	jmp    c00005e9 <int_common_stub>

c00004ef <isr96>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 60                	push   0x60
c00004f4:	e9 11 01 00 00       	jmp    c000060a <syscall_common_stub>

c00004f9 <irq0>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 20                	push   0x20
c00004fe:	e9 e6 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000503 <irq1>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 21                	push   0x21
c0000508:	e9 dc 00 00 00       	jmp    c00005e9 <int_common_stub>

c000050d <irq2>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 22                	push   0x22
c0000512:	e9 d2 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000517 <irq3>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 23                	push   0x23
c000051c:	e9 c8 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000521 <irq4>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 24                	push   0x24
c0000526:	e9 be 00 00 00       	jmp    c00005e9 <int_common_stub>

c000052b <irq5>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 25                	push   0x25
c0000530:	e9 b4 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000535 <irq6>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 26                	push   0x26
c000053a:	e9 aa 00 00 00       	jmp    c00005e9 <int_common_stub>

c000053f <irq7>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 27                	push   0x27
c0000544:	e9 a0 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000549 <irq8>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 28                	push   0x28
c000054e:	e9 96 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000553 <irq9>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 29                	push   0x29
c0000558:	e9 8c 00 00 00       	jmp    c00005e9 <int_common_stub>

c000055d <irq10>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2a                	push   0x2a
c0000562:	e9 82 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000567 <irq11>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2b                	push   0x2b
c000056c:	e9 78 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000571 <irq12>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 2c                	push   0x2c
c0000576:	e9 6e 00 00 00       	jmp    c00005e9 <int_common_stub>

c000057b <irq13>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 2d                	push   0x2d
c0000580:	e9 64 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000585 <irq14>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 2e                	push   0x2e
c000058a:	e9 5a 00 00 00       	jmp    c00005e9 <int_common_stub>

c000058f <irq15>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 2f                	push   0x2f
c0000594:	e9 50 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000599 <irq16>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 30                	push   0x30
c000059e:	e9 46 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005a3 <irq17>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 31                	push   0x31
c00005a8:	e9 3c 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005ad <irq18>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 32                	push   0x32
c00005b2:	e9 32 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005b7 <irq19>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 33                	push   0x33
c00005bc:	e9 28 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005c1 <irq20>:
c00005c1:	fa                   	cli    
c00005c2:	6a 00                	push   0x0
c00005c4:	6a 34                	push   0x34
c00005c6:	e9 1e 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005cb <irq21>:
c00005cb:	fa                   	cli    
c00005cc:	6a 00                	push   0x0
c00005ce:	6a 35                	push   0x35
c00005d0:	e9 14 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005d5 <irq22>:
c00005d5:	fa                   	cli    
c00005d6:	6a 00                	push   0x0
c00005d8:	6a 36                	push   0x36
c00005da:	e9 0a 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005df <irq23>:
c00005df:	fa                   	cli    
c00005e0:	6a 00                	push   0x0
c00005e2:	6a 37                	push   0x37
c00005e4:	e9 00 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005e9 <int_common_stub>:
c00005e9:	60                   	pusha  
c00005ea:	1e                   	push   ds
c00005eb:	06                   	push   es
c00005ec:	0f a0                	push   fs
c00005ee:	0f a8                	push   gs
c00005f0:	54                   	push   esp
c00005f1:	e8 09 39 01 00       	call   c0013eff <int_handler>
c00005f6:	81 c4 04 00 00 00    	add    esp,0x4
c00005fc:	0f a9                	pop    gs
c00005fe:	0f a1                	pop    fs
c0000600:	07                   	pop    es
c0000601:	1f                   	pop    ds
c0000602:	61                   	popa   
c0000603:	81 c4 08 00 00 00    	add    esp,0x8
c0000609:	cf                   	iret   

c000060a <syscall_common_stub>:
c000060a:	60                   	pusha  
c000060b:	1e                   	push   ds
c000060c:	06                   	push   es
c000060d:	0f a0                	push   fs
c000060f:	0f a8                	push   gs
c0000611:	54                   	push   esp
c0000612:	fb                   	sti    
c0000613:	e8 e7 38 01 00       	call   c0013eff <int_handler>
c0000618:	81 c4 04 00 00 00    	add    esp,0x4

c000061e <offAForkJumpThingy>:
c000061e:	0f a9                	pop    gs
c0000620:	0f a1                	pop    fs
c0000622:	07                   	pop    es
c0000623:	1f                   	pop    ds
c0000624:	61                   	popa   
c0000625:	81 c4 08 00 00 00    	add    esp,0x8
c000062b:	cf                   	iret   

c000062c <memcmp>:
c000062c:	56                   	push   esi
c000062d:	53                   	push   ebx
c000062e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000632:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000636:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000063a:	01 d6                	add    esi,edx
c000063c:	39 f2                	cmp    edx,esi
c000063e:	74 0e                	je     c000064e <memcmp+0x22>
c0000640:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000643:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000646:	38 c8                	cmp    al,cl
c0000648:	75 08                	jne    c0000652 <memcmp+0x26>
c000064a:	42                   	inc    edx
c000064b:	43                   	inc    ebx
c000064c:	eb ee                	jmp    c000063c <memcmp+0x10>
c000064e:	31 c0                	xor    eax,eax
c0000650:	eb 02                	jmp    c0000654 <memcmp+0x28>
c0000652:	29 c8                	sub    eax,ecx
c0000654:	5b                   	pop    ebx
c0000655:	5e                   	pop    esi
c0000656:	c3                   	ret    

c0000657 <memmove>:
c0000657:	56                   	push   esi
c0000658:	53                   	push   ebx
c0000659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000065d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000665:	39 c8                	cmp    eax,ecx
c0000667:	73 12                	jae    c000067b <memmove+0x24>
c0000669:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000066c:	89 c3                	mov    ebx,eax
c000066e:	39 f1                	cmp    ecx,esi
c0000670:	74 1a                	je     c000068c <memmove+0x35>
c0000672:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000674:	43                   	inc    ebx
c0000675:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000678:	41                   	inc    ecx
c0000679:	eb f3                	jmp    c000066e <memmove+0x17>
c000067b:	76 0f                	jbe    c000068c <memmove+0x35>
c000067d:	85 d2                	test   edx,edx
c000067f:	74 0b                	je     c000068c <memmove+0x35>
c0000681:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000685:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000689:	4a                   	dec    edx
c000068a:	eb f1                	jmp    c000067d <memmove+0x26>
c000068c:	5b                   	pop    ebx
c000068d:	5e                   	pop    esi
c000068e:	c3                   	ret    

c000068f <memcpy>:
c000068f:	57                   	push   edi
c0000690:	56                   	push   esi
c0000691:	53                   	push   ebx
c0000692:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000069a:	89 da                	mov    edx,ebx
c000069c:	89 d9                	mov    ecx,ebx
c000069e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006a2:	83 e2 fc             	and    edx,0xfffffffc
c00006a5:	c1 e9 02             	shr    ecx,0x2
c00006a8:	89 c7                	mov    edi,eax
c00006aa:	fc                   	cld    
c00006ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ad:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006b0:	01 c2                	add    edx,eax
c00006b2:	01 de                	add    esi,ebx
c00006b4:	39 f1                	cmp    ecx,esi
c00006b6:	74 09                	je     c00006c1 <memcpy+0x32>
c00006b8:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006ba:	42                   	inc    edx
c00006bb:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006be:	41                   	inc    ecx
c00006bf:	eb f3                	jmp    c00006b4 <memcpy+0x25>
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	5f                   	pop    edi
c00006c4:	c3                   	ret    

c00006c5 <memset>:
c00006c5:	53                   	push   ebx
c00006c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006ce:	89 c2                	mov    edx,eax
c00006d0:	01 c1                	add    ecx,eax
c00006d2:	39 ca                	cmp    edx,ecx
c00006d4:	74 0a                	je     c00006e0 <memset+0x1b>
c00006d6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006da:	42                   	inc    edx
c00006db:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006de:	eb f2                	jmp    c00006d2 <memset+0xd>
c00006e0:	5b                   	pop    ebx
c00006e1:	c3                   	ret    

c00006e2 <strlen>:
c00006e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e6:	31 c0                	xor    eax,eax
c00006e8:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006ec:	74 03                	je     c00006f1 <strlen+0xf>
c00006ee:	40                   	inc    eax
c00006ef:	eb f7                	jmp    c00006e8 <strlen+0x6>
c00006f1:	c3                   	ret    

c00006f2 <strpbrk>:
c00006f2:	53                   	push   ebx
c00006f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f7:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f9:	84 c9                	test   cl,cl
c00006fb:	74 14                	je     c0000711 <strpbrk+0x1f>
c00006fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000701:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000703:	84 db                	test   bl,bl
c0000705:	74 07                	je     c000070e <strpbrk+0x1c>
c0000707:	38 cb                	cmp    bl,cl
c0000709:	74 08                	je     c0000713 <strpbrk+0x21>
c000070b:	42                   	inc    edx
c000070c:	eb f3                	jmp    c0000701 <strpbrk+0xf>
c000070e:	40                   	inc    eax
c000070f:	eb e6                	jmp    c00006f7 <strpbrk+0x5>
c0000711:	31 c0                	xor    eax,eax
c0000713:	5b                   	pop    ebx
c0000714:	c3                   	ret    

c0000715 <strtok>:
c0000715:	56                   	push   esi
c0000716:	53                   	push   ebx
c0000717:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071f:	85 db                	test   ebx,ebx
c0000721:	75 0e                	jne    c0000731 <strtok+0x1c>
c0000723:	8b 1d fc 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ffc
c0000729:	85 db                	test   ebx,ebx
c000072b:	75 04                	jne    c0000731 <strtok+0x1c>
c000072d:	31 db                	xor    ebx,ebx
c000072f:	eb 2e                	jmp    c000075f <strtok+0x4a>
c0000731:	56                   	push   esi
c0000732:	53                   	push   ebx
c0000733:	e8 ba ff ff ff       	call   c00006f2 <strpbrk>
c0000738:	5a                   	pop    edx
c0000739:	a3 fc 9f 02 c0       	mov    ds:0xc0029ffc,eax
c000073e:	59                   	pop    ecx
c000073f:	a1 fc 9f 02 c0       	mov    eax,ds:0xc0029ffc
c0000744:	39 d8                	cmp    eax,ebx
c0000746:	75 07                	jne    c000074f <strtok+0x3a>
c0000748:	43                   	inc    ebx
c0000749:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074d:	eb e2                	jmp    c0000731 <strtok+0x1c>
c000074f:	85 c0                	test   eax,eax
c0000751:	74 da                	je     c000072d <strtok+0x18>
c0000753:	8d 50 01             	lea    edx,[eax+0x1]
c0000756:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000759:	89 15 fc 9f 02 c0    	mov    DWORD PTR ds:0xc0029ffc,edx
c000075f:	89 d8                	mov    eax,ebx
c0000761:	5b                   	pop    ebx
c0000762:	5e                   	pop    esi
c0000763:	c3                   	ret    

c0000764 <strcpy>:
c0000764:	53                   	push   ebx
c0000765:	31 d2                	xor    edx,edx
c0000767:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076f:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000772:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000775:	84 c9                	test   cl,cl
c0000777:	74 06                	je     c000077f <strcpy+0x1b>
c0000779:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077c:	42                   	inc    edx
c000077d:	eb ec                	jmp    c000076b <strcpy+0x7>
c000077f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000782:	5b                   	pop    ebx
c0000783:	c3                   	ret    

c0000784 <strncpy>:
c0000784:	56                   	push   esi
c0000785:	53                   	push   ebx
c0000786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000792:	89 c3                	mov    ebx,eax
c0000794:	85 c9                	test   ecx,ecx
c0000796:	74 1a                	je     c00007b2 <strncpy+0x2e>
c0000798:	46                   	inc    esi
c0000799:	43                   	inc    ebx
c000079a:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a1:	84 d2                	test   dl,dl
c00007a3:	75 ef                	jne    c0000794 <strncpy+0x10>
c00007a5:	31 d2                	xor    edx,edx
c00007a7:	39 d1                	cmp    ecx,edx
c00007a9:	74 07                	je     c00007b2 <strncpy+0x2e>
c00007ab:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007af:	42                   	inc    edx
c00007b0:	eb f5                	jmp    c00007a7 <strncpy+0x23>
c00007b2:	5b                   	pop    ebx
c00007b3:	5e                   	pop    esi
c00007b4:	c3                   	ret    

c00007b5 <strcmp>:
c00007b5:	31 c9                	xor    ecx,ecx
c00007b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007bf:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c3:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c7:	38 d0                	cmp    al,dl
c00007c9:	75 08                	jne    c00007d3 <strcmp+0x1e>
c00007cb:	41                   	inc    ecx
c00007cc:	84 c0                	test   al,al
c00007ce:	75 e7                	jne    c00007b7 <strcmp+0x2>
c00007d0:	31 c0                	xor    eax,eax
c00007d2:	c3                   	ret    
c00007d3:	29 d0                	sub    eax,edx
c00007d5:	c3                   	ret    

c00007d6 <strchr>:
c00007d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007da:	8a 10                	mov    dl,BYTE PTR [eax]
c00007dc:	84 d2                	test   dl,dl
c00007de:	74 09                	je     c00007e9 <strchr+0x13>
c00007e0:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e4:	74 05                	je     c00007eb <strchr+0x15>
c00007e6:	40                   	inc    eax
c00007e7:	eb f1                	jmp    c00007da <strchr+0x4>
c00007e9:	31 c0                	xor    eax,eax
c00007eb:	c3                   	ret    

c00007ec <strncmp>:
c00007ec:	56                   	push   esi
c00007ed:	53                   	push   ebx
c00007ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007fa:	01 d6                	add    esi,edx
c00007fc:	39 f2                	cmp    edx,esi
c00007fe:	74 12                	je     c0000812 <strncmp+0x26>
c0000800:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000803:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000806:	38 c8                	cmp    al,cl
c0000808:	75 0c                	jne    c0000816 <strncmp+0x2a>
c000080a:	42                   	inc    edx
c000080b:	84 c0                	test   al,al
c000080d:	74 03                	je     c0000812 <strncmp+0x26>
c000080f:	43                   	inc    ebx
c0000810:	eb ea                	jmp    c00007fc <strncmp+0x10>
c0000812:	31 c0                	xor    eax,eax
c0000814:	eb 02                	jmp    c0000818 <strncmp+0x2c>
c0000816:	29 c8                	sub    eax,ecx
c0000818:	5b                   	pop    ebx
c0000819:	5e                   	pop    esi
c000081a:	c3                   	ret    

c000081b <strcat>:
c000081b:	53                   	push   ebx
c000081c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000820:	89 c1                	mov    ecx,eax
c0000822:	8d 51 01             	lea    edx,[ecx+0x1]
c0000825:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000829:	74 04                	je     c000082f <strcat+0x14>
c000082b:	89 d1                	mov    ecx,edx
c000082d:	eb f3                	jmp    c0000822 <strcat+0x7>
c000082f:	31 d2                	xor    edx,edx
c0000831:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000835:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000838:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083b:	42                   	inc    edx
c000083c:	84 db                	test   bl,bl
c000083e:	75 f1                	jne    c0000831 <strcat+0x16>
c0000840:	5b                   	pop    ebx
c0000841:	c3                   	ret    

c0000842 <strncat>:
c0000842:	56                   	push   esi
c0000843:	53                   	push   ebx
c0000844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000848:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000850:	89 c2                	mov    edx,eax
c0000852:	85 db                	test   ebx,ebx
c0000854:	74 23                	je     c0000879 <strncat+0x37>
c0000856:	8d 72 01             	lea    esi,[edx+0x1]
c0000859:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085d:	74 04                	je     c0000863 <strncat+0x21>
c000085f:	89 f2                	mov    edx,esi
c0000861:	eb f3                	jmp    c0000856 <strncat+0x14>
c0000863:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000866:	41                   	inc    ecx
c0000867:	42                   	inc    edx
c0000868:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086b:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086e:	84 db                	test   bl,bl
c0000870:	74 07                	je     c0000879 <strncat+0x37>
c0000872:	39 f1                	cmp    ecx,esi
c0000874:	75 f0                	jne    c0000866 <strncat+0x24>
c0000876:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000879:	5b                   	pop    ebx
c000087a:	5e                   	pop    esi
c000087b:	c3                   	ret    

c000087c <strstr>:
c000087c:	57                   	push   edi
c000087d:	56                   	push   esi
c000087e:	53                   	push   ebx
c000087f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000883:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000887:	57                   	push   edi
c0000888:	e8 55 fe ff ff       	call   c00006e2 <strlen>
c000088d:	59                   	pop    ecx
c000088e:	89 c6                	mov    esi,eax
c0000890:	85 c0                	test   eax,eax
c0000892:	74 1f                	je     c00008b3 <strstr+0x37>
c0000894:	53                   	push   ebx
c0000895:	e8 48 fe ff ff       	call   c00006e2 <strlen>
c000089a:	5a                   	pop    edx
c000089b:	39 f0                	cmp    eax,esi
c000089d:	72 12                	jb     c00008b1 <strstr+0x35>
c000089f:	56                   	push   esi
c00008a0:	57                   	push   edi
c00008a1:	53                   	push   ebx
c00008a2:	e8 85 fd ff ff       	call   c000062c <memcmp>
c00008a7:	83 c4 0c             	add    esp,0xc
c00008aa:	85 c0                	test   eax,eax
c00008ac:	74 05                	je     c00008b3 <strstr+0x37>
c00008ae:	43                   	inc    ebx
c00008af:	eb e3                	jmp    c0000894 <strstr+0x18>
c00008b1:	31 db                	xor    ebx,ebx
c00008b3:	89 d8                	mov    eax,ebx
c00008b5:	5b                   	pop    ebx
c00008b6:	5e                   	pop    esi
c00008b7:	5f                   	pop    edi
c00008b8:	c3                   	ret    

c00008b9 <toupper>:
c00008b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bd:	0f b6 d0             	movzx  edx,al
c00008c0:	f6 82 c0 5b 02 c0 02 	test   BYTE PTR [edx-0x3ffda440],0x2
c00008c7:	74 03                	je     c00008cc <toupper+0x13>
c00008c9:	83 e8 20             	sub    eax,0x20
c00008cc:	c3                   	ret    

c00008cd <tolower>:
c00008cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d1:	0f b6 d0             	movzx  edx,al
c00008d4:	f6 82 c0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda440],0x1
c00008db:	74 03                	je     c00008e0 <tolower+0x13>
c00008dd:	83 c0 20             	add    eax,0x20
c00008e0:	c3                   	ret    

c00008e1 <simple_strtoul>:
c00008e1:	55                   	push   ebp
c00008e2:	57                   	push   edi
c00008e3:	56                   	push   esi
c00008e4:	53                   	push   ebx
c00008e5:	83 ec 08             	sub    esp,0x8
c00008e8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008f0:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f3:	f6 82 c0 5b 02 c0 08 	test   BYTE PTR [edx-0x3ffda440],0x8
c00008fa:	74 03                	je     c00008ff <simple_strtoul+0x1e>
c00008fc:	41                   	inc    ecx
c00008fd:	eb f1                	jmp    c00008f0 <simple_strtoul+0xf>
c00008ff:	80 fa 09             	cmp    dl,0x9
c0000902:	74 f8                	je     c00008fc <simple_strtoul+0x1b>
c0000904:	80 fa 2d             	cmp    dl,0x2d
c0000907:	75 0b                	jne    c0000914 <simple_strtoul+0x33>
c0000909:	41                   	inc    ecx
c000090a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000912:	eb 0e                	jmp    c0000922 <simple_strtoul+0x41>
c0000914:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091c:	80 fa 2b             	cmp    dl,0x2b
c000091f:	75 01                	jne    c0000922 <simple_strtoul+0x41>
c0000921:	41                   	inc    ecx
c0000922:	85 f6                	test   esi,esi
c0000924:	75 22                	jne    c0000948 <simple_strtoul+0x67>
c0000926:	be 0a 00 00 00       	mov    esi,0xa
c000092b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092e:	75 5a                	jne    c000098a <simple_strtoul+0xa9>
c0000930:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000934:	50                   	push   eax
c0000935:	e8 93 ff ff ff       	call   c00008cd <tolower>
c000093a:	5a                   	pop    edx
c000093b:	83 f8 78             	cmp    eax,0x78
c000093e:	74 03                	je     c0000943 <simple_strtoul+0x62>
c0000940:	41                   	inc    ecx
c0000941:	eb 16                	jmp    c0000959 <simple_strtoul+0x78>
c0000943:	83 c1 02             	add    ecx,0x2
c0000946:	eb 22                	jmp    c000096a <simple_strtoul+0x89>
c0000948:	8d 46 fe             	lea    eax,[esi-0x2]
c000094b:	83 f8 22             	cmp    eax,0x22
c000094e:	0f 87 b7 00 00 00    	ja     c0000a0b <simple_strtoul+0x12a>
c0000954:	83 fe 08             	cmp    esi,0x8
c0000957:	75 0c                	jne    c0000965 <simple_strtoul+0x84>
c0000959:	be 08 00 00 00       	mov    esi,0x8
c000095e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000961:	75 27                	jne    c000098a <simple_strtoul+0xa9>
c0000963:	eb 1f                	jmp    c0000984 <simple_strtoul+0xa3>
c0000965:	83 fe 10             	cmp    esi,0x10
c0000968:	75 20                	jne    c000098a <simple_strtoul+0xa9>
c000096a:	be 10 00 00 00       	mov    esi,0x10
c000096f:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000972:	75 16                	jne    c000098a <simple_strtoul+0xa9>
c0000974:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000978:	50                   	push   eax
c0000979:	e8 4f ff ff ff       	call   c00008cd <tolower>
c000097e:	5d                   	pop    ebp
c000097f:	83 f8 78             	cmp    eax,0x78
c0000982:	74 03                	je     c0000987 <simple_strtoul+0xa6>
c0000984:	41                   	inc    ecx
c0000985:	eb 03                	jmp    c000098a <simple_strtoul+0xa9>
c0000987:	83 c1 02             	add    ecx,0x2
c000098a:	31 ed                	xor    ebp,ebp
c000098c:	31 db                	xor    ebx,ebx
c000098e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000995:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 27                	je     c00009c2 <simple_strtoul+0xe1>
c000099b:	0f b6 fa             	movzx  edi,dl
c000099e:	f6 87 c0 5b 02 c0 04 	test   BYTE PTR [edi-0x3ffda440],0x4
c00009a5:	74 05                	je     c00009ac <simple_strtoul+0xcb>
c00009a7:	83 ef 30             	sub    edi,0x30
c00009aa:	eb 22                	jmp    c00009ce <simple_strtoul+0xed>
c00009ac:	0f be d2             	movsx  edx,dl
c00009af:	52                   	push   edx
c00009b0:	e8 04 ff ff ff       	call   c00008b9 <toupper>
c00009b5:	5f                   	pop    edi
c00009b6:	0f b6 d0             	movzx  edx,al
c00009b9:	f6 82 c0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda440],0x1
c00009c0:	75 09                	jne    c00009cb <simple_strtoul+0xea>
c00009c2:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c7:	75 2d                	jne    c00009f6 <simple_strtoul+0x115>
c00009c9:	eb 57                	jmp    c0000a22 <simple_strtoul+0x141>
c00009cb:	8d 78 c9             	lea    edi,[eax-0x37]
c00009ce:	39 f7                	cmp    edi,esi
c00009d0:	73 f0                	jae    c00009c2 <simple_strtoul+0xe1>
c00009d2:	31 d2                	xor    edx,edx
c00009d4:	89 f8                	mov    eax,edi
c00009d6:	f7 d0                	not    eax
c00009d8:	f7 f6                	div    esi
c00009da:	39 d8                	cmp    eax,ebx
c00009dc:	72 0e                	jb     c00009ec <simple_strtoul+0x10b>
c00009de:	0f af de             	imul   ebx,esi
c00009e1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e8:	01 fb                	add    ebx,edi
c00009ea:	eb 07                	jmp    c00009f3 <simple_strtoul+0x112>
c00009ec:	bd 01 00 00 00       	mov    ebp,0x1
c00009f1:	31 db                	xor    ebx,ebx
c00009f3:	41                   	inc    ecx
c00009f4:	eb 9f                	jmp    c0000995 <simple_strtoul+0xb4>
c00009f6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f9:	09 d8                	or     eax,ebx
c00009fb:	75 1f                	jne    c0000a1c <simple_strtoul+0x13b>
c00009fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a01:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a05:	31 db                	xor    ebx,ebx
c0000a07:	89 38                	mov    DWORD PTR [eax],edi
c0000a09:	eb 17                	jmp    c0000a22 <simple_strtoul+0x141>
c0000a0b:	31 db                	xor    ebx,ebx
c0000a0d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a12:	74 14                	je     c0000a28 <simple_strtoul+0x147>
c0000a14:	31 ed                	xor    ebp,ebp
c0000a16:	85 c9                	test   ecx,ecx
c0000a18:	75 e3                	jne    c00009fd <simple_strtoul+0x11c>
c0000a1a:	31 db                	xor    ebx,ebx
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	89 08                	mov    DWORD PTR [eax],ecx
c0000a22:	4d                   	dec    ebp
c0000a23:	75 03                	jne    c0000a28 <simple_strtoul+0x147>
c0000a25:	83 cb ff             	or     ebx,0xffffffff
c0000a28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2d:	75 02                	jne    c0000a31 <simple_strtoul+0x150>
c0000a2f:	f7 db                	neg    ebx
c0000a31:	83 c4 08             	add    esp,0x8
c0000a34:	89 d8                	mov    eax,ebx
c0000a36:	5b                   	pop    ebx
c0000a37:	5e                   	pop    esi
c0000a38:	5f                   	pop    edi
c0000a39:	5d                   	pop    ebp
c0000a3a:	c3                   	ret    

c0000a3b <largebin_index>:
c0000a3b:	89 c2                	mov    edx,eax
c0000a3d:	c1 ea 08             	shr    edx,0x8
c0000a40:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a46:	77 10                	ja     c0000a58 <largebin_index+0x1d>
c0000a48:	0f bd d2             	bsr    edx,edx
c0000a4b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4e:	d3 e8                	shr    eax,cl
c0000a50:	83 e0 03             	and    eax,0x3
c0000a53:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a57:	c3                   	ret    
c0000a58:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5d:	c3                   	ret    

c0000a5e <malloc_init_state>:
c0000a5e:	53                   	push   ebx
c0000a5f:	8d 50 34             	lea    edx,[eax+0x34]
c0000a62:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a68:	89 d1                	mov    ecx,edx
c0000a6a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a70:	83 c2 08             	add    edx,0x8
c0000a73:	39 da                	cmp    edx,ebx
c0000a75:	75 f3                	jne    c0000a6a <malloc_init_state+0xc>
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a83:	83 e2 03             	and    edx,0x3
c0000a86:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a90:	83 ca 48             	or     edx,0x48
c0000a93:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9d:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa7:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aae:	89 10                	mov    DWORD PTR [eax],edx
c0000ab0:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab3:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abd:	5b                   	pop    ebx
c0000abe:	c3                   	ret    

c0000abf <malloc_consolidate>:
c0000abf:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac1:	85 d2                	test   edx,edx
c0000ac3:	0f 84 d8 00 00 00    	je     c0000ba1 <malloc_consolidate+0xe2>
c0000ac9:	55                   	push   ebp
c0000aca:	83 e2 fd             	and    edx,0xfffffffd
c0000acd:	57                   	push   edi
c0000ace:	89 c5                	mov    ebp,eax
c0000ad0:	56                   	push   esi
c0000ad1:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad4:	53                   	push   ebx
c0000ad5:	83 ec 10             	sub    esp,0x10
c0000ad8:	89 10                	mov    DWORD PTR [eax],edx
c0000ada:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ade:	c1 ea 03             	shr    edx,0x3
c0000ae1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	0f 84 98 00 00 00    	je     c0000b8c <malloc_consolidate+0xcd>
c0000af4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afe:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b01:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b05:	89 f9                	mov    ecx,edi
c0000b07:	83 e1 fe             	and    ecx,0xfffffffe
c0000b0a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b10:	83 e3 fc             	and    ebx,0xfffffffc
c0000b13:	83 e7 01             	and    edi,0x1
c0000b16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b19:	75 14                	jne    c0000b2f <malloc_consolidate+0x70>
c0000b1b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1d:	29 fa                	sub    edx,edi
c0000b1f:	01 f9                	add    ecx,edi
c0000b21:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b24:	89 fb                	mov    ebx,edi
c0000b26:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b29:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b32:	74 40                	je     c0000b74 <malloc_consolidate+0xb5>
c0000b34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b37:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b3a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b41:	83 e7 01             	and    edi,0x1
c0000b44:	75 0e                	jne    c0000b54 <malloc_consolidate+0x95>
c0000b46:	01 d9                	add    ecx,ebx
c0000b48:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b51:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b54:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b57:	89 ce                	mov    esi,ecx
c0000b59:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5c:	83 ce 01             	or     esi,0x1
c0000b5f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b62:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b65:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b68:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b72:	eb 0c                	jmp    c0000b80 <malloc_consolidate+0xc1>
c0000b74:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b77:	83 c9 01             	or     ecx,0x1
c0000b7a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b84:	85 d2                	test   edx,edx
c0000b86:	0f 85 6f ff ff ff    	jne    c0000afb <malloc_consolidate+0x3c>
c0000b8c:	83 c5 04             	add    ebp,0x4
c0000b8f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b93:	0f 85 50 ff ff ff    	jne    c0000ae9 <malloc_consolidate+0x2a>
c0000b99:	83 c4 10             	add    esp,0x10
c0000b9c:	5b                   	pop    ebx
c0000b9d:	5e                   	pop    esi
c0000b9e:	5f                   	pop    edi
c0000b9f:	5d                   	pop    ebp
c0000ba0:	c3                   	ret    
c0000ba1:	e9 b8 fe ff ff       	jmp    c0000a5e <malloc_init_state>

c0000ba6 <dlfree>:
c0000ba6:	57                   	push   edi
c0000ba7:	56                   	push   esi
c0000ba8:	53                   	push   ebx
c0000ba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bad:	85 db                	test   ebx,ebx
c0000baf:	0f 84 e2 00 00 00    	je     c0000c97 <dlfree+0xf1>
c0000bb5:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb8:	8b 0d 00 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a000
c0000bbe:	89 f0                	mov    eax,esi
c0000bc0:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc3:	83 e0 fc             	and    eax,0xfffffffc
c0000bc6:	39 c1                	cmp    ecx,eax
c0000bc8:	72 24                	jb     c0000bee <dlfree+0x48>
c0000bca:	83 c9 03             	or     ecx,0x3
c0000bcd:	c1 e8 03             	shr    eax,0x3
c0000bd0:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000bd6:	83 e8 02             	sub    eax,0x2
c0000bd9:	8b 0c 85 04 a0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5ffc]
c0000be0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be2:	89 14 85 04 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ffc],edx
c0000be9:	e9 a9 00 00 00       	jmp    c0000c97 <dlfree+0xf1>
c0000bee:	83 e6 02             	and    esi,0x2
c0000bf1:	0f 85 a0 00 00 00    	jne    c0000c97 <dlfree+0xf1>
c0000bf7:	83 c9 01             	or     ecx,0x1
c0000bfa:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfd:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000c03:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c06:	83 e1 fc             	and    ecx,0xfffffffc
c0000c09:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0d:	75 13                	jne    c0000c22 <dlfree+0x7c>
c0000c0f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c12:	29 da                	sub    edx,ebx
c0000c14:	01 d8                	add    eax,ebx
c0000c16:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c19:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c22:	39 35 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,esi
c0000c28:	74 40                	je     c0000c6a <dlfree+0xc4>
c0000c2a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c31:	80 e3 01             	and    bl,0x1
c0000c34:	75 0e                	jne    c0000c44 <dlfree+0x9e>
c0000c36:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c39:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3c:	01 c8                	add    eax,ecx
c0000c3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c44:	8b 0d 3c a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a03c
c0000c4a:	c7 42 0c 34 a0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a034
c0000c51:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c54:	89 15 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edx
c0000c5a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5d:	89 c1                	mov    ecx,eax
c0000c5f:	83 c9 01             	or     ecx,0x1
c0000c62:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c65:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c68:	eb 10                	jmp    c0000c7a <dlfree+0xd4>
c0000c6a:	01 c8                	add    eax,ecx
c0000c6c:	89 c1                	mov    ecx,eax
c0000c6e:	83 c9 01             	or     ecx,0x1
c0000c71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c74:	89 15 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,edx
c0000c7a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7f:	76 16                	jbe    c0000c97 <dlfree+0xf1>
c0000c81:	f6 05 00 a0 02 c0 02 	test   BYTE PTR ds:0xc002a000,0x2
c0000c88:	74 0d                	je     c0000c97 <dlfree+0xf1>
c0000c8a:	5b                   	pop    ebx
c0000c8b:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	e9 28 fe ff ff       	jmp    c0000abf <malloc_consolidate>
c0000c97:	5b                   	pop    ebx
c0000c98:	5e                   	pop    esi
c0000c99:	5f                   	pop    edi
c0000c9a:	c3                   	ret    

c0000c9b <sYSMALLOc>:
c0000c9b:	55                   	push   ebp
c0000c9c:	57                   	push   edi
c0000c9d:	56                   	push   esi
c0000c9e:	53                   	push   ebx
c0000c9f:	89 d3                	mov    ebx,edx
c0000ca1:	83 ec 2c             	sub    esp,0x2c
c0000ca4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca8:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cae:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb1:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb8:	74 1f                	je     c0000cd9 <sYSMALLOc+0x3e>
c0000cba:	89 d8                	mov    eax,ebx
c0000cbc:	e8 fe fd ff ff       	call   c0000abf <malloc_consolidate>
c0000cc1:	83 ec 0c             	sub    esp,0xc
c0000cc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc8:	83 e8 07             	sub    eax,0x7
c0000ccb:	50                   	push   eax
c0000ccc:	e8 30 02 00 00       	call   c0000f01 <dlmalloc>
c0000cd1:	83 c4 10             	add    esp,0x10
c0000cd4:	e9 20 02 00 00       	jmp    c0000ef9 <sYSMALLOc+0x25e>
c0000cd9:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdc:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cf0:	83 c0 10             	add    eax,0x10
c0000cf3:	01 c1                	add    ecx,eax
c0000cf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf9:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d00:	74 04                	je     c0000d06 <sYSMALLOc+0x6b>
c0000d02:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d06:	f7 da                	neg    edx
c0000d08:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d10:	21 d1                	and    ecx,edx
c0000d12:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d16:	7f 07                	jg     c0000d1f <sYSMALLOc+0x84>
c0000d18:	31 c0                	xor    eax,eax
c0000d1a:	e9 da 01 00 00       	jmp    c0000ef9 <sYSMALLOc+0x25e>
c0000d1f:	83 ec 0c             	sub    esp,0xc
c0000d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d26:	e8 60 e2 00 00       	call   c000ef8b <sbrk>
c0000d2b:	83 c4 10             	add    esp,0x10
c0000d2e:	89 c6                	mov    esi,eax
c0000d30:	83 f8 ff             	cmp    eax,0xffffffff
c0000d33:	74 e3                	je     c0000d18 <sYSMALLOc+0x7d>
c0000d35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d39:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d40:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d46:	39 f1                	cmp    ecx,esi
c0000d48:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4e:	75 13                	jne    c0000d63 <sYSMALLOc+0xc8>
c0000d50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d54:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d58:	83 c8 01             	or     eax,0x1
c0000d5b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5e:	e9 3e 01 00 00       	jmp    c0000ea1 <sYSMALLOc+0x206>
c0000d63:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d69:	88 d0                	mov    al,dl
c0000d6b:	83 e0 01             	and    eax,0x1
c0000d6e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d73:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d77:	0f 95 c0             	setne  al
c0000d7a:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7e:	39 f1                	cmp    ecx,esi
c0000d80:	76 12                	jbe    c0000d94 <sYSMALLOc+0xf9>
c0000d82:	84 c0                	test   al,al
c0000d84:	74 0e                	je     c0000d94 <sYSMALLOc+0xf9>
c0000d86:	83 e2 fe             	and    edx,0xfffffffe
c0000d89:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8f:	e9 83 00 00 00       	jmp    c0000e17 <sYSMALLOc+0x17c>
c0000d94:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d99:	74 7c                	je     c0000e17 <sYSMALLOc+0x17c>
c0000d9b:	84 c0                	test   al,al
c0000d9d:	74 0c                	je     c0000dab <sYSMALLOc+0x110>
c0000d9f:	89 f0                	mov    eax,esi
c0000da1:	29 c8                	sub    eax,ecx
c0000da3:	01 e8                	add    eax,ebp
c0000da5:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dab:	89 f2                	mov    edx,esi
c0000dad:	83 e2 07             	and    edx,0x7
c0000db0:	74 0c                	je     c0000dbe <sYSMALLOc+0x123>
c0000db2:	b8 08 00 00 00       	mov    eax,0x8
c0000db7:	29 d0                	sub    eax,edx
c0000db9:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbc:	eb 04                	jmp    c0000dc2 <sYSMALLOc+0x127>
c0000dbe:	89 f5                	mov    ebp,esi
c0000dc0:	31 c0                	xor    eax,eax
c0000dc2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dce:	01 c1                	add    ecx,eax
c0000dd0:	83 ec 0c             	sub    esp,0xc
c0000dd3:	01 f1                	add    ecx,esi
c0000dd5:	01 ca                	add    edx,ecx
c0000dd7:	29 c8                	sub    eax,ecx
c0000dd9:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddd:	01 c2                	add    edx,eax
c0000ddf:	52                   	push   edx
c0000de0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de4:	e8 a2 e1 00 00       	call   c000ef8b <sbrk>
c0000de9:	83 c4 10             	add    esp,0x10
c0000dec:	83 f8 ff             	cmp    eax,0xffffffff
c0000def:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df3:	75 0f                	jne    c0000e04 <sYSMALLOc+0x169>
c0000df5:	83 ec 0c             	sub    esp,0xc
c0000df8:	6a 00                	push   0x0
c0000dfa:	e8 8c e1 00 00       	call   c000ef8b <sbrk>
c0000dff:	83 c4 10             	add    esp,0x10
c0000e02:	eb 30                	jmp    c0000e34 <sYSMALLOc+0x199>
c0000e04:	39 c6                	cmp    esi,eax
c0000e06:	76 33                	jbe    c0000e3b <sYSMALLOc+0x1a0>
c0000e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e13:	01 f0                	add    eax,esi
c0000e15:	eb 1d                	jmp    c0000e34 <sYSMALLOc+0x199>
c0000e17:	83 ec 0c             	sub    esp,0xc
c0000e1a:	89 f5                	mov    ebp,esi
c0000e1c:	6a 00                	push   0x0
c0000e1e:	e8 68 e1 00 00       	call   c000ef8b <sbrk>
c0000e23:	89 c2                	mov    edx,eax
c0000e25:	29 f2                	sub    edx,esi
c0000e27:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2b:	83 c4 10             	add    esp,0x10
c0000e2e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e34:	31 d2                	xor    edx,edx
c0000e36:	83 f8 ff             	cmp    eax,0xffffffff
c0000e39:	74 66                	je     c0000ea1 <sYSMALLOc+0x206>
c0000e3b:	29 e8                	sub    eax,ebp
c0000e3d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e40:	01 d0                	add    eax,edx
c0000e42:	83 c8 01             	or     eax,0x1
c0000e45:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e53:	74 4c                	je     c0000ea1 <sYSMALLOc+0x206>
c0000e55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e59:	83 e8 0c             	sub    eax,0xc
c0000e5c:	83 e0 f8             	and    eax,0xfffffff8
c0000e5f:	89 c2                	mov    edx,eax
c0000e61:	83 ca 01             	or     edx,0x1
c0000e64:	83 f8 0f             	cmp    eax,0xf
c0000e67:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e6a:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e72:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e7a:	76 25                	jbe    c0000ea1 <sYSMALLOc+0x206>
c0000e7c:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e82:	83 ec 0c             	sub    esp,0xc
c0000e85:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8f:	83 c7 08             	add    edi,0x8
c0000e92:	57                   	push   edi
c0000e93:	e8 0e fd ff ff       	call   c0000ba6 <dlfree>
c0000e98:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9e:	83 c4 10             	add    esp,0x10
c0000ea1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ead:	73 06                	jae    c0000eb5 <sYSMALLOc+0x21a>
c0000eaf:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ebb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec1:	73 06                	jae    c0000ec9 <sYSMALLOc+0x22e>
c0000ec3:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ecf:	83 e2 fc             	and    edx,0xfffffffc
c0000ed2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed6:	0f 82 3c fe ff ff    	jb     c0000d18 <sYSMALLOc+0x7d>
c0000edc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ee0:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee3:	29 fa                	sub    edx,edi
c0000ee5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee8:	83 ca 01             	or     edx,0x1
c0000eeb:	89 fb                	mov    ebx,edi
c0000eed:	83 c0 08             	add    eax,0x8
c0000ef0:	83 cb 01             	or     ebx,0x1
c0000ef3:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef9:	83 c4 2c             	add    esp,0x2c
c0000efc:	5b                   	pop    ebx
c0000efd:	5e                   	pop    esi
c0000efe:	5f                   	pop    edi
c0000eff:	5d                   	pop    ebp
c0000f00:	c3                   	ret    

c0000f01 <dlmalloc>:
c0000f01:	55                   	push   ebp
c0000f02:	57                   	push   edi
c0000f03:	56                   	push   esi
c0000f04:	53                   	push   ebx
c0000f05:	83 ec 1c             	sub    esp,0x1c
c0000f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0c:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0f:	0f 87 70 03 00 00    	ja     c0001285 <dlmalloc+0x384>
c0000f15:	83 c0 0b             	add    eax,0xb
c0000f18:	be 10 00 00 00       	mov    esi,0x10
c0000f1d:	83 f8 0f             	cmp    eax,0xf
c0000f20:	76 05                	jbe    c0000f27 <dlmalloc+0x26>
c0000f22:	83 e0 f8             	and    eax,0xfffffff8
c0000f25:	89 c6                	mov    esi,eax
c0000f27:	8b 3d 00 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a000
c0000f2d:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f33:	75 17                	jne    c0000f4c <dlmalloc+0x4b>
c0000f35:	85 ff                	test   edi,edi
c0000f37:	0f 85 05 03 00 00    	jne    c0001242 <dlmalloc+0x341>
c0000f3d:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000f42:	e8 78 fb ff ff       	call   c0000abf <malloc_consolidate>
c0000f47:	e9 f6 02 00 00       	jmp    c0001242 <dlmalloc+0x341>
c0000f4c:	39 f7                	cmp    edi,esi
c0000f4e:	72 1f                	jb     c0000f6f <dlmalloc+0x6e>
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	c1 ea 03             	shr    edx,0x3
c0000f55:	83 ea 02             	sub    edx,0x2
c0000f58:	8b 04 95 04 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ffc]
c0000f5f:	85 c0                	test   eax,eax
c0000f61:	74 0c                	je     c0000f6f <dlmalloc+0x6e>
c0000f63:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f66:	89 0c 95 04 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5ffc],ecx
c0000f6d:	eb 30                	jmp    c0000f9f <dlmalloc+0x9e>
c0000f6f:	89 f0                	mov    eax,esi
c0000f71:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f77:	77 2e                	ja     c0000fa7 <dlmalloc+0xa6>
c0000f79:	c1 e8 03             	shr    eax,0x3
c0000f7c:	8d 14 c5 34 a0 02 c0 	lea    edx,[eax*8-0x3ffd5fcc]
c0000f83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f87:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f8a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8d:	39 c3                	cmp    ebx,eax
c0000f8f:	74 2e                	je     c0000fbf <dlmalloc+0xbe>
c0000f91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f94:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f99:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9c:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9f:	83 c0 08             	add    eax,0x8
c0000fa2:	e9 e0 02 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0000fa7:	e8 8f fa ff ff       	call   c0000a3b <largebin_index>
c0000fac:	83 e7 02             	and    edi,0x2
c0000faf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb3:	74 0a                	je     c0000fbf <dlmalloc+0xbe>
c0000fb5:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000fba:	e8 00 fb ff ff       	call   c0000abf <malloc_consolidate>
c0000fbf:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc6:	8b 1d 40 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a040
c0000fcc:	81 fb 34 a0 02 c0    	cmp    ebx,0xc002a034
c0000fd2:	0f 84 13 01 00 00    	je     c00010eb <dlmalloc+0x1ea>
c0000fd8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fdb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fde:	83 e7 fc             	and    edi,0xfffffffc
c0000fe1:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe7:	77 4c                	ja     c0001035 <dlmalloc+0x134>
c0000fe9:	3d 34 a0 02 c0       	cmp    eax,0xc002a034
c0000fee:	75 45                	jne    c0001035 <dlmalloc+0x134>
c0000ff0:	39 1d 30 a0 02 c0    	cmp    DWORD PTR ds:0xc002a030,ebx
c0000ff6:	75 3d                	jne    c0001035 <dlmalloc+0x134>
c0000ff8:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffc:	73 37                	jae    c0001035 <dlmalloc+0x134>
c0000ffe:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001001:	89 fa                	mov    edx,edi
c0001003:	a3 3c a0 02 c0       	mov    ds:0xc002a03c,eax
c0001008:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c000100d:	a3 30 a0 02 c0       	mov    ds:0xc002a030,eax
c0001012:	29 f2                	sub    edx,esi
c0001014:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c000101b:	c7 40 0c 34 a0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a034
c0001022:	83 ce 01             	or     esi,0x1
c0001025:	89 d1                	mov    ecx,edx
c0001027:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000102a:	83 c9 01             	or     ecx,0x1
c000102d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001030:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001033:	eb 15                	jmp    c000104a <dlmalloc+0x149>
c0001035:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c000103a:	39 fe                	cmp    esi,edi
c000103c:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c0001043:	75 0d                	jne    c0001052 <dlmalloc+0x151>
c0001045:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000104a:	8d 43 08             	lea    eax,[ebx+0x8]
c000104d:	e9 35 02 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001052:	89 f8                	mov    eax,edi
c0001054:	81 ff ff 00 00 00    	cmp    edi,0xff
c000105a:	77 19                	ja     c0001075 <dlmalloc+0x174>
c000105c:	c1 e8 03             	shr    eax,0x3
c000105f:	8d 14 00             	lea    edx,[eax+eax*1]
c0001062:	83 c2 0d             	add    edx,0xd
c0001065:	8d 2c 95 f8 9f 02 c0 	lea    ebp,[edx*4-0x3ffd6008]
c000106c:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c0001073:	eb 46                	jmp    c00010bb <dlmalloc+0x1ba>
c0001075:	e8 c1 f9 ff ff       	call   c0000a3b <largebin_index>
c000107a:	8d 14 00             	lea    edx,[eax+eax*1]
c000107d:	83 c2 0d             	add    edx,0xd
c0001080:	8d 0c 95 00 a0 02 c0 	lea    ecx,[edx*4-0x3ffd6000]
c0001087:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c000108e:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001091:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001095:	89 d5                	mov    ebp,edx
c0001097:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109b:	74 1e                	je     c00010bb <dlmalloc+0x1ba>
c000109d:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010a0:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a3:	77 12                	ja     c00010b7 <dlmalloc+0x1b6>
c00010a5:	83 cf 01             	or     edi,0x1
c00010a8:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010ab:	76 05                	jbe    c00010b2 <dlmalloc+0x1b1>
c00010ad:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010b0:	eb f6                	jmp    c00010a8 <dlmalloc+0x1a7>
c00010b2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b5:	eb 04                	jmp    c00010bb <dlmalloc+0x1ba>
c00010b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010bb:	89 c7                	mov    edi,eax
c00010bd:	88 c1                	mov    cl,al
c00010bf:	c1 ff 05             	sar    edi,0x5
c00010c2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c6:	bf 01 00 00 00       	mov    edi,0x1
c00010cb:	d3 e7                	shl    edi,cl
c00010cd:	89 f8                	mov    eax,edi
c00010cf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d3:	09 04 bd 34 a3 02 c0 	or     DWORD PTR [edi*4-0x3ffd5ccc],eax
c00010da:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010e0:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e3:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e6:	e9 db fe ff ff       	jmp    c0000fc6 <dlmalloc+0xc5>
c00010eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f1:	76 78                	jbe    c000116b <dlmalloc+0x26a>
c00010f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f7:	8d 04 c5 34 a0 02 c0 	lea    eax,[eax*8-0x3ffd5fcc]
c00010fe:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001101:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001104:	39 ca                	cmp    edx,ecx
c0001106:	74 63                	je     c000116b <dlmalloc+0x26a>
c0001108:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110e:	83 e3 fc             	and    ebx,0xfffffffc
c0001111:	39 de                	cmp    esi,ebx
c0001113:	77 52                	ja     c0001167 <dlmalloc+0x266>
c0001115:	89 df                	mov    edi,ebx
c0001117:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000111a:	29 f7                	sub    edi,esi
c000111c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111f:	01 d3                	add    ebx,edx
c0001121:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001124:	83 ff 0f             	cmp    edi,0xf
c0001127:	8d 42 08             	lea    eax,[edx+0x8]
c000112a:	77 09                	ja     c0001135 <dlmalloc+0x234>
c000112c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001130:	e9 52 01 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001135:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001138:	83 ce 01             	or     esi,0x1
c000113b:	89 0d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,ecx
c0001141:	89 0d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,ecx
c0001147:	c7 41 08 34 a0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a034
c000114e:	c7 41 0c 34 a0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a034
c0001155:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001158:	89 fa                	mov    edx,edi
c000115a:	83 ca 01             	or     edx,0x1
c000115d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001160:	89 3b                	mov    DWORD PTR [ebx],edi
c0001162:	e9 20 01 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001167:	89 c2                	mov    edx,eax
c0001169:	eb 99                	jmp    c0001104 <dlmalloc+0x203>
c000116b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116f:	b8 01 00 00 00       	mov    eax,0x1
c0001174:	41                   	inc    ecx
c0001175:	89 cb                	mov    ebx,ecx
c0001177:	8d 14 cd 2c a0 02 c0 	lea    edx,[ecx*8-0x3ffd5fd4]
c000117e:	c1 eb 05             	shr    ebx,0x5
c0001181:	d3 e0                	shl    eax,cl
c0001183:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c000118a:	39 f8                	cmp    eax,edi
c000118c:	77 04                	ja     c0001192 <dlmalloc+0x291>
c000118e:	85 c0                	test   eax,eax
c0001190:	75 26                	jne    c00011b8 <dlmalloc+0x2b7>
c0001192:	43                   	inc    ebx
c0001193:	83 fb 02             	cmp    ebx,0x2
c0001196:	0f 87 a6 00 00 00    	ja     c0001242 <dlmalloc+0x341>
c000119c:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c00011a3:	85 ff                	test   edi,edi
c00011a5:	74 eb                	je     c0001192 <dlmalloc+0x291>
c00011a7:	89 d8                	mov    eax,ebx
c00011a9:	c1 e0 06             	shl    eax,0x6
c00011ac:	8d 14 85 2c a0 02 c0 	lea    edx,[eax*4-0x3ffd5fd4]
c00011b3:	b8 01 00 00 00       	mov    eax,0x1
c00011b8:	85 f8                	test   eax,edi
c00011ba:	75 07                	jne    c00011c3 <dlmalloc+0x2c2>
c00011bc:	83 c2 08             	add    edx,0x8
c00011bf:	01 c0                	add    eax,eax
c00011c1:	eb f5                	jmp    c00011b8 <dlmalloc+0x2b7>
c00011c3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c6:	39 ca                	cmp    edx,ecx
c00011c8:	75 14                	jne    c00011de <dlmalloc+0x2dd>
c00011ca:	89 c1                	mov    ecx,eax
c00011cc:	83 c2 08             	add    edx,0x8
c00011cf:	f7 d1                	not    ecx
c00011d1:	01 c0                	add    eax,eax
c00011d3:	21 cf                	and    edi,ecx
c00011d5:	89 3c 9d 34 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5ccc],edi
c00011dc:	eb ac                	jmp    c000118a <dlmalloc+0x289>
c00011de:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e1:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e4:	83 e0 fc             	and    eax,0xfffffffc
c00011e7:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011ea:	89 c3                	mov    ebx,eax
c00011ec:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ef:	29 f3                	sub    ebx,esi
c00011f1:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f4:	83 fb 0f             	cmp    ebx,0xf
c00011f7:	8d 41 08             	lea    eax,[ecx+0x8]
c00011fa:	77 09                	ja     c0001205 <dlmalloc+0x304>
c00011fc:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001200:	e9 82 00 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001205:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001208:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120e:	89 3d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edi
c0001214:	89 3d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,edi
c000121a:	c7 47 08 34 a0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a034
c0001221:	c7 47 0c 34 a0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a034
c0001228:	77 06                	ja     c0001230 <dlmalloc+0x32f>
c000122a:	89 3d 30 a0 02 c0    	mov    DWORD PTR ds:0xc002a030,edi
c0001230:	83 ce 01             	or     esi,0x1
c0001233:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001236:	89 d9                	mov    ecx,ebx
c0001238:	83 c9 01             	or     ecx,0x1
c000123b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123e:	89 1a                	mov    DWORD PTR [edx],ebx
c0001240:	eb 45                	jmp    c0001287 <dlmalloc+0x386>
c0001242:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c0001247:	8d 4e 10             	lea    ecx,[esi+0x10]
c000124a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124d:	83 e2 fc             	and    edx,0xfffffffc
c0001250:	39 d1                	cmp    ecx,edx
c0001252:	77 1e                	ja     c0001272 <dlmalloc+0x371>
c0001254:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001257:	89 f3                	mov    ebx,esi
c0001259:	89 0d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ecx
c000125f:	83 cb 01             	or     ebx,0x1
c0001262:	29 f2                	sub    edx,esi
c0001264:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001267:	83 ca 01             	or     edx,0x1
c000126a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126d:	e9 2d fd ff ff       	jmp    c0000f9f <dlmalloc+0x9e>
c0001272:	83 c4 1c             	add    esp,0x1c
c0001275:	89 f0                	mov    eax,esi
c0001277:	5b                   	pop    ebx
c0001278:	ba 00 a0 02 c0       	mov    edx,0xc002a000
c000127d:	5e                   	pop    esi
c000127e:	5f                   	pop    edi
c000127f:	5d                   	pop    ebp
c0001280:	e9 16 fa ff ff       	jmp    c0000c9b <sYSMALLOc>
c0001285:	31 c0                	xor    eax,eax
c0001287:	83 c4 1c             	add    esp,0x1c
c000128a:	5b                   	pop    ebx
c000128b:	5e                   	pop    esi
c000128c:	5f                   	pop    edi
c000128d:	5d                   	pop    ebp
c000128e:	c3                   	ret    

c000128f <iALLOc>:
c000128f:	55                   	push   ebp
c0001290:	89 c5                	mov    ebp,eax
c0001292:	57                   	push   edi
c0001293:	56                   	push   esi
c0001294:	53                   	push   ebx
c0001295:	83 ec 2c             	sub    esp,0x2c
c0001298:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a4:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c00012ab:	75 12                	jne    c00012bf <iALLOc+0x30>
c00012ad:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b1:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00012b6:	e8 04 f8 ff ff       	call   c0000abf <malloc_consolidate>
c00012bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c4:	74 12                	je     c00012d8 <iALLOc+0x49>
c00012c6:	85 ed                	test   ebp,ebp
c00012c8:	0f 84 64 01 00 00    	je     c0001432 <iALLOc+0x1a3>
c00012ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d6:	eb 33                	jmp    c000130b <iALLOc+0x7c>
c00012d8:	85 ed                	test   ebp,ebp
c00012da:	75 14                	jne    c00012f0 <iALLOc+0x61>
c00012dc:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e4:	83 c4 2c             	add    esp,0x2c
c00012e7:	5b                   	pop    ebx
c00012e8:	5e                   	pop    esi
c00012e9:	5f                   	pop    edi
c00012ea:	5d                   	pop    ebp
c00012eb:	e9 11 fc ff ff       	jmp    c0000f01 <dlmalloc>
c00012f0:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f7:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012ff:	83 f8 0f             	cmp    eax,0xf
c0001302:	76 07                	jbe    c000130b <iALLOc+0x7c>
c0001304:	83 e0 f8             	and    eax,0xfffffff8
c0001307:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001310:	75 09                	jne    c000131b <iALLOc+0x8c>
c0001312:	89 d0                	mov    eax,edx
c0001314:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001317:	31 f6                	xor    esi,esi
c0001319:	eb 3b                	jmp    c0001356 <iALLOc+0xc7>
c000131b:	8b 02                	mov    eax,DWORD PTR [edx]
c000131d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001325:	83 c0 0b             	add    eax,0xb
c0001328:	83 f8 0f             	cmp    eax,0xf
c000132b:	76 07                	jbe    c0001334 <iALLOc+0xa5>
c000132d:	83 e0 f8             	and    eax,0xfffffff8
c0001330:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001334:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001338:	0f af f5             	imul   esi,ebp
c000133b:	eb 25                	jmp    c0001362 <iALLOc+0xd3>
c000133d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001342:	bb 10 00 00 00       	mov    ebx,0x10
c0001347:	83 f9 0f             	cmp    ecx,0xf
c000134a:	76 05                	jbe    c0001351 <iALLOc+0xc2>
c000134c:	83 e1 f8             	and    ecx,0xfffffff8
c000134f:	89 cb                	mov    ebx,ecx
c0001351:	01 de                	add    esi,ebx
c0001353:	83 c0 04             	add    eax,0x4
c0001356:	39 c7                	cmp    edi,eax
c0001358:	75 e3                	jne    c000133d <iALLOc+0xae>
c000135a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001362:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001366:	8b 1d 54 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a354
c000136c:	83 ec 0c             	sub    esp,0xc
c000136f:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c0001379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137d:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001381:	50                   	push   eax
c0001382:	e8 7a fb ff ff       	call   c0000f01 <dlmalloc>
c0001387:	83 c4 10             	add    esp,0x10
c000138a:	89 1d 54 a3 02 c0    	mov    DWORD PTR ds:0xc002a354,ebx
c0001390:	85 c0                	test   eax,eax
c0001392:	0f 84 92 00 00 00    	je     c000142a <iALLOc+0x19b>
c0001398:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139b:	8d 78 f8             	lea    edi,[eax-0x8]
c000139e:	83 e3 fc             	and    ebx,0xfffffffc
c00013a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a5:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013aa:	74 1e                	je     c00013ca <iALLOc+0x13b>
c00013ac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013b0:	89 d9                	mov    ecx,ebx
c00013b2:	52                   	push   edx
c00013b3:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b7:	83 e9 04             	sub    ecx,0x4
c00013ba:	51                   	push   ecx
c00013bb:	6a 00                	push   0x0
c00013bd:	50                   	push   eax
c00013be:	e8 02 f3 ff ff       	call   c00006c5 <memset>
c00013c3:	83 c4 10             	add    esp,0x10
c00013c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013cf:	75 14                	jne    c00013e5 <iALLOc+0x156>
c00013d1:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d4:	29 f3                	sub    ebx,esi
c00013d6:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d9:	83 cb 01             	or     ebx,0x1
c00013dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e3:	89 f3                	mov    ebx,esi
c00013e5:	31 c0                	xor    eax,eax
c00013e7:	4d                   	dec    ebp
c00013e8:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ef:	39 c5                	cmp    ebp,eax
c00013f1:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f4:	74 2c                	je     c0001422 <iALLOc+0x193>
c00013f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013fa:	85 c9                	test   ecx,ecx
c00013fc:	75 15                	jne    c0001413 <iALLOc+0x184>
c00013fe:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001401:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001404:	b9 10 00 00 00       	mov    ecx,0x10
c0001409:	83 fe 0f             	cmp    esi,0xf
c000140c:	76 05                	jbe    c0001413 <iALLOc+0x184>
c000140e:	83 e6 f8             	and    esi,0xfffffff8
c0001411:	89 f1                	mov    ecx,esi
c0001413:	89 ce                	mov    esi,ecx
c0001415:	29 cb                	sub    ebx,ecx
c0001417:	83 ce 01             	or     esi,0x1
c000141a:	40                   	inc    eax
c000141b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141e:	01 cf                	add    edi,ecx
c0001420:	eb c6                	jmp    c00013e8 <iALLOc+0x159>
c0001422:	83 cb 01             	or     ebx,0x1
c0001425:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001428:	eb 08                	jmp    c0001432 <iALLOc+0x1a3>
c000142a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001436:	83 c4 2c             	add    esp,0x2c
c0001439:	5b                   	pop    ebx
c000143a:	5e                   	pop    esi
c000143b:	5f                   	pop    edi
c000143c:	5d                   	pop    ebp
c000143d:	c3                   	ret    

c000143e <dlrealloc>:
c000143e:	55                   	push   ebp
c000143f:	57                   	push   edi
c0001440:	56                   	push   esi
c0001441:	53                   	push   ebx
c0001442:	83 ec 1c             	sub    esp,0x1c
c0001445:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001449:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144d:	85 db                	test   ebx,ebx
c000144f:	75 10                	jne    c0001461 <dlrealloc+0x23>
c0001451:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	5b                   	pop    ebx
c0001459:	5e                   	pop    esi
c000145a:	5f                   	pop    edi
c000145b:	5d                   	pop    ebp
c000145c:	e9 a0 fa ff ff       	jmp    c0000f01 <dlmalloc>
c0001461:	83 f8 df             	cmp    eax,0xffffffdf
c0001464:	76 07                	jbe    c000146d <dlrealloc+0x2f>
c0001466:	31 db                	xor    ebx,ebx
c0001468:	e9 7c 01 00 00       	jmp    c00015e9 <dlrealloc+0x1ab>
c000146d:	83 c0 0b             	add    eax,0xb
c0001470:	bf 10 00 00 00       	mov    edi,0x10
c0001475:	83 f8 0f             	cmp    eax,0xf
c0001478:	76 05                	jbe    c000147f <dlrealloc+0x41>
c000147a:	83 e0 f8             	and    eax,0xfffffff8
c000147d:	89 c7                	mov    edi,eax
c000147f:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001482:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001485:	89 c6                	mov    esi,eax
c0001487:	83 e6 fc             	and    esi,0xfffffffc
c000148a:	a8 02                	test   al,0x2
c000148c:	75 d8                	jne    c0001466 <dlrealloc+0x28>
c000148e:	39 f7                	cmp    edi,esi
c0001490:	0f 86 15 01 00 00    	jbe    c00015ab <dlrealloc+0x16d>
c0001496:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	39 15 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,edx
c00014a3:	75 33                	jne    c00014d8 <dlrealloc+0x9a>
c00014a5:	83 e1 fc             	and    ecx,0xfffffffc
c00014a8:	01 f1                	add    ecx,esi
c00014aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ae:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b1:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b5:	77 49                	ja     c0001500 <dlrealloc+0xc2>
c00014b7:	01 fd                	add    ebp,edi
c00014b9:	83 e0 01             	and    eax,0x1
c00014bc:	09 f8                	or     eax,edi
c00014be:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c1:	89 2d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ebp
c00014c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014cb:	29 f8                	sub    eax,edi
c00014cd:	83 c8 01             	or     eax,0x1
c00014d0:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d3:	e9 11 01 00 00       	jmp    c00015e9 <dlrealloc+0x1ab>
c00014d8:	89 c8                	mov    eax,ecx
c00014da:	83 e0 fe             	and    eax,0xfffffffe
c00014dd:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e2:	75 1c                	jne    c0001500 <dlrealloc+0xc2>
c00014e4:	83 e1 fc             	and    ecx,0xfffffffc
c00014e7:	01 f1                	add    ecx,esi
c00014e9:	39 cf                	cmp    edi,ecx
c00014eb:	77 13                	ja     c0001500 <dlrealloc+0xc2>
c00014ed:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014f0:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f3:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f6:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f9:	89 ce                	mov    esi,ecx
c00014fb:	e9 ab 00 00 00       	jmp    c00015ab <dlrealloc+0x16d>
c0001500:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001504:	8d 47 f9             	lea    eax,[edi-0x7]
c0001507:	83 ec 0c             	sub    esp,0xc
c000150a:	50                   	push   eax
c000150b:	e8 f1 f9 ff ff       	call   c0000f01 <dlmalloc>
c0001510:	83 c4 10             	add    esp,0x10
c0001513:	89 c1                	mov    ecx,eax
c0001515:	85 c0                	test   eax,eax
c0001517:	0f 84 49 ff ff ff    	je     c0001466 <dlrealloc+0x28>
c000151d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001520:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001524:	39 c2                	cmp    edx,eax
c0001526:	75 0a                	jne    c0001532 <dlrealloc+0xf4>
c0001528:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	01 c6                	add    esi,eax
c0001530:	eb 79                	jmp    c00015ab <dlrealloc+0x16d>
c0001532:	83 ee 04             	sub    esi,0x4
c0001535:	83 fe 27             	cmp    esi,0x27
c0001538:	76 16                	jbe    c0001550 <dlrealloc+0x112>
c000153a:	50                   	push   eax
c000153b:	56                   	push   esi
c000153c:	53                   	push   ebx
c000153d:	51                   	push   ecx
c000153e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001542:	e8 48 f1 ff ff       	call   c000068f <memcpy>
c0001547:	83 c4 10             	add    esp,0x10
c000154a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154e:	eb 43                	jmp    c0001593 <dlrealloc+0x155>
c0001550:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001552:	83 fe 13             	cmp    esi,0x13
c0001555:	89 01                	mov    DWORD PTR [ecx],eax
c0001557:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000155a:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001560:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001563:	76 2e                	jbe    c0001593 <dlrealloc+0x155>
c0001565:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001568:	83 fe 1b             	cmp    esi,0x1b
c000156b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001571:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001574:	76 1d                	jbe    c0001593 <dlrealloc+0x155>
c0001576:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001579:	83 fe 23             	cmp    esi,0x23
c000157c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001582:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001585:	76 0c                	jbe    c0001593 <dlrealloc+0x155>
c0001587:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000158a:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001590:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001593:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001597:	83 ec 0c             	sub    esp,0xc
c000159a:	53                   	push   ebx
c000159b:	e8 06 f6 ff ff       	call   c0000ba6 <dlfree>
c00015a0:	83 c4 10             	add    esp,0x10
c00015a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a7:	89 cb                	mov    ebx,ecx
c00015a9:	eb 3e                	jmp    c00015e9 <dlrealloc+0x1ab>
c00015ab:	89 f2                	mov    edx,esi
c00015ad:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015b0:	29 fa                	sub    edx,edi
c00015b2:	83 e1 01             	and    ecx,0x1
c00015b5:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b9:	83 fa 0f             	cmp    edx,0xf
c00015bc:	77 0b                	ja     c00015c9 <dlrealloc+0x18b>
c00015be:	09 ce                	or     esi,ecx
c00015c0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c7:	eb 20                	jmp    c00015e9 <dlrealloc+0x1ab>
c00015c9:	01 fd                	add    ebp,edi
c00015cb:	83 ec 0c             	sub    esp,0xc
c00015ce:	09 cf                	or     edi,ecx
c00015d0:	83 ca 01             	or     edx,0x1
c00015d3:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d6:	83 c5 08             	add    ebp,0x8
c00015d9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015dc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e0:	55                   	push   ebp
c00015e1:	e8 c0 f5 ff ff       	call   c0000ba6 <dlfree>
c00015e6:	83 c4 10             	add    esp,0x10
c00015e9:	83 c4 1c             	add    esp,0x1c
c00015ec:	89 d8                	mov    eax,ebx
c00015ee:	5b                   	pop    ebx
c00015ef:	5e                   	pop    esi
c00015f0:	5f                   	pop    edi
c00015f1:	5d                   	pop    ebp
c00015f2:	c3                   	ret    

c00015f3 <dlmemalign>:
c00015f3:	55                   	push   ebp
c00015f4:	57                   	push   edi
c00015f5:	56                   	push   esi
c00015f6:	53                   	push   ebx
c00015f7:	83 ec 0c             	sub    esp,0xc
c00015fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001602:	83 fa 08             	cmp    edx,0x8
c0001605:	77 10                	ja     c0001617 <dlmemalign+0x24>
c0001607:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160b:	83 c4 0c             	add    esp,0xc
c000160e:	5b                   	pop    ebx
c000160f:	5e                   	pop    esi
c0001610:	5f                   	pop    edi
c0001611:	5d                   	pop    ebp
c0001612:	e9 ea f8 ff ff       	jmp    c0000f01 <dlmalloc>
c0001617:	bf 10 00 00 00       	mov    edi,0x10
c000161c:	83 fa 0f             	cmp    edx,0xf
c000161f:	76 13                	jbe    c0001634 <dlmemalign+0x41>
c0001621:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001624:	85 d1                	test   ecx,edx
c0001626:	75 04                	jne    c000162c <dlmemalign+0x39>
c0001628:	89 d7                	mov    edi,edx
c000162a:	eb 08                	jmp    c0001634 <dlmemalign+0x41>
c000162c:	39 d7                	cmp    edi,edx
c000162e:	73 04                	jae    c0001634 <dlmemalign+0x41>
c0001630:	01 ff                	add    edi,edi
c0001632:	eb f8                	jmp    c000162c <dlmemalign+0x39>
c0001634:	83 f8 df             	cmp    eax,0xffffffdf
c0001637:	76 07                	jbe    c0001640 <dlmemalign+0x4d>
c0001639:	31 c0                	xor    eax,eax
c000163b:	e9 ce 00 00 00       	jmp    c000170e <dlmemalign+0x11b>
c0001640:	83 c0 0b             	add    eax,0xb
c0001643:	bd 10 00 00 00       	mov    ebp,0x10
c0001648:	83 f8 0f             	cmp    eax,0xf
c000164b:	76 05                	jbe    c0001652 <dlmemalign+0x5f>
c000164d:	83 e0 f8             	and    eax,0xfffffff8
c0001650:	89 c5                	mov    ebp,eax
c0001652:	83 ec 0c             	sub    esp,0xc
c0001655:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001659:	50                   	push   eax
c000165a:	e8 a2 f8 ff ff       	call   c0000f01 <dlmalloc>
c000165f:	83 c4 10             	add    esp,0x10
c0001662:	89 c1                	mov    ecx,eax
c0001664:	85 c0                	test   eax,eax
c0001666:	74 d1                	je     c0001639 <dlmemalign+0x46>
c0001668:	31 d2                	xor    edx,edx
c000166a:	8d 70 f8             	lea    esi,[eax-0x8]
c000166d:	f7 f7                	div    edi
c000166f:	85 d2                	test   edx,edx
c0001671:	74 62                	je     c00016d5 <dlmemalign+0xe2>
c0001673:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001677:	89 f8                	mov    eax,edi
c0001679:	f7 d8                	neg    eax
c000167b:	21 c3                	and    ebx,eax
c000167d:	83 eb 08             	sub    ebx,0x8
c0001680:	89 d8                	mov    eax,ebx
c0001682:	29 f0                	sub    eax,esi
c0001684:	83 f8 0f             	cmp    eax,0xf
c0001687:	77 02                	ja     c000168b <dlmemalign+0x98>
c0001689:	01 fb                	add    ebx,edi
c000168b:	89 d8                	mov    eax,ebx
c000168d:	29 f0                	sub    eax,esi
c000168f:	89 c6                	mov    esi,eax
c0001691:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001694:	89 c2                	mov    edx,eax
c0001696:	83 e2 fc             	and    edx,0xfffffffc
c0001699:	29 f2                	sub    edx,esi
c000169b:	a8 02                	test   al,0x2
c000169d:	74 10                	je     c00016af <dlmemalign+0xbc>
c000169f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a2:	83 ca 02             	or     edx,0x2
c00016a5:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a8:	89 33                	mov    DWORD PTR [ebx],esi
c00016aa:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ad:	eb 5f                	jmp    c000170e <dlmemalign+0x11b>
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	89 d0                	mov    eax,edx
c00016b4:	83 c8 01             	or     eax,0x1
c00016b7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016ba:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016bf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 f0                	or     eax,esi
c00016c7:	89 de                	mov    esi,ebx
c00016c9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cc:	51                   	push   ecx
c00016cd:	e8 d4 f4 ff ff       	call   c0000ba6 <dlfree>
c00016d2:	83 c4 10             	add    esp,0x10
c00016d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d8:	a8 02                	test   al,0x2
c00016da:	75 2f                	jne    c000170b <dlmemalign+0x118>
c00016dc:	83 e0 fc             	and    eax,0xfffffffc
c00016df:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e2:	39 c2                	cmp    edx,eax
c00016e4:	73 25                	jae    c000170b <dlmemalign+0x118>
c00016e6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e9:	83 ec 0c             	sub    esp,0xc
c00016ec:	29 e8                	sub    eax,ebp
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	83 c8 01             	or     eax,0x1
c00016f4:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016fa:	83 e0 01             	and    eax,0x1
c00016fd:	09 c5                	or     ebp,eax
c00016ff:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001702:	52                   	push   edx
c0001703:	e8 9e f4 ff ff       	call   c0000ba6 <dlfree>
c0001708:	83 c4 10             	add    esp,0x10
c000170b:	8d 46 08             	lea    eax,[esi+0x8]
c000170e:	83 c4 0c             	add    esp,0xc
c0001711:	5b                   	pop    ebx
c0001712:	5e                   	pop    esi
c0001713:	5f                   	pop    edi
c0001714:	5d                   	pop    ebp
c0001715:	c3                   	ret    

c0001716 <dlcalloc>:
c0001716:	53                   	push   ebx
c0001717:	83 ec 14             	sub    esp,0x14
c000171a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001723:	50                   	push   eax
c0001724:	e8 d8 f7 ff ff       	call   c0000f01 <dlmalloc>
c0001729:	83 c4 10             	add    esp,0x10
c000172c:	89 c3                	mov    ebx,eax
c000172e:	85 c0                	test   eax,eax
c0001730:	74 77                	je     c00017a9 <dlcalloc+0x93>
c0001732:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001735:	89 d0                	mov    eax,edx
c0001737:	83 e0 fc             	and    eax,0xfffffffc
c000173a:	80 e2 02             	and    dl,0x2
c000173d:	75 5a                	jne    c0001799 <dlcalloc+0x83>
c000173f:	83 e8 04             	sub    eax,0x4
c0001742:	83 f8 27             	cmp    eax,0x27
c0001745:	76 03                	jbe    c000174a <dlcalloc+0x34>
c0001747:	51                   	push   ecx
c0001748:	eb 53                	jmp    c000179d <dlcalloc+0x87>
c000174a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001750:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001757:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175e:	83 f8 13             	cmp    eax,0x13
c0001761:	76 46                	jbe    c00017a9 <dlcalloc+0x93>
c0001763:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000176a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001771:	83 f8 1b             	cmp    eax,0x1b
c0001774:	76 33                	jbe    c00017a9 <dlcalloc+0x93>
c0001776:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001784:	83 f8 23             	cmp    eax,0x23
c0001787:	76 20                	jbe    c00017a9 <dlcalloc+0x93>
c0001789:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001790:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001797:	eb 10                	jmp    c00017a9 <dlcalloc+0x93>
c0001799:	83 e8 08             	sub    eax,0x8
c000179c:	52                   	push   edx
c000179d:	50                   	push   eax
c000179e:	6a 00                	push   0x0
c00017a0:	53                   	push   ebx
c00017a1:	e8 1f ef ff ff       	call   c00006c5 <memset>
c00017a6:	83 c4 10             	add    esp,0x10
c00017a9:	89 d8                	mov    eax,ebx
c00017ab:	83 c4 08             	add    esp,0x8
c00017ae:	5b                   	pop    ebx
c00017af:	c3                   	ret    

c00017b0 <dlcfree>:
c00017b0:	e9 f1 f3 ff ff       	jmp    c0000ba6 <dlfree>

c00017b5 <dlindependent_calloc>:
c00017b5:	83 ec 28             	sub    esp,0x28
c00017b8:	b9 03 00 00 00       	mov    ecx,0x3
c00017bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d1:	e8 b9 fa ff ff       	call   c000128f <iALLOc>
c00017d6:	83 c4 2c             	add    esp,0x2c
c00017d9:	c3                   	ret    

c00017da <dlindependent_comalloc>:
c00017da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e2:	31 c9                	xor    ecx,ecx
c00017e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017ec:	e9 9e fa ff ff       	jmp    c000128f <iALLOc>

c00017f1 <dlvalloc>:
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c00017fb:	75 0a                	jne    c0001807 <dlvalloc+0x16>
c00017fd:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001802:	e8 b8 f2 ff ff       	call   c0000abf <malloc_consolidate>
c0001807:	50                   	push   eax
c0001808:	50                   	push   eax
c0001809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180d:	ff 35 5c a3 02 c0    	push   DWORD PTR ds:0xc002a35c
c0001813:	e8 db fd ff ff       	call   c00015f3 <dlmemalign>
c0001818:	83 c4 1c             	add    esp,0x1c
c000181b:	c3                   	ret    

c000181c <dlpvalloc>:
c000181c:	83 ec 0c             	sub    esp,0xc
c000181f:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c0001826:	75 0a                	jne    c0001832 <dlpvalloc+0x16>
c0001828:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000182d:	e8 8d f2 ff ff       	call   c0000abf <malloc_consolidate>
c0001832:	a1 5c a3 02 c0       	mov    eax,ds:0xc002a35c
c0001837:	89 c1                	mov    ecx,eax
c0001839:	52                   	push   edx
c000183a:	f7 d9                	neg    ecx
c000183c:	52                   	push   edx
c000183d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001841:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001845:	21 ca                	and    edx,ecx
c0001847:	52                   	push   edx
c0001848:	50                   	push   eax
c0001849:	e8 a5 fd ff ff       	call   c00015f3 <dlmemalign>
c000184e:	83 c4 1c             	add    esp,0x1c
c0001851:	c3                   	ret    

c0001852 <dlmalloc_trim>:
c0001852:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001857:	e8 63 f2 ff ff       	call   c0000abf <malloc_consolidate>
c000185c:	31 c0                	xor    eax,eax
c000185e:	c3                   	ret    

c000185f <dlmalloc_usable_size>:
c000185f:	53                   	push   ebx
c0001860:	31 c0                	xor    eax,eax
c0001862:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001866:	85 c9                	test   ecx,ecx
c0001868:	74 24                	je     c000188e <dlmalloc_usable_size+0x2f>
c000186a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186d:	f6 c2 02             	test   dl,0x2
c0001870:	74 08                	je     c000187a <dlmalloc_usable_size+0x1b>
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	8d 42 f8             	lea    eax,[edx-0x8]
c0001878:	eb 14                	jmp    c000188e <dlmalloc_usable_size+0x2f>
c000187a:	89 d3                	mov    ebx,edx
c000187c:	31 c0                	xor    eax,eax
c000187e:	83 e3 fe             	and    ebx,0xfffffffe
c0001881:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001886:	74 06                	je     c000188e <dlmalloc_usable_size+0x2f>
c0001888:	83 e2 fc             	and    edx,0xfffffffc
c000188b:	8d 42 fc             	lea    eax,[edx-0x4]
c000188e:	5b                   	pop    ebx
c000188f:	c3                   	ret    

c0001890 <dlmallinfo>:
c0001890:	55                   	push   ebp
c0001891:	57                   	push   edi
c0001892:	56                   	push   esi
c0001893:	53                   	push   ebx
c0001894:	83 ec 08             	sub    esp,0x8
c0001897:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189b:	83 3d 2c a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a02c,0x0
c00018a2:	75 0a                	jne    c00018ae <dlmallinfo+0x1e>
c00018a4:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00018a9:	e8 11 f2 ff ff       	call   c0000abf <malloc_consolidate>
c00018ae:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c00018b3:	31 ed                	xor    ebp,ebp
c00018b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b8:	31 c9                	xor    ecx,ecx
c00018ba:	83 e0 fc             	and    eax,0xfffffffc
c00018bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c1:	31 c0                	xor    eax,eax
c00018c3:	8b 14 85 04 a0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5ffc]
c00018ca:	85 d2                	test   edx,edx
c00018cc:	74 0e                	je     c00018dc <dlmallinfo+0x4c>
c00018ce:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d1:	45                   	inc    ebp
c00018d2:	83 e6 fc             	and    esi,0xfffffffc
c00018d5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d8:	01 f1                	add    ecx,esi
c00018da:	eb ee                	jmp    c00018ca <dlmallinfo+0x3a>
c00018dc:	40                   	inc    eax
c00018dd:	83 f8 0a             	cmp    eax,0xa
c00018e0:	75 e1                	jne    c00018c3 <dlmallinfo+0x33>
c00018e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ed:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018f0:	b8 34 a0 02 c0       	mov    eax,0xc002a034
c00018f5:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f8:	39 f0                	cmp    eax,esi
c00018fa:	74 10                	je     c000190c <dlmallinfo+0x7c>
c00018fc:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018ff:	ff 04 24             	inc    DWORD PTR [esp]
c0001902:	83 e7 fc             	and    edi,0xfffffffc
c0001905:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001908:	01 fa                	add    edx,edi
c000190a:	eb ec                	jmp    c00018f8 <dlmallinfo+0x68>
c000190c:	83 c0 08             	add    eax,0x8
c000190f:	3d 2c a3 02 c0       	cmp    eax,0xc002a32c
c0001914:	75 df                	jne    c00018f5 <dlmallinfo+0x65>
c0001916:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001919:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191f:	a1 68 a3 02 c0       	mov    eax,ds:0xc002a368
c0001924:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001927:	89 03                	mov    DWORD PTR [ebx],eax
c0001929:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192c:	8b 35 50 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a350
c0001932:	29 d0                	sub    eax,edx
c0001934:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001937:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000193a:	8b 35 64 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a364
c0001940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001944:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001947:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000194a:	8b 35 74 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a374
c0001950:	89 d8                	mov    eax,ebx
c0001952:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001955:	83 c4 08             	add    esp,0x8
c0001958:	5b                   	pop    ebx
c0001959:	5e                   	pop    esi
c000195a:	5f                   	pop    edi
c000195b:	5d                   	pop    ebp
c000195c:	c2 04 00             	ret    0x4

c000195f <dlmalloc_stats>:
c000195f:	83 ec 30             	sub    esp,0x30
c0001962:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001966:	50                   	push   eax
c0001967:	e8 24 ff ff ff       	call   c0001890 <dlmallinfo>
c000196c:	83 c4 30             	add    esp,0x30
c000196f:	c3                   	ret    

c0001970 <dlmallopt>:
c0001970:	56                   	push   esi
c0001971:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001976:	53                   	push   ebx
c0001977:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197f:	e8 3b f1 ff ff       	call   c0000abf <malloc_consolidate>
c0001984:	8d 46 04             	lea    eax,[esi+0x4]
c0001987:	83 f8 05             	cmp    eax,0x5
c000198a:	77 67                	ja     c00019f3 <dlmallopt+0x83>
c000198c:	ff 24 85 c4 5c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda33c]
c0001993:	83 fb 50             	cmp    ebx,0x50
c0001996:	77 5b                	ja     c00019f3 <dlmallopt+0x83>
c0001998:	ba 08 00 00 00       	mov    edx,0x8
c000199d:	85 db                	test   ebx,ebx
c000199f:	74 12                	je     c00019b3 <dlmallopt+0x43>
c00019a1:	83 c3 0b             	add    ebx,0xb
c00019a4:	ba 10 00 00 00       	mov    edx,0x10
c00019a9:	83 fb 0f             	cmp    ebx,0xf
c00019ac:	76 05                	jbe    c00019b3 <dlmallopt+0x43>
c00019ae:	89 da                	mov    edx,ebx
c00019b0:	83 e2 f8             	and    edx,0xfffffff8
c00019b3:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c00019b8:	83 e0 03             	and    eax,0x3
c00019bb:	09 d0                	or     eax,edx
c00019bd:	a3 00 a0 02 c0       	mov    ds:0xc002a000,eax
c00019c2:	eb 31                	jmp    c00019f5 <dlmallopt+0x85>
c00019c4:	89 1d 44 a3 02 c0    	mov    DWORD PTR ds:0xc002a344,ebx
c00019ca:	eb 06                	jmp    c00019d2 <dlmallopt+0x62>
c00019cc:	89 1d 48 a3 02 c0    	mov    DWORD PTR ds:0xc002a348,ebx
c00019d2:	be 01 00 00 00       	mov    esi,0x1
c00019d7:	eb 1c                	jmp    c00019f5 <dlmallopt+0x85>
c00019d9:	89 1d 4c a3 02 c0    	mov    DWORD PTR ds:0xc002a34c,ebx
c00019df:	eb f1                	jmp    c00019d2 <dlmallopt+0x62>
c00019e1:	31 f6                	xor    esi,esi
c00019e3:	85 db                	test   ebx,ebx
c00019e5:	75 0e                	jne    c00019f5 <dlmallopt+0x85>
c00019e7:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c00019f1:	eb df                	jmp    c00019d2 <dlmallopt+0x62>
c00019f3:	31 f6                	xor    esi,esi
c00019f5:	89 f0                	mov    eax,esi
c00019f7:	5b                   	pop    ebx
c00019f8:	5e                   	pop    esi
c00019f9:	c3                   	ret    

c00019fa <disk_status>:
c00019fa:	31 c0                	xor    eax,eax
c00019fc:	c3                   	ret    

c00019fd <disk_initialize>:
c00019fd:	31 c0                	xor    eax,eax
c00019ff:	c3                   	ret    

c0001a00 <disk_read>:
c0001a00:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a05:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a11:	e9 6e cb 01 00       	jmp    c001e584 <fatWrapperReadDisk>

c0001a16 <disk_write>:
c0001a16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1b:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a27:	e9 9f cb 01 00       	jmp    c001e5cb <fatWrapperWriteDisk>

c0001a2c <disk_ioctl>:
c0001a2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a35:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3a:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a46:	e9 c7 cb 01 00       	jmp    c001e612 <fatWrapperIoctl>

c0001a4b <ld_word>:
c0001a4b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a52:	c1 e2 08             	shl    edx,0x8
c0001a55:	09 d0                	or     eax,edx
c0001a57:	c3                   	ret    

c0001a58 <ld_dword>:
c0001a58:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5c:	89 d1                	mov    ecx,edx
c0001a5e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a62:	c1 e1 08             	shl    ecx,0x8
c0001a65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a68:	09 ca                	or     edx,ecx
c0001a6a:	c1 e2 08             	shl    edx,0x8
c0001a6d:	09 d0                	or     eax,edx
c0001a6f:	c3                   	ret    

c0001a70 <ld_qword>:
c0001a70:	57                   	push   edi
c0001a71:	56                   	push   esi
c0001a72:	53                   	push   ebx
c0001a73:	31 db                	xor    ebx,ebx
c0001a75:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a78:	89 df                	mov    edi,ebx
c0001a7a:	89 ce                	mov    esi,ecx
c0001a7c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a80:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a84:	c1 e6 08             	shl    esi,0x8
c0001a87:	09 f2                	or     edx,esi
c0001a89:	89 d6                	mov    esi,edx
c0001a8b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a93:	c1 e6 08             	shl    esi,0x8
c0001a96:	09 f2                	or     edx,esi
c0001a98:	89 d6                	mov    esi,edx
c0001a9a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa5:	c1 e6 08             	shl    esi,0x8
c0001aa8:	89 fb                	mov    ebx,edi
c0001aaa:	09 f2                	or     edx,esi
c0001aac:	89 d1                	mov    ecx,edx
c0001aae:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab2:	c1 e1 08             	shl    ecx,0x8
c0001ab5:	89 da                	mov    edx,ebx
c0001ab7:	09 c8                	or     eax,ecx
c0001ab9:	5b                   	pop    ebx
c0001aba:	5e                   	pop    esi
c0001abb:	5f                   	pop    edi
c0001abc:	c3                   	ret    

c0001abd <st_word>:
c0001abd:	66 89 10             	mov    WORD PTR [eax],dx
c0001ac0:	c3                   	ret    

c0001ac1 <st_dword>:
c0001ac1:	89 10                	mov    DWORD PTR [eax],edx
c0001ac3:	c3                   	ret    

c0001ac4 <st_qword>:
c0001ac4:	89 10                	mov    DWORD PTR [eax],edx
c0001ac6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac9:	c3                   	ret    

c0001aca <mem_cpy>:
c0001aca:	85 c9                	test   ecx,ecx
c0001acc:	74 10                	je     c0001ade <mem_cpy+0x14>
c0001ace:	57                   	push   edi
c0001acf:	01 c1                	add    ecx,eax
c0001ad1:	56                   	push   esi
c0001ad2:	89 c7                	mov    edi,eax
c0001ad4:	89 d6                	mov    esi,edx
c0001ad6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad7:	39 f9                	cmp    ecx,edi
c0001ad9:	75 fb                	jne    c0001ad6 <mem_cpy+0xc>
c0001adb:	5e                   	pop    esi
c0001adc:	5f                   	pop    edi
c0001add:	c3                   	ret    
c0001ade:	c3                   	ret    

c0001adf <mem_set>:
c0001adf:	01 c1                	add    ecx,eax
c0001ae1:	40                   	inc    eax
c0001ae2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae5:	39 c8                	cmp    eax,ecx
c0001ae7:	75 f8                	jne    c0001ae1 <mem_set+0x2>
c0001ae9:	c3                   	ret    

c0001aea <mem_cmp>:
c0001aea:	57                   	push   edi
c0001aeb:	56                   	push   esi
c0001aec:	89 c6                	mov    esi,eax
c0001aee:	53                   	push   ebx
c0001aef:	46                   	inc    esi
c0001af0:	42                   	inc    edx
c0001af1:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af5:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af9:	29 fb                	sub    ebx,edi
c0001afb:	89 cf                	mov    edi,ecx
c0001afd:	29 f7                	sub    edi,esi
c0001aff:	01 c7                	add    edi,eax
c0001b01:	74 04                	je     c0001b07 <mem_cmp+0x1d>
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	74 e8                	je     c0001aef <mem_cmp+0x5>
c0001b07:	89 d8                	mov    eax,ebx
c0001b09:	5b                   	pop    ebx
c0001b0a:	5e                   	pop    esi
c0001b0b:	5f                   	pop    edi
c0001b0c:	c3                   	ret    

c0001b0d <chk_chr>:
c0001b0d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b10:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b13:	74 07                	je     c0001b1c <chk_chr+0xf>
c0001b15:	39 d1                	cmp    ecx,edx
c0001b17:	74 03                	je     c0001b1c <chk_chr+0xf>
c0001b19:	40                   	inc    eax
c0001b1a:	eb f1                	jmp    c0001b0d <chk_chr>
c0001b1c:	89 c8                	mov    eax,ecx
c0001b1e:	c3                   	ret    

c0001b1f <dbc_1st>:
c0001b1f:	31 c0                	xor    eax,eax
c0001b21:	c3                   	ret    

c0001b22 <dbc_2nd>:
c0001b22:	31 c0                	xor    eax,eax
c0001b24:	c3                   	ret    

c0001b25 <tchar2uni>:
c0001b25:	57                   	push   edi
c0001b26:	89 c7                	mov    edi,eax
c0001b28:	56                   	push   esi
c0001b29:	53                   	push   ebx
c0001b2a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b31:	84 c9                	test   cl,cl
c0001b33:	78 0a                	js     c0001b3f <tchar2uni+0x1a>
c0001b35:	0f b6 d1             	movzx  edx,cl
c0001b38:	89 f3                	mov    ebx,esi
c0001b3a:	e9 9f 00 00 00       	jmp    c0001bde <tchar2uni+0xb9>
c0001b3f:	88 ca                	mov    dl,cl
c0001b41:	83 e2 e0             	and    edx,0xffffffe0
c0001b44:	80 fa c0             	cmp    dl,0xc0
c0001b47:	75 0c                	jne    c0001b55 <tchar2uni+0x30>
c0001b49:	89 ca                	mov    edx,ecx
c0001b4b:	b9 01 00 00 00       	mov    ecx,0x1
c0001b50:	83 e2 1f             	and    edx,0x1f
c0001b53:	eb 2e                	jmp    c0001b83 <tchar2uni+0x5e>
c0001b55:	88 ca                	mov    dl,cl
c0001b57:	83 e2 f0             	and    edx,0xfffffff0
c0001b5a:	80 fa e0             	cmp    dl,0xe0
c0001b5d:	75 0c                	jne    c0001b6b <tchar2uni+0x46>
c0001b5f:	89 ca                	mov    edx,ecx
c0001b61:	b9 02 00 00 00       	mov    ecx,0x2
c0001b66:	83 e2 0f             	and    edx,0xf
c0001b69:	eb 18                	jmp    c0001b83 <tchar2uni+0x5e>
c0001b6b:	88 ca                	mov    dl,cl
c0001b6d:	83 e2 f8             	and    edx,0xfffffff8
c0001b70:	88 d0                	mov    al,dl
c0001b72:	83 ca ff             	or     edx,0xffffffff
c0001b75:	3c f0                	cmp    al,0xf0
c0001b77:	75 6c                	jne    c0001be5 <tchar2uni+0xc0>
c0001b79:	89 ca                	mov    edx,ecx
c0001b7b:	b9 03 00 00 00       	mov    ecx,0x3
c0001b80:	83 e2 07             	and    edx,0x7
c0001b83:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b87:	46                   	inc    esi
c0001b88:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8b:	88 c8                	mov    al,cl
c0001b8d:	83 e0 c0             	and    eax,0xffffffc0
c0001b90:	3c 80                	cmp    al,0x80
c0001b92:	75 4e                	jne    c0001be2 <tchar2uni+0xbd>
c0001b94:	c1 e2 06             	shl    edx,0x6
c0001b97:	83 e1 3f             	and    ecx,0x3f
c0001b9a:	09 ca                	or     edx,ecx
c0001b9c:	39 de                	cmp    esi,ebx
c0001b9e:	75 e7                	jne    c0001b87 <tchar2uni+0x62>
c0001ba0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba9:	77 37                	ja     c0001be2 <tchar2uni+0xbd>
c0001bab:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb7:	76 29                	jbe    c0001be2 <tchar2uni+0xbd>
c0001bb9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbf:	76 1d                	jbe    c0001bde <tchar2uni+0xb9>
c0001bc1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcd:	c1 e1 06             	shl    ecx,0x6
c0001bd0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd6:	09 ca                	or     edx,ecx
c0001bd8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bde:	89 1f                	mov    DWORD PTR [edi],ebx
c0001be0:	eb 03                	jmp    c0001be5 <tchar2uni+0xc0>
c0001be2:	83 ca ff             	or     edx,0xffffffff
c0001be5:	5b                   	pop    ebx
c0001be6:	89 d0                	mov    eax,edx
c0001be8:	5e                   	pop    esi
c0001be9:	5f                   	pop    edi
c0001bea:	c3                   	ret    

c0001beb <put_utf>:
c0001beb:	53                   	push   ebx
c0001bec:	83 f8 7f             	cmp    eax,0x7f
c0001bef:	89 c3                	mov    ebx,eax
c0001bf1:	b0 00                	mov    al,0x0
c0001bf3:	77 11                	ja     c0001c06 <put_utf+0x1b>
c0001bf5:	85 c9                	test   ecx,ecx
c0001bf7:	0f 84 e5 00 00 00    	je     c0001ce2 <put_utf+0xf7>
c0001bfd:	88 1a                	mov    BYTE PTR [edx],bl
c0001bff:	b0 01                	mov    al,0x1
c0001c01:	e9 dc 00 00 00       	jmp    c0001ce2 <put_utf+0xf7>
c0001c06:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0c:	77 23                	ja     c0001c31 <put_utf+0x46>
c0001c0e:	83 f9 01             	cmp    ecx,0x1
c0001c11:	0f 86 cb 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	83 e3 3f             	and    ebx,0x3f
c0001c1c:	c1 e8 06             	shr    eax,0x6
c0001c1f:	83 cb 80             	or     ebx,0xffffff80
c0001c22:	83 c8 c0             	or     eax,0xffffffc0
c0001c25:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c28:	88 02                	mov    BYTE PTR [edx],al
c0001c2a:	b0 02                	mov    al,0x2
c0001c2c:	e9 b1 00 00 00       	jmp    c0001ce2 <put_utf+0xf7>
c0001c31:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c37:	77 40                	ja     c0001c79 <put_utf+0x8e>
c0001c39:	83 f9 02             	cmp    ecx,0x2
c0001c3c:	0f 86 a0 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c42:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c48:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4e:	0f 86 8e 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c54:	89 d8                	mov    eax,ebx
c0001c56:	c1 e8 0c             	shr    eax,0xc
c0001c59:	83 c8 e0             	or     eax,0xffffffe0
c0001c5c:	88 02                	mov    BYTE PTR [edx],al
c0001c5e:	89 d8                	mov    eax,ebx
c0001c60:	83 e3 3f             	and    ebx,0x3f
c0001c63:	c1 e8 06             	shr    eax,0x6
c0001c66:	83 cb 80             	or     ebx,0xffffff80
c0001c69:	83 e0 3f             	and    eax,0x3f
c0001c6c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6f:	83 c8 80             	or     eax,0xffffff80
c0001c72:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c75:	b0 03                	mov    al,0x3
c0001c77:	eb 69                	jmp    c0001ce2 <put_utf+0xf7>
c0001c79:	83 f9 03             	cmp    ecx,0x3
c0001c7c:	76 64                	jbe    c0001ce2 <put_utf+0xf7>
c0001c7e:	89 d9                	mov    ecx,ebx
c0001c80:	0f b7 c3             	movzx  eax,bx
c0001c83:	66 31 c9             	xor    cx,cx
c0001c86:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c92:	c1 e9 06             	shr    ecx,0x6
c0001c95:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9b:	77 43                	ja     c0001ce0 <put_utf+0xf5>
c0001c9d:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca3:	77 3b                	ja     c0001ce0 <put_utf+0xf5>
c0001ca5:	09 cb                	or     ebx,ecx
c0001ca7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cad:	89 d8                	mov    eax,ebx
c0001caf:	c1 e8 12             	shr    eax,0x12
c0001cb2:	83 c8 f0             	or     eax,0xfffffff0
c0001cb5:	88 02                	mov    BYTE PTR [edx],al
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	c1 e8 0c             	shr    eax,0xc
c0001cbc:	83 e0 3f             	and    eax,0x3f
c0001cbf:	83 c8 80             	or     eax,0xffffff80
c0001cc2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 e0 3f             	and    eax,0x3f
c0001cd3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd6:	83 c8 80             	or     eax,0xffffff80
c0001cd9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdc:	b0 04                	mov    al,0x4
c0001cde:	eb 02                	jmp    c0001ce2 <put_utf+0xf7>
c0001ce0:	31 c0                	xor    eax,eax
c0001ce2:	5b                   	pop    ebx
c0001ce3:	c3                   	ret    

c0001ce4 <clst2sect>:
c0001ce4:	89 c1                	mov    ecx,eax
c0001ce6:	83 ea 02             	sub    edx,0x2
c0001ce9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cec:	83 e8 02             	sub    eax,0x2
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	76 0d                	jbe    c0001d00 <clst2sect+0x1c>
c0001cf3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf7:	f7 e2                	mul    edx
c0001cf9:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfc:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cff:	c3                   	ret    
c0001d00:	31 c0                	xor    eax,eax
c0001d02:	31 d2                	xor    edx,edx
c0001d04:	c3                   	ret    

c0001d05 <clmt_clust>:
c0001d05:	57                   	push   edi
c0001d06:	89 cf                	mov    edi,ecx
c0001d08:	56                   	push   esi
c0001d09:	89 d6                	mov    esi,edx
c0001d0b:	53                   	push   ebx
c0001d0c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d10:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d13:	89 f2                	mov    edx,esi
c0001d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d17:	c1 ef 09             	shr    edi,0x9
c0001d1a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d21:	89 f9                	mov    ecx,edi
c0001d23:	31 ff                	xor    edi,edi
c0001d25:	57                   	push   edi
c0001d26:	56                   	push   esi
c0001d27:	51                   	push   ecx
c0001d28:	52                   	push   edx
c0001d29:	e8 2e 16 02 00       	call   c002335c <__udivdi3>
c0001d2e:	83 c4 10             	add    esp,0x10
c0001d31:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d33:	85 d2                	test   edx,edx
c0001d35:	74 10                	je     c0001d47 <clmt_clust+0x42>
c0001d37:	39 d0                	cmp    eax,edx
c0001d39:	72 07                	jb     c0001d42 <clmt_clust+0x3d>
c0001d3b:	29 d0                	sub    eax,edx
c0001d3d:	83 c3 08             	add    ebx,0x8
c0001d40:	eb ef                	jmp    c0001d31 <clmt_clust+0x2c>
c0001d42:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d45:	89 c2                	mov    edx,eax
c0001d47:	5b                   	pop    ebx
c0001d48:	89 d0                	mov    eax,edx
c0001d4a:	5e                   	pop    esi
c0001d4b:	5f                   	pop    edi
c0001d4c:	c3                   	ret    

c0001d4d <pick_lfn>:
c0001d4d:	55                   	push   ebp
c0001d4e:	57                   	push   edi
c0001d4f:	56                   	push   esi
c0001d50:	89 d6                	mov    esi,edx
c0001d52:	53                   	push   ebx
c0001d53:	89 c3                	mov    ebx,eax
c0001d55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d58:	e8 ee fc ff ff       	call   c0001a4b <ld_word>
c0001d5d:	66 85 c0             	test   ax,ax
c0001d60:	74 04                	je     c0001d66 <pick_lfn+0x19>
c0001d62:	31 c0                	xor    eax,eax
c0001d64:	eb 5c                	jmp    c0001dc2 <pick_lfn+0x75>
c0001d66:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d69:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6e:	83 e1 bf             	and    ecx,0xffffffbf
c0001d71:	31 ff                	xor    edi,edi
c0001d73:	49                   	dec    ecx
c0001d74:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d77:	0f b6 87 e0 5d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda220]
c0001d7e:	01 f0                	add    eax,esi
c0001d80:	e8 c6 fc ff ff       	call   c0001a4b <ld_word>
c0001d85:	66 85 ed             	test   bp,bp
c0001d88:	74 11                	je     c0001d9b <pick_lfn+0x4e>
c0001d8a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d90:	77 d0                	ja     c0001d62 <pick_lfn+0x15>
c0001d92:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d96:	89 c5                	mov    ebp,eax
c0001d98:	41                   	inc    ecx
c0001d99:	eb 04                	jmp    c0001d9f <pick_lfn+0x52>
c0001d9b:	66 40                	inc    ax
c0001d9d:	75 c3                	jne    c0001d62 <pick_lfn+0x15>
c0001d9f:	47                   	inc    edi
c0001da0:	83 ff 0d             	cmp    edi,0xd
c0001da3:	75 d2                	jne    c0001d77 <pick_lfn+0x2a>
c0001da5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da8:	74 13                	je     c0001dbd <pick_lfn+0x70>
c0001daa:	66 85 ed             	test   bp,bp
c0001dad:	74 0e                	je     c0001dbd <pick_lfn+0x70>
c0001daf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db5:	77 ab                	ja     c0001d62 <pick_lfn+0x15>
c0001db7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbd:	b8 01 00 00 00       	mov    eax,0x1
c0001dc2:	5b                   	pop    ebx
c0001dc3:	5e                   	pop    esi
c0001dc4:	5f                   	pop    edi
c0001dc5:	5d                   	pop    ebp
c0001dc6:	c3                   	ret    

c0001dc7 <put_lfn>:
c0001dc7:	55                   	push   ebp
c0001dc8:	31 ed                	xor    ebp,ebp
c0001dca:	57                   	push   edi
c0001dcb:	89 d7                	mov    edi,edx
c0001dcd:	56                   	push   esi
c0001dce:	31 f6                	xor    esi,esi
c0001dd0:	53                   	push   ebx
c0001dd1:	83 ec 08             	sub    esp,0x8
c0001dd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ddf:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001deb:	31 d2                	xor    edx,edx
c0001ded:	e8 cb fc ff ff       	call   c0001abd <st_word>
c0001df2:	0f b6 d9             	movzx  ebx,cl
c0001df5:	4b                   	dec    ebx
c0001df6:	6b db 0d             	imul   ebx,ebx,0xd
c0001df9:	66 83 fe ff          	cmp    si,0xffff
c0001dfd:	74 08                	je     c0001e07 <put_lfn+0x40>
c0001dff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e02:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e06:	43                   	inc    ebx
c0001e07:	0f b6 85 e0 5d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda220]
c0001e0e:	0f b7 d6             	movzx  edx,si
c0001e11:	01 f8                	add    eax,edi
c0001e13:	e8 a5 fc ff ff       	call   c0001abd <st_word>
c0001e18:	66 85 f6             	test   si,si
c0001e1b:	75 03                	jne    c0001e20 <put_lfn+0x59>
c0001e1d:	83 ce ff             	or     esi,0xffffffff
c0001e20:	45                   	inc    ebp
c0001e21:	83 fd 0d             	cmp    ebp,0xd
c0001e24:	75 d3                	jne    c0001df9 <put_lfn+0x32>
c0001e26:	66 46                	inc    si
c0001e28:	74 0a                	je     c0001e34 <put_lfn+0x6d>
c0001e2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e32:	75 09                	jne    c0001e3d <put_lfn+0x76>
c0001e34:	88 c8                	mov    al,cl
c0001e36:	83 c8 40             	or     eax,0x40
c0001e39:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e41:	88 07                	mov    BYTE PTR [edi],al
c0001e43:	83 c4 08             	add    esp,0x8
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	5d                   	pop    ebp
c0001e4a:	c3                   	ret    

c0001e4b <gen_numname>:
c0001e4b:	57                   	push   edi
c0001e4c:	89 cf                	mov    edi,ecx
c0001e4e:	56                   	push   esi
c0001e4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e54:	53                   	push   ebx
c0001e55:	89 c6                	mov    esi,eax
c0001e57:	83 ec 10             	sub    esp,0x10
c0001e5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5e:	e8 67 fc ff ff       	call   c0001aca <mem_cpy>
c0001e63:	83 fb 05             	cmp    ebx,0x5
c0001e66:	76 2d                	jbe    c0001e95 <gen_numname+0x4a>
c0001e68:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6b:	66 85 c0             	test   ax,ax
c0001e6e:	74 25                	je     c0001e95 <gen_numname+0x4a>
c0001e70:	83 c7 02             	add    edi,0x2
c0001e73:	ba 10 00 00 00       	mov    edx,0x10
c0001e78:	01 db                	add    ebx,ebx
c0001e7a:	89 c1                	mov    ecx,eax
c0001e7c:	66 d1 e8             	shr    ax,1
c0001e7f:	83 e1 01             	and    ecx,0x1
c0001e82:	01 cb                	add    ebx,ecx
c0001e84:	0f ba e3 10          	bt     ebx,0x10
c0001e88:	73 06                	jae    c0001e90 <gen_numname+0x45>
c0001e8a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e90:	4a                   	dec    edx
c0001e91:	75 e5                	jne    c0001e78 <gen_numname+0x2d>
c0001e93:	eb d3                	jmp    c0001e68 <gen_numname+0x1d>
c0001e95:	b8 07 00 00 00       	mov    eax,0x7
c0001e9a:	88 d9                	mov    cl,bl
c0001e9c:	83 e1 0f             	and    ecx,0xf
c0001e9f:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea2:	80 fa 39             	cmp    dl,0x39
c0001ea5:	76 03                	jbe    c0001eaa <gen_numname+0x5f>
c0001ea7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eaa:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ead:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb1:	89 da                	mov    edx,ebx
c0001eb3:	c1 ea 04             	shr    edx,0x4
c0001eb6:	83 fb 0f             	cmp    ebx,0xf
c0001eb9:	76 06                	jbe    c0001ec1 <gen_numname+0x76>
c0001ebb:	89 c8                	mov    eax,ecx
c0001ebd:	89 d3                	mov    ebx,edx
c0001ebf:	eb d9                	jmp    c0001e9a <gen_numname+0x4f>
c0001ec1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec6:	31 d2                	xor    edx,edx
c0001ec8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ecb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ece:	39 ca                	cmp    edx,ecx
c0001ed0:	73 18                	jae    c0001eea <gen_numname+0x9f>
c0001ed2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed5:	3c 20                	cmp    al,0x20
c0001ed7:	74 11                	je     c0001eea <gen_numname+0x9f>
c0001ed9:	e8 41 fc ff ff       	call   c0001b1f <dbc_1st>
c0001ede:	85 c0                	test   eax,eax
c0001ee0:	74 05                	je     c0001ee7 <gen_numname+0x9c>
c0001ee2:	39 d3                	cmp    ebx,edx
c0001ee4:	74 04                	je     c0001eea <gen_numname+0x9f>
c0001ee6:	42                   	inc    edx
c0001ee7:	42                   	inc    edx
c0001ee8:	eb e1                	jmp    c0001ecb <gen_numname+0x80>
c0001eea:	b0 20                	mov    al,0x20
c0001eec:	83 f9 07             	cmp    ecx,0x7
c0001eef:	77 05                	ja     c0001ef6 <gen_numname+0xab>
c0001ef1:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef5:	41                   	inc    ecx
c0001ef6:	42                   	inc    edx
c0001ef7:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efb:	83 fa 07             	cmp    edx,0x7
c0001efe:	76 ea                	jbe    c0001eea <gen_numname+0x9f>
c0001f00:	83 c4 10             	add    esp,0x10
c0001f03:	5b                   	pop    ebx
c0001f04:	5e                   	pop    esi
c0001f05:	5f                   	pop    edi
c0001f06:	c3                   	ret    

c0001f07 <sum_sfn>:
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	31 d2                	xor    edx,edx
c0001f0b:	d0 ca                	ror    dl,1
c0001f0d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f10:	41                   	inc    ecx
c0001f11:	83 f9 0b             	cmp    ecx,0xb
c0001f14:	75 f5                	jne    c0001f0b <sum_sfn+0x4>
c0001f16:	88 d0                	mov    al,dl
c0001f18:	c3                   	ret    

c0001f19 <xdir_sum>:
c0001f19:	56                   	push   esi
c0001f1a:	31 c9                	xor    ecx,ecx
c0001f1c:	53                   	push   ebx
c0001f1d:	31 d2                	xor    edx,edx
c0001f1f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f23:	43                   	inc    ebx
c0001f24:	c1 e3 05             	shl    ebx,0x5
c0001f27:	83 fa 02             	cmp    edx,0x2
c0001f2a:	74 0b                	je     c0001f37 <xdir_sum+0x1e>
c0001f2c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f30:	66 d1 c9             	ror    cx,1
c0001f33:	01 f1                	add    ecx,esi
c0001f35:	eb 05                	jmp    c0001f3c <xdir_sum+0x23>
c0001f37:	ba 03 00 00 00       	mov    edx,0x3
c0001f3c:	42                   	inc    edx
c0001f3d:	39 d3                	cmp    ebx,edx
c0001f3f:	77 e6                	ja     c0001f27 <xdir_sum+0xe>
c0001f41:	89 c8                	mov    eax,ecx
c0001f43:	5b                   	pop    ebx
c0001f44:	5e                   	pop    esi
c0001f45:	c3                   	ret    

c0001f46 <xsum32>:
c0001f46:	d1 ca                	ror    edx,1
c0001f48:	0f b6 c0             	movzx  eax,al
c0001f4b:	01 d0                	add    eax,edx
c0001f4d:	c3                   	ret    

c0001f4e <get_xfileinfo>:
c0001f4e:	55                   	push   ebp
c0001f4f:	31 c9                	xor    ecx,ecx
c0001f51:	57                   	push   edi
c0001f52:	bd 40 00 00 00       	mov    ebp,0x40
c0001f57:	56                   	push   esi
c0001f58:	31 ff                	xor    edi,edi
c0001f5a:	53                   	push   ebx
c0001f5b:	89 c6                	mov    esi,eax
c0001f5d:	83 ec 0c             	sub    esp,0xc
c0001f60:	89 d3                	mov    ebx,edx
c0001f62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f69:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f70:	76 6d                	jbe    c0001fdf <get_xfileinfo+0x91>
c0001f72:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f78:	76 0b                	jbe    c0001f85 <get_xfileinfo+0x37>
c0001f7a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7e:	bf 01 00 00 00       	mov    edi,0x1
c0001f83:	eb 63                	jmp    c0001fe8 <get_xfileinfo+0x9a>
c0001f85:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8b:	75 03                	jne    c0001f90 <get_xfileinfo+0x42>
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f93:	83 c5 02             	add    ebp,0x2
c0001f96:	e8 b0 fa ff ff       	call   c0001a4b <ld_word>
c0001f9b:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9e:	66 85 c9             	test   cx,cx
c0001fa1:	75 0d                	jne    c0001fb0 <get_xfileinfo+0x62>
c0001fa3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa9:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fae:	76 2b                	jbe    c0001fdb <get_xfileinfo+0x8d>
c0001fb0:	c1 e1 10             	shl    ecx,0x10
c0001fb3:	ba ff 00 00 00       	mov    edx,0xff
c0001fb8:	0f b7 c0             	movzx  eax,ax
c0001fbb:	29 fa                	sub    edx,edi
c0001fbd:	09 c8                	or     eax,ecx
c0001fbf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fcb:	e8 1b fc ff ff       	call   c0001beb <put_utf>
c0001fd0:	84 c0                	test   al,al
c0001fd2:	74 a6                	je     c0001f7a <get_xfileinfo+0x2c>
c0001fd4:	0f b6 c0             	movzx  eax,al
c0001fd7:	01 c7                	add    edi,eax
c0001fd9:	31 c0                	xor    eax,eax
c0001fdb:	89 c1                	mov    ecx,eax
c0001fdd:	eb 8a                	jmp    c0001f69 <get_xfileinfo+0x1b>
c0001fdf:	85 ff                	test   edi,edi
c0001fe1:	74 97                	je     c0001f7a <get_xfileinfo+0x2c>
c0001fe3:	66 85 c9             	test   cx,cx
c0001fe6:	75 92                	jne    c0001f7a <get_xfileinfo+0x2c>
c0001fe8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fed:	31 c0                	xor    eax,eax
c0001fef:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff8:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffb:	80 e1 10             	and    cl,0x10
c0001ffe:	75 08                	jne    c0002008 <get_xfileinfo+0xba>
c0002000:	8d 46 38             	lea    eax,[esi+0x38]
c0002003:	e8 68 fa ff ff       	call   c0001a70 <ld_qword>
c0002008:	89 03                	mov    DWORD PTR [ebx],eax
c000200a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002010:	e8 36 fa ff ff       	call   c0001a4b <ld_word>
c0002015:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002019:	8d 46 0e             	lea    eax,[esi+0xe]
c000201c:	e8 2a fa ff ff       	call   c0001a4b <ld_word>
c0002021:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002025:	83 c4 0c             	add    esp,0xc
c0002028:	5b                   	pop    ebx
c0002029:	5e                   	pop    esi
c000202a:	5f                   	pop    edi
c000202b:	5d                   	pop    ebp
c000202c:	c3                   	ret    

c000202d <get_ldnumber>:
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 14                	je     c0002047 <get_ldnumber+0x1a>
c0002033:	56                   	push   esi
c0002034:	53                   	push   ebx
c0002035:	89 d3                	mov    ebx,edx
c0002037:	43                   	inc    ebx
c0002038:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203b:	80 f9 1f             	cmp    cl,0x1f
c000203e:	76 0d                	jbe    c000204d <get_ldnumber+0x20>
c0002040:	80 f9 3a             	cmp    cl,0x3a
c0002043:	75 f2                	jne    c0002037 <get_ldnumber+0xa>
c0002045:	eb 0a                	jmp    c0002051 <get_ldnumber+0x24>
c0002047:	83 c9 ff             	or     ecx,0xffffffff
c000204a:	89 c8                	mov    eax,ecx
c000204c:	c3                   	ret    
c000204d:	31 c9                	xor    ecx,ecx
c000204f:	eb 24                	jmp    c0002075 <get_ldnumber+0x48>
c0002051:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002054:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002057:	80 f9 09             	cmp    cl,0x9
c000205a:	77 16                	ja     c0002072 <get_ldnumber+0x45>
c000205c:	83 c2 02             	add    edx,0x2
c000205f:	83 c9 ff             	or     ecx,0xffffffff
c0002062:	39 d3                	cmp    ebx,edx
c0002064:	75 0f                	jne    c0002075 <get_ldnumber+0x48>
c0002066:	89 f2                	mov    edx,esi
c0002068:	89 18                	mov    DWORD PTR [eax],ebx
c000206a:	0f be ca             	movsx  ecx,dl
c000206d:	83 e9 30             	sub    ecx,0x30
c0002070:	eb 03                	jmp    c0002075 <get_ldnumber+0x48>
c0002072:	83 c9 ff             	or     ecx,0xffffffff
c0002075:	89 c8                	mov    eax,ecx
c0002077:	5b                   	pop    ebx
c0002078:	5e                   	pop    esi
c0002079:	c3                   	ret    

c000207a <crc32>:
c000207a:	56                   	push   esi
c000207b:	89 d6                	mov    esi,edx
c000207d:	53                   	push   ebx
c000207e:	b2 01                	mov    dl,0x1
c0002080:	bb 08 00 00 00       	mov    ebx,0x8
c0002085:	89 f1                	mov    ecx,esi
c0002087:	84 d1                	test   cl,dl
c0002089:	0f 95 c1             	setne  cl
c000208c:	0f b6 c9             	movzx  ecx,cl
c000208f:	31 c1                	xor    ecx,eax
c0002091:	89 c8                	mov    eax,ecx
c0002093:	d1 e8                	shr    eax,1
c0002095:	80 e1 01             	and    cl,0x1
c0002098:	74 05                	je     c000209f <crc32+0x25>
c000209a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209f:	d1 e2                	shl    edx,1
c00020a1:	4b                   	dec    ebx
c00020a2:	75 e1                	jne    c0002085 <crc32+0xb>
c00020a4:	5b                   	pop    ebx
c00020a5:	5e                   	pop    esi
c00020a6:	c3                   	ret    

c00020a7 <test_gpt_header>:
c00020a7:	55                   	push   ebp
c00020a8:	b9 10 00 00 00       	mov    ecx,0x10
c00020ad:	57                   	push   edi
c00020ae:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00020b3:	56                   	push   esi
c00020b4:	31 ff                	xor    edi,edi
c00020b6:	53                   	push   ebx
c00020b7:	89 c3                	mov    ebx,eax
c00020b9:	e8 2c fa ff ff       	call   c0001aea <mem_cmp>
c00020be:	85 c0                	test   eax,eax
c00020c0:	75 55                	jne    c0002117 <test_gpt_header+0x70>
c00020c2:	89 c7                	mov    edi,eax
c00020c4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c9:	83 ce ff             	or     esi,0xffffffff
c00020cc:	31 d2                	xor    edx,edx
c00020ce:	83 fd 03             	cmp    ebp,0x3
c00020d1:	76 05                	jbe    c00020d8 <test_gpt_header+0x31>
c00020d3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d8:	89 f0                	mov    eax,esi
c00020da:	45                   	inc    ebp
c00020db:	e8 9a ff ff ff       	call   c000207a <crc32>
c00020e0:	83 fd 4c             	cmp    ebp,0x4c
c00020e3:	89 c6                	mov    esi,eax
c00020e5:	75 e5                	jne    c00020cc <test_gpt_header+0x25>
c00020e7:	8d 43 10             	lea    eax,[ebx+0x10]
c00020ea:	f7 d6                	not    esi
c00020ec:	e8 67 f9 ff ff       	call   c0001a58 <ld_dword>
c00020f1:	39 c6                	cmp    esi,eax
c00020f3:	75 22                	jne    c0002117 <test_gpt_header+0x70>
c00020f5:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f8:	e8 5b f9 ff ff       	call   c0001a58 <ld_dword>
c00020fd:	83 c0 80             	add    eax,0xffffff80
c0002100:	75 15                	jne    c0002117 <test_gpt_header+0x70>
c0002102:	8d 43 50             	lea    eax,[ebx+0x50]
c0002105:	e8 4e f9 ff ff       	call   c0001a58 <ld_dword>
c000210a:	3d 80 00 00 00       	cmp    eax,0x80
c000210f:	0f 96 c0             	setbe  al
c0002112:	0f b6 c0             	movzx  eax,al
c0002115:	89 c7                	mov    edi,eax
c0002117:	5b                   	pop    ebx
c0002118:	89 f8                	mov    eax,edi
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	5d                   	pop    ebp
c000211d:	c3                   	ret    

c000211e <make_rand>:
c000211e:	56                   	push   esi
c000211f:	85 c0                	test   eax,eax
c0002121:	53                   	push   ebx
c0002122:	75 05                	jne    c0002129 <make_rand+0xb>
c0002124:	b8 01 00 00 00       	mov    eax,0x1
c0002129:	01 d1                	add    ecx,edx
c000212b:	bb 08 00 00 00       	mov    ebx,0x8
c0002130:	89 c6                	mov    esi,eax
c0002132:	d1 e8                	shr    eax,1
c0002134:	83 e6 01             	and    esi,0x1
c0002137:	85 f6                	test   esi,esi
c0002139:	74 05                	je     c0002140 <make_rand+0x22>
c000213b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002140:	4b                   	dec    ebx
c0002141:	75 ed                	jne    c0002130 <make_rand+0x12>
c0002143:	42                   	inc    edx
c0002144:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002147:	39 ca                	cmp    edx,ecx
c0002149:	75 e0                	jne    c000212b <make_rand+0xd>
c000214b:	5b                   	pop    ebx
c000214c:	5e                   	pop    esi
c000214d:	c3                   	ret    

c000214e <validate>:
c000214e:	56                   	push   esi
c000214f:	53                   	push   ebx
c0002150:	89 d6                	mov    esi,edx
c0002152:	51                   	push   ecx
c0002153:	85 c0                	test   eax,eax
c0002155:	75 09                	jne    c0002160 <validate+0x12>
c0002157:	b8 09 00 00 00       	mov    eax,0x9
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	eb 2f                	jmp    c000218f <validate+0x41>
c0002160:	89 c3                	mov    ebx,eax
c0002162:	8b 00                	mov    eax,DWORD PTR [eax]
c0002164:	85 c0                	test   eax,eax
c0002166:	74 ef                	je     c0002157 <validate+0x9>
c0002168:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216b:	74 ea                	je     c0002157 <validate+0x9>
c000216d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002171:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002175:	75 e0                	jne    c0002157 <validate+0x9>
c0002177:	83 ec 0c             	sub    esp,0xc
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 76 f8 ff ff       	call   c00019fa <disk_status>
c0002184:	83 c4 10             	add    esp,0x10
c0002187:	a8 01                	test   al,0x1
c0002189:	75 cc                	jne    c0002157 <validate+0x9>
c000218b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218d:	31 c0                	xor    eax,eax
c000218f:	89 0e                	mov    DWORD PTR [esi],ecx
c0002191:	5a                   	pop    edx
c0002192:	5b                   	pop    ebx
c0002193:	5e                   	pop    esi
c0002194:	c3                   	ret    

c0002195 <sync_window>:
c0002195:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002199:	0f 84 85 00 00 00    	je     c0002224 <sync_window+0x8f>
c000219f:	55                   	push   ebp
c00021a0:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a3:	57                   	push   edi
c00021a4:	56                   	push   esi
c00021a5:	53                   	push   ebx
c00021a6:	89 c3                	mov    ebx,eax
c00021a8:	83 ec 28             	sub    esp,0x28
c00021ab:	6a 01                	push   0x1
c00021ad:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021b0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b3:	55                   	push   ebp
c00021b4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b8:	50                   	push   eax
c00021b9:	e8 58 f8 ff ff       	call   c0001a16 <disk_write>
c00021be:	83 c4 20             	add    esp,0x20
c00021c1:	ba 01 00 00 00       	mov    edx,0x1
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 50                	jne    c000221a <sync_window+0x85>
c00021ca:	31 ff                	xor    edi,edi
c00021cc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021da:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dd:	89 c6                	mov    esi,eax
c00021df:	89 d7                	mov    edi,edx
c00021e1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021eb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ef:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f3:	73 23                	jae    c0002218 <sync_window+0x83>
c00021f5:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f9:	75 1d                	jne    c0002218 <sync_window+0x83>
c00021fb:	83 ec 0c             	sub    esp,0xc
c00021fe:	6a 01                	push   0x1
c0002200:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002204:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002208:	52                   	push   edx
c0002209:	50                   	push   eax
c000220a:	55                   	push   ebp
c000220b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220f:	50                   	push   eax
c0002210:	e8 01 f8 ff ff       	call   c0001a16 <disk_write>
c0002215:	83 c4 20             	add    esp,0x20
c0002218:	31 d2                	xor    edx,edx
c000221a:	83 c4 1c             	add    esp,0x1c
c000221d:	89 d0                	mov    eax,edx
c000221f:	5b                   	pop    ebx
c0002220:	5e                   	pop    esi
c0002221:	5f                   	pop    edi
c0002222:	5d                   	pop    ebp
c0002223:	c3                   	ret    
c0002224:	31 d2                	xor    edx,edx
c0002226:	89 d0                	mov    eax,edx
c0002228:	c3                   	ret    

c0002229 <move_window>:
c0002229:	56                   	push   esi
c000222a:	53                   	push   ebx
c000222b:	89 c3                	mov    ebx,eax
c000222d:	83 ec 14             	sub    esp,0x14
c0002230:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002233:	75 07                	jne    c000223c <move_window+0x13>
c0002235:	31 f6                	xor    esi,esi
c0002237:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000223a:	74 59                	je     c0002295 <move_window+0x6c>
c000223c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002240:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002244:	89 d8                	mov    eax,ebx
c0002246:	e8 4a ff ff ff       	call   c0002195 <sync_window>
c000224b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224f:	89 c6                	mov    esi,eax
c0002251:	85 c0                	test   eax,eax
c0002253:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002257:	75 3c                	jne    c0002295 <move_window+0x6c>
c0002259:	83 ec 0c             	sub    esp,0xc
c000225c:	8d 43 54             	lea    eax,[ebx+0x54]
c000225f:	6a 01                	push   0x1
c0002261:	51                   	push   ecx
c0002262:	52                   	push   edx
c0002263:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002267:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226b:	50                   	push   eax
c000226c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002270:	50                   	push   eax
c0002271:	e8 8a f7 ff ff       	call   c0001a00 <disk_read>
c0002276:	83 c4 20             	add    esp,0x20
c0002279:	85 c0                	test   eax,eax
c000227b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002283:	74 0a                	je     c000228f <move_window+0x66>
c0002285:	83 ca ff             	or     edx,0xffffffff
c0002288:	be 01 00 00 00       	mov    esi,0x1
c000228d:	89 d1                	mov    ecx,edx
c000228f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002292:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002295:	89 f0                	mov    eax,esi
c0002297:	83 c4 14             	add    esp,0x14
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <check_fs>:
c000229d:	53                   	push   ebx
c000229e:	89 c3                	mov    ebx,eax
c00022a0:	83 ec 08             	sub    esp,0x8
c00022a3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ae:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b5:	e8 6f ff ff ff       	call   c0002229 <move_window>
c00022ba:	ba 04 00 00 00       	mov    edx,0x4
c00022bf:	85 c0                	test   eax,eax
c00022c1:	0f 85 89 00 00 00    	jne    c0002350 <check_fs+0xb3>
c00022c7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cd:	e8 79 f7 ff ff       	call   c0001a4b <ld_word>
c00022d2:	ba 03 00 00 00       	mov    edx,0x3
c00022d7:	66 3d 55 aa          	cmp    ax,0xaa55
c00022db:	75 73                	jne    c0002350 <check_fs+0xb3>
c00022dd:	ba 00 5e 02 c0       	mov    edx,0xc0025e00
c00022e2:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e5:	b9 0b 00 00 00       	mov    ecx,0xb
c00022ea:	e8 fb f7 ff ff       	call   c0001aea <mem_cmp>
c00022ef:	ba 01 00 00 00       	mov    edx,0x1
c00022f4:	85 c0                	test   eax,eax
c00022f6:	74 58                	je     c0002350 <check_fs+0xb3>
c00022f8:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fb:	8d 50 18             	lea    edx,[eax+0x18]
c00022fe:	80 fa 01             	cmp    dl,0x1
c0002301:	76 09                	jbe    c000230c <check_fs+0x6f>
c0002303:	ba 02 00 00 00       	mov    edx,0x2
c0002308:	3c eb                	cmp    al,0xeb
c000230a:	75 44                	jne    c0002350 <check_fs+0xb3>
c000230c:	ba b8 8a 02 c0       	mov    edx,0xc0028ab8
c0002311:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002317:	b9 03 00 00 00       	mov    ecx,0x3
c000231c:	e8 c9 f7 ff ff       	call   c0001aea <mem_cmp>
c0002321:	31 d2                	xor    edx,edx
c0002323:	85 c0                	test   eax,eax
c0002325:	74 29                	je     c0002350 <check_fs+0xb3>
c0002327:	ba 0c 5e 02 c0       	mov    edx,0xc0025e0c
c000232c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002332:	b9 05 00 00 00       	mov    ecx,0x5
c0002337:	e8 ae f7 ff ff       	call   c0001aea <mem_cmp>
c000233c:	31 d2                	xor    edx,edx
c000233e:	85 c0                	test   eax,eax
c0002340:	74 0e                	je     c0002350 <check_fs+0xb3>
c0002342:	31 d2                	xor    edx,edx
c0002344:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234b:	0f 95 c2             	setne  dl
c000234e:	01 d2                	add    edx,edx
c0002350:	89 d0                	mov    eax,edx
c0002352:	83 c4 08             	add    esp,0x8
c0002355:	5b                   	pop    ebx
c0002356:	c3                   	ret    

c0002357 <find_volume>:
c0002357:	55                   	push   ebp
c0002358:	31 c9                	xor    ecx,ecx
c000235a:	57                   	push   edi
c000235b:	56                   	push   esi
c000235c:	89 d6                	mov    esi,edx
c000235e:	53                   	push   ebx
c000235f:	31 d2                	xor    edx,edx
c0002361:	83 ec 3c             	sub    esp,0x3c
c0002364:	89 c3                	mov    ebx,eax
c0002366:	e8 32 ff ff ff       	call   c000229d <check_fs>
c000236b:	83 f8 02             	cmp    eax,0x2
c000236e:	74 0e                	je     c000237e <find_volume+0x27>
c0002370:	0f 87 5d 01 00 00    	ja     c00024d3 <find_volume+0x17c>
c0002376:	85 f6                	test   esi,esi
c0002378:	0f 84 55 01 00 00    	je     c00024d3 <find_volume+0x17c>
c000237e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002385:	0f 85 dd 00 00 00    	jne    c0002468 <find_volume+0x111>
c000238b:	31 c9                	xor    ecx,ecx
c000238d:	ba 01 00 00 00       	mov    edx,0x1
c0002392:	89 d8                	mov    eax,ebx
c0002394:	e8 90 fe ff ff       	call   c0002229 <move_window>
c0002399:	85 c0                	test   eax,eax
c000239b:	74 0a                	je     c00023a7 <find_volume+0x50>
c000239d:	b8 04 00 00 00       	mov    eax,0x4
c00023a2:	e9 2c 01 00 00       	jmp    c00024d3 <find_volume+0x17c>
c00023a7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023aa:	89 e8                	mov    eax,ebp
c00023ac:	e8 f6 fc ff ff       	call   c00020a7 <test_gpt_header>
c00023b1:	85 c0                	test   eax,eax
c00023b3:	75 0a                	jne    c00023bf <find_volume+0x68>
c00023b5:	b8 03 00 00 00       	mov    eax,0x3
c00023ba:	e9 14 01 00 00       	jmp    c00024d3 <find_volume+0x17c>
c00023bf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c5:	e8 8e f6 ff ff       	call   c0001a58 <ld_dword>
c00023ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023ce:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d4:	e8 97 f6 ff ff       	call   c0001a70 <ld_qword>
c00023d9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f5:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f9:	74 ba                	je     c00023b5 <find_volume+0x5e>
c00023fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023ff:	31 c9                	xor    ecx,ecx
c0002401:	c1 e7 07             	shl    edi,0x7
c0002404:	89 d8                	mov    eax,ebx
c0002406:	89 fa                	mov    edx,edi
c0002408:	c1 ea 09             	shr    edx,0x9
c000240b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002413:	e8 11 fe ff ff       	call   c0002229 <move_window>
c0002418:	85 c0                	test   eax,eax
c000241a:	75 81                	jne    c000239d <find_volume+0x46>
c000241c:	81 e7 80 01 00 00    	and    edi,0x180
c0002422:	b9 10 00 00 00       	mov    ecx,0x10
c0002427:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242b:	ba f0 5d 02 c0       	mov    edx,0xc0025df0
c0002430:	e8 b5 f6 ff ff       	call   c0001aea <mem_cmp>
c0002435:	85 c0                	test   eax,eax
c0002437:	75 29                	jne    c0002462 <find_volume+0x10b>
c0002439:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002441:	e8 2a f6 ff ff       	call   c0001a70 <ld_qword>
c0002446:	89 d1                	mov    ecx,edx
c0002448:	89 c2                	mov    edx,eax
c000244a:	89 d8                	mov    eax,ebx
c000244c:	e8 4c fe ff ff       	call   c000229d <check_fs>
c0002451:	85 f6                	test   esi,esi
c0002453:	75 07                	jne    c000245c <find_volume+0x105>
c0002455:	83 f8 01             	cmp    eax,0x1
c0002458:	77 08                	ja     c0002462 <find_volume+0x10b>
c000245a:	eb 77                	jmp    c00024d3 <find_volume+0x17c>
c000245c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002460:	74 71                	je     c00024d3 <find_volume+0x17c>
c0002462:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002466:	eb 89                	jmp    c00023f1 <find_volume+0x9a>
c0002468:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002472:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002478:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247c:	89 cd                	mov    ebp,ecx
c000247e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002482:	89 f8                	mov    eax,edi
c0002484:	83 c7 10             	add    edi,0x10
c0002487:	e8 cc f5 ff ff       	call   c0001a58 <ld_dword>
c000248c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002490:	89 01                	mov    DWORD PTR [ecx],eax
c0002492:	83 c1 04             	add    ecx,0x4
c0002495:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002499:	75 e3                	jne    c000247e <find_volume+0x127>
c000249b:	31 ff                	xor    edi,edi
c000249d:	85 f6                	test   esi,esi
c000249f:	74 03                	je     c00024a4 <find_volume+0x14d>
c00024a1:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a8:	85 d2                	test   edx,edx
c00024aa:	74 14                	je     c00024c0 <find_volume+0x169>
c00024ac:	31 c9                	xor    ecx,ecx
c00024ae:	89 d8                	mov    eax,ebx
c00024b0:	e8 e8 fd ff ff       	call   c000229d <check_fs>
c00024b5:	83 f8 01             	cmp    eax,0x1
c00024b8:	76 19                	jbe    c00024d3 <find_volume+0x17c>
c00024ba:	85 f6                	test   esi,esi
c00024bc:	74 0f                	je     c00024cd <find_volume+0x176>
c00024be:	eb 13                	jmp    c00024d3 <find_volume+0x17c>
c00024c0:	85 f6                	test   esi,esi
c00024c2:	0f 85 ed fe ff ff    	jne    c00023b5 <find_volume+0x5e>
c00024c8:	b8 03 00 00 00       	mov    eax,0x3
c00024cd:	47                   	inc    edi
c00024ce:	83 ff 03             	cmp    edi,0x3
c00024d1:	76 d1                	jbe    c00024a4 <find_volume+0x14d>
c00024d3:	83 c4 3c             	add    esp,0x3c
c00024d6:	5b                   	pop    ebx
c00024d7:	5e                   	pop    esi
c00024d8:	5f                   	pop    edi
c00024d9:	5d                   	pop    ebp
c00024da:	c3                   	ret    

c00024db <mount_volume>:
c00024db:	55                   	push   ebp
c00024dc:	57                   	push   edi
c00024dd:	89 cf                	mov    edi,ecx
c00024df:	56                   	push   esi
c00024e0:	53                   	push   ebx
c00024e1:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e6:	83 ec 3c             	sub    esp,0x3c
c00024e9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f3:	e8 35 fb ff ff       	call   c000202d <get_ldnumber>
c00024f8:	85 c0                	test   eax,eax
c00024fa:	0f 88 3a 05 00 00    	js     c0002a3a <mount_volume+0x55f>
c0002500:	8b 2c 85 a0 a3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5c60]
c0002507:	89 c6                	mov    esi,eax
c0002509:	bb 0c 00 00 00       	mov    ebx,0xc
c000250e:	85 ed                	test   ebp,ebp
c0002510:	0f 84 24 05 00 00    	je     c0002a3a <mount_volume+0x55f>
c0002516:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000251a:	83 e7 fe             	and    edi,0xfffffffe
c000251d:	89 2a                	mov    DWORD PTR [edx],ebp
c000251f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002523:	74 32                	je     c0002557 <mount_volume+0x7c>
c0002525:	83 ec 0c             	sub    esp,0xc
c0002528:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252c:	50                   	push   eax
c000252d:	e8 c8 f4 ff ff       	call   c00019fa <disk_status>
c0002532:	83 c4 10             	add    esp,0x10
c0002535:	a8 01                	test   al,0x1
c0002537:	75 1e                	jne    c0002557 <mount_volume+0x7c>
c0002539:	31 db                	xor    ebx,ebx
c000253b:	89 f9                	mov    ecx,edi
c000253d:	84 c9                	test   cl,cl
c000253f:	0f 84 f5 04 00 00    	je     c0002a3a <mount_volume+0x55f>
c0002545:	a8 04                	test   al,0x4
c0002547:	0f 84 ed 04 00 00    	je     c0002a3a <mount_volume+0x55f>
c000254d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002552:	e9 e3 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c0002557:	83 ec 0c             	sub    esp,0xc
c000255a:	89 f0                	mov    eax,esi
c000255c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002560:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002563:	0f b6 f0             	movzx  esi,al
c0002566:	bb 03 00 00 00       	mov    ebx,0x3
c000256b:	56                   	push   esi
c000256c:	e8 8c f4 ff ff       	call   c00019fd <disk_initialize>
c0002571:	83 c4 10             	add    esp,0x10
c0002574:	a8 01                	test   al,0x1
c0002576:	0f 85 be 04 00 00    	jne    c0002a3a <mount_volume+0x55f>
c000257c:	89 f9                	mov    ecx,edi
c000257e:	84 c9                	test   cl,cl
c0002580:	74 04                	je     c0002586 <mount_volume+0xab>
c0002582:	a8 04                	test   al,0x4
c0002584:	75 c7                	jne    c000254d <mount_volume+0x72>
c0002586:	31 d2                	xor    edx,edx
c0002588:	89 e8                	mov    eax,ebp
c000258a:	e8 c8 fd ff ff       	call   c0002357 <find_volume>
c000258f:	83 f8 04             	cmp    eax,0x4
c0002592:	75 0a                	jne    c000259e <mount_volume+0xc3>
c0002594:	bb 01 00 00 00       	mov    ebx,0x1
c0002599:	e9 9c 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c000259e:	83 f8 01             	cmp    eax,0x1
c00025a1:	76 0a                	jbe    c00025ad <mount_volume+0xd2>
c00025a3:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a8:	e9 8d 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c00025ad:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025b0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025bb:	75 17                	jne    c00025d4 <mount_volume+0xf9>
c00025bd:	b8 0b 00 00 00       	mov    eax,0xb
c00025c2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c7:	75 da                	jne    c00025a3 <mount_volume+0xc8>
c00025c9:	40                   	inc    eax
c00025ca:	83 f8 40             	cmp    eax,0x40
c00025cd:	75 f3                	jne    c00025c2 <mount_volume+0xe7>
c00025cf:	e9 5a 02 00 00       	jmp    c000282e <mount_volume+0x353>
c00025d4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d7:	e8 6f f4 ff ff       	call   c0001a4b <ld_word>
c00025dc:	66 3d 00 02          	cmp    ax,0x200
c00025e0:	75 c1                	jne    c00025a3 <mount_volume+0xc8>
c00025e2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e5:	e8 61 f4 ff ff       	call   c0001a4b <ld_word>
c00025ea:	0f b7 c0             	movzx  eax,ax
c00025ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f1:	85 c0                	test   eax,eax
c00025f3:	75 0c                	jne    c0002601 <mount_volume+0x126>
c00025f5:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f8:	e8 5b f4 ff ff       	call   c0001a58 <ld_dword>
c00025fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002605:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002608:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002612:	48                   	dec    eax
c0002613:	3c 01                	cmp    al,0x1
c0002615:	77 8c                	ja     c00025a3 <mount_volume+0xc8>
c0002617:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261b:	89 c3                	mov    ebx,eax
c000261d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002621:	66 85 c0             	test   ax,ax
c0002624:	0f 84 79 ff ff ff    	je     c00025a3 <mount_volume+0xc8>
c000262a:	8d 40 ff             	lea    eax,[eax-0x1]
c000262d:	85 d8                	test   eax,ebx
c000262f:	0f 85 6e ff ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002635:	8d 45 65             	lea    eax,[ebp+0x65]
c0002638:	e8 0e f4 ff ff       	call   c0001a4b <ld_word>
c000263d:	89 c7                	mov    edi,eax
c000263f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002643:	a8 0f                	test   al,0xf
c0002645:	0f 85 58 ff ff ff    	jne    c00025a3 <mount_volume+0xc8>
c000264b:	8d 45 67             	lea    eax,[ebp+0x67]
c000264e:	e8 f8 f3 ff ff       	call   c0001a4b <ld_word>
c0002653:	0f b7 f0             	movzx  esi,ax
c0002656:	85 f6                	test   esi,esi
c0002658:	75 0a                	jne    c0002664 <mount_volume+0x189>
c000265a:	8d 45 74             	lea    eax,[ebp+0x74]
c000265d:	e8 f6 f3 ff ff       	call   c0001a58 <ld_dword>
c0002662:	89 c6                	mov    esi,eax
c0002664:	8d 45 62             	lea    eax,[ebp+0x62]
c0002667:	e8 df f3 ff ff       	call   c0001a4b <ld_word>
c000266c:	66 85 c0             	test   ax,ax
c000266f:	0f 84 2e ff ff ff    	je     c00025a3 <mount_volume+0xc8>
c0002675:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000267a:	0f b7 c8             	movzx  ecx,ax
c000267d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002682:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002686:	89 fa                	mov    edx,edi
c0002688:	66 c1 ea 04          	shr    dx,0x4
c000268c:	0f b7 d2             	movzx  edx,dx
c000268f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002693:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002696:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000269a:	39 c6                	cmp    esi,eax
c000269c:	0f 82 01 ff ff ff    	jb     c00025a3 <mount_volume+0xc8>
c00026a2:	29 c6                	sub    esi,eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 f0                	mov    eax,esi
c00026a8:	f7 f3                	div    ebx
c00026aa:	39 de                	cmp    esi,ebx
c00026ac:	0f 82 f1 fe ff ff    	jb     c00025a3 <mount_volume+0xc8>
c00026b2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b7:	0f 87 e6 fe ff ff    	ja     c00025a3 <mount_volume+0xc8>
c00026bd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c2:	0f 86 63 03 00 00    	jbe    c0002a2b <mount_volume+0x550>
c00026c8:	bb 03 00 00 00       	mov    ebx,0x3
c00026cd:	8d 70 02             	lea    esi,[eax+0x2]
c00026d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026db:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026de:	31 d2                	xor    edx,edx
c00026e0:	89 c8                	mov    eax,ecx
c00026e2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f5:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f8:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026ff:	31 d2                	xor    edx,edx
c0002701:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002705:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002709:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270f:	83 fb 03             	cmp    ebx,0x3
c0002712:	75 2b                	jne    c000273f <mount_volume+0x264>
c0002714:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002717:	e8 2f f3 ff ff       	call   c0001a4b <ld_word>
c000271c:	66 09 c7             	or     di,ax
c000271f:	0f 85 7e fe ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002725:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272b:	c1 e6 02             	shl    esi,0x2
c000272e:	e8 25 f3 ff ff       	call   c0001a58 <ld_dword>
c0002733:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000273a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273d:	eb 30                	jmp    c000276f <mount_volume+0x294>
c000273f:	66 85 ff             	test   di,di
c0002742:	0f 84 5b fe ff ff    	je     c00025a3 <mount_volume+0xc8>
c0002748:	31 d2                	xor    edx,edx
c000274a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002752:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002756:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002759:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275c:	83 fb 02             	cmp    ebx,0x2
c000275f:	75 04                	jne    c0002765 <mount_volume+0x28a>
c0002761:	01 f6                	add    esi,esi
c0002763:	eb 0a                	jmp    c000276f <mount_volume+0x294>
c0002765:	8d 04 76             	lea    eax,[esi+esi*2]
c0002768:	83 e6 01             	and    esi,0x1
c000276b:	d1 e8                	shr    eax,1
c000276d:	01 c6                	add    esi,eax
c000276f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002775:	c1 ee 09             	shr    esi,0x9
c0002778:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277c:	0f 87 21 fe ff ff    	ja     c00025a3 <mount_volume+0xc8>
c0002782:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002789:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002790:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002794:	83 fb 03             	cmp    ebx,0x3
c0002797:	75 7a                	jne    c0002813 <mount_volume+0x338>
c0002799:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279f:	e8 a7 f2 ff ff       	call   c0001a4b <ld_word>
c00027a4:	66 48                	dec    ax
c00027a6:	75 6b                	jne    c0002813 <mount_volume+0x338>
c00027a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027b0:	83 c2 01             	add    edx,0x1
c00027b3:	89 e8                	mov    eax,ebp
c00027b5:	83 d1 00             	adc    ecx,0x0
c00027b8:	e8 6c fa ff ff       	call   c0002229 <move_window>
c00027bd:	85 c0                	test   eax,eax
c00027bf:	75 52                	jne    c0002813 <mount_volume+0x338>
c00027c1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027cb:	e8 7b f2 ff ff       	call   c0001a4b <ld_word>
c00027d0:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d4:	75 3d                	jne    c0002813 <mount_volume+0x338>
c00027d6:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d9:	e8 7a f2 ff ff       	call   c0001a58 <ld_dword>
c00027de:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e3:	75 2e                	jne    c0002813 <mount_volume+0x338>
c00027e5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027eb:	e8 68 f2 ff ff       	call   c0001a58 <ld_dword>
c00027f0:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f5:	75 1c                	jne    c0002813 <mount_volume+0x338>
c00027f7:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fd:	e8 56 f2 ff ff       	call   c0001a58 <ld_dword>
c0002802:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002805:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280b:	e8 48 f2 ff ff       	call   c0001a58 <ld_dword>
c0002810:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002813:	66 a1 80 a3 02 c0    	mov    ax,ds:0xc002a380
c0002819:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281c:	40                   	inc    eax
c000281d:	31 db                	xor    ebx,ebx
c000281f:	66 a3 80 a3 02 c0    	mov    ds:0xc002a380,ax
c0002825:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002829:	e9 0c 02 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c000282e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002834:	e8 12 f2 ff ff       	call   c0001a4b <ld_word>
c0002839:	66 3d 00 01          	cmp    ax,0x100
c000283d:	0f 85 60 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002843:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000284a:	0f 85 53 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002850:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002856:	e8 15 f2 ff ff       	call   c0001a70 <ld_qword>
c000285b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002863:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002869:	e8 ea f1 ff ff       	call   c0001a58 <ld_dword>
c000286e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002871:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002877:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000287a:	fe c8                	dec    al
c000287c:	0f 85 21 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002882:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002889:	bb 01 00 00 00       	mov    ebx,0x1
c000288e:	d3 e3                	shl    ebx,cl
c0002890:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002894:	66 85 db             	test   bx,bx
c0002897:	0f 84 06 fd ff ff    	je     c00025a3 <mount_volume+0xc8>
c000289d:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a3:	e8 b0 f1 ff ff       	call   c0001a58 <ld_dword>
c00028a8:	89 c6                	mov    esi,eax
c00028aa:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028af:	0f 87 ee fc ff ff    	ja     c00025a3 <mount_volume+0xc8>
c00028b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b9:	8d 40 02             	lea    eax,[eax+0x2]
c00028bc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028bf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028cf:	e8 84 f1 ff ff       	call   c0001a58 <ld_dword>
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028da:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028ec:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f2:	e8 61 f1 ff ff       	call   c0001a58 <ld_dword>
c00028f7:	31 d2                	xor    edx,edx
c00028f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002901:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002905:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002908:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290b:	0f b7 c3             	movzx  eax,bx
c000290e:	31 d2                	xor    edx,edx
c0002910:	0f af f0             	imul   esi,eax
c0002913:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002917:	89 f0                	mov    eax,esi
c0002919:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002921:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002925:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002929:	39 c1                	cmp    ecx,eax
c000292b:	89 df                	mov    edi,ebx
c000292d:	19 d7                	sbb    edi,edx
c000292f:	0f 82 6e fc ff ff    	jb     c00025a3 <mount_volume+0xc8>
c0002935:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293b:	31 db                	xor    ebx,ebx
c000293d:	e8 16 f1 ff ff       	call   c0001a58 <ld_dword>
c0002942:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002949:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002954:	85 db                	test   ebx,ebx
c0002956:	75 39                	jne    c0002991 <mount_volume+0x4b6>
c0002958:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002960:	0f 86 3d fc ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c0002966:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002969:	31 ff                	xor    edi,edi
c000296b:	89 e8                	mov    eax,ebp
c000296d:	e8 72 f3 ff ff       	call   c0001ce4 <clst2sect>
c0002972:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002976:	01 c6                	add    esi,eax
c0002978:	89 e8                	mov    eax,ebp
c000297a:	11 d7                	adc    edi,edx
c000297c:	89 f2                	mov    edx,esi
c000297e:	89 f9                	mov    ecx,edi
c0002980:	e8 a4 f8 ff ff       	call   c0002229 <move_window>
c0002985:	85 c0                	test   eax,eax
c0002987:	0f 85 07 fc ff ff    	jne    c0002594 <mount_volume+0xb9>
c000298d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002991:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002996:	74 0b                	je     c00029a3 <mount_volume+0x4c8>
c0002998:	83 c3 20             	add    ebx,0x20
c000299b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a1:	eb b1                	jmp    c0002954 <mount_volume+0x479>
c00029a3:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029aa:	e8 a9 f0 ff ff       	call   c0001a58 <ld_dword>
c00029af:	89 c3                	mov    ebx,eax
c00029b1:	83 f8 01             	cmp    eax,0x1
c00029b4:	0f 86 e9 fb ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c00029ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bd:	0f 86 e0 fb ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c00029c3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029ca:	0f af c2             	imul   eax,edx
c00029cd:	31 d2                	xor    edx,edx
c00029cf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029db:	31 c9                	xor    ecx,ecx
c00029dd:	89 da                	mov    edx,ebx
c00029df:	89 e8                	mov    eax,ebp
c00029e1:	c1 ea 07             	shr    edx,0x7
c00029e4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029ea:	e8 3a f8 ff ff       	call   c0002229 <move_window>
c00029ef:	85 c0                	test   eax,eax
c00029f1:	0f 85 9d fb ff ff    	jne    c0002594 <mount_volume+0xb9>
c00029f7:	89 d8                	mov    eax,ebx
c00029f9:	83 e0 7f             	and    eax,0x7f
c00029fc:	8d 04 86             	lea    eax,[esi+eax*4]
c00029ff:	e8 54 f0 ff ff       	call   c0001a58 <ld_dword>
c0002a04:	83 f8 ff             	cmp    eax,0xffffffff
c0002a07:	74 0a                	je     c0002a13 <mount_volume+0x538>
c0002a09:	43                   	inc    ebx
c0002a0a:	39 d8                	cmp    eax,ebx
c0002a0c:	74 cd                	je     c00029db <mount_volume+0x500>
c0002a0e:	e9 90 fb ff ff       	jmp    c00025a3 <mount_volume+0xc8>
c0002a13:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a1a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a21:	bb 04 00 00 00       	mov    ebx,0x4
c0002a26:	e9 e8 fd ff ff       	jmp    c0002813 <mount_volume+0x338>
c0002a2b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a30:	19 db                	sbb    ebx,ebx
c0002a32:	83 c3 02             	add    ebx,0x2
c0002a35:	e9 93 fc ff ff       	jmp    c00026cd <mount_volume+0x1f2>
c0002a3a:	83 c4 3c             	add    esp,0x3c
c0002a3d:	89 d8                	mov    eax,ebx
c0002a3f:	5b                   	pop    ebx
c0002a40:	5e                   	pop    esi
c0002a41:	5f                   	pop    edi
c0002a42:	5d                   	pop    ebp
c0002a43:	c3                   	ret    

c0002a44 <find_bitmap>:
c0002a44:	55                   	push   ebp
c0002a45:	57                   	push   edi
c0002a46:	89 c7                	mov    edi,eax
c0002a48:	56                   	push   esi
c0002a49:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4c:	53                   	push   ebx
c0002a4d:	83 ec 1c             	sub    esp,0x1c
c0002a50:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a53:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a57:	83 e8 02             	sub    eax,0x2
c0002a5a:	39 f0                	cmp    eax,esi
c0002a5c:	77 02                	ja     c0002a60 <find_bitmap+0x1c>
c0002a5e:	31 f6                	xor    esi,esi
c0002a60:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a64:	89 f3                	mov    ebx,esi
c0002a66:	31 ed                	xor    ebp,ebp
c0002a68:	31 c9                	xor    ecx,ecx
c0002a6a:	89 da                	mov    edx,ebx
c0002a6c:	89 f8                	mov    eax,edi
c0002a6e:	c1 ea 0c             	shr    edx,0xc
c0002a71:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a74:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a77:	e8 ad f7 ff ff       	call   c0002229 <move_window>
c0002a7c:	85 c0                	test   eax,eax
c0002a7e:	75 68                	jne    c0002ae8 <find_bitmap+0xa4>
c0002a80:	89 da                	mov    edx,ebx
c0002a82:	89 d9                	mov    ecx,ebx
c0002a84:	c1 ea 03             	shr    edx,0x3
c0002a87:	83 e1 07             	and    ecx,0x7
c0002a8a:	b8 01 00 00 00       	mov    eax,0x1
c0002a8f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a95:	d3 e0                	shl    eax,cl
c0002a97:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a9a:	83 e9 02             	sub    ecx,0x2
c0002a9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa5:	43                   	inc    ebx
c0002aa6:	21 c1                	and    ecx,eax
c0002aa8:	d1 e0                	shl    eax,1
c0002aaa:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aae:	77 09                	ja     c0002ab9 <find_bitmap+0x75>
c0002ab0:	31 db                	xor    ebx,ebx
c0002ab2:	ba 00 02 00 00       	mov    edx,0x200
c0002ab7:	31 c0                	xor    eax,eax
c0002ab9:	84 c9                	test   cl,cl
c0002abb:	75 10                	jne    c0002acd <find_bitmap+0x89>
c0002abd:	45                   	inc    ebp
c0002abe:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac2:	75 0f                	jne    c0002ad3 <find_bitmap+0x8f>
c0002ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac8:	83 c0 02             	add    eax,0x2
c0002acb:	eb 22                	jmp    c0002aef <find_bitmap+0xab>
c0002acd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad1:	31 ed                	xor    ebp,ebp
c0002ad3:	39 de                	cmp    esi,ebx
c0002ad5:	74 16                	je     c0002aed <find_bitmap+0xa9>
c0002ad7:	84 c0                	test   al,al
c0002ad9:	75 c6                	jne    c0002aa1 <find_bitmap+0x5d>
c0002adb:	42                   	inc    edx
c0002adc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae2:	77 84                	ja     c0002a68 <find_bitmap+0x24>
c0002ae4:	b0 01                	mov    al,0x1
c0002ae6:	eb b9                	jmp    c0002aa1 <find_bitmap+0x5d>
c0002ae8:	83 c8 ff             	or     eax,0xffffffff
c0002aeb:	eb 02                	jmp    c0002aef <find_bitmap+0xab>
c0002aed:	31 c0                	xor    eax,eax
c0002aef:	83 c4 1c             	add    esp,0x1c
c0002af2:	5b                   	pop    ebx
c0002af3:	5e                   	pop    esi
c0002af4:	5f                   	pop    edi
c0002af5:	5d                   	pop    ebp
c0002af6:	c3                   	ret    

c0002af7 <change_bitmap>:
c0002af7:	55                   	push   ebp
c0002af8:	89 cd                	mov    ebp,ecx
c0002afa:	57                   	push   edi
c0002afb:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afe:	56                   	push   esi
c0002aff:	89 c7                	mov    edi,eax
c0002b01:	53                   	push   ebx
c0002b02:	89 c8                	mov    eax,ecx
c0002b04:	83 ec 1c             	sub    esp,0x1c
c0002b07:	31 d2                	xor    edx,edx
c0002b09:	89 ce                	mov    esi,ecx
c0002b0b:	c1 e8 0c             	shr    eax,0xc
c0002b0e:	bb 01 00 00 00       	mov    ebx,0x1
c0002b13:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b16:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b19:	c1 ee 03             	shr    esi,0x3
c0002b1c:	83 e1 07             	and    ecx,0x7
c0002b1f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b25:	d3 e3                	shl    ebx,cl
c0002b27:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2b:	89 c1                	mov    ecx,eax
c0002b2d:	89 d3                	mov    ebx,edx
c0002b2f:	83 c1 01             	add    ecx,0x1
c0002b32:	83 d3 00             	adc    ebx,0x0
c0002b35:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b39:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3d:	89 d1                	mov    ecx,edx
c0002b3f:	89 c2                	mov    edx,eax
c0002b41:	89 f8                	mov    eax,edi
c0002b43:	e8 e1 f6 ff ff       	call   c0002229 <move_window>
c0002b48:	89 c1                	mov    ecx,eax
c0002b4a:	85 c0                	test   eax,eax
c0002b4c:	75 48                	jne    c0002b96 <change_bitmap+0x9f>
c0002b4e:	31 d2                	xor    edx,edx
c0002b50:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b54:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b58:	0f 95 c2             	setne  dl
c0002b5b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5f:	74 3c                	je     c0002b9d <change_bitmap+0xa6>
c0002b61:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b65:	4d                   	dec    ebp
c0002b66:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b6a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6e:	74 32                	je     c0002ba2 <change_bitmap+0xab>
c0002b70:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b74:	75 d8                	jne    c0002b4e <change_bitmap+0x57>
c0002b76:	8d 46 01             	lea    eax,[esi+0x1]
c0002b79:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7e:	89 c3                	mov    ebx,eax
c0002b80:	31 f6                	xor    esi,esi
c0002b82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b8a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b90:	74 99                	je     c0002b2b <change_bitmap+0x34>
c0002b92:	89 de                	mov    esi,ebx
c0002b94:	eb b8                	jmp    c0002b4e <change_bitmap+0x57>
c0002b96:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9b:	eb 05                	jmp    c0002ba2 <change_bitmap+0xab>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	83 c4 1c             	add    esp,0x1c
c0002ba5:	89 c8                	mov    eax,ecx
c0002ba7:	5b                   	pop    ebx
c0002ba8:	5e                   	pop    esi
c0002ba9:	5f                   	pop    edi
c0002baa:	5d                   	pop    ebp
c0002bab:	c3                   	ret    

c0002bac <put_fat>:
c0002bac:	83 fa 01             	cmp    edx,0x1
c0002baf:	0f 86 7b 01 00 00    	jbe    c0002d30 <put_fat+0x184>
c0002bb5:	55                   	push   ebp
c0002bb6:	57                   	push   edi
c0002bb7:	89 cf                	mov    edi,ecx
c0002bb9:	56                   	push   esi
c0002bba:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbf:	53                   	push   ebx
c0002bc0:	89 c6                	mov    esi,eax
c0002bc2:	83 ec 1c             	sub    esp,0x1c
c0002bc5:	89 d3                	mov    ebx,edx
c0002bc7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bca:	0f 86 68 01 00 00    	jbe    c0002d38 <put_fat+0x18c>
c0002bd0:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd2:	3c 02                	cmp    al,0x2
c0002bd4:	0f 84 c7 00 00 00    	je     c0002ca1 <put_fat+0xf5>
c0002bda:	77 09                	ja     c0002be5 <put_fat+0x39>
c0002bdc:	fe c8                	dec    al
c0002bde:	74 17                	je     c0002bf7 <put_fat+0x4b>
c0002be0:	e9 53 01 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002be5:	b9 02 00 00 00       	mov    ecx,0x2
c0002bea:	3c 04                	cmp    al,0x4
c0002bec:	0f 86 e1 00 00 00    	jbe    c0002cd3 <put_fat+0x127>
c0002bf2:	e9 41 01 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002bf7:	89 d5                	mov    ebp,edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	d1 ed                	shr    ebp,1
c0002bfd:	89 f0                	mov    eax,esi
c0002bff:	01 d5                	add    ebp,edx
c0002c01:	89 ea                	mov    edx,ebp
c0002c03:	c1 ea 09             	shr    edx,0x9
c0002c06:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c09:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0c:	e8 18 f6 ff ff       	call   c0002229 <move_window>
c0002c11:	89 c1                	mov    ecx,eax
c0002c13:	85 c0                	test   eax,eax
c0002c15:	0f 85 1d 01 00 00    	jne    c0002d38 <put_fat+0x18c>
c0002c1b:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c22:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c25:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c33:	89 f8                	mov    eax,edi
c0002c35:	83 e3 01             	and    ebx,0x1
c0002c38:	74 0d                	je     c0002c47 <put_fat+0x9b>
c0002c3a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3d:	89 fa                	mov    edx,edi
c0002c3f:	83 e0 0f             	and    eax,0xf
c0002c42:	c1 e2 04             	shl    edx,0x4
c0002c45:	09 d0                	or     eax,edx
c0002c47:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4e:	31 c9                	xor    ecx,ecx
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	c1 ea 09             	shr    edx,0x9
c0002c57:	89 f0                	mov    eax,esi
c0002c59:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5f:	e8 c5 f5 ff ff       	call   c0002229 <move_window>
c0002c64:	89 c1                	mov    ecx,eax
c0002c66:	85 c0                	test   eax,eax
c0002c68:	0f 85 ca 00 00 00    	jne    c0002d38 <put_fat+0x18c>
c0002c6e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c72:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c78:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7c:	85 db                	test   ebx,ebx
c0002c7e:	74 07                	je     c0002c87 <put_fat+0xdb>
c0002c80:	c1 ef 04             	shr    edi,0x4
c0002c83:	89 fa                	mov    edx,edi
c0002c85:	eb 0e                	jmp    c0002c95 <put_fat+0xe9>
c0002c87:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c8a:	c1 ef 08             	shr    edi,0x8
c0002c8d:	83 e2 f0             	and    edx,0xfffffff0
c0002c90:	83 e7 0f             	and    edi,0xf
c0002c93:	09 fa                	or     edx,edi
c0002c95:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c98:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9c:	e9 97 00 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002ca1:	31 c9                	xor    ecx,ecx
c0002ca3:	c1 ea 08             	shr    edx,0x8
c0002ca6:	89 f0                	mov    eax,esi
c0002ca8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cab:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cae:	e8 76 f5 ff ff       	call   c0002229 <move_window>
c0002cb3:	89 c1                	mov    ecx,eax
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 7f                	jne    c0002d38 <put_fat+0x18c>
c0002cb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbd:	01 db                	add    ebx,ebx
c0002cbf:	0f b7 d7             	movzx  edx,di
c0002cc2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccc:	e8 ec ed ff ff       	call   c0001abd <st_word>
c0002cd1:	eb 53                	jmp    c0002d26 <put_fat+0x17a>
c0002cd3:	31 c9                	xor    ecx,ecx
c0002cd5:	c1 ea 07             	shr    edx,0x7
c0002cd8:	89 f0                	mov    eax,esi
c0002cda:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ce0:	e8 44 f5 ff ff       	call   c0002229 <move_window>
c0002ce5:	89 c1                	mov    ecx,eax
c0002ce7:	85 c0                	test   eax,eax
c0002ce9:	75 4d                	jne    c0002d38 <put_fat+0x18c>
c0002ceb:	c1 e3 02             	shl    ebx,0x2
c0002cee:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf7:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfb:	74 1c                	je     c0002d19 <put_fat+0x16d>
c0002cfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d01:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d07:	89 d8                	mov    eax,ebx
c0002d09:	e8 4a ed ff ff       	call   c0001a58 <ld_dword>
c0002d0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d12:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d17:	09 c7                	or     edi,eax
c0002d19:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1d:	89 fa                	mov    edx,edi
c0002d1f:	89 d8                	mov    eax,ebx
c0002d21:	e8 9b ed ff ff       	call   c0001ac1 <st_dword>
c0002d26:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2e:	eb 08                	jmp    c0002d38 <put_fat+0x18c>
c0002d30:	b9 02 00 00 00       	mov    ecx,0x2
c0002d35:	89 c8                	mov    eax,ecx
c0002d37:	c3                   	ret    
c0002d38:	83 c4 1c             	add    esp,0x1c
c0002d3b:	89 c8                	mov    eax,ecx
c0002d3d:	5b                   	pop    ebx
c0002d3e:	5e                   	pop    esi
c0002d3f:	5f                   	pop    edi
c0002d40:	5d                   	pop    ebp
c0002d41:	c3                   	ret    

c0002d42 <fill_last_frag>:
c0002d42:	57                   	push   edi
c0002d43:	89 cf                	mov    edi,ecx
c0002d45:	56                   	push   esi
c0002d46:	89 d6                	mov    esi,edx
c0002d48:	53                   	push   ebx
c0002d49:	89 c3                	mov    ebx,eax
c0002d4b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	74 21                	je     c0002d73 <fill_last_frag+0x31>
c0002d52:	89 f9                	mov    ecx,edi
c0002d54:	83 f8 01             	cmp    eax,0x1
c0002d57:	76 05                	jbe    c0002d5e <fill_last_frag+0x1c>
c0002d59:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5c:	29 c1                	sub    ecx,eax
c0002d5e:	8d 56 01             	lea    edx,[esi+0x1]
c0002d61:	29 c2                	sub    edx,eax
c0002d63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d65:	e8 42 fe ff ff       	call   c0002bac <put_fat>
c0002d6a:	85 c0                	test   eax,eax
c0002d6c:	75 05                	jne    c0002d73 <fill_last_frag+0x31>
c0002d6e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d71:	eb d8                	jmp    c0002d4b <fill_last_frag+0x9>
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <fill_first_frag>:
c0002d77:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7b:	75 2d                	jne    c0002daa <fill_first_frag+0x33>
c0002d7d:	57                   	push   edi
c0002d7e:	56                   	push   esi
c0002d7f:	53                   	push   ebx
c0002d80:	89 c3                	mov    ebx,eax
c0002d82:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d85:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d88:	01 d7                	add    edi,edx
c0002d8a:	39 fa                	cmp    edx,edi
c0002d8c:	74 14                	je     c0002da2 <fill_first_frag+0x2b>
c0002d8e:	8d 72 01             	lea    esi,[edx+0x1]
c0002d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d93:	89 f1                	mov    ecx,esi
c0002d95:	e8 12 fe ff ff       	call   c0002bac <put_fat>
c0002d9a:	89 f2                	mov    edx,esi
c0002d9c:	85 c0                	test   eax,eax
c0002d9e:	74 ea                	je     c0002d8a <fill_first_frag+0x13>
c0002da0:	eb 0b                	jmp    c0002dad <fill_first_frag+0x36>
c0002da2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da6:	31 c0                	xor    eax,eax
c0002da8:	eb 03                	jmp    c0002dad <fill_first_frag+0x36>
c0002daa:	31 c0                	xor    eax,eax
c0002dac:	c3                   	ret    
c0002dad:	5b                   	pop    ebx
c0002dae:	5e                   	pop    esi
c0002daf:	5f                   	pop    edi
c0002db0:	c3                   	ret    

c0002db1 <get_fat>:
c0002db1:	83 fa 01             	cmp    edx,0x1
c0002db4:	0f 86 db 01 00 00    	jbe    c0002f95 <get_fat+0x1e4>
c0002dba:	55                   	push   ebp
c0002dbb:	b9 01 00 00 00       	mov    ecx,0x1
c0002dc0:	57                   	push   edi
c0002dc1:	56                   	push   esi
c0002dc2:	53                   	push   ebx
c0002dc3:	83 ec 1c             	sub    esp,0x1c
c0002dc6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dcb:	0f 86 cc 01 00 00    	jbe    c0002f9d <get_fat+0x1ec>
c0002dd1:	89 c3                	mov    ebx,eax
c0002dd3:	89 d6                	mov    esi,edx
c0002dd5:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd7:	3c 02                	cmp    al,0x2
c0002dd9:	0f 84 99 00 00 00    	je     c0002e78 <get_fat+0xc7>
c0002ddf:	77 09                	ja     c0002dea <get_fat+0x39>
c0002de1:	fe c8                	dec    al
c0002de3:	74 1a                	je     c0002dff <get_fat+0x4e>
c0002de5:	e9 b3 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002dea:	3c 03                	cmp    al,0x3
c0002dec:	0f 84 b5 00 00 00    	je     c0002ea7 <get_fat+0xf6>
c0002df2:	3c 04                	cmp    al,0x4
c0002df4:	0f 84 e3 00 00 00    	je     c0002edd <get_fat+0x12c>
c0002dfa:	e9 9e 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002dff:	89 d3                	mov    ebx,edx
c0002e01:	31 c9                	xor    ecx,ecx
c0002e03:	d1 eb                	shr    ebx,1
c0002e05:	89 f8                	mov    eax,edi
c0002e07:	01 d3                	add    ebx,edx
c0002e09:	89 da                	mov    edx,ebx
c0002e0b:	c1 ea 09             	shr    edx,0x9
c0002e0e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e11:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e14:	e8 10 f4 ff ff       	call   c0002229 <move_window>
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	74 08                	je     c0002e25 <get_fat+0x74>
c0002e1d:	83 c9 ff             	or     ecx,0xffffffff
c0002e20:	e9 78 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002e25:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e28:	31 c9                	xor    ecx,ecx
c0002e2a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e30:	89 ea                	mov    edx,ebp
c0002e32:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e36:	c1 ea 09             	shr    edx,0x9
c0002e39:	89 f8                	mov    eax,edi
c0002e3b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e41:	e8 e3 f3 ff ff       	call   c0002229 <move_window>
c0002e46:	85 c0                	test   eax,eax
c0002e48:	75 d3                	jne    c0002e1d <get_fat+0x6c>
c0002e4a:	0f b6 c3             	movzx  eax,bl
c0002e4d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e53:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e58:	c1 e3 08             	shl    ebx,0x8
c0002e5b:	09 c3                	or     ebx,eax
c0002e5d:	89 d9                	mov    ecx,ebx
c0002e5f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e65:	83 e6 01             	and    esi,0x1
c0002e68:	0f 84 2f 01 00 00    	je     c0002f9d <get_fat+0x1ec>
c0002e6e:	89 d9                	mov    ecx,ebx
c0002e70:	c1 e9 04             	shr    ecx,0x4
c0002e73:	e9 25 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002e78:	31 c9                	xor    ecx,ecx
c0002e7a:	c1 ea 08             	shr    edx,0x8
c0002e7d:	89 f8                	mov    eax,edi
c0002e7f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e82:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e85:	e8 9f f3 ff ff       	call   c0002229 <move_window>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 8f                	jne    c0002e1d <get_fat+0x6c>
c0002e8e:	01 f6                	add    esi,esi
c0002e90:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e96:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e9a:	e8 ac eb ff ff       	call   c0001a4b <ld_word>
c0002e9f:	0f b7 c8             	movzx  ecx,ax
c0002ea2:	e9 f6 00 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002ea7:	31 c9                	xor    ecx,ecx
c0002ea9:	c1 ea 07             	shr    edx,0x7
c0002eac:	89 f8                	mov    eax,edi
c0002eae:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb4:	e8 70 f3 ff ff       	call   c0002229 <move_window>
c0002eb9:	85 c0                	test   eax,eax
c0002ebb:	0f 85 5c ff ff ff    	jne    c0002e1d <get_fat+0x6c>
c0002ec1:	c1 e6 02             	shl    esi,0x2
c0002ec4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ece:	e8 85 eb ff ff       	call   c0001a58 <ld_dword>
c0002ed3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed8:	e9 b4 00 00 00       	jmp    c0002f91 <get_fat+0x1e0>
c0002edd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ee0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee3:	89 d1                	mov    ecx,edx
c0002ee5:	09 c1                	or     ecx,eax
c0002ee7:	74 06                	je     c0002eef <get_fat+0x13e>
c0002ee9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eed:	75 0f                	jne    c0002efe <get_fat+0x14d>
c0002eef:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef4:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef8:	0f 85 9f 00 00 00    	jne    c0002f9d <get_fat+0x1ec>
c0002efe:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f02:	89 f5                	mov    ebp,esi
c0002f04:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f09:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0f:	80 f9 02             	cmp    cl,0x2
c0002f12:	75 35                	jne    c0002f49 <get_fat+0x198>
c0002f14:	83 c0 ff             	add    eax,0xffffffff
c0002f17:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1c:	83 d2 ff             	adc    edx,0xffffffff
c0002f1f:	31 db                	xor    ebx,ebx
c0002f21:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f25:	53                   	push   ebx
c0002f26:	c1 ea 09             	shr    edx,0x9
c0002f29:	51                   	push   ecx
c0002f2a:	52                   	push   edx
c0002f2b:	50                   	push   eax
c0002f2c:	e8 2b 04 02 00       	call   c002335c <__udivdi3>
c0002f31:	83 c4 10             	add    esp,0x10
c0002f34:	b9 01 00 00 00       	mov    ecx,0x1
c0002f39:	39 c5                	cmp    ebp,eax
c0002f3b:	77 60                	ja     c0002f9d <get_fat+0x1ec>
c0002f3d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f42:	74 59                	je     c0002f9d <get_fat+0x1ec>
c0002f44:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f47:	eb 54                	jmp    c0002f9d <get_fat+0x1ec>
c0002f49:	80 f9 03             	cmp    cl,0x3
c0002f4c:	75 05                	jne    c0002f53 <get_fat+0x1a2>
c0002f4e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f51:	77 f1                	ja     c0002f44 <get_fat+0x193>
c0002f53:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f58:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5c:	75 3f                	jne    c0002f9d <get_fat+0x1ec>
c0002f5e:	31 c9                	xor    ecx,ecx
c0002f60:	89 f2                	mov    edx,esi
c0002f62:	89 f8                	mov    eax,edi
c0002f64:	c1 ea 07             	shr    edx,0x7
c0002f67:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f6a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6d:	e8 b7 f2 ff ff       	call   c0002229 <move_window>
c0002f72:	85 c0                	test   eax,eax
c0002f74:	0f 85 a3 fe ff ff    	jne    c0002e1d <get_fat+0x6c>
c0002f7a:	c1 e6 02             	shl    esi,0x2
c0002f7d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f87:	e8 cc ea ff ff       	call   c0001a58 <ld_dword>
c0002f8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f91:	89 c1                	mov    ecx,eax
c0002f93:	eb 08                	jmp    c0002f9d <get_fat+0x1ec>
c0002f95:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9a:	89 c8                	mov    eax,ecx
c0002f9c:	c3                   	ret    
c0002f9d:	83 c4 1c             	add    esp,0x1c
c0002fa0:	89 c8                	mov    eax,ecx
c0002fa2:	5b                   	pop    ebx
c0002fa3:	5e                   	pop    esi
c0002fa4:	5f                   	pop    edi
c0002fa5:	5d                   	pop    ebp
c0002fa6:	c3                   	ret    

c0002fa7 <dir_sdi>:
c0002fa7:	55                   	push   ebp
c0002fa8:	57                   	push   edi
c0002fa9:	56                   	push   esi
c0002faa:	53                   	push   ebx
c0002fab:	89 c3                	mov    ebx,eax
c0002fad:	83 ec 1c             	sub    esp,0x1c
c0002fb0:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb2:	31 c0                	xor    eax,eax
c0002fb4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb7:	0f 94 c0             	sete   al
c0002fba:	48                   	dec    eax
c0002fbb:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fc0:	05 00 00 00 10       	add    eax,0x10000000
c0002fc5:	39 d0                	cmp    eax,edx
c0002fc7:	77 0a                	ja     c0002fd3 <dir_sdi+0x2c>
c0002fc9:	b8 02 00 00 00       	mov    eax,0x2
c0002fce:	e9 c4 00 00 00       	jmp    c0003097 <dir_sdi+0xf0>
c0002fd3:	89 d6                	mov    esi,edx
c0002fd5:	f6 c2 1f             	test   dl,0x1f
c0002fd8:	75 ef                	jne    c0002fc9 <dir_sdi+0x22>
c0002fda:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fe0:	85 c9                	test   ecx,ecx
c0002fe2:	75 2d                	jne    c0003011 <dir_sdi+0x6a>
c0002fe4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe7:	77 1b                	ja     c0003004 <dir_sdi+0x5d>
c0002fe9:	89 f2                	mov    edx,esi
c0002feb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fef:	c1 ea 05             	shr    edx,0x5
c0002ff2:	39 c2                	cmp    edx,eax
c0002ff4:	73 d3                	jae    c0002fc9 <dir_sdi+0x22>
c0002ff6:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff9:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003002:	eb 4b                	jmp    c000304f <dir_sdi+0xa8>
c0003004:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003007:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300b:	85 c0                	test   eax,eax
c000300d:	74 da                	je     c0002fe9 <dir_sdi+0x42>
c000300f:	89 c1                	mov    ecx,eax
c0003011:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003015:	c1 e5 09             	shl    ebp,0x9
c0003018:	89 ca                	mov    edx,ecx
c000301a:	39 ee                	cmp    esi,ebp
c000301c:	72 1c                	jb     c000303a <dir_sdi+0x93>
c000301e:	89 d8                	mov    eax,ebx
c0003020:	e8 8c fd ff ff       	call   c0002db1 <get_fat>
c0003025:	89 c1                	mov    ecx,eax
c0003027:	83 f8 ff             	cmp    eax,0xffffffff
c000302a:	74 66                	je     c0003092 <dir_sdi+0xeb>
c000302c:	83 f8 01             	cmp    eax,0x1
c000302f:	76 98                	jbe    c0002fc9 <dir_sdi+0x22>
c0003031:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003034:	76 93                	jbe    c0002fc9 <dir_sdi+0x22>
c0003036:	29 ee                	sub    esi,ebp
c0003038:	eb de                	jmp    c0003018 <dir_sdi+0x71>
c000303a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303e:	89 f8                	mov    eax,edi
c0003040:	e8 9f ec ff ff       	call   c0001ce4 <clst2sect>
c0003045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003049:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003052:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003055:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003058:	89 d1                	mov    ecx,edx
c000305a:	09 c1                	or     ecx,eax
c000305c:	0f 84 67 ff ff ff    	je     c0002fc9 <dir_sdi+0x22>
c0003062:	89 f1                	mov    ecx,esi
c0003064:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306c:	c1 e9 09             	shr    ecx,0x9
c000306f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003073:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003077:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003084:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003087:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308e:	31 c0                	xor    eax,eax
c0003090:	eb 05                	jmp    c0003097 <dir_sdi+0xf0>
c0003092:	b8 01 00 00 00       	mov    eax,0x1
c0003097:	83 c4 1c             	add    esp,0x1c
c000309a:	5b                   	pop    ebx
c000309b:	5e                   	pop    esi
c000309c:	5f                   	pop    edi
c000309d:	5d                   	pop    ebp
c000309e:	c3                   	ret    

c000309f <create_chain>:
c000309f:	55                   	push   ebp
c00030a0:	89 c5                	mov    ebp,eax
c00030a2:	57                   	push   edi
c00030a3:	56                   	push   esi
c00030a4:	53                   	push   ebx
c00030a5:	83 ec 1c             	sub    esp,0x1c
c00030a8:	85 d2                	test   edx,edx
c00030aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00030b0:	75 0e                	jne    c00030c0 <create_chain+0x21>
c00030b2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b5:	85 ff                	test   edi,edi
c00030b7:	74 39                	je     c00030f2 <create_chain+0x53>
c00030b9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bc:	77 39                	ja     c00030f7 <create_chain+0x58>
c00030be:	eb 32                	jmp    c00030f2 <create_chain+0x53>
c00030c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c4:	e8 e8 fc ff ff       	call   c0002db1 <get_fat>
c00030c9:	89 c3                	mov    ebx,eax
c00030cb:	83 f8 01             	cmp    eax,0x1
c00030ce:	77 0a                	ja     c00030da <create_chain+0x3b>
c00030d0:	bb 01 00 00 00       	mov    ebx,0x1
c00030d5:	e9 ba 01 00 00       	jmp    c0003294 <create_chain+0x1f5>
c00030da:	83 f8 ff             	cmp    eax,0xffffffff
c00030dd:	0f 84 62 01 00 00    	je     c0003245 <create_chain+0x1a6>
c00030e3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e6:	0f 87 a8 01 00 00    	ja     c0003294 <create_chain+0x1f5>
c00030ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030f0:	eb 05                	jmp    c00030f7 <create_chain+0x58>
c00030f2:	bf 01 00 00 00       	mov    edi,0x1
c00030f7:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fb:	75 07                	jne    c0003104 <create_chain+0x65>
c00030fd:	31 db                	xor    ebx,ebx
c00030ff:	e9 90 01 00 00       	jmp    c0003294 <create_chain+0x1f5>
c0003104:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003107:	75 74                	jne    c000317d <create_chain+0xde>
c0003109:	b9 01 00 00 00       	mov    ecx,0x1
c000310e:	89 fa                	mov    edx,edi
c0003110:	89 f0                	mov    eax,esi
c0003112:	e8 2d f9 ff ff       	call   c0002a44 <find_bitmap>
c0003117:	89 c3                	mov    ebx,eax
c0003119:	8d 40 ff             	lea    eax,[eax-0x1]
c000311c:	83 f8 fd             	cmp    eax,0xfffffffd
c000311f:	0f 87 6f 01 00 00    	ja     c0003294 <create_chain+0x1f5>
c0003125:	83 ec 0c             	sub    esp,0xc
c0003128:	b9 01 00 00 00       	mov    ecx,0x1
c000312d:	6a 01                	push   0x1
c000312f:	89 da                	mov    edx,ebx
c0003131:	89 f0                	mov    eax,esi
c0003133:	e8 bf f9 ff ff       	call   c0002af7 <change_bitmap>
c0003138:	83 c4 10             	add    esp,0x10
c000313b:	83 f8 02             	cmp    eax,0x2
c000313e:	74 90                	je     c00030d0 <create_chain+0x31>
c0003140:	83 f8 01             	cmp    eax,0x1
c0003143:	0f 84 fc 00 00 00    	je     c0003245 <create_chain+0x1a6>
c0003149:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314e:	75 09                	jne    c0003159 <create_chain+0xba>
c0003150:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003154:	e9 0c 01 00 00       	jmp    c0003265 <create_chain+0x1c6>
c0003159:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315d:	0f 85 e7 00 00 00    	jne    c000324a <create_chain+0x1ab>
c0003163:	8d 57 01             	lea    edx,[edi+0x1]
c0003166:	39 da                	cmp    edx,ebx
c0003168:	0f 84 f7 00 00 00    	je     c0003265 <create_chain+0x1c6>
c000316e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003171:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003175:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003178:	e9 cd 00 00 00       	jmp    c000324a <create_chain+0x1ab>
c000317d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003181:	75 41                	jne    c00031c4 <create_chain+0x125>
c0003183:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003186:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003189:	77 05                	ja     c0003190 <create_chain+0xf1>
c000318b:	bb 02 00 00 00       	mov    ebx,0x2
c0003190:	89 da                	mov    edx,ebx
c0003192:	89 e8                	mov    eax,ebp
c0003194:	e8 18 fc ff ff       	call   c0002db1 <get_fat>
c0003199:	83 f8 01             	cmp    eax,0x1
c000319c:	0f 84 2e ff ff ff    	je     c00030d0 <create_chain+0x31>
c00031a2:	83 f8 ff             	cmp    eax,0xffffffff
c00031a5:	0f 84 9a 00 00 00    	je     c0003245 <create_chain+0x1a6>
c00031ab:	85 c0                	test   eax,eax
c00031ad:	74 11                	je     c00031c0 <create_chain+0x121>
c00031af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b2:	83 f8 01             	cmp    eax,0x1
c00031b5:	76 0d                	jbe    c00031c4 <create_chain+0x125>
c00031b7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ba:	76 08                	jbe    c00031c4 <create_chain+0x125>
c00031bc:	89 c7                	mov    edi,eax
c00031be:	eb 04                	jmp    c00031c4 <create_chain+0x125>
c00031c0:	85 db                	test   ebx,ebx
c00031c2:	75 38                	jne    c00031fc <create_chain+0x15d>
c00031c4:	89 fb                	mov    ebx,edi
c00031c6:	43                   	inc    ebx
c00031c7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031ca:	77 0e                	ja     c00031da <create_chain+0x13b>
c00031cc:	83 ff 01             	cmp    edi,0x1
c00031cf:	0f 86 28 ff ff ff    	jbe    c00030fd <create_chain+0x5e>
c00031d5:	bb 02 00 00 00       	mov    ebx,0x2
c00031da:	89 da                	mov    edx,ebx
c00031dc:	89 e8                	mov    eax,ebp
c00031de:	e8 ce fb ff ff       	call   c0002db1 <get_fat>
c00031e3:	85 c0                	test   eax,eax
c00031e5:	74 15                	je     c00031fc <create_chain+0x15d>
c00031e7:	83 f8 01             	cmp    eax,0x1
c00031ea:	0f 84 e0 fe ff ff    	je     c00030d0 <create_chain+0x31>
c00031f0:	40                   	inc    eax
c00031f1:	74 52                	je     c0003245 <create_chain+0x1a6>
c00031f3:	39 fb                	cmp    ebx,edi
c00031f5:	75 cf                	jne    c00031c6 <create_chain+0x127>
c00031f7:	e9 01 ff ff ff       	jmp    c00030fd <create_chain+0x5e>
c00031fc:	83 c9 ff             	or     ecx,0xffffffff
c00031ff:	89 da                	mov    edx,ebx
c0003201:	89 f0                	mov    eax,esi
c0003203:	e8 a4 f9 ff ff       	call   c0002bac <put_fat>
c0003208:	85 c0                	test   eax,eax
c000320a:	75 32                	jne    c000323e <create_chain+0x19f>
c000320c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003211:	74 11                	je     c0003224 <create_chain+0x185>
c0003213:	89 d9                	mov    ecx,ebx
c0003215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003219:	89 f0                	mov    eax,esi
c000321b:	e8 8c f9 ff ff       	call   c0002bac <put_fat>
c0003220:	85 c0                	test   eax,eax
c0003222:	75 1a                	jne    c000323e <create_chain+0x19f>
c0003224:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003227:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000322a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003230:	39 d0                	cmp    eax,edx
c0003232:	77 04                	ja     c0003238 <create_chain+0x199>
c0003234:	48                   	dec    eax
c0003235:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003238:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323c:	eb 56                	jmp    c0003294 <create_chain+0x1f5>
c000323e:	48                   	dec    eax
c000323f:	0f 85 8b fe ff ff    	jne    c00030d0 <create_chain+0x31>
c0003245:	83 cb ff             	or     ebx,0xffffffff
c0003248:	eb 4a                	jmp    c0003294 <create_chain+0x1f5>
c000324a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003251:	41                   	inc    ecx
c0003252:	39 d9                	cmp    ecx,ebx
c0003254:	75 19                	jne    c000326f <create_chain+0x1d0>
c0003256:	b9 02 00 00 00       	mov    ecx,0x2
c000325b:	85 d2                	test   edx,edx
c000325d:	74 03                	je     c0003262 <create_chain+0x1c3>
c000325f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003262:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003265:	85 c0                	test   eax,eax
c0003267:	0f 85 63 fe ff ff    	jne    c00030d0 <create_chain+0x31>
c000326d:	eb b5                	jmp    c0003224 <create_chain+0x185>
c000326f:	85 d2                	test   edx,edx
c0003271:	75 07                	jne    c000327a <create_chain+0x1db>
c0003273:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000327a:	89 d9                	mov    ecx,ebx
c000327c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003280:	89 e8                	mov    eax,ebp
c0003282:	e8 bb fa ff ff       	call   c0002d42 <fill_last_frag>
c0003287:	85 c0                	test   eax,eax
c0003289:	75 b3                	jne    c000323e <create_chain+0x19f>
c000328b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003292:	eb 90                	jmp    c0003224 <create_chain+0x185>
c0003294:	83 c4 1c             	add    esp,0x1c
c0003297:	89 d8                	mov    eax,ebx
c0003299:	5b                   	pop    ebx
c000329a:	5e                   	pop    esi
c000329b:	5f                   	pop    edi
c000329c:	5d                   	pop    ebp
c000329d:	c3                   	ret    

c000329e <remove_chain>:
c000329e:	55                   	push   ebp
c000329f:	57                   	push   edi
c00032a0:	56                   	push   esi
c00032a1:	53                   	push   ebx
c00032a2:	83 ec 1c             	sub    esp,0x1c
c00032a5:	83 fa 01             	cmp    edx,0x1
c00032a8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ac:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ae:	77 0a                	ja     c00032ba <remove_chain+0x1c>
c00032b0:	b8 02 00 00 00       	mov    eax,0x2
c00032b5:	e9 24 01 00 00       	jmp    c00033de <remove_chain+0x140>
c00032ba:	89 d6                	mov    esi,edx
c00032bc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032bf:	76 ef                	jbe    c00032b0 <remove_chain+0x12>
c00032c1:	89 c7                	mov    edi,eax
c00032c3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c8:	75 06                	jne    c00032d0 <remove_chain+0x32>
c00032ca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032ce:	eb 54                	jmp    c0003324 <remove_chain+0x86>
c00032d0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d3:	75 06                	jne    c00032db <remove_chain+0x3d>
c00032d5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d9:	74 ef                	je     c00032ca <remove_chain+0x2c>
c00032db:	83 c9 ff             	or     ecx,0xffffffff
c00032de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e2:	89 d8                	mov    eax,ebx
c00032e4:	e8 c3 f8 ff ff       	call   c0002bac <put_fat>
c00032e9:	85 c0                	test   eax,eax
c00032eb:	74 dd                	je     c00032ca <remove_chain+0x2c>
c00032ed:	e9 ec 00 00 00       	jmp    c00033de <remove_chain+0x140>
c00032f2:	83 f8 01             	cmp    eax,0x1
c00032f5:	74 b9                	je     c00032b0 <remove_chain+0x12>
c00032f7:	83 f8 ff             	cmp    eax,0xffffffff
c00032fa:	74 6d                	je     c0003369 <remove_chain+0xcb>
c00032fc:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ff:	75 6f                	jne    c0003370 <remove_chain+0xd2>
c0003301:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003304:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003307:	8d 51 fe             	lea    edx,[ecx-0x2]
c000330a:	39 d0                	cmp    eax,edx
c000330c:	73 08                	jae    c0003316 <remove_chain+0x78>
c000330e:	40                   	inc    eax
c000330f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003313:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003316:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003319:	39 e9                	cmp    ecx,ebp
c000331b:	75 64                	jne    c0003381 <remove_chain+0xe3>
c000331d:	89 ee                	mov    esi,ebp
c000331f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003322:	76 0f                	jbe    c0003333 <remove_chain+0x95>
c0003324:	89 f2                	mov    edx,esi
c0003326:	89 f8                	mov    eax,edi
c0003328:	e8 84 fa ff ff       	call   c0002db1 <get_fat>
c000332d:	89 c5                	mov    ebp,eax
c000332f:	85 c0                	test   eax,eax
c0003331:	75 bf                	jne    c00032f2 <remove_chain+0x54>
c0003333:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003336:	0f 85 a0 00 00 00    	jne    c00033dc <remove_chain+0x13e>
c000333c:	eb 6c                	jmp    c00033aa <remove_chain+0x10c>
c000333e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003341:	84 c0                	test   al,al
c0003343:	75 7d                	jne    c00033c2 <remove_chain+0x124>
c0003345:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003348:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334c:	0f 84 86 00 00 00    	je     c00033d8 <remove_chain+0x13a>
c0003352:	89 da                	mov    edx,ebx
c0003354:	89 f8                	mov    eax,edi
c0003356:	e8 56 fa ff ff       	call   c0002db1 <get_fat>
c000335b:	83 f8 01             	cmp    eax,0x1
c000335e:	0f 86 4c ff ff ff    	jbe    c00032b0 <remove_chain+0x12>
c0003364:	83 f8 ff             	cmp    eax,0xffffffff
c0003367:	75 4e                	jne    c00033b7 <remove_chain+0x119>
c0003369:	b8 01 00 00 00       	mov    eax,0x1
c000336e:	eb 6e                	jmp    c00033de <remove_chain+0x140>
c0003370:	31 c9                	xor    ecx,ecx
c0003372:	89 f2                	mov    edx,esi
c0003374:	89 d8                	mov    eax,ebx
c0003376:	e8 31 f8 ff ff       	call   c0002bac <put_fat>
c000337b:	85 c0                	test   eax,eax
c000337d:	74 82                	je     c0003301 <remove_chain+0x63>
c000337f:	eb 5d                	jmp    c00033de <remove_chain+0x140>
c0003381:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003384:	75 1b                	jne    c00033a1 <remove_chain+0x103>
c0003386:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000338a:	89 d8                	mov    eax,ebx
c000338c:	83 ec 0c             	sub    esp,0xc
c000338f:	6a 00                	push   0x0
c0003391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003395:	e8 5d f7 ff ff       	call   c0002af7 <change_bitmap>
c000339a:	83 c4 10             	add    esp,0x10
c000339d:	85 c0                	test   eax,eax
c000339f:	75 3d                	jne    c00033de <remove_chain+0x140>
c00033a1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a5:	e9 73 ff ff ff       	jmp    c000331d <remove_chain+0x7f>
c00033aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033af:	75 8d                	jne    c000333e <remove_chain+0xa0>
c00033b1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b5:	eb 25                	jmp    c00033dc <remove_chain+0x13e>
c00033b7:	8d 53 01             	lea    edx,[ebx+0x1]
c00033ba:	89 c3                	mov    ebx,eax
c00033bc:	39 c2                	cmp    edx,eax
c00033be:	74 88                	je     c0003348 <remove_chain+0xaa>
c00033c0:	eb 1a                	jmp    c00033dc <remove_chain+0x13e>
c00033c2:	3c 03                	cmp    al,0x3
c00033c4:	75 16                	jne    c00033dc <remove_chain+0x13e>
c00033c6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cd:	77 0d                	ja     c00033dc <remove_chain+0x13e>
c00033cf:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d6:	72 04                	jb     c00033dc <remove_chain+0x13e>
c00033d8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033dc:	31 c0                	xor    eax,eax
c00033de:	83 c4 1c             	add    esp,0x1c
c00033e1:	5b                   	pop    ebx
c00033e2:	5e                   	pop    esi
c00033e3:	5f                   	pop    edi
c00033e4:	5d                   	pop    ebp
c00033e5:	c3                   	ret    

c00033e6 <dir_clear>:
c00033e6:	55                   	push   ebp
c00033e7:	57                   	push   edi
c00033e8:	56                   	push   esi
c00033e9:	89 c6                	mov    esi,eax
c00033eb:	53                   	push   ebx
c00033ec:	83 ec 1c             	sub    esp,0x1c
c00033ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f3:	e8 9d ed ff ff       	call   c0002195 <sync_window>
c00033f8:	85 c0                	test   eax,eax
c00033fa:	0f 85 de 00 00 00    	jne    c00034de <dir_clear+0xf8>
c0003400:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003404:	89 f0                	mov    eax,esi
c0003406:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003409:	e8 d6 e8 ff ff       	call   c0001ce4 <clst2sect>
c000340e:	b9 00 02 00 00       	mov    ecx,0x200
c0003413:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003417:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003421:	89 e8                	mov    eax,ebp
c0003423:	31 d2                	xor    edx,edx
c0003425:	e8 b5 e6 ff ff       	call   c0001adf <mem_set>
c000342a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342e:	c1 e3 09             	shl    ebx,0x9
c0003431:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003437:	76 1f                	jbe    c0003458 <dir_clear+0x72>
c0003439:	bb 00 80 00 00       	mov    ebx,0x8000
c000343e:	eb 18                	jmp    c0003458 <dir_clear+0x72>
c0003440:	83 ec 0c             	sub    esp,0xc
c0003443:	53                   	push   ebx
c0003444:	e8 35 4e 00 00       	call   c000827e <ff_memalloc>
c0003449:	83 c4 10             	add    esp,0x10
c000344c:	89 c7                	mov    edi,eax
c000344e:	85 c0                	test   eax,eax
c0003450:	0f 85 8f 00 00 00    	jne    c00034e5 <dir_clear+0xff>
c0003456:	d1 eb                	shr    ebx,1
c0003458:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345e:	77 e0                	ja     c0003440 <dir_clear+0x5a>
c0003460:	31 db                	xor    ebx,ebx
c0003462:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003466:	39 d8                	cmp    eax,ebx
c0003468:	76 66                	jbe    c00034d0 <dir_clear+0xea>
c000346a:	83 ec 0c             	sub    esp,0xc
c000346d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003471:	6a 01                	push   0x1
c0003473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347b:	55                   	push   ebp
c000347c:	50                   	push   eax
c000347d:	e8 94 e5 ff ff       	call   c0001a16 <disk_write>
c0003482:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003487:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348c:	83 c4 20             	add    esp,0x20
c000348f:	85 c0                	test   eax,eax
c0003491:	75 3d                	jne    c00034d0 <dir_clear+0xea>
c0003493:	43                   	inc    ebx
c0003494:	eb cc                	jmp    c0003462 <dir_clear+0x7c>
c0003496:	83 ec 0c             	sub    esp,0xc
c0003499:	31 d2                	xor    edx,edx
c000349b:	55                   	push   ebp
c000349c:	89 d8                	mov    eax,ebx
c000349e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a6:	52                   	push   edx
c00034a7:	50                   	push   eax
c00034a8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ac:	57                   	push   edi
c00034ad:	50                   	push   eax
c00034ae:	e8 63 e5 ff ff       	call   c0001a16 <disk_write>
c00034b3:	83 c4 20             	add    esp,0x20
c00034b6:	85 c0                	test   eax,eax
c00034b8:	75 0a                	jne    c00034c4 <dir_clear+0xde>
c00034ba:	01 eb                	add    ebx,ebp
c00034bc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c0:	39 d8                	cmp    eax,ebx
c00034c2:	77 d2                	ja     c0003496 <dir_clear+0xb0>
c00034c4:	83 ec 0c             	sub    esp,0xc
c00034c7:	57                   	push   edi
c00034c8:	e8 c7 4d 00 00       	call   c0008294 <ff_memfree>
c00034cd:	83 c4 10             	add    esp,0x10
c00034d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d4:	39 d8                	cmp    eax,ebx
c00034d6:	0f 95 c0             	setne  al
c00034d9:	0f b6 c0             	movzx  eax,al
c00034dc:	eb 19                	jmp    c00034f7 <dir_clear+0x111>
c00034de:	b8 01 00 00 00       	mov    eax,0x1
c00034e3:	eb 12                	jmp    c00034f7 <dir_clear+0x111>
c00034e5:	89 d9                	mov    ecx,ebx
c00034e7:	31 d2                	xor    edx,edx
c00034e9:	c1 eb 09             	shr    ebx,0x9
c00034ec:	e8 ee e5 ff ff       	call   c0001adf <mem_set>
c00034f1:	89 dd                	mov    ebp,ebx
c00034f3:	31 db                	xor    ebx,ebx
c00034f5:	eb c5                	jmp    c00034bc <dir_clear+0xd6>
c00034f7:	83 c4 1c             	add    esp,0x1c
c00034fa:	5b                   	pop    ebx
c00034fb:	5e                   	pop    esi
c00034fc:	5f                   	pop    edi
c00034fd:	5d                   	pop    ebp
c00034fe:	c3                   	ret    

c00034ff <dir_next>:
c00034ff:	55                   	push   ebp
c0003500:	57                   	push   edi
c0003501:	56                   	push   esi
c0003502:	53                   	push   ebx
c0003503:	89 c3                	mov    ebx,eax
c0003505:	83 ec 1c             	sub    esp,0x1c
c0003508:	8b 28                	mov    ebp,DWORD PTR [eax]
c000350a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003511:	8d 78 20             	lea    edi,[eax+0x20]
c0003514:	31 c0                	xor    eax,eax
c0003516:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000351a:	0f 94 c0             	sete   al
c000351d:	48                   	dec    eax
c000351e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003523:	05 00 00 00 10       	add    eax,0x10000000
c0003528:	39 f8                	cmp    eax,edi
c000352a:	77 0e                	ja     c000353a <dir_next+0x3b>
c000352c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003533:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000353a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003540:	b8 04 00 00 00       	mov    eax,0x4
c0003545:	89 ce                	mov    esi,ecx
c0003547:	09 d6                	or     esi,edx
c0003549:	0f 84 da 00 00 00    	je     c0003629 <dir_next+0x12a>
c000354f:	89 f8                	mov    eax,edi
c0003551:	25 ff 01 00 00       	and    eax,0x1ff
c0003556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000355a:	0f 85 b9 00 00 00    	jne    c0003619 <dir_next+0x11a>
c0003560:	83 c2 01             	add    edx,0x1
c0003563:	83 d1 00             	adc    ecx,0x0
c0003566:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003569:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356f:	85 d2                	test   edx,edx
c0003571:	75 29                	jne    c000359c <dir_next+0x9d>
c0003573:	89 fa                	mov    edx,edi
c0003575:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003579:	c1 ea 05             	shr    edx,0x5
c000357c:	39 c2                	cmp    edx,eax
c000357e:	0f 82 95 00 00 00    	jb     c0003619 <dir_next+0x11a>
c0003584:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003592:	b8 04 00 00 00       	mov    eax,0x4
c0003597:	e9 8d 00 00 00       	jmp    c0003629 <dir_next+0x12a>
c000359c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035a0:	89 f9                	mov    ecx,edi
c00035a2:	48                   	dec    eax
c00035a3:	c1 e9 09             	shr    ecx,0x9
c00035a6:	85 c8                	test   eax,ecx
c00035a8:	75 6f                	jne    c0003619 <dir_next+0x11a>
c00035aa:	89 d8                	mov    eax,ebx
c00035ac:	e8 00 f8 ff ff       	call   c0002db1 <get_fat>
c00035b1:	89 c6                	mov    esi,eax
c00035b3:	83 f8 01             	cmp    eax,0x1
c00035b6:	77 07                	ja     c00035bf <dir_next+0xc0>
c00035b8:	b8 02 00 00 00       	mov    eax,0x2
c00035bd:	eb 6a                	jmp    c0003629 <dir_next+0x12a>
c00035bf:	83 f8 ff             	cmp    eax,0xffffffff
c00035c2:	75 07                	jne    c00035cb <dir_next+0xcc>
c00035c4:	b8 01 00 00 00       	mov    eax,0x1
c00035c9:	eb 5e                	jmp    c0003629 <dir_next+0x12a>
c00035cb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035ce:	77 37                	ja     c0003607 <dir_next+0x108>
c00035d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d5:	74 ad                	je     c0003584 <dir_next+0x85>
c00035d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035da:	89 d8                	mov    eax,ebx
c00035dc:	e8 be fa ff ff       	call   c000309f <create_chain>
c00035e1:	89 c6                	mov    esi,eax
c00035e3:	b8 07 00 00 00       	mov    eax,0x7
c00035e8:	85 f6                	test   esi,esi
c00035ea:	74 3d                	je     c0003629 <dir_next+0x12a>
c00035ec:	83 fe 01             	cmp    esi,0x1
c00035ef:	74 c7                	je     c00035b8 <dir_next+0xb9>
c00035f1:	83 fe ff             	cmp    esi,0xffffffff
c00035f4:	74 ce                	je     c00035c4 <dir_next+0xc5>
c00035f6:	89 f2                	mov    edx,esi
c00035f8:	89 e8                	mov    eax,ebp
c00035fa:	e8 e7 fd ff ff       	call   c00033e6 <dir_clear>
c00035ff:	85 c0                	test   eax,eax
c0003601:	75 c1                	jne    c00035c4 <dir_next+0xc5>
c0003603:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003607:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000360a:	89 f2                	mov    edx,esi
c000360c:	89 e8                	mov    eax,ebp
c000360e:	e8 d1 e6 ff ff       	call   c0001ce4 <clst2sect>
c0003613:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003616:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003619:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003620:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003624:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003627:	31 c0                	xor    eax,eax
c0003629:	83 c4 1c             	add    esp,0x1c
c000362c:	5b                   	pop    ebx
c000362d:	5e                   	pop    esi
c000362e:	5f                   	pop    edi
c000362f:	5d                   	pop    ebp
c0003630:	c3                   	ret    

c0003631 <load_xdir>:
c0003631:	55                   	push   ebp
c0003632:	57                   	push   edi
c0003633:	56                   	push   esi
c0003634:	89 c6                	mov    esi,eax
c0003636:	53                   	push   ebx
c0003637:	83 ec 1c             	sub    esp,0x1c
c000363a:	8b 00                	mov    eax,DWORD PTR [eax]
c000363c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003642:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003645:	e8 df eb ff ff       	call   c0002229 <move_window>
c000364a:	89 c3                	mov    ebx,eax
c000364c:	85 c0                	test   eax,eax
c000364e:	0f 85 0c 01 00 00    	jne    c0003760 <load_xdir+0x12f>
c0003654:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003657:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000365a:	0f 85 fb 00 00 00    	jne    c000375b <load_xdir+0x12a>
c0003660:	89 f8                	mov    eax,edi
c0003662:	b9 20 00 00 00       	mov    ecx,0x20
c0003667:	e8 5e e4 ff ff       	call   c0001aca <mem_cpy>
c000366c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003670:	40                   	inc    eax
c0003671:	c1 e0 05             	shl    eax,0x5
c0003674:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003678:	83 e8 60             	sub    eax,0x60
c000367b:	3d 00 02 00 00       	cmp    eax,0x200
c0003680:	0f 87 d5 00 00 00    	ja     c000375b <load_xdir+0x12a>
c0003686:	31 d2                	xor    edx,edx
c0003688:	89 f0                	mov    eax,esi
c000368a:	e8 70 fe ff ff       	call   c00034ff <dir_next>
c000368f:	89 c3                	mov    ebx,eax
c0003691:	83 f8 04             	cmp    eax,0x4
c0003694:	0f 84 c1 00 00 00    	je     c000375b <load_xdir+0x12a>
c000369a:	85 c0                	test   eax,eax
c000369c:	0f 85 be 00 00 00    	jne    c0003760 <load_xdir+0x12f>
c00036a2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00036aa:	e8 7a eb ff ff       	call   c0002229 <move_window>
c00036af:	89 c3                	mov    ebx,eax
c00036b1:	85 c0                	test   eax,eax
c00036b3:	0f 85 a7 00 00 00    	jne    c0003760 <load_xdir+0x12f>
c00036b9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036bf:	0f 85 96 00 00 00    	jne    c000375b <load_xdir+0x12a>
c00036c5:	8d 47 20             	lea    eax,[edi+0x20]
c00036c8:	b9 20 00 00 00       	mov    ecx,0x20
c00036cd:	e8 f8 e3 ff ff       	call   c0001aca <mem_cpy>
c00036d2:	31 d2                	xor    edx,edx
c00036d4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d8:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dd:	83 c0 2c             	add    eax,0x2c
c00036e0:	f7 f1                	div    ecx
c00036e2:	c1 e0 05             	shl    eax,0x5
c00036e5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e9:	77 70                	ja     c000375b <load_xdir+0x12a>
c00036eb:	bd 40 00 00 00       	mov    ebp,0x40
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 f0                	mov    eax,esi
c00036f4:	e8 06 fe ff ff       	call   c00034ff <dir_next>
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 f8 04             	cmp    eax,0x4
c00036fe:	74 5b                	je     c000375b <load_xdir+0x12a>
c0003700:	85 c0                	test   eax,eax
c0003702:	75 5c                	jne    c0003760 <load_xdir+0x12f>
c0003704:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003707:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000370a:	8b 06                	mov    eax,DWORD PTR [esi]
c000370c:	e8 18 eb ff ff       	call   c0002229 <move_window>
c0003711:	89 c3                	mov    ebx,eax
c0003713:	85 c0                	test   eax,eax
c0003715:	75 49                	jne    c0003760 <load_xdir+0x12f>
c0003717:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000371a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371d:	75 3c                	jne    c000375b <load_xdir+0x12a>
c000371f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003725:	77 0d                	ja     c0003734 <load_xdir+0x103>
c0003727:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000372a:	b9 20 00 00 00       	mov    ecx,0x20
c000372f:	e8 96 e3 ff ff       	call   c0001aca <mem_cpy>
c0003734:	83 c5 20             	add    ebp,0x20
c0003737:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373b:	77 b3                	ja     c00036f0 <load_xdir+0xbf>
c000373d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003743:	77 1b                	ja     c0003760 <load_xdir+0x12f>
c0003745:	89 f8                	mov    eax,edi
c0003747:	e8 cd e7 ff ff       	call   c0001f19 <xdir_sum>
c000374c:	89 c1                	mov    ecx,eax
c000374e:	8d 47 02             	lea    eax,[edi+0x2]
c0003751:	e8 f5 e2 ff ff       	call   c0001a4b <ld_word>
c0003756:	66 39 c1             	cmp    cx,ax
c0003759:	74 05                	je     c0003760 <load_xdir+0x12f>
c000375b:	bb 02 00 00 00       	mov    ebx,0x2
c0003760:	83 c4 1c             	add    esp,0x1c
c0003763:	89 d8                	mov    eax,ebx
c0003765:	5b                   	pop    ebx
c0003766:	5e                   	pop    esi
c0003767:	5f                   	pop    edi
c0003768:	5d                   	pop    ebp
c0003769:	c3                   	ret    

c000376a <load_obj_xdir>:
c000376a:	53                   	push   ebx
c000376b:	89 c3                	mov    ebx,eax
c000376d:	83 ec 08             	sub    esp,0x8
c0003770:	8b 02                	mov    eax,DWORD PTR [edx]
c0003772:	89 03                	mov    DWORD PTR [ebx],eax
c0003774:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003777:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000377a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003780:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003783:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000378a:	30 c0                	xor    al,al
c000378c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003793:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003796:	89 d8                	mov    eax,ebx
c0003798:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379b:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379e:	e8 04 f8 ff ff       	call   c0002fa7 <dir_sdi>
c00037a3:	85 c0                	test   eax,eax
c00037a5:	75 0b                	jne    c00037b2 <load_obj_xdir+0x48>
c00037a7:	89 d8                	mov    eax,ebx
c00037a9:	83 c4 08             	add    esp,0x8
c00037ac:	5b                   	pop    ebx
c00037ad:	e9 7f fe ff ff       	jmp    c0003631 <load_xdir>
c00037b2:	83 c4 08             	add    esp,0x8
c00037b5:	5b                   	pop    ebx
c00037b6:	c3                   	ret    

c00037b7 <dir_read>:
c00037b7:	55                   	push   ebp
c00037b8:	bd 04 00 00 00       	mov    ebp,0x4
c00037bd:	57                   	push   edi
c00037be:	56                   	push   esi
c00037bf:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c4:	53                   	push   ebx
c00037c5:	89 c3                	mov    ebx,eax
c00037c7:	83 ec 1c             	sub    esp,0x1c
c00037ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00037d0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037db:	89 c8                	mov    eax,ecx
c00037dd:	09 d0                	or     eax,edx
c00037df:	0f 84 25 01 00 00    	je     c000390a <dir_read+0x153>
c00037e5:	89 f8                	mov    eax,edi
c00037e7:	e8 3d ea ff ff       	call   c0002229 <move_window>
c00037ec:	89 c5                	mov    ebp,eax
c00037ee:	85 c0                	test   eax,eax
c00037f0:	0f 85 23 01 00 00    	jne    c0003919 <dir_read+0x162>
c00037f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fb:	84 c9                	test   cl,cl
c00037fd:	0f 84 11 01 00 00    	je     c0003914 <dir_read+0x15d>
c0003803:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003806:	75 48                	jne    c0003850 <dir_read+0x99>
c0003808:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380d:	74 10                	je     c000381f <dir_read+0x68>
c000380f:	80 f9 83             	cmp    cl,0x83
c0003812:	0f 85 dd 00 00 00    	jne    c00038f5 <dir_read+0x13e>
c0003818:	31 ed                	xor    ebp,ebp
c000381a:	e9 08 01 00 00       	jmp    c0003927 <dir_read+0x170>
c000381f:	80 f9 85             	cmp    cl,0x85
c0003822:	0f 85 cd 00 00 00    	jne    c00038f5 <dir_read+0x13e>
c0003828:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382e:	89 d8                	mov    eax,ebx
c0003830:	e8 fc fd ff ff       	call   c0003631 <load_xdir>
c0003835:	89 c5                	mov    ebp,eax
c0003837:	85 c0                	test   eax,eax
c0003839:	0f 85 da 00 00 00    	jne    c0003919 <dir_read+0x162>
c000383f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003842:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003845:	83 e0 3f             	and    eax,0x3f
c0003848:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384b:	e9 d7 00 00 00       	jmp    c0003927 <dir_read+0x170>
c0003850:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003853:	83 e0 3f             	and    eax,0x3f
c0003856:	80 f9 2e             	cmp    cl,0x2e
c0003859:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003860:	0f 84 8a 00 00 00    	je     c00038f0 <dir_read+0x139>
c0003866:	80 f9 e5             	cmp    cl,0xe5
c0003869:	0f 84 81 00 00 00    	je     c00038f0 <dir_read+0x139>
c000386f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003873:	83 e0 1f             	and    eax,0x1f
c0003876:	83 f8 08             	cmp    eax,0x8
c0003879:	0f 94 c0             	sete   al
c000387c:	0f b6 c0             	movzx  eax,al
c000387f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003883:	75 6b                	jne    c00038f0 <dir_read+0x139>
c0003885:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000388a:	75 44                	jne    c00038d0 <dir_read+0x119>
c000388c:	f6 c1 40             	test   cl,0x40
c000388f:	74 12                	je     c00038a3 <dir_read+0xec>
c0003891:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003894:	83 e1 bf             	and    ecx,0xffffffbf
c0003897:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a1:	eb 06                	jmp    c00038a9 <dir_read+0xf2>
c00038a3:	89 f0                	mov    eax,esi
c00038a5:	38 c8                	cmp    al,cl
c00038a7:	75 47                	jne    c00038f0 <dir_read+0x139>
c00038a9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ad:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b5:	75 3e                	jne    c00038f5 <dir_read+0x13e>
c00038b7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038bb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038be:	e8 8a e4 ff ff       	call   c0001d4d <pick_lfn>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	74 2e                	je     c00038f5 <dir_read+0x13e>
c00038c7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038cb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038ce:	eb 25                	jmp    c00038f5 <dir_read+0x13e>
c00038d0:	89 f0                	mov    eax,esi
c00038d2:	84 c0                	test   al,al
c00038d4:	75 11                	jne    c00038e7 <dir_read+0x130>
c00038d6:	89 d0                	mov    eax,edx
c00038d8:	e8 2a e6 ff ff       	call   c0001f07 <sum_sfn>
c00038dd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e1:	0f 84 31 ff ff ff    	je     c0003818 <dir_read+0x61>
c00038e7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ee:	eb 37                	jmp    c0003927 <dir_read+0x170>
c00038f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f5:	31 d2                	xor    edx,edx
c00038f7:	89 d8                	mov    eax,ebx
c00038f9:	e8 01 fc ff ff       	call   c00034ff <dir_next>
c00038fe:	89 c5                	mov    ebp,eax
c0003900:	85 c0                	test   eax,eax
c0003902:	0f 84 cd fe ff ff    	je     c00037d5 <dir_read+0x1e>
c0003908:	eb 0f                	jmp    c0003919 <dir_read+0x162>
c000390a:	85 ed                	test   ebp,ebp
c000390c:	0f 84 06 ff ff ff    	je     c0003818 <dir_read+0x61>
c0003912:	eb 05                	jmp    c0003919 <dir_read+0x162>
c0003914:	bd 04 00 00 00       	mov    ebp,0x4
c0003919:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003920:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003927:	83 c4 1c             	add    esp,0x1c
c000392a:	89 e8                	mov    eax,ebp
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_alloc>:
c0003931:	55                   	push   ebp
c0003932:	89 d5                	mov    ebp,edx
c0003934:	57                   	push   edi
c0003935:	31 d2                	xor    edx,edx
c0003937:	56                   	push   esi
c0003938:	53                   	push   ebx
c0003939:	89 c3                	mov    ebx,eax
c000393b:	83 ec 0c             	sub    esp,0xc
c000393e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003940:	e8 62 f6 ff ff       	call   c0002fa7 <dir_sdi>
c0003945:	85 c0                	test   eax,eax
c0003947:	75 4e                	jne    c0003997 <dir_alloc+0x66>
c0003949:	31 f6                	xor    esi,esi
c000394b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003951:	89 f8                	mov    eax,edi
c0003953:	e8 d1 e8 ff ff       	call   c0002229 <move_window>
c0003958:	85 c0                	test   eax,eax
c000395a:	75 3b                	jne    c0003997 <dir_alloc+0x66>
c000395c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003962:	8a 12                	mov    dl,BYTE PTR [edx]
c0003964:	75 07                	jne    c000396d <dir_alloc+0x3c>
c0003966:	f7 d2                	not    edx
c0003968:	c0 ea 07             	shr    dl,0x7
c000396b:	eb 0d                	jmp    c000397a <dir_alloc+0x49>
c000396d:	84 d2                	test   dl,dl
c000396f:	0f 94 c1             	sete   cl
c0003972:	80 fa e5             	cmp    dl,0xe5
c0003975:	0f 94 c2             	sete   dl
c0003978:	09 ca                	or     edx,ecx
c000397a:	84 d2                	test   dl,dl
c000397c:	74 07                	je     c0003985 <dir_alloc+0x54>
c000397e:	46                   	inc    esi
c000397f:	39 ee                	cmp    esi,ebp
c0003981:	75 04                	jne    c0003987 <dir_alloc+0x56>
c0003983:	eb 1c                	jmp    c00039a1 <dir_alloc+0x70>
c0003985:	31 f6                	xor    esi,esi
c0003987:	ba 01 00 00 00       	mov    edx,0x1
c000398c:	89 d8                	mov    eax,ebx
c000398e:	e8 6c fb ff ff       	call   c00034ff <dir_next>
c0003993:	85 c0                	test   eax,eax
c0003995:	74 b4                	je     c000394b <dir_alloc+0x1a>
c0003997:	83 f8 04             	cmp    eax,0x4
c000399a:	75 05                	jne    c00039a1 <dir_alloc+0x70>
c000399c:	b8 07 00 00 00       	mov    eax,0x7
c00039a1:	83 c4 0c             	add    esp,0xc
c00039a4:	5b                   	pop    ebx
c00039a5:	5e                   	pop    esi
c00039a6:	5f                   	pop    edi
c00039a7:	5d                   	pop    ebp
c00039a8:	c3                   	ret    

c00039a9 <store_xdir>:
c00039a9:	55                   	push   ebp
c00039aa:	57                   	push   edi
c00039ab:	89 c7                	mov    edi,eax
c00039ad:	56                   	push   esi
c00039ae:	53                   	push   ebx
c00039af:	83 ec 0c             	sub    esp,0xc
c00039b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b7:	89 e8                	mov    eax,ebp
c00039b9:	e8 5b e5 ff ff       	call   c0001f19 <xdir_sum>
c00039be:	0f b7 d0             	movzx  edx,ax
c00039c1:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c4:	e8 f4 e0 ff ff       	call   c0001abd <st_word>
c00039c9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cd:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039d0:	89 f8                	mov    eax,edi
c00039d2:	e8 d0 f5 ff ff       	call   c0002fa7 <dir_sdi>
c00039d7:	89 c6                	mov    esi,eax
c00039d9:	85 f6                	test   esi,esi
c00039db:	75 3d                	jne    c0003a1a <store_xdir+0x71>
c00039dd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039e0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e3:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e5:	e8 3f e8 ff ff       	call   c0002229 <move_window>
c00039ea:	89 c6                	mov    esi,eax
c00039ec:	85 c0                	test   eax,eax
c00039ee:	75 2a                	jne    c0003a1a <store_xdir+0x71>
c00039f0:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f3:	b9 20 00 00 00       	mov    ecx,0x20
c00039f8:	89 ea                	mov    edx,ebp
c00039fa:	e8 cb e0 ff ff       	call   c0001aca <mem_cpy>
c00039ff:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a01:	85 db                	test   ebx,ebx
c0003a03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a07:	74 11                	je     c0003a1a <store_xdir+0x71>
c0003a09:	31 d2                	xor    edx,edx
c0003a0b:	89 f8                	mov    eax,edi
c0003a0d:	83 c5 20             	add    ebp,0x20
c0003a10:	e8 ea fa ff ff       	call   c00034ff <dir_next>
c0003a15:	4b                   	dec    ebx
c0003a16:	89 c6                	mov    esi,eax
c0003a18:	eb bf                	jmp    c00039d9 <store_xdir+0x30>
c0003a1a:	89 f0                	mov    eax,esi
c0003a1c:	83 fe 02             	cmp    esi,0x2
c0003a1f:	76 05                	jbe    c0003a26 <store_xdir+0x7d>
c0003a21:	b8 02 00 00 00       	mov    eax,0x2
c0003a26:	83 c4 0c             	add    esp,0xc
c0003a29:	5b                   	pop    ebx
c0003a2a:	5e                   	pop    esi
c0003a2b:	5f                   	pop    edi
c0003a2c:	5d                   	pop    ebp
c0003a2d:	c3                   	ret    

c0003a2e <dir_remove>:
c0003a2e:	57                   	push   edi
c0003a2f:	56                   	push   esi
c0003a30:	53                   	push   ebx
c0003a31:	89 c3                	mov    ebx,eax
c0003a33:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a36:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a38:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3b:	83 fa ff             	cmp    edx,0xffffffff
c0003a3e:	74 09                	je     c0003a49 <dir_remove+0x1b>
c0003a40:	e8 62 f5 ff ff       	call   c0002fa7 <dir_sdi>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 41                	jne    c0003a8a <dir_remove+0x5c>
c0003a49:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4f:	89 f0                	mov    eax,esi
c0003a51:	e8 d3 e7 ff ff       	call   c0002229 <move_window>
c0003a56:	85 c0                	test   eax,eax
c0003a58:	75 26                	jne    c0003a80 <dir_remove+0x52>
c0003a5a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a60:	75 05                	jne    c0003a67 <dir_remove+0x39>
c0003a62:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a65:	eb 03                	jmp    c0003a6a <dir_remove+0x3c>
c0003a67:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a6a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a71:	73 17                	jae    c0003a8a <dir_remove+0x5c>
c0003a73:	31 d2                	xor    edx,edx
c0003a75:	89 d8                	mov    eax,ebx
c0003a77:	e8 83 fa ff ff       	call   c00034ff <dir_next>
c0003a7c:	85 c0                	test   eax,eax
c0003a7e:	74 c9                	je     c0003a49 <dir_remove+0x1b>
c0003a80:	83 f8 04             	cmp    eax,0x4
c0003a83:	75 05                	jne    c0003a8a <dir_remove+0x5c>
c0003a85:	b8 02 00 00 00       	mov    eax,0x2
c0003a8a:	5b                   	pop    ebx
c0003a8b:	5e                   	pop    esi
c0003a8c:	5f                   	pop    edi
c0003a8d:	c3                   	ret    

c0003a8e <create_name>:
c0003a8e:	55                   	push   ebp
c0003a8f:	89 d5                	mov    ebp,edx
c0003a91:	57                   	push   edi
c0003a92:	89 c7                	mov    edi,eax
c0003a94:	56                   	push   esi
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	53                   	push   ebx
c0003a98:	83 ec 3c             	sub    esp,0x3c
c0003a9b:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aaa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aae:	e8 72 e0 ff ff       	call   c0001b25 <tchar2uni>
c0003ab3:	89 c3                	mov    ebx,eax
c0003ab5:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab8:	75 0a                	jne    c0003ac4 <create_name+0x36>
c0003aba:	b8 06 00 00 00       	mov    eax,0x6
c0003abf:	e9 9e 02 00 00       	jmp    c0003d62 <create_name+0x2d4>
c0003ac4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac9:	76 0c                	jbe    c0003ad7 <create_name+0x49>
c0003acb:	c1 e8 10             	shr    eax,0x10
c0003ace:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad6:	46                   	inc    esi
c0003ad7:	66 83 fb 1f          	cmp    bx,0x1f
c0003adb:	76 4f                	jbe    c0003b2c <create_name+0x9e>
c0003add:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae1:	74 35                	je     c0003b18 <create_name+0x8a>
c0003ae3:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae7:	74 2f                	je     c0003b18 <create_name+0x8a>
c0003ae9:	66 83 fb 7f          	cmp    bx,0x7f
c0003aed:	77 11                	ja     c0003b00 <create_name+0x72>
c0003aef:	0f b7 d3             	movzx  edx,bx
c0003af2:	b8 12 5e 02 c0       	mov    eax,0xc0025e12
c0003af7:	e8 11 e0 ff ff       	call   c0001b0d <chk_chr>
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 ba                	jne    c0003aba <create_name+0x2c>
c0003b00:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b06:	77 b2                	ja     c0003aba <create_name+0x2c>
c0003b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b10:	46                   	inc    esi
c0003b11:	eb 97                	jmp    c0003aaa <create_name+0x1c>
c0003b13:	40                   	inc    eax
c0003b14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1e:	80 fa 2f             	cmp    dl,0x2f
c0003b21:	74 f0                	je     c0003b13 <create_name+0x85>
c0003b23:	80 fa 5c             	cmp    dl,0x5c
c0003b26:	74 eb                	je     c0003b13 <create_name+0x85>
c0003b28:	31 db                	xor    ebx,ebx
c0003b2a:	eb 02                	jmp    c0003b2e <create_name+0xa0>
c0003b2c:	b3 04                	mov    bl,0x4
c0003b2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b32:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b35:	85 f6                	test   esi,esi
c0003b37:	74 18                	je     c0003b51 <create_name+0xc3>
c0003b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b42:	66 83 f8 20          	cmp    ax,0x20
c0003b46:	74 06                	je     c0003b4e <create_name+0xc0>
c0003b48:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4c:	75 03                	jne    c0003b51 <create_name+0xc3>
c0003b4e:	4e                   	dec    esi
c0003b4f:	eb e4                	jmp    c0003b35 <create_name+0xa7>
c0003b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b55:	31 ed                	xor    ebp,ebp
c0003b57:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5d:	85 f6                	test   esi,esi
c0003b5f:	0f 84 55 ff ff ff    	je     c0003aba <create_name+0x2c>
c0003b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b69:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b70:	66 83 f8 20          	cmp    ax,0x20
c0003b74:	75 04                	jne    c0003b7a <create_name+0xec>
c0003b76:	89 d5                	mov    ebp,edx
c0003b78:	eb eb                	jmp    c0003b65 <create_name+0xd7>
c0003b7a:	85 ed                	test   ebp,ebp
c0003b7c:	75 06                	jne    c0003b84 <create_name+0xf6>
c0003b7e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b82:	75 08                	jne    c0003b8c <create_name+0xfe>
c0003b84:	83 cb 03             	or     ebx,0x3
c0003b87:	eb 03                	jmp    c0003b8c <create_name+0xfe>
c0003b89:	4e                   	dec    esi
c0003b8a:	74 0c                	je     c0003b98 <create_name+0x10a>
c0003b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b90:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b96:	75 f1                	jne    c0003b89 <create_name+0xfb>
c0003b98:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9d:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ba0:	ba 20 00 00 00       	mov    edx,0x20
c0003ba5:	e8 35 df ff ff       	call   c0001adf <mem_set>
c0003baa:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb2:	31 c9                	xor    ecx,ecx
c0003bb4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc8:	66 85 ed             	test   bp,bp
c0003bcb:	0f 84 30 01 00 00    	je     c0003d01 <create_name+0x273>
c0003bd1:	66 83 fd 20          	cmp    bp,0x20
c0003bd5:	74 10                	je     c0003be7 <create_name+0x159>
c0003bd7:	66 83 fd 2e          	cmp    bp,0x2e
c0003bdb:	75 13                	jne    c0003bf0 <create_name+0x162>
c0003bdd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be1:	0f 84 6b 01 00 00    	je     c0003d52 <create_name+0x2c4>
c0003be7:	83 cb 03             	or     ebx,0x3
c0003bea:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bee:	eb c9                	jmp    c0003bb9 <create_name+0x12b>
c0003bf0:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf4:	73 0b                	jae    c0003c01 <create_name+0x173>
c0003bf6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bfa:	75 47                	jne    c0003c43 <create_name+0x1b5>
c0003bfc:	e9 51 01 00 00       	jmp    c0003d52 <create_name+0x2c4>
c0003c01:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c06:	75 10                	jne    c0003c18 <create_name+0x18a>
c0003c08:	83 cb 03             	or     ebx,0x3
c0003c0b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c13:	e9 e9 00 00 00       	jmp    c0003d01 <create_name+0x273>
c0003c18:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1c:	74 0d                	je     c0003c2b <create_name+0x19d>
c0003c1e:	83 cb 03             	or     ebx,0x3
c0003c21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c25:	0f 87 d6 00 00 00    	ja     c0003d01 <create_name+0x273>
c0003c2b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c30:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c34:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3c:	b9 08 00 00 00       	mov    ecx,0x8
c0003c41:	eb a7                	jmp    c0003bea <create_name+0x15c>
c0003c43:	66 83 fd 7f          	cmp    bp,0x7f
c0003c47:	76 68                	jbe    c0003cb1 <create_name+0x223>
c0003c49:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4d:	88 da                	mov    dl,bl
c0003c4f:	83 ca 02             	or     edx,0x2
c0003c52:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c56:	50                   	push   eax
c0003c57:	50                   	push   eax
c0003c58:	68 b5 01 00 00       	push   0x1b5
c0003c5d:	55                   	push   ebp
c0003c5e:	e8 48 46 00 00       	call   c00082ab <ff_uni2oem>
c0003c63:	83 c4 10             	add    esp,0x10
c0003c66:	89 c5                	mov    ebp,eax
c0003c68:	a8 80                	test   al,0x80
c0003c6a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c72:	74 0c                	je     c0003c80 <create_name+0x1f2>
c0003c74:	83 e5 7f             	and    ebp,0x7f
c0003c77:	0f b6 ad 60 5d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda2a0]
c0003c7e:	eb 2a                	jmp    c0003caa <create_name+0x21c>
c0003c80:	66 3d ff 00          	cmp    ax,0xff
c0003c84:	76 24                	jbe    c0003caa <create_name+0x21c>
c0003c86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c8a:	48                   	dec    eax
c0003c8b:	39 c8                	cmp    eax,ecx
c0003c8d:	77 0c                	ja     c0003c9b <create_name+0x20d>
c0003c8f:	83 cb 03             	or     ebx,0x3
c0003c92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c96:	e9 4f ff ff ff       	jmp    c0003bea <create_name+0x15c>
c0003c9b:	89 e8                	mov    eax,ebp
c0003c9d:	88 d3                	mov    bl,dl
c0003c9f:	66 c1 e8 08          	shr    ax,0x8
c0003ca3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca7:	41                   	inc    ecx
c0003ca8:	eb 4b                	jmp    c0003cf5 <create_name+0x267>
c0003caa:	88 d3                	mov    bl,dl
c0003cac:	66 85 ed             	test   bp,bp
c0003caf:	74 19                	je     c0003cca <create_name+0x23c>
c0003cb1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb5:	0f b7 d5             	movzx  edx,bp
c0003cb8:	b8 1b 5e 02 c0       	mov    eax,0xc0025e1b
c0003cbd:	e8 4b de ff ff       	call   c0001b0d <chk_chr>
c0003cc2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc6:	85 c0                	test   eax,eax
c0003cc8:	74 0a                	je     c0003cd4 <create_name+0x246>
c0003cca:	83 cb 03             	or     ebx,0x3
c0003ccd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd2:	eb 21                	jmp    c0003cf5 <create_name+0x267>
c0003cd4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd7:	66 83 f8 19          	cmp    ax,0x19
c0003cdb:	77 07                	ja     c0003ce4 <create_name+0x256>
c0003cdd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce2:	eb 11                	jmp    c0003cf5 <create_name+0x267>
c0003ce4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce7:	66 83 f8 19          	cmp    ax,0x19
c0003ceb:	77 08                	ja     c0003cf5 <create_name+0x267>
c0003ced:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf2:	83 ed 20             	sub    ebp,0x20
c0003cf5:	89 e8                	mov    eax,ebp
c0003cf7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfb:	41                   	inc    ecx
c0003cfc:	e9 e9 fe ff ff       	jmp    c0003bea <create_name+0x15c>
c0003d01:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d05:	75 04                	jne    c0003d0b <create_name+0x27d>
c0003d07:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d10:	75 05                	jne    c0003d17 <create_name+0x289>
c0003d12:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1b:	83 e0 0c             	and    eax,0xc
c0003d1e:	3c 0c                	cmp    al,0xc
c0003d20:	74 0b                	je     c0003d2d <create_name+0x29f>
c0003d22:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d26:	83 e0 03             	and    eax,0x3
c0003d29:	3c 03                	cmp    al,0x3
c0003d2b:	75 05                	jne    c0003d32 <create_name+0x2a4>
c0003d2d:	83 cb 02             	or     ebx,0x2
c0003d30:	eb 19                	jmp    c0003d4b <create_name+0x2bd>
c0003d32:	f6 c3 02             	test   bl,0x2
c0003d35:	75 14                	jne    c0003d4b <create_name+0x2bd>
c0003d37:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3c:	74 03                	je     c0003d41 <create_name+0x2b3>
c0003d3e:	83 cb 10             	or     ebx,0x10
c0003d41:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d46:	74 03                	je     c0003d4b <create_name+0x2bd>
c0003d48:	83 cb 08             	or     ebx,0x8
c0003d4b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	eb 10                	jmp    c0003d62 <create_name+0x2d4>
c0003d52:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d57:	0f 85 ce fe ff ff    	jne    c0003c2b <create_name+0x19d>
c0003d5d:	e9 a6 fe ff ff       	jmp    c0003c08 <create_name+0x17a>
c0003d62:	83 c4 3c             	add    esp,0x3c
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	5f                   	pop    edi
c0003d68:	5d                   	pop    ebp
c0003d69:	c3                   	ret    

c0003d6a <xname_sum>:
c0003d6a:	56                   	push   esi
c0003d6b:	53                   	push   ebx
c0003d6c:	89 c6                	mov    esi,eax
c0003d6e:	51                   	push   ecx
c0003d6f:	31 db                	xor    ebx,ebx
c0003d71:	83 c6 02             	add    esi,0x2
c0003d74:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d78:	66 85 c0             	test   ax,ax
c0003d7b:	74 1f                	je     c0003d9c <xname_sum+0x32>
c0003d7d:	83 ec 0c             	sub    esp,0xc
c0003d80:	66 d1 cb             	ror    bx,1
c0003d83:	50                   	push   eax
c0003d84:	e8 1e 46 00 00       	call   c00083a7 <ff_wtoupper>
c0003d89:	83 c4 10             	add    esp,0x10
c0003d8c:	0f b6 d0             	movzx  edx,al
c0003d8f:	66 c1 e8 08          	shr    ax,0x8
c0003d93:	01 d3                	add    ebx,edx
c0003d95:	66 d1 cb             	ror    bx,1
c0003d98:	01 c3                	add    ebx,eax
c0003d9a:	eb d5                	jmp    c0003d71 <xname_sum+0x7>
c0003d9c:	89 d8                	mov    eax,ebx
c0003d9e:	5a                   	pop    edx
c0003d9f:	5b                   	pop    ebx
c0003da0:	5e                   	pop    esi
c0003da1:	c3                   	ret    

c0003da2 <create_xdir>:
c0003da2:	55                   	push   ebp
c0003da3:	b9 40 00 00 00       	mov    ecx,0x40
c0003da8:	57                   	push   edi
c0003da9:	bd 01 00 00 00       	mov    ebp,0x1
c0003dae:	56                   	push   esi
c0003daf:	31 ff                	xor    edi,edi
c0003db1:	53                   	push   ebx
c0003db2:	be 40 00 00 00       	mov    esi,0x40
c0003db7:	89 c3                	mov    ebx,eax
c0003db9:	83 ec 1c             	sub    esp,0x1c
c0003dbc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dc0:	31 d2                	xor    edx,edx
c0003dc2:	e8 18 dd ff ff       	call   c0001adf <mem_set>
c0003dc7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dca:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dce:	31 c9                	xor    ecx,ecx
c0003dd0:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd7:	83 c6 02             	add    esi,0x2
c0003dda:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	74 12                	je     c0003df5 <create_xdir+0x53>
c0003de3:	0f b6 c1             	movzx  eax,cl
c0003de6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dea:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dee:	66 83 fd 01          	cmp    bp,0x1
c0003df2:	80 d9 ff             	sbb    cl,0xff
c0003df5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df8:	0f b7 d5             	movzx  edx,bp
c0003dfb:	83 c6 02             	add    esi,0x2
c0003dfe:	e8 ba dc ff ff       	call   c0001abd <st_word>
c0003e03:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e09:	75 d3                	jne    c0003dde <create_xdir+0x3c>
c0003e0b:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e12:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e16:	0f b6 c1             	movzx  eax,cl
c0003e19:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1e:	74 07                	je     c0003e27 <create_xdir+0x85>
c0003e20:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e25:	eb a9                	jmp    c0003dd0 <create_xdir+0x2e>
c0003e27:	8d 47 02             	lea    eax,[edi+0x2]
c0003e2a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e30:	89 d0                	mov    eax,edx
c0003e32:	e8 33 ff ff ff       	call   c0003d6a <xname_sum>
c0003e37:	83 c4 1c             	add    esp,0x1c
c0003e3a:	0f b7 d0             	movzx  edx,ax
c0003e3d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e40:	5b                   	pop    ebx
c0003e41:	5e                   	pop    esi
c0003e42:	5f                   	pop    edi
c0003e43:	5d                   	pop    ebp
c0003e44:	e9 74 dc ff ff       	jmp    c0001abd <st_word>

c0003e49 <cmp_lfn>:
c0003e49:	55                   	push   ebp
c0003e4a:	57                   	push   edi
c0003e4b:	89 d7                	mov    edi,edx
c0003e4d:	56                   	push   esi
c0003e4e:	53                   	push   ebx
c0003e4f:	83 ec 1c             	sub    esp,0x1c
c0003e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e56:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e59:	e8 ed db ff ff       	call   c0001a4b <ld_word>
c0003e5e:	66 85 c0             	test   ax,ax
c0003e61:	74 07                	je     c0003e6a <cmp_lfn+0x21>
c0003e63:	31 c0                	xor    eax,eax
c0003e65:	e9 9a 00 00 00       	jmp    c0003f04 <cmp_lfn+0xbb>
c0003e6a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6c:	bd 01 00 00 00       	mov    ebp,0x1
c0003e71:	83 e3 3f             	and    ebx,0x3f
c0003e74:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7c:	4b                   	dec    ebx
c0003e7d:	6b db 0d             	imul   ebx,ebx,0xd
c0003e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e84:	0f b6 80 e0 5d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda220]
c0003e8b:	01 f8                	add    eax,edi
c0003e8d:	e8 b9 db ff ff       	call   c0001a4b <ld_word>
c0003e92:	66 85 ed             	test   bp,bp
c0003e95:	89 c6                	mov    esi,eax
c0003e97:	74 3c                	je     c0003ed5 <cmp_lfn+0x8c>
c0003e99:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9f:	77 c2                	ja     c0003e63 <cmp_lfn+0x1a>
c0003ea1:	83 ec 0c             	sub    esp,0xc
c0003ea4:	0f b7 c0             	movzx  eax,ax
c0003ea7:	50                   	push   eax
c0003ea8:	e8 fa 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003ead:	89 c5                	mov    ebp,eax
c0003eaf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eba:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebe:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec1:	e8 e1 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003ec6:	83 c4 10             	add    esp,0x10
c0003ec9:	39 c5                	cmp    ebp,eax
c0003ecb:	75 96                	jne    c0003e63 <cmp_lfn+0x1a>
c0003ecd:	89 f5                	mov    ebp,esi
c0003ecf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed3:	eb 04                	jmp    c0003ed9 <cmp_lfn+0x90>
c0003ed5:	66 46                	inc    si
c0003ed7:	75 8a                	jne    c0003e63 <cmp_lfn+0x1a>
c0003ed9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee2:	75 9c                	jne    c0003e80 <cmp_lfn+0x37>
c0003ee4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee7:	74 16                	je     c0003eff <cmp_lfn+0xb6>
c0003ee9:	66 85 ed             	test   bp,bp
c0003eec:	74 11                	je     c0003eff <cmp_lfn+0xb6>
c0003eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef2:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef7:	0f 94 c0             	sete   al
c0003efa:	0f b6 c0             	movzx  eax,al
c0003efd:	eb 05                	jmp    c0003f04 <cmp_lfn+0xbb>
c0003eff:	b8 01 00 00 00       	mov    eax,0x1
c0003f04:	83 c4 1c             	add    esp,0x1c
c0003f07:	5b                   	pop    ebx
c0003f08:	5e                   	pop    esi
c0003f09:	5f                   	pop    edi
c0003f0a:	5d                   	pop    ebp
c0003f0b:	c3                   	ret    

c0003f0c <dir_find>:
c0003f0c:	55                   	push   ebp
c0003f0d:	31 d2                	xor    edx,edx
c0003f0f:	57                   	push   edi
c0003f10:	56                   	push   esi
c0003f11:	53                   	push   ebx
c0003f12:	89 c3                	mov    ebx,eax
c0003f14:	83 ec 1c             	sub    esp,0x1c
c0003f17:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f19:	e8 89 f0 ff ff       	call   c0002fa7 <dir_sdi>
c0003f1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f21:	85 c0                	test   eax,eax
c0003f23:	0f 85 9e 01 00 00    	jne    c00040c7 <dir_find+0x1bb>
c0003f29:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2c:	0f 85 8d 00 00 00    	jne    c0003fbf <dir_find+0xb3>
c0003f32:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f35:	e8 30 fe ff ff       	call   c0003d6a <xname_sum>
c0003f3a:	89 c7                	mov    edi,eax
c0003f3c:	31 d2                	xor    edx,edx
c0003f3e:	89 d8                	mov    eax,ebx
c0003f40:	e8 72 f8 ff ff       	call   c00037b7 <dir_read>
c0003f45:	85 c0                	test   eax,eax
c0003f47:	0f 85 5e 01 00 00    	jne    c00040ab <dir_find+0x19f>
c0003f4d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f50:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f53:	e8 f3 da ff ff       	call   c0001a4b <ld_word>
c0003f58:	66 39 f8             	cmp    ax,di
c0003f5b:	75 df                	jne    c0003f3c <dir_find+0x30>
c0003f5d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f60:	31 ed                	xor    ebp,ebp
c0003f62:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f66:	ba 40 00 00 00       	mov    edx,0x40
c0003f6b:	89 e9                	mov    ecx,ebp
c0003f6d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f71:	0f 84 42 01 00 00    	je     c00040b9 <dir_find+0x1ad>
c0003f77:	f6 c2 1f             	test   dl,0x1f
c0003f7a:	75 03                	jne    c0003f7f <dir_find+0x73>
c0003f7c:	83 c2 02             	add    edx,0x2
c0003f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f83:	89 d0                	mov    eax,edx
c0003f85:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f88:	e8 be da ff ff       	call   c0001a4b <ld_word>
c0003f8d:	83 ec 0c             	sub    esp,0xc
c0003f90:	0f b7 c0             	movzx  eax,ax
c0003f93:	50                   	push   eax
c0003f94:	e8 0e 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003f99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fa0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa7:	e8 fb 43 00 00       	call   c00083a7 <ff_wtoupper>
c0003fac:	83 c4 10             	add    esp,0x10
c0003faf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb3:	75 87                	jne    c0003f3c <dir_find+0x30>
c0003fb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb9:	45                   	inc    ebp
c0003fba:	83 c2 02             	add    edx,0x2
c0003fbd:	eb ac                	jmp    c0003f6b <dir_find+0x5f>
c0003fbf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fcb:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fd0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd6:	89 f0                	mov    eax,esi
c0003fd8:	e8 4c e2 ff ff       	call   c0002229 <move_window>
c0003fdd:	85 c0                	test   eax,eax
c0003fdf:	0f 85 c6 00 00 00    	jne    c00040ab <dir_find+0x19f>
c0003fe5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003feb:	84 c9                	test   cl,cl
c0003fed:	0f 84 bd 00 00 00    	je     c00040b0 <dir_find+0x1a4>
c0003ff3:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff6:	88 d0                	mov    al,dl
c0003ff8:	83 e0 3f             	and    eax,0x3f
c0003ffb:	80 f9 e5             	cmp    cl,0xe5
c0003ffe:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004001:	0f 84 87 00 00 00    	je     c000408e <dir_find+0x182>
c0004007:	80 e2 08             	and    dl,0x8
c000400a:	74 06                	je     c0004012 <dir_find+0x106>
c000400c:	3c 0f                	cmp    al,0xf
c000400e:	75 7e                	jne    c000408e <dir_find+0x182>
c0004010:	eb 04                	jmp    c0004016 <dir_find+0x10a>
c0004012:	3c 0f                	cmp    al,0xf
c0004014:	75 4c                	jne    c0004062 <dir_find+0x156>
c0004016:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000401a:	75 7e                	jne    c000409a <dir_find+0x18e>
c000401c:	f6 c1 40             	test   cl,0x40
c000401f:	74 12                	je     c0004033 <dir_find+0x127>
c0004021:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004024:	83 e1 bf             	and    ecx,0xffffffbf
c0004027:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004031:	eb 06                	jmp    c0004039 <dir_find+0x12d>
c0004033:	89 f8                	mov    eax,edi
c0004035:	38 c8                	cmp    al,cl
c0004037:	75 5c                	jne    c0004095 <dir_find+0x189>
c0004039:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004042:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004045:	75 53                	jne    c000409a <dir_find+0x18e>
c0004047:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404e:	89 ea                	mov    edx,ebp
c0004050:	e8 f4 fd ff ff       	call   c0003e49 <cmp_lfn>
c0004055:	85 c0                	test   eax,eax
c0004057:	74 41                	je     c000409a <dir_find+0x18e>
c0004059:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004060:	eb 38                	jmp    c000409a <dir_find+0x18e>
c0004062:	89 f8                	mov    eax,edi
c0004064:	84 c0                	test   al,al
c0004066:	75 0d                	jne    c0004075 <dir_find+0x169>
c0004068:	89 e8                	mov    eax,ebp
c000406a:	e8 98 de ff ff       	call   c0001f07 <sum_sfn>
c000406f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004073:	74 52                	je     c00040c7 <dir_find+0x1bb>
c0004075:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004079:	75 13                	jne    c000408e <dir_find+0x182>
c000407b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004083:	89 e8                	mov    eax,ebp
c0004085:	e8 60 da ff ff       	call   c0001aea <mem_cmp>
c000408a:	85 c0                	test   eax,eax
c000408c:	74 39                	je     c00040c7 <dir_find+0x1bb>
c000408e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004095:	bf ff ff ff ff       	mov    edi,0xffffffff
c000409a:	31 d2                	xor    edx,edx
c000409c:	89 d8                	mov    eax,ebx
c000409e:	e8 5c f4 ff ff       	call   c00034ff <dir_next>
c00040a3:	85 c0                	test   eax,eax
c00040a5:	0f 84 25 ff ff ff    	je     c0003fd0 <dir_find+0xc4>
c00040ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ae:	eb 17                	jmp    c00040c7 <dir_find+0x1bb>
c00040b0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b7:	eb 0e                	jmp    c00040c7 <dir_find+0x1bb>
c00040b9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c1:	0f 85 75 fe ff ff    	jne    c0003f3c <dir_find+0x30>
c00040c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040ca:	83 c4 1c             	add    esp,0x1c
c00040cd:	5b                   	pop    ebx
c00040ce:	5e                   	pop    esi
c00040cf:	5f                   	pop    edi
c00040d0:	5d                   	pop    ebp
c00040d1:	c3                   	ret    

c00040d2 <dir_register>:
c00040d2:	55                   	push   ebp
c00040d3:	57                   	push   edi
c00040d4:	56                   	push   esi
c00040d5:	be 06 00 00 00       	mov    esi,0x6
c00040da:	53                   	push   ebx
c00040db:	83 ec 6c             	sub    esp,0x6c
c00040de:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e2:	0f 85 62 02 00 00    	jne    c000434a <dir_register+0x278>
c00040e8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040ea:	31 ff                	xor    edi,edi
c00040ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ef:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f4:	74 03                	je     c00040f9 <dir_register+0x27>
c00040f6:	47                   	inc    edi
c00040f7:	eb f6                	jmp    c00040ef <dir_register+0x1d>
c00040f9:	89 c3                	mov    ebx,eax
c00040fb:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040ff:	0f 85 e1 00 00 00    	jne    c00041e6 <dir_register+0x114>
c0004105:	83 c7 0e             	add    edi,0xe
c0004108:	b9 0f 00 00 00       	mov    ecx,0xf
c000410d:	89 f8                	mov    eax,edi
c000410f:	31 d2                	xor    edx,edx
c0004111:	f7 f1                	div    ecx
c0004113:	8d 50 02             	lea    edx,[eax+0x2]
c0004116:	89 c7                	mov    edi,eax
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 12 f8 ff ff       	call   c0003931 <dir_alloc>
c000411f:	89 c6                	mov    esi,eax
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 21 02 00 00    	jne    c000434a <dir_register+0x278>
c0004129:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004132:	c1 e7 05             	shl    edi,0x5
c0004135:	29 f8                	sub    eax,edi
c0004137:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000413a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413d:	a8 04                	test   al,0x4
c000413f:	0f 84 91 00 00 00    	je     c00041d6 <dir_register+0x104>
c0004145:	83 e0 fb             	and    eax,0xfffffffb
c0004148:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414b:	89 d8                	mov    eax,ebx
c000414d:	e8 25 ec ff ff       	call   c0002d77 <fill_first_frag>
c0004152:	85 c0                	test   eax,eax
c0004154:	0f 85 ee 01 00 00    	jne    c0004348 <dir_register+0x276>
c000415a:	83 c9 ff             	or     ecx,0xffffffff
c000415d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004160:	89 d8                	mov    eax,ebx
c0004162:	e8 db eb ff ff       	call   c0002d42 <fill_last_frag>
c0004167:	85 c0                	test   eax,eax
c0004169:	0f 85 d9 01 00 00    	jne    c0004348 <dir_register+0x276>
c000416f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004173:	74 61                	je     c00041d6 <dir_register+0x104>
c0004175:	89 da                	mov    edx,ebx
c0004177:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417b:	e8 ea f5 ff ff       	call   c000376a <load_obj_xdir>
c0004180:	85 c0                	test   eax,eax
c0004182:	0f 85 c0 01 00 00    	jne    c0004348 <dir_register+0x276>
c0004188:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418c:	31 c9                	xor    ecx,ecx
c000418e:	c1 e2 09             	shl    edx,0x9
c0004191:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004194:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004197:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000419a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a0:	83 c0 38             	add    eax,0x38
c00041a3:	e8 1c d9 ff ff       	call   c0001ac4 <st_qword>
c00041a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ae:	83 c0 28             	add    eax,0x28
c00041b1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b4:	e8 0b d9 ff ff       	call   c0001ac4 <st_qword>
c00041b9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041bf:	83 c8 01             	or     eax,0x1
c00041c2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c9:	e8 db f7 ff ff       	call   c00039a9 <store_xdir>
c00041ce:	85 c0                	test   eax,eax
c00041d0:	0f 85 72 01 00 00    	jne    c0004348 <dir_register+0x276>
c00041d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041dc:	e8 c1 fb ff ff       	call   c0003da2 <create_xdir>
c00041e1:	e9 64 01 00 00       	jmp    c000434a <dir_register+0x278>
c00041e6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e9:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f2:	89 c2                	mov    edx,eax
c00041f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f8:	e8 cd d8 ff ff       	call   c0001aca <mem_cpy>
c00041fd:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004202:	74 58                	je     c000425c <dir_register+0x18a>
c0004204:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004208:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004210:	83 ec 0c             	sub    esp,0xc
c0004213:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000421a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004222:	e8 24 dc ff ff       	call   c0001e4b <gen_numname>
c0004227:	89 d8                	mov    eax,ebx
c0004229:	e8 de fc ff ff       	call   c0003f0c <dir_find>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	89 c6                	mov    esi,eax
c0004233:	85 c0                	test   eax,eax
c0004235:	75 15                	jne    c000424c <dir_register+0x17a>
c0004237:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004240:	75 ce                	jne    c0004210 <dir_register+0x13e>
c0004242:	be 07 00 00 00       	mov    esi,0x7
c0004247:	e9 fe 00 00 00       	jmp    c000434a <dir_register+0x278>
c000424c:	83 f8 04             	cmp    eax,0x4
c000424f:	0f 85 f5 00 00 00    	jne    c000434a <dir_register+0x278>
c0004255:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004259:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425c:	b9 01 00 00 00       	mov    ecx,0x1
c0004261:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004266:	74 0f                	je     c0004277 <dir_register+0x1a5>
c0004268:	b9 0d 00 00 00       	mov    ecx,0xd
c000426d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004270:	31 d2                	xor    edx,edx
c0004272:	f7 f1                	div    ecx
c0004274:	8d 48 01             	lea    ecx,[eax+0x1]
c0004277:	89 ca                	mov    edx,ecx
c0004279:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427d:	89 d8                	mov    eax,ebx
c000427f:	e8 ad f6 ff ff       	call   c0003931 <dir_alloc>
c0004284:	89 c6                	mov    esi,eax
c0004286:	85 c0                	test   eax,eax
c0004288:	0f 85 bc 00 00 00    	jne    c000434a <dir_register+0x278>
c000428e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004292:	49                   	dec    ecx
c0004293:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004297:	74 6a                	je     c0004303 <dir_register+0x231>
c0004299:	89 c8                	mov    eax,ecx
c000429b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429e:	c1 e0 05             	shl    eax,0x5
c00042a1:	29 c2                	sub    edx,eax
c00042a3:	89 d8                	mov    eax,ebx
c00042a5:	e8 fd ec ff ff       	call   c0002fa7 <dir_sdi>
c00042aa:	89 c6                	mov    esi,eax
c00042ac:	85 c0                	test   eax,eax
c00042ae:	0f 85 96 00 00 00    	jne    c000434a <dir_register+0x278>
c00042b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b8:	e8 4a dc ff ff       	call   c0001f07 <sum_sfn>
c00042bd:	0f b6 f8             	movzx  edi,al
c00042c0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c6:	89 e8                	mov    eax,ebp
c00042c8:	e8 5c df ff ff       	call   c0002229 <move_window>
c00042cd:	89 c6                	mov    esi,eax
c00042cf:	85 c0                	test   eax,eax
c00042d1:	75 77                	jne    c000434a <dir_register+0x278>
c00042d3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042db:	83 ec 0c             	sub    esp,0xc
c00042de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e1:	57                   	push   edi
c00042e2:	e8 e0 da ff ff       	call   c0001dc7 <put_lfn>
c00042e7:	31 d2                	xor    edx,edx
c00042e9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ed:	89 d8                	mov    eax,ebx
c00042ef:	e8 0b f2 ff ff       	call   c00034ff <dir_next>
c00042f4:	83 c4 10             	add    esp,0x10
c00042f7:	89 c6                	mov    esi,eax
c00042f9:	85 c0                	test   eax,eax
c00042fb:	75 4d                	jne    c000434a <dir_register+0x278>
c00042fd:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004301:	75 bd                	jne    c00042c0 <dir_register+0x1ee>
c0004303:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004306:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004309:	89 e8                	mov    eax,ebp
c000430b:	e8 19 df ff ff       	call   c0002229 <move_window>
c0004310:	89 c6                	mov    esi,eax
c0004312:	85 c0                	test   eax,eax
c0004314:	75 34                	jne    c000434a <dir_register+0x278>
c0004316:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004319:	b9 20 00 00 00       	mov    ecx,0x20
c000431e:	31 d2                	xor    edx,edx
c0004320:	e8 ba d7 ff ff       	call   c0001adf <mem_set>
c0004325:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004331:	e8 94 d7 ff ff       	call   c0001aca <mem_cpy>
c0004336:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004339:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433c:	83 e0 18             	and    eax,0x18
c000433f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004342:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004346:	eb 02                	jmp    c000434a <dir_register+0x278>
c0004348:	89 c6                	mov    esi,eax
c000434a:	83 c4 6c             	add    esp,0x6c
c000434d:	89 f0                	mov    eax,esi
c000434f:	5b                   	pop    ebx
c0004350:	5e                   	pop    esi
c0004351:	5f                   	pop    edi
c0004352:	5d                   	pop    ebp
c0004353:	c3                   	ret    

c0004354 <sync_fs>:
c0004354:	56                   	push   esi
c0004355:	53                   	push   ebx
c0004356:	53                   	push   ebx
c0004357:	89 c3                	mov    ebx,eax
c0004359:	e8 37 de ff ff       	call   c0002195 <sync_window>
c000435e:	85 c0                	test   eax,eax
c0004360:	0f 85 b1 00 00 00    	jne    c0004417 <sync_fs+0xc3>
c0004366:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004369:	0f 85 8e 00 00 00    	jne    c00043fd <sync_fs+0xa9>
c000436f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004373:	0f 85 84 00 00 00    	jne    c00043fd <sync_fs+0xa9>
c0004379:	b9 00 02 00 00       	mov    ecx,0x200
c000437e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004381:	31 d2                	xor    edx,edx
c0004383:	89 f0                	mov    eax,esi
c0004385:	e8 55 d7 ff ff       	call   c0001adf <mem_set>
c000438a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004390:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004395:	e8 23 d7 ff ff       	call   c0001abd <st_word>
c000439a:	ba 52 52 61 41       	mov    edx,0x41615252
c000439f:	89 f0                	mov    eax,esi
c00043a1:	e8 1b d7 ff ff       	call   c0001ac1 <st_dword>
c00043a6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ac:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b1:	e8 0b d7 ff ff       	call   c0001ac1 <st_dword>
c00043b6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043bf:	e8 fd d6 ff ff       	call   c0001ac1 <st_dword>
c00043c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cd:	e8 ef d6 ff ff       	call   c0001ac1 <st_dword>
c00043d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d8:	83 c0 01             	add    eax,0x1
c00043db:	83 d2 00             	adc    edx,0x0
c00043de:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e1:	83 ec 0c             	sub    esp,0xc
c00043e4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e7:	6a 01                	push   0x1
c00043e9:	52                   	push   edx
c00043ea:	50                   	push   eax
c00043eb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ef:	56                   	push   esi
c00043f0:	50                   	push   eax
c00043f1:	e8 20 d6 ff ff       	call   c0001a16 <disk_write>
c00043f6:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043fa:	83 c4 20             	add    esp,0x20
c00043fd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004401:	51                   	push   ecx
c0004402:	6a 00                	push   0x0
c0004404:	6a 00                	push   0x0
c0004406:	50                   	push   eax
c0004407:	e8 20 d6 ff ff       	call   c0001a2c <disk_ioctl>
c000440c:	83 c4 10             	add    esp,0x10
c000440f:	85 c0                	test   eax,eax
c0004411:	0f 95 c0             	setne  al
c0004414:	0f b6 c0             	movzx  eax,al
c0004417:	5a                   	pop    edx
c0004418:	5b                   	pop    ebx
c0004419:	5e                   	pop    esi
c000441a:	c3                   	ret    

c000441b <create_partition>:
c000441b:	55                   	push   ebp
c000441c:	0f b6 c0             	movzx  eax,al
c000441f:	57                   	push   edi
c0004420:	56                   	push   esi
c0004421:	53                   	push   ebx
c0004422:	83 ec 60             	sub    esp,0x60
c0004425:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004429:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004431:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004435:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004439:	50                   	push   eax
c000443a:	6a 01                	push   0x1
c000443c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004440:	e8 e7 d5 ff ff       	call   c0001a2c <disk_ioctl>
c0004445:	83 c4 10             	add    esp,0x10
c0004448:	85 c0                	test   eax,eax
c000444a:	74 0a                	je     c0004456 <create_partition+0x3b>
c000444c:	b8 01 00 00 00       	mov    eax,0x1
c0004451:	e9 67 05 00 00       	jmp    c00049bd <create_partition+0x5a2>
c0004456:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000445a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004462:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004466:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446b:	0f 86 ed 03 00 00    	jbe    c000485e <create_partition+0x443>
c0004471:	83 c0 df             	add    eax,0xffffffdf
c0004474:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447c:	83 d2 ff             	adc    edx,0xffffffff
c000447f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448f:	83 c0 bd             	add    eax,0xffffffbd
c0004492:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004499:	83 d2 ff             	adc    edx,0xffffffff
c000449c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ac:	be 22 00 00 00       	mov    esi,0x22
c00044b1:	31 ff                	xor    edi,edi
c00044b3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044bb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044cb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d5:	75 0e                	jne    c00044e5 <create_partition+0xca>
c00044d7:	b9 00 02 00 00       	mov    ecx,0x200
c00044dc:	31 d2                	xor    edx,edx
c00044de:	89 d8                	mov    eax,ebx
c00044e0:	e8 fa d5 ff ff       	call   c0001adf <mem_set>
c00044e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f4:	0f 84 23 01 00 00    	je     c000461d <create_partition+0x202>
c00044fa:	89 f0                	mov    eax,esi
c00044fc:	89 fa                	mov    edx,edi
c00044fe:	05 ff 07 00 00       	add    eax,0x7ff
c0004503:	83 d2 00             	adc    edx,0x0
c0004506:	89 c1                	mov    ecx,eax
c0004508:	89 d7                	mov    edi,edx
c000450a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004510:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004514:	89 ce                	mov    esi,ecx
c0004516:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000451a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004522:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004525:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004529:	89 04 24             	mov    DWORD PTR [esp],eax
c000452c:	b8 64 00 00 00       	mov    eax,0x64
c0004531:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004534:	b8 00 00 00 00       	mov    eax,0x0
c0004539:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453d:	72 41                	jb     c0004580 <create_partition+0x165>
c000453f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004547:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004550:	01 c1                	add    ecx,eax
c0004552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004556:	f7 24 24             	mul    DWORD PTR [esp]
c0004559:	6a 00                	push   0x0
c000455b:	01 ca                	add    edx,ecx
c000455d:	6a 64                	push   0x64
c000455f:	52                   	push   edx
c0004560:	50                   	push   eax
c0004561:	e8 f6 ed 01 00       	call   c002335c <__udivdi3>
c0004566:	83 c4 10             	add    esp,0x10
c0004569:	05 ff 07 00 00       	add    eax,0x7ff
c000456e:	83 d2 00             	adc    edx,0x0
c0004571:	89 c1                	mov    ecx,eax
c0004573:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004577:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004580:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004583:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004587:	01 f0                	add    eax,esi
c0004589:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458d:	11 fa                	adc    edx,edi
c000458f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004593:	19 d1                	sbb    ecx,edx
c0004595:	73 2e                	jae    c00045c5 <create_partition+0x1aa>
c0004597:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459b:	89 f8                	mov    eax,edi
c000459d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b0:	73 6b                	jae    c000461d <create_partition+0x202>
c00045b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045ba:	29 f0                	sub    eax,esi
c00045bc:	19 fa                	sbb    edx,edi
c00045be:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cc:	74 4f                	je     c000461d <create_partition+0x202>
c00045ce:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d1:	b9 10 00 00 00       	mov    ecx,0x10
c00045d6:	ba f0 5d 02 c0       	mov    edx,0xc0025df0
c00045db:	e8 ea d4 ff ff       	call   c0001aca <mem_cpy>
c00045e0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e4:	b9 10 00 00 00       	mov    ecx,0x10
c00045e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ed:	e8 2c db ff ff       	call   c000211e <make_rand>
c00045f2:	89 f2                	mov    edx,esi
c00045f4:	89 f9                	mov    ecx,edi
c00045f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045fa:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fe:	e8 c1 d4 ff ff       	call   c0001ac4 <st_qword>
c0004603:	03 34 24             	add    esi,DWORD PTR [esp]
c0004606:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000460a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460e:	89 f2                	mov    edx,esi
c0004610:	89 f9                	mov    ecx,edi
c0004612:	83 c2 ff             	add    edx,0xffffffff
c0004615:	83 d1 ff             	adc    ecx,0xffffffff
c0004618:	e8 a7 d4 ff ff       	call   c0001ac4 <st_qword>
c000461d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004621:	83 e8 80             	sub    eax,0xffffff80
c0004624:	89 c5                	mov    ebp,eax
c0004626:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000462a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004630:	75 6b                	jne    c000469d <create_partition+0x282>
c0004632:	45                   	inc    ebp
c0004633:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004637:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463c:	e8 39 da ff ff       	call   c000207a <crc32>
c0004641:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004647:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464b:	75 e5                	jne    c0004632 <create_partition+0x217>
c000464d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004651:	31 d2                	xor    edx,edx
c0004653:	83 ec 0c             	sub    esp,0xc
c0004656:	c1 ed 09             	shr    ebp,0x9
c0004659:	6a 01                	push   0x1
c000465b:	8d 45 02             	lea    eax,[ebp+0x2]
c000465e:	52                   	push   edx
c000465f:	50                   	push   eax
c0004660:	53                   	push   ebx
c0004661:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004665:	e8 ac d3 ff ff       	call   c0001a16 <disk_write>
c000466a:	83 c4 20             	add    esp,0x20
c000466d:	85 c0                	test   eax,eax
c000466f:	0f 85 d7 fd ff ff    	jne    c000444c <create_partition+0x31>
c0004675:	83 ec 0c             	sub    esp,0xc
c0004678:	31 d2                	xor    edx,edx
c000467a:	6a 01                	push   0x1
c000467c:	89 e8                	mov    eax,ebp
c000467e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004682:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004686:	52                   	push   edx
c0004687:	50                   	push   eax
c0004688:	53                   	push   ebx
c0004689:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468d:	e8 84 d3 ff ff       	call   c0001a16 <disk_write>
c0004692:	83 c4 20             	add    esp,0x20
c0004695:	85 c0                	test   eax,eax
c0004697:	0f 85 af fd ff ff    	jne    c000444c <create_partition+0x31>
c000469d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a5:	3d 00 40 00 00       	cmp    eax,0x4000
c00046aa:	74 0d                	je     c00046b9 <create_partition+0x29e>
c00046ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b4:	e9 12 fe ff ff       	jmp    c00044cb <create_partition+0xb0>
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	b9 00 02 00 00       	mov    ecx,0x200
c00046c0:	89 d8                	mov    eax,ebx
c00046c2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c5:	e8 15 d4 ff ff       	call   c0001adf <mem_set>
c00046ca:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cd:	b9 10 00 00 00       	mov    ecx,0x10
c00046d2:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00046d7:	89 d8                	mov    eax,ebx
c00046d9:	e8 ec d3 ff ff       	call   c0001aca <mem_cpy>
c00046de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e2:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e5:	f7 d2                	not    edx
c00046e7:	e8 d5 d3 ff ff       	call   c0001ac1 <st_dword>
c00046ec:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ef:	31 c9                	xor    ecx,ecx
c00046f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f4:	ba 01 00 00 00       	mov    edx,0x1
c00046f9:	e8 c6 d3 ff ff       	call   c0001ac4 <st_qword>
c00046fe:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004702:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004706:	83 c2 ff             	add    edx,0xffffffff
c0004709:	89 e8                	mov    eax,ebp
c000470b:	83 d1 ff             	adc    ecx,0xffffffff
c000470e:	e8 b1 d3 ff ff       	call   c0001ac4 <st_qword>
c0004713:	31 c9                	xor    ecx,ecx
c0004715:	8d 43 28             	lea    eax,[ebx+0x28]
c0004718:	ba 22 00 00 00       	mov    edx,0x22
c000471d:	e8 a2 d3 ff ff       	call   c0001ac4 <st_qword>
c0004722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004726:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472a:	83 c2 de             	add    edx,0xffffffde
c000472d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004730:	83 d1 ff             	adc    ecx,0xffffffff
c0004733:	31 f6                	xor    esi,esi
c0004735:	e8 8a d3 ff ff       	call   c0001ac4 <st_qword>
c000473a:	8d 43 54             	lea    eax,[ebx+0x54]
c000473d:	ba 80 00 00 00       	mov    edx,0x80
c0004742:	e8 7a d3 ff ff       	call   c0001ac1 <st_dword>
c0004747:	8d 43 50             	lea    eax,[ebx+0x50]
c000474a:	ba 80 00 00 00       	mov    edx,0x80
c000474f:	e8 6d d3 ff ff       	call   c0001ac1 <st_dword>
c0004754:	ba 02 00 00 00       	mov    edx,0x2
c0004759:	89 f8                	mov    eax,edi
c000475b:	e8 61 d3 ff ff       	call   c0001ac1 <st_dword>
c0004760:	8d 53 38             	lea    edx,[ebx+0x38]
c0004763:	b9 10 00 00 00       	mov    ecx,0x10
c0004768:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476c:	e8 ad d9 ff ff       	call   c000211e <make_rand>
c0004771:	83 c8 ff             	or     eax,0xffffffff
c0004774:	46                   	inc    esi
c0004775:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000477a:	e8 fb d8 ff ff       	call   c000207a <crc32>
c000477f:	83 fe 5c             	cmp    esi,0x5c
c0004782:	75 f0                	jne    c0004774 <create_partition+0x359>
c0004784:	f7 d0                	not    eax
c0004786:	8d 73 10             	lea    esi,[ebx+0x10]
c0004789:	89 c2                	mov    edx,eax
c000478b:	89 f0                	mov    eax,esi
c000478d:	e8 2f d3 ff ff       	call   c0001ac1 <st_dword>
c0004792:	83 ec 0c             	sub    esp,0xc
c0004795:	6a 01                	push   0x1
c0004797:	6a 00                	push   0x0
c0004799:	6a 01                	push   0x1
c000479b:	53                   	push   ebx
c000479c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047a0:	e8 71 d2 ff ff       	call   c0001a16 <disk_write>
c00047a5:	83 c4 20             	add    esp,0x20
c00047a8:	85 c0                	test   eax,eax
c00047aa:	0f 85 9c fc ff ff    	jne    c000444c <create_partition+0x31>
c00047b0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b8:	83 c2 ff             	add    edx,0xffffffff
c00047bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047be:	83 d1 ff             	adc    ecx,0xffffffff
c00047c1:	e8 fe d2 ff ff       	call   c0001ac4 <st_qword>
c00047c6:	ba 01 00 00 00       	mov    edx,0x1
c00047cb:	31 c9                	xor    ecx,ecx
c00047cd:	89 e8                	mov    eax,ebp
c00047cf:	e8 f0 d2 ff ff       	call   c0001ac4 <st_qword>
c00047d4:	89 f8                	mov    eax,edi
c00047d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047de:	31 ff                	xor    edi,edi
c00047e0:	e8 df d2 ff ff       	call   c0001ac4 <st_qword>
c00047e5:	89 f0                	mov    eax,esi
c00047e7:	31 d2                	xor    edx,edx
c00047e9:	e8 d3 d2 ff ff       	call   c0001ac1 <st_dword>
c00047ee:	83 c8 ff             	or     eax,0xffffffff
c00047f1:	47                   	inc    edi
c00047f2:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f7:	e8 7e d8 ff ff       	call   c000207a <crc32>
c00047fc:	83 ff 5c             	cmp    edi,0x5c
c00047ff:	75 f0                	jne    c00047f1 <create_partition+0x3d6>
c0004801:	f7 d0                	not    eax
c0004803:	89 c2                	mov    edx,eax
c0004805:	89 f0                	mov    eax,esi
c0004807:	e8 b5 d2 ff ff       	call   c0001ac1 <st_dword>
c000480c:	83 ec 0c             	sub    esp,0xc
c000480f:	6a 01                	push   0x1
c0004811:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004815:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004819:	83 c0 ff             	add    eax,0xffffffff
c000481c:	83 d2 ff             	adc    edx,0xffffffff
c000481f:	52                   	push   edx
c0004820:	50                   	push   eax
c0004821:	53                   	push   ebx
c0004822:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004826:	e8 eb d1 ff ff       	call   c0001a16 <disk_write>
c000482b:	83 c4 20             	add    esp,0x20
c000482e:	85 c0                	test   eax,eax
c0004830:	0f 85 16 fc ff ff    	jne    c000444c <create_partition+0x31>
c0004836:	31 d2                	xor    edx,edx
c0004838:	89 d8                	mov    eax,ebx
c000483a:	b9 00 02 00 00       	mov    ecx,0x200
c000483f:	e8 9b d2 ff ff       	call   c0001adf <mem_set>
c0004844:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000484a:	b9 10 00 00 00       	mov    ecx,0x10
c000484f:	ba f0 5c 02 c0       	mov    edx,0xc0025cf0
c0004854:	e8 71 d2 ff ff       	call   c0001aca <mem_cpy>
c0004859:	e9 21 01 00 00       	jmp    c000497f <create_partition+0x564>
c000485e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004862:	b9 05 00 00 00       	mov    ecx,0x5
c0004867:	89 04 24             	mov    DWORD PTR [esp],eax
c000486a:	bf 08 00 00 00       	mov    edi,0x8
c000486f:	89 f8                	mov    eax,edi
c0004871:	31 d2                	xor    edx,edx
c0004873:	0f b6 f0             	movzx  esi,al
c0004876:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004879:	f7 f6                	div    esi
c000487b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004880:	76 0a                	jbe    c000488c <create_partition+0x471>
c0004882:	d1 e7                	shl    edi,1
c0004884:	49                   	dec    ecx
c0004885:	75 e8                	jne    c000486f <create_partition+0x454>
c0004887:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488c:	b9 00 02 00 00       	mov    ecx,0x200
c0004891:	31 d2                	xor    edx,edx
c0004893:	89 d8                	mov    eax,ebx
c0004895:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489b:	e8 3f d2 ff ff       	call   c0001adf <mem_set>
c00048a0:	b9 64 00 00 00       	mov    ecx,0x64
c00048a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a8:	31 d2                	xor    edx,edx
c00048aa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b2:	f7 f1                	div    ecx
c00048b4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bd:	89 f8                	mov    eax,edi
c00048bf:	0f b6 c0             	movzx  eax,al
c00048c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c6:	e9 80 00 00 00       	jmp    c000494b <create_partition+0x530>
c00048cb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ce:	29 cf                	sub    edi,ecx
c00048d0:	89 ca                	mov    edx,ecx
c00048d2:	89 f0                	mov    eax,esi
c00048d4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d9:	e8 e3 d1 ff ff       	call   c0001ac1 <st_dword>
c00048de:	8d 46 04             	lea    eax,[esi+0x4]
c00048e1:	89 fa                	mov    edx,edi
c00048e3:	83 c6 10             	add    esi,0x10
c00048e6:	e8 d6 d1 ff ff       	call   c0001ac1 <st_dword>
c00048eb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f4:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f8:	89 c8                	mov    eax,ecx
c00048fa:	01 f9                	add    ecx,edi
c00048fc:	f7 f5                	div    ebp
c00048fe:	89 d5                	mov    ebp,edx
c0004900:	31 d2                	xor    edx,edx
c0004902:	45                   	inc    ebp
c0004903:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004907:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000490a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490d:	89 c2                	mov    edx,eax
c000490f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004912:	c1 ea 02             	shr    edx,0x2
c0004915:	83 e2 c0             	and    edx,0xffffffc0
c0004918:	09 ea                	or     edx,ebp
c000491a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 f5                	div    ebp
c0004926:	89 d7                	mov    edi,edx
c0004928:	31 d2                	xor    edx,edx
c000492a:	47                   	inc    edi
c000492b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004932:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004935:	89 c5                	mov    ebp,eax
c0004937:	c1 ed 02             	shr    ebp,0x2
c000493a:	83 e5 c0             	and    ebp,0xffffffc0
c000493d:	09 ef                	or     edi,ebp
c000493f:	89 fa                	mov    edx,edi
c0004941:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004944:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004949:	74 34                	je     c000497f <create_partition+0x564>
c000494b:	85 c9                	test   ecx,ecx
c000494d:	74 30                	je     c000497f <create_partition+0x564>
c000494f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004952:	76 2b                	jbe    c000497f <create_partition+0x564>
c0004954:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004958:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495f:	83 ff 64             	cmp    edi,0x64
c0004962:	76 4b                	jbe    c00049af <create_partition+0x594>
c0004964:	89 f8                	mov    eax,edi
c0004966:	01 c8                	add    eax,ecx
c0004968:	0f 82 5d ff ff ff    	jb     c00048cb <create_partition+0x4b0>
c000496e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004971:	0f 87 54 ff ff ff    	ja     c00048cb <create_partition+0x4b0>
c0004977:	85 ff                	test   edi,edi
c0004979:	0f 85 51 ff ff ff    	jne    c00048d0 <create_partition+0x4b5>
c000497f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004985:	ba 55 aa 00 00       	mov    edx,0xaa55
c000498a:	e8 2e d1 ff ff       	call   c0001abd <st_word>
c000498f:	83 ec 0c             	sub    esp,0xc
c0004992:	6a 01                	push   0x1
c0004994:	6a 00                	push   0x0
c0004996:	6a 00                	push   0x0
c0004998:	53                   	push   ebx
c0004999:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499d:	e8 74 d0 ff ff       	call   c0001a16 <disk_write>
c00049a2:	83 c4 20             	add    esp,0x20
c00049a5:	85 c0                	test   eax,eax
c00049a7:	0f 95 c0             	setne  al
c00049aa:	0f b6 c0             	movzx  eax,al
c00049ad:	eb 0e                	jmp    c00049bd <create_partition+0x5a2>
c00049af:	74 07                	je     c00049b8 <create_partition+0x59d>
c00049b1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b6:	eb ac                	jmp    c0004964 <create_partition+0x549>
c00049b8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049bb:	eb a7                	jmp    c0004964 <create_partition+0x549>
c00049bd:	83 c4 5c             	add    esp,0x5c
c00049c0:	5b                   	pop    ebx
c00049c1:	5e                   	pop    esi
c00049c2:	5f                   	pop    edi
c00049c3:	5d                   	pop    ebp
c00049c4:	c3                   	ret    

c00049c5 <get_fileinfo>:
c00049c5:	55                   	push   ebp
c00049c6:	57                   	push   edi
c00049c7:	56                   	push   esi
c00049c8:	53                   	push   ebx
c00049c9:	83 ec 1c             	sub    esp,0x1c
c00049cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ce:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049dc:	0f 84 dc 01 00 00    	je     c0004bbe <get_fileinfo+0x1f9>
c00049e2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e5:	75 0f                	jne    c00049f6 <get_fileinfo+0x31>
c00049e7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049ea:	83 c4 1c             	add    esp,0x1c
c00049ed:	5b                   	pop    ebx
c00049ee:	5e                   	pop    esi
c00049ef:	5f                   	pop    edi
c00049f0:	5d                   	pop    ebp
c00049f1:	e9 58 d5 ff ff       	jmp    c0001f4e <get_xfileinfo>
c00049f6:	89 d3                	mov    ebx,edx
c00049f8:	89 c6                	mov    esi,eax
c00049fa:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fe:	74 6a                	je     c0004a6a <get_fileinfo+0xa5>
c0004a00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a08:	31 ed                	xor    ebp,ebp
c0004a0a:	31 ff                	xor    edi,edi
c0004a0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a17:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1b:	66 85 d2             	test   dx,dx
c0004a1e:	74 3e                	je     c0004a5e <get_fileinfo+0x99>
c0004a20:	66 85 ed             	test   bp,bp
c0004a23:	75 0c                	jne    c0004a31 <get_fileinfo+0x6c>
c0004a25:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2b:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2f:	76 22                	jbe    c0004a53 <get_fileinfo+0x8e>
c0004a31:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a36:	89 e8                	mov    eax,ebp
c0004a38:	29 f9                	sub    ecx,edi
c0004a3a:	c1 e0 10             	shl    eax,0x10
c0004a3d:	09 d0                	or     eax,edx
c0004a3f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a43:	e8 a3 d1 ff ff       	call   c0001beb <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 10                	je     c0004a5c <get_fileinfo+0x97>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	31 d2                	xor    edx,edx
c0004a51:	01 c7                	add    edi,eax
c0004a53:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a58:	89 d5                	mov    ebp,edx
c0004a5a:	eb b0                	jmp    c0004a0c <get_fileinfo+0x47>
c0004a5c:	31 ff                	xor    edi,edi
c0004a5e:	66 85 ed             	test   bp,bp
c0004a61:	74 02                	je     c0004a65 <get_fileinfo+0xa0>
c0004a63:	31 ff                	xor    edi,edi
c0004a65:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a6a:	31 ff                	xor    edi,edi
c0004a6c:	31 c9                	xor    ecx,ecx
c0004a6e:	83 f9 0a             	cmp    ecx,0xa
c0004a71:	0f 87 ad 00 00 00    	ja     c0004b24 <get_fileinfo+0x15f>
c0004a77:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a81:	66 83 fa 20          	cmp    dx,0x20
c0004a85:	0f 84 92 00 00 00    	je     c0004b1d <get_fileinfo+0x158>
c0004a8b:	66 83 fa 05          	cmp    dx,0x5
c0004a8f:	75 05                	jne    c0004a96 <get_fileinfo+0xd1>
c0004a91:	ba e5 00 00 00       	mov    edx,0xe5
c0004a96:	83 ff 0b             	cmp    edi,0xb
c0004a99:	77 0b                	ja     c0004aa6 <get_fileinfo+0xe1>
c0004a9b:	83 fd 09             	cmp    ebp,0x9
c0004a9e:	75 06                	jne    c0004aa6 <get_fileinfo+0xe1>
c0004aa0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa5:	47                   	inc    edi
c0004aa6:	0f b7 c2             	movzx  eax,dx
c0004aa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aad:	e8 6d d0 ff ff       	call   c0001b1f <dbc_1st>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 2f                	je     c0004ae5 <get_fileinfo+0x120>
c0004ab6:	83 fd 08             	cmp    ebp,0x8
c0004ab9:	74 2a                	je     c0004ae5 <get_fileinfo+0x120>
c0004abb:	83 fd 0b             	cmp    ebp,0xb
c0004abe:	74 25                	je     c0004ae5 <get_fileinfo+0x120>
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004acb:	e8 52 d0 ff ff       	call   c0001b22 <dbc_2nd>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	74 11                	je     c0004ae5 <get_fileinfo+0x120>
c0004ad4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004add:	c1 e2 08             	shl    edx,0x8
c0004ae0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae3:	09 c2                	or     edx,eax
c0004ae5:	0f b7 d2             	movzx  edx,dx
c0004ae8:	50                   	push   eax
c0004ae9:	50                   	push   eax
c0004aea:	68 b5 01 00 00       	push   0x1b5
c0004aef:	52                   	push   edx
c0004af0:	e8 46 38 00 00       	call   c000833b <ff_oem2uni>
c0004af5:	83 c4 10             	add    esp,0x10
c0004af8:	66 85 c0             	test   ax,ax
c0004afb:	75 04                	jne    c0004b01 <get_fileinfo+0x13c>
c0004afd:	31 ff                	xor    edi,edi
c0004aff:	eb 23                	jmp    c0004b24 <get_fileinfo+0x15f>
c0004b01:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b06:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b0a:	29 f9                	sub    ecx,edi
c0004b0c:	0f b7 c0             	movzx  eax,ax
c0004b0f:	e8 d7 d0 ff ff       	call   c0001beb <put_utf>
c0004b14:	84 c0                	test   al,al
c0004b16:	74 e5                	je     c0004afd <get_fileinfo+0x138>
c0004b18:	0f b6 c0             	movzx  eax,al
c0004b1b:	01 c7                	add    edi,eax
c0004b1d:	89 e9                	mov    ecx,ebp
c0004b1f:	e9 4a ff ff ff       	jmp    c0004a6e <get_fileinfo+0xa9>
c0004b24:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b29:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2d:	75 54                	jne    c0004b83 <get_fileinfo+0x1be>
c0004b2f:	85 ff                	test   edi,edi
c0004b31:	75 0b                	jne    c0004b3e <get_fileinfo+0x179>
c0004b33:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b37:	ba 01 00 00 00       	mov    edx,0x1
c0004b3c:	eb 33                	jmp    c0004b71 <get_fileinfo+0x1ac>
c0004b3e:	b1 08                	mov    cl,0x8
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b48:	84 c0                	test   al,al
c0004b4a:	74 25                	je     c0004b71 <get_fileinfo+0x1ac>
c0004b4c:	66 83 f8 2e          	cmp    ax,0x2e
c0004b50:	74 16                	je     c0004b68 <get_fileinfo+0x1a3>
c0004b52:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b55:	66 83 ff 19          	cmp    di,0x19
c0004b59:	77 0f                	ja     c0004b6a <get_fileinfo+0x1a5>
c0004b5b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b61:	74 07                	je     c0004b6a <get_fileinfo+0x1a5>
c0004b63:	83 c0 20             	add    eax,0x20
c0004b66:	eb 02                	jmp    c0004b6a <get_fileinfo+0x1a5>
c0004b68:	b1 10                	mov    cl,0x10
c0004b6a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6e:	42                   	inc    edx
c0004b6f:	eb d1                	jmp    c0004b42 <get_fileinfo+0x17d>
c0004b71:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b79:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7d:	75 04                	jne    c0004b83 <get_fileinfo+0x1be>
c0004b7f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b83:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b86:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b89:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8f:	83 c0 1c             	add    eax,0x1c
c0004b92:	e8 c1 ce ff ff       	call   c0001a58 <ld_dword>
c0004b97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004ba0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba3:	83 c0 16             	add    eax,0x16
c0004ba6:	e8 a0 ce ff ff       	call   c0001a4b <ld_word>
c0004bab:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004baf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb2:	83 c0 18             	add    eax,0x18
c0004bb5:	e8 91 ce ff ff       	call   c0001a4b <ld_word>
c0004bba:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbe:	83 c4 1c             	add    esp,0x1c
c0004bc1:	5b                   	pop    ebx
c0004bc2:	5e                   	pop    esi
c0004bc3:	5f                   	pop    edi
c0004bc4:	5d                   	pop    ebp
c0004bc5:	c3                   	ret    

c0004bc6 <ld_clust.isra.0>:
c0004bc6:	56                   	push   esi
c0004bc7:	89 c6                	mov    esi,eax
c0004bc9:	53                   	push   ebx
c0004bca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcd:	89 d3                	mov    ebx,edx
c0004bcf:	e8 77 ce ff ff       	call   c0001a4b <ld_word>
c0004bd4:	0f b7 c8             	movzx  ecx,ax
c0004bd7:	89 f0                	mov    eax,esi
c0004bd9:	3c 03                	cmp    al,0x3
c0004bdb:	75 0d                	jne    c0004bea <ld_clust.isra.0+0x24>
c0004bdd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004be0:	e8 66 ce ff ff       	call   c0001a4b <ld_word>
c0004be5:	c1 e0 10             	shl    eax,0x10
c0004be8:	09 c1                	or     ecx,eax
c0004bea:	89 c8                	mov    eax,ecx
c0004bec:	5b                   	pop    ebx
c0004bed:	5e                   	pop    esi
c0004bee:	c3                   	ret    

c0004bef <st_clust.isra.1>:
c0004bef:	56                   	push   esi
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	53                   	push   ebx
c0004bf3:	89 d3                	mov    ebx,edx
c0004bf5:	0f b7 d1             	movzx  edx,cx
c0004bf8:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfb:	e8 bd ce ff ff       	call   c0001abd <st_word>
c0004c00:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c03:	75 0f                	jne    c0004c14 <st_clust.isra.1+0x25>
c0004c05:	c1 e9 10             	shr    ecx,0x10
c0004c08:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0b:	89 ca                	mov    edx,ecx
c0004c0d:	5b                   	pop    ebx
c0004c0e:	5e                   	pop    esi
c0004c0f:	e9 a9 ce ff ff       	jmp    c0001abd <st_word>
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <init_alloc_info.isra.2>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c6                	mov    esi,eax
c0004c1b:	89 d3                	mov    ebx,edx
c0004c1d:	51                   	push   ecx
c0004c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 30 ce ff ff       	call   c0001a58 <ld_dword>
c0004c28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2d:	83 c0 38             	add    eax,0x38
c0004c30:	e8 3b ce ff ff       	call   c0001a70 <ld_qword>
c0004c35:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c38:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c40:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c47:	83 e0 02             	and    eax,0x2
c0004c4a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5b                   	pop    ebx
c0004c4f:	5e                   	pop    esi
c0004c50:	c3                   	ret    

c0004c51 <follow_path>:
c0004c51:	56                   	push   esi
c0004c52:	53                   	push   ebx
c0004c53:	89 c3                	mov    ebx,eax
c0004c55:	83 ec 14             	sub    esp,0x14
c0004c58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c62:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c64:	80 fa 5c             	cmp    dl,0x5c
c0004c67:	75 07                	jne    c0004c70 <follow_path+0x1f>
c0004c69:	40                   	inc    eax
c0004c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6e:	eb ee                	jmp    c0004c5e <follow_path+0xd>
c0004c70:	80 fa 2f             	cmp    dl,0x2f
c0004c73:	74 f4                	je     c0004c69 <follow_path+0x18>
c0004c75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c83:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c86:	77 52                	ja     c0004cda <follow_path+0x89>
c0004c88:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8c:	31 d2                	xor    edx,edx
c0004c8e:	89 d8                	mov    eax,ebx
c0004c90:	e8 12 e3 ff ff       	call   c0002fa7 <dir_sdi>
c0004c95:	eb 7c                	jmp    c0004d13 <follow_path+0xc2>
c0004c97:	89 d8                	mov    eax,ebx
c0004c99:	e8 6e f2 ff ff       	call   c0003f0c <dir_find>
c0004c9e:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca1:	85 c0                	test   eax,eax
c0004ca3:	75 46                	jne    c0004ceb <follow_path+0x9a>
c0004ca5:	80 e2 04             	and    dl,0x4
c0004ca8:	75 69                	jne    c0004d13 <follow_path+0xc2>
c0004caa:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cae:	74 5e                	je     c0004d0e <follow_path+0xbd>
c0004cb0:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb2:	3c 04                	cmp    al,0x4
c0004cb4:	75 41                	jne    c0004cf7 <follow_path+0xa6>
c0004cb6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cc0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc3:	30 c0                	xor    al,al
c0004cc5:	09 d0                	or     eax,edx
c0004cc7:	89 da                	mov    edx,ebx
c0004cc9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ccf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd2:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd5:	e8 3d ff ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0004cda:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cde:	89 d8                	mov    eax,ebx
c0004ce0:	e8 a9 ed ff ff       	call   c0003a8e <create_name>
c0004ce5:	85 c0                	test   eax,eax
c0004ce7:	74 ae                	je     c0004c97 <follow_path+0x46>
c0004ce9:	eb 28                	jmp    c0004d13 <follow_path+0xc2>
c0004ceb:	83 f8 04             	cmp    eax,0x4
c0004cee:	75 23                	jne    c0004d13 <follow_path+0xc2>
c0004cf0:	80 e2 04             	and    dl,0x4
c0004cf3:	74 19                	je     c0004d0e <follow_path+0xbd>
c0004cf5:	eb 1c                	jmp    c0004d13 <follow_path+0xc2>
c0004cf7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cfa:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d00:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d04:	e8 bd fe ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0004d09:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0c:	eb cc                	jmp    c0004cda <follow_path+0x89>
c0004d0e:	b8 05 00 00 00       	mov    eax,0x5
c0004d13:	83 c4 14             	add    esp,0x14
c0004d16:	5b                   	pop    ebx
c0004d17:	5e                   	pop    esi
c0004d18:	c3                   	ret    

c0004d19 <f_mount>:
c0004d19:	53                   	push   ebx
c0004d1a:	83 ec 18             	sub    esp,0x18
c0004d1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2d:	e8 fb d2 ff ff       	call   c000202d <get_ldnumber>
c0004d32:	89 c2                	mov    edx,eax
c0004d34:	b8 0b 00 00 00       	mov    eax,0xb
c0004d39:	85 d2                	test   edx,edx
c0004d3b:	78 39                	js     c0004d76 <f_mount+0x5d>
c0004d3d:	8b 04 95 a0 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5c60]
c0004d44:	85 c0                	test   eax,eax
c0004d46:	74 03                	je     c0004d4b <f_mount+0x32>
c0004d48:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4f:	85 c0                	test   eax,eax
c0004d51:	74 03                	je     c0004d56 <f_mount+0x3d>
c0004d53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d5a:	89 04 95 a0 a3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5c60],eax
c0004d61:	31 c0                	xor    eax,eax
c0004d63:	84 db                	test   bl,bl
c0004d65:	74 0f                	je     c0004d76 <f_mount+0x5d>
c0004d67:	31 c9                	xor    ecx,ecx
c0004d69:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d71:	e8 65 d7 ff ff       	call   c00024db <mount_volume>
c0004d76:	83 c4 18             	add    esp,0x18
c0004d79:	5b                   	pop    ebx
c0004d7a:	c3                   	ret    

c0004d7b <f_open>:
c0004d7b:	55                   	push   ebp
c0004d7c:	bd 09 00 00 00       	mov    ebp,0x9
c0004d81:	57                   	push   edi
c0004d82:	56                   	push   esi
c0004d83:	53                   	push   ebx
c0004d84:	83 ec 7c             	sub    esp,0x7c
c0004d87:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d95:	85 db                	test   ebx,ebx
c0004d97:	0f 84 10 04 00 00    	je     c00051ad <f_open+0x432>
c0004d9d:	89 fe                	mov    esi,edi
c0004d9f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da3:	83 e6 3f             	and    esi,0x3f
c0004da6:	89 f0                	mov    eax,esi
c0004da8:	0f b6 c8             	movzx  ecx,al
c0004dab:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db2:	e8 24 d7 ff ff       	call   c00024db <mount_volume>
c0004db7:	89 c5                	mov    ebp,eax
c0004db9:	85 c0                	test   eax,eax
c0004dbb:	0f 85 e6 03 00 00    	jne    c00051a7 <f_open+0x42c>
c0004dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc5:	bd 11 00 00 00       	mov    ebp,0x11
c0004dca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dce:	83 ec 0c             	sub    esp,0xc
c0004dd1:	68 60 04 00 00       	push   0x460
c0004dd6:	e8 a3 34 00 00       	call   c000827e <ff_memalloc>
c0004ddb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ddf:	83 c4 10             	add    esp,0x10
c0004de2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de7:	0f 84 c0 03 00 00    	je     c00051ad <f_open+0x432>
c0004ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df5:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfb:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e01:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0c:	e8 40 fe ff ff       	call   c0004c51 <follow_path>
c0004e11:	89 c5                	mov    ebp,eax
c0004e13:	85 c0                	test   eax,eax
c0004e15:	75 0c                	jne    c0004e23 <f_open+0xa8>
c0004e17:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1c:	79 05                	jns    c0004e23 <f_open+0xa8>
c0004e1e:	bd 06 00 00 00       	mov    ebp,0x6
c0004e23:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e29:	0f 84 84 01 00 00    	je     c0004fb3 <f_open+0x238>
c0004e2f:	85 ed                	test   ebp,ebp
c0004e31:	74 20                	je     c0004e53 <f_open+0xd8>
c0004e33:	83 fd 04             	cmp    ebp,0x4
c0004e36:	0f 85 58 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e40:	83 ce 08             	or     esi,0x8
c0004e43:	e8 8a f2 ff ff       	call   c00040d2 <dir_register>
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	85 c0                	test   eax,eax
c0004e4c:	74 2f                	je     c0004e7d <f_open+0x102>
c0004e4e:	e9 41 03 00 00       	jmp    c0005194 <f_open+0x419>
c0004e53:	bd 07 00 00 00       	mov    ebp,0x7
c0004e58:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5d:	0f 85 31 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e63:	bd 08 00 00 00       	mov    ebp,0x8
c0004e68:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6e:	0f 85 20 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e74:	83 e7 08             	and    edi,0x8
c0004e77:	0f 84 65 01 00 00    	je     c0004fe2 <f_open+0x267>
c0004e7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e81:	8a 02                	mov    al,BYTE PTR [edx]
c0004e83:	3c 04                	cmp    al,0x4
c0004e85:	0f 85 97 00 00 00    	jne    c0004f22 <f_open+0x1a7>
c0004e8b:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8e:	89 13                	mov    DWORD PTR [ebx],edx
c0004e90:	89 da                	mov    edx,ebx
c0004e92:	e8 80 fd ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0004e97:	31 d2                	xor    edx,edx
c0004e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea5:	83 c0 02             	add    eax,0x2
c0004ea8:	e8 32 cc ff ff       	call   c0001adf <mem_set>
c0004ead:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb2:	31 d2                	xor    edx,edx
c0004eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ebb:	83 c0 26             	add    eax,0x26
c0004ebe:	e8 1c cc ff ff       	call   c0001adf <mem_set>
c0004ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eca:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ece:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed6:	83 c0 08             	add    eax,0x8
c0004ed9:	e8 e3 cb ff ff       	call   c0001ac1 <st_dword>
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eed:	e8 b7 ea ff ff       	call   c00039a9 <store_xdir>
c0004ef2:	89 c5                	mov    ebp,eax
c0004ef4:	85 c0                	test   eax,eax
c0004ef6:	0f 85 98 02 00 00    	jne    c0005194 <f_open+0x419>
c0004efc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eff:	85 d2                	test   edx,edx
c0004f01:	0f 84 db 00 00 00    	je     c0004fe2 <f_open+0x267>
c0004f07:	31 c9                	xor    ecx,ecx
c0004f09:	89 d8                	mov    eax,ebx
c0004f0b:	e8 8e e3 ff ff       	call   c000329e <remove_chain>
c0004f10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f14:	89 c5                	mov    ebp,eax
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	48                   	dec    eax
c0004f1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1d:	e9 b8 00 00 00       	jmp    c0004fda <f_open+0x25f>
c0004f22:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f26:	89 ea                	mov    edx,ebp
c0004f28:	e8 99 fc ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0004f2d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f32:	89 c7                	mov    edi,eax
c0004f34:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f37:	e8 85 cb ff ff       	call   c0001ac1 <st_dword>
c0004f3c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f40:	31 c9                	xor    ecx,ecx
c0004f42:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f4a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4e:	e8 9c fc ff ff       	call   c0004bef <st_clust.isra.1>
c0004f53:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f57:	31 d2                	xor    edx,edx
c0004f59:	83 c0 1c             	add    eax,0x1c
c0004f5c:	e8 60 cb ff ff       	call   c0001ac1 <st_dword>
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 ff                	test   edi,edi
c0004f67:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6b:	74 75                	je     c0004fe2 <f_open+0x267>
c0004f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f71:	31 c9                	xor    ecx,ecx
c0004f73:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f76:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f81:	89 fa                	mov    edx,edi
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 12 e3 ff ff       	call   c000329e <remove_chain>
c0004f8c:	89 c5                	mov    ebp,eax
c0004f8e:	85 c0                	test   eax,eax
c0004f90:	0f 85 fe 01 00 00    	jne    c0005194 <f_open+0x419>
c0004f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa2:	4f                   	dec    edi
c0004fa3:	e8 81 d2 ff ff       	call   c0002229 <move_window>
c0004fa8:	89 c5                	mov    ebp,eax
c0004faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fae:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb1:	eb 27                	jmp    c0004fda <f_open+0x25f>
c0004fb3:	85 ed                	test   ebp,ebp
c0004fb5:	0f 85 d9 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fbb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbf:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc4:	a8 10                	test   al,0x10
c0004fc6:	0f 85 c8 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fcc:	83 e7 02             	and    edi,0x2
c0004fcf:	74 11                	je     c0004fe2 <f_open+0x267>
c0004fd1:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd6:	a8 01                	test   al,0x1
c0004fd8:	eb 02                	jmp    c0004fdc <f_open+0x261>
c0004fda:	85 ed                	test   ebp,ebp
c0004fdc:	0f 85 b2 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe8:	74 03                	je     c0004fed <f_open+0x272>
c0004fea:	83 ce 40             	or     esi,0x40
c0004fed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff1:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff4:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff7:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ffa:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffd:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005001:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005004:	8a 02                	mov    al,BYTE PTR [edx]
c0005006:	3c 04                	cmp    al,0x4
c0005008:	75 2a                	jne    c0005034 <f_open+0x2b9>
c000500a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005013:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005016:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000501a:	30 c0                	xor    al,al
c000501c:	09 c8                	or     eax,ecx
c000501e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005021:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005025:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005028:	8d 42 10             	lea    eax,[edx+0x10]
c000502b:	89 da                	mov    edx,ebx
c000502d:	e8 e5 fb ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0005032:	eb 1c                	jmp    c0005050 <f_open+0x2d5>
c0005034:	89 fa                	mov    edx,edi
c0005036:	e8 8b fb ff ff       	call   c0004bc6 <ld_clust.isra.0>
c000503b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005041:	e8 12 ca ff ff       	call   c0001a58 <ld_dword>
c0005046:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005054:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505b:	89 03                	mov    DWORD PTR [ebx],eax
c000505d:	31 d2                	xor    edx,edx
c000505f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005063:	b9 00 02 00 00       	mov    ecx,0x200
c0005068:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005070:	89 f0                	mov    eax,esi
c0005072:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005079:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005083:	8d 43 50             	lea    eax,[ebx+0x50]
c0005086:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005098:	e8 42 ca ff ff       	call   c0001adf <mem_set>
c000509d:	83 e6 20             	and    esi,0x20
c00050a0:	75 07                	jne    c00050a9 <f_open+0x32e>
c00050a2:	31 ed                	xor    ebp,ebp
c00050a4:	e9 eb 00 00 00       	jmp    c0005194 <f_open+0x419>
c00050a9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ac:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050bb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050bf:	74 e1                	je     c00050a2 <f_open+0x327>
c00050c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050da:	31 ff                	xor    edi,edi
c00050dc:	c1 e5 09             	shl    ebp,0x9
c00050df:	89 ee                	mov    esi,ebp
c00050e1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e5:	89 f8                	mov    eax,edi
c00050e7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050eb:	73 22                	jae    c000510f <f_open+0x394>
c00050ed:	89 d8                	mov    eax,ebx
c00050ef:	e8 bd dc ff ff       	call   c0002db1 <get_fat>
c00050f4:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f8:	89 c2                	mov    edx,eax
c00050fa:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fe:	83 f8 01             	cmp    eax,0x1
c0005101:	76 10                	jbe    c0005113 <f_open+0x398>
c0005103:	83 f8 ff             	cmp    eax,0xffffffff
c0005106:	75 d9                	jne    c00050e1 <f_open+0x366>
c0005108:	bd 01 00 00 00       	mov    ebp,0x1
c000510d:	eb 09                	jmp    c0005118 <f_open+0x39d>
c000510f:	31 ed                	xor    ebp,ebp
c0005111:	eb 05                	jmp    c0005118 <f_open+0x39d>
c0005113:	bd 02 00 00 00       	mov    ebp,0x2
c0005118:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511b:	85 ed                	test   ebp,ebp
c000511d:	75 75                	jne    c0005194 <f_open+0x419>
c000511f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005123:	25 ff 01 00 00       	and    eax,0x1ff
c0005128:	0f 84 74 ff ff ff    	je     c00050a2 <f_open+0x327>
c000512e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005132:	bd 02 00 00 00       	mov    ebp,0x2
c0005137:	89 c8                	mov    eax,ecx
c0005139:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513d:	e8 a2 cb ff ff       	call   c0001ce4 <clst2sect>
c0005142:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005146:	89 d7                	mov    edi,edx
c0005148:	09 c7                	or     edi,eax
c000514a:	74 48                	je     c0005194 <f_open+0x419>
c000514c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005150:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005154:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005160:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005164:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005168:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516f:	83 ec 0c             	sub    esp,0xc
c0005172:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005175:	6a 01                	push   0x1
c0005177:	52                   	push   edx
c0005178:	50                   	push   eax
c0005179:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005181:	50                   	push   eax
c0005182:	e8 79 c8 ff ff       	call   c0001a00 <disk_read>
c0005187:	83 c4 20             	add    esp,0x20
c000518a:	85 c0                	test   eax,eax
c000518c:	0f 95 c0             	setne  al
c000518f:	0f b6 c0             	movzx  eax,al
c0005192:	89 c5                	mov    ebp,eax
c0005194:	83 ec 0c             	sub    esp,0xc
c0005197:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519b:	e8 f4 30 00 00       	call   c0008294 <ff_memfree>
c00051a0:	83 c4 10             	add    esp,0x10
c00051a3:	85 ed                	test   ebp,ebp
c00051a5:	74 06                	je     c00051ad <f_open+0x432>
c00051a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ad:	83 c4 7c             	add    esp,0x7c
c00051b0:	89 e8                	mov    eax,ebp
c00051b2:	5b                   	pop    ebx
c00051b3:	5e                   	pop    esi
c00051b4:	5f                   	pop    edi
c00051b5:	5d                   	pop    ebp
c00051b6:	c3                   	ret    

c00051b7 <f_read>:
c00051b7:	55                   	push   ebp
c00051b8:	57                   	push   edi
c00051b9:	56                   	push   esi
c00051ba:	53                   	push   ebx
c00051bb:	83 ec 2c             	sub    esp,0x2c
c00051be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d0:	89 d8                	mov    eax,ebx
c00051d2:	e8 77 cf ff ff       	call   c000214e <validate>
c00051d7:	89 c5                	mov    ebp,eax
c00051d9:	85 c0                	test   eax,eax
c00051db:	0f 85 4c 02 00 00    	jne    c000542d <f_read+0x276>
c00051e1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e5:	85 ed                	test   ebp,ebp
c00051e7:	0f 85 40 02 00 00    	jne    c000542d <f_read+0x276>
c00051ed:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f1:	0f 84 31 02 00 00    	je     c0005428 <f_read+0x271>
c00051f7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051fa:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fd:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005200:	bf 00 00 00 00       	mov    edi,0x0
c0005205:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005208:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520c:	89 d1                	mov    ecx,edx
c000520e:	19 f9                	sbb    ecx,edi
c0005210:	0f 83 cf 00 00 00    	jae    c00052e5 <f_read+0x12e>
c0005216:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000521a:	e9 c6 00 00 00       	jmp    c00052e5 <f_read+0x12e>
c000521f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005222:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005225:	89 d0                	mov    eax,edx
c0005227:	25 ff 01 00 00       	and    eax,0x1ff
c000522c:	0f 85 c9 01 00 00    	jne    c00053fb <f_read+0x244>
c0005232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005236:	89 d6                	mov    esi,edx
c0005238:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523c:	89 cf                	mov    edi,ecx
c000523e:	48                   	dec    eax
c000523f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005243:	21 f0                	and    eax,esi
c0005245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005249:	0f 84 a6 00 00 00    	je     c00052f5 <f_read+0x13e>
c000524f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005253:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005256:	89 c8                	mov    eax,ecx
c0005258:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525b:	e8 84 ca ff ff       	call   c0001ce4 <clst2sect>
c0005260:	89 d7                	mov    edi,edx
c0005262:	09 c7                	or     edi,eax
c0005264:	0f 84 b4 00 00 00    	je     c000531e <f_read+0x167>
c000526a:	31 ff                	xor    edi,edi
c000526c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005270:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005273:	01 c6                	add    esi,eax
c0005275:	11 d7                	adc    edi,edx
c0005277:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527f:	0f 86 fd 00 00 00    	jbe    c0005382 <f_read+0x1cb>
c0005285:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005289:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528d:	c1 e8 09             	shr    eax,0x9
c0005290:	89 04 24             	mov    DWORD PTR [esp],eax
c0005293:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005297:	03 14 24             	add    edx,DWORD PTR [esp]
c000529a:	39 c2                	cmp    edx,eax
c000529c:	76 07                	jbe    c00052a5 <f_read+0xee>
c000529e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a5:	83 ec 0c             	sub    esp,0xc
c00052a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ac:	57                   	push   edi
c00052ad:	56                   	push   esi
c00052ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b6:	50                   	push   eax
c00052b7:	e8 44 c7 ff ff       	call   c0001a00 <disk_read>
c00052bc:	83 c4 20             	add    esp,0x20
c00052bf:	85 c0                	test   eax,eax
c00052c1:	75 6e                	jne    c0005331 <f_read+0x17a>
c00052c3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c7:	78 7e                	js     c0005347 <f_read+0x190>
c00052c9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cc:	c1 e6 09             	shl    esi,0x9
c00052cf:	31 ff                	xor    edi,edi
c00052d1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dd:	01 30                	add    DWORD PTR [eax],esi
c00052df:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052ea:	0f 85 2f ff ff ff    	jne    c000521f <f_read+0x68>
c00052f0:	e9 38 01 00 00       	jmp    c000542d <f_read+0x276>
c00052f5:	89 c8                	mov    eax,ecx
c00052f7:	09 d0                	or     eax,edx
c00052f9:	75 05                	jne    c0005300 <f_read+0x149>
c00052fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fe:	eb 19                	jmp    c0005319 <f_read+0x162>
c0005300:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005304:	74 09                	je     c000530f <f_read+0x158>
c0005306:	89 d8                	mov    eax,ebx
c0005308:	e8 f8 c9 ff ff       	call   c0001d05 <clmt_clust>
c000530d:	eb 0a                	jmp    c0005319 <f_read+0x162>
c000530f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005312:	89 d8                	mov    eax,ebx
c0005314:	e8 98 da ff ff       	call   c0002db1 <get_fat>
c0005319:	83 f8 01             	cmp    eax,0x1
c000531c:	77 0e                	ja     c000532c <f_read+0x175>
c000531e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005322:	bd 02 00 00 00       	mov    ebp,0x2
c0005327:	e9 01 01 00 00       	jmp    c000542d <f_read+0x276>
c000532c:	83 f8 ff             	cmp    eax,0xffffffff
c000532f:	75 0e                	jne    c000533f <f_read+0x188>
c0005331:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005335:	bd 01 00 00 00       	mov    ebp,0x1
c000533a:	e9 ee 00 00 00       	jmp    c000542d <f_read+0x276>
c000533f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005342:	e9 08 ff ff ff       	jmp    c000524f <f_read+0x98>
c0005347:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534d:	29 f0                	sub    eax,esi
c000534f:	19 fa                	sbb    edx,edi
c0005351:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005354:	89 d7                	mov    edi,edx
c0005356:	ba 00 00 00 00       	mov    edx,0x0
c000535b:	89 f9                	mov    ecx,edi
c000535d:	19 d1                	sbb    ecx,edx
c000535f:	0f 83 64 ff ff ff    	jae    c00052c9 <f_read+0x112>
c0005365:	89 c7                	mov    edi,eax
c0005367:	8d 53 50             	lea    edx,[ebx+0x50]
c000536a:	c1 e7 09             	shl    edi,0x9
c000536d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005371:	b9 00 02 00 00       	mov    ecx,0x200
c0005376:	01 f8                	add    eax,edi
c0005378:	e8 4d c7 ff ff       	call   c0001aca <mem_cpy>
c000537d:	e9 47 ff ff ff       	jmp    c00052c9 <f_read+0x112>
c0005382:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005385:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005388:	89 04 24             	mov    DWORD PTR [esp],eax
c000538b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005393:	75 05                	jne    c000539a <f_read+0x1e3>
c0005395:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005398:	74 5b                	je     c00053f5 <f_read+0x23e>
c000539a:	8d 43 50             	lea    eax,[ebx+0x50]
c000539d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a5:	79 2a                	jns    c00053d1 <f_read+0x21a>
c00053a7:	83 ec 0c             	sub    esp,0xc
c00053aa:	6a 01                	push   0x1
c00053ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bc:	50                   	push   eax
c00053bd:	e8 54 c6 ff ff       	call   c0001a16 <disk_write>
c00053c2:	83 c4 20             	add    esp,0x20
c00053c5:	85 c0                	test   eax,eax
c00053c7:	0f 85 64 ff ff ff    	jne    c0005331 <f_read+0x17a>
c00053cd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d1:	83 ec 0c             	sub    esp,0xc
c00053d4:	6a 01                	push   0x1
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053e0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e4:	50                   	push   eax
c00053e5:	e8 16 c6 ff ff       	call   c0001a00 <disk_read>
c00053ea:	83 c4 20             	add    esp,0x20
c00053ed:	85 c0                	test   eax,eax
c00053ef:	0f 85 3c ff ff ff    	jne    c0005331 <f_read+0x17a>
c00053f5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fe:	ba 00 02 00 00       	mov    edx,0x200
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540c:	29 c2                	sub    edx,eax
c000540e:	39 d6                	cmp    esi,edx
c0005410:	76 02                	jbe    c0005414 <f_read+0x25d>
c0005412:	89 d6                	mov    esi,edx
c0005414:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005418:	89 f1                	mov    ecx,esi
c000541a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541e:	e8 a7 c6 ff ff       	call   c0001aca <mem_cpy>
c0005423:	e9 a7 fe ff ff       	jmp    c00052cf <f_read+0x118>
c0005428:	bd 07 00 00 00       	mov    ebp,0x7
c000542d:	83 c4 2c             	add    esp,0x2c
c0005430:	89 e8                	mov    eax,ebp
c0005432:	5b                   	pop    ebx
c0005433:	5e                   	pop    esi
c0005434:	5f                   	pop    edi
c0005435:	5d                   	pop    ebp
c0005436:	c3                   	ret    

c0005437 <f_write>:
c0005437:	55                   	push   ebp
c0005438:	57                   	push   edi
c0005439:	56                   	push   esi
c000543a:	53                   	push   ebx
c000543b:	83 ec 2c             	sub    esp,0x2c
c000543e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005442:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005446:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005450:	89 d8                	mov    eax,ebx
c0005452:	e8 f7 cc ff ff       	call   c000214e <validate>
c0005457:	89 c5                	mov    ebp,eax
c0005459:	85 c0                	test   eax,eax
c000545b:	0f 85 86 02 00 00    	jne    c00056e7 <f_write+0x2b0>
c0005461:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005465:	85 ed                	test   ebp,ebp
c0005467:	0f 85 7a 02 00 00    	jne    c00056e7 <f_write+0x2b0>
c000546d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005471:	0f 84 6b 02 00 00    	je     c00056e2 <f_write+0x2ab>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547e:	0f 84 43 01 00 00    	je     c00055c7 <f_write+0x190>
c0005484:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005487:	89 c1                	mov    ecx,eax
c0005489:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548d:	0f 83 34 01 00 00    	jae    c00055c7 <f_write+0x190>
c0005493:	f7 d0                	not    eax
c0005495:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005499:	e9 29 01 00 00       	jmp    c00055c7 <f_write+0x190>
c000549e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a4:	89 d0                	mov    eax,edx
c00054a6:	25 ff 01 00 00       	and    eax,0x1ff
c00054ab:	0f 85 00 02 00 00    	jne    c00056b1 <f_write+0x27a>
c00054b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b5:	89 d6                	mov    esi,edx
c00054b7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054bb:	89 cf                	mov    edi,ecx
c00054bd:	48                   	dec    eax
c00054be:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c2:	21 f0                	and    eax,esi
c00054c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c8:	0f 84 06 01 00 00    	je     c00055d4 <f_write+0x19d>
c00054ce:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d2:	0f 88 6e 01 00 00    	js     c0005646 <f_write+0x20f>
c00054d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054df:	89 c8                	mov    eax,ecx
c00054e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e5:	e8 fa c7 ff ff       	call   c0001ce4 <clst2sect>
c00054ea:	89 d1                	mov    ecx,edx
c00054ec:	09 c1                	or     ecx,eax
c00054ee:	0f 84 1c 01 00 00    	je     c0005610 <f_write+0x1d9>
c00054f4:	31 ff                	xor    edi,edi
c00054f6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fe:	01 c6                	add    esi,eax
c0005500:	11 d7                	adc    edi,edx
c0005502:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000550a:	0f 86 63 01 00 00    	jbe    c0005673 <f_write+0x23c>
c0005510:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005514:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005518:	c1 e8 09             	shr    eax,0x9
c000551b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005523:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005527:	39 c2                	cmp    edx,eax
c0005529:	76 08                	jbe    c0005533 <f_write+0xfc>
c000552b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005533:	83 ec 0c             	sub    esp,0xc
c0005536:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000553a:	57                   	push   edi
c000553b:	56                   	push   esi
c000553c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005540:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005544:	50                   	push   eax
c0005545:	e8 cc c4 ff ff       	call   c0001a16 <disk_write>
c000554a:	83 c4 20             	add    esp,0x20
c000554d:	85 c0                	test   eax,eax
c000554f:	0f 85 ce 00 00 00    	jne    c0005623 <f_write+0x1ec>
c0005555:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005558:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555b:	29 f0                	sub    eax,esi
c000555d:	19 fa                	sbb    edx,edi
c000555f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005563:	89 d7                	mov    edi,edx
c0005565:	ba 00 00 00 00       	mov    edx,0x0
c000556a:	89 f9                	mov    ecx,edi
c000556c:	19 d1                	sbb    ecx,edx
c000556e:	73 1c                	jae    c000558c <f_write+0x155>
c0005570:	89 c7                	mov    edi,eax
c0005572:	b9 00 02 00 00       	mov    ecx,0x200
c0005577:	c1 e7 09             	shl    edi,0x9
c000557a:	8d 43 50             	lea    eax,[ebx+0x50]
c000557d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005581:	89 fa                	mov    edx,edi
c0005583:	e8 42 c5 ff ff       	call   c0001aca <mem_cpy>
c0005588:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005590:	c1 e6 09             	shl    esi,0x9
c0005593:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005597:	31 ff                	xor    edi,edi
c0005599:	01 30                	add    DWORD PTR [eax],esi
c000559b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ac:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055af:	89 c1                	mov    ecx,eax
c00055b1:	39 f2                	cmp    edx,esi
c00055b3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b9:	19 f9                	sbb    ecx,edi
c00055bb:	73 04                	jae    c00055c1 <f_write+0x18a>
c00055bd:	89 f2                	mov    edx,esi
c00055bf:	89 f8                	mov    eax,edi
c00055c1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cc:	0f 85 cc fe ff ff    	jne    c000549e <f_write+0x67>
c00055d2:	eb 2e                	jmp    c0005602 <f_write+0x1cb>
c00055d4:	89 c8                	mov    eax,ecx
c00055d6:	09 d0                	or     eax,edx
c00055d8:	75 0b                	jne    c00055e5 <f_write+0x1ae>
c00055da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dd:	31 d2                	xor    edx,edx
c00055df:	85 c0                	test   eax,eax
c00055e1:	75 28                	jne    c000560b <f_write+0x1d4>
c00055e3:	eb 12                	jmp    c00055f7 <f_write+0x1c0>
c00055e5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e9:	74 09                	je     c00055f4 <f_write+0x1bd>
c00055eb:	89 d8                	mov    eax,ebx
c00055ed:	e8 13 c7 ff ff       	call   c0001d05 <clmt_clust>
c00055f2:	eb 0a                	jmp    c00055fe <f_write+0x1c7>
c00055f4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f7:	89 d8                	mov    eax,ebx
c00055f9:	e8 a1 da ff ff       	call   c000309f <create_chain>
c00055fe:	85 c0                	test   eax,eax
c0005600:	75 09                	jne    c000560b <f_write+0x1d4>
c0005602:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005606:	e9 dc 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c000560b:	83 f8 01             	cmp    eax,0x1
c000560e:	75 0e                	jne    c000561e <f_write+0x1e7>
c0005610:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005614:	bd 02 00 00 00       	mov    ebp,0x2
c0005619:	e9 c9 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c000561e:	83 f8 ff             	cmp    eax,0xffffffff
c0005621:	75 0e                	jne    c0005631 <f_write+0x1fa>
c0005623:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005627:	bd 01 00 00 00       	mov    ebp,0x1
c000562c:	e9 b6 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c0005631:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005634:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005638:	0f 85 90 fe ff ff    	jne    c00054ce <f_write+0x97>
c000563e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005641:	e9 88 fe ff ff       	jmp    c00054ce <f_write+0x97>
c0005646:	83 ec 0c             	sub    esp,0xc
c0005649:	8d 43 50             	lea    eax,[ebx+0x50]
c000564c:	6a 01                	push   0x1
c000564e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005651:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005654:	50                   	push   eax
c0005655:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005659:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565d:	50                   	push   eax
c000565e:	e8 b3 c3 ff ff       	call   c0001a16 <disk_write>
c0005663:	83 c4 20             	add    esp,0x20
c0005666:	85 c0                	test   eax,eax
c0005668:	75 b9                	jne    c0005623 <f_write+0x1ec>
c000566a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566e:	e9 65 fe ff ff       	jmp    c00054d8 <f_write+0xa1>
c0005673:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005676:	75 05                	jne    c000567d <f_write+0x246>
c0005678:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567b:	74 2e                	je     c00056ab <f_write+0x274>
c000567d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005680:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005683:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005686:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005689:	73 20                	jae    c00056ab <f_write+0x274>
c000568b:	83 ec 0c             	sub    esp,0xc
c000568e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005691:	6a 01                	push   0x1
c0005693:	57                   	push   edi
c0005694:	56                   	push   esi
c0005695:	50                   	push   eax
c0005696:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000569a:	50                   	push   eax
c000569b:	e8 60 c3 ff ff       	call   c0001a00 <disk_read>
c00056a0:	83 c4 20             	add    esp,0x20
c00056a3:	85 c0                	test   eax,eax
c00056a5:	0f 85 78 ff ff ff    	jne    c0005623 <f_write+0x1ec>
c00056ab:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ae:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b4:	ba 00 02 00 00       	mov    edx,0x200
c00056b9:	25 ff 01 00 00       	and    eax,0x1ff
c00056be:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c2:	29 c2                	sub    edx,eax
c00056c4:	39 d6                	cmp    esi,edx
c00056c6:	76 02                	jbe    c00056ca <f_write+0x293>
c00056c8:	89 d6                	mov    esi,edx
c00056ca:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ce:	89 f1                	mov    ecx,esi
c00056d0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d4:	e8 f1 c3 ff ff       	call   c0001aca <mem_cpy>
c00056d9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dd:	e9 b1 fe ff ff       	jmp    c0005593 <f_write+0x15c>
c00056e2:	bd 07 00 00 00       	mov    ebp,0x7
c00056e7:	83 c4 2c             	add    esp,0x2c
c00056ea:	89 e8                	mov    eax,ebp
c00056ec:	5b                   	pop    ebx
c00056ed:	5e                   	pop    esi
c00056ee:	5f                   	pop    edi
c00056ef:	5d                   	pop    ebp
c00056f0:	c3                   	ret    

c00056f1 <f_sync>:
c00056f1:	56                   	push   esi
c00056f2:	53                   	push   ebx
c00056f3:	83 ec 64             	sub    esp,0x64
c00056f6:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056fa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fe:	89 d8                	mov    eax,ebx
c0005700:	e8 49 ca ff ff       	call   c000214e <validate>
c0005705:	85 c0                	test   eax,eax
c0005707:	0f 85 ba 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000570d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005710:	f6 c2 40             	test   dl,0x40
c0005713:	0f 84 ae 01 00 00    	je     c00058c7 <f_sync+0x1d6>
c0005719:	84 d2                	test   dl,dl
c000571b:	79 33                	jns    c0005750 <f_sync+0x5f>
c000571d:	83 ec 0c             	sub    esp,0xc
c0005720:	8d 43 50             	lea    eax,[ebx+0x50]
c0005723:	6a 01                	push   0x1
c0005725:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005728:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572b:	50                   	push   eax
c000572c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005730:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005734:	50                   	push   eax
c0005735:	e8 dc c2 ff ff       	call   c0001a16 <disk_write>
c000573a:	83 c4 20             	add    esp,0x20
c000573d:	89 c2                	mov    edx,eax
c000573f:	b8 01 00 00 00       	mov    eax,0x1
c0005744:	85 d2                	test   edx,edx
c0005746:	0f 85 7b 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000574c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005754:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005757:	0f 85 11 01 00 00    	jne    c000586e <f_sync+0x17d>
c000575d:	89 d8                	mov    eax,ebx
c000575f:	e8 13 d6 ff ff       	call   c0002d77 <fill_first_frag>
c0005764:	85 c0                	test   eax,eax
c0005766:	0f 85 5b 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000576c:	83 c9 ff             	or     ecx,0xffffffff
c000576f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005772:	89 d8                	mov    eax,ebx
c0005774:	e8 c9 d5 ff ff       	call   c0002d42 <fill_last_frag>
c0005779:	85 c0                	test   eax,eax
c000577b:	0f 85 46 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c0005781:	83 ec 0c             	sub    esp,0xc
c0005784:	68 60 04 00 00       	push   0x460
c0005789:	e8 f0 2a 00 00       	call   c000827e <ff_memalloc>
c000578e:	83 c4 10             	add    esp,0x10
c0005791:	89 c6                	mov    esi,eax
c0005793:	b8 11 00 00 00       	mov    eax,0x11
c0005798:	85 f6                	test   esi,esi
c000579a:	0f 84 27 01 00 00    	je     c00058c7 <f_sync+0x1d6>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057aa:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ad:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057b0:	89 da                	mov    edx,ebx
c00057b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b6:	e8 af df ff ff       	call   c000376a <load_obj_xdir>
c00057bb:	85 c0                	test   eax,eax
c00057bd:	0f 85 95 00 00 00    	jne    c0005858 <f_sync+0x167>
c00057c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ca:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ce:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d4:	83 ca 01             	or     edx,0x1
c00057d7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e0:	83 c0 34             	add    eax,0x34
c00057e3:	e8 d9 c2 ff ff       	call   c0001ac1 <st_dword>
c00057e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f5:	83 c0 38             	add    eax,0x38
c00057f8:	e8 c7 c2 ff ff       	call   c0001ac4 <st_qword>
c00057fd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005804:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005807:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000580a:	83 c0 28             	add    eax,0x28
c000580d:	e8 b2 c2 ff ff       	call   c0001ac4 <st_qword>
c0005812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005816:	ba 00 00 21 50       	mov    edx,0x50210000
c000581b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581e:	83 c0 0c             	add    eax,0xc
c0005821:	e8 9b c2 ff ff       	call   c0001ac1 <st_dword>
c0005826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000582a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005831:	31 d2                	xor    edx,edx
c0005833:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005836:	83 c0 10             	add    eax,0x10
c0005839:	e8 83 c2 ff ff       	call   c0001ac1 <st_dword>
c000583e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005842:	e8 62 e1 ff ff       	call   c00039a9 <store_xdir>
c0005847:	85 c0                	test   eax,eax
c0005849:	75 0d                	jne    c0005858 <f_sync+0x167>
c000584b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584f:	e8 00 eb ff ff       	call   c0004354 <sync_fs>
c0005854:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	56                   	push   esi
c0005860:	e8 2f 2a 00 00       	call   c0008294 <ff_memfree>
c0005865:	83 c4 10             	add    esp,0x10
c0005868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586c:	eb 59                	jmp    c00058c7 <f_sync+0x1d6>
c000586e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005871:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005874:	e8 b0 c9 ff ff       	call   c0002229 <move_window>
c0005879:	85 c0                	test   eax,eax
c000587b:	75 4a                	jne    c00058c7 <f_sync+0x1d6>
c000587d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005880:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005884:	89 f2                	mov    edx,esi
c0005886:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005889:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588b:	e8 5f f3 ff ff       	call   c0004bef <st_clust.isra.1>
c0005890:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005893:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005896:	e8 26 c2 ff ff       	call   c0001ac1 <st_dword>
c000589b:	8d 46 16             	lea    eax,[esi+0x16]
c000589e:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a3:	e8 19 c2 ff ff       	call   c0001ac1 <st_dword>
c00058a8:	8d 46 12             	lea    eax,[esi+0x12]
c00058ab:	31 d2                	xor    edx,edx
c00058ad:	e8 0b c2 ff ff       	call   c0001abd <st_word>
c00058b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058be:	e8 91 ea ff ff       	call   c0004354 <sync_fs>
c00058c3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c7:	83 c4 64             	add    esp,0x64
c00058ca:	5b                   	pop    ebx
c00058cb:	5e                   	pop    esi
c00058cc:	c3                   	ret    

c00058cd <f_close>:
c00058cd:	53                   	push   ebx
c00058ce:	83 ec 24             	sub    esp,0x24
c00058d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d5:	53                   	push   ebx
c00058d6:	e8 16 fe ff ff       	call   c00056f1 <f_sync>
c00058db:	83 c4 10             	add    esp,0x10
c00058de:	85 c0                	test   eax,eax
c00058e0:	75 15                	jne    c00058f7 <f_close+0x2a>
c00058e2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e6:	89 d8                	mov    eax,ebx
c00058e8:	e8 61 c8 ff ff       	call   c000214e <validate>
c00058ed:	85 c0                	test   eax,eax
c00058ef:	75 06                	jne    c00058f7 <f_close+0x2a>
c00058f1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f7:	83 c4 18             	add    esp,0x18
c00058fa:	5b                   	pop    ebx
c00058fb:	c3                   	ret    

c00058fc <f_lseek>:
c00058fc:	55                   	push   ebp
c00058fd:	57                   	push   edi
c00058fe:	56                   	push   esi
c00058ff:	53                   	push   ebx
c0005900:	83 ec 3c             	sub    esp,0x3c
c0005903:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005907:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005912:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005916:	89 d8                	mov    eax,ebx
c0005918:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591c:	e8 2d c8 ff ff       	call   c000214e <validate>
c0005921:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005925:	85 c0                	test   eax,eax
c0005927:	0f 85 7a 04 00 00    	jne    c0005da7 <f_lseek+0x4ab>
c000592d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005931:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005935:	85 c0                	test   eax,eax
c0005937:	0f 85 6a 04 00 00    	jne    c0005da7 <f_lseek+0x4ab>
c000593d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005941:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005944:	74 0c                	je     c0005952 <f_lseek+0x56>
c0005946:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005949:	85 c0                	test   eax,eax
c000594b:	75 1f                	jne    c000596c <f_lseek+0x70>
c000594d:	e9 b5 01 00 00       	jmp    c0005b07 <f_lseek+0x20b>
c0005952:	83 c9 ff             	or     ecx,0xffffffff
c0005955:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005958:	89 d8                	mov    eax,ebx
c000595a:	e8 e3 d3 ff ff       	call   c0002d42 <fill_last_frag>
c000595f:	85 c0                	test   eax,eax
c0005961:	74 e3                	je     c0005946 <f_lseek+0x4a>
c0005963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005967:	e9 3b 04 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c000596c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005971:	0f 85 ac 00 00 00    	jne    c0005a23 <f_lseek+0x127>
c0005977:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597b:	0f 85 a2 00 00 00    	jne    c0005a23 <f_lseek+0x127>
c0005981:	8d 78 04             	lea    edi,[eax+0x4]
c0005984:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005987:	8b 00                	mov    eax,DWORD PTR [eax]
c0005989:	be 02 00 00 00       	mov    esi,0x2
c000598e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005992:	85 ed                	test   ebp,ebp
c0005994:	74 73                	je     c0005a09 <f_lseek+0x10d>
c0005996:	89 e9                	mov    ecx,ebp
c0005998:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599f:	ff 04 24             	inc    DWORD PTR [esp]
c00059a2:	89 ca                	mov    edx,ecx
c00059a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a8:	89 d8                	mov    eax,ebx
c00059aa:	e8 02 d4 ff ff       	call   c0002db1 <get_fat>
c00059af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b3:	83 f8 01             	cmp    eax,0x1
c00059b6:	77 11                	ja     c00059c9 <f_lseek+0xcd>
c00059b8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c4:	e9 de 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c00059c9:	83 f8 ff             	cmp    eax,0xffffffff
c00059cc:	75 11                	jne    c00059df <f_lseek+0xe3>
c00059ce:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059da:	e9 c8 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c00059df:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e2:	89 c1                	mov    ecx,eax
c00059e4:	39 c2                	cmp    edx,eax
c00059e6:	74 b7                	je     c000599f <f_lseek+0xa3>
c00059e8:	83 c6 02             	add    esi,0x2
c00059eb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ef:	72 0b                	jb     c00059fc <f_lseek+0x100>
c00059f1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f4:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f7:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f9:	83 c7 08             	add    edi,0x8
c00059fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a00:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a03:	76 04                	jbe    c0005a09 <f_lseek+0x10d>
c0005a05:	89 c5                	mov    ebp,eax
c0005a07:	eb 8d                	jmp    c0005996 <f_lseek+0x9a>
c0005a09:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a10:	89 30                	mov    DWORD PTR [eax],esi
c0005a12:	0f 87 87 03 00 00    	ja     c0005d9f <f_lseek+0x4a3>
c0005a18:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1e:	e9 84 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c0005a23:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a26:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a35:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a40:	73 0f                	jae    c0005a51 <f_lseek+0x155>
c0005a42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a59:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a63:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a67:	0f 84 3a 03 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005a6d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a71:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a75:	83 c6 ff             	add    esi,0xffffffff
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	83 d7 ff             	adc    edi,0xffffffff
c0005a7d:	89 f2                	mov    edx,esi
c0005a7f:	89 f9                	mov    ecx,edi
c0005a81:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a85:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a88:	e8 78 c2 ff ff       	call   c0001d05 <clmt_clust>
c0005a8d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a91:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a94:	89 c2                	mov    edx,eax
c0005a96:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a9a:	89 c8                	mov    eax,ecx
c0005a9c:	e8 43 c2 ff ff       	call   c0001ce4 <clst2sect>
c0005aa1:	89 d7                	mov    edi,edx
c0005aa3:	09 c7                	or     edi,eax
c0005aa5:	0f 84 0d ff ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005aab:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aaf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab5:	0f 84 ec 02 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005aca:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ace:	4d                   	dec    ebp
c0005acf:	31 ff                	xor    edi,edi
c0005ad1:	21 ee                	and    esi,ebp
c0005ad3:	01 c6                	add    esi,eax
c0005ad5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad8:	11 d7                	adc    edi,edx
c0005ada:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005add:	39 fa                	cmp    edx,edi
c0005adf:	75 08                	jne    c0005ae9 <f_lseek+0x1ed>
c0005ae1:	39 f0                	cmp    eax,esi
c0005ae3:	0f 84 be 02 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005ae9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005af0:	0f 89 80 02 00 00    	jns    c0005d76 <f_lseek+0x47a>
c0005af6:	83 ec 0c             	sub    esp,0xc
c0005af9:	6a 01                	push   0x1
c0005afb:	52                   	push   edx
c0005afc:	50                   	push   eax
c0005afd:	55                   	push   ebp
c0005afe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b02:	e9 5a 02 00 00       	jmp    c0005d61 <f_lseek+0x465>
c0005b07:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0e:	74 16                	je     c0005b26 <f_lseek+0x22a>
c0005b10:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b15:	76 0f                	jbe    c0005b26 <f_lseek+0x22a>
c0005b17:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b26:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b29:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2f:	89 c7                	mov    edi,eax
c0005b31:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b35:	73 0d                	jae    c0005b44 <f_lseek+0x248>
c0005b37:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3b:	75 07                	jne    c0005b44 <f_lseek+0x248>
c0005b3d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b44:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b47:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b55:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5f:	75 09                	jne    c0005b6a <f_lseek+0x26e>
c0005b61:	31 f6                	xor    esi,esi
c0005b63:	31 ff                	xor    edi,edi
c0005b65:	e9 af 01 00 00       	jmp    c0005d19 <f_lseek+0x41d>
c0005b6a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6e:	89 d7                	mov    edi,edx
c0005b70:	c1 e1 09             	shl    ecx,0x9
c0005b73:	09 c7                	or     edi,eax
c0005b75:	89 cd                	mov    ebp,ecx
c0005b77:	74 6d                	je     c0005be6 <f_lseek+0x2ea>
c0005b79:	83 c0 ff             	add    eax,0xffffffff
c0005b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b80:	83 d2 ff             	adc    edx,0xffffffff
c0005b83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b8a:	83 c0 ff             	add    eax,0xffffffff
c0005b8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b91:	83 d2 ff             	adc    edx,0xffffffff
c0005b94:	31 ff                	xor    edi,edi
c0005b96:	57                   	push   edi
c0005b97:	51                   	push   ecx
c0005b98:	52                   	push   edx
c0005b99:	50                   	push   eax
c0005b9a:	e8 bd d7 01 00       	call   c002335c <__udivdi3>
c0005b9f:	83 c4 10             	add    esp,0x10
c0005ba2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005baa:	57                   	push   edi
c0005bab:	55                   	push   ebp
c0005bac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb4:	e8 a3 d7 01 00       	call   c002335c <__udivdi3>
c0005bb9:	83 c4 10             	add    esp,0x10
c0005bbc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bc0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc4:	19 d1                	sbb    ecx,edx
c0005bc6:	72 1e                	jb     c0005be6 <f_lseek+0x2ea>
c0005bc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcc:	89 e9                	mov    ecx,ebp
c0005bce:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd1:	f7 d9                	neg    ecx
c0005bd3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bda:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005be0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be4:	eb 28                	jmp    c0005c0e <f_lseek+0x312>
c0005be6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be9:	85 c0                	test   eax,eax
c0005beb:	75 1e                	jne    c0005c0b <f_lseek+0x30f>
c0005bed:	31 d2                	xor    edx,edx
c0005bef:	89 d8                	mov    eax,ebx
c0005bf1:	e8 a9 d4 ff ff       	call   c000309f <create_chain>
c0005bf6:	83 f8 01             	cmp    eax,0x1
c0005bf9:	0f 84 b9 fd ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005bff:	83 f8 ff             	cmp    eax,0xffffffff
c0005c02:	0f 84 c6 fd ff ff    	je     c00059ce <f_lseek+0xd2>
c0005c08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0e:	85 c0                	test   eax,eax
c0005c10:	0f 84 4b ff ff ff    	je     c0005b61 <f_lseek+0x265>
c0005c16:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c1a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c22:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c25:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c29:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c33:	0f 83 9d 00 00 00    	jae    c0005cd6 <f_lseek+0x3da>
c0005c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c41:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c44:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c48:	01 f2                	add    edx,esi
c0005c4a:	11 f9                	adc    ecx,edi
c0005c4c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c54:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c57:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c5a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5d:	f6 c1 02             	test   cl,0x2
c0005c60:	74 35                	je     c0005c97 <f_lseek+0x39b>
c0005c62:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c66:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c69:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c70:	73 16                	jae    c0005c88 <f_lseek+0x38c>
c0005c72:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c76:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c7a:	88 ca                	mov    dl,cl
c0005c7c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7f:	83 ca 40             	or     edx,0x40
c0005c82:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c85:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c88:	89 c2                	mov    edx,eax
c0005c8a:	89 d8                	mov    eax,ebx
c0005c8c:	e8 0e d4 ff ff       	call   c000309f <create_chain>
c0005c91:	85 c0                	test   eax,eax
c0005c93:	75 0b                	jne    c0005ca0 <f_lseek+0x3a4>
c0005c95:	eb 30                	jmp    c0005cc7 <f_lseek+0x3cb>
c0005c97:	89 c2                	mov    edx,eax
c0005c99:	89 d8                	mov    eax,ebx
c0005c9b:	e8 11 d1 ff ff       	call   c0002db1 <get_fat>
c0005ca0:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca3:	0f 84 25 fd ff ff    	je     c00059ce <f_lseek+0xd2>
c0005ca9:	83 f8 01             	cmp    eax,0x1
c0005cac:	0f 86 06 fd ff ff    	jbe    c00059b8 <f_lseek+0xbc>
c0005cb2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb9:	0f 86 f9 fc ff ff    	jbe    c00059b8 <f_lseek+0xbc>
c0005cbf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc2:	e9 5b ff ff ff       	jmp    c0005c22 <f_lseek+0x326>
c0005cc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ce0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cec:	0f 84 6f fe ff ff    	je     c0005b61 <f_lseek+0x265>
c0005cf2:	89 c2                	mov    edx,eax
c0005cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf8:	e8 e7 bf ff ff       	call   c0001ce4 <clst2sect>
c0005cfd:	89 d7                	mov    edi,edx
c0005cff:	09 c7                	or     edi,eax
c0005d01:	0f 84 b1 fc ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005d07:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d12:	c1 ef 09             	shr    edi,0x9
c0005d15:	01 c6                	add    esi,eax
c0005d17:	11 d7                	adc    edi,edx
c0005d19:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d22:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d25:	19 d1                	sbb    ecx,edx
c0005d27:	73 0a                	jae    c0005d33 <f_lseek+0x437>
c0005d29:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d33:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d38:	74 6d                	je     c0005da7 <f_lseek+0x4ab>
c0005d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d40:	39 fa                	cmp    edx,edi
c0005d42:	75 04                	jne    c0005d48 <f_lseek+0x44c>
c0005d44:	39 f0                	cmp    eax,esi
c0005d46:	74 5f                	je     c0005da7 <f_lseek+0x4ab>
c0005d48:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4f:	79 25                	jns    c0005d76 <f_lseek+0x47a>
c0005d51:	83 ec 0c             	sub    esp,0xc
c0005d54:	6a 01                	push   0x1
c0005d56:	52                   	push   edx
c0005d57:	50                   	push   eax
c0005d58:	55                   	push   ebp
c0005d59:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d61:	50                   	push   eax
c0005d62:	e8 af bc ff ff       	call   c0001a16 <disk_write>
c0005d67:	83 c4 20             	add    esp,0x20
c0005d6a:	85 c0                	test   eax,eax
c0005d6c:	0f 85 5c fc ff ff    	jne    c00059ce <f_lseek+0xd2>
c0005d72:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d76:	83 ec 0c             	sub    esp,0xc
c0005d79:	6a 01                	push   0x1
c0005d7b:	57                   	push   edi
c0005d7c:	56                   	push   esi
c0005d7d:	55                   	push   ebp
c0005d7e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d82:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d86:	50                   	push   eax
c0005d87:	e8 74 bc ff ff       	call   c0001a00 <disk_read>
c0005d8c:	83 c4 20             	add    esp,0x20
c0005d8f:	85 c0                	test   eax,eax
c0005d91:	0f 85 37 fc ff ff    	jne    c00059ce <f_lseek+0xd2>
c0005d97:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d9a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9d:	eb 08                	jmp    c0005da7 <f_lseek+0x4ab>
c0005d9f:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dab:	83 c4 3c             	add    esp,0x3c
c0005dae:	5b                   	pop    ebx
c0005daf:	5e                   	pop    esi
c0005db0:	5f                   	pop    edi
c0005db1:	5d                   	pop    ebp
c0005db2:	c3                   	ret    

c0005db3 <f_opendir>:
c0005db3:	56                   	push   esi
c0005db4:	b8 09 00 00 00       	mov    eax,0x9
c0005db9:	53                   	push   ebx
c0005dba:	83 ec 24             	sub    esp,0x24
c0005dbd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc1:	85 db                	test   ebx,ebx
c0005dc3:	0f 84 e6 00 00 00    	je     c0005eaf <f_opendir+0xfc>
c0005dc9:	31 c9                	xor    ecx,ecx
c0005dcb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dcf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd3:	e8 03 c7 ff ff       	call   c00024db <mount_volume>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	0f 85 c9 00 00 00    	jne    c0005ea9 <f_opendir+0xf6>
c0005de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de4:	83 ec 0c             	sub    esp,0xc
c0005de7:	89 03                	mov    DWORD PTR [ebx],eax
c0005de9:	68 60 04 00 00       	push   0x460
c0005dee:	e8 8b 24 00 00       	call   c000827e <ff_memalloc>
c0005df3:	83 c4 10             	add    esp,0x10
c0005df6:	89 c6                	mov    esi,eax
c0005df8:	b8 11 00 00 00       	mov    eax,0x11
c0005dfd:	85 f6                	test   esi,esi
c0005dff:	0f 84 aa 00 00 00    	je     c0005eaf <f_opendir+0xfc>
c0005e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e09:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e12:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e19:	89 d8                	mov    eax,ebx
c0005e1b:	e8 31 ee ff ff       	call   c0004c51 <follow_path>
c0005e20:	85 c0                	test   eax,eax
c0005e22:	75 61                	jne    c0005e85 <f_opendir+0xd2>
c0005e24:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e28:	78 46                	js     c0005e70 <f_opendir+0xbd>
c0005e2a:	b8 05 00 00 00       	mov    eax,0x5
c0005e2f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e33:	74 50                	je     c0005e85 <f_opendir+0xd2>
c0005e35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e39:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3b:	3c 04                	cmp    al,0x4
c0005e3d:	75 26                	jne    c0005e65 <f_opendir+0xb2>
c0005e3f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e42:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e45:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e48:	30 d2                	xor    dl,dl
c0005e4a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4e:	09 c2                	or     edx,eax
c0005e50:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e53:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e56:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e59:	89 da                	mov    edx,ebx
c0005e5b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5e:	e8 b4 ed ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0005e63:	eb 0b                	jmp    c0005e70 <f_opendir+0xbd>
c0005e65:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e68:	e8 59 ed ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0005e6d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e74:	31 d2                	xor    edx,edx
c0005e76:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e7a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7e:	89 d8                	mov    eax,ebx
c0005e80:	e8 22 d1 ff ff       	call   c0002fa7 <dir_sdi>
c0005e85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e89:	83 ec 0c             	sub    esp,0xc
c0005e8c:	56                   	push   esi
c0005e8d:	e8 02 24 00 00       	call   c0008294 <ff_memfree>
c0005e92:	83 c4 10             	add    esp,0x10
c0005e95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e99:	83 f8 04             	cmp    eax,0x4
c0005e9c:	74 06                	je     c0005ea4 <f_opendir+0xf1>
c0005e9e:	85 c0                	test   eax,eax
c0005ea0:	74 0d                	je     c0005eaf <f_opendir+0xfc>
c0005ea2:	eb 05                	jmp    c0005ea9 <f_opendir+0xf6>
c0005ea4:	b8 05 00 00 00       	mov    eax,0x5
c0005ea9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eaf:	83 c4 24             	add    esp,0x24
c0005eb2:	5b                   	pop    ebx
c0005eb3:	5e                   	pop    esi
c0005eb4:	c3                   	ret    

c0005eb5 <f_closedir>:
c0005eb5:	53                   	push   ebx
c0005eb6:	83 ec 18             	sub    esp,0x18
c0005eb9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec1:	89 d8                	mov    eax,ebx
c0005ec3:	e8 86 c2 ff ff       	call   c000214e <validate>
c0005ec8:	85 c0                	test   eax,eax
c0005eca:	75 06                	jne    c0005ed2 <f_closedir+0x1d>
c0005ecc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed2:	83 c4 18             	add    esp,0x18
c0005ed5:	5b                   	pop    ebx
c0005ed6:	c3                   	ret    

c0005ed7 <f_readdir>:
c0005ed7:	57                   	push   edi
c0005ed8:	56                   	push   esi
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 20             	sub    esp,0x20
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee9:	89 d8                	mov    eax,ebx
c0005eeb:	e8 5e c2 ff ff       	call   c000214e <validate>
c0005ef0:	85 c0                	test   eax,eax
c0005ef2:	75 77                	jne    c0005f6b <f_readdir+0x94>
c0005ef4:	85 ff                	test   edi,edi
c0005ef6:	75 0b                	jne    c0005f03 <f_readdir+0x2c>
c0005ef8:	31 d2                	xor    edx,edx
c0005efa:	89 d8                	mov    eax,ebx
c0005efc:	e8 a6 d0 ff ff       	call   c0002fa7 <dir_sdi>
c0005f01:	eb 68                	jmp    c0005f6b <f_readdir+0x94>
c0005f03:	83 ec 0c             	sub    esp,0xc
c0005f06:	68 60 04 00 00       	push   0x460
c0005f0b:	e8 6e 23 00 00       	call   c000827e <ff_memalloc>
c0005f10:	83 c4 10             	add    esp,0x10
c0005f13:	89 c6                	mov    esi,eax
c0005f15:	b8 11 00 00 00       	mov    eax,0x11
c0005f1a:	85 f6                	test   esi,esi
c0005f1c:	74 4d                	je     c0005f6b <f_readdir+0x94>
c0005f1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f22:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f28:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2e:	31 d2                	xor    edx,edx
c0005f30:	89 d8                	mov    eax,ebx
c0005f32:	e8 80 d8 ff ff       	call   c00037b7 <dir_read>
c0005f37:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3c:	75 19                	jne    c0005f57 <f_readdir+0x80>
c0005f3e:	89 fa                	mov    edx,edi
c0005f40:	89 d8                	mov    eax,ebx
c0005f42:	e8 7e ea ff ff       	call   c00049c5 <get_fileinfo>
c0005f47:	31 d2                	xor    edx,edx
c0005f49:	89 d8                	mov    eax,ebx
c0005f4b:	e8 af d5 ff ff       	call   c00034ff <dir_next>
c0005f50:	83 f8 04             	cmp    eax,0x4
c0005f53:	75 02                	jne    c0005f57 <f_readdir+0x80>
c0005f55:	31 c0                	xor    eax,eax
c0005f57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5b:	83 ec 0c             	sub    esp,0xc
c0005f5e:	56                   	push   esi
c0005f5f:	e8 30 23 00 00       	call   c0008294 <ff_memfree>
c0005f64:	83 c4 10             	add    esp,0x10
c0005f67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6b:	83 c4 20             	add    esp,0x20
c0005f6e:	5b                   	pop    ebx
c0005f6f:	5e                   	pop    esi
c0005f70:	5f                   	pop    edi
c0005f71:	c3                   	ret    

c0005f72 <f_stat>:
c0005f72:	57                   	push   edi
c0005f73:	31 c9                	xor    ecx,ecx
c0005f75:	56                   	push   esi
c0005f76:	53                   	push   ebx
c0005f77:	83 ec 50             	sub    esp,0x50
c0005f7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f82:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f86:	e8 50 c5 ff ff       	call   c00024db <mount_volume>
c0005f8b:	89 c3                	mov    ebx,eax
c0005f8d:	85 c0                	test   eax,eax
c0005f8f:	75 67                	jne    c0005ff8 <f_stat+0x86>
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	bb 11 00 00 00       	mov    ebx,0x11
c0005f99:	68 60 04 00 00       	push   0x460
c0005f9e:	e8 db 22 00 00       	call   c000827e <ff_memalloc>
c0005fa3:	83 c4 10             	add    esp,0x10
c0005fa6:	89 c6                	mov    esi,eax
c0005fa8:	85 c0                	test   eax,eax
c0005faa:	74 4c                	je     c0005ff8 <f_stat+0x86>
c0005fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fb0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fc0:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc4:	e8 88 ec ff ff       	call   c0004c51 <follow_path>
c0005fc9:	89 c3                	mov    ebx,eax
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	75 1d                	jne    c0005fec <f_stat+0x7a>
c0005fcf:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd4:	78 11                	js     c0005fe7 <f_stat+0x75>
c0005fd6:	85 ff                	test   edi,edi
c0005fd8:	74 12                	je     c0005fec <f_stat+0x7a>
c0005fda:	89 fa                	mov    edx,edi
c0005fdc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fe0:	e8 e0 e9 ff ff       	call   c00049c5 <get_fileinfo>
c0005fe5:	eb 05                	jmp    c0005fec <f_stat+0x7a>
c0005fe7:	bb 06 00 00 00       	mov    ebx,0x6
c0005fec:	83 ec 0c             	sub    esp,0xc
c0005fef:	56                   	push   esi
c0005ff0:	e8 9f 22 00 00       	call   c0008294 <ff_memfree>
c0005ff5:	83 c4 10             	add    esp,0x10
c0005ff8:	83 c4 50             	add    esp,0x50
c0005ffb:	89 d8                	mov    eax,ebx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	c3                   	ret    

c0006001 <f_getfree>:
c0006001:	55                   	push   ebp
c0006002:	31 c9                	xor    ecx,ecx
c0006004:	57                   	push   edi
c0006005:	56                   	push   esi
c0006006:	53                   	push   ebx
c0006007:	83 ec 5c             	sub    esp,0x5c
c000600a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006012:	e8 c4 c4 ff ff       	call   c00024db <mount_volume>
c0006017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601b:	85 c0                	test   eax,eax
c000601d:	0f 85 9d 01 00 00    	jne    c00061c0 <f_getfree+0x1bf>
c0006023:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006027:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602b:	89 02                	mov    DWORD PTR [edx],eax
c000602d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006030:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006033:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006036:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000603a:	39 f2                	cmp    edx,esi
c000603c:	77 0b                	ja     c0006049 <f_getfree+0x48>
c000603e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006042:	89 10                	mov    DWORD PTR [eax],edx
c0006044:	e9 77 01 00 00       	jmp    c00061c0 <f_getfree+0x1bf>
c0006049:	8a 10                	mov    dl,BYTE PTR [eax]
c000604b:	80 fa 01             	cmp    dl,0x1
c000604e:	75 3a                	jne    c000608a <f_getfree+0x89>
c0006050:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006054:	be 02 00 00 00       	mov    esi,0x2
c0006059:	31 db                	xor    ebx,ebx
c000605b:	89 f2                	mov    edx,esi
c000605d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006061:	e8 4b cd ff ff       	call   c0002db1 <get_fat>
c0006066:	83 f8 ff             	cmp    eax,0xffffffff
c0006069:	0f 84 28 01 00 00    	je     c0006197 <f_getfree+0x196>
c000606f:	83 f8 01             	cmp    eax,0x1
c0006072:	0f 84 29 01 00 00    	je     c00061a1 <f_getfree+0x1a0>
c0006078:	83 d3 00             	adc    ebx,0x0
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	46                   	inc    esi
c0006080:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006083:	77 d6                	ja     c000605b <f_getfree+0x5a>
c0006085:	e9 25 01 00 00       	jmp    c00061af <f_getfree+0x1ae>
c000608a:	80 fa 04             	cmp    dl,0x4
c000608d:	0f 85 88 00 00 00    	jne    c000611b <f_getfree+0x11a>
c0006093:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006096:	31 ed                	xor    ebp,ebp
c0006098:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	85 ed                	test   ebp,ebp
c00060a7:	75 3f                	jne    c00060e8 <f_getfree+0xe7>
c00060a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b1:	83 c0 01             	add    eax,0x1
c00060b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b8:	83 d2 00             	adc    edx,0x0
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060cb:	e8 59 c1 ff ff       	call   c0002229 <move_window>
c00060d0:	85 c0                	test   eax,eax
c00060d2:	0f 85 d3 00 00 00    	jne    c00061ab <f_getfree+0x1aa>
c00060d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ef:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f3:	89 cf                	mov    edi,ecx
c00060f5:	85 f6                	test   esi,esi
c00060f7:	74 12                	je     c000610b <f_getfree+0x10a>
c00060f9:	88 c1                	mov    cl,al
c00060fb:	83 e1 01             	and    ecx,0x1
c00060fe:	80 f9 01             	cmp    cl,0x1
c0006101:	83 d3 00             	adc    ebx,0x0
c0006104:	d0 e8                	shr    al,1
c0006106:	4e                   	dec    esi
c0006107:	39 fe                	cmp    esi,edi
c0006109:	75 ea                	jne    c00060f5 <f_getfree+0xf4>
c000610b:	45                   	inc    ebp
c000610c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006112:	85 f6                	test   esi,esi
c0006114:	75 8f                	jne    c00060a5 <f_getfree+0xa4>
c0006116:	e9 94 00 00 00       	jmp    c00061af <f_getfree+0x1ae>
c000611b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006121:	31 f6                	xor    esi,esi
c0006123:	31 db                	xor    ebx,ebx
c0006125:	85 f6                	test   esi,esi
c0006127:	75 1b                	jne    c0006144 <f_getfree+0x143>
c0006129:	89 d7                	mov    edi,edx
c000612b:	89 cd                	mov    ebp,ecx
c000612d:	83 c7 01             	add    edi,0x1
c0006130:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006134:	83 d5 00             	adc    ebp,0x0
c0006137:	e8 ed c0 ff ff       	call   c0002229 <move_window>
c000613c:	85 c0                	test   eax,eax
c000613e:	75 6b                	jne    c00061ab <f_getfree+0x1aa>
c0006140:	89 fa                	mov    edx,edi
c0006142:	89 e9                	mov    ecx,ebp
c0006144:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006148:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006150:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006153:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006157:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615b:	75 11                	jne    c000616e <f_getfree+0x16d>
c000615d:	e8 e9 b8 ff ff       	call   c0001a4b <ld_word>
c0006162:	66 83 f8 01          	cmp    ax,0x1
c0006166:	83 d3 00             	adc    ebx,0x0
c0006169:	83 c6 02             	add    esi,0x2
c000616c:	eb 13                	jmp    c0006181 <f_getfree+0x180>
c000616e:	e8 e5 b8 ff ff       	call   c0001a58 <ld_dword>
c0006173:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006178:	83 f8 01             	cmp    eax,0x1
c000617b:	83 d3 00             	adc    ebx,0x0
c000617e:	83 c6 04             	add    esi,0x4
c0006181:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006187:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006193:	75 90                	jne    c0006125 <f_getfree+0x124>
c0006195:	eb 18                	jmp    c00061af <f_getfree+0x1ae>
c0006197:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619f:	eb 0e                	jmp    c00061af <f_getfree+0x1ae>
c00061a1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a9:	eb 04                	jmp    c00061af <f_getfree+0x1ae>
c00061ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061af:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b3:	89 18                	mov    DWORD PTR [eax],ebx
c00061b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c4:	83 c4 5c             	add    esp,0x5c
c00061c7:	5b                   	pop    ebx
c00061c8:	5e                   	pop    esi
c00061c9:	5f                   	pop    edi
c00061ca:	5d                   	pop    ebp
c00061cb:	c3                   	ret    

c00061cc <f_truncate>:
c00061cc:	56                   	push   esi
c00061cd:	53                   	push   ebx
c00061ce:	83 ec 14             	sub    esp,0x14
c00061d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d9:	89 d8                	mov    eax,ebx
c00061db:	e8 6e bf ff ff       	call   c000214e <validate>
c00061e0:	89 c6                	mov    esi,eax
c00061e2:	85 c0                	test   eax,eax
c00061e4:	0f 85 d2 00 00 00    	jne    c00062bc <f_truncate+0xf0>
c00061ea:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ee:	85 f6                	test   esi,esi
c00061f0:	0f 85 c6 00 00 00    	jne    c00062bc <f_truncate+0xf0>
c00061f6:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061fa:	0f 84 b7 00 00 00    	je     c00062b7 <f_truncate+0xeb>
c0006200:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006206:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006209:	89 d1                	mov    ecx,edx
c000620b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620e:	0f 83 a8 00 00 00    	jae    c00062bc <f_truncate+0xf0>
c0006214:	09 c2                	or     edx,eax
c0006216:	75 15                	jne    c000622d <f_truncate+0x61>
c0006218:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621b:	31 c9                	xor    ecx,ecx
c000621d:	89 d8                	mov    eax,ebx
c000621f:	e8 7a d0 ff ff       	call   c000329e <remove_chain>
c0006224:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622b:	eb 35                	jmp    c0006262 <f_truncate+0x96>
c000622d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006230:	89 d8                	mov    eax,ebx
c0006232:	e8 7a cb ff ff       	call   c0002db1 <get_fat>
c0006237:	89 c2                	mov    edx,eax
c0006239:	b8 01 00 00 00       	mov    eax,0x1
c000623e:	83 fa ff             	cmp    edx,0xffffffff
c0006241:	74 1f                	je     c0006262 <f_truncate+0x96>
c0006243:	b8 02 00 00 00       	mov    eax,0x2
c0006248:	83 fa 01             	cmp    edx,0x1
c000624b:	74 15                	je     c0006262 <f_truncate+0x96>
c000624d:	31 c0                	xor    eax,eax
c000624f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006253:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006256:	76 0a                	jbe    c0006262 <f_truncate+0x96>
c0006258:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625b:	89 d8                	mov    eax,ebx
c000625d:	e8 3c d0 ff ff       	call   c000329e <remove_chain>
c0006262:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006265:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006268:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006271:	83 ca 40             	or     edx,0x40
c0006274:	85 c0                	test   eax,eax
c0006276:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006279:	75 35                	jne    c00062b0 <f_truncate+0xe4>
c000627b:	84 d2                	test   dl,dl
c000627d:	79 3d                	jns    c00062bc <f_truncate+0xf0>
c000627f:	83 ec 0c             	sub    esp,0xc
c0006282:	8d 43 50             	lea    eax,[ebx+0x50]
c0006285:	6a 01                	push   0x1
c0006287:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000628a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628d:	50                   	push   eax
c000628e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006292:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006296:	50                   	push   eax
c0006297:	e8 7a b7 ff ff       	call   c0001a16 <disk_write>
c000629c:	83 c4 20             	add    esp,0x20
c000629f:	85 c0                	test   eax,eax
c00062a1:	75 08                	jne    c00062ab <f_truncate+0xdf>
c00062a3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a7:	31 f6                	xor    esi,esi
c00062a9:	eb 11                	jmp    c00062bc <f_truncate+0xf0>
c00062ab:	b8 01 00 00 00       	mov    eax,0x1
c00062b0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b3:	89 c6                	mov    esi,eax
c00062b5:	eb 05                	jmp    c00062bc <f_truncate+0xf0>
c00062b7:	be 07 00 00 00       	mov    esi,0x7
c00062bc:	89 f0                	mov    eax,esi
c00062be:	83 c4 14             	add    esp,0x14
c00062c1:	5b                   	pop    ebx
c00062c2:	5e                   	pop    esi
c00062c3:	c3                   	ret    

c00062c4 <f_unlink>:
c00062c4:	56                   	push   esi
c00062c5:	b9 02 00 00 00       	mov    ecx,0x2
c00062ca:	53                   	push   ebx
c00062cb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062dc:	e8 fa c1 ff ff       	call   c00024db <mount_volume>
c00062e1:	85 c0                	test   eax,eax
c00062e3:	0f 85 55 01 00 00    	jne    c000643e <f_unlink+0x17a>
c00062e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ed:	83 ec 0c             	sub    esp,0xc
c00062f0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f4:	68 60 04 00 00       	push   0x460
c00062f9:	e8 80 1f 00 00       	call   c000827e <ff_memalloc>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	89 c3                	mov    ebx,eax
c0006303:	b8 11 00 00 00       	mov    eax,0x11
c0006308:	85 db                	test   ebx,ebx
c000630a:	0f 84 2e 01 00 00    	je     c000643e <f_unlink+0x17a>
c0006310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006314:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000631a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006320:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006327:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632b:	e8 21 e9 ff ff       	call   c0004c51 <follow_path>
c0006330:	85 c0                	test   eax,eax
c0006332:	0f 85 f2 00 00 00    	jne    c000642a <f_unlink+0x166>
c0006338:	b8 06 00 00 00       	mov    eax,0x6
c000633d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006345:	0f 88 df 00 00 00    	js     c000642a <f_unlink+0x166>
c000634b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006350:	74 0a                	je     c000635c <f_unlink+0x98>
c0006352:	b8 07 00 00 00       	mov    eax,0x7
c0006357:	e9 ce 00 00 00       	jmp    c000642a <f_unlink+0x166>
c000635c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006360:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006364:	8a 02                	mov    al,BYTE PTR [edx]
c0006366:	3c 04                	cmp    al,0x4
c0006368:	75 12                	jne    c000637c <f_unlink+0xb8>
c000636a:	8d 42 10             	lea    eax,[edx+0x10]
c000636d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006371:	e8 a1 e8 ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0006376:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000637a:	eb 0e                	jmp    c000638a <f_unlink+0xc6>
c000637c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006383:	e8 3e e8 ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0006388:	89 c6                	mov    esi,eax
c000638a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638f:	75 12                	jne    c00063a3 <f_unlink+0xdf>
c0006391:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006395:	e8 94 d6 ff ff       	call   c0003a2e <dir_remove>
c000639a:	85 c0                	test   eax,eax
c000639c:	74 6c                	je     c000640a <f_unlink+0x146>
c000639e:	e9 87 00 00 00       	jmp    c000642a <f_unlink+0x166>
c00063a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ae:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b8:	75 21                	jne    c00063db <f_unlink+0x117>
c00063ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063d0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063db:	31 d2                	xor    edx,edx
c00063dd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e4:	e8 be cb ff ff       	call   c0002fa7 <dir_sdi>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	75 3d                	jne    c000642a <f_unlink+0x166>
c00063ed:	31 d2                	xor    edx,edx
c00063ef:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f6:	e8 bc d3 ff ff       	call   c00037b7 <dir_read>
c00063fb:	85 c0                	test   eax,eax
c00063fd:	0f 84 4f ff ff ff    	je     c0006352 <f_unlink+0x8e>
c0006403:	83 f8 04             	cmp    eax,0x4
c0006406:	75 22                	jne    c000642a <f_unlink+0x166>
c0006408:	eb 87                	jmp    c0006391 <f_unlink+0xcd>
c000640a:	85 f6                	test   esi,esi
c000640c:	75 0b                	jne    c0006419 <f_unlink+0x155>
c000640e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006412:	e8 3d df ff ff       	call   c0004354 <sync_fs>
c0006417:	eb 11                	jmp    c000642a <f_unlink+0x166>
c0006419:	31 c9                	xor    ecx,ecx
c000641b:	89 f2                	mov    edx,esi
c000641d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006421:	e8 78 ce ff ff       	call   c000329e <remove_chain>
c0006426:	85 c0                	test   eax,eax
c0006428:	74 e4                	je     c000640e <f_unlink+0x14a>
c000642a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642e:	83 ec 0c             	sub    esp,0xc
c0006431:	53                   	push   ebx
c0006432:	e8 5d 1e 00 00       	call   c0008294 <ff_memfree>
c0006437:	83 c4 10             	add    esp,0x10
c000643a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	c3                   	ret    

c0006447 <f_mkdir>:
c0006447:	57                   	push   edi
c0006448:	b9 02 00 00 00       	mov    ecx,0x2
c000644d:	56                   	push   esi
c000644e:	53                   	push   ebx
c000644f:	83 c4 80             	add    esp,0xffffff80
c0006452:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006456:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645d:	e8 79 c0 ff ff       	call   c00024db <mount_volume>
c0006462:	89 c3                	mov    ebx,eax
c0006464:	85 c0                	test   eax,eax
c0006466:	0f 85 fe 01 00 00    	jne    c000666a <f_mkdir+0x223>
c000646c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006470:	bb 11 00 00 00       	mov    ebx,0x11
c0006475:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006479:	83 ec 0c             	sub    esp,0xc
c000647c:	68 60 04 00 00       	push   0x460
c0006481:	e8 f8 1d 00 00       	call   c000827e <ff_memalloc>
c0006486:	83 c4 10             	add    esp,0x10
c0006489:	89 c7                	mov    edi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	0f 84 d7 01 00 00    	je     c000666a <f_mkdir+0x223>
c0006493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006497:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ae:	e8 9e e7 ff ff       	call   c0004c51 <follow_path>
c00064b3:	89 c3                	mov    ebx,eax
c00064b5:	85 c0                	test   eax,eax
c00064b7:	74 3e                	je     c00064f7 <f_mkdir+0xb0>
c00064b9:	83 f8 04             	cmp    eax,0x4
c00064bc:	75 3e                	jne    c00064fc <f_mkdir+0xb5>
c00064be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c2:	31 d2                	xor    edx,edx
c00064c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cc:	e8 ce cb ff ff       	call   c000309f <create_chain>
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	85 c0                	test   eax,eax
c00064d5:	74 0c                	je     c00064e3 <f_mkdir+0x9c>
c00064d7:	bb 02 00 00 00       	mov    ebx,0x2
c00064dc:	83 f8 01             	cmp    eax,0x1
c00064df:	74 07                	je     c00064e8 <f_mkdir+0xa1>
c00064e1:	eb 2a                	jmp    c000650d <f_mkdir+0xc6>
c00064e3:	bb 07 00 00 00       	mov    ebx,0x7
c00064e8:	31 c9                	xor    ecx,ecx
c00064ea:	89 f2                	mov    edx,esi
c00064ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064f0:	e8 a9 cd ff ff       	call   c000329e <remove_chain>
c00064f5:	eb 05                	jmp    c00064fc <f_mkdir+0xb5>
c00064f7:	bb 08 00 00 00       	mov    ebx,0x8
c00064fc:	83 ec 0c             	sub    esp,0xc
c00064ff:	57                   	push   edi
c0006500:	e8 8f 1d 00 00       	call   c0008294 <ff_memfree>
c0006505:	83 c4 10             	add    esp,0x10
c0006508:	e9 5d 01 00 00       	jmp    c000666a <f_mkdir+0x223>
c000650d:	bb 01 00 00 00       	mov    ebx,0x1
c0006512:	83 f8 ff             	cmp    eax,0xffffffff
c0006515:	74 d1                	je     c00064e8 <f_mkdir+0xa1>
c0006517:	89 f2                	mov    edx,esi
c0006519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651d:	e8 c4 ce ff ff       	call   c00033e6 <dir_clear>
c0006522:	89 c3                	mov    ebx,eax
c0006524:	85 c0                	test   eax,eax
c0006526:	75 c0                	jne    c00064e8 <f_mkdir+0xa1>
c0006528:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652f:	74 69                	je     c000659a <f_mkdir+0x153>
c0006531:	b9 0b 00 00 00       	mov    ecx,0xb
c0006536:	83 c0 54             	add    eax,0x54
c0006539:	ba 20 00 00 00       	mov    edx,0x20
c000653e:	e8 9c b5 ff ff       	call   c0001adf <mem_set>
c0006543:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006547:	ba 00 00 21 50       	mov    edx,0x50210000
c000654c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006550:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006554:	83 c0 6a             	add    eax,0x6a
c0006557:	e8 65 b5 ff ff       	call   c0001ac1 <st_dword>
c000655c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006560:	89 f1                	mov    ecx,esi
c0006562:	8d 50 54             	lea    edx,[eax+0x54]
c0006565:	e8 85 e6 ff ff       	call   c0004bef <st_clust.isra.1>
c000656a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656e:	b9 20 00 00 00       	mov    ecx,0x20
c0006573:	8d 50 54             	lea    edx,[eax+0x54]
c0006576:	83 c0 74             	add    eax,0x74
c0006579:	e8 4c b5 ff ff       	call   c0001aca <mem_cpy>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006586:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000658a:	8d 50 74             	lea    edx,[eax+0x74]
c000658d:	e8 5d e6 ff ff       	call   c0004bef <st_clust.isra.1>
c0006592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006596:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659e:	e8 2f db ff ff       	call   c00040d2 <dir_register>
c00065a3:	89 c3                	mov    ebx,eax
c00065a5:	85 c0                	test   eax,eax
c00065a7:	0f 85 3b ff ff ff    	jne    c00064e8 <f_mkdir+0xa1>
c00065ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b4:	75 74                	jne    c000662a <f_mkdir+0x1e3>
c00065b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065be:	83 c0 0c             	add    eax,0xc
c00065c1:	e8 fb b4 ff ff       	call   c0001ac1 <st_dword>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	89 f2                	mov    edx,esi
c00065cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065cf:	83 c0 34             	add    eax,0x34
c00065d2:	e8 ea b4 ff ff       	call   c0001ac1 <st_dword>
c00065d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065db:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e2:	c1 e2 09             	shl    edx,0x9
c00065e5:	83 c0 38             	add    eax,0x38
c00065e8:	e8 d4 b4 ff ff       	call   c0001ac1 <st_dword>
c00065ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f8:	c1 e2 09             	shl    edx,0x9
c00065fb:	83 c0 28             	add    eax,0x28
c00065fe:	e8 be b4 ff ff       	call   c0001ac1 <st_dword>
c0006603:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006607:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000660a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006611:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006615:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006619:	e8 8b d3 ff ff       	call   c00039a9 <store_xdir>
c000661e:	89 c3                	mov    ebx,eax
c0006620:	85 c0                	test   eax,eax
c0006622:	0f 85 d4 fe ff ff    	jne    c00064fc <f_mkdir+0xb5>
c0006628:	eb 30                	jmp    c000665a <f_mkdir+0x213>
c000662a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006633:	83 c0 16             	add    eax,0x16
c0006636:	e8 86 b4 ff ff       	call   c0001ac1 <st_dword>
c000663b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663f:	89 f1                	mov    ecx,esi
c0006641:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006645:	e8 a5 e5 ff ff       	call   c0004bef <st_clust.isra.1>
c000664a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006652:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006656:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000665a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665e:	e8 f1 dc ff ff       	call   c0004354 <sync_fs>
c0006663:	89 c3                	mov    ebx,eax
c0006665:	e9 92 fe ff ff       	jmp    c00064fc <f_mkdir+0xb5>
c000666a:	83 ec 80             	sub    esp,0xffffff80
c000666d:	89 d8                	mov    eax,ebx
c000666f:	5b                   	pop    ebx
c0006670:	5e                   	pop    esi
c0006671:	5f                   	pop    edi
c0006672:	c3                   	ret    

c0006673 <f_rename>:
c0006673:	55                   	push   ebp
c0006674:	57                   	push   edi
c0006675:	56                   	push   esi
c0006676:	53                   	push   ebx
c0006677:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006684:	e8 a4 b9 ff ff       	call   c000202d <get_ldnumber>
c0006689:	b9 02 00 00 00       	mov    ecx,0x2
c000668e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006692:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006699:	e8 3d be ff ff       	call   c00024db <mount_volume>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 85 b5 02 00 00    	jne    c000695b <f_rename+0x2e8>
c00066a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066aa:	83 ec 0c             	sub    esp,0xc
c00066ad:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b1:	68 60 04 00 00       	push   0x460
c00066b6:	e8 c3 1b 00 00       	call   c000827e <ff_memalloc>
c00066bb:	83 c4 10             	add    esp,0x10
c00066be:	89 c3                	mov    ebx,eax
c00066c0:	b8 11 00 00 00       	mov    eax,0x11
c00066c5:	85 db                	test   ebx,ebx
c00066c7:	0f 84 8e 02 00 00    	je     c000695b <f_rename+0x2e8>
c00066cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e8:	e8 64 e5 ff ff       	call   c0004c51 <follow_path>
c00066ed:	85 c0                	test   eax,eax
c00066ef:	0f 85 52 02 00 00    	jne    c0006947 <f_rename+0x2d4>
c00066f5:	b8 06 00 00 00       	mov    eax,0x6
c00066fa:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006702:	0f 85 3f 02 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670f:	0f 85 05 01 00 00    	jne    c000681a <f_rename+0x1a7>
c0006715:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006718:	b9 40 00 00 00       	mov    ecx,0x40
c000671d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006721:	e8 a4 b3 ff ff       	call   c0001aca <mem_cpy>
c0006726:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 8f b3 ff ff       	call   c0001aca <mem_cpy>
c000673b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006742:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006749:	e8 03 e5 ff ff       	call   c0004c51 <follow_path>
c000674e:	85 c0                	test   eax,eax
c0006750:	75 29                	jne    c000677b <f_rename+0x108>
c0006752:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006756:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675d:	74 0a                	je     c0006769 <f_rename+0xf6>
c000675f:	b8 08 00 00 00       	mov    eax,0x8
c0006764:	e9 de 01 00 00       	jmp    c0006947 <f_rename+0x2d4>
c0006769:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006770:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006777:	75 e6                	jne    c000675f <f_rename+0xec>
c0006779:	eb 09                	jmp    c0006784 <f_rename+0x111>
c000677b:	83 f8 04             	cmp    eax,0x4
c000677e:	0f 85 c3 01 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006784:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678b:	e8 42 d9 ff ff       	call   c00040d2 <dir_register>
c0006790:	85 c0                	test   eax,eax
c0006792:	0f 85 af 01 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a2:	89 c5                	mov    ebp,eax
c00067a4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067ab:	8d 46 24             	lea    eax,[esi+0x24]
c00067ae:	e8 98 b2 ff ff       	call   c0001a4b <ld_word>
c00067b3:	b9 40 00 00 00       	mov    ecx,0x40
c00067b8:	89 c7                	mov    edi,eax
c00067ba:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067be:	89 f0                	mov    eax,esi
c00067c0:	e8 05 b3 ff ff       	call   c0001aca <mem_cpy>
c00067c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c9:	89 e9                	mov    ecx,ebp
c00067cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ce:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067dc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067df:	0f b7 d7             	movzx  edx,di
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 24             	add    eax,0x24
c00067e8:	e8 d0 b2 ff ff       	call   c0001abd <st_word>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f4:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f7:	a8 10                	test   al,0x10
c00067f9:	75 06                	jne    c0006801 <f_rename+0x18e>
c00067fb:	83 c8 20             	or     eax,0x20
c00067fe:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006801:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006808:	e8 9c d1 ff ff       	call   c00039a9 <store_xdir>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 84 1c 01 00 00    	je     c0006931 <f_rename+0x2be>
c0006815:	e9 2d 01 00 00       	jmp    c0006947 <f_rename+0x2d4>
c000681a:	b9 20 00 00 00       	mov    ecx,0x20
c000681f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006826:	8d 44 24 18          	lea    eax,[esp+0x18]
c000682a:	e8 9b b2 ff ff       	call   c0001aca <mem_cpy>
c000682f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006834:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006838:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683f:	e8 86 b2 ff ff       	call   c0001aca <mem_cpy>
c0006844:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006852:	e8 fa e3 ff ff       	call   c0004c51 <follow_path>
c0006857:	85 c0                	test   eax,eax
c0006859:	75 27                	jne    c0006882 <f_rename+0x20f>
c000685b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006866:	0f 85 f3 fe ff ff    	jne    c000675f <f_rename+0xec>
c000686c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006873:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687a:	0f 85 df fe ff ff    	jne    c000675f <f_rename+0xec>
c0006880:	eb 09                	jmp    c000688b <f_rename+0x218>
c0006882:	83 f8 04             	cmp    eax,0x4
c0006885:	0f 85 bc 00 00 00    	jne    c0006947 <f_rename+0x2d4>
c000688b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006892:	e8 3b d8 ff ff       	call   c00040d2 <dir_register>
c0006897:	85 c0                	test   eax,eax
c0006899:	0f 85 a8 00 00 00    	jne    c0006947 <f_rename+0x2d4>
c000689f:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a6:	b9 13 00 00 00       	mov    ecx,0x13
c00068ab:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ae:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b2:	e8 13 b2 ff ff       	call   c0001aca <mem_cpy>
c00068b7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068bb:	a8 10                	test   al,0x10
c00068bd:	75 03                	jne    c00068c2 <f_rename+0x24f>
c00068bf:	83 c8 20             	or     eax,0x20
c00068c2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d1:	74 5e                	je     c0006931 <f_rename+0x2be>
c00068d3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068da:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068de:	74 51                	je     c0006931 <f_rename+0x2be>
c00068e0:	89 f2                	mov    edx,esi
c00068e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e6:	8a 07                	mov    al,BYTE PTR [edi]
c00068e8:	e8 d9 e2 ff ff       	call   c0004bc6 <ld_clust.isra.0>
c00068ed:	89 c2                	mov    edx,eax
c00068ef:	89 f8                	mov    eax,edi
c00068f1:	e8 ee b3 ff ff       	call   c0001ce4 <clst2sect>
c00068f6:	89 c6                	mov    esi,eax
c00068f8:	89 d1                	mov    ecx,edx
c00068fa:	b8 02 00 00 00       	mov    eax,0x2
c00068ff:	09 f2                	or     edx,esi
c0006901:	74 44                	je     c0006947 <f_rename+0x2d4>
c0006903:	89 f2                	mov    edx,esi
c0006905:	89 f8                	mov    eax,edi
c0006907:	e8 1d b9 ff ff       	call   c0002229 <move_window>
c000690c:	85 c0                	test   eax,eax
c000690e:	75 37                	jne    c0006947 <f_rename+0x2d4>
c0006910:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006914:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006918:	75 17                	jne    c0006931 <f_rename+0x2be>
c000691a:	8d 50 74             	lea    edx,[eax+0x74]
c000691d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006924:	e8 c6 e2 ff ff       	call   c0004bef <st_clust.isra.1>
c0006929:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006931:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006935:	e8 f4 d0 ff ff       	call   c0003a2e <dir_remove>
c000693a:	85 c0                	test   eax,eax
c000693c:	75 09                	jne    c0006947 <f_rename+0x2d4>
c000693e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006942:	e8 0d da ff ff       	call   c0004354 <sync_fs>
c0006947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694b:	83 ec 0c             	sub    esp,0xc
c000694e:	53                   	push   ebx
c000694f:	e8 40 19 00 00       	call   c0008294 <ff_memfree>
c0006954:	83 c4 10             	add    esp,0x10
c0006957:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006961:	5b                   	pop    ebx
c0006962:	5e                   	pop    esi
c0006963:	5f                   	pop    edi
c0006964:	5d                   	pop    ebp
c0006965:	c3                   	ret    

c0006966 <f_chmod>:
c0006966:	57                   	push   edi
c0006967:	b9 02 00 00 00       	mov    ecx,0x2
c000696c:	56                   	push   esi
c000696d:	53                   	push   ebx
c000696e:	83 ec 60             	sub    esp,0x60
c0006971:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006975:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006979:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006981:	e8 55 bb ff ff       	call   c00024db <mount_volume>
c0006986:	85 c0                	test   eax,eax
c0006988:	0f 85 af 00 00 00    	jne    c0006a3d <f_chmod+0xd7>
c000698e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006992:	83 ec 0c             	sub    esp,0xc
c0006995:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006999:	68 60 04 00 00       	push   0x460
c000699e:	e8 db 18 00 00       	call   c000827e <ff_memalloc>
c00069a3:	83 c4 10             	add    esp,0x10
c00069a6:	89 c6                	mov    esi,eax
c00069a8:	b8 11 00 00 00       	mov    eax,0x11
c00069ad:	85 f6                	test   esi,esi
c00069af:	0f 84 88 00 00 00    	je     c0006a3d <f_chmod+0xd7>
c00069b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069bf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cd:	e8 7f e2 ff ff       	call   c0004c51 <follow_path>
c00069d2:	85 c0                	test   eax,eax
c00069d4:	75 53                	jne    c0006a29 <f_chmod+0xc3>
c00069d6:	b8 06 00 00 00       	mov    eax,0x6
c00069db:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069e0:	75 47                	jne    c0006a29 <f_chmod+0xc3>
c00069e2:	89 f9                	mov    ecx,edi
c00069e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e8:	83 e1 27             	and    ecx,0x27
c00069eb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ee:	75 1d                	jne    c0006a0d <f_chmod+0xa7>
c00069f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f6:	21 cb                	and    ebx,ecx
c00069f8:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fb:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a02:	e8 a2 cf ff ff       	call   c00039a9 <store_xdir>
c0006a07:	85 c0                	test   eax,eax
c0006a09:	75 1e                	jne    c0006a29 <f_chmod+0xc3>
c0006a0b:	eb 13                	jmp    c0006a20 <f_chmod+0xba>
c0006a0d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a11:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a14:	21 cb                	and    ebx,ecx
c0006a16:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a19:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a24:	e8 2b d9 ff ff       	call   c0004354 <sync_fs>
c0006a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2d:	83 ec 0c             	sub    esp,0xc
c0006a30:	56                   	push   esi
c0006a31:	e8 5e 18 00 00       	call   c0008294 <ff_memfree>
c0006a36:	83 c4 10             	add    esp,0x10
c0006a39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3d:	83 c4 60             	add    esp,0x60
c0006a40:	5b                   	pop    ebx
c0006a41:	5e                   	pop    esi
c0006a42:	5f                   	pop    edi
c0006a43:	c3                   	ret    

c0006a44 <f_utime>:
c0006a44:	56                   	push   esi
c0006a45:	b9 02 00 00 00       	mov    ecx,0x2
c0006a4a:	53                   	push   ebx
c0006a4b:	83 ec 64             	sub    esp,0x64
c0006a4e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a52:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a56:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a5a:	e8 7c ba ff ff       	call   c00024db <mount_volume>
c0006a5f:	85 c0                	test   eax,eax
c0006a61:	0f 85 b5 00 00 00    	jne    c0006b1c <f_utime+0xd8>
c0006a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a72:	68 60 04 00 00       	push   0x460
c0006a77:	e8 02 18 00 00       	call   c000827e <ff_memalloc>
c0006a7c:	83 c4 10             	add    esp,0x10
c0006a7f:	89 c3                	mov    ebx,eax
c0006a81:	b8 11 00 00 00       	mov    eax,0x11
c0006a86:	85 db                	test   ebx,ebx
c0006a88:	0f 84 8e 00 00 00    	je     c0006b1c <f_utime+0xd8>
c0006a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a92:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a98:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9e:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 a6 e1 ff ff       	call   c0004c51 <follow_path>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 59                	jne    c0006b08 <f_utime+0xc4>
c0006aaf:	b8 06 00 00 00       	mov    eax,0x6
c0006ab4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab9:	75 4d                	jne    c0006b08 <f_utime+0xc4>
c0006abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac7:	c1 e2 10             	shl    edx,0x10
c0006aca:	09 ca                	or     edx,ecx
c0006acc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006acf:	75 1a                	jne    c0006aeb <f_utime+0xa7>
c0006ad1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad4:	83 c0 0c             	add    eax,0xc
c0006ad7:	e8 e5 af ff ff       	call   c0001ac1 <st_dword>
c0006adc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ae0:	e8 c4 ce ff ff       	call   c00039a9 <store_xdir>
c0006ae5:	85 c0                	test   eax,eax
c0006ae7:	75 1f                	jne    c0006b08 <f_utime+0xc4>
c0006ae9:	eb 14                	jmp    c0006aff <f_utime+0xbb>
c0006aeb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aef:	83 c0 16             	add    eax,0x16
c0006af2:	e8 ca af ff ff       	call   c0001ac1 <st_dword>
c0006af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b03:	e8 4c d8 ff ff       	call   c0004354 <sync_fs>
c0006b08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0c:	83 ec 0c             	sub    esp,0xc
c0006b0f:	53                   	push   ebx
c0006b10:	e8 7f 17 00 00       	call   c0008294 <ff_memfree>
c0006b15:	83 c4 10             	add    esp,0x10
c0006b18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1c:	83 c4 64             	add    esp,0x64
c0006b1f:	5b                   	pop    ebx
c0006b20:	5e                   	pop    esi
c0006b21:	c3                   	ret    

c0006b22 <f_getlabel>:
c0006b22:	55                   	push   ebp
c0006b23:	31 c9                	xor    ecx,ecx
c0006b25:	57                   	push   edi
c0006b26:	56                   	push   esi
c0006b27:	53                   	push   ebx
c0006b28:	83 ec 6c             	sub    esp,0x6c
c0006b2b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b36:	e8 a0 b9 ff ff       	call   c00024db <mount_volume>
c0006b3b:	89 c6                	mov    esi,eax
c0006b3d:	85 c0                	test   eax,eax
c0006b3f:	0f 85 c1 01 00 00    	jne    c0006d06 <f_getlabel+0x1e4>
c0006b45:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4d:	0f 84 5f 01 00 00    	je     c0006cb2 <f_getlabel+0x190>
c0006b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b57:	31 d2                	xor    edx,edx
c0006b59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b65:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b69:	e8 39 c4 ff ff       	call   c0002fa7 <dir_sdi>
c0006b6e:	85 c0                	test   eax,eax
c0006b70:	0f 85 2d 01 00 00    	jne    c0006ca3 <f_getlabel+0x181>
c0006b76:	ba 01 00 00 00       	mov    edx,0x1
c0006b7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7f:	e8 33 cc ff ff       	call   c00037b7 <dir_read>
c0006b84:	85 c0                	test   eax,eax
c0006b86:	0f 85 17 01 00 00    	jne    c0006ca3 <f_getlabel+0x181>
c0006b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b90:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b93:	74 09                	je     c0006b9e <f_getlabel+0x7c>
c0006b95:	31 db                	xor    ebx,ebx
c0006b97:	31 c9                	xor    ecx,ecx
c0006b99:	e9 c8 00 00 00       	jmp    c0006c66 <f_getlabel+0x144>
c0006b9e:	31 ed                	xor    ebp,ebp
c0006ba0:	31 db                	xor    ebx,ebx
c0006ba2:	31 ff                	xor    edi,edi
c0006ba4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bac:	39 fa                	cmp    edx,edi
c0006bae:	76 4b                	jbe    c0006bfb <f_getlabel+0xd9>
c0006bb0:	47                   	inc    edi
c0006bb1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb4:	01 d0                	add    eax,edx
c0006bb6:	e8 90 ae ff ff       	call   c0001a4b <ld_word>
c0006bbb:	66 85 ed             	test   bp,bp
c0006bbe:	75 0d                	jne    c0006bcd <f_getlabel+0xab>
c0006bc0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bcb:	76 28                	jbe    c0006bf5 <f_getlabel+0xd3>
c0006bcd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd4:	89 e9                	mov    ecx,ebp
c0006bd6:	01 da                	add    edx,ebx
c0006bd8:	c1 e1 10             	shl    ecx,0x10
c0006bdb:	0f b7 c0             	movzx  eax,ax
c0006bde:	09 c8                	or     eax,ecx
c0006be0:	b9 04 00 00 00       	mov    ecx,0x4
c0006be5:	e8 01 b0 ff ff       	call   c0001beb <put_utf>
c0006bea:	84 c0                	test   al,al
c0006bec:	74 0b                	je     c0006bf9 <f_getlabel+0xd7>
c0006bee:	0f b6 c0             	movzx  eax,al
c0006bf1:	01 c3                	add    ebx,eax
c0006bf3:	31 c0                	xor    eax,eax
c0006bf5:	89 c5                	mov    ebp,eax
c0006bf7:	eb ab                	jmp    c0006ba4 <f_getlabel+0x82>
c0006bf9:	31 db                	xor    ebx,ebx
c0006bfb:	66 85 ed             	test   bp,bp
c0006bfe:	74 02                	je     c0006c02 <f_getlabel+0xe0>
c0006c00:	31 db                	xor    ebx,ebx
c0006c02:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c09:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0d:	e9 a0 00 00 00       	jmp    c0006cb2 <f_getlabel+0x190>
c0006c12:	83 ff 0b             	cmp    edi,0xb
c0006c15:	74 11                	je     c0006c28 <f_getlabel+0x106>
c0006c17:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c20:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c23:	c1 e0 08             	shl    eax,0x8
c0006c26:	09 c2                	or     edx,eax
c0006c28:	0f b7 d2             	movzx  edx,dx
c0006c2b:	50                   	push   eax
c0006c2c:	50                   	push   eax
c0006c2d:	68 b5 01 00 00       	push   0x1b5
c0006c32:	52                   	push   edx
c0006c33:	e8 03 17 00 00       	call   c000833b <ff_oem2uni>
c0006c38:	83 c4 10             	add    esp,0x10
c0006c3b:	66 85 c0             	test   ax,ax
c0006c3e:	74 46                	je     c0006c86 <f_getlabel+0x164>
c0006c40:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c47:	0f b7 c0             	movzx  eax,ax
c0006c4a:	01 da                	add    edx,ebx
c0006c4c:	b9 04 00 00 00       	mov    ecx,0x4
c0006c51:	e8 95 af ff ff       	call   c0001beb <put_utf>
c0006c56:	84 c0                	test   al,al
c0006c58:	74 2c                	je     c0006c86 <f_getlabel+0x164>
c0006c5a:	0f b6 c0             	movzx  eax,al
c0006c5d:	01 c3                	add    ebx,eax
c0006c5f:	83 ff 0b             	cmp    edi,0xb
c0006c62:	74 24                	je     c0006c88 <f_getlabel+0x166>
c0006c64:	89 f9                	mov    ecx,edi
c0006c66:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c6a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c72:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7b:	e8 9f ae ff ff       	call   c0001b1f <dbc_1st>
c0006c80:	85 c0                	test   eax,eax
c0006c82:	74 a4                	je     c0006c28 <f_getlabel+0x106>
c0006c84:	eb 8c                	jmp    c0006c12 <f_getlabel+0xf0>
c0006c86:	31 db                	xor    ebx,ebx
c0006c88:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c92:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c99:	74 17                	je     c0006cb2 <f_getlabel+0x190>
c0006c9b:	4b                   	dec    ebx
c0006c9c:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9f:	74 ee                	je     c0006c8f <f_getlabel+0x16d>
c0006ca1:	eb 0f                	jmp    c0006cb2 <f_getlabel+0x190>
c0006ca3:	83 f8 04             	cmp    eax,0x4
c0006ca6:	75 5c                	jne    c0006d04 <f_getlabel+0x1e2>
c0006ca8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006caf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cba:	74 4a                	je     c0006d06 <f_getlabel+0x1e4>
c0006cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cc0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc6:	e8 5e b5 ff ff       	call   c0002229 <move_window>
c0006ccb:	89 c6                	mov    esi,eax
c0006ccd:	85 c0                	test   eax,eax
c0006ccf:	75 35                	jne    c0006d06 <f_getlabel+0x1e4>
c0006cd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd5:	b8 43 00 00 00       	mov    eax,0x43
c0006cda:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdc:	80 f9 03             	cmp    cl,0x3
c0006cdf:	74 0f                	je     c0006cf0 <f_getlabel+0x1ce>
c0006ce1:	31 c0                	xor    eax,eax
c0006ce3:	80 f9 04             	cmp    cl,0x4
c0006ce6:	0f 94 c0             	sete   al
c0006ce9:	48                   	dec    eax
c0006cea:	83 e0 c3             	and    eax,0xffffffc3
c0006ced:	83 c0 64             	add    eax,0x64
c0006cf0:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf4:	e8 5f ad ff ff       	call   c0001a58 <ld_dword>
c0006cf9:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d00:	89 07                	mov    DWORD PTR [edi],eax
c0006d02:	eb 02                	jmp    c0006d06 <f_getlabel+0x1e4>
c0006d04:	89 c6                	mov    esi,eax
c0006d06:	83 c4 6c             	add    esp,0x6c
c0006d09:	89 f0                	mov    eax,esi
c0006d0b:	5b                   	pop    ebx
c0006d0c:	5e                   	pop    esi
c0006d0d:	5f                   	pop    edi
c0006d0e:	5d                   	pop    ebp
c0006d0f:	c3                   	ret    

c0006d10 <f_setlabel>:
c0006d10:	56                   	push   esi
c0006d11:	b9 02 00 00 00       	mov    ecx,0x2
c0006d16:	53                   	push   ebx
c0006d17:	83 ec 74             	sub    esp,0x74
c0006d1a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d25:	e8 b1 b7 ff ff       	call   c00024db <mount_volume>
c0006d2a:	89 c6                	mov    esi,eax
c0006d2c:	85 c0                	test   eax,eax
c0006d2e:	0f 85 41 02 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006d34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d38:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3b:	0f 85 8e 00 00 00    	jne    c0006dcf <f_setlabel+0xbf>
c0006d41:	b9 16 00 00 00       	mov    ecx,0x16
c0006d46:	31 d2                	xor    edx,edx
c0006d48:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4c:	31 db                	xor    ebx,ebx
c0006d4e:	e8 8c ad ff ff       	call   c0001adf <mem_set>
c0006d53:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d5a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5d:	0f 86 0a 01 00 00    	jbe    c0006e6d <f_setlabel+0x15d>
c0006d63:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d6a:	e8 b6 ad ff ff       	call   c0001b25 <tchar2uni>
c0006d6f:	89 c6                	mov    esi,eax
c0006d71:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d76:	76 2a                	jbe    c0006da2 <f_setlabel+0x92>
c0006d78:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7b:	74 05                	je     c0006d82 <f_setlabel+0x72>
c0006d7d:	83 fb 09             	cmp    ebx,0x9
c0006d80:	76 0a                	jbe    c0006d8c <f_setlabel+0x7c>
c0006d82:	be 06 00 00 00       	mov    esi,0x6
c0006d87:	e9 e9 01 00 00       	jmp    c0006f75 <f_setlabel+0x265>
c0006d8c:	89 c2                	mov    edx,eax
c0006d8e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d92:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d95:	c1 ea 10             	shr    edx,0x10
c0006d98:	01 c8                	add    eax,ecx
c0006d9a:	43                   	inc    ebx
c0006d9b:	e8 1d ad ff ff       	call   c0001abd <st_word>
c0006da0:	eb 04                	jmp    c0006da6 <f_setlabel+0x96>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	74 dc                	je     c0006d82 <f_setlabel+0x72>
c0006da6:	89 f2                	mov    edx,esi
c0006da8:	b8 37 5d 02 c0       	mov    eax,0xc0025d37
c0006dad:	e8 5b ad ff ff       	call   c0001b0d <chk_chr>
c0006db2:	85 c0                	test   eax,eax
c0006db4:	75 cc                	jne    c0006d82 <f_setlabel+0x72>
c0006db6:	83 fb 0a             	cmp    ebx,0xa
c0006db9:	77 c7                	ja     c0006d82 <f_setlabel+0x72>
c0006dbb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbe:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc2:	0f b7 d6             	movzx  edx,si
c0006dc5:	01 c8                	add    eax,ecx
c0006dc7:	43                   	inc    ebx
c0006dc8:	e8 f0 ac ff ff       	call   c0001abd <st_word>
c0006dcd:	eb 84                	jmp    c0006d53 <f_setlabel+0x43>
c0006dcf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd4:	ba 20 00 00 00       	mov    edx,0x20
c0006dd9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddd:	31 db                	xor    ebx,ebx
c0006ddf:	e8 fb ac ff ff       	call   c0001adf <mem_set>
c0006de4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006deb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006dee:	76 60                	jbe    c0006e50 <f_setlabel+0x140>
c0006df0:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df7:	e8 29 ad ff ff       	call   c0001b25 <tchar2uni>
c0006dfc:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e01:	0f 87 7b ff ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006e07:	83 ec 0c             	sub    esp,0xc
c0006e0a:	50                   	push   eax
c0006e0b:	e8 97 15 00 00       	call   c00083a7 <ff_wtoupper>
c0006e10:	5a                   	pop    edx
c0006e11:	59                   	pop    ecx
c0006e12:	68 b5 01 00 00       	push   0x1b5
c0006e17:	50                   	push   eax
c0006e18:	e8 8e 14 00 00       	call   c00082ab <ff_uni2oem>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	89 c6                	mov    esi,eax
c0006e22:	66 85 c0             	test   ax,ax
c0006e25:	0f 84 57 ff ff ff    	je     c0006d82 <f_setlabel+0x72>
c0006e2b:	0f b7 d0             	movzx  edx,ax
c0006e2e:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c0006e33:	e8 d5 ac ff ff       	call   c0001b0d <chk_chr>
c0006e38:	85 c0                	test   eax,eax
c0006e3a:	0f 85 42 ff ff ff    	jne    c0006d82 <f_setlabel+0x72>
c0006e40:	66 81 fe ff 00       	cmp    si,0xff
c0006e45:	0f 87 14 01 00 00    	ja     c0006f5f <f_setlabel+0x24f>
c0006e4b:	e9 fa 00 00 00       	jmp    c0006f4a <f_setlabel+0x23a>
c0006e50:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e55:	0f 84 27 ff ff ff    	je     c0006d82 <f_setlabel+0x72>
c0006e5b:	85 db                	test   ebx,ebx
c0006e5d:	74 0e                	je     c0006e6d <f_setlabel+0x15d>
c0006e5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e62:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e67:	75 04                	jne    c0006e6d <f_setlabel+0x15d>
c0006e69:	89 c3                	mov    ebx,eax
c0006e6b:	eb ee                	jmp    c0006e5b <f_setlabel+0x14b>
c0006e6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e71:	31 d2                	xor    edx,edx
c0006e73:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e77:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e83:	e8 1f c1 ff ff       	call   c0002fa7 <dir_sdi>
c0006e88:	89 c6                	mov    esi,eax
c0006e8a:	85 c0                	test   eax,eax
c0006e8c:	0f 85 e3 00 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006e92:	ba 01 00 00 00       	mov    edx,0x1
c0006e97:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9b:	e8 17 c9 ff ff       	call   c00037b7 <dir_read>
c0006ea0:	85 c0                	test   eax,eax
c0006ea2:	75 21                	jne    c0006ec5 <f_setlabel+0x1b5>
c0006ea4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eac:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eaf:	74 5d                	je     c0006f0e <f_setlabel+0x1fe>
c0006eb1:	85 db                	test   ebx,ebx
c0006eb3:	74 0b                	je     c0006ec0 <f_setlabel+0x1b0>
c0006eb5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eba:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebe:	eb 70                	jmp    c0006f30 <f_setlabel+0x220>
c0006ec0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec3:	eb 70                	jmp    c0006f35 <f_setlabel+0x225>
c0006ec5:	83 f8 04             	cmp    eax,0x4
c0006ec8:	75 7c                	jne    c0006f46 <f_setlabel+0x236>
c0006eca:	85 db                	test   ebx,ebx
c0006ecc:	0f 84 a3 00 00 00    	je     c0006f75 <f_setlabel+0x265>
c0006ed2:	ba 01 00 00 00       	mov    edx,0x1
c0006ed7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006edb:	e8 51 ca ff ff       	call   c0003931 <dir_alloc>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 8b 00 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006eea:	31 d2                	xor    edx,edx
c0006eec:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef0:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef5:	e8 e5 ab ff ff       	call   c0001adf <mem_set>
c0006efa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f01:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f05:	75 18                	jne    c0006f1f <f_setlabel+0x20f>
c0006f07:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f0a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f11:	b9 16 00 00 00       	mov    ecx,0x16
c0006f16:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f1a:	83 c0 02             	add    eax,0x2
c0006f1d:	eb 9b                	jmp    c0006eba <f_setlabel+0x1aa>
c0006f1f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f23:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f28:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f30:	e8 95 ab ff ff       	call   c0001aca <mem_cpy>
c0006f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f39:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f41:	e8 0e d4 ff ff       	call   c0004354 <sync_fs>
c0006f46:	89 c6                	mov    esi,eax
c0006f48:	eb 2b                	jmp    c0006f75 <f_setlabel+0x265>
c0006f4a:	83 fb 0a             	cmp    ebx,0xa
c0006f4d:	0f 87 2f fe ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006f53:	89 f0                	mov    eax,esi
c0006f55:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f59:	43                   	inc    ebx
c0006f5a:	e9 85 fe ff ff       	jmp    c0006de4 <f_setlabel+0xd4>
c0006f5f:	83 fb 09             	cmp    ebx,0x9
c0006f62:	0f 87 1a fe ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006f68:	89 f0                	mov    eax,esi
c0006f6a:	66 c1 e8 08          	shr    ax,0x8
c0006f6e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f72:	43                   	inc    ebx
c0006f73:	eb de                	jmp    c0006f53 <f_setlabel+0x243>
c0006f75:	89 f0                	mov    eax,esi
c0006f77:	83 c4 74             	add    esp,0x74
c0006f7a:	5b                   	pop    ebx
c0006f7b:	5e                   	pop    esi
c0006f7c:	c3                   	ret    

c0006f7d <f_forward>:
c0006f7d:	55                   	push   ebp
c0006f7e:	57                   	push   edi
c0006f7f:	56                   	push   esi
c0006f80:	53                   	push   ebx
c0006f81:	83 ec 2c             	sub    esp,0x2c
c0006f84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f88:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f92:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f96:	89 d8                	mov    eax,ebx
c0006f98:	e8 b1 b1 ff ff       	call   c000214e <validate>
c0006f9d:	89 c5                	mov    ebp,eax
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	0f 85 aa 01 00 00    	jne    c0007151 <f_forward+0x1d4>
c0006fa7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fab:	85 ed                	test   ebp,ebp
c0006fad:	0f 85 9e 01 00 00    	jne    c0007151 <f_forward+0x1d4>
c0006fb3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb7:	0f 84 8f 01 00 00    	je     c000714c <f_forward+0x1cf>
c0006fbd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fc0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc6:	bf 00 00 00 00       	mov    edi,0x0
c0006fcb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd2:	89 d1                	mov    ecx,edx
c0006fd4:	19 f9                	sbb    ecx,edi
c0006fd6:	0f 83 cf 00 00 00    	jae    c00070ab <f_forward+0x12e>
c0006fdc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fe0:	e9 c6 00 00 00       	jmp    c00070ab <f_forward+0x12e>
c0006fe5:	50                   	push   eax
c0006fe6:	50                   	push   eax
c0006fe7:	6a 00                	push   0x0
c0006fe9:	6a 00                	push   0x0
c0006feb:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fef:	83 c4 10             	add    esp,0x10
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 84 57 01 00 00    	je     c0007151 <f_forward+0x1d4>
c0006ffa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007001:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007004:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007008:	89 d7                	mov    edi,edx
c000700a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700d:	89 c6                	mov    esi,eax
c000700f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007013:	21 ce                	and    esi,ecx
c0007015:	89 c1                	mov    ecx,eax
c0007017:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701d:	0f 84 98 00 00 00    	je     c00070bb <f_forward+0x13e>
c0007023:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007027:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000702a:	89 c8                	mov    eax,ecx
c000702c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007030:	e8 af ac ff ff       	call   c0001ce4 <clst2sect>
c0007035:	89 d7                	mov    edi,edx
c0007037:	09 c7                	or     edi,eax
c0007039:	0f 84 9e 00 00 00    	je     c00070dd <f_forward+0x160>
c000703f:	31 ff                	xor    edi,edi
c0007041:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007044:	01 c6                	add    esi,eax
c0007046:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000704a:	11 d7                	adc    edi,edx
c000704c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007052:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007056:	39 fa                	cmp    edx,edi
c0007058:	0f 85 a2 00 00 00    	jne    c0007100 <f_forward+0x183>
c000705e:	39 f0                	cmp    eax,esi
c0007060:	0f 85 9a 00 00 00    	jne    c0007100 <f_forward+0x183>
c0007066:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007069:	ba 00 02 00 00       	mov    edx,0x200
c000706e:	25 ff 01 00 00       	and    eax,0x1ff
c0007073:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007077:	29 c2                	sub    edx,eax
c0007079:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707f:	39 d1                	cmp    ecx,edx
c0007081:	76 02                	jbe    c0007085 <f_forward+0x108>
c0007083:	89 d1                	mov    ecx,edx
c0007085:	8d 73 50             	lea    esi,[ebx+0x50]
c0007088:	52                   	push   edx
c0007089:	01 c6                	add    esi,eax
c000708b:	52                   	push   edx
c000708c:	51                   	push   ecx
c000708d:	56                   	push   esi
c000708e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007092:	83 c4 10             	add    esp,0x10
c0007095:	85 c0                	test   eax,eax
c0007097:	74 44                	je     c00070dd <f_forward+0x160>
c0007099:	31 ff                	xor    edi,edi
c000709b:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709e:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a5:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a9:	01 07                	add    DWORD PTR [edi],eax
c00070ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070b0:	0f 85 2f ff ff ff    	jne    c0006fe5 <f_forward+0x68>
c00070b6:	e9 96 00 00 00       	jmp    c0007151 <f_forward+0x1d4>
c00070bb:	85 f6                	test   esi,esi
c00070bd:	0f 85 60 ff ff ff    	jne    c0007023 <f_forward+0xa6>
c00070c3:	89 d7                	mov    edi,edx
c00070c5:	09 c7                	or     edi,eax
c00070c7:	75 05                	jne    c00070ce <f_forward+0x151>
c00070c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cc:	eb 0a                	jmp    c00070d8 <f_forward+0x15b>
c00070ce:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d1:	89 d8                	mov    eax,ebx
c00070d3:	e8 d9 bc ff ff       	call   c0002db1 <get_fat>
c00070d8:	83 f8 01             	cmp    eax,0x1
c00070db:	77 0b                	ja     c00070e8 <f_forward+0x16b>
c00070dd:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e1:	bd 02 00 00 00       	mov    ebp,0x2
c00070e6:	eb 69                	jmp    c0007151 <f_forward+0x1d4>
c00070e8:	83 f8 ff             	cmp    eax,0xffffffff
c00070eb:	75 0b                	jne    c00070f8 <f_forward+0x17b>
c00070ed:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f1:	bd 01 00 00 00       	mov    ebp,0x1
c00070f6:	eb 59                	jmp    c0007151 <f_forward+0x1d4>
c00070f8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fb:	e9 23 ff ff ff       	jmp    c0007023 <f_forward+0xa6>
c0007100:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007104:	79 20                	jns    c0007126 <f_forward+0x1a9>
c0007106:	83 ec 0c             	sub    esp,0xc
c0007109:	6a 01                	push   0x1
c000710b:	52                   	push   edx
c000710c:	50                   	push   eax
c000710d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007111:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007115:	50                   	push   eax
c0007116:	e8 fb a8 ff ff       	call   c0001a16 <disk_write>
c000711b:	83 c4 20             	add    esp,0x20
c000711e:	85 c0                	test   eax,eax
c0007120:	75 cb                	jne    c00070ed <f_forward+0x170>
c0007122:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	6a 01                	push   0x1
c000712b:	57                   	push   edi
c000712c:	56                   	push   esi
c000712d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007131:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007135:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007139:	50                   	push   eax
c000713a:	e8 c1 a8 ff ff       	call   c0001a00 <disk_read>
c000713f:	83 c4 20             	add    esp,0x20
c0007142:	85 c0                	test   eax,eax
c0007144:	0f 84 1c ff ff ff    	je     c0007066 <f_forward+0xe9>
c000714a:	eb a1                	jmp    c00070ed <f_forward+0x170>
c000714c:	bd 07 00 00 00       	mov    ebp,0x7
c0007151:	83 c4 2c             	add    esp,0x2c
c0007154:	89 e8                	mov    eax,ebp
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	5f                   	pop    edi
c0007159:	5d                   	pop    ebp
c000715a:	c3                   	ret    

c000715b <f_mkfs>:
c000715b:	55                   	push   ebp
c000715c:	57                   	push   edi
c000715d:	56                   	push   esi
c000715e:	53                   	push   ebx
c000715f:	bb 0b 00 00 00       	mov    ebx,0xb
c0007164:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000716a:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007171:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007178:	e8 b0 ae ff ff       	call   c000202d <get_ldnumber>
c000717d:	85 c0                	test   eax,eax
c000717f:	0f 88 ec 10 00 00    	js     c0008271 <f_mkfs+0x1116>
c0007185:	8b 14 85 a0 a3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5c60]
c000718c:	85 d2                	test   edx,edx
c000718e:	74 03                	je     c0007193 <f_mkfs+0x38>
c0007190:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007193:	85 f6                	test   esi,esi
c0007195:	75 05                	jne    c000719c <f_mkfs+0x41>
c0007197:	be 20 5d 02 c0       	mov    esi,0xc0025d20
c000719c:	83 ec 0c             	sub    esp,0xc
c000719f:	0f b6 c0             	movzx  eax,al
c00071a2:	bb 03 00 00 00       	mov    ebx,0x3
c00071a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071af:	e8 49 a8 ff ff       	call   c00019fd <disk_initialize>
c00071b4:	83 c4 10             	add    esp,0x10
c00071b7:	a8 01                	test   al,0x1
c00071b9:	0f 85 b2 10 00 00    	jne    c0008271 <f_mkfs+0x1116>
c00071bf:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c4:	a8 04                	test   al,0x4
c00071c6:	0f 85 a5 10 00 00    	jne    c0008271 <f_mkfs+0x1116>
c00071cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071cf:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d3:	85 c0                	test   eax,eax
c00071d5:	75 20                	jne    c00071f7 <f_mkfs+0x9c>
c00071d7:	51                   	push   ecx
c00071d8:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071dc:	50                   	push   eax
c00071dd:	6a 03                	push   0x3
c00071df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e3:	e8 44 a8 ff ff       	call   c0001a2c <disk_ioctl>
c00071e8:	83 c4 10             	add    esp,0x10
c00071eb:	85 c0                	test   eax,eax
c00071ed:	74 08                	je     c00071f7 <f_mkfs+0x9c>
c00071ef:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fb:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fe:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007203:	77 04                	ja     c0007209 <f_mkfs+0xae>
c0007205:	85 c2                	test   edx,eax
c0007207:	74 08                	je     c0007211 <f_mkfs+0xb6>
c0007209:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007211:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007214:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007218:	48                   	dec    eax
c0007219:	3c 01                	cmp    al,0x1
c000721b:	76 05                	jbe    c0007222 <f_mkfs+0xc7>
c000721d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007222:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007225:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007229:	48                   	dec    eax
c000722a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722f:	77 07                	ja     c0007238 <f_mkfs+0xdd>
c0007231:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007236:	74 08                	je     c0007240 <f_mkfs+0xe5>
c0007238:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007240:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007243:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007249:	77 07                	ja     c0007252 <f_mkfs+0xf7>
c000724b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724e:	85 d8                	test   eax,ebx
c0007250:	74 02                	je     c0007254 <f_mkfs+0xf9>
c0007252:	31 db                	xor    ebx,ebx
c0007254:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725f:	77 0a                	ja     c000726b <f_mkfs+0x110>
c0007261:	bb 11 00 00 00       	mov    ebx,0x11
c0007266:	e9 06 10 00 00       	jmp    c0008271 <f_mkfs+0x1116>
c000726b:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007272:	8b 36                	mov    esi,DWORD PTR [esi]
c0007274:	85 ed                	test   ebp,ebp
c0007276:	75 1e                	jne    c0007296 <f_mkfs+0x13b>
c0007278:	83 ec 0c             	sub    esp,0xc
c000727b:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007282:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007287:	50                   	push   eax
c0007288:	e8 f1 0f 00 00       	call   c000827e <ff_memalloc>
c000728d:	83 c4 10             	add    esp,0x10
c0007290:	89 c5                	mov    ebp,eax
c0007292:	85 c0                	test   eax,eax
c0007294:	74 cb                	je     c0007261 <f_mkfs+0x106>
c0007296:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729e:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a6:	52                   	push   edx
c00072a7:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072ab:	50                   	push   eax
c00072ac:	6a 01                	push   0x1
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	e8 75 a7 ff ff       	call   c0001a2c <disk_ioctl>
c00072b7:	83 c4 10             	add    esp,0x10
c00072ba:	85 c0                	test   eax,eax
c00072bc:	0f 85 4a 0f 00 00    	jne    c000820c <f_mkfs+0x10b1>
c00072c2:	89 f1                	mov    ecx,esi
c00072c4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cc:	83 e1 0f             	and    ecx,0xf
c00072cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d7:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072db:	83 e6 08             	and    esi,0x8
c00072de:	75 56                	jne    c0007336 <f_mkfs+0x1db>
c00072e0:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e4:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e8:	83 ff 00             	cmp    edi,0x0
c00072eb:	76 20                	jbe    c000730d <f_mkfs+0x1b2>
c00072ed:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f2:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072fa:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007300:	83 d7 ff             	adc    edi,0xffffffff
c0007303:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007307:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730b:	eb 21                	jmp    c000732e <f_mkfs+0x1d3>
c000730d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007312:	39 f2                	cmp    edx,esi
c0007314:	19 f8                	sbb    eax,edi
c0007316:	73 1e                	jae    c0007336 <f_mkfs+0x1db>
c0007318:	83 c6 c1             	add    esi,0xffffffc1
c000731b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007323:	83 d7 ff             	adc    edi,0xffffffff
c0007326:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000732a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007336:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000733a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007341:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007345:	31 c0                	xor    eax,eax
c0007347:	ba 7f 00 00 00       	mov    edx,0x7f
c000734c:	89 c7                	mov    edi,eax
c000734e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007351:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007355:	0f 83 c5 0a 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c000735b:	89 df                	mov    edi,ebx
c000735d:	c1 ef 09             	shr    edi,0x9
c0007360:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007364:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736b:	c1 ef 09             	shr    edi,0x9
c000736e:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007373:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007377:	74 29                	je     c00073a2 <f_mkfs+0x247>
c0007379:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737f:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007384:	0f 97 c2             	seta   dl
c0007387:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000738a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738e:	0f 92 c0             	setb   al
c0007391:	08 c2                	or     dl,al
c0007393:	75 5b                	jne    c00073f0 <f_mkfs+0x295>
c0007395:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007399:	83 e0 07             	and    eax,0x7
c000739c:	3c 04                	cmp    al,0x4
c000739e:	74 50                	je     c00073f0 <f_mkfs+0x295>
c00073a0:	eb 1b                	jmp    c00073bd <f_mkfs+0x262>
c00073a2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a7:	0f 87 73 0a 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c00073ad:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b3:	76 08                	jbe    c00073bd <f_mkfs+0x262>
c00073b5:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c1:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c5:	83 e0 01             	and    eax,0x1
c00073c8:	80 e1 02             	and    cl,0x2
c00073cb:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073cf:	74 0d                	je     c00073de <f_mkfs+0x283>
c00073d1:	84 c0                	test   al,al
c00073d3:	0f 84 53 09 00 00    	je     c0007d2c <f_mkfs+0xbd1>
c00073d9:	e9 12 08 00 00       	jmp    c0007bf0 <f_mkfs+0xa95>
c00073de:	bb 13 00 00 00       	mov    ebx,0x13
c00073e3:	84 c0                	test   al,al
c00073e5:	0f 85 05 08 00 00    	jne    c0007bf0 <f_mkfs+0xa95>
c00073eb:	e9 39 0e 00 00       	jmp    c0008229 <f_mkfs+0x10ce>
c00073f0:	31 c0                	xor    eax,eax
c00073f2:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f7:	89 c7                	mov    edi,eax
c00073f9:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fc:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007400:	0f 83 1a 0a 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c0007406:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740c:	77 39                	ja     c0007447 <f_mkfs+0x2ec>
c000740e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007413:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007422:	73 08                	jae    c000742c <f_mkfs+0x2d1>
c0007424:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007431:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007434:	b8 00 00 00 00       	mov    eax,0x0
c0007439:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743d:	73 08                	jae    c0007447 <f_mkfs+0x2ec>
c000743f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744f:	83 c0 20             	add    eax,0x20
c0007452:	83 d2 00             	adc    edx,0x0
c0007455:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007459:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007461:	31 d2                	xor    edx,edx
c0007463:	31 ff                	xor    edi,edi
c0007465:	52                   	push   edx
c0007466:	89 fb                	mov    ebx,edi
c0007468:	50                   	push   eax
c0007469:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007471:	e8 e6 be 01 00       	call   c002335c <__udivdi3>
c0007476:	83 c4 10             	add    esp,0x10
c0007479:	c1 e0 02             	shl    eax,0x2
c000747c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007480:	05 07 02 00 00       	add    eax,0x207
c0007485:	89 f1                	mov    ecx,esi
c0007487:	c1 e8 09             	shr    eax,0x9
c000748a:	83 c1 ff             	add    ecx,0xffffffff
c000748d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007491:	83 d3 ff             	adc    ebx,0xffffffff
c0007494:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007498:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749c:	31 d2                	xor    edx,edx
c000749e:	01 c8                	add    eax,ecx
c00074a0:	11 da                	adc    edx,ebx
c00074a2:	89 c1                	mov    ecx,eax
c00074a4:	f7 de                	neg    esi
c00074a6:	89 d0                	mov    eax,edx
c00074a8:	83 d7 00             	adc    edi,0x0
c00074ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074af:	f7 df                	neg    edi
c00074b1:	21 f1                	and    ecx,esi
c00074b3:	21 f8                	and    eax,edi
c00074b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c5:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cc:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074d0:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d4:	89 df                	mov    edi,ebx
c00074d6:	d1 ea                	shr    edx,1
c00074d8:	39 c1                	cmp    ecx,eax
c00074da:	19 d7                	sbb    edi,edx
c00074dc:	0f 83 3e 09 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c00074e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e6:	31 d2                	xor    edx,edx
c00074e8:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074f0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f7:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fb:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074ff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007503:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007507:	83 f8 0f             	cmp    eax,0xf
c000750a:	0f 86 10 09 00 00    	jbe    c0007e20 <f_mkfs+0xcc5>
c0007510:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007518:	0f 87 02 09 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c000751e:	31 d2                	xor    edx,edx
c0007520:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007524:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752c:	83 c0 07             	add    eax,0x7
c000752f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007537:	c1 e8 03             	shr    eax,0x3
c000753a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007541:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007549:	c1 e0 09             	shl    eax,0x9
c000754c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007550:	48                   	dec    eax
c0007551:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007555:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007559:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007561:	31 d2                	xor    edx,edx
c0007563:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007567:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007572:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007577:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007583:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007587:	31 ff                	xor    edi,edi
c0007589:	31 f6                	xor    esi,esi
c000758b:	31 db                	xor    ebx,ebx
c000758d:	85 ff                	test   edi,edi
c000758f:	74 05                	je     c0007596 <f_mkfs+0x43b>
c0007591:	4f                   	dec    edi
c0007592:	74 44                	je     c00075d8 <f_mkfs+0x47d>
c0007594:	eb 4f                	jmp    c00075e5 <f_mkfs+0x48a>
c0007596:	83 ec 0c             	sub    esp,0xc
c0007599:	0f b7 c3             	movzx  eax,bx
c000759c:	50                   	push   eax
c000759d:	e8 05 0e 00 00       	call   c00083a7 <ff_wtoupper>
c00075a2:	83 c4 10             	add    esp,0x10
c00075a5:	89 c1                	mov    ecx,eax
c00075a7:	8d 53 01             	lea    edx,[ebx+0x1]
c00075aa:	66 39 c3             	cmp    bx,ax
c00075ad:	75 3e                	jne    c00075ed <f_mkfs+0x492>
c00075af:	be 01 00 00 00       	mov    esi,0x1
c00075b4:	89 df                	mov    edi,ebx
c00075b6:	66 01 f7             	add    di,si
c00075b9:	75 07                	jne    c00075c2 <f_mkfs+0x467>
c00075bb:	83 fe 7f             	cmp    esi,0x7f
c00075be:	77 31                	ja     c00075f1 <f_mkfs+0x496>
c00075c0:	eb 16                	jmp    c00075d8 <f_mkfs+0x47d>
c00075c2:	83 ec 0c             	sub    esp,0xc
c00075c5:	0f b7 ff             	movzx  edi,di
c00075c8:	57                   	push   edi
c00075c9:	e8 d9 0d 00 00       	call   c00083a7 <ff_wtoupper>
c00075ce:	83 c4 10             	add    esp,0x10
c00075d1:	39 c7                	cmp    edi,eax
c00075d3:	75 e6                	jne    c00075bb <f_mkfs+0x460>
c00075d5:	46                   	inc    esi
c00075d6:	eb dc                	jmp    c00075b4 <f_mkfs+0x459>
c00075d8:	31 c0                	xor    eax,eax
c00075da:	89 d9                	mov    ecx,ebx
c00075dc:	4e                   	dec    esi
c00075dd:	0f 95 c0             	setne  al
c00075e0:	43                   	inc    ebx
c00075e1:	89 c7                	mov    edi,eax
c00075e3:	eb 14                	jmp    c00075f9 <f_mkfs+0x49e>
c00075e5:	89 f1                	mov    ecx,esi
c00075e7:	01 f3                	add    ebx,esi
c00075e9:	31 ff                	xor    edi,edi
c00075eb:	eb 0c                	jmp    c00075f9 <f_mkfs+0x49e>
c00075ed:	89 d3                	mov    ebx,edx
c00075ef:	eb 08                	jmp    c00075f9 <f_mkfs+0x49e>
c00075f1:	bf 02 00 00 00       	mov    edi,0x2
c00075f6:	83 c9 ff             	or     ecx,0xffffffff
c00075f9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007600:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007604:	0f b6 c1             	movzx  eax,cl
c0007607:	e8 3a a9 ff ff       	call   c0001f46 <xsum32>
c000760c:	66 c1 e9 08          	shr    cx,0x8
c0007610:	89 c2                	mov    edx,eax
c0007612:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007615:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007619:	0f b7 c1             	movzx  eax,cx
c000761c:	e8 25 a9 ff ff       	call   c0001f46 <xsum32>
c0007621:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007626:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000762a:	66 85 db             	test   bx,bx
c000762d:	74 1f                	je     c000764e <f_mkfs+0x4f3>
c000762f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007632:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007639:	83 c0 02             	add    eax,0x2
c000763c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007642:	39 c2                	cmp    edx,eax
c0007644:	74 08                	je     c000764e <f_mkfs+0x4f3>
c0007646:	89 04 24             	mov    DWORD PTR [esp],eax
c0007649:	e9 3f ff ff ff       	jmp    c000758d <f_mkfs+0x432>
c000764e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	05 01 02 00 00       	add    eax,0x201
c0007659:	c1 e8 09             	shr    eax,0x9
c000765c:	50                   	push   eax
c000765d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007661:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007665:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007669:	55                   	push   ebp
c000766a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766e:	e8 a3 a3 ff ff       	call   c0001a16 <disk_write>
c0007673:	83 c4 20             	add    esp,0x20
c0007676:	85 c0                	test   eax,eax
c0007678:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767b:	0f 85 8b 0b 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007681:	89 d0                	mov    eax,edx
c0007683:	31 d2                	xor    edx,edx
c0007685:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007689:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768d:	66 85 db             	test   bx,bx
c0007690:	74 04                	je     c0007696 <f_mkfs+0x53b>
c0007692:	31 c0                	xor    eax,eax
c0007694:	eb b0                	jmp    c0007646 <f_mkfs+0x4eb>
c0007696:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000769a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769e:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a2:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a8:	31 d2                	xor    edx,edx
c00076aa:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b9:	c1 eb 09             	shr    ebx,0x9
c00076bc:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c7:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076cf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d3:	8d 70 01             	lea    esi,[eax+0x1]
c00076d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076de:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e5:	31 d2                	xor    edx,edx
c00076e7:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ef:	89 c1                	mov    ecx,eax
c00076f1:	89 e8                	mov    eax,ebp
c00076f3:	e8 e7 a3 ff ff       	call   c0001adf <mem_set>
c00076f8:	31 c0                	xor    eax,eax
c00076fa:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fd:	76 10                	jbe    c000770f <f_mkfs+0x5b4>
c00076ff:	83 fe 07             	cmp    esi,0x7
c0007702:	76 0b                	jbe    c000770f <f_mkfs+0x5b4>
c0007704:	40                   	inc    eax
c0007705:	83 ee 08             	sub    esi,0x8
c0007708:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770d:	eb eb                	jmp    c00076fa <f_mkfs+0x59f>
c000770f:	b2 01                	mov    dl,0x1
c0007711:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007715:	85 f6                	test   esi,esi
c0007717:	74 0c                	je     c0007725 <f_mkfs+0x5ca>
c0007719:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771c:	76 07                	jbe    c0007725 <f_mkfs+0x5ca>
c000771e:	08 11                	or     BYTE PTR [ecx],dl
c0007720:	4e                   	dec    esi
c0007721:	d1 e2                	shl    edx,1
c0007723:	eb f0                	jmp    c0007715 <f_mkfs+0x5ba>
c0007725:	89 df                	mov    edi,ebx
c0007727:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772b:	76 04                	jbe    c0007731 <f_mkfs+0x5d6>
c000772d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007731:	83 ec 0c             	sub    esp,0xc
c0007734:	57                   	push   edi
c0007735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773d:	55                   	push   ebp
c000773e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007742:	e8 cf a2 ff ff       	call   c0001a16 <disk_write>
c0007747:	83 c4 20             	add    esp,0x20
c000774a:	85 c0                	test   eax,eax
c000774c:	0f 85 ba 0a 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007752:	31 d2                	xor    edx,edx
c0007754:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007758:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775c:	29 fb                	sub    ebx,edi
c000775e:	0f 85 7a ff ff ff    	jne    c00076de <f_mkfs+0x583>
c0007764:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007768:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007770:	31 f6                	xor    esi,esi
c0007772:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007776:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007779:	31 d2                	xor    edx,edx
c000777b:	89 e8                	mov    eax,ebp
c000777d:	e8 5d a3 ff ff       	call   c0001adf <mem_set>
c0007782:	31 c9                	xor    ecx,ecx
c0007784:	85 db                	test   ebx,ebx
c0007786:	75 40                	jne    c00077c8 <f_mkfs+0x66d>
c0007788:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778d:	89 e8                	mov    eax,ebp
c000778f:	bb 02 00 00 00       	mov    ebx,0x2
c0007794:	e8 28 a3 ff ff       	call   c0001ac1 <st_dword>
c0007799:	8d 45 04             	lea    eax,[ebp+0x4]
c000779c:	83 ca ff             	or     edx,0xffffffff
c000779f:	e8 1d a3 ff ff       	call   c0001ac1 <st_dword>
c00077a4:	b9 08 00 00 00       	mov    ecx,0x8
c00077a9:	eb 1d                	jmp    c00077c8 <f_mkfs+0x66d>
c00077ab:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ae:	76 3b                	jbe    c00077eb <f_mkfs+0x690>
c00077b0:	43                   	inc    ebx
c00077b1:	83 fe 01             	cmp    esi,0x1
c00077b4:	89 da                	mov    edx,ebx
c00077b6:	77 03                	ja     c00077bb <f_mkfs+0x660>
c00077b8:	83 ca ff             	or     edx,0xffffffff
c00077bb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077bf:	4e                   	dec    esi
c00077c0:	e8 fc a2 ff ff       	call   c0001ac1 <st_dword>
c00077c5:	83 c1 04             	add    ecx,0x4
c00077c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cc:	85 f6                	test   esi,esi
c00077ce:	75 db                	jne    c00077ab <f_mkfs+0x650>
c00077d0:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d5:	77 14                	ja     c00077eb <f_mkfs+0x690>
c00077d7:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077db:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e2:	85 f6                	test   esi,esi
c00077e4:	74 05                	je     c00077eb <f_mkfs+0x690>
c00077e6:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e9:	77 dd                	ja     c00077c8 <f_mkfs+0x66d>
c00077eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f3:	39 cf                	cmp    edi,ecx
c00077f5:	76 02                	jbe    c00077f9 <f_mkfs+0x69e>
c00077f7:	89 cf                	mov    edi,ecx
c00077f9:	83 ec 0c             	sub    esp,0xc
c00077fc:	57                   	push   edi
c00077fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007801:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007805:	55                   	push   ebp
c0007806:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000780a:	e8 07 a2 ff ff       	call   c0001a16 <disk_write>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	85 c0                	test   eax,eax
c0007814:	0f 85 f2 09 00 00    	jne    c000820c <f_mkfs+0x10b1>
c000781a:	31 d2                	xor    edx,edx
c000781c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007820:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007824:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007828:	0f 85 48 ff ff ff    	jne    c0007776 <f_mkfs+0x61b>
c000782e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007831:	31 d2                	xor    edx,edx
c0007833:	89 e8                	mov    eax,ebp
c0007835:	31 ff                	xor    edi,edi
c0007837:	e8 a3 a2 ff ff       	call   c0001adf <mem_set>
c000783c:	8d 45 34             	lea    eax,[ebp+0x34]
c000783f:	ba 02 00 00 00       	mov    edx,0x2
c0007844:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007848:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784c:	e8 70 a2 ff ff       	call   c0001ac1 <st_dword>
c0007851:	8d 45 38             	lea    eax,[ebp+0x38]
c0007854:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007858:	e8 64 a2 ff ff       	call   c0001ac1 <st_dword>
c000785d:	8d 45 44             	lea    eax,[ebp+0x44]
c0007860:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007864:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007868:	e8 54 a2 ff ff       	call   c0001ac1 <st_dword>
c000786d:	8d 45 54             	lea    eax,[ebp+0x54]
c0007870:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007874:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007878:	83 c2 02             	add    edx,0x2
c000787b:	e8 41 a2 ff ff       	call   c0001ac1 <st_dword>
c0007880:	8d 45 58             	lea    eax,[ebp+0x58]
c0007883:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007887:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788b:	e8 31 a2 ff ff       	call   c0001ac1 <st_dword>
c0007890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007894:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007899:	89 c6                	mov    esi,eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a6:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078aa:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ad:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b1:	39 cb                	cmp    ebx,ecx
c00078b3:	76 02                	jbe    c00078b7 <f_mkfs+0x75c>
c00078b5:	89 cb                	mov    ebx,ecx
c00078b7:	83 ec 0c             	sub    esp,0xc
c00078ba:	53                   	push   ebx
c00078bb:	57                   	push   edi
c00078bc:	56                   	push   esi
c00078bd:	55                   	push   ebp
c00078be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c2:	e8 4f a1 ff ff       	call   c0001a16 <disk_write>
c00078c7:	83 c4 20             	add    esp,0x20
c00078ca:	85 c0                	test   eax,eax
c00078cc:	0f 85 3a 09 00 00    	jne    c000820c <f_mkfs+0x10b1>
c00078d2:	31 d2                	xor    edx,edx
c00078d4:	b9 00 02 00 00       	mov    ecx,0x200
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 ff a1 ff ff       	call   c0001adf <mem_set>
c00078e0:	31 d2                	xor    edx,edx
c00078e2:	01 de                	add    esi,ebx
c00078e4:	11 d7                	adc    edi,edx
c00078e6:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e9:	75 bf                	jne    c00078aa <f_mkfs+0x74f>
c00078eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f3:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fb:	b9 00 02 00 00       	mov    ecx,0x200
c0007900:	31 d2                	xor    edx,edx
c0007902:	89 e8                	mov    eax,ebp
c0007904:	e8 d6 a1 ff ff       	call   c0001adf <mem_set>
c0007909:	b9 0b 00 00 00       	mov    ecx,0xb
c000790e:	ba 00 5e 02 c0       	mov    edx,0xc0025e00
c0007913:	89 e8                	mov    eax,ebp
c0007915:	e8 b0 a1 ff ff       	call   c0001aca <mem_cpy>
c000791a:	8d 45 40             	lea    eax,[ebp+0x40]
c000791d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007921:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007925:	e8 9a a1 ff ff       	call   c0001ac4 <st_qword>
c000792a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007931:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007935:	e8 8a a1 ff ff       	call   c0001ac4 <st_qword>
c000793a:	8d 45 50             	lea    eax,[ebp+0x50]
c000793d:	ba 20 00 00 00       	mov    edx,0x20
c0007942:	e8 7a a1 ff ff       	call   c0001ac1 <st_dword>
c0007947:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794f:	e8 6d a1 ff ff       	call   c0001ac1 <st_dword>
c0007954:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007958:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795c:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007960:	e8 5c a1 ff ff       	call   c0001ac1 <st_dword>
c0007965:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007968:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796c:	e8 50 a1 ff ff       	call   c0001ac1 <st_dword>
c0007971:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007975:	8d 50 02             	lea    edx,[eax+0x2]
c0007978:	8d 45 60             	lea    eax,[ebp+0x60]
c000797b:	e8 41 a1 ff ff       	call   c0001ac1 <st_dword>
c0007980:	8d 45 64             	lea    eax,[ebp+0x64]
c0007983:	ba 00 00 21 50       	mov    edx,0x50210000
c0007988:	e8 34 a1 ff ff       	call   c0001ac1 <st_dword>
c000798d:	8d 45 68             	lea    eax,[ebp+0x68]
c0007990:	ba 00 01 00 00       	mov    edx,0x100
c0007995:	e8 23 a1 ff ff       	call   c0001abd <st_word>
c000799a:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799e:	b8 0a 00 00 00       	mov    eax,0xa
c00079a3:	48                   	dec    eax
c00079a4:	74 05                	je     c00079ab <f_mkfs+0x850>
c00079a6:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a9:	eb f8                	jmp    c00079a3 <f_mkfs+0x848>
c00079ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079af:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b7:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079bb:	74 05                	je     c00079c2 <f_mkfs+0x867>
c00079bd:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079c0:	eb f5                	jmp    c00079b7 <f_mkfs+0x85c>
c00079c2:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c5:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079ca:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079d0:	31 db                	xor    ebx,ebx
c00079d2:	e8 e6 a0 ff ff       	call   c0001abd <st_word>
c00079d7:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e5:	e8 d3 a0 ff ff       	call   c0001abd <st_word>
c00079ea:	31 c9                	xor    ecx,ecx
c00079ec:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ef:	83 f8 01             	cmp    eax,0x1
c00079f2:	76 13                	jbe    c0007a07 <f_mkfs+0x8ac>
c00079f4:	83 f9 70             	cmp    ecx,0x70
c00079f7:	74 0e                	je     c0007a07 <f_mkfs+0x8ac>
c00079f9:	89 da                	mov    edx,ebx
c00079fb:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a00:	e8 41 a5 ff ff       	call   c0001f46 <xsum32>
c0007a05:	89 c3                	mov    ebx,eax
c0007a07:	41                   	inc    ecx
c0007a08:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0e:	75 dc                	jne    c00079ec <f_mkfs+0x891>
c0007a10:	89 f0                	mov    eax,esi
c0007a12:	89 fa                	mov    edx,edi
c0007a14:	83 c0 01             	add    eax,0x1
c0007a17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1b:	83 d2 00             	adc    edx,0x0
c0007a1e:	83 ec 0c             	sub    esp,0xc
c0007a21:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a25:	6a 01                	push   0x1
c0007a27:	57                   	push   edi
c0007a28:	56                   	push   esi
c0007a29:	55                   	push   ebp
c0007a2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2e:	e8 e3 9f ff ff       	call   c0001a16 <disk_write>
c0007a33:	83 c4 20             	add    esp,0x20
c0007a36:	85 c0                	test   eax,eax
c0007a38:	0f 85 ce 07 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007a3e:	31 d2                	xor    edx,edx
c0007a40:	b9 00 02 00 00       	mov    ecx,0x200
c0007a45:	89 e8                	mov    eax,ebp
c0007a47:	e8 93 a0 ff ff       	call   c0001adf <mem_set>
c0007a4c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a54:	e8 64 a0 ff ff       	call   c0001abd <st_word>
c0007a59:	89 f0                	mov    eax,esi
c0007a5b:	89 fa                	mov    edx,edi
c0007a5d:	83 c0 09             	add    eax,0x9
c0007a60:	83 d2 00             	adc    edx,0x0
c0007a63:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a6a:	31 c9                	xor    ecx,ecx
c0007a6c:	41                   	inc    ecx
c0007a6d:	89 da                	mov    edx,ebx
c0007a6f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a74:	e8 cd a4 ff ff       	call   c0001f46 <xsum32>
c0007a79:	89 c3                	mov    ebx,eax
c0007a7b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a81:	75 e9                	jne    c0007a6c <f_mkfs+0x911>
c0007a83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a87:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8b:	83 c0 01             	add    eax,0x1
c0007a8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a92:	83 d2 00             	adc    edx,0x0
c0007a95:	83 ec 0c             	sub    esp,0xc
c0007a98:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9c:	6a 01                	push   0x1
c0007a9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa6:	55                   	push   ebp
c0007aa7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aab:	e8 66 9f ff ff       	call   c0001a16 <disk_write>
c0007ab0:	83 c4 20             	add    esp,0x20
c0007ab3:	85 c0                	test   eax,eax
c0007ab5:	0f 85 51 07 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abf:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac3:	75 09                	jne    c0007ace <f_mkfs+0x973>
c0007ac5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acc:	74 12                	je     c0007ae0 <f_mkfs+0x985>
c0007ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ade:	eb 8a                	jmp    c0007a6a <f_mkfs+0x90f>
c0007ae0:	31 d2                	xor    edx,edx
c0007ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae7:	89 e8                	mov    eax,ebp
c0007ae9:	e8 f1 9f ff ff       	call   c0001adf <mem_set>
c0007aee:	83 c6 0b             	add    esi,0xb
c0007af1:	83 d7 00             	adc    edi,0x0
c0007af4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af8:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afc:	31 c9                	xor    ecx,ecx
c0007afe:	41                   	inc    ecx
c0007aff:	89 da                	mov    edx,ebx
c0007b01:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b06:	e8 3b a4 ff ff       	call   c0001f46 <xsum32>
c0007b0b:	89 c3                	mov    ebx,eax
c0007b0d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b13:	75 e9                	jne    c0007afe <f_mkfs+0x9a3>
c0007b15:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b18:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1c:	83 c6 01             	add    esi,0x1
c0007b1f:	83 d7 00             	adc    edi,0x0
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	6a 01                	push   0x1
c0007b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2f:	55                   	push   ebp
c0007b30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b34:	e8 dd 9e ff ff       	call   c0001a16 <disk_write>
c0007b39:	83 c4 20             	add    esp,0x20
c0007b3c:	85 c0                	test   eax,eax
c0007b3e:	0f 85 c8 06 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007b44:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b48:	75 06                	jne    c0007b50 <f_mkfs+0x9f5>
c0007b4a:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4e:	74 09                	je     c0007b59 <f_mkfs+0x9fe>
c0007b50:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b53:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b57:	eb a3                	jmp    c0007afc <f_mkfs+0x9a1>
c0007b59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5d:	89 da                	mov    edx,ebx
c0007b5f:	01 e8                	add    eax,ebp
c0007b61:	e8 5b 9f ff ff       	call   c0001ac1 <st_dword>
c0007b66:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6b:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b73:	75 e4                	jne    c0007b59 <f_mkfs+0x9fe>
c0007b75:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b78:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7c:	83 c6 02             	add    esi,0x2
c0007b7f:	83 d7 00             	adc    edi,0x0
c0007b82:	83 ec 0c             	sub    esp,0xc
c0007b85:	6a 01                	push   0x1
c0007b87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8f:	55                   	push   ebp
c0007b90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b94:	e8 7d 9e ff ff       	call   c0001a16 <disk_write>
c0007b99:	83 c4 20             	add    esp,0x20
c0007b9c:	85 c0                	test   eax,eax
c0007b9e:	0f 85 68 06 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007ba4:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba9:	74 0d                	je     c0007bb8 <f_mkfs+0xa5d>
c0007bab:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb3:	e9 43 fd ff ff       	jmp    c00078fb <f_mkfs+0x7a0>
c0007bb8:	b1 07                	mov    cl,0x7
c0007bba:	e9 e3 05 00 00       	jmp    c00081a2 <f_mkfs+0x1047>
c0007bbf:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc4:	0f 85 4f 02 00 00    	jne    c0007e19 <f_mkfs+0xcbe>
c0007bca:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bcf:	0f 86 22 02 00 00    	jbe    c0007df7 <f_mkfs+0xc9c>
c0007bd5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bda:	0f 85 81 06 00 00    	jne    c0008261 <f_mkfs+0x1106>
c0007be0:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be7:	83 f8 40             	cmp    eax,0x40
c0007bea:	0f 87 51 06 00 00    	ja     c0008241 <f_mkfs+0x10e6>
c0007bf0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf4:	85 ff                	test   edi,edi
c0007bf6:	75 1c                	jne    c0007c14 <f_mkfs+0xab9>
c0007bf8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfb:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c0007c00:	c1 e9 0c             	shr    ecx,0xc
c0007c03:	bf 01 00 00 00       	mov    edi,0x1
c0007c08:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0b:	66 85 c0             	test   ax,ax
c0007c0e:	0f 85 95 01 00 00    	jne    c0007da9 <f_mkfs+0xc4e>
c0007c14:	31 d2                	xor    edx,edx
c0007c16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c19:	f7 f7                	div    edi
c0007c1b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c20:	0f 86 95 01 00 00    	jbe    c0007dbb <f_mkfs+0xc60>
c0007c26:	83 c0 02             	add    eax,0x2
c0007c29:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2e:	01 c0                	add    eax,eax
c0007c30:	05 ff 01 00 00       	add    eax,0x1ff
c0007c35:	be 01 00 00 00       	mov    esi,0x1
c0007c3a:	c1 e8 09             	shr    eax,0x9
c0007c3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c45:	c1 e0 05             	shl    eax,0x5
c0007c48:	c1 e8 09             	shr    eax,0x9
c0007c4b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4f:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c5a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5e:	89 f0                	mov    eax,esi
c0007c60:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c64:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c74:	31 d2                	xor    edx,edx
c0007c76:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7b:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7f:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c83:	31 db                	xor    ebx,ebx
c0007c85:	01 c8                	add    eax,ecx
c0007c87:	11 da                	adc    edx,ebx
c0007c89:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8d:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c91:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c95:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c99:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9d:	f7 da                	neg    edx
c0007c9f:	21 d1                	and    ecx,edx
c0007ca1:	29 d9                	sub    ecx,ebx
c0007ca3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca8:	0f 85 20 01 00 00    	jne    c0007dce <f_mkfs+0xc73>
c0007cae:	31 db                	xor    ebx,ebx
c0007cb0:	01 ce                	add    esi,ecx
c0007cb2:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb6:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cba:	31 d2                	xor    edx,edx
c0007cbc:	89 f8                	mov    eax,edi
c0007cbe:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc2:	c1 e0 04             	shl    eax,0x4
c0007cc5:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc9:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccd:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd1:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd5:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd8:	19 d3                	sbb    ebx,edx
c0007cda:	0f 82 40 01 00 00    	jb     c0007e20 <f_mkfs+0xcc5>
c0007ce0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce7:	89 c8                	mov    eax,ecx
c0007ce9:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cee:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf2:	29 f0                	sub    eax,esi
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	f7 f7                	div    edi
c0007cfa:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cff:	89 c3                	mov    ebx,eax
c0007d01:	0f 85 b8 fe ff ff    	jne    c0007bbf <f_mkfs+0xa64>
c0007d07:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0c:	0f 87 1d 01 00 00    	ja     c0007e2f <f_mkfs+0xcd4>
c0007d12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d17:	0f 85 03 01 00 00    	jne    c0007e20 <f_mkfs+0xcc5>
c0007d1d:	83 ff 01             	cmp    edi,0x1
c0007d20:	0f 86 fa 00 00 00    	jbe    c0007e20 <f_mkfs+0xcc5>
c0007d26:	d1 ef                	shr    edi,1
c0007d28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d30:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d33:	85 db                	test   ebx,ebx
c0007d35:	75 2d                	jne    c0007d64 <f_mkfs+0xc09>
c0007d37:	89 cb                	mov    ebx,ecx
c0007d39:	ba 10 5d 02 c0       	mov    edx,0xc0025d10
c0007d3e:	c1 eb 11             	shr    ebx,0x11
c0007d41:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d49:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4c:	66 85 c0             	test   ax,ax
c0007d4f:	74 11                	je     c0007d62 <f_mkfs+0xc07>
c0007d51:	83 c2 02             	add    edx,0x2
c0007d54:	39 d8                	cmp    eax,ebx
c0007d56:	77 0a                	ja     c0007d62 <f_mkfs+0xc07>
c0007d58:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5c:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d60:	eb e7                	jmp    c0007d49 <f_mkfs+0xbee>
c0007d62:	31 db                	xor    ebx,ebx
c0007d64:	31 d2                	xor    edx,edx
c0007d66:	89 c8                	mov    eax,ecx
c0007d68:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6c:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d73:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d78:	c1 ea 09             	shr    edx,0x9
c0007d7b:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d80:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d84:	0f 87 96 00 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c0007d8a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d96:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d9a:	be 20 00 00 00       	mov    esi,0x20
c0007d9f:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da4:	e9 a6 fe ff ff       	jmp    c0007c4f <f_mkfs+0xaf4>
c0007da9:	83 c2 02             	add    edx,0x2
c0007dac:	39 c8                	cmp    eax,ecx
c0007dae:	0f 87 60 fe ff ff    	ja     c0007c14 <f_mkfs+0xab9>
c0007db4:	01 ff                	add    edi,edi
c0007db6:	e9 4d fe ff ff       	jmp    c0007c08 <f_mkfs+0xaad>
c0007dbb:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbe:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc3:	40                   	inc    eax
c0007dc4:	d1 e8                	shr    eax,1
c0007dc6:	83 c0 03             	add    eax,0x3
c0007dc9:	e9 62 fe ff ff       	jmp    c0007c30 <f_mkfs+0xad5>
c0007dce:	31 d2                	xor    edx,edx
c0007dd0:	89 c8                	mov    eax,ecx
c0007dd2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd6:	85 d2                	test   edx,edx
c0007dd8:	74 0c                	je     c0007de6 <f_mkfs+0xc8b>
c0007dda:	49                   	dec    ecx
c0007ddb:	46                   	inc    esi
c0007ddc:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de1:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de6:	89 c8                	mov    eax,ecx
c0007de8:	31 d2                	xor    edx,edx
c0007dea:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dee:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df2:	e9 c3 fe ff ff       	jmp    c0007cba <f_mkfs+0xb5f>
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	77 31                	ja     c0007e2f <f_mkfs+0xcd4>
c0007dfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e03:	75 1b                	jne    c0007e20 <f_mkfs+0xcc5>
c0007e05:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0c:	3d 80 00 00 00       	cmp    eax,0x80
c0007e11:	0f 86 d9 fd ff ff    	jbe    c0007bf0 <f_mkfs+0xa95>
c0007e17:	eb 07                	jmp    c0007e20 <f_mkfs+0xcc5>
c0007e19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1e:	76 0a                	jbe    c0007e2a <f_mkfs+0xccf>
c0007e20:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e25:	e9 ff 03 00 00       	jmp    c0008229 <f_mkfs+0x10ce>
c0007e2a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2f:	31 d2                	xor    edx,edx
c0007e31:	b9 00 02 00 00       	mov    ecx,0x200
c0007e36:	89 e8                	mov    eax,ebp
c0007e38:	e8 a2 9c ff ff       	call   c0001adf <mem_set>
c0007e3d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e42:	ba 22 5e 02 c0       	mov    edx,0xc0025e22
c0007e47:	89 e8                	mov    eax,ebp
c0007e49:	e8 7c 9c ff ff       	call   c0001aca <mem_cpy>
c0007e4e:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e51:	ba 00 02 00 00       	mov    edx,0x200
c0007e56:	e8 62 9c ff ff       	call   c0001abd <st_word>
c0007e5b:	89 f8                	mov    eax,edi
c0007e5d:	0f b7 d6             	movzx  edx,si
c0007e60:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e63:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e66:	e8 52 9c ff ff       	call   c0001abd <st_word>
c0007e6b:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e74:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e77:	75 08                	jne    c0007e81 <f_mkfs+0xd26>
c0007e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e81:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e88:	e8 30 9c ff ff       	call   c0001abd <st_word>
c0007e8d:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e92:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e96:	39 d0                	cmp    eax,edx
c0007e98:	b8 00 00 00 00       	mov    eax,0x0
c0007e9d:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea1:	72 0a                	jb     c0007ead <f_mkfs+0xd52>
c0007ea3:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea6:	e8 12 9c ff ff       	call   c0001abd <st_word>
c0007eab:	eb 08                	jmp    c0007eb5 <f_mkfs+0xd5a>
c0007ead:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eb0:	e8 0c 9c ff ff       	call   c0001ac1 <st_dword>
c0007eb5:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb8:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebd:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec1:	e8 f7 9b ff ff       	call   c0001abd <st_word>
c0007ec6:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec9:	ba ff 00 00 00       	mov    edx,0xff
c0007ece:	e8 ea 9b ff ff       	call   c0001abd <st_word>
c0007ed3:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007eda:	e8 e2 9b ff ff       	call   c0001ac1 <st_dword>
c0007edf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee4:	75 57                	jne    c0007f3d <f_mkfs+0xde2>
c0007ee6:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eee:	e8 ce 9b ff ff       	call   c0001ac1 <st_dword>
c0007ef3:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efa:	e8 c2 9b ff ff       	call   c0001ac1 <st_dword>
c0007eff:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f02:	ba 02 00 00 00       	mov    edx,0x2
c0007f07:	e8 b5 9b ff ff       	call   c0001ac1 <st_dword>
c0007f0c:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0f:	ba 01 00 00 00       	mov    edx,0x1
c0007f14:	e8 a4 9b ff ff       	call   c0001abd <st_word>
c0007f19:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1c:	ba 06 00 00 00       	mov    edx,0x6
c0007f21:	e8 97 9b ff ff       	call   c0001abd <st_word>
c0007f26:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f2a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2e:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f31:	b9 13 00 00 00       	mov    ecx,0x13
c0007f36:	ba 2e 5e 02 c0       	mov    edx,0xc0025e2e
c0007f3b:	eb 2f                	jmp    c0007f6c <f_mkfs+0xe11>
c0007f3d:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f40:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f45:	e8 77 9b ff ff       	call   c0001ac1 <st_dword>
c0007f4a:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4f:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f52:	e8 66 9b ff ff       	call   c0001abd <st_word>
c0007f57:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5b:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5f:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f62:	b9 13 00 00 00       	mov    ecx,0x13
c0007f67:	ba 42 5e 02 c0       	mov    edx,0xc0025e42
c0007f6c:	e8 59 9b ff ff       	call   c0001aca <mem_cpy>
c0007f71:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f77:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7c:	89 f0                	mov    eax,esi
c0007f7e:	e8 3a 9b ff ff       	call   c0001abd <st_word>
c0007f83:	83 ec 0c             	sub    esp,0xc
c0007f86:	6a 01                	push   0x1
c0007f88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f90:	55                   	push   ebp
c0007f91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f95:	e8 7c 9a ff ff       	call   c0001a16 <disk_write>
c0007f9a:	83 c4 20             	add    esp,0x20
c0007f9d:	85 c0                	test   eax,eax
c0007f9f:	0f 85 67 02 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007fa5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007faa:	0f 85 b7 00 00 00    	jne    c0008067 <f_mkfs+0xf0c>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	6a 01                	push   0x1
c0007fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbd:	83 c0 06             	add    eax,0x6
c0007fc0:	83 d2 00             	adc    edx,0x0
c0007fc3:	52                   	push   edx
c0007fc4:	50                   	push   eax
c0007fc5:	55                   	push   ebp
c0007fc6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fca:	e8 47 9a ff ff       	call   c0001a16 <disk_write>
c0007fcf:	83 c4 20             	add    esp,0x20
c0007fd2:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd7:	31 d2                	xor    edx,edx
c0007fd9:	89 e8                	mov    eax,ebp
c0007fdb:	e8 ff 9a ff ff       	call   c0001adf <mem_set>
c0007fe0:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe5:	89 e8                	mov    eax,ebp
c0007fe7:	e8 d5 9a ff ff       	call   c0001ac1 <st_dword>
c0007fec:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff2:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff7:	e8 c5 9a ff ff       	call   c0001ac1 <st_dword>
c0007ffc:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fff:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008005:	e8 b7 9a ff ff       	call   c0001ac1 <st_dword>
c000800a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008010:	ba 02 00 00 00       	mov    edx,0x2
c0008015:	e8 a7 9a ff ff       	call   c0001ac1 <st_dword>
c000801a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801f:	89 f0                	mov    eax,esi
c0008021:	e8 97 9a ff ff       	call   c0001abd <st_word>
c0008026:	83 ec 0c             	sub    esp,0xc
c0008029:	6a 01                	push   0x1
c000802b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008033:	83 c0 07             	add    eax,0x7
c0008036:	83 d2 00             	adc    edx,0x0
c0008039:	52                   	push   edx
c000803a:	50                   	push   eax
c000803b:	55                   	push   ebp
c000803c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008040:	e8 d1 99 ff ff       	call   c0001a16 <disk_write>
c0008045:	83 c4 14             	add    esp,0x14
c0008048:	6a 01                	push   0x1
c000804a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008052:	83 c0 01             	add    eax,0x1
c0008055:	83 d2 00             	adc    edx,0x0
c0008058:	52                   	push   edx
c0008059:	50                   	push   eax
c000805a:	55                   	push   ebp
c000805b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805f:	e8 b2 99 ff ff       	call   c0001a16 <disk_write>
c0008064:	83 c4 20             	add    esp,0x20
c0008067:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806e:	31 d2                	xor    edx,edx
c0008070:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008076:	31 db                	xor    ebx,ebx
c0008078:	89 e8                	mov    eax,ebp
c000807a:	e8 60 9a ff ff       	call   c0001adf <mem_set>
c000807f:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008084:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808b:	0f 94 c3             	sete   bl
c000808e:	4b                   	dec    ebx
c000808f:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008095:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080a0:	75 21                	jne    c00080c3 <f_mkfs+0xf68>
c00080a2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a7:	89 e8                	mov    eax,ebp
c00080a9:	e8 13 9a ff ff       	call   c0001ac1 <st_dword>
c00080ae:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b1:	83 ca ff             	or     edx,0xffffffff
c00080b4:	e8 08 9a ff ff       	call   c0001ac1 <st_dword>
c00080b9:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bc:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c1:	eb 04                	jmp    c00080c7 <f_mkfs+0xf6c>
c00080c3:	89 da                	mov    edx,ebx
c00080c5:	89 e8                	mov    eax,ebp
c00080c7:	e8 f5 99 ff ff       	call   c0001ac1 <st_dword>
c00080cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080dc:	39 ce                	cmp    esi,ecx
c00080de:	76 02                	jbe    c00080e2 <f_mkfs+0xf87>
c00080e0:	89 ce                	mov    esi,ecx
c00080e2:	83 ec 0c             	sub    esp,0xc
c00080e5:	56                   	push   esi
c00080e6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ee:	55                   	push   ebp
c00080ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f3:	e8 1e 99 ff ff       	call   c0001a16 <disk_write>
c00080f8:	83 c4 20             	add    esp,0x20
c00080fb:	85 c0                	test   eax,eax
c00080fd:	0f 85 09 01 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0008103:	31 d2                	xor    edx,edx
c0008105:	b9 00 02 00 00       	mov    ecx,0x200
c000810a:	89 e8                	mov    eax,ebp
c000810c:	e8 ce 99 ff ff       	call   c0001adf <mem_set>
c0008111:	31 d2                	xor    edx,edx
c0008113:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008117:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811f:	75 b3                	jne    c00080d4 <f_mkfs+0xf79>
c0008121:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008124:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812b:	40                   	inc    eax
c000812c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008130:	0f 87 65 ff ff ff    	ja     c000809b <f_mkfs+0xf40>
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 04                	je     c0008141 <f_mkfs+0xfe6>
c000813d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008141:	89 fb                	mov    ebx,edi
c0008143:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008147:	76 04                	jbe    c000814d <f_mkfs+0xff2>
c0008149:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814d:	83 ec 0c             	sub    esp,0xc
c0008150:	53                   	push   ebx
c0008151:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008155:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008159:	55                   	push   ebp
c000815a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815e:	e8 b3 98 ff ff       	call   c0001a16 <disk_write>
c0008163:	83 c4 20             	add    esp,0x20
c0008166:	85 c0                	test   eax,eax
c0008168:	0f 85 9e 00 00 00    	jne    c000820c <f_mkfs+0x10b1>
c000816e:	31 d2                	xor    edx,edx
c0008170:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008174:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008178:	29 df                	sub    edi,ebx
c000817a:	75 c5                	jne    c0008141 <f_mkfs+0xfe6>
c000817c:	b1 0c                	mov    cl,0xc
c000817e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008183:	74 1d                	je     c00081a2 <f_mkfs+0x1047>
c0008185:	b8 ff ff 00 00       	mov    eax,0xffff
c000818a:	b1 06                	mov    cl,0x6
c000818c:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008190:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008194:	72 0c                	jb     c00081a2 <f_mkfs+0x1047>
c0008196:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819b:	0f 94 c1             	sete   cl
c000819e:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a2:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a7:	75 4c                	jne    c00081f5 <f_mkfs+0x109a>
c00081a9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ad:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081bf:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081ca:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d5:	0f b6 c9             	movzx  ecx,cl
c00081d8:	83 ec 0c             	sub    esp,0xc
c00081db:	55                   	push   ebp
c00081dc:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e7:	e8 2f c2 ff ff       	call   c000441b <create_partition>
c00081ec:	83 c4 10             	add    esp,0x10
c00081ef:	89 c3                	mov    ebx,eax
c00081f1:	85 c0                	test   eax,eax
c00081f3:	75 34                	jne    c0008229 <f_mkfs+0x10ce>
c00081f5:	31 db                	xor    ebx,ebx
c00081f7:	50                   	push   eax
c00081f8:	6a 00                	push   0x0
c00081fa:	6a 00                	push   0x0
c00081fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008200:	e8 27 98 ff ff       	call   c0001a2c <disk_ioctl>
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	85 c0                	test   eax,eax
c000820a:	74 1d                	je     c0008229 <f_mkfs+0x10ce>
c000820c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008214:	75 0c                	jne    c0008222 <f_mkfs+0x10c7>
c0008216:	83 ec 0c             	sub    esp,0xc
c0008219:	55                   	push   ebp
c000821a:	e8 75 00 00 00       	call   c0008294 <ff_memfree>
c000821f:	83 c4 10             	add    esp,0x10
c0008222:	bb 01 00 00 00       	mov    ebx,0x1
c0008227:	eb 48                	jmp    c0008271 <f_mkfs+0x1116>
c0008229:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008231:	75 3e                	jne    c0008271 <f_mkfs+0x1116>
c0008233:	83 ec 0c             	sub    esp,0xc
c0008236:	55                   	push   ebp
c0008237:	e8 58 00 00 00       	call   c0008294 <ff_memfree>
c000823c:	83 c4 10             	add    esp,0x10
c000823f:	eb 30                	jmp    c0008271 <f_mkfs+0x1116>
c0008241:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008246:	0f 85 eb fa ff ff    	jne    c0007d37 <f_mkfs+0xbdc>
c000824c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008250:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008256:	0f 86 b8 f9 ff ff    	jbe    c0007c14 <f_mkfs+0xab9>
c000825c:	e9 bf fb ff ff       	jmp    c0007e20 <f_mkfs+0xcc5>
c0008261:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008266:	0f 85 c0 fa ff ff    	jne    c0007d2c <f_mkfs+0xbd1>
c000826c:	e9 af fb ff ff       	jmp    c0007e20 <f_mkfs+0xcc5>
c0008271:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008277:	89 d8                	mov    eax,ebx
c0008279:	5b                   	pop    ebx
c000827a:	5e                   	pop    esi
c000827b:	5f                   	pop    edi
c000827c:	5d                   	pop    ebp
c000827d:	c3                   	ret    

c000827e <ff_memalloc>:
c000827e:	83 ec 0c             	sub    esp,0xc
c0008281:	83 ec 0c             	sub    esp,0xc
c0008284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008288:	e8 b1 6e 00 00       	call   c000f13e <malloc>
c000828d:	83 c4 10             	add    esp,0x10
c0008290:	83 c4 0c             	add    esp,0xc
c0008293:	c3                   	ret    

c0008294 <ff_memfree>:
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	83 ec 0c             	sub    esp,0xc
c000829a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829e:	e8 ab 6e 00 00       	call   c000f14e <free>
c00082a3:	83 c4 10             	add    esp,0x10
c00082a6:	90                   	nop
c00082a7:	83 c4 0c             	add    esp,0xc
c00082aa:	c3                   	ret    

c00082ab <ff_uni2oem>:
c00082ab:	83 ec 14             	sub    esp,0x14
c00082ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b2:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b6:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bd:	c7 44 24 0c 60 61 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026160
c00082c5:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082ca:	77 0b                	ja     c00082d7 <ff_uni2oem+0x2c>
c00082cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082d0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d5:	eb 5b                	jmp    c0008332 <ff_uni2oem+0x87>
c00082d7:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082df:	77 51                	ja     c0008332 <ff_uni2oem+0x87>
c00082e1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e7:	75 49                	jne    c0008332 <ff_uni2oem+0x87>
c00082e9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082f0:	eb 0b                	jmp    c00082fd <ff_uni2oem+0x52>
c00082f2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f7:	40                   	inc    eax
c00082f8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fd:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008303:	77 1b                	ja     c0008320 <ff_uni2oem+0x75>
c0008305:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000830a:	01 c0                	add    eax,eax
c000830c:	89 c2                	mov    edx,eax
c000830e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008312:	01 d0                	add    eax,edx
c0008314:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008317:	0f b7 c0             	movzx  eax,ax
c000831a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831e:	75 d2                	jne    c00082f2 <ff_uni2oem+0x47>
c0008320:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008325:	83 e8 80             	sub    eax,0xffffff80
c0008328:	25 ff 00 00 00       	and    eax,0xff
c000832d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008332:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008337:	83 c4 14             	add    esp,0x14
c000833a:	c3                   	ret    

c000833b <ff_oem2uni>:
c000833b:	83 ec 18             	sub    esp,0x18
c000833e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008346:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834f:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008356:	c7 44 24 10 60 61 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026160
c000835e:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008364:	77 0b                	ja     c0008371 <ff_oem2uni+0x36>
c0008366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000836a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836f:	eb 2d                	jmp    c000839e <ff_oem2uni+0x63>
c0008371:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008377:	75 25                	jne    c000839e <ff_oem2uni+0x63>
c0008379:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008380:	77 1c                	ja     c000839e <ff_oem2uni+0x63>
c0008382:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008387:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838c:	01 c0                	add    eax,eax
c000838e:	89 c2                	mov    edx,eax
c0008390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008394:	01 d0                	add    eax,edx
c0008396:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008399:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839e:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a3:	83 c4 18             	add    esp,0x18
c00083a6:	c3                   	ret    

c00083a7 <ff_wtoupper>:
c00083a7:	83 ec 10             	sub    esp,0x10
c00083aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b2:	0f 87 3e 01 00 00    	ja     c00084f6 <ff_wtoupper+0x14f>
c00083b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c1:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c8:	77 07                	ja     c00083d1 <ff_wtoupper+0x2a>
c00083ca:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c00083cf:	eb 05                	jmp    c00083d6 <ff_wtoupper+0x2f>
c00083d1:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c00083d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083de:	8d 50 02             	lea    edx,[eax+0x2]
c00083e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ed:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f3:	0f 84 f4 00 00 00    	je     c00084ed <ff_wtoupper+0x146>
c00083f9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fe:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008403:	0f 82 e4 00 00 00    	jb     c00084ed <ff_wtoupper+0x146>
c0008409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840d:	8d 50 02             	lea    edx,[eax+0x2]
c0008410:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008414:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008417:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008421:	66 c1 e8 08          	shr    ax,0x8
c0008425:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000842a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008431:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008436:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008440:	01 ca                	add    edx,ecx
c0008442:	39 d0                	cmp    eax,edx
c0008444:	0f 8d 86 00 00 00    	jge    c00084d0 <ff_wtoupper+0x129>
c000844a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844f:	83 f8 08             	cmp    eax,0x8
c0008452:	0f 87 94 00 00 00    	ja     c00084ec <ff_wtoupper+0x145>
c0008458:	8b 04 85 60 5e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda1a0]
c000845f:	ff e0                	jmp    eax
c0008461:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008466:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846b:	29 c2                	sub    edx,eax
c000846d:	89 d0                	mov    eax,edx
c000846f:	01 c0                	add    eax,eax
c0008471:	89 c2                	mov    edx,eax
c0008473:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008477:	01 d0                	add    eax,edx
c0008479:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008481:	eb 4b                	jmp    c00084ce <ff_wtoupper+0x127>
c0008483:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008488:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848c:	83 e0 01             	and    eax,0x1
c000848f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008494:	eb 38                	jmp    c00084ce <ff_wtoupper+0x127>
c0008496:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849c:	eb 30                	jmp    c00084ce <ff_wtoupper+0x127>
c000849e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a4:	eb 28                	jmp    c00084ce <ff_wtoupper+0x127>
c00084a6:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ac:	eb 20                	jmp    c00084ce <ff_wtoupper+0x127>
c00084ae:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b4:	eb 18                	jmp    c00084ce <ff_wtoupper+0x127>
c00084b6:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bc:	eb 10                	jmp    c00084ce <ff_wtoupper+0x127>
c00084be:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c4:	eb 08                	jmp    c00084ce <ff_wtoupper+0x127>
c00084c6:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cd:	90                   	nop
c00084ce:	eb 1c                	jmp    c00084ec <ff_wtoupper+0x145>
c00084d0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d6:	0f 85 fe fe ff ff    	jne    c00083da <ff_wtoupper+0x33>
c00084dc:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e1:	01 c0                	add    eax,eax
c00084e3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e7:	e9 ee fe ff ff       	jmp    c00083da <ff_wtoupper+0x33>
c00084ec:	90                   	nop
c00084ed:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	c3                   	ret    

c00084fe <is_bad_src_ratio>:
c00084fe:	83 ec 1c             	sub    esp,0x1c
c0008501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008505:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008509:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000850d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008511:	b8 00 00 00 00       	mov    eax,0x0
c0008516:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000851b:	52                   	push   edx
c000851c:	50                   	push   eax
c000851d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008525:	e8 05 c9 01 00       	call   c0024e2f <__ltdf2>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	85 c0                	test   eax,eax
c000852f:	78 20                	js     c0008551 <is_bad_src_ratio+0x53>
c0008531:	b8 00 00 00 00       	mov    eax,0x0
c0008536:	ba 00 00 70 40       	mov    edx,0x40700000
c000853b:	52                   	push   edx
c000853c:	50                   	push   eax
c000853d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008545:	e8 c7 c8 01 00       	call   c0024e11 <__gtdf2>
c000854a:	83 c4 10             	add    esp,0x10
c000854d:	85 c0                	test   eax,eax
c000854f:	7e 07                	jle    c0008558 <is_bad_src_ratio+0x5a>
c0008551:	b8 01 00 00 00       	mov    eax,0x1
c0008556:	eb 05                	jmp    c000855d <is_bad_src_ratio+0x5f>
c0008558:	b8 00 00 00 00       	mov    eax,0x0
c000855d:	83 c4 1c             	add    esp,0x1c
c0008560:	c3                   	ret    

c0008561 <psrc_set_converter>:
c0008561:	56                   	push   esi
c0008562:	89 d6                	mov    esi,edx
c0008564:	53                   	push   ebx
c0008565:	89 c3                	mov    ebx,eax
c0008567:	83 ec 0c             	sub    esp,0xc
c000856a:	52                   	push   edx
c000856b:	50                   	push   eax
c000856c:	e8 58 51 00 00       	call   c000d6c9 <sinc_set_converter>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	85 c0                	test   eax,eax
c0008576:	74 25                	je     c000859d <psrc_set_converter+0x3c>
c0008578:	50                   	push   eax
c0008579:	50                   	push   eax
c000857a:	56                   	push   esi
c000857b:	53                   	push   ebx
c000857c:	e8 2a 59 00 00       	call   c000deab <zoh_set_converter>
c0008581:	83 c4 10             	add    esp,0x10
c0008584:	85 c0                	test   eax,eax
c0008586:	74 15                	je     c000859d <psrc_set_converter+0x3c>
c0008588:	51                   	push   ecx
c0008589:	51                   	push   ecx
c000858a:	56                   	push   esi
c000858b:	53                   	push   ebx
c000858c:	e8 77 10 00 00       	call   c0009608 <linear_set_converter>
c0008591:	83 c4 10             	add    esp,0x10
c0008594:	ba 0a 00 00 00       	mov    edx,0xa
c0008599:	85 c0                	test   eax,eax
c000859b:	75 02                	jne    c000859f <psrc_set_converter+0x3e>
c000859d:	31 d2                	xor    edx,edx
c000859f:	89 d0                	mov    eax,edx
c00085a1:	5a                   	pop    edx
c00085a2:	5b                   	pop    ebx
c00085a3:	5e                   	pop    esi
c00085a4:	c3                   	ret    

c00085a5 <src_delete>:
c00085a5:	53                   	push   ebx
c00085a6:	83 ec 08             	sub    esp,0x8
c00085a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085ad:	85 db                	test   ebx,ebx
c00085af:	74 29                	je     c00085da <src_delete+0x35>
c00085b1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085b4:	85 c0                	test   eax,eax
c00085b6:	74 0c                	je     c00085c4 <src_delete+0x1f>
c00085b8:	83 ec 0c             	sub    esp,0xc
c00085bb:	50                   	push   eax
c00085bc:	e8 8d 6b 00 00       	call   c000f14e <free>
c00085c1:	83 c4 10             	add    esp,0x10
c00085c4:	50                   	push   eax
c00085c5:	6a 3c                	push   0x3c
c00085c7:	6a 00                	push   0x0
c00085c9:	53                   	push   ebx
c00085ca:	e8 f6 80 ff ff       	call   c00006c5 <memset>
c00085cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085d2:	e8 77 6b 00 00       	call   c000f14e <free>
c00085d7:	83 c4 10             	add    esp,0x10
c00085da:	31 c0                	xor    eax,eax
c00085dc:	83 c4 08             	add    esp,0x8
c00085df:	5b                   	pop    ebx
c00085e0:	c3                   	ret    

c00085e1 <src_process>:
c00085e1:	56                   	push   esi
c00085e2:	53                   	push   ebx
c00085e3:	83 ec 14             	sub    esp,0x14
c00085e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00085ea:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00085ee:	85 f6                	test   esi,esi
c00085f0:	0f 84 2a 01 00 00    	je     c0008720 <src_process+0x13f>
c00085f6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085fa:	0f 84 27 01 00 00    	je     c0008727 <src_process+0x146>
c0008600:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008604:	0f 84 1d 01 00 00    	je     c0008727 <src_process+0x146>
c000860a:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008611:	0f 85 17 01 00 00    	jne    c000872e <src_process+0x14d>
c0008617:	85 db                	test   ebx,ebx
c0008619:	0f 84 16 01 00 00    	je     c0008735 <src_process+0x154>
c000861f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008622:	0f 84 14 01 00 00    	je     c000873c <src_process+0x15b>
c0008628:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000862c:	0f 84 0a 01 00 00    	je     c000873c <src_process+0x15b>
c0008632:	50                   	push   eax
c0008633:	50                   	push   eax
c0008634:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008637:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000863a:	e8 bf fe ff ff       	call   c00084fe <is_bad_src_ratio>
c000863f:	83 c4 10             	add    esp,0x10
c0008642:	85 c0                	test   eax,eax
c0008644:	0f 85 f9 00 00 00    	jne    c0008743 <src_process+0x162>
c000864a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000864e:	79 07                	jns    c0008657 <src_process+0x76>
c0008650:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008657:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000865b:	79 07                	jns    c0008664 <src_process+0x83>
c000865d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008664:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008666:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008669:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000866c:	39 ca                	cmp    edx,ecx
c000866e:	73 0b                	jae    c000867b <src_process+0x9a>
c0008670:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008674:	8d 04 82             	lea    eax,[edx+eax*4]
c0008677:	39 c1                	cmp    ecx,eax
c0008679:	eb 09                	jmp    c0008684 <src_process+0xa3>
c000867b:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000867f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008682:	39 c2                	cmp    edx,eax
c0008684:	0f 82 c0 00 00 00    	jb     c000874a <src_process+0x169>
c000868a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008691:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008698:	68 00 00 70 3f       	push   0x3f700000
c000869d:	6a 00                	push   0x0
c000869f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086a2:	ff 36                	push   DWORD PTR [esi]
c00086a4:	e8 86 c7 01 00       	call   c0024e2f <__ltdf2>
c00086a9:	83 c4 10             	add    esp,0x10
c00086ac:	85 c0                	test   eax,eax
c00086ae:	79 0b                	jns    c00086bb <src_process+0xda>
c00086b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086b3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086b6:	89 06                	mov    DWORD PTR [esi],eax
c00086b8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086bb:	83 ec 10             	sub    esp,0x10
c00086be:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086c1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086c4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086c7:	ff 36                	push   DWORD PTR [esi]
c00086c9:	e8 66 be 01 00       	call   c0024534 <__subdf3>
c00086ce:	83 c4 18             	add    esp,0x18
c00086d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086d9:	52                   	push   edx
c00086da:	50                   	push   eax
c00086db:	e8 e0 c8 01 00       	call   c0024fc0 <fabs>
c00086e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086e8:	83 c4 10             	add    esp,0x10
c00086eb:	68 af 03 d2 3c       	push   0x3cd203af
c00086f0:	68 16 56 e7 9e       	push   0x9ee75616
c00086f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086fd:	e8 2d c7 01 00       	call   c0024e2f <__ltdf2>
c0008702:	83 c4 10             	add    esp,0x10
c0008705:	85 c0                	test   eax,eax
c0008707:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c000870b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000870f:	79 05                	jns    c0008716 <src_process+0x135>
c0008711:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008714:	eb 03                	jmp    c0008719 <src_process+0x138>
c0008716:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008719:	83 c4 14             	add    esp,0x14
c000871c:	5b                   	pop    ebx
c000871d:	5e                   	pop    esi
c000871e:	ff e0                	jmp    eax
c0008720:	b8 02 00 00 00       	mov    eax,0x2
c0008725:	eb 28                	jmp    c000874f <src_process+0x16e>
c0008727:	b8 07 00 00 00       	mov    eax,0x7
c000872c:	eb 21                	jmp    c000874f <src_process+0x16e>
c000872e:	b8 12 00 00 00       	mov    eax,0x12
c0008733:	eb 1a                	jmp    c000874f <src_process+0x16e>
c0008735:	b8 03 00 00 00       	mov    eax,0x3
c000873a:	eb 13                	jmp    c000874f <src_process+0x16e>
c000873c:	b8 04 00 00 00       	mov    eax,0x4
c0008741:	eb 0c                	jmp    c000874f <src_process+0x16e>
c0008743:	b8 06 00 00 00       	mov    eax,0x6
c0008748:	eb 05                	jmp    c000874f <src_process+0x16e>
c000874a:	b8 10 00 00 00       	mov    eax,0x10
c000874f:	83 c4 14             	add    esp,0x14
c0008752:	5b                   	pop    ebx
c0008753:	5e                   	pop    esi
c0008754:	c3                   	ret    

c0008755 <src_callback_read>:
c0008755:	55                   	push   ebp
c0008756:	57                   	push   edi
c0008757:	56                   	push   esi
c0008758:	53                   	push   ebx
c0008759:	83 ec 3c             	sub    esp,0x3c
c000875c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008760:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008764:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008768:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000876c:	85 ed                	test   ebp,ebp
c000876e:	0f 8e 30 01 00 00    	jle    c00088a4 <src_callback_read+0x14f>
c0008774:	85 db                	test   ebx,ebx
c0008776:	0f 84 28 01 00 00    	je     c00088a4 <src_callback_read+0x14f>
c000877c:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008783:	74 0c                	je     c0008791 <src_callback_read+0x3c>
c0008785:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000878c:	e9 13 01 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c0008791:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008795:	75 0c                	jne    c00087a3 <src_callback_read+0x4e>
c0008797:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000879e:	e9 01 01 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c00087a3:	51                   	push   ecx
c00087a4:	6a 24                	push   0x24
c00087a6:	6a 00                	push   0x0
c00087a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087ac:	50                   	push   eax
c00087ad:	e8 13 7f ff ff       	call   c00006c5 <memset>
c00087b2:	58                   	pop    eax
c00087b3:	5a                   	pop    edx
c00087b4:	57                   	push   edi
c00087b5:	56                   	push   esi
c00087b6:	e8 43 fd ff ff       	call   c00084fe <is_bad_src_ratio>
c00087bb:	83 c4 10             	add    esp,0x10
c00087be:	85 c0                	test   eax,eax
c00087c0:	74 0c                	je     c00087ce <src_callback_read+0x79>
c00087c2:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087c9:	e9 d6 00 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c00087ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087d2:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087da:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087de:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087e1:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087e9:	31 f6                	xor    esi,esi
c00087eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087f2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00087f7:	75 30                	jne    c0008829 <src_callback_read+0xd4>
c00087f9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008801:	52                   	push   edx
c0008802:	52                   	push   edx
c0008803:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008807:	50                   	push   eax
c0008808:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000880b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000880e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008812:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008816:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000881a:	83 c4 10             	add    esp,0x10
c000881d:	85 c0                	test   eax,eax
c000881f:	75 08                	jne    c0008829 <src_callback_read+0xd4>
c0008821:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008829:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008830:	50                   	push   eax
c0008831:	50                   	push   eax
c0008832:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008836:	50                   	push   eax
c0008837:	53                   	push   ebx
c0008838:	e8 a4 fd ff ff       	call   c00085e1 <src_process>
c000883d:	83 c4 10             	add    esp,0x10
c0008840:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008847:	85 c0                	test   eax,eax
c0008849:	75 42                	jne    c000888d <src_callback_read+0x138>
c000884b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000884f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008852:	89 f9                	mov    ecx,edi
c0008854:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008858:	0f af ca             	imul   ecx,edx
c000885b:	c1 e1 02             	shl    ecx,0x2
c000885e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008862:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008866:	0f af d1             	imul   edx,ecx
c0008869:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000886d:	c1 e2 02             	shl    edx,0x2
c0008870:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008874:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008877:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000887c:	75 04                	jne    c0008882 <src_callback_read+0x12d>
c000887e:	85 c9                	test   ecx,ecx
c0008880:	74 0b                	je     c000888d <src_callback_read+0x138>
c0008882:	39 d5                	cmp    ebp,edx
c0008884:	7e 09                	jle    c000888f <src_callback_read+0x13a>
c0008886:	89 d6                	mov    esi,edx
c0008888:	e9 65 ff ff ff       	jmp    c00087f2 <src_callback_read+0x9d>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x151>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	b8 02 00 00 00       	mov    eax,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 2d                	je     c00088f5 <src_set_ratio+0x45>
c00088c8:	b8 07 00 00 00       	mov    eax,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 22                	je     c00088f5 <src_set_ratio+0x45>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 1c                	je     c00088f5 <src_set_ratio+0x45>
c00088d9:	50                   	push   eax
c00088da:	50                   	push   eax
c00088db:	57                   	push   edi
c00088dc:	56                   	push   esi
c00088dd:	e8 1c fc ff ff       	call   c00084fe <is_bad_src_ratio>
c00088e2:	83 c4 10             	add    esp,0x10
c00088e5:	85 c0                	test   eax,eax
c00088e7:	75 07                	jne    c00088f0 <src_set_ratio+0x40>
c00088e9:	89 33                	mov    DWORD PTR [ebx],esi
c00088eb:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088ee:	eb 05                	jmp    c00088f5 <src_set_ratio+0x45>
c00088f0:	b8 06 00 00 00       	mov    eax,0x6
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	c3                   	ret    

c00088f9 <src_get_channels>:
c00088f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088fd:	b8 02 00 00 00       	mov    eax,0x2
c0008902:	85 d2                	test   edx,edx
c0008904:	74 14                	je     c000891a <src_get_channels+0x21>
c0008906:	b8 07 00 00 00       	mov    eax,0x7
c000890b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c000890f:	74 09                	je     c000891a <src_get_channels+0x21>
c0008911:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008915:	74 03                	je     c000891a <src_get_channels+0x21>
c0008917:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000891a:	c3                   	ret    

c000891b <src_reset>:
c000891b:	53                   	push   ebx
c000891c:	b8 02 00 00 00       	mov    eax,0x2
c0008921:	83 ec 08             	sub    esp,0x8
c0008924:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008928:	85 db                	test   ebx,ebx
c000892a:	74 36                	je     c0008962 <src_reset+0x47>
c000892c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000892f:	85 c0                	test   eax,eax
c0008931:	74 09                	je     c000893c <src_reset+0x21>
c0008933:	83 ec 0c             	sub    esp,0xc
c0008936:	53                   	push   ebx
c0008937:	ff d0                	call   eax
c0008939:	83 c4 10             	add    esp,0x10
c000893c:	31 c0                	xor    eax,eax
c000893e:	31 d2                	xor    edx,edx
c0008940:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008943:	89 03                	mov    DWORD PTR [ebx],eax
c0008945:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008948:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000894b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008952:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008959:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008960:	31 c0                	xor    eax,eax
c0008962:	83 c4 08             	add    esp,0x8
c0008965:	5b                   	pop    ebx
c0008966:	c3                   	ret    

c0008967 <src_new>:
c0008967:	57                   	push   edi
c0008968:	56                   	push   esi
c0008969:	53                   	push   ebx
c000896a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000896e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008972:	85 f6                	test   esi,esi
c0008974:	74 73                	je     c00089e9 <src_new+0x82>
c0008976:	85 ff                	test   edi,edi
c0008978:	7f 08                	jg     c0008982 <src_new+0x1b>
c000897a:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008980:	eb 1e                	jmp    c00089a0 <src_new+0x39>
c0008982:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008988:	50                   	push   eax
c0008989:	50                   	push   eax
c000898a:	6a 3c                	push   0x3c
c000898c:	6a 01                	push   0x1
c000898e:	e8 db 67 00 00       	call   c000f16e <calloc>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	89 c3                	mov    ebx,eax
c0008998:	85 c0                	test   eax,eax
c000899a:	75 10                	jne    c00089ac <src_new+0x45>
c000899c:	85 f6                	test   esi,esi
c000899e:	75 04                	jne    c00089a4 <src_new+0x3d>
c00089a0:	31 db                	xor    ebx,ebx
c00089a2:	eb 4b                	jmp    c00089ef <src_new+0x88>
c00089a4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089aa:	eb 43                	jmp    c00089ef <src_new+0x88>
c00089ac:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089af:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089ba:	e8 a2 fb ff ff       	call   c0008561 <psrc_set_converter>
c00089bf:	85 c0                	test   eax,eax
c00089c1:	74 18                	je     c00089db <src_new+0x74>
c00089c3:	85 f6                	test   esi,esi
c00089c5:	74 06                	je     c00089cd <src_new+0x66>
c00089c7:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089cd:	83 ec 0c             	sub    esp,0xc
c00089d0:	53                   	push   ebx
c00089d1:	31 db                	xor    ebx,ebx
c00089d3:	e8 76 67 00 00       	call   c000f14e <free>
c00089d8:	83 c4 10             	add    esp,0x10
c00089db:	83 ec 0c             	sub    esp,0xc
c00089de:	53                   	push   ebx
c00089df:	e8 37 ff ff ff       	call   c000891b <src_reset>
c00089e4:	83 c4 10             	add    esp,0x10
c00089e7:	eb 06                	jmp    c00089ef <src_new+0x88>
c00089e9:	85 ff                	test   edi,edi
c00089eb:	7f 9b                	jg     c0008988 <src_new+0x21>
c00089ed:	eb b1                	jmp    c00089a0 <src_new+0x39>
c00089ef:	89 d8                	mov    eax,ebx
c00089f1:	5b                   	pop    ebx
c00089f2:	5e                   	pop    esi
c00089f3:	5f                   	pop    edi
c00089f4:	c3                   	ret    

c00089f5 <src_callback_new>:
c00089f5:	56                   	push   esi
c00089f6:	53                   	push   ebx
c00089f7:	53                   	push   ebx
c00089f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a00:	85 f6                	test   esi,esi
c0008a02:	75 0e                	jne    c0008a12 <src_callback_new+0x1d>
c0008a04:	31 db                	xor    ebx,ebx
c0008a06:	85 c0                	test   eax,eax
c0008a08:	74 47                	je     c0008a51 <src_callback_new+0x5c>
c0008a0a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a10:	eb 3f                	jmp    c0008a51 <src_callback_new+0x5c>
c0008a12:	85 c0                	test   eax,eax
c0008a14:	74 06                	je     c0008a1c <src_callback_new+0x27>
c0008a16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1c:	51                   	push   ecx
c0008a1d:	50                   	push   eax
c0008a1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a26:	e8 3c ff ff ff       	call   c0008967 <src_new>
c0008a2b:	83 c4 10             	add    esp,0x10
c0008a2e:	89 c3                	mov    ebx,eax
c0008a30:	85 c0                	test   eax,eax
c0008a32:	74 1d                	je     c0008a51 <src_callback_new+0x5c>
c0008a34:	83 ec 0c             	sub    esp,0xc
c0008a37:	50                   	push   eax
c0008a38:	e8 de fe ff ff       	call   c000891b <src_reset>
c0008a3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a41:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a48:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a4b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	89 d8                	mov    eax,ebx
c0008a53:	5a                   	pop    edx
c0008a54:	5b                   	pop    ebx
c0008a55:	5e                   	pop    esi
c0008a56:	c3                   	ret    

c0008a57 <src_get_name>:
c0008a57:	53                   	push   ebx
c0008a58:	83 ec 14             	sub    esp,0x14
c0008a5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a5f:	53                   	push   ebx
c0008a60:	e8 3e 4c 00 00       	call   c000d6a3 <sinc_get_name>
c0008a65:	83 c4 10             	add    esp,0x10
c0008a68:	85 c0                	test   eax,eax
c0008a6a:	75 1d                	jne    c0008a89 <src_get_name+0x32>
c0008a6c:	83 ec 0c             	sub    esp,0xc
c0008a6f:	53                   	push   ebx
c0008a70:	e8 18 54 00 00       	call   c000de8d <zoh_get_name>
c0008a75:	83 c4 10             	add    esp,0x10
c0008a78:	85 c0                	test   eax,eax
c0008a7a:	75 0d                	jne    c0008a89 <src_get_name+0x32>
c0008a7c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a80:	83 c4 08             	add    esp,0x8
c0008a83:	5b                   	pop    ebx
c0008a84:	e9 61 0b 00 00       	jmp    c00095ea <linear_get_name>
c0008a89:	83 c4 08             	add    esp,0x8
c0008a8c:	5b                   	pop    ebx
c0008a8d:	c3                   	ret    

c0008a8e <src_get_description>:
c0008a8e:	53                   	push   ebx
c0008a8f:	83 ec 14             	sub    esp,0x14
c0008a92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a96:	53                   	push   ebx
c0008a97:	e8 1a 4c 00 00       	call   c000d6b6 <sinc_get_description>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 1d                	jne    c0008ac0 <src_get_description+0x32>
c0008aa3:	83 ec 0c             	sub    esp,0xc
c0008aa6:	53                   	push   ebx
c0008aa7:	e8 f0 53 00 00       	call   c000de9c <zoh_get_description>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	85 c0                	test   eax,eax
c0008ab1:	75 0d                	jne    c0008ac0 <src_get_description+0x32>
c0008ab3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	e9 39 0b 00 00       	jmp    c00095f9 <linear_get_description>
c0008ac0:	83 c4 08             	add    esp,0x8
c0008ac3:	5b                   	pop    ebx
c0008ac4:	c3                   	ret    

c0008ac5 <src_get_version>:
c0008ac5:	b8 60 62 02 c0       	mov    eax,0xc0026260
c0008aca:	c3                   	ret    

c0008acb <src_is_valid_ratio>:
c0008acb:	83 ec 14             	sub    esp,0x14
c0008ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad6:	e8 23 fa ff ff       	call   c00084fe <is_bad_src_ratio>
c0008adb:	85 c0                	test   eax,eax
c0008add:	0f 94 c0             	sete   al
c0008ae0:	83 c4 1c             	add    esp,0x1c
c0008ae3:	0f b6 c0             	movzx  eax,al
c0008ae6:	c3                   	ret    

c0008ae7 <src_error>:
c0008ae7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008aeb:	31 c0                	xor    eax,eax
c0008aed:	85 d2                	test   edx,edx
c0008aef:	74 03                	je     c0008af4 <src_error+0xd>
c0008af1:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008af4:	c3                   	ret    

c0008af5 <src_strerror>:
c0008af5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008af9:	31 c0                	xor    eax,eax
c0008afb:	83 fa 17             	cmp    edx,0x17
c0008afe:	77 07                	ja     c0008b07 <src_strerror+0x12>
c0008b00:	8b 04 95 c0 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9940]
c0008b07:	c3                   	ret    

c0008b08 <src_simple>:
c0008b08:	56                   	push   esi
c0008b09:	53                   	push   ebx
c0008b0a:	83 ec 18             	sub    esp,0x18
c0008b0d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b11:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b15:	50                   	push   eax
c0008b16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b1e:	e8 44 fe ff ff       	call   c0008967 <src_new>
c0008b23:	83 c4 10             	add    esp,0x10
c0008b26:	85 c0                	test   eax,eax
c0008b28:	75 06                	jne    c0008b30 <src_simple+0x28>
c0008b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b2e:	eb 25                	jmp    c0008b55 <src_simple+0x4d>
c0008b30:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b37:	89 c3                	mov    ebx,eax
c0008b39:	50                   	push   eax
c0008b3a:	50                   	push   eax
c0008b3b:	56                   	push   esi
c0008b3c:	53                   	push   ebx
c0008b3d:	e8 9f fa ff ff       	call   c00085e1 <src_process>
c0008b42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b49:	e8 57 fa ff ff       	call   c00085a5 <src_delete>
c0008b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	83 c4 14             	add    esp,0x14
c0008b58:	5b                   	pop    ebx
c0008b59:	5e                   	pop    esi
c0008b5a:	c3                   	ret    

c0008b5b <src_short_to_float_array>:
c0008b5b:	53                   	push   ebx
c0008b5c:	83 ec 18             	sub    esp,0x18
c0008b5f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b63:	85 db                	test   ebx,ebx
c0008b65:	74 54                	je     c0008bbb <src_short_to_float_array+0x60>
c0008b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b6b:	4b                   	dec    ebx
c0008b6c:	83 ec 0c             	sub    esp,0xc
c0008b6f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b73:	50                   	push   eax
c0008b74:	e8 4a c0 01 00       	call   c0024bc3 <__floatsidf>
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b84:	68 00 00 00 3f       	push   0x3f000000
c0008b89:	6a 00                	push   0x0
c0008b8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b93:	e8 c8 b9 01 00       	call   c0024560 <__muldf3>
c0008b98:	59                   	pop    ecx
c0008b99:	59                   	pop    ecx
c0008b9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008b9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ba2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baa:	e8 84 c2 01 00       	call   c0024e33 <__truncdfsf2>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bb6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bb9:	eb a8                	jmp    c0008b63 <src_short_to_float_array+0x8>
c0008bbb:	83 c4 18             	add    esp,0x18
c0008bbe:	5b                   	pop    ebx
c0008bbf:	c3                   	ret    

c0008bc0 <src_float_to_short_array>:
c0008bc0:	56                   	push   esi
c0008bc1:	53                   	push   ebx
c0008bc2:	83 ec 14             	sub    esp,0x14
c0008bc5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bc9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bcd:	85 db                	test   ebx,ebx
c0008bcf:	0f 84 a4 00 00 00    	je     c0008c79 <src_float_to_short_array+0xb9>
c0008bd5:	83 ec 0c             	sub    esp,0xc
c0008bd8:	4b                   	dec    ebx
c0008bd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bdd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008be0:	e8 72 c3 01 00       	call   c0024f57 <__extendsfdf2>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bf0:	68 00 00 e0 41       	push   0x41e00000
c0008bf5:	6a 00                	push   0x0
c0008bf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	e8 5c b9 01 00       	call   c0024560 <__muldf3>
c0008c04:	83 c4 10             	add    esp,0x10
c0008c07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c0f:	68 ff ff df 41       	push   0x41dfffff
c0008c14:	68 00 00 c0 ff       	push   0xffc00000
c0008c19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c21:	e8 07 c2 01 00       	call   c0024e2d <__gedf2>
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	78 08                	js     c0008c35 <src_float_to_short_array+0x75>
c0008c2d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c33:	eb 98                	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c35:	68 00 00 e0 c1       	push   0xc1e00000
c0008c3a:	6a 00                	push   0x0
c0008c3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	e8 e8 c1 01 00       	call   c0024e31 <__ledf2>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	85 c0                	test   eax,eax
c0008c4e:	7f 0b                	jg     c0008c5b <src_float_to_short_array+0x9b>
c0008c50:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c56:	e9 72 ff ff ff       	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c5b:	50                   	push   eax
c0008c5c:	50                   	push   eax
c0008c5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c65:	e8 76 c3 01 00       	call   c0024fe0 <lrint>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	c1 f8 10             	sar    eax,0x10
c0008c70:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c74:	e9 54 ff ff ff       	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c79:	83 c4 14             	add    esp,0x14
c0008c7c:	5b                   	pop    ebx
c0008c7d:	5e                   	pop    esi
c0008c7e:	c3                   	ret    

c0008c7f <src_int_to_float_array>:
c0008c7f:	53                   	push   ebx
c0008c80:	83 ec 18             	sub    esp,0x18
c0008c83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c87:	85 db                	test   ebx,ebx
c0008c89:	74 52                	je     c0008cdd <src_int_to_float_array+0x5e>
c0008c8b:	83 ec 0c             	sub    esp,0xc
c0008c8e:	4b                   	dec    ebx
c0008c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c93:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c96:	e8 28 bf 01 00       	call   c0024bc3 <__floatsidf>
c0008c9b:	83 c4 10             	add    esp,0x10
c0008c9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ca2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ca6:	68 00 00 00 3e       	push   0x3e000000
c0008cab:	6a 00                	push   0x0
c0008cad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb5:	e8 a6 b8 01 00       	call   c0024560 <__muldf3>
c0008cba:	59                   	pop    ecx
c0008cbb:	59                   	pop    ecx
c0008cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ccc:	e8 62 c1 01 00       	call   c0024e33 <__truncdfsf2>
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cdb:	eb aa                	jmp    c0008c87 <src_int_to_float_array+0x8>
c0008cdd:	83 c4 18             	add    esp,0x18
c0008ce0:	5b                   	pop    ebx
c0008ce1:	c3                   	ret    

c0008ce2 <src_float_to_int_array>:
c0008ce2:	56                   	push   esi
c0008ce3:	53                   	push   ebx
c0008ce4:	83 ec 14             	sub    esp,0x14
c0008ce7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ceb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cef:	85 db                	test   ebx,ebx
c0008cf1:	0f 84 a2 00 00 00    	je     c0008d99 <src_float_to_int_array+0xb7>
c0008cf7:	83 ec 0c             	sub    esp,0xc
c0008cfa:	4b                   	dec    ebx
c0008cfb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d02:	e8 50 c2 01 00       	call   c0024f57 <__extendsfdf2>
c0008d07:	83 c4 10             	add    esp,0x10
c0008d0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	68 00 00 e0 41       	push   0x41e00000
c0008d17:	6a 00                	push   0x0
c0008d19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	e8 3a b8 01 00       	call   c0024560 <__muldf3>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d31:	68 ff ff df 41       	push   0x41dfffff
c0008d36:	68 00 00 c0 ff       	push   0xffc00000
c0008d3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d43:	e8 e5 c0 01 00       	call   c0024e2d <__gedf2>
c0008d48:	83 c4 10             	add    esp,0x10
c0008d4b:	85 c0                	test   eax,eax
c0008d4d:	78 09                	js     c0008d58 <src_float_to_int_array+0x76>
c0008d4f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d56:	eb 97                	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d58:	68 00 00 e0 c1       	push   0xc1e00000
c0008d5d:	6a 00                	push   0x0
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d67:	e8 c5 c0 01 00       	call   c0024e31 <__ledf2>
c0008d6c:	83 c4 10             	add    esp,0x10
c0008d6f:	85 c0                	test   eax,eax
c0008d71:	7f 0c                	jg     c0008d7f <src_float_to_int_array+0x9d>
c0008d73:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d7a:	e9 70 ff ff ff       	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d7f:	50                   	push   eax
c0008d80:	50                   	push   eax
c0008d81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d89:	e8 52 c2 01 00       	call   c0024fe0 <lrint>
c0008d8e:	83 c4 10             	add    esp,0x10
c0008d91:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d94:	e9 56 ff ff ff       	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d99:	83 c4 14             	add    esp,0x14
c0008d9c:	5b                   	pop    ebx
c0008d9d:	5e                   	pop    esi
c0008d9e:	c3                   	ret    

c0008d9f <is_bad_src_ratio>:
c0008d9f:	83 ec 1c             	sub    esp,0x1c
c0008da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008daa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008db2:	b8 00 00 00 00       	mov    eax,0x0
c0008db7:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008dbc:	52                   	push   edx
c0008dbd:	50                   	push   eax
c0008dbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc6:	e8 64 c0 01 00       	call   c0024e2f <__ltdf2>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	85 c0                	test   eax,eax
c0008dd0:	78 20                	js     c0008df2 <is_bad_src_ratio+0x53>
c0008dd2:	b8 00 00 00 00       	mov    eax,0x0
c0008dd7:	ba 00 00 70 40       	mov    edx,0x40700000
c0008ddc:	52                   	push   edx
c0008ddd:	50                   	push   eax
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de6:	e8 26 c0 01 00       	call   c0024e11 <__gtdf2>
c0008deb:	83 c4 10             	add    esp,0x10
c0008dee:	85 c0                	test   eax,eax
c0008df0:	7e 07                	jle    c0008df9 <is_bad_src_ratio+0x5a>
c0008df2:	b8 01 00 00 00       	mov    eax,0x1
c0008df7:	eb 05                	jmp    c0008dfe <is_bad_src_ratio+0x5f>
c0008df9:	b8 00 00 00 00       	mov    eax,0x0
c0008dfe:	83 c4 1c             	add    esp,0x1c
c0008e01:	c3                   	ret    

c0008e02 <fmod_one>:
c0008e02:	83 ec 2c             	sub    esp,0x2c
c0008e05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e15:	83 ec 08             	sub    esp,0x8
c0008e18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e20:	e8 bb c1 01 00       	call   c0024fe0 <lrint>
c0008e25:	83 c4 10             	add    esp,0x10
c0008e28:	83 ec 0c             	sub    esp,0xc
c0008e2b:	50                   	push   eax
c0008e2c:	e8 92 bd 01 00       	call   c0024bc3 <__floatsidf>
c0008e31:	83 c4 10             	add    esp,0x10
c0008e34:	52                   	push   edx
c0008e35:	50                   	push   eax
c0008e36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3e:	e8 f1 b6 01 00       	call   c0024534 <__subdf3>
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e4e:	b8 00 00 00 00       	mov    eax,0x0
c0008e53:	ba 00 00 00 00       	mov    edx,0x0
c0008e58:	52                   	push   edx
c0008e59:	50                   	push   eax
c0008e5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e62:	e8 c8 bf 01 00       	call   c0024e2f <__ltdf2>
c0008e67:	83 c4 10             	add    esp,0x10
c0008e6a:	85 c0                	test   eax,eax
c0008e6c:	79 1e                	jns    c0008e8c <fmod_one+0x8a>
c0008e6e:	b8 00 00 00 00       	mov    eax,0x0
c0008e73:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e78:	52                   	push   edx
c0008e79:	50                   	push   eax
c0008e7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e82:	e8 5c b0 01 00       	call   c0023ee3 <__adddf3>
c0008e87:	83 c4 10             	add    esp,0x10
c0008e8a:	eb 08                	jmp    c0008e94 <fmod_one+0x92>
c0008e8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e94:	83 c4 2c             	add    esp,0x2c
c0008e97:	c3                   	ret    

c0008e98 <linear_vari_process>:
c0008e98:	55                   	push   ebp
c0008e99:	57                   	push   edi
c0008e9a:	56                   	push   esi
c0008e9b:	53                   	push   ebx
c0008e9c:	83 ec 3c             	sub    esp,0x3c
c0008e9f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ea3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008eab:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008eaf:	0f 8e f7 06 00 00    	jle    c00095ac <linear_vari_process+0x714>
c0008eb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008eb9:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008ec1:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ec4:	85 db                	test   ebx,ebx
c0008ec6:	0f 84 e0 06 00 00    	je     c00095ac <linear_vari_process+0x714>
c0008ecc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ecf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008ed3:	74 19                	je     c0008eee <linear_vari_process+0x56>
c0008ed5:	31 d2                	xor    edx,edx
c0008ed7:	39 c2                	cmp    edx,eax
c0008ed9:	7d 0c                	jge    c0008ee7 <linear_vari_process+0x4f>
c0008edb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008edd:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008ee0:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008ee4:	42                   	inc    edx
c0008ee5:	eb f0                	jmp    c0008ed7 <linear_vari_process+0x3f>
c0008ee7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008eee:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ef1:	0f af d0             	imul   edx,eax
c0008ef4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ef7:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008efb:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f02:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f05:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f0c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f13:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f1d:	57                   	push   edi
c0008f1e:	57                   	push   edi
c0008f1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f27:	e8 73 fe ff ff       	call   c0008d9f <is_bad_src_ratio>
c0008f2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f30:	83 c4 10             	add    esp,0x10
c0008f33:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f38:	0f 85 66 06 00 00    	jne    c00095a4 <linear_vari_process+0x70c>
c0008f3e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f42:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f50:	68 00 00 f0 3f       	push   0x3ff00000
c0008f55:	6a 00                	push   0x0
c0008f57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5f:	e8 cb be 01 00       	call   c0024e2f <__ltdf2>
c0008f64:	83 c4 10             	add    esp,0x10
c0008f67:	85 c0                	test   eax,eax
c0008f69:	0f 89 89 02 00 00    	jns    c00091f8 <linear_vari_process+0x360>
c0008f6f:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f72:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f75:	0f 8d 7d 02 00 00    	jge    c00091f8 <linear_vari_process+0x360>
c0008f7b:	83 ec 0c             	sub    esp,0xc
c0008f7e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f81:	e8 3d bc 01 00       	call   c0024bc3 <__floatsidf>
c0008f86:	83 c4 10             	add    esp,0x10
c0008f89:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f90:	68 00 00 f0 3f       	push   0x3ff00000
c0008f95:	6a 00                	push   0x0
c0008f97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9f:	e8 3f af 01 00       	call   c0023ee3 <__adddf3>
c0008fa4:	83 c4 10             	add    esp,0x10
c0008fa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008faf:	52                   	push   edx
c0008fb0:	50                   	push   eax
c0008fb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb9:	e8 a2 b5 01 00       	call   c0024560 <__muldf3>
c0008fbe:	5d                   	pop    ebp
c0008fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fc3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fc7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008fca:	e8 f4 bb 01 00       	call   c0024bc3 <__floatsidf>
c0008fcf:	83 c4 10             	add    esp,0x10
c0008fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fda:	52                   	push   edx
c0008fdb:	50                   	push   eax
c0008fdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe4:	e8 fa ae 01 00       	call   c0023ee3 <__adddf3>
c0008fe9:	59                   	pop    ecx
c0008fea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008ff2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008ff5:	e8 c9 bb 01 00       	call   c0024bc3 <__floatsidf>
c0008ffa:	83 c4 10             	add    esp,0x10
c0008ffd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009001:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009005:	52                   	push   edx
c0009006:	50                   	push   eax
c0009007:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000900b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000900f:	e8 19 be 01 00       	call   c0024e2d <__gedf2>
c0009014:	83 c4 10             	add    esp,0x10
c0009017:	85 c0                	test   eax,eax
c0009019:	0f 89 d9 01 00 00    	jns    c00091f8 <linear_vari_process+0x360>
c000901f:	85 ff                	test   edi,edi
c0009021:	0f 8e f4 00 00 00    	jle    c000911b <linear_vari_process+0x283>
c0009027:	83 ec 10             	sub    esp,0x10
c000902a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000902d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009030:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009034:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009037:	ff 30                	push   DWORD PTR [eax]
c0009039:	e8 f6 b4 01 00       	call   c0024534 <__subdf3>
c000903e:	83 c4 18             	add    esp,0x18
c0009041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009049:	52                   	push   edx
c000904a:	50                   	push   eax
c000904b:	e8 70 bf 01 00       	call   c0024fc0 <fabs>
c0009050:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009054:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009060:	68 23 42 92 0c       	push   0xc924223
c0009065:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009069:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000906d:	e8 9f bd 01 00       	call   c0024e11 <__gtdf2>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	85 c0                	test   eax,eax
c0009077:	0f 8e 9e 00 00 00    	jle    c000911b <linear_vari_process+0x283>
c000907d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009081:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009084:	8b 00                	mov    eax,DWORD PTR [eax]
c0009086:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	52                   	push   edx
c000908e:	50                   	push   eax
c000908f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009092:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009095:	e8 9a b4 01 00       	call   c0024534 <__subdf3>
c000909a:	59                   	pop    ecx
c000909b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000909f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090a3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090a6:	e8 18 bb 01 00       	call   c0024bc3 <__floatsidf>
c00090ab:	83 c4 10             	add    esp,0x10
c00090ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090b6:	52                   	push   edx
c00090b7:	50                   	push   eax
c00090b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c0:	e8 9b b4 01 00       	call   c0024560 <__muldf3>
c00090c5:	5f                   	pop    edi
c00090c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090ca:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090ce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090d1:	e8 ed ba 01 00       	call   c0024bc3 <__floatsidf>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090e1:	52                   	push   edx
c00090e2:	50                   	push   eax
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090eb:	e8 54 b7 01 00       	call   c0024844 <__divdf3>
c00090f0:	83 c4 10             	add    esp,0x10
c00090f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090fb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090ff:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910b:	e8 d3 ad 01 00       	call   c0023ee3 <__adddf3>
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009117:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000911b:	31 ff                	xor    edi,edi
c000911d:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009120:	0f 8e 9d 00 00 00    	jle    c00091c3 <linear_vari_process+0x32b>
c0009126:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009129:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c000912d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009130:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009134:	89 04 24             	mov    DWORD PTR [esp],eax
c0009137:	8b 06                	mov    eax,DWORD PTR [esi]
c0009139:	52                   	push   edx
c000913a:	52                   	push   edx
c000913b:	55                   	push   ebp
c000913c:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000913f:	47                   	inc    edi
c0009140:	e8 33 a7 01 00       	call   c0023878 <__subsf3>
c0009145:	89 04 24             	mov    DWORD PTR [esp],eax
c0009148:	e8 0a be 01 00       	call   c0024f57 <__extendsfdf2>
c000914d:	83 c4 10             	add    esp,0x10
c0009150:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009154:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009158:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009168:	e8 f3 b3 01 00       	call   c0024560 <__muldf3>
c000916d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009174:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009178:	e8 da bd 01 00       	call   c0024f57 <__extendsfdf2>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009184:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009188:	52                   	push   edx
c0009189:	50                   	push   eax
c000918a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000918e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009192:	e8 4c ad 01 00       	call   c0023ee3 <__adddf3>
c0009197:	59                   	pop    ecx
c0009198:	5d                   	pop    ebp
c0009199:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000919d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a9:	e8 85 bc 01 00       	call   c0024e33 <__truncdfsf2>
c00091ae:	83 c4 10             	add    esp,0x10
c00091b1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091b4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091b8:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091bb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091be:	e9 5a ff ff ff       	jmp    c000911d <linear_vari_process+0x285>
c00091c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	e8 6d b6 01 00       	call   c0024844 <__divdf3>
c00091d7:	83 c4 10             	add    esp,0x10
c00091da:	89 04 24             	mov    DWORD PTR [esp],eax
c00091dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e1:	52                   	push   edx
c00091e2:	50                   	push   eax
c00091e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091eb:	e8 f3 ac 01 00       	call   c0023ee3 <__adddf3>
c00091f0:	83 c4 10             	add    esp,0x10
c00091f3:	e9 50 fd ff ff       	jmp    c0008f48 <linear_vari_process+0xb0>
c00091f8:	50                   	push   eax
c00091f9:	50                   	push   eax
c00091fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009202:	e8 fb fb ff ff       	call   c0008e02 <fmod_one>
c0009207:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000920a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009216:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000921e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009222:	e8 0d b3 01 00       	call   c0024534 <__subdf3>
c0009227:	83 c4 18             	add    esp,0x18
c000922a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000922e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009232:	52                   	push   edx
c0009233:	50                   	push   eax
c0009234:	e8 a7 bd 01 00       	call   c0024fe0 <lrint>
c0009239:	83 c4 10             	add    esp,0x10
c000923c:	0f af f8             	imul   edi,eax
c000923f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009242:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009245:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009248:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000924b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000924e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009252:	0f 8d b4 02 00 00    	jge    c000950c <linear_vari_process+0x674>
c0009258:	83 ec 0c             	sub    esp,0xc
c000925b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000925e:	e8 60 b9 01 00       	call   c0024bc3 <__floatsidf>
c0009263:	83 c4 10             	add    esp,0x10
c0009266:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000926a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000926e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009272:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000927a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000927e:	e8 dd b2 01 00       	call   c0024560 <__muldf3>
c0009283:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000928a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000928e:	e8 30 b9 01 00       	call   c0024bc3 <__floatsidf>
c0009293:	83 c4 10             	add    esp,0x10
c0009296:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000929a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000929e:	52                   	push   edx
c000929f:	50                   	push   eax
c00092a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a8:	e8 36 ac 01 00       	call   c0023ee3 <__adddf3>
c00092ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b8:	e8 06 b9 01 00       	call   c0024bc3 <__floatsidf>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c8:	52                   	push   edx
c00092c9:	50                   	push   eax
c00092ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d2:	e8 58 bb 01 00       	call   c0024e2f <__ltdf2>
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	85 c0                	test   eax,eax
c00092dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092e0:	0f 89 26 02 00 00    	jns    c000950c <linear_vari_process+0x674>
c00092e6:	85 c9                	test   ecx,ecx
c00092e8:	0f 8e f5 00 00 00    	jle    c00093e3 <linear_vari_process+0x54b>
c00092ee:	83 ec 10             	sub    esp,0x10
c00092f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092fe:	ff 30                	push   DWORD PTR [eax]
c0009300:	e8 2f b2 01 00       	call   c0024534 <__subdf3>
c0009305:	83 c4 18             	add    esp,0x18
c0009308:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000930c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009310:	52                   	push   edx
c0009311:	50                   	push   eax
c0009312:	e8 a9 bc 01 00       	call   c0024fc0 <fabs>
c0009317:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000931f:	83 c4 10             	add    esp,0x10
c0009322:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009327:	68 23 42 92 0c       	push   0xc924223
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009334:	e8 d8 ba 01 00       	call   c0024e11 <__gtdf2>
c0009339:	83 c4 10             	add    esp,0x10
c000933c:	85 c0                	test   eax,eax
c000933e:	0f 8e 9f 00 00 00    	jle    c00093e3 <linear_vari_process+0x54b>
c0009344:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009348:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000934b:	8b 00                	mov    eax,DWORD PTR [eax]
c000934d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009351:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009355:	52                   	push   edx
c0009356:	50                   	push   eax
c0009357:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000935a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000935d:	e8 d2 b1 01 00       	call   c0024534 <__subdf3>
c0009362:	5f                   	pop    edi
c0009363:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009367:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000936b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000936e:	e8 50 b8 01 00       	call   c0024bc3 <__floatsidf>
c0009373:	83 c4 10             	add    esp,0x10
c0009376:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000937a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009388:	e8 d3 b1 01 00       	call   c0024560 <__muldf3>
c000938d:	5d                   	pop    ebp
c000938e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009392:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009396:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009399:	e8 25 b8 01 00       	call   c0024bc3 <__floatsidf>
c000939e:	83 c4 10             	add    esp,0x10
c00093a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093a9:	52                   	push   edx
c00093aa:	50                   	push   eax
c00093ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b3:	e8 8c b4 01 00       	call   c0024844 <__divdf3>
c00093b8:	83 c4 10             	add    esp,0x10
c00093bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d3:	e8 0b ab 01 00       	call   c0023ee3 <__adddf3>
c00093d8:	83 c4 10             	add    esp,0x10
c00093db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e3:	31 ff                	xor    edi,edi
c00093e5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093e8:	39 f8                	cmp    eax,edi
c00093ea:	0f 8e ac 00 00 00    	jle    c000949c <linear_vari_process+0x604>
c00093f0:	8b 16                	mov    edx,DWORD PTR [esi]
c00093f2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093f5:	29 c1                	sub    ecx,eax
c00093f7:	89 c8                	mov    eax,ecx
c00093f9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093fc:	01 f8                	add    eax,edi
c00093fe:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009402:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009405:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000940c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000940f:	51                   	push   ecx
c0009410:	01 f8                	add    eax,edi
c0009412:	51                   	push   ecx
c0009413:	47                   	inc    edi
c0009414:	55                   	push   ebp
c0009415:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009418:	e8 5b a4 01 00       	call   c0023878 <__subsf3>
c000941d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009420:	e8 32 bb 01 00       	call   c0024f57 <__extendsfdf2>
c0009425:	83 c4 10             	add    esp,0x10
c0009428:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000942c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009430:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009434:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009438:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009440:	e8 1b b1 01 00       	call   c0024560 <__muldf3>
c0009445:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009448:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000944c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009450:	e8 02 bb 01 00       	call   c0024f57 <__extendsfdf2>
c0009455:	83 c4 10             	add    esp,0x10
c0009458:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000945c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009460:	52                   	push   edx
c0009461:	50                   	push   eax
c0009462:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009466:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000946a:	e8 74 aa 01 00       	call   c0023ee3 <__adddf3>
c000946f:	5d                   	pop    ebp
c0009470:	59                   	pop    ecx
c0009471:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009475:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009479:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000947d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009481:	e8 ad b9 01 00       	call   c0024e33 <__truncdfsf2>
c0009486:	83 c4 10             	add    esp,0x10
c0009489:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000948d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009491:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009494:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009497:	e9 49 ff ff ff       	jmp    c00093e5 <linear_vari_process+0x54d>
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	68 00 00 f0 3f       	push   0x3ff00000
c00094a9:	6a 00                	push   0x0
c00094ab:	e8 94 b3 01 00       	call   c0024844 <__divdf3>
c00094b0:	83 c4 10             	add    esp,0x10
c00094b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094bf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094cb:	e8 13 aa 01 00       	call   c0023ee3 <__adddf3>
c00094d0:	59                   	pop    ecx
c00094d1:	5f                   	pop    edi
c00094d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e2:	e8 1b f9 ff ff       	call   c0008e02 <fmod_one>
c00094e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009502:	e8 2d b0 01 00       	call   c0024534 <__subdf3>
c0009507:	e9 1b fd ff ff       	jmp    c0009227 <linear_vari_process+0x38f>
c000950c:	39 fd                	cmp    ebp,edi
c000950e:	7d 38                	jge    c0009548 <linear_vari_process+0x6b0>
c0009510:	83 ec 0c             	sub    esp,0xc
c0009513:	89 f8                	mov    eax,edi
c0009515:	29 e8                	sub    eax,ebp
c0009517:	99                   	cdq    
c0009518:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951b:	50                   	push   eax
c000951c:	e8 a2 b6 01 00       	call   c0024bc3 <__floatsidf>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009528:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952c:	52                   	push   edx
c000952d:	50                   	push   eax
c000952e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009532:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009536:	e8 a8 a9 01 00       	call   c0023ee3 <__adddf3>
c000953b:	83 c4 10             	add    esp,0x10
c000953e:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009541:	89 04 24             	mov    DWORD PTR [esp],eax
c0009544:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009548:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000954f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009553:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009556:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009559:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955c:	85 c0                	test   eax,eax
c000955e:	7f 27                	jg     c0009587 <linear_vari_process+0x6ef>
c0009560:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956c:	89 01                	mov    DWORD PTR [ecx],eax
c000956e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009571:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009574:	99                   	cdq    
c0009575:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009578:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000957e:	99                   	cdq    
c000957f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009582:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0009585:	eb 25                	jmp    c00095ac <linear_vari_process+0x714>
c0009587:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958a:	31 d2                	xor    edx,edx
c000958c:	29 c8                	sub    eax,ecx
c000958e:	c1 e0 02             	shl    eax,0x2
c0009591:	39 d1                	cmp    ecx,edx
c0009593:	7e cb                	jle    c0009560 <linear_vari_process+0x6c8>
c0009595:	8b 3e                	mov    edi,DWORD PTR [esi]
c0009597:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959a:	83 c0 04             	add    eax,0x4
c000959d:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a1:	42                   	inc    edx
c00095a2:	eb ed                	jmp    c0009591 <linear_vari_process+0x6f9>
c00095a4:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095b0:	83 c4 3c             	add    esp,0x3c
c00095b3:	5b                   	pop    ebx
c00095b4:	5e                   	pop    esi
c00095b5:	5f                   	pop    edi
c00095b6:	5d                   	pop    ebp
c00095b7:	c3                   	ret    

c00095b8 <linear_reset>:
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095bf:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095c2:	85 c0                	test   eax,eax
c00095c4:	74 20                	je     c00095e6 <linear_reset+0x2e>
c00095c6:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c9:	83 c0 1c             	add    eax,0x1c
c00095cc:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095cf:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d6:	c1 e2 02             	shl    edx,0x2
c00095d9:	51                   	push   ecx
c00095da:	52                   	push   edx
c00095db:	6a 00                	push   0x0
c00095dd:	50                   	push   eax
c00095de:	e8 e2 70 ff ff       	call   c00006c5 <memset>
c00095e3:	83 c4 10             	add    esp,0x10
c00095e6:	83 c4 0c             	add    esp,0xc
c00095e9:	c3                   	ret    

c00095ea <linear_get_name>:
c00095ea:	31 c0                	xor    eax,eax
c00095ec:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095f1:	75 05                	jne    c00095f8 <linear_get_name+0xe>
c00095f3:	b8 20 67 02 c0       	mov    eax,0xc0026720
c00095f8:	c3                   	ret    

c00095f9 <linear_get_description>:
c00095f9:	31 c0                	xor    eax,eax
c00095fb:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009600:	75 05                	jne    c0009607 <linear_get_description+0xe>
c0009602:	b8 34 67 02 c0       	mov    eax,0xc0026734
c0009607:	c3                   	ret    

c0009608 <linear_set_converter>:
c0009608:	53                   	push   ebx
c0009609:	b8 0a 00 00 00       	mov    eax,0xa
c000960e:	83 ec 08             	sub    esp,0x8
c0009611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009615:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000961a:	75 6e                	jne    c000968a <linear_set_converter+0x82>
c000961c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961f:	85 c0                	test   eax,eax
c0009621:	74 13                	je     c0009636 <linear_set_converter+0x2e>
c0009623:	83 ec 0c             	sub    esp,0xc
c0009626:	50                   	push   eax
c0009627:	e8 22 5b 00 00       	call   c000f14e <free>
c000962c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009633:	83 c4 10             	add    esp,0x10
c0009636:	50                   	push   eax
c0009637:	50                   	push   eax
c0009638:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000963b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009642:	50                   	push   eax
c0009643:	6a 01                	push   0x1
c0009645:	e8 24 5b 00 00       	call   c000f16e <calloc>
c000964a:	83 c4 10             	add    esp,0x10
c000964d:	89 c2                	mov    edx,eax
c000964f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009652:	85 d2                	test   edx,edx
c0009654:	b8 01 00 00 00       	mov    eax,0x1
c0009659:	74 2f                	je     c000968a <linear_set_converter+0x82>
c000965b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000965e:	83 ec 0c             	sub    esp,0xc
c0009661:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009664:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000966a:	c7 43 24 98 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e98
c0009671:	c7 43 20 98 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e98
c0009678:	c7 43 28 b8 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b8
c000967f:	53                   	push   ebx
c0009680:	e8 33 ff ff ff       	call   c00095b8 <linear_reset>
c0009685:	83 c4 10             	add    esp,0x10
c0009688:	31 c0                	xor    eax,eax
c000968a:	83 c4 08             	add    esp,0x8
c000968d:	5b                   	pop    ebx
c000968e:	c3                   	ret    

c000968f <is_bad_src_ratio>:
c000968f:	83 ec 1c             	sub    esp,0x1c
c0009692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000969a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000969e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096a2:	b8 00 00 00 00       	mov    eax,0x0
c00096a7:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096ac:	52                   	push   edx
c00096ad:	50                   	push   eax
c00096ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b6:	e8 74 b7 01 00       	call   c0024e2f <__ltdf2>
c00096bb:	83 c4 10             	add    esp,0x10
c00096be:	85 c0                	test   eax,eax
c00096c0:	78 20                	js     c00096e2 <is_bad_src_ratio+0x53>
c00096c2:	b8 00 00 00 00       	mov    eax,0x0
c00096c7:	ba 00 00 70 40       	mov    edx,0x40700000
c00096cc:	52                   	push   edx
c00096cd:	50                   	push   eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 36 b7 01 00       	call   c0024e11 <__gtdf2>
c00096db:	83 c4 10             	add    esp,0x10
c00096de:	85 c0                	test   eax,eax
c00096e0:	7e 07                	jle    c00096e9 <is_bad_src_ratio+0x5a>
c00096e2:	b8 01 00 00 00       	mov    eax,0x1
c00096e7:	eb 05                	jmp    c00096ee <is_bad_src_ratio+0x5f>
c00096e9:	b8 00 00 00 00       	mov    eax,0x0
c00096ee:	83 c4 1c             	add    esp,0x1c
c00096f1:	c3                   	ret    

c00096f2 <int_to_fp>:
c00096f2:	c1 e0 0c             	shl    eax,0xc
c00096f5:	c3                   	ret    

c00096f6 <fp_to_int>:
c00096f6:	c1 f8 0c             	sar    eax,0xc
c00096f9:	c3                   	ret    

c00096fa <fp_fraction_part>:
c00096fa:	25 ff 0f 00 00       	and    eax,0xfff
c00096ff:	c3                   	ret    

c0009700 <fp_to_double>:
c0009700:	83 ec 1c             	sub    esp,0x1c
c0009703:	e8 f2 ff ff ff       	call   c00096fa <fp_fraction_part>
c0009708:	83 ec 0c             	sub    esp,0xc
c000970b:	50                   	push   eax
c000970c:	e8 b2 b4 01 00       	call   c0024bc3 <__floatsidf>
c0009711:	83 c4 10             	add    esp,0x10
c0009714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009718:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000971c:	68 00 00 30 3f       	push   0x3f300000
c0009721:	6a 00                	push   0x0
c0009723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972b:	e8 30 ae 01 00       	call   c0024560 <__muldf3>
c0009730:	83 c4 2c             	add    esp,0x2c
c0009733:	c3                   	ret    

c0009734 <calc_output_single>:
c0009734:	55                   	push   ebp
c0009735:	57                   	push   edi
c0009736:	56                   	push   esi
c0009737:	89 c6                	mov    esi,eax
c0009739:	53                   	push   ebx
c000973a:	89 d3                	mov    ebx,edx
c000973c:	83 ec 4c             	sub    esp,0x4c
c000973f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009743:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009746:	e8 a7 ff ff ff       	call   c00096f2 <int_to_fp>
c000974b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000974e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009752:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009756:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000975a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000975d:	99                   	cdq    
c000975e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009766:	f7 fb                	idiv   ebx
c0009768:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009770:	89 da                	mov    edx,ebx
c0009772:	0f af d0             	imul   edx,eax
c0009775:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009779:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000977d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009781:	29 c2                	sub    edx,eax
c0009783:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000978a:	83 c5 04             	add    ebp,0x4
c000978d:	e8 6e ff ff ff       	call   c0009700 <fp_to_double>
c0009792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009796:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000979a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979e:	e8 53 ff ff ff       	call   c00096f6 <fp_to_int>
c00097a3:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097a6:	52                   	push   edx
c00097a7:	52                   	push   edx
c00097a8:	51                   	push   ecx
c00097a9:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097ad:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097b1:	e8 c2 a0 01 00       	call   c0023878 <__subsf3>
c00097b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00097b9:	e8 99 b7 01 00       	call   c0024f57 <__extendsfdf2>
c00097be:	83 c4 10             	add    esp,0x10
c00097c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097d9:	e8 82 ad 01 00       	call   c0024560 <__muldf3>
c00097de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097e2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097e6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097e9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097ed:	e8 65 b7 01 00       	call   c0024f57 <__extendsfdf2>
c00097f2:	83 c4 10             	add    esp,0x10
c00097f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fd:	52                   	push   edx
c00097fe:	50                   	push   eax
c00097ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009803:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009807:	e8 d7 a6 01 00       	call   c0023ee3 <__adddf3>
c000980c:	59                   	pop    ecx
c000980d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009811:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009815:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c000981b:	e8 37 b7 01 00       	call   c0024f57 <__extendsfdf2>
c0009820:	83 c4 10             	add    esp,0x10
c0009823:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009827:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000982b:	52                   	push   edx
c000982c:	50                   	push   eax
c000982d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009831:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009835:	e8 26 ad 01 00       	call   c0024560 <__muldf3>
c000983a:	83 c4 10             	add    esp,0x10
c000983d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009841:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009845:	52                   	push   edx
c0009846:	50                   	push   eax
c0009847:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000984b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000984f:	e8 8f a6 01 00       	call   c0023ee3 <__adddf3>
c0009854:	83 c4 10             	add    esp,0x10
c0009857:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000985b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000985f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009863:	0f 89 1d ff ff ff    	jns    c0009786 <calc_output_single+0x52>
c0009869:	89 d9                	mov    ecx,ebx
c000986b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000986f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009873:	89 dd                	mov    ebp,ebx
c0009875:	29 c8                	sub    eax,ecx
c0009877:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000987f:	99                   	cdq    
c0009880:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009888:	f7 fb                	idiv   ebx
c000988a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000988e:	0f af e8             	imul   ebp,eax
c0009891:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009895:	01 cd                	add    ebp,ecx
c0009897:	8d 34 86             	lea    esi,[esi+eax*4]
c000989a:	89 e8                	mov    eax,ebp
c000989c:	83 ee 04             	sub    esi,0x4
c000989f:	e8 5c fe ff ff       	call   c0009700 <fp_to_double>
c00098a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098ac:	89 e8                	mov    eax,ebp
c00098ae:	29 dd                	sub    ebp,ebx
c00098b0:	e8 41 fe ff ff       	call   c00096f6 <fp_to_int>
c00098b5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098b8:	52                   	push   edx
c00098b9:	52                   	push   edx
c00098ba:	51                   	push   ecx
c00098bb:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098bf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098c3:	e8 b0 9f 01 00       	call   c0023878 <__subsf3>
c00098c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00098cb:	e8 87 b6 01 00       	call   c0024f57 <__extendsfdf2>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098eb:	e8 70 ac 01 00       	call   c0024560 <__muldf3>
c00098f0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098ff:	e8 53 b6 01 00       	call   c0024f57 <__extendsfdf2>
c0009904:	83 c4 10             	add    esp,0x10
c0009907:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990f:	52                   	push   edx
c0009910:	50                   	push   eax
c0009911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009915:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009919:	e8 c5 a5 01 00       	call   c0023ee3 <__adddf3>
c000991e:	59                   	pop    ecx
c000991f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009923:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009927:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000992d:	e8 25 b6 01 00       	call   c0024f57 <__extendsfdf2>
c0009932:	83 c4 10             	add    esp,0x10
c0009935:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009939:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000993d:	52                   	push   edx
c000993e:	50                   	push   eax
c000993f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009943:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009947:	e8 14 ac 01 00       	call   c0024560 <__muldf3>
c000994c:	83 c4 10             	add    esp,0x10
c000994f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009953:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009957:	52                   	push   edx
c0009958:	50                   	push   eax
c0009959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000995d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009961:	e8 7d a5 01 00       	call   c0023ee3 <__adddf3>
c0009966:	83 c4 10             	add    esp,0x10
c0009969:	85 ed                	test   ebp,ebp
c000996b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000996f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009973:	0f 8f 21 ff ff ff    	jg     c000989a <calc_output_single+0x166>
c0009979:	52                   	push   edx
c000997a:	50                   	push   eax
c000997b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000997f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009983:	e8 5b a5 01 00       	call   c0023ee3 <__adddf3>
c0009988:	83 c4 5c             	add    esp,0x5c
c000998b:	5b                   	pop    ebx
c000998c:	5e                   	pop    esi
c000998d:	5f                   	pop    edi
c000998e:	5d                   	pop    ebp
c000998f:	c3                   	ret    

c0009990 <calc_output_stereo>:
c0009990:	55                   	push   ebp
c0009991:	89 cd                	mov    ebp,ecx
c0009993:	57                   	push   edi
c0009994:	56                   	push   esi
c0009995:	53                   	push   ebx
c0009996:	89 c3                	mov    ebx,eax
c0009998:	83 ec 6c             	sub    esp,0x6c
c000999b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000999f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099a6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099ad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099b1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099b5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099b8:	e8 35 fd ff ff       	call   c00096f2 <int_to_fp>
c00099bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099c9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099d1:	29 c8                	sub    eax,ecx
c00099d3:	99                   	cdq    
c00099d4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099dc:	0f af d0             	imul   edx,eax
c00099df:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099e2:	31 d2                	xor    edx,edx
c00099e4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099ec:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099ef:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099f3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099f6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099fa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099fe:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a01:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a06:	29 c1                	sub    ecx,eax
c0009a08:	31 c0                	xor    eax,eax
c0009a0a:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a15:	83 c7 08             	add    edi,0x8
c0009a18:	e8 e3 fc ff ff       	call   c0009700 <fp_to_double>
c0009a1d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a21:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a29:	e8 c8 fc ff ff       	call   c00096f6 <fp_to_int>
c0009a2e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a31:	52                   	push   edx
c0009a32:	52                   	push   edx
c0009a33:	51                   	push   ecx
c0009a34:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a38:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a3c:	e8 37 9e 01 00       	call   c0023878 <__subsf3>
c0009a41:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a44:	e8 0e b5 01 00       	call   c0024f57 <__extendsfdf2>
c0009a49:	83 c4 10             	add    esp,0x10
c0009a4c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a50:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a5c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a60:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a64:	e8 f7 aa 01 00       	call   c0024560 <__muldf3>
c0009a69:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a6d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a71:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a74:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a78:	e8 da b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009a7d:	83 c4 10             	add    esp,0x10
c0009a80:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a84:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a88:	52                   	push   edx
c0009a89:	50                   	push   eax
c0009a8a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a8e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a92:	e8 4c a4 01 00       	call   c0023ee3 <__adddf3>
c0009a97:	59                   	pop    ecx
c0009a98:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a9c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009aa0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009aa6:	e8 ac b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009aab:	83 c4 10             	add    esp,0x10
c0009aae:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ab2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ab6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009abe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac6:	e8 95 aa 01 00       	call   c0024560 <__muldf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad6:	52                   	push   edx
c0009ad7:	50                   	push   eax
c0009ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ae0:	e8 fe a3 01 00       	call   c0023ee3 <__adddf3>
c0009ae5:	59                   	pop    ecx
c0009ae6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009aee:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009af4:	e8 5e b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009af9:	83 c4 10             	add    esp,0x10
c0009afc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b00:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b0c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b10:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b14:	e8 47 aa 01 00       	call   c0024560 <__muldf3>
c0009b19:	83 c4 10             	add    esp,0x10
c0009b1c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b20:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b24:	52                   	push   edx
c0009b25:	50                   	push   eax
c0009b26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b2e:	e8 b0 a3 01 00       	call   c0023ee3 <__adddf3>
c0009b33:	83 c4 10             	add    esp,0x10
c0009b36:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b3e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b42:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b46:	0f 89 c5 fe ff ff    	jns    c0009a11 <calc_output_stereo+0x81>
c0009b4c:	29 e9                	sub    ecx,ebp
c0009b4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b52:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b56:	29 c8                	sub    eax,ecx
c0009b58:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b60:	99                   	cdq    
c0009b61:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b65:	31 d2                	xor    edx,edx
c0009b67:	0f af f8             	imul   edi,eax
c0009b6a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b6e:	40                   	inc    eax
c0009b6f:	01 cf                	add    edi,ecx
c0009b71:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b76:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b82:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b85:	31 c0                	xor    eax,eax
c0009b87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b8b:	89 f8                	mov    eax,edi
c0009b8d:	83 eb 08             	sub    ebx,0x8
c0009b90:	e8 6b fb ff ff       	call   c0009700 <fp_to_double>
c0009b95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b9d:	89 f8                	mov    eax,edi
c0009b9f:	e8 52 fb ff ff       	call   c00096f6 <fp_to_int>
c0009ba4:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009ba7:	52                   	push   edx
c0009ba8:	52                   	push   edx
c0009ba9:	55                   	push   ebp
c0009baa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bae:	e8 c5 9c 01 00       	call   c0023878 <__subsf3>
c0009bb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bb6:	e8 9c b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009bbb:	83 c4 10             	add    esp,0x10
c0009bbe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bd6:	e8 85 a9 01 00       	call   c0024560 <__muldf3>
c0009bdb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009bde:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009be2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009be6:	e8 6c b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009beb:	83 c4 10             	add    esp,0x10
c0009bee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf6:	52                   	push   edx
c0009bf7:	50                   	push   eax
c0009bf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bfc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c00:	e8 de a2 01 00       	call   c0023ee3 <__adddf3>
c0009c05:	59                   	pop    ecx
c0009c06:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c0a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c0e:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c14:	e8 3e b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c34:	e8 27 a9 01 00       	call   c0024560 <__muldf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c44:	52                   	push   edx
c0009c45:	50                   	push   eax
c0009c46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c4e:	e8 90 a2 01 00       	call   c0023ee3 <__adddf3>
c0009c53:	5d                   	pop    ebp
c0009c54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c58:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c5c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c62:	e8 f0 b2 01 00       	call   c0024f57 <__extendsfdf2>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c6e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c7a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c7e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c82:	e8 d9 a8 01 00       	call   c0024560 <__muldf3>
c0009c87:	83 c4 10             	add    esp,0x10
c0009c8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c92:	52                   	push   edx
c0009c93:	50                   	push   eax
c0009c94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c9c:	e8 42 a2 01 00       	call   c0023ee3 <__adddf3>
c0009ca1:	83 c4 10             	add    esp,0x10
c0009ca4:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009ca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cb0:	85 ff                	test   edi,edi
c0009cb2:	0f 8f d3 fe ff ff    	jg     c0009b8b <calc_output_stereo+0x1fb>
c0009cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 16 a2 01 00       	call   c0023ee3 <__adddf3>
c0009ccd:	83 c4 10             	add    esp,0x10
c0009cd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cd8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cdc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ce0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce8:	e8 73 a8 01 00       	call   c0024560 <__muldf3>
c0009ced:	59                   	pop    ecx
c0009cee:	5b                   	pop    ebx
c0009cef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cff:	e8 2f b1 01 00       	call   c0024e33 <__truncdfsf2>
c0009d04:	83 c4 10             	add    esp,0x10
c0009d07:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d0e:	89 03                	mov    DWORD PTR [ebx],eax
c0009d10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d20:	e8 be a1 01 00       	call   c0023ee3 <__adddf3>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d40:	e8 1b a8 01 00       	call   c0024560 <__muldf3>
c0009d45:	5e                   	pop    esi
c0009d46:	5f                   	pop    edi
c0009d47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d4b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d57:	e8 d7 b0 01 00       	call   c0024e33 <__truncdfsf2>
c0009d5c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d63:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d66:	83 c4 7c             	add    esp,0x7c
c0009d69:	5b                   	pop    ebx
c0009d6a:	5e                   	pop    esi
c0009d6b:	5f                   	pop    edi
c0009d6c:	5d                   	pop    ebp
c0009d6d:	c3                   	ret    

c0009d6e <calc_output_quad>:
c0009d6e:	55                   	push   ebp
c0009d6f:	57                   	push   edi
c0009d70:	56                   	push   esi
c0009d71:	89 c6                	mov    esi,eax
c0009d73:	53                   	push   ebx
c0009d74:	83 ec 7c             	sub    esp,0x7c
c0009d77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d7b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d7f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d86:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d8d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d95:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d98:	e8 55 f9 ff ff       	call   c00096f2 <int_to_fp>
c0009d9d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009da0:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009da3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009da7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009dab:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009daf:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009db3:	99                   	cdq    
c0009db4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009dbf:	31 d2                	xor    edx,edx
c0009dc1:	0f af d8             	imul   ebx,eax
c0009dc4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009dcc:	0f af c7             	imul   eax,edi
c0009dcf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009dd3:	29 c1                	sub    ecx,eax
c0009dd5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009ddd:	31 c0                	xor    eax,eax
c0009ddf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009de2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009de6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009df6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dfa:	89 d8                	mov    eax,ebx
c0009dfc:	83 c7 10             	add    edi,0x10
c0009dff:	e8 fc f8 ff ff       	call   c0009700 <fp_to_double>
c0009e04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e0c:	89 d8                	mov    eax,ebx
c0009e0e:	e8 e3 f8 ff ff       	call   c00096f6 <fp_to_int>
c0009e13:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e17:	52                   	push   edx
c0009e18:	52                   	push   edx
c0009e19:	51                   	push   ecx
c0009e1a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e1e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e22:	e8 51 9a 01 00       	call   c0023878 <__subsf3>
c0009e27:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e2a:	e8 28 b1 01 00       	call   c0024f57 <__extendsfdf2>
c0009e2f:	83 c4 10             	add    esp,0x10
c0009e32:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e36:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e42:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e46:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e4a:	e8 11 a7 01 00       	call   c0024560 <__muldf3>
c0009e4f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e57:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	e8 f4 b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009e63:	83 c4 10             	add    esp,0x10
c0009e66:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e6a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6e:	52                   	push   edx
c0009e6f:	50                   	push   eax
c0009e70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e78:	e8 66 a0 01 00       	call   c0023ee3 <__adddf3>
c0009e7d:	59                   	pop    ecx
c0009e7e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e82:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e86:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e8c:	e8 c6 b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e98:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ea8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eac:	e8 af a6 01 00       	call   c0024560 <__muldf3>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebc:	52                   	push   edx
c0009ebd:	50                   	push   eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	e8 18 a0 01 00       	call   c0023ee3 <__adddf3>
c0009ecb:	59                   	pop    ecx
c0009ecc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ed0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ed4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eda:	e8 78 b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ee6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ef6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009efa:	e8 61 a6 01 00       	call   c0024560 <__muldf3>
c0009eff:	83 c4 10             	add    esp,0x10
c0009f02:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f06:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f0a:	52                   	push   edx
c0009f0b:	50                   	push   eax
c0009f0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f14:	e8 ca 9f 01 00       	call   c0023ee3 <__adddf3>
c0009f19:	59                   	pop    ecx
c0009f1a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f1e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f22:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f28:	e8 2a b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009f2d:	83 c4 10             	add    esp,0x10
c0009f30:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f34:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f44:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f48:	e8 13 a6 01 00       	call   c0024560 <__muldf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f54:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f58:	52                   	push   edx
c0009f59:	50                   	push   eax
c0009f5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f62:	e8 7c 9f 01 00       	call   c0023ee3 <__adddf3>
c0009f67:	59                   	pop    ecx
c0009f68:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f6c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f70:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f76:	e8 dc af 01 00       	call   c0024f57 <__extendsfdf2>
c0009f7b:	83 c4 10             	add    esp,0x10
c0009f7e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f82:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f92:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f96:	e8 c5 a5 01 00       	call   c0024560 <__muldf3>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fa2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fa6:	52                   	push   edx
c0009fa7:	50                   	push   eax
c0009fa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fb0:	e8 2e 9f 01 00       	call   c0023ee3 <__adddf3>
c0009fb5:	83 c4 10             	add    esp,0x10
c0009fb8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fbc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fc0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009fc4:	0f 89 30 fe ff ff    	jns    c0009dfa <calc_output_quad+0x8c>
c0009fca:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009fce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fd2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fd6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fda:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fe2:	29 c8                	sub    eax,ecx
c0009fe4:	99                   	cdq    
c0009fe5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fe9:	31 d2                	xor    edx,edx
c0009feb:	0f af d8             	imul   ebx,eax
c0009fee:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ff2:	40                   	inc    eax
c0009ff3:	01 cb                	add    ebx,ecx
c0009ff5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009ffa:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009ffe:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a002:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a006:	8d 34 86             	lea    esi,[esi+eax*4]
c000a009:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a011:	31 c0                	xor    eax,eax
c000a013:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a017:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a01b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a01f:	89 d8                	mov    eax,ebx
c000a021:	83 ee 10             	sub    esi,0x10
c000a024:	e8 d7 f6 ff ff       	call   c0009700 <fp_to_double>
c000a029:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a02d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a031:	89 d8                	mov    eax,ebx
c000a033:	e8 be f6 ff ff       	call   c00096f6 <fp_to_int>
c000a038:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a03c:	52                   	push   edx
c000a03d:	52                   	push   edx
c000a03e:	57                   	push   edi
c000a03f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a043:	e8 30 98 01 00       	call   c0023878 <__subsf3>
c000a048:	89 04 24             	mov    DWORD PTR [esp],eax
c000a04b:	e8 07 af 01 00       	call   c0024f57 <__extendsfdf2>
c000a050:	83 c4 10             	add    esp,0x10
c000a053:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a057:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a063:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a067:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a06b:	e8 f0 a4 01 00       	call   c0024560 <__muldf3>
c000a070:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a07b:	e8 d7 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a087:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08b:	52                   	push   edx
c000a08c:	50                   	push   eax
c000a08d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a091:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a095:	e8 49 9e 01 00       	call   c0023ee3 <__adddf3>
c000a09a:	59                   	pop    ecx
c000a09b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a09f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0a3:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0a9:	e8 a9 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a0ae:	83 c4 10             	add    esp,0x10
c000a0b1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c9:	e8 92 a4 01 00       	call   c0024560 <__muldf3>
c000a0ce:	83 c4 10             	add    esp,0x10
c000a0d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d9:	52                   	push   edx
c000a0da:	50                   	push   eax
c000a0db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0e3:	e8 fb 9d 01 00       	call   c0023ee3 <__adddf3>
c000a0e8:	5f                   	pop    edi
c000a0e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0ed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0f1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0f7:	e8 5b ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a0fc:	83 c4 10             	add    esp,0x10
c000a0ff:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a103:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a113:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a117:	e8 44 a4 01 00       	call   c0024560 <__muldf3>
c000a11c:	83 c4 10             	add    esp,0x10
c000a11f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a123:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a127:	52                   	push   edx
c000a128:	50                   	push   eax
c000a129:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a12d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a131:	e8 ad 9d 01 00       	call   c0023ee3 <__adddf3>
c000a136:	59                   	pop    ecx
c000a137:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a13b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a13f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a145:	e8 0d ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a14a:	83 c4 10             	add    esp,0x10
c000a14d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a151:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a15d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a161:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a165:	e8 f6 a3 01 00       	call   c0024560 <__muldf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a171:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a175:	52                   	push   edx
c000a176:	50                   	push   eax
c000a177:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a17b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a17f:	e8 5f 9d 01 00       	call   c0023ee3 <__adddf3>
c000a184:	5f                   	pop    edi
c000a185:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a189:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a18d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a193:	e8 bf ad 01 00       	call   c0024f57 <__extendsfdf2>
c000a198:	83 c4 10             	add    esp,0x10
c000a19b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a19f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1af:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1b3:	e8 a8 a3 01 00       	call   c0024560 <__muldf3>
c000a1b8:	83 c4 10             	add    esp,0x10
c000a1bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1c3:	52                   	push   edx
c000a1c4:	50                   	push   eax
c000a1c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1cd:	e8 11 9d 01 00       	call   c0023ee3 <__adddf3>
c000a1d2:	83 c4 10             	add    esp,0x10
c000a1d5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1dd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1e1:	85 db                	test   ebx,ebx
c000a1e3:	0f 8f 36 fe ff ff    	jg     c000a01f <calc_output_quad+0x2b1>
c000a1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f9:	e8 e5 9c 01 00       	call   c0023ee3 <__adddf3>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a205:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a209:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a215:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a219:	e8 42 a3 01 00       	call   c0024560 <__muldf3>
c000a21e:	59                   	pop    ecx
c000a21f:	5b                   	pop    ebx
c000a220:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a224:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a22c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a230:	e8 fe ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a23f:	89 06                	mov    DWORD PTR [esi],eax
c000a241:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a245:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a249:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a24d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a251:	e8 8d 9c 01 00       	call   c0023ee3 <__adddf3>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a25d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a261:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a269:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a271:	e8 ea a2 01 00       	call   c0024560 <__muldf3>
c000a276:	5e                   	pop    esi
c000a277:	5f                   	pop    edi
c000a278:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a27c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a280:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a284:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a288:	e8 a6 ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a28d:	83 c4 10             	add    esp,0x10
c000a290:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a297:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a29a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a29e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2aa:	e8 34 9c 01 00       	call   c0023ee3 <__adddf3>
c000a2af:	83 c4 10             	add    esp,0x10
c000a2b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ca:	e8 91 a2 01 00       	call   c0024560 <__muldf3>
c000a2cf:	5d                   	pop    ebp
c000a2d0:	59                   	pop    ecx
c000a2d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e1:	e8 4d ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a2e6:	83 c4 10             	add    esp,0x10
c000a2e9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2f0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a303:	e8 db 9b 01 00       	call   c0023ee3 <__adddf3>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a317:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a323:	e8 38 a2 01 00       	call   c0024560 <__muldf3>
c000a328:	5b                   	pop    ebx
c000a329:	5e                   	pop    esi
c000a32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a32e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33a:	e8 f4 aa 01 00       	call   c0024e33 <__truncdfsf2>
c000a33f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a346:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a349:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a34f:	5b                   	pop    ebx
c000a350:	5e                   	pop    esi
c000a351:	5f                   	pop    edi
c000a352:	5d                   	pop    ebp
c000a353:	c3                   	ret    

c000a354 <calc_output_hex>:
c000a354:	55                   	push   ebp
c000a355:	89 cd                	mov    ebp,ecx
c000a357:	57                   	push   edi
c000a358:	56                   	push   esi
c000a359:	53                   	push   ebx
c000a35a:	89 c3                	mov    ebx,eax
c000a35c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a362:	89 14 24             	mov    DWORD PTR [esp],edx
c000a365:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a36c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a377:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a37b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a37e:	e8 6f f3 ff ff       	call   c00096f2 <int_to_fp>
c000a383:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a386:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a38a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a38d:	29 c8                	sub    eax,ecx
c000a38f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a393:	99                   	cdq    
c000a394:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a39c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a39f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3a7:	0f af f8             	imul   edi,eax
c000a3aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3ad:	01 cf                	add    edi,ecx
c000a3af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3b3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3ba:	0f af c2             	imul   eax,edx
c000a3bd:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3c1:	29 c1                	sub    ecx,eax
c000a3c3:	31 d2                	xor    edx,edx
c000a3c5:	31 c0                	xor    eax,eax
c000a3c7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3d6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3de:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3e6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3f2:	89 f8                	mov    eax,edi
c000a3f4:	e8 07 f3 ff ff       	call   c0009700 <fp_to_double>
c000a3f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a401:	89 f8                	mov    eax,edi
c000a403:	e8 ee f2 ff ff       	call   c00096f6 <fp_to_int>
c000a408:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a40c:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a40f:	52                   	push   edx
c000a410:	52                   	push   edx
c000a411:	51                   	push   ecx
c000a412:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a416:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a41d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a421:	e8 52 94 01 00       	call   c0023878 <__subsf3>
c000a426:	89 04 24             	mov    DWORD PTR [esp],eax
c000a429:	e8 29 ab 01 00       	call   c0024f57 <__extendsfdf2>
c000a42e:	83 c4 10             	add    esp,0x10
c000a431:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a435:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a441:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a445:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a449:	e8 12 a1 01 00       	call   c0024560 <__muldf3>
c000a44e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a452:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a456:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a459:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a45d:	e8 f5 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a469:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46d:	52                   	push   edx
c000a46e:	50                   	push   eax
c000a46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a477:	e8 67 9a 01 00       	call   c0023ee3 <__adddf3>
c000a47c:	59                   	pop    ecx
c000a47d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a485:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a48b:	e8 c7 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a490:	83 c4 10             	add    esp,0x10
c000a493:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a497:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a49f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ab:	e8 b0 a0 01 00       	call   c0024560 <__muldf3>
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bb:	52                   	push   edx
c000a4bc:	50                   	push   eax
c000a4bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4c5:	e8 19 9a 01 00       	call   c0023ee3 <__adddf3>
c000a4ca:	59                   	pop    ecx
c000a4cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4cf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4d3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4d9:	e8 79 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a4de:	83 c4 10             	add    esp,0x10
c000a4e1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f9:	e8 62 a0 01 00       	call   c0024560 <__muldf3>
c000a4fe:	83 c4 10             	add    esp,0x10
c000a501:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a505:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a509:	52                   	push   edx
c000a50a:	50                   	push   eax
c000a50b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a513:	e8 cb 99 01 00       	call   c0023ee3 <__adddf3>
c000a518:	59                   	pop    ecx
c000a519:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a51d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a521:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a527:	e8 2b aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a52c:	83 c4 10             	add    esp,0x10
c000a52f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a533:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a53f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a543:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a547:	e8 14 a0 01 00       	call   c0024560 <__muldf3>
c000a54c:	83 c4 10             	add    esp,0x10
c000a54f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a553:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a557:	52                   	push   edx
c000a558:	50                   	push   eax
c000a559:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a55d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a561:	e8 7d 99 01 00       	call   c0023ee3 <__adddf3>
c000a566:	59                   	pop    ecx
c000a567:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a575:	e8 dd a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a57a:	83 c4 10             	add    esp,0x10
c000a57d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a581:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a585:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a589:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a58d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a591:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a595:	e8 c6 9f 01 00       	call   c0024560 <__muldf3>
c000a59a:	83 c4 10             	add    esp,0x10
c000a59d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a5:	52                   	push   edx
c000a5a6:	50                   	push   eax
c000a5a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5af:	e8 2f 99 01 00       	call   c0023ee3 <__adddf3>
c000a5b4:	59                   	pop    ecx
c000a5b5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5b9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5bd:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5c3:	e8 8f a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a5c8:	83 c4 10             	add    esp,0x10
c000a5cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5df:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5e3:	e8 78 9f 01 00       	call   c0024560 <__muldf3>
c000a5e8:	83 c4 10             	add    esp,0x10
c000a5eb:	83 c6 18             	add    esi,0x18
c000a5ee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f6:	52                   	push   edx
c000a5f7:	50                   	push   eax
c000a5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a600:	e8 de 98 01 00       	call   c0023ee3 <__adddf3>
c000a605:	59                   	pop    ecx
c000a606:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a60a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a60e:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a614:	e8 3e a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a620:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a624:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a628:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a630:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a634:	e8 27 9f 01 00       	call   c0024560 <__muldf3>
c000a639:	83 c4 10             	add    esp,0x10
c000a63c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a640:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a644:	52                   	push   edx
c000a645:	50                   	push   eax
c000a646:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a64a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a64e:	e8 90 98 01 00       	call   c0023ee3 <__adddf3>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a65a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a65e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a661:	0f 89 8b fd ff ff    	jns    c000a3f2 <calc_output_hex+0x9e>
c000a667:	31 f6                	xor    esi,esi
c000a669:	31 ff                	xor    edi,edi
c000a66b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a66f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a672:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a676:	29 e9                	sub    ecx,ebp
c000a678:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a67c:	29 c8                	sub    eax,ecx
c000a67e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a681:	99                   	cdq    
c000a682:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a686:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a689:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a68d:	0f af e8             	imul   ebp,eax
c000a690:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a694:	40                   	inc    eax
c000a695:	01 cd                	add    ebp,ecx
c000a697:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a69c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6a0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6a4:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6a8:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6ab:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6af:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6b3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6b7:	89 e8                	mov    eax,ebp
c000a6b9:	e8 42 f0 ff ff       	call   c0009700 <fp_to_double>
c000a6be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6c6:	89 e8                	mov    eax,ebp
c000a6c8:	e8 29 f0 ff ff       	call   c00096f6 <fp_to_int>
c000a6cd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6d1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6d4:	52                   	push   edx
c000a6d5:	52                   	push   edx
c000a6d6:	51                   	push   ecx
c000a6d7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6de:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6e5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6e9:	e8 8a 91 01 00       	call   c0023878 <__subsf3>
c000a6ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6f1:	e8 61 a8 01 00       	call   c0024f57 <__extendsfdf2>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a705:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a709:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a711:	e8 4a 9e 01 00       	call   c0024560 <__muldf3>
c000a716:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a71d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a721:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a724:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a728:	e8 2a a8 01 00       	call   c0024f57 <__extendsfdf2>
c000a72d:	83 c4 10             	add    esp,0x10
c000a730:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a734:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a738:	52                   	push   edx
c000a739:	50                   	push   eax
c000a73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a742:	e8 9c 97 01 00       	call   c0023ee3 <__adddf3>
c000a747:	59                   	pop    ecx
c000a748:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a74c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a750:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a756:	e8 fc a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a762:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a766:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a76a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a76e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a772:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a776:	e8 e5 9d 01 00       	call   c0024560 <__muldf3>
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a782:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a786:	52                   	push   edx
c000a787:	50                   	push   eax
c000a788:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a78c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a790:	e8 4e 97 01 00       	call   c0023ee3 <__adddf3>
c000a795:	59                   	pop    ecx
c000a796:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a79a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a79e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7a4:	e8 ae a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c4:	e8 97 9d 01 00       	call   c0024560 <__muldf3>
c000a7c9:	83 c4 10             	add    esp,0x10
c000a7cc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d4:	52                   	push   edx
c000a7d5:	50                   	push   eax
c000a7d6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7da:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7de:	e8 00 97 01 00       	call   c0023ee3 <__adddf3>
c000a7e3:	59                   	pop    ecx
c000a7e4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7e8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7ec:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7f2:	e8 60 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a7f7:	83 c4 10             	add    esp,0x10
c000a7fa:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7fe:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a80a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a80e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a812:	e8 49 9d 01 00       	call   c0024560 <__muldf3>
c000a817:	83 c4 10             	add    esp,0x10
c000a81a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a822:	52                   	push   edx
c000a823:	50                   	push   eax
c000a824:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a828:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82c:	e8 b2 96 01 00       	call   c0023ee3 <__adddf3>
c000a831:	59                   	pop    ecx
c000a832:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a836:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a83a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a840:	e8 12 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a84c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a850:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a854:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a858:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a85c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a860:	e8 fb 9c 01 00       	call   c0024560 <__muldf3>
c000a865:	83 c4 10             	add    esp,0x10
c000a868:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a870:	52                   	push   edx
c000a871:	50                   	push   eax
c000a872:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a876:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a87a:	e8 64 96 01 00       	call   c0023ee3 <__adddf3>
c000a87f:	59                   	pop    ecx
c000a880:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a884:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a888:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a88e:	e8 c4 a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a893:	83 c4 10             	add    esp,0x10
c000a896:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a89a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a89e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8aa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ae:	e8 ad 9c 01 00       	call   c0024560 <__muldf3>
c000a8b3:	83 c4 10             	add    esp,0x10
c000a8b6:	83 eb 18             	sub    ebx,0x18
c000a8b9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c1:	52                   	push   edx
c000a8c2:	50                   	push   eax
c000a8c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8cb:	e8 13 96 01 00       	call   c0023ee3 <__adddf3>
c000a8d0:	59                   	pop    ecx
c000a8d1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8d5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8d9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8df:	e8 73 a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a8e4:	83 c4 10             	add    esp,0x10
c000a8e7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8eb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ff:	e8 5c 9c 01 00       	call   c0024560 <__muldf3>
c000a904:	83 c4 10             	add    esp,0x10
c000a907:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a90b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a90f:	52                   	push   edx
c000a910:	50                   	push   eax
c000a911:	57                   	push   edi
c000a912:	56                   	push   esi
c000a913:	e8 cb 95 01 00       	call   c0023ee3 <__adddf3>
c000a918:	83 c4 10             	add    esp,0x10
c000a91b:	89 c6                	mov    esi,eax
c000a91d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a920:	89 d7                	mov    edi,edx
c000a922:	85 ed                	test   ebp,ebp
c000a924:	0f 8f 8d fd ff ff    	jg     c000a6b7 <calc_output_hex+0x363>
c000a92a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a92e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a932:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a936:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a93a:	e8 a4 95 01 00       	call   c0023ee3 <__adddf3>
c000a93f:	83 c4 10             	add    esp,0x10
c000a942:	89 04 24             	mov    DWORD PTR [esp],eax
c000a945:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a951:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a955:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a959:	e8 02 9c 01 00       	call   c0024560 <__muldf3>
c000a95e:	59                   	pop    ecx
c000a95f:	5b                   	pop    ebx
c000a960:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a968:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a96c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a970:	e8 be a4 01 00       	call   c0024e33 <__truncdfsf2>
c000a975:	83 c4 10             	add    esp,0x10
c000a978:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a97f:	89 03                	mov    DWORD PTR [ebx],eax
c000a981:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a985:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a989:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a98d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a991:	e8 4d 95 01 00       	call   c0023ee3 <__adddf3>
c000a996:	83 c4 10             	add    esp,0x10
c000a999:	89 04 24             	mov    DWORD PTR [esp],eax
c000a99c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b0:	e8 ab 9b 01 00       	call   c0024560 <__muldf3>
c000a9b5:	5d                   	pop    ebp
c000a9b6:	59                   	pop    ecx
c000a9b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c7:	e8 67 a4 01 00       	call   c0024e33 <__truncdfsf2>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9d6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9d9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9dd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9e9:	e8 f5 94 01 00       	call   c0023ee3 <__adddf3>
c000a9ee:	83 c4 10             	add    esp,0x10
c000a9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa08:	e8 53 9b 01 00       	call   c0024560 <__muldf3>
c000aa0d:	5b                   	pop    ebx
c000aa0e:	5d                   	pop    ebp
c000aa0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1f:	e8 0f a4 01 00       	call   c0024e33 <__truncdfsf2>
c000aa24:	83 c4 10             	add    esp,0x10
c000aa27:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa2e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa41:	e8 9d 94 01 00       	call   c0023ee3 <__adddf3>
c000aa46:	83 c4 10             	add    esp,0x10
c000aa49:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa60:	e8 fb 9a 01 00       	call   c0024560 <__muldf3>
c000aa65:	59                   	pop    ecx
c000aa66:	5b                   	pop    ebx
c000aa67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa6f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa77:	e8 b7 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aa7c:	83 c4 10             	add    esp,0x10
c000aa7f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa86:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa8d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa99:	e8 45 94 01 00       	call   c0023ee3 <__adddf3>
c000aa9e:	83 c4 10             	add    esp,0x10
c000aaa1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaa4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaa8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab8:	e8 a3 9a 01 00       	call   c0024560 <__muldf3>
c000aabd:	5d                   	pop    ebp
c000aabe:	59                   	pop    ecx
c000aabf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aac7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	e8 5f a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aade:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aae1:	57                   	push   edi
c000aae2:	56                   	push   esi
c000aae3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aae7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaeb:	e8 f3 93 01 00       	call   c0023ee3 <__adddf3>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aafa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab0a:	e8 51 9a 01 00       	call   c0024560 <__muldf3>
c000ab0f:	5b                   	pop    ebx
c000ab10:	5e                   	pop    esi
c000ab11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab21:	e8 0d a3 01 00       	call   c0024e33 <__truncdfsf2>
c000ab26:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab2d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab30:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab36:	5b                   	pop    ebx
c000ab37:	5e                   	pop    esi
c000ab38:	5f                   	pop    edi
c000ab39:	5d                   	pop    ebp
c000ab3a:	c3                   	ret    

c000ab3b <sinc_reset>:
c000ab3b:	56                   	push   esi
c000ab3c:	53                   	push   ebx
c000ab3d:	51                   	push   ecx
c000ab3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab42:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab45:	85 db                	test   ebx,ebx
c000ab47:	74 59                	je     c000aba2 <sinc_reset+0x67>
c000ab49:	31 d2                	xor    edx,edx
c000ab4b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab52:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab55:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab58:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab5f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab66:	31 c0                	xor    eax,eax
c000ab68:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab6e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab71:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab74:	52                   	push   edx
c000ab75:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab78:	c1 e0 02             	shl    eax,0x2
c000ab7b:	50                   	push   eax
c000ab7c:	6a 00                	push   0x0
c000ab7e:	56                   	push   esi
c000ab7f:	e8 41 5b ff ff       	call   c00006c5 <memset>
c000ab84:	83 c4 0c             	add    esp,0xc
c000ab87:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab8a:	c1 e0 02             	shl    eax,0x2
c000ab8d:	50                   	push   eax
c000ab8e:	68 aa 00 00 00       	push   0xaa
c000ab93:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab96:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab99:	50                   	push   eax
c000ab9a:	e8 26 5b ff ff       	call   c00006c5 <memset>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	58                   	pop    eax
c000aba3:	5b                   	pop    ebx
c000aba4:	5e                   	pop    esi
c000aba5:	c3                   	ret    

c000aba6 <calc_output_multi>:
c000aba6:	55                   	push   ebp
c000aba7:	57                   	push   edi
c000aba8:	56                   	push   esi
c000aba9:	89 c6                	mov    esi,eax
c000abab:	53                   	push   ebx
c000abac:	83 ec 4c             	sub    esp,0x4c
c000abaf:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abb3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abbb:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abbf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abcb:	8d 46 44             	lea    eax,[esi+0x44]
c000abce:	89 04 24             	mov    DWORD PTR [esp],eax
c000abd1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abdb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abde:	e8 0f eb ff ff       	call   c00096f2 <int_to_fp>
c000abe3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abe6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abea:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abee:	99                   	cdq    
c000abef:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abf7:	0f af d0             	imul   edx,eax
c000abfa:	0f af c3             	imul   eax,ebx
c000abfd:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac01:	29 c1                	sub    ecx,eax
c000ac03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac0b:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac16:	57                   	push   edi
c000ac17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac1b:	6a 00                	push   0x0
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	e8 9f 5a ff ff       	call   c00006c5 <memset>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac2d:	89 df                	mov    edi,ebx
c000ac2f:	e8 cc ea ff ff       	call   c0009700 <fp_to_double>
c000ac34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac40:	e8 b1 ea ff ff       	call   c00096f6 <fp_to_int>
c000ac45:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac48:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac4b:	51                   	push   ecx
c000ac4c:	51                   	push   ecx
c000ac4d:	55                   	push   ebp
c000ac4e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac52:	e8 21 8c 01 00       	call   c0023878 <__subsf3>
c000ac57:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac5a:	e8 f8 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ac5f:	83 c4 10             	add    esp,0x10
c000ac62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac72:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac76:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac7a:	e8 e1 98 01 00       	call   c0024560 <__muldf3>
c000ac7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac82:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac86:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac8a:	e8 c8 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9a:	52                   	push   edx
c000ac9b:	50                   	push   eax
c000ac9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca4:	e8 3a 92 01 00       	call   c0023ee3 <__adddf3>
c000aca9:	83 c4 10             	add    esp,0x10
c000acac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acb4:	89 f8                	mov    eax,edi
c000acb6:	b9 08 00 00 00       	mov    ecx,0x8
c000acbb:	99                   	cdq    
c000acbc:	f7 f9                	idiv   ecx
c000acbe:	4a                   	dec    edx
c000acbf:	83 fa 06             	cmp    edx,0x6
c000acc2:	77 07                	ja     c000accb <calc_output_multi+0x125>
c000acc4:	ff 24 95 64 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd989c]
c000accb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acce:	4f                   	dec    edi
c000accf:	83 ec 0c             	sub    esp,0xc
c000acd2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ace0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ace4:	e8 6e a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ace9:	83 c4 10             	add    esp,0x10
c000acec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad04:	e8 57 98 01 00       	call   c0024560 <__muldf3>
c000ad09:	83 c4 10             	add    esp,0x10
c000ad0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad14:	52                   	push   edx
c000ad15:	50                   	push   eax
c000ad16:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad19:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad1c:	e8 c2 91 01 00       	call   c0023ee3 <__adddf3>
c000ad21:	83 c4 10             	add    esp,0x10
c000ad24:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad27:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad2d:	4f                   	dec    edi
c000ad2e:	83 ec 0c             	sub    esp,0xc
c000ad31:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad38:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad3f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad43:	e8 0f a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad4f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad63:	e8 f8 97 01 00       	call   c0024560 <__muldf3>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad73:	52                   	push   edx
c000ad74:	50                   	push   eax
c000ad75:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad78:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad7b:	e8 63 91 01 00       	call   c0023ee3 <__adddf3>
c000ad80:	83 c4 10             	add    esp,0x10
c000ad83:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad86:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad8c:	4f                   	dec    edi
c000ad8d:	83 ec 0c             	sub    esp,0xc
c000ad90:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad97:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad9e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ada2:	e8 b0 a1 01 00       	call   c0024f57 <__extendsfdf2>
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc2:	e8 99 97 01 00       	call   c0024560 <__muldf3>
c000adc7:	83 c4 10             	add    esp,0x10
c000adca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add2:	52                   	push   edx
c000add3:	50                   	push   eax
c000add4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000add7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adda:	e8 04 91 01 00       	call   c0023ee3 <__adddf3>
c000addf:	83 c4 10             	add    esp,0x10
c000ade2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ade5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ade8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adeb:	4f                   	dec    edi
c000adec:	83 ec 0c             	sub    esp,0xc
c000adef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adf6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adfd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae01:	e8 51 a1 01 00       	call   c0024f57 <__extendsfdf2>
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae0d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae19:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae21:	e8 3a 97 01 00       	call   c0024560 <__muldf3>
c000ae26:	83 c4 10             	add    esp,0x10
c000ae29:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae2d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae31:	52                   	push   edx
c000ae32:	50                   	push   eax
c000ae33:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae36:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae39:	e8 a5 90 01 00       	call   c0023ee3 <__adddf3>
c000ae3e:	83 c4 10             	add    esp,0x10
c000ae41:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae44:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae4a:	4f                   	dec    edi
c000ae4b:	83 ec 0c             	sub    esp,0xc
c000ae4e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae55:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae5c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae60:	e8 f2 a0 01 00       	call   c0024f57 <__extendsfdf2>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae6c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae78:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae80:	e8 db 96 01 00       	call   c0024560 <__muldf3>
c000ae85:	83 c4 10             	add    esp,0x10
c000ae88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae8c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae90:	52                   	push   edx
c000ae91:	50                   	push   eax
c000ae92:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae95:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae98:	e8 46 90 01 00       	call   c0023ee3 <__adddf3>
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aea3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aea6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea9:	4f                   	dec    edi
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aeb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeb4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aebb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aebf:	e8 93 a0 01 00       	call   c0024f57 <__extendsfdf2>
c000aec4:	83 c4 10             	add    esp,0x10
c000aec7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aecb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aed3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aed7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aedb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aedf:	e8 7c 96 01 00       	call   c0024560 <__muldf3>
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeeb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeef:	52                   	push   edx
c000aef0:	50                   	push   eax
c000aef1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aef4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aef7:	e8 e7 8f 01 00       	call   c0023ee3 <__adddf3>
c000aefc:	83 c4 10             	add    esp,0x10
c000aeff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af02:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af08:	4f                   	dec    edi
c000af09:	83 ec 0c             	sub    esp,0xc
c000af0c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af13:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af1a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af1e:	e8 34 a0 01 00       	call   c0024f57 <__extendsfdf2>
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af2a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af36:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af3e:	e8 1d 96 01 00       	call   c0024560 <__muldf3>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af4a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af4e:	52                   	push   edx
c000af4f:	50                   	push   eax
c000af50:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af53:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af56:	e8 88 8f 01 00       	call   c0023ee3 <__adddf3>
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af61:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af67:	4f                   	dec    edi
c000af68:	83 ec 0c             	sub    esp,0xc
c000af6b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af72:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af79:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af7d:	e8 d5 9f 01 00       	call   c0024f57 <__extendsfdf2>
c000af82:	83 c4 10             	add    esp,0x10
c000af85:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af89:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af95:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af9d:	e8 be 95 01 00       	call   c0024560 <__muldf3>
c000afa2:	83 c4 10             	add    esp,0x10
c000afa5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afa9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afad:	52                   	push   edx
c000afae:	50                   	push   eax
c000afaf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afb2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afb5:	e8 29 8f 01 00       	call   c0023ee3 <__adddf3>
c000afba:	83 c4 10             	add    esp,0x10
c000afbd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afc0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afc3:	85 ff                	test   edi,edi
c000afc5:	0f 8f e9 fc ff ff    	jg     c000acb4 <calc_output_multi+0x10e>
c000afcb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afcf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afd3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afd7:	0f 89 4c fc ff ff    	jns    c000ac29 <calc_output_multi+0x83>
c000afdd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afe1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afe5:	29 c8                	sub    eax,ecx
c000afe7:	99                   	cdq    
c000afe8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000aff0:	0f af d0             	imul   edx,eax
c000aff3:	40                   	inc    eax
c000aff4:	01 d1                	add    ecx,edx
c000aff6:	0f af c3             	imul   eax,ebx
c000aff9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000affd:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b004:	55                   	push   ebp
c000b005:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b009:	6a 00                	push   0x0
c000b00b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b00f:	e8 b1 56 ff ff       	call   c00006c5 <memset>
c000b014:	83 c4 10             	add    esp,0x10
c000b017:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b01b:	e8 e0 e6 ff ff       	call   c0009700 <fp_to_double>
c000b020:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b024:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b028:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b02c:	e8 c5 e6 ff ff       	call   c00096f6 <fp_to_int>
c000b031:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b034:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b037:	57                   	push   edi
c000b038:	57                   	push   edi
c000b039:	89 df                	mov    edi,ebx
c000b03b:	55                   	push   ebp
c000b03c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b040:	e8 33 88 01 00       	call   c0023878 <__subsf3>
c000b045:	89 04 24             	mov    DWORD PTR [esp],eax
c000b048:	e8 0a 9f 01 00       	call   c0024f57 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b054:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b064:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b068:	e8 f3 94 01 00       	call   c0024560 <__muldf3>
c000b06d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b070:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b074:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b078:	e8 da 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b084:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b088:	52                   	push   edx
c000b089:	50                   	push   eax
c000b08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b092:	e8 4c 8e 01 00       	call   c0023ee3 <__adddf3>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b09e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0a2:	89 f8                	mov    eax,edi
c000b0a4:	b9 08 00 00 00       	mov    ecx,0x8
c000b0a9:	99                   	cdq    
c000b0aa:	f7 f9                	idiv   ecx
c000b0ac:	4a                   	dec    edx
c000b0ad:	83 fa 06             	cmp    edx,0x6
c000b0b0:	77 07                	ja     c000b0b9 <calc_output_multi+0x513>
c000b0b2:	ff 24 95 80 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9880]
c000b0b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0bd:	4f                   	dec    edi
c000b0be:	83 ec 0c             	sub    esp,0xc
c000b0c1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0cf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0d3:	e8 7f 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0f3:	e8 68 94 01 00       	call   c0024560 <__muldf3>
c000b0f8:	83 c4 10             	add    esp,0x10
c000b0fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b103:	52                   	push   edx
c000b104:	50                   	push   eax
c000b105:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b108:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b10b:	e8 d3 8d 01 00       	call   c0023ee3 <__adddf3>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b116:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b11d:	4f                   	dec    edi
c000b11e:	83 ec 0c             	sub    esp,0xc
c000b121:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b124:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b128:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b12f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b133:	e8 1f 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b13f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b14b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b153:	e8 08 94 01 00       	call   c0024560 <__muldf3>
c000b158:	83 c4 10             	add    esp,0x10
c000b15b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b15f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b163:	52                   	push   edx
c000b164:	50                   	push   eax
c000b165:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b168:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b16b:	e8 73 8d 01 00       	call   c0023ee3 <__adddf3>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b176:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b17d:	4f                   	dec    edi
c000b17e:	83 ec 0c             	sub    esp,0xc
c000b181:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b184:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b188:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b18f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b193:	e8 bf 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b198:	83 c4 10             	add    esp,0x10
c000b19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b3:	e8 a8 93 01 00       	call   c0024560 <__muldf3>
c000b1b8:	83 c4 10             	add    esp,0x10
c000b1bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1c3:	52                   	push   edx
c000b1c4:	50                   	push   eax
c000b1c5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1cb:	e8 13 8d 01 00       	call   c0023ee3 <__adddf3>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1d6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1dd:	4f                   	dec    edi
c000b1de:	83 ec 0c             	sub    esp,0xc
c000b1e1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1ef:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1f3:	e8 5f 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b1f8:	83 c4 10             	add    esp,0x10
c000b1fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b203:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b207:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b213:	e8 48 93 01 00       	call   c0024560 <__muldf3>
c000b218:	83 c4 10             	add    esp,0x10
c000b21b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b223:	52                   	push   edx
c000b224:	50                   	push   eax
c000b225:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b228:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b22b:	e8 b3 8c 01 00       	call   c0023ee3 <__adddf3>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b236:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b239:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23d:	4f                   	dec    edi
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b244:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b248:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b24f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b253:	e8 ff 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b258:	83 c4 10             	add    esp,0x10
c000b25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b273:	e8 e8 92 01 00       	call   c0024560 <__muldf3>
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b27f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b283:	52                   	push   edx
c000b284:	50                   	push   eax
c000b285:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b288:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b28b:	e8 53 8c 01 00       	call   c0023ee3 <__adddf3>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b296:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b29d:	4f                   	dec    edi
c000b29e:	83 ec 0c             	sub    esp,0xc
c000b2a1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2af:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2b3:	e8 9f 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b2b8:	83 c4 10             	add    esp,0x10
c000b2bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d3:	e8 88 92 01 00       	call   c0024560 <__muldf3>
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2e3:	52                   	push   edx
c000b2e4:	50                   	push   eax
c000b2e5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2eb:	e8 f3 8b 01 00       	call   c0023ee3 <__adddf3>
c000b2f0:	83 c4 10             	add    esp,0x10
c000b2f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2f6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2fd:	4f                   	dec    edi
c000b2fe:	83 ec 0c             	sub    esp,0xc
c000b301:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b304:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b308:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b30f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b313:	e8 3f 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b318:	83 c4 10             	add    esp,0x10
c000b31b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b31f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b323:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b327:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b333:	e8 28 92 01 00       	call   c0024560 <__muldf3>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b33f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b343:	52                   	push   edx
c000b344:	50                   	push   eax
c000b345:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b348:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b34b:	e8 93 8b 01 00       	call   c0023ee3 <__adddf3>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b356:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b359:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b35d:	4f                   	dec    edi
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b364:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b368:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b36f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b373:	e8 df 9b 01 00       	call   c0024f57 <__extendsfdf2>
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b37f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b383:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b387:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b38f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b393:	e8 c8 91 01 00       	call   c0024560 <__muldf3>
c000b398:	83 c4 10             	add    esp,0x10
c000b39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3a3:	52                   	push   edx
c000b3a4:	50                   	push   eax
c000b3a5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3a8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3ab:	e8 33 8b 01 00       	call   c0023ee3 <__adddf3>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3b6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3b9:	85 ff                	test   edi,edi
c000b3bb:	0f 8f e1 fc ff ff    	jg     c000b0a2 <calc_output_multi+0x4fc>
c000b3c1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3c5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3c9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3cd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3d2:	0f 8f 3f fc ff ff    	jg     c000b017 <calc_output_multi+0x471>
c000b3d8:	be 08 00 00 00       	mov    esi,0x8
c000b3dd:	89 d8                	mov    eax,ebx
c000b3df:	99                   	cdq    
c000b3e0:	f7 fe                	idiv   esi
c000b3e2:	4a                   	dec    edx
c000b3e3:	83 fa 06             	cmp    edx,0x6
c000b3e6:	77 07                	ja     c000b3ef <calc_output_multi+0x849>
c000b3e8:	ff 24 95 9c 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9864]
c000b3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3f3:	4b                   	dec    ebx
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b403:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b406:	e8 d8 8a 01 00       	call   c0023ee3 <__adddf3>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b412:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b422:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b426:	e8 35 91 01 00       	call   c0024560 <__muldf3>
c000b42b:	5d                   	pop    ebp
c000b42c:	59                   	pop    ecx
c000b42d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b431:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b435:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43d:	e8 f1 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b449:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b450:	4b                   	dec    ebx
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b45c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b460:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b463:	e8 7b 8a 01 00       	call   c0023ee3 <__adddf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b46f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b483:	e8 d8 90 01 00       	call   c0024560 <__muldf3>
c000b488:	59                   	pop    ecx
c000b489:	5f                   	pop    edi
c000b48a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b48e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b49a:	e8 94 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b49f:	83 c4 10             	add    esp,0x10
c000b4a2:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4a6:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ad:	4b                   	dec    ebx
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4c0:	e8 1e 8a 01 00       	call   c0023ee3 <__adddf3>
c000b4c5:	83 c4 10             	add    esp,0x10
c000b4c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e0:	e8 7b 90 01 00       	call   c0024560 <__muldf3>
c000b4e5:	5f                   	pop    edi
c000b4e6:	5d                   	pop    ebp
c000b4e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f7:	e8 37 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b4fc:	83 c4 10             	add    esp,0x10
c000b4ff:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b503:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50a:	4b                   	dec    ebx
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b516:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b51a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b51d:	e8 c1 89 01 00       	call   c0023ee3 <__adddf3>
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b52d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b53d:	e8 1e 90 01 00       	call   c0024560 <__muldf3>
c000b542:	5d                   	pop    ebp
c000b543:	59                   	pop    ecx
c000b544:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b548:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b54c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b550:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b554:	e8 da 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b559:	83 c4 10             	add    esp,0x10
c000b55c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b560:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b567:	4b                   	dec    ebx
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b573:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b577:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b57a:	e8 64 89 01 00       	call   c0023ee3 <__adddf3>
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b586:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b58a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b592:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b596:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b59a:	e8 c1 8f 01 00       	call   c0024560 <__muldf3>
c000b59f:	59                   	pop    ecx
c000b5a0:	5f                   	pop    edi
c000b5a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5a5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b1:	e8 7d 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b5b6:	83 c4 10             	add    esp,0x10
c000b5b9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5bd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c4:	4b                   	dec    ebx
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d7:	e8 07 89 01 00       	call   c0023ee3 <__adddf3>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f7:	e8 64 8f 01 00       	call   c0024560 <__muldf3>
c000b5fc:	5f                   	pop    edi
c000b5fd:	5d                   	pop    ebp
c000b5fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b602:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 20 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b61a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4b                   	dec    ebx
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b631:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b634:	e8 aa 88 01 00       	call   c0023ee3 <__adddf3>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b640:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b654:	e8 07 8f 01 00       	call   c0024560 <__muldf3>
c000b659:	5d                   	pop    ebp
c000b65a:	59                   	pop    ecx
c000b65b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b65f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 c3 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b670:	83 c4 10             	add    esp,0x10
c000b673:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b677:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67e:	4b                   	dec    ebx
c000b67f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b683:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b68a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b68e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b691:	e8 4d 88 01 00       	call   c0023ee3 <__adddf3>
c000b696:	83 c4 10             	add    esp,0x10
c000b699:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b69d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b1:	e8 aa 8e 01 00       	call   c0024560 <__muldf3>
c000b6b6:	59                   	pop    ecx
c000b6b7:	5f                   	pop    edi
c000b6b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 66 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	85 db                	test   ebx,ebx
c000b6d2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6d6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6d9:	0f 8f fe fc ff ff    	jg     c000b3dd <calc_output_multi+0x837>
c000b6df:	83 c4 4c             	add    esp,0x4c
c000b6e2:	5b                   	pop    ebx
c000b6e3:	5e                   	pop    esi
c000b6e4:	5f                   	pop    edi
c000b6e5:	5d                   	pop    ebp
c000b6e6:	c3                   	ret    

c000b6e7 <double_to_fp>:
c000b6e7:	83 ec 0c             	sub    esp,0xc
c000b6ea:	68 00 00 b0 40       	push   0x40b00000
c000b6ef:	6a 00                	push   0x0
c000b6f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6f9:	e8 62 8e 01 00       	call   c0024560 <__muldf3>
c000b6fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b706:	83 c4 1c             	add    esp,0x1c
c000b709:	e9 d2 98 01 00       	jmp    c0024fe0 <lrint>

c000b70e <fmod_one>:
c000b70e:	83 ec 2c             	sub    esp,0x2c
c000b711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b71d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b721:	83 ec 08             	sub    esp,0x8
c000b724:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b728:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72c:	e8 af 98 01 00       	call   c0024fe0 <lrint>
c000b731:	83 c4 10             	add    esp,0x10
c000b734:	83 ec 0c             	sub    esp,0xc
c000b737:	50                   	push   eax
c000b738:	e8 86 94 01 00       	call   c0024bc3 <__floatsidf>
c000b73d:	83 c4 10             	add    esp,0x10
c000b740:	52                   	push   edx
c000b741:	50                   	push   eax
c000b742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74a:	e8 e5 8d 01 00       	call   c0024534 <__subdf3>
c000b74f:	83 c4 10             	add    esp,0x10
c000b752:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b756:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b75a:	b8 00 00 00 00       	mov    eax,0x0
c000b75f:	ba 00 00 00 00       	mov    edx,0x0
c000b764:	52                   	push   edx
c000b765:	50                   	push   eax
c000b766:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b76a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b76e:	e8 bc 96 01 00       	call   c0024e2f <__ltdf2>
c000b773:	83 c4 10             	add    esp,0x10
c000b776:	85 c0                	test   eax,eax
c000b778:	79 1e                	jns    c000b798 <fmod_one+0x8a>
c000b77a:	b8 00 00 00 00       	mov    eax,0x0
c000b77f:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b784:	52                   	push   edx
c000b785:	50                   	push   eax
c000b786:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78e:	e8 50 87 01 00       	call   c0023ee3 <__adddf3>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	eb 08                	jmp    c000b7a0 <fmod_one+0x92>
c000b798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b79c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7a0:	83 c4 2c             	add    esp,0x2c
c000b7a3:	c3                   	ret    

c000b7a4 <prepare_data>:
c000b7a4:	55                   	push   ebp
c000b7a5:	57                   	push   edi
c000b7a6:	56                   	push   esi
c000b7a7:	53                   	push   ebx
c000b7a8:	83 ec 1c             	sub    esp,0x1c
c000b7ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7b3:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7b7:	0f 89 57 01 00 00    	jns    c000b914 <prepare_data+0x170>
c000b7bd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7c3:	85 d2                	test   edx,edx
c000b7c5:	75 0d                	jne    c000b7d4 <prepare_data+0x30>
c000b7c7:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7ca:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7cd:	29 d0                	sub    eax,edx
c000b7cf:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7d2:	eb 44                	jmp    c000b818 <prepare_data+0x74>
c000b7d4:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7d7:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b7da:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b7dd:	39 c1                	cmp    ecx,eax
c000b7df:	7d 04                	jge    c000b7e5 <prepare_data+0x41>
c000b7e1:	29 d0                	sub    eax,edx
c000b7e3:	eb 2d                	jmp    c000b812 <prepare_data+0x6e>
c000b7e5:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b7eb:	29 d7                	sub    edi,edx
c000b7ed:	01 f7                	add    edi,esi
c000b7ef:	51                   	push   ecx
c000b7f0:	29 f2                	sub    edx,esi
c000b7f2:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b7f9:	8d 14 90             	lea    edx,[eax+edx*4]
c000b7fc:	51                   	push   ecx
c000b7fd:	52                   	push   edx
c000b7fe:	50                   	push   eax
c000b7ff:	e8 53 4e ff ff       	call   c0000657 <memmove>
c000b804:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b807:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b80a:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b80d:	29 f0                	sub    eax,esi
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	29 f0                	sub    eax,esi
c000b814:	79 02                	jns    c000b818 <prepare_data+0x74>
c000b816:	31 c0                	xor    eax,eax
c000b818:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b81b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b81e:	29 ef                	sub    edi,ebp
c000b820:	39 c7                	cmp    edi,eax
c000b822:	7e 02                	jle    c000b826 <prepare_data+0x82>
c000b824:	89 c7                	mov    edi,eax
c000b826:	89 f8                	mov    eax,edi
c000b828:	99                   	cdq    
c000b829:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b82c:	b8 15 00 00 00       	mov    eax,0x15
c000b831:	29 d7                	sub    edi,edx
c000b833:	0f 88 dd 00 00 00    	js     c000b916 <prepare_data+0x172>
c000b839:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b83c:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b83f:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b842:	0f 8f ce 00 00 00    	jg     c000b916 <prepare_data+0x172>
c000b848:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b84e:	50                   	push   eax
c000b84f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b856:	50                   	push   eax
c000b857:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b85b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b85d:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b860:	50                   	push   eax
c000b861:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b864:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b868:	50                   	push   eax
c000b869:	e8 21 4e ff ff       	call   c000068f <memcpy>
c000b86e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b871:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b874:	01 fd                	add    ebp,edi
c000b876:	01 f9                	add    ecx,edi
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b87e:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b881:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b888:	0f 85 86 00 00 00    	jne    c000b914 <prepare_data+0x170>
c000b88e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b891:	89 e8                	mov    eax,ebp
c000b893:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b896:	29 c8                	sub    eax,ecx
c000b898:	39 f8                	cmp    eax,edi
c000b89a:	7d 78                	jge    c000b914 <prepare_data+0x170>
c000b89c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8a0:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8a4:	74 6e                	je     c000b914 <prepare_data+0x170>
c000b8a6:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8ad:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8b0:	29 ef                	sub    edi,ebp
c000b8b2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8b6:	7c 29                	jl     c000b8e1 <prepare_data+0x13d>
c000b8b8:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8bb:	29 f1                	sub    ecx,esi
c000b8bd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8c4:	55                   	push   ebp
c000b8c5:	50                   	push   eax
c000b8c6:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8c9:	50                   	push   eax
c000b8ca:	52                   	push   edx
c000b8cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8cf:	e8 83 4d ff ff       	call   c0000657 <memmove>
c000b8d4:	83 c4 10             	add    esp,0x10
c000b8d7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8da:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b8dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b8e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b8e7:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b8ea:	83 c6 05             	add    esi,0x5
c000b8ed:	78 07                	js     c000b8f6 <prepare_data+0x152>
c000b8ef:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8f2:	39 cf                	cmp    edi,ecx
c000b8f4:	7e 04                	jle    c000b8fa <prepare_data+0x156>
c000b8f6:	89 ce                	mov    esi,ecx
c000b8f8:	29 c6                	sub    esi,eax
c000b8fa:	8d 04 82             	lea    eax,[edx+eax*4]
c000b8fd:	51                   	push   ecx
c000b8fe:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b905:	51                   	push   ecx
c000b906:	6a 00                	push   0x0
c000b908:	50                   	push   eax
c000b909:	e8 b7 4d ff ff       	call   c00006c5 <memset>
c000b90e:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	31 c0                	xor    eax,eax
c000b916:	83 c4 1c             	add    esp,0x1c
c000b919:	5b                   	pop    ebx
c000b91a:	5e                   	pop    esi
c000b91b:	5f                   	pop    edi
c000b91c:	5d                   	pop    ebp
c000b91d:	c3                   	ret    

c000b91e <sinc_multichan_vari_process>:
c000b91e:	55                   	push   ebp
c000b91f:	b8 05 00 00 00       	mov    eax,0x5
c000b924:	57                   	push   edi
c000b925:	56                   	push   esi
c000b926:	53                   	push   ebx
c000b927:	83 ec 4c             	sub    esp,0x4c
c000b92a:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b92e:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b932:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b935:	85 db                	test   ebx,ebx
c000b937:	0f 84 b5 05 00 00    	je     c000bef2 <sinc_multichan_vari_process+0x5d4>
c000b93d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b940:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b943:	0f af d0             	imul   edx,eax
c000b946:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b949:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b94d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b954:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b957:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b95e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b961:	8b 06                	mov    eax,DWORD PTR [esi]
c000b963:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96b:	57                   	push   edi
c000b96c:	57                   	push   edi
c000b96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b971:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b975:	e8 15 dd ff ff       	call   c000968f <is_bad_src_ratio>
c000b97a:	83 c4 10             	add    esp,0x10
c000b97d:	89 c2                	mov    edx,eax
c000b97f:	b8 16 00 00 00       	mov    eax,0x16
c000b984:	85 d2                	test   edx,edx
c000b986:	0f 85 66 05 00 00    	jne    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000b98c:	83 ec 0c             	sub    esp,0xc
c000b98f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b992:	e8 2c 92 01 00       	call   c0024bc3 <__floatsidf>
c000b997:	83 c4 10             	add    esp,0x10
c000b99a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b99d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9a1:	68 00 00 00 40       	push   0x40000000
c000b9a6:	6a 00                	push   0x0
c000b9a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9b0:	e8 2e 85 01 00       	call   c0023ee3 <__adddf3>
c000b9b5:	59                   	pop    ecx
c000b9b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9c1:	e8 fd 91 01 00       	call   c0024bc3 <__floatsidf>
c000b9c6:	83 c4 10             	add    esp,0x10
c000b9c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9d1:	52                   	push   edx
c000b9d2:	50                   	push   eax
c000b9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9db:	e8 64 8e 01 00       	call   c0024844 <__divdf3>
c000b9e0:	83 c4 10             	add    esp,0x10
c000b9e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9eb:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9ed:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b9f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9f7:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000b9fa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000b9fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba05:	52                   	push   edx
c000ba06:	50                   	push   eax
c000ba07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba0f:	e8 1b 94 01 00       	call   c0024e2f <__ltdf2>
c000ba14:	83 c4 10             	add    esp,0x10
c000ba17:	85 c0                	test   eax,eax
c000ba19:	79 1d                	jns    c000ba38 <sinc_multichan_vari_process+0x11a>
c000ba1b:	68 00 00 f0 3f       	push   0x3ff00000
c000ba20:	6a 00                	push   0x0
c000ba22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba2a:	e8 00 94 01 00       	call   c0024e2f <__ltdf2>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	85 c0                	test   eax,eax
c000ba34:	78 2c                	js     c000ba62 <sinc_multichan_vari_process+0x144>
c000ba36:	eb 4a                	jmp    c000ba82 <sinc_multichan_vari_process+0x164>
c000ba38:	68 00 00 f0 3f       	push   0x3ff00000
c000ba3d:	6a 00                	push   0x0
c000ba3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba47:	e8 e3 93 01 00       	call   c0024e2f <__ltdf2>
c000ba4c:	83 c4 10             	add    esp,0x10
c000ba4f:	85 c0                	test   eax,eax
c000ba51:	79 2f                	jns    c000ba82 <sinc_multichan_vari_process+0x164>
c000ba53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba5b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba66:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba72:	e8 cd 8d 01 00       	call   c0024844 <__divdf3>
c000ba77:	83 c4 10             	add    esp,0x10
c000ba7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba7e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba82:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba85:	50                   	push   eax
c000ba86:	50                   	push   eax
c000ba87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8f:	e8 4c 95 01 00       	call   c0024fe0 <lrint>
c000ba94:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ba97:	40                   	inc    eax
c000ba98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba9c:	0f af c7             	imul   eax,edi
c000ba9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000baa6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baaa:	58                   	pop    eax
c000baab:	5a                   	pop    edx
c000baac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab4:	e8 55 fc ff ff       	call   c000b70e <fmod_one>
c000bab9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000babc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bac7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bad7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000badb:	e8 54 8a 01 00       	call   c0024534 <__subdf3>
c000bae0:	83 c4 18             	add    esp,0x18
c000bae3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bae7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baeb:	52                   	push   edx
c000baec:	50                   	push   eax
c000baed:	e8 ee 94 01 00       	call   c0024fe0 <lrint>
c000baf2:	0f af f8             	imul   edi,eax
c000baf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000baf9:	01 f8                	add    eax,edi
c000bafb:	99                   	cdq    
c000bafc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000baff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0a:	68 00 00 f0 3f       	push   0x3ff00000
c000bb0f:	6a 00                	push   0x0
c000bb11:	e8 2e 8d 01 00       	call   c0024844 <__divdf3>
c000bb16:	83 c4 10             	add    esp,0x10
c000bb19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb21:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb26:	68 23 42 92 0c       	push   0xc924223
c000bb2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb33:	e8 ab 83 01 00       	call   c0023ee3 <__adddf3>
c000bb38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb40:	83 c4 20             	add    esp,0x20
c000bb43:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb4b:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb56:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb59:	7d 4e                	jge    c000bba9 <sinc_multichan_vari_process+0x28b>
c000bb5b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb5e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb61:	01 c8                	add    eax,ecx
c000bb63:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb66:	99                   	cdq    
c000bb67:	f7 f9                	idiv   ecx
c000bb69:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb6d:	7d 0c                	jge    c000bb7b <sinc_multichan_vari_process+0x25d>
c000bb6f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb72:	85 ff                	test   edi,edi
c000bb74:	79 68                	jns    c000bbde <sinc_multichan_vari_process+0x2c0>
c000bb76:	e9 e3 00 00 00       	jmp    c000bc5e <sinc_multichan_vari_process+0x340>
c000bb7b:	50                   	push   eax
c000bb7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb80:	55                   	push   ebp
c000bb81:	53                   	push   ebx
c000bb82:	e8 1d fc ff ff       	call   c000b7a4 <prepare_data>
c000bb87:	83 c4 10             	add    esp,0x10
c000bb8a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	0f 85 5d 03 00 00    	jne    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000bb95:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb98:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb9b:	01 c8                	add    eax,ecx
c000bb9d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bba0:	99                   	cdq    
c000bba1:	f7 f9                	idiv   ecx
c000bba3:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bba7:	7c c6                	jl     c000bb6f <sinc_multichan_vari_process+0x251>
c000bba9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbb0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbb3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbbe:	89 06                	mov    DWORD PTR [esi],eax
c000bbc0:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbc3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbc6:	99                   	cdq    
c000bbc7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbca:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbd0:	99                   	cdq    
c000bbd1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbd4:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbd7:	31 c0                	xor    eax,eax
c000bbd9:	e9 14 03 00 00       	jmp    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000bbde:	83 ec 0c             	sub    esp,0xc
c000bbe1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bbe4:	e8 da 8f 01 00       	call   c0024bc3 <__floatsidf>
c000bbe9:	83 c4 10             	add    esp,0x10
c000bbec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbfc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc04:	e8 da 82 01 00       	call   c0023ee3 <__adddf3>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc10:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	e8 ba 82 01 00       	call   c0023ee3 <__adddf3>
c000bc29:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc34:	e8 8a 8f 01 00       	call   c0024bc3 <__floatsidf>
c000bc39:	83 c4 10             	add    esp,0x10
c000bc3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc44:	52                   	push   edx
c000bc45:	50                   	push   eax
c000bc46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4e:	e8 da 91 01 00       	call   c0024e2d <__gedf2>
c000bc53:	83 c4 10             	add    esp,0x10
c000bc56:	85 c0                	test   eax,eax
c000bc58:	0f 89 4b ff ff ff    	jns    c000bba9 <sinc_multichan_vari_process+0x28b>
c000bc5e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc62:	0f 8e ed 00 00 00    	jle    c000bd55 <sinc_multichan_vari_process+0x437>
c000bc68:	83 ec 10             	sub    esp,0x10
c000bc6b:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc6e:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc71:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc74:	ff 36                	push   DWORD PTR [esi]
c000bc76:	e8 b9 88 01 00       	call   c0024534 <__subdf3>
c000bc7b:	83 c4 18             	add    esp,0x18
c000bc7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc86:	52                   	push   edx
c000bc87:	50                   	push   eax
c000bc88:	e8 33 93 01 00       	call   c0024fc0 <fabs>
c000bc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc9d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bca2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcaa:	e8 62 91 01 00       	call   c0024e11 <__gtdf2>
c000bcaf:	83 c4 10             	add    esp,0x10
c000bcb2:	85 c0                	test   eax,eax
c000bcb4:	0f 8e 9b 00 00 00    	jle    c000bd55 <sinc_multichan_vari_process+0x437>
c000bcba:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcbc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bccc:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bccf:	e8 60 88 01 00       	call   c0024534 <__subdf3>
c000bcd4:	59                   	pop    ecx
c000bcd5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcd9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bcdd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bce0:	e8 de 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bce5:	83 c4 10             	add    esp,0x10
c000bce8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf0:	52                   	push   edx
c000bcf1:	50                   	push   eax
c000bcf2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfa:	e8 61 88 01 00       	call   c0024560 <__muldf3>
c000bcff:	5f                   	pop    edi
c000bd00:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd04:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd08:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd0b:	e8 b3 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd10:	83 c4 10             	add    esp,0x10
c000bd13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd1b:	52                   	push   edx
c000bd1c:	50                   	push   eax
c000bd1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd25:	e8 1a 8b 01 00       	call   c0024844 <__divdf3>
c000bd2a:	83 c4 10             	add    esp,0x10
c000bd2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd45:	e8 99 81 01 00       	call   c0023ee3 <__adddf3>
c000bd4a:	83 c4 10             	add    esp,0x10
c000bd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd55:	83 ec 0c             	sub    esp,0xc
c000bd58:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd5b:	e8 63 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd60:	83 c4 10             	add    esp,0x10
c000bd63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7b:	e8 af 90 01 00       	call   c0024e2f <__ltdf2>
c000bd80:	83 c4 10             	add    esp,0x10
c000bd83:	85 c0                	test   eax,eax
c000bd85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bd95:	78 10                	js     c000bda7 <sinc_multichan_vari_process+0x489>
c000bd97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bd9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bda3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb7:	e8 a4 87 01 00       	call   c0024560 <__muldf3>
c000bdbc:	59                   	pop    ecx
c000bdbd:	5f                   	pop    edi
c000bdbe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdc2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdce:	e8 14 f9 ff ff       	call   c000b6e7 <double_to_fp>
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	89 c7                	mov    edi,eax
c000bdd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde5:	e8 76 87 01 00       	call   c0024560 <__muldf3>
c000bdea:	83 c4 18             	add    esp,0x18
c000bded:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdf5:	52                   	push   edx
c000bdf6:	50                   	push   eax
c000bdf7:	e8 eb f8 ff ff       	call   c000b6e7 <double_to_fp>
c000bdfc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdff:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be03:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be06:	8d 04 90             	lea    eax,[eax+edx*4]
c000be09:	50                   	push   eax
c000be0a:	50                   	push   eax
c000be0b:	50                   	push   eax
c000be0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be0f:	e8 af 8d 01 00       	call   c0024bc3 <__floatsidf>
c000be14:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be18:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be2c:	e8 13 8a 01 00       	call   c0024844 <__divdf3>
c000be31:	83 c4 1c             	add    esp,0x1c
c000be34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be38:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be3c:	52                   	push   edx
c000be3d:	89 fa                	mov    edx,edi
c000be3f:	50                   	push   eax
c000be40:	89 d8                	mov    eax,ebx
c000be42:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be45:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be49:	e8 58 ed ff ff       	call   c000aba6 <calc_output_multi>
c000be4e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be51:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be64:	e8 db 89 01 00       	call   c0024844 <__divdf3>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be84:	e8 5a 80 01 00       	call   c0023ee3 <__adddf3>
c000be89:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be8d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be91:	83 c4 28             	add    esp,0x28
c000be94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be9c:	e8 6d f8 ff ff       	call   c000b70e <fmod_one>
c000bea1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bea4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000beac:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beaf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bebb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bebf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bec3:	e8 6c 86 01 00       	call   c0024534 <__subdf3>
c000bec8:	83 c4 18             	add    esp,0x18
c000becb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000becf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bed3:	52                   	push   edx
c000bed4:	50                   	push   eax
c000bed5:	e8 06 91 01 00       	call   c0024fe0 <lrint>
c000beda:	0f af f8             	imul   edi,eax
c000bedd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bee1:	83 c4 10             	add    esp,0x10
c000bee4:	01 f8                	add    eax,edi
c000bee6:	99                   	cdq    
c000bee7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000beea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000beed:	e9 61 fc ff ff       	jmp    c000bb53 <sinc_multichan_vari_process+0x235>
c000bef2:	83 c4 4c             	add    esp,0x4c
c000bef5:	5b                   	pop    ebx
c000bef6:	5e                   	pop    esi
c000bef7:	5f                   	pop    edi
c000bef8:	5d                   	pop    ebp
c000bef9:	c3                   	ret    

c000befa <sinc_hex_vari_process>:
c000befa:	55                   	push   ebp
c000befb:	b8 05 00 00 00       	mov    eax,0x5
c000bf00:	57                   	push   edi
c000bf01:	56                   	push   esi
c000bf02:	53                   	push   ebx
c000bf03:	83 ec 4c             	sub    esp,0x4c
c000bf06:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf0a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf0e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf11:	85 db                	test   ebx,ebx
c000bf13:	0f 84 b7 05 00 00    	je     c000c4d0 <sinc_hex_vari_process+0x5d6>
c000bf19:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf1c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf1f:	0f af d0             	imul   edx,eax
c000bf22:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf25:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf29:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf30:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf33:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf3a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf48:	57                   	push   edi
c000bf49:	57                   	push   edi
c000bf4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf52:	e8 38 d7 ff ff       	call   c000968f <is_bad_src_ratio>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	b8 16 00 00 00       	mov    eax,0x16
c000bf61:	85 d2                	test   edx,edx
c000bf63:	0f 85 67 05 00 00    	jne    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000bf69:	83 ec 0c             	sub    esp,0xc
c000bf6c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf6f:	e8 4f 8c 01 00       	call   c0024bc3 <__floatsidf>
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf7e:	68 00 00 00 40       	push   0x40000000
c000bf83:	6a 00                	push   0x0
c000bf85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf8d:	e8 51 7f 01 00       	call   c0023ee3 <__adddf3>
c000bf92:	59                   	pop    ecx
c000bf93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf97:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bf9b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf9e:	e8 20 8c 01 00       	call   c0024bc3 <__floatsidf>
c000bfa3:	83 c4 10             	add    esp,0x10
c000bfa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfaa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfae:	52                   	push   edx
c000bfaf:	50                   	push   eax
c000bfb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb8:	e8 87 88 01 00       	call   c0024844 <__divdf3>
c000bfbd:	83 c4 10             	add    esp,0x10
c000bfc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bfcb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bfce:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bfd5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfd8:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfdf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfe3:	52                   	push   edx
c000bfe4:	50                   	push   eax
c000bfe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfe9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfed:	e8 3d 8e 01 00       	call   c0024e2f <__ltdf2>
c000bff2:	83 c4 10             	add    esp,0x10
c000bff5:	85 c0                	test   eax,eax
c000bff7:	79 1d                	jns    c000c016 <sinc_hex_vari_process+0x11c>
c000bff9:	68 00 00 f0 3f       	push   0x3ff00000
c000bffe:	6a 00                	push   0x0
c000c000:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c008:	e8 22 8e 01 00       	call   c0024e2f <__ltdf2>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	85 c0                	test   eax,eax
c000c012:	78 2c                	js     c000c040 <sinc_hex_vari_process+0x146>
c000c014:	eb 4a                	jmp    c000c060 <sinc_hex_vari_process+0x166>
c000c016:	68 00 00 f0 3f       	push   0x3ff00000
c000c01b:	6a 00                	push   0x0
c000c01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c025:	e8 05 8e 01 00       	call   c0024e2f <__ltdf2>
c000c02a:	83 c4 10             	add    esp,0x10
c000c02d:	85 c0                	test   eax,eax
c000c02f:	79 2f                	jns    c000c060 <sinc_hex_vari_process+0x166>
c000c031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c035:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c039:	89 04 24             	mov    DWORD PTR [esp],eax
c000c03c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c048:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c050:	e8 ef 87 01 00       	call   c0024844 <__divdf3>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c060:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c063:	50                   	push   eax
c000c064:	50                   	push   eax
c000c065:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c069:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c06d:	e8 6e 8f 01 00       	call   c0024fe0 <lrint>
c000c072:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c075:	40                   	inc    eax
c000c076:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c07a:	0f af c7             	imul   eax,edi
c000c07d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c084:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c088:	58                   	pop    eax
c000c089:	5a                   	pop    edx
c000c08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c092:	e8 77 f6 ff ff       	call   c000b70e <fmod_one>
c000c097:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c09a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c09e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0a2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b9:	e8 76 84 01 00       	call   c0024534 <__subdf3>
c000c0be:	83 c4 18             	add    esp,0x18
c000c0c1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0c9:	52                   	push   edx
c000c0ca:	50                   	push   eax
c000c0cb:	e8 10 8f 01 00       	call   c0024fe0 <lrint>
c000c0d0:	0f af f8             	imul   edi,eax
c000c0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d7:	01 f8                	add    eax,edi
c000c0d9:	99                   	cdq    
c000c0da:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0dd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	e8 50 87 01 00       	call   c0024844 <__divdf3>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c104:	68 23 42 92 0c       	push   0xc924223
c000c109:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c10d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c111:	e8 cd 7d 01 00       	call   c0023ee3 <__adddf3>
c000c116:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c11a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c11e:	83 c4 20             	add    esp,0x20
c000c121:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c129:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c131:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c134:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c137:	7d 4e                	jge    c000c187 <sinc_hex_vari_process+0x28d>
c000c139:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c13c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c13f:	01 c8                	add    eax,ecx
c000c141:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c144:	99                   	cdq    
c000c145:	f7 f9                	idiv   ecx
c000c147:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c14b:	7d 0c                	jge    c000c159 <sinc_hex_vari_process+0x25f>
c000c14d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c150:	85 ff                	test   edi,edi
c000c152:	79 69                	jns    c000c1bd <sinc_hex_vari_process+0x2c3>
c000c154:	e9 e4 00 00 00       	jmp    c000c23d <sinc_hex_vari_process+0x343>
c000c159:	50                   	push   eax
c000c15a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c15e:	56                   	push   esi
c000c15f:	53                   	push   ebx
c000c160:	e8 3f f6 ff ff       	call   c000b7a4 <prepare_data>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c16b:	85 c0                	test   eax,eax
c000c16d:	0f 85 5d 03 00 00    	jne    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000c173:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c176:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c179:	01 c8                	add    eax,ecx
c000c17b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c17e:	99                   	cdq    
c000c17f:	f7 f9                	idiv   ecx
c000c181:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c185:	7c c6                	jl     c000c14d <sinc_hex_vari_process+0x253>
c000c187:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c18a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c18e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c191:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c19c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c19f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1a2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1a5:	99                   	cdq    
c000c1a6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1a9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1ac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1af:	99                   	cdq    
c000c1b0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1b3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1b6:	31 c0                	xor    eax,eax
c000c1b8:	e9 13 03 00 00       	jmp    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000c1bd:	83 ec 0c             	sub    esp,0xc
c000c1c0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1c3:	e8 fb 89 01 00       	call   c0024bc3 <__floatsidf>
c000c1c8:	83 c4 10             	add    esp,0x10
c000c1cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1d7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e3:	e8 fb 7c 01 00       	call   c0023ee3 <__adddf3>
c000c1e8:	83 c4 10             	add    esp,0x10
c000c1eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c203:	e8 db 7c 01 00       	call   c0023ee3 <__adddf3>
c000c208:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c20f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c213:	e8 ab 89 01 00       	call   c0024bc3 <__floatsidf>
c000c218:	83 c4 10             	add    esp,0x10
c000c21b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c21f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c223:	52                   	push   edx
c000c224:	50                   	push   eax
c000c225:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c229:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c22d:	e8 fb 8b 01 00       	call   c0024e2d <__gedf2>
c000c232:	83 c4 10             	add    esp,0x10
c000c235:	85 c0                	test   eax,eax
c000c237:	0f 89 4a ff ff ff    	jns    c000c187 <sinc_hex_vari_process+0x28d>
c000c23d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c241:	0f 8e ef 00 00 00    	jle    c000c336 <sinc_hex_vari_process+0x43c>
c000c247:	83 ec 10             	sub    esp,0x10
c000c24a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c24d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c250:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c253:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c256:	e8 d9 82 01 00       	call   c0024534 <__subdf3>
c000c25b:	83 c4 18             	add    esp,0x18
c000c25e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c262:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c266:	52                   	push   edx
c000c267:	50                   	push   eax
c000c268:	e8 53 8d 01 00       	call   c0024fc0 <fabs>
c000c26d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c271:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c275:	83 c4 10             	add    esp,0x10
c000c278:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c27d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c282:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	e8 82 8b 01 00       	call   c0024e11 <__gtdf2>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	85 c0                	test   eax,eax
c000c294:	0f 8e 9c 00 00 00    	jle    c000c336 <sinc_hex_vari_process+0x43c>
c000c29a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c29d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2a8:	52                   	push   edx
c000c2a9:	50                   	push   eax
c000c2aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ad:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2b0:	e8 7f 82 01 00       	call   c0024534 <__subdf3>
c000c2b5:	59                   	pop    ecx
c000c2b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2ba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2be:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2c1:	e8 fd 88 01 00       	call   c0024bc3 <__floatsidf>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d1:	52                   	push   edx
c000c2d2:	50                   	push   eax
c000c2d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2db:	e8 80 82 01 00       	call   c0024560 <__muldf3>
c000c2e0:	5f                   	pop    edi
c000c2e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2e9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c2ec:	e8 d2 88 01 00       	call   c0024bc3 <__floatsidf>
c000c2f1:	83 c4 10             	add    esp,0x10
c000c2f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2fc:	52                   	push   edx
c000c2fd:	50                   	push   eax
c000c2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c302:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c306:	e8 39 85 01 00       	call   c0024844 <__divdf3>
c000c30b:	83 c4 10             	add    esp,0x10
c000c30e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c312:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c316:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c31a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c31e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c322:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c326:	e8 b8 7b 01 00       	call   c0023ee3 <__adddf3>
c000c32b:	83 c4 10             	add    esp,0x10
c000c32e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c332:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c336:	83 ec 0c             	sub    esp,0xc
c000c339:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c33c:	e8 82 88 01 00       	call   c0024bc3 <__floatsidf>
c000c341:	83 c4 10             	add    esp,0x10
c000c344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c34c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c35c:	e8 ce 8a 01 00       	call   c0024e2f <__ltdf2>
c000c361:	83 c4 10             	add    esp,0x10
c000c364:	85 c0                	test   eax,eax
c000c366:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c36a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c36e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c372:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c376:	78 10                	js     c000c388 <sinc_hex_vari_process+0x48e>
c000c378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c37c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c380:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c384:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c390:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c394:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c398:	e8 c3 81 01 00       	call   c0024560 <__muldf3>
c000c39d:	59                   	pop    ecx
c000c39e:	5f                   	pop    edi
c000c39f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3af:	e8 33 f3 ff ff       	call   c000b6e7 <double_to_fp>
c000c3b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3b8:	89 c7                	mov    edi,eax
c000c3ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	e8 95 81 01 00       	call   c0024560 <__muldf3>
c000c3cb:	83 c4 18             	add    esp,0x18
c000c3ce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3d6:	52                   	push   edx
c000c3d7:	50                   	push   eax
c000c3d8:	e8 0a f3 ff ff       	call   c000b6e7 <double_to_fp>
c000c3dd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c3e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c3e4:	83 c4 0c             	add    esp,0xc
c000c3e7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c3ea:	8d 04 90             	lea    eax,[eax+edx*4]
c000c3ed:	50                   	push   eax
c000c3ee:	50                   	push   eax
c000c3ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3f2:	e8 cc 87 01 00       	call   c0024bc3 <__floatsidf>
c000c3f7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c3fb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c3ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c403:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c407:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c40b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c40f:	e8 30 84 01 00       	call   c0024844 <__divdf3>
c000c414:	83 c4 18             	add    esp,0x18
c000c417:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c41b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c41f:	52                   	push   edx
c000c420:	89 fa                	mov    edx,edi
c000c422:	50                   	push   eax
c000c423:	89 d8                	mov    eax,ebx
c000c425:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c429:	e8 26 df ff ff       	call   c000a354 <calc_output_hex>
c000c42e:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c43a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c43e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c442:	e8 fd 83 01 00       	call   c0024844 <__divdf3>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c452:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c45a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c462:	e8 7c 7a 01 00       	call   c0023ee3 <__adddf3>
c000c467:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c46b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46f:	83 c4 18             	add    esp,0x18
c000c472:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c476:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c47a:	e8 8f f2 ff ff       	call   c000b70e <fmod_one>
c000c47f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c482:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c486:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c48a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c48d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a1:	e8 8e 80 01 00       	call   c0024534 <__subdf3>
c000c4a6:	83 c4 18             	add    esp,0x18
c000c4a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b1:	52                   	push   edx
c000c4b2:	50                   	push   eax
c000c4b3:	e8 28 8b 01 00       	call   c0024fe0 <lrint>
c000c4b8:	0f af f8             	imul   edi,eax
c000c4bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4bf:	83 c4 10             	add    esp,0x10
c000c4c2:	01 f8                	add    eax,edi
c000c4c4:	99                   	cdq    
c000c4c5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4c8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4cb:	e9 61 fc ff ff       	jmp    c000c131 <sinc_hex_vari_process+0x237>
c000c4d0:	83 c4 4c             	add    esp,0x4c
c000c4d3:	5b                   	pop    ebx
c000c4d4:	5e                   	pop    esi
c000c4d5:	5f                   	pop    edi
c000c4d6:	5d                   	pop    ebp
c000c4d7:	c3                   	ret    

c000c4d8 <sinc_quad_vari_process>:
c000c4d8:	55                   	push   ebp
c000c4d9:	b8 05 00 00 00       	mov    eax,0x5
c000c4de:	57                   	push   edi
c000c4df:	56                   	push   esi
c000c4e0:	53                   	push   ebx
c000c4e1:	83 ec 4c             	sub    esp,0x4c
c000c4e4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c4e8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c4ec:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c4ef:	85 db                	test   ebx,ebx
c000c4f1:	0f 84 b7 05 00 00    	je     c000caae <sinc_quad_vari_process+0x5d6>
c000c4f7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c4fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c4fd:	0f af d0             	imul   edx,eax
c000c500:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c503:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c507:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c50e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c511:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c518:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c51b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c522:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c526:	57                   	push   edi
c000c527:	57                   	push   edi
c000c528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c52c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c530:	e8 5a d1 ff ff       	call   c000968f <is_bad_src_ratio>
c000c535:	83 c4 10             	add    esp,0x10
c000c538:	89 c2                	mov    edx,eax
c000c53a:	b8 16 00 00 00       	mov    eax,0x16
c000c53f:	85 d2                	test   edx,edx
c000c541:	0f 85 67 05 00 00    	jne    c000caae <sinc_quad_vari_process+0x5d6>
c000c547:	83 ec 0c             	sub    esp,0xc
c000c54a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c54d:	e8 71 86 01 00       	call   c0024bc3 <__floatsidf>
c000c552:	83 c4 10             	add    esp,0x10
c000c555:	89 04 24             	mov    DWORD PTR [esp],eax
c000c558:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c55c:	68 00 00 00 40       	push   0x40000000
c000c561:	6a 00                	push   0x0
c000c563:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c567:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c56b:	e8 73 79 01 00       	call   c0023ee3 <__adddf3>
c000c570:	59                   	pop    ecx
c000c571:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c575:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c579:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c57c:	e8 42 86 01 00       	call   c0024bc3 <__floatsidf>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c588:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c58c:	52                   	push   edx
c000c58d:	50                   	push   eax
c000c58e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c592:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c596:	e8 a9 82 01 00       	call   c0024844 <__divdf3>
c000c59b:	83 c4 10             	add    esp,0x10
c000c59e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5a9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5b3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5b6:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5bd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5c1:	52                   	push   edx
c000c5c2:	50                   	push   eax
c000c5c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5cb:	e8 5f 88 01 00       	call   c0024e2f <__ltdf2>
c000c5d0:	83 c4 10             	add    esp,0x10
c000c5d3:	85 c0                	test   eax,eax
c000c5d5:	79 1d                	jns    c000c5f4 <sinc_quad_vari_process+0x11c>
c000c5d7:	68 00 00 f0 3f       	push   0x3ff00000
c000c5dc:	6a 00                	push   0x0
c000c5de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e6:	e8 44 88 01 00       	call   c0024e2f <__ltdf2>
c000c5eb:	83 c4 10             	add    esp,0x10
c000c5ee:	85 c0                	test   eax,eax
c000c5f0:	78 2c                	js     c000c61e <sinc_quad_vari_process+0x146>
c000c5f2:	eb 4a                	jmp    c000c63e <sinc_quad_vari_process+0x166>
c000c5f4:	68 00 00 f0 3f       	push   0x3ff00000
c000c5f9:	6a 00                	push   0x0
c000c5fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c603:	e8 27 88 01 00       	call   c0024e2f <__ltdf2>
c000c608:	83 c4 10             	add    esp,0x10
c000c60b:	85 c0                	test   eax,eax
c000c60d:	79 2f                	jns    c000c63e <sinc_quad_vari_process+0x166>
c000c60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c613:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c617:	89 04 24             	mov    DWORD PTR [esp],eax
c000c61a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c61e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c622:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c626:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62e:	e8 11 82 01 00       	call   c0024844 <__divdf3>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c63a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c63e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c641:	50                   	push   eax
c000c642:	50                   	push   eax
c000c643:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c647:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64b:	e8 90 89 01 00       	call   c0024fe0 <lrint>
c000c650:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c653:	40                   	inc    eax
c000c654:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c658:	0f af c7             	imul   eax,edi
c000c65b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c662:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c666:	58                   	pop    eax
c000c667:	5a                   	pop    edx
c000c668:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c670:	e8 99 f0 ff ff       	call   c000b70e <fmod_one>
c000c675:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c678:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c67c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c680:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c683:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c693:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c697:	e8 98 7e 01 00       	call   c0024534 <__subdf3>
c000c69c:	83 c4 18             	add    esp,0x18
c000c69f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a7:	52                   	push   edx
c000c6a8:	50                   	push   eax
c000c6a9:	e8 32 89 01 00       	call   c0024fe0 <lrint>
c000c6ae:	0f af f8             	imul   edi,eax
c000c6b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6b5:	01 f8                	add    eax,edi
c000c6b7:	99                   	cdq    
c000c6b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c6:	68 00 00 f0 3f       	push   0x3ff00000
c000c6cb:	6a 00                	push   0x0
c000c6cd:	e8 72 81 01 00       	call   c0024844 <__divdf3>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c6e2:	68 23 42 92 0c       	push   0xc924223
c000c6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6ef:	e8 ef 77 01 00       	call   c0023ee3 <__adddf3>
c000c6f4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c6f8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c6fc:	83 c4 20             	add    esp,0x20
c000c6ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c707:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c70f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c712:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c715:	7d 4e                	jge    c000c765 <sinc_quad_vari_process+0x28d>
c000c717:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c71a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c71d:	01 c8                	add    eax,ecx
c000c71f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c722:	99                   	cdq    
c000c723:	f7 f9                	idiv   ecx
c000c725:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c729:	7d 0c                	jge    c000c737 <sinc_quad_vari_process+0x25f>
c000c72b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c72e:	85 ff                	test   edi,edi
c000c730:	79 69                	jns    c000c79b <sinc_quad_vari_process+0x2c3>
c000c732:	e9 e4 00 00 00       	jmp    c000c81b <sinc_quad_vari_process+0x343>
c000c737:	50                   	push   eax
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	56                   	push   esi
c000c73d:	53                   	push   ebx
c000c73e:	e8 61 f0 ff ff       	call   c000b7a4 <prepare_data>
c000c743:	83 c4 10             	add    esp,0x10
c000c746:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c749:	85 c0                	test   eax,eax
c000c74b:	0f 85 5d 03 00 00    	jne    c000caae <sinc_quad_vari_process+0x5d6>
c000c751:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c754:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c757:	01 c8                	add    eax,ecx
c000c759:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c75c:	99                   	cdq    
c000c75d:	f7 f9                	idiv   ecx
c000c75f:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c763:	7c c6                	jl     c000c72b <sinc_quad_vari_process+0x253>
c000c765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c76c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c76f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c776:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c77a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c77d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c780:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c783:	99                   	cdq    
c000c784:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c787:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c78a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c78d:	99                   	cdq    
c000c78e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c791:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c794:	31 c0                	xor    eax,eax
c000c796:	e9 13 03 00 00       	jmp    c000caae <sinc_quad_vari_process+0x5d6>
c000c79b:	83 ec 0c             	sub    esp,0xc
c000c79e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7a1:	e8 1d 84 01 00       	call   c0024bc3 <__floatsidf>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b1:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7b5:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c1:	e8 1d 77 01 00       	call   c0023ee3 <__adddf3>
c000c7c6:	83 c4 10             	add    esp,0x10
c000c7c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e1:	e8 fd 76 01 00       	call   c0023ee3 <__adddf3>
c000c7e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c7e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	e8 cd 83 01 00       	call   c0024bc3 <__floatsidf>
c000c7f6:	83 c4 10             	add    esp,0x10
c000c7f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c801:	52                   	push   edx
c000c802:	50                   	push   eax
c000c803:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c807:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c80b:	e8 1d 86 01 00       	call   c0024e2d <__gedf2>
c000c810:	83 c4 10             	add    esp,0x10
c000c813:	85 c0                	test   eax,eax
c000c815:	0f 89 4a ff ff ff    	jns    c000c765 <sinc_quad_vari_process+0x28d>
c000c81b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c81f:	0f 8e ef 00 00 00    	jle    c000c914 <sinc_quad_vari_process+0x43c>
c000c825:	83 ec 10             	sub    esp,0x10
c000c828:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c82b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c82e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c831:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c834:	e8 fb 7c 01 00       	call   c0024534 <__subdf3>
c000c839:	83 c4 18             	add    esp,0x18
c000c83c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c840:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c844:	52                   	push   edx
c000c845:	50                   	push   eax
c000c846:	e8 75 87 01 00       	call   c0024fc0 <fabs>
c000c84b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c84f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c853:	83 c4 10             	add    esp,0x10
c000c856:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c85b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c860:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c864:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c868:	e8 a4 85 01 00       	call   c0024e11 <__gtdf2>
c000c86d:	83 c4 10             	add    esp,0x10
c000c870:	85 c0                	test   eax,eax
c000c872:	0f 8e 9c 00 00 00    	jle    c000c914 <sinc_quad_vari_process+0x43c>
c000c878:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c87b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c87e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c882:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c886:	52                   	push   edx
c000c887:	50                   	push   eax
c000c888:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c88b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c88e:	e8 a1 7c 01 00       	call   c0024534 <__subdf3>
c000c893:	59                   	pop    ecx
c000c894:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c898:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c89c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c89f:	e8 1f 83 01 00       	call   c0024bc3 <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8af:	52                   	push   edx
c000c8b0:	50                   	push   eax
c000c8b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b9:	e8 a2 7c 01 00       	call   c0024560 <__muldf3>
c000c8be:	5f                   	pop    edi
c000c8bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8c3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8c7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8ca:	e8 f4 82 01 00       	call   c0024bc3 <__floatsidf>
c000c8cf:	83 c4 10             	add    esp,0x10
c000c8d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8da:	52                   	push   edx
c000c8db:	50                   	push   eax
c000c8dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e4:	e8 5b 7f 01 00       	call   c0024844 <__divdf3>
c000c8e9:	83 c4 10             	add    esp,0x10
c000c8ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c900:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c904:	e8 da 75 01 00       	call   c0023ee3 <__adddf3>
c000c909:	83 c4 10             	add    esp,0x10
c000c90c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c910:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c914:	83 ec 0c             	sub    esp,0xc
c000c917:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c91a:	e8 a4 82 01 00       	call   c0024bc3 <__floatsidf>
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c926:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c92a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c92e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c936:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c93a:	e8 f0 84 01 00       	call   c0024e2f <__ltdf2>
c000c93f:	83 c4 10             	add    esp,0x10
c000c942:	85 c0                	test   eax,eax
c000c944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c948:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c94c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c950:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c954:	78 10                	js     c000c966 <sinc_quad_vari_process+0x48e>
c000c956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c95e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c962:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c972:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c976:	e8 e5 7b 01 00       	call   c0024560 <__muldf3>
c000c97b:	59                   	pop    ecx
c000c97c:	5f                   	pop    edi
c000c97d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c981:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 55 ed ff ff       	call   c000b6e7 <double_to_fp>
c000c992:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c996:	89 c7                	mov    edi,eax
c000c998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c99c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a4:	e8 b7 7b 01 00       	call   c0024560 <__muldf3>
c000c9a9:	83 c4 18             	add    esp,0x18
c000c9ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9b0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9b4:	52                   	push   edx
c000c9b5:	50                   	push   eax
c000c9b6:	e8 2c ed ff ff       	call   c000b6e7 <double_to_fp>
c000c9bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9c2:	83 c4 0c             	add    esp,0xc
c000c9c5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9c8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9cb:	50                   	push   eax
c000c9cc:	50                   	push   eax
c000c9cd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9d0:	e8 ee 81 01 00       	call   c0024bc3 <__floatsidf>
c000c9d5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c9dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ed:	e8 52 7e 01 00       	call   c0024844 <__divdf3>
c000c9f2:	83 c4 18             	add    esp,0x18
c000c9f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9fd:	52                   	push   edx
c000c9fe:	89 fa                	mov    edx,edi
c000ca00:	50                   	push   eax
c000ca01:	89 d8                	mov    eax,ebx
c000ca03:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca07:	e8 62 d3 ff ff       	call   c0009d6e <calc_output_quad>
c000ca0c:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca20:	e8 1f 7e 01 00       	call   c0024844 <__divdf3>
c000ca25:	83 c4 10             	add    esp,0x10
c000ca28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca40:	e8 9e 74 01 00       	call   c0023ee3 <__adddf3>
c000ca45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca49:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca4d:	83 c4 18             	add    esp,0x18
c000ca50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca58:	e8 b1 ec ff ff       	call   c000b70e <fmod_one>
c000ca5d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca64:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7f:	e8 b0 7a 01 00       	call   c0024534 <__subdf3>
c000ca84:	83 c4 18             	add    esp,0x18
c000ca87:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca8f:	52                   	push   edx
c000ca90:	50                   	push   eax
c000ca91:	e8 4a 85 01 00       	call   c0024fe0 <lrint>
c000ca96:	0f af f8             	imul   edi,eax
c000ca99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca9d:	83 c4 10             	add    esp,0x10
c000caa0:	01 f8                	add    eax,edi
c000caa2:	99                   	cdq    
c000caa3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000caa6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000caa9:	e9 61 fc ff ff       	jmp    c000c70f <sinc_quad_vari_process+0x237>
c000caae:	83 c4 4c             	add    esp,0x4c
c000cab1:	5b                   	pop    ebx
c000cab2:	5e                   	pop    esi
c000cab3:	5f                   	pop    edi
c000cab4:	5d                   	pop    ebp
c000cab5:	c3                   	ret    

c000cab6 <sinc_stereo_vari_process>:
c000cab6:	55                   	push   ebp
c000cab7:	b8 05 00 00 00       	mov    eax,0x5
c000cabc:	57                   	push   edi
c000cabd:	56                   	push   esi
c000cabe:	53                   	push   ebx
c000cabf:	83 ec 4c             	sub    esp,0x4c
c000cac2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cac6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000caca:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cacd:	85 db                	test   ebx,ebx
c000cacf:	0f 84 b7 05 00 00    	je     c000d08c <sinc_stereo_vari_process+0x5d6>
c000cad5:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000cad8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cadb:	0f af d0             	imul   edx,eax
c000cade:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000cae1:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000cae5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000caec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000caef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000caf6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000caf9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cafc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb04:	57                   	push   edi
c000cb05:	57                   	push   edi
c000cb06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0e:	e8 7c cb ff ff       	call   c000968f <is_bad_src_ratio>
c000cb13:	83 c4 10             	add    esp,0x10
c000cb16:	89 c2                	mov    edx,eax
c000cb18:	b8 16 00 00 00       	mov    eax,0x16
c000cb1d:	85 d2                	test   edx,edx
c000cb1f:	0f 85 67 05 00 00    	jne    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cb25:	83 ec 0c             	sub    esp,0xc
c000cb28:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb2b:	e8 93 80 01 00       	call   c0024bc3 <__floatsidf>
c000cb30:	83 c4 10             	add    esp,0x10
c000cb33:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb3a:	68 00 00 00 40       	push   0x40000000
c000cb3f:	6a 00                	push   0x0
c000cb41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb49:	e8 95 73 01 00       	call   c0023ee3 <__adddf3>
c000cb4e:	59                   	pop    ecx
c000cb4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb53:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb57:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5a:	e8 64 80 01 00       	call   c0024bc3 <__floatsidf>
c000cb5f:	83 c4 10             	add    esp,0x10
c000cb62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb6a:	52                   	push   edx
c000cb6b:	50                   	push   eax
c000cb6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb74:	e8 cb 7c 01 00       	call   c0024844 <__divdf3>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb84:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb87:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb91:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb94:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cb97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb9f:	52                   	push   edx
c000cba0:	50                   	push   eax
c000cba1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cba5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cba9:	e8 81 82 01 00       	call   c0024e2f <__ltdf2>
c000cbae:	83 c4 10             	add    esp,0x10
c000cbb1:	85 c0                	test   eax,eax
c000cbb3:	79 1d                	jns    c000cbd2 <sinc_stereo_vari_process+0x11c>
c000cbb5:	68 00 00 f0 3f       	push   0x3ff00000
c000cbba:	6a 00                	push   0x0
c000cbbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc4:	e8 66 82 01 00       	call   c0024e2f <__ltdf2>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	85 c0                	test   eax,eax
c000cbce:	78 2c                	js     c000cbfc <sinc_stereo_vari_process+0x146>
c000cbd0:	eb 4a                	jmp    c000cc1c <sinc_stereo_vari_process+0x166>
c000cbd2:	68 00 00 f0 3f       	push   0x3ff00000
c000cbd7:	6a 00                	push   0x0
c000cbd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe1:	e8 49 82 01 00       	call   c0024e2f <__ltdf2>
c000cbe6:	83 c4 10             	add    esp,0x10
c000cbe9:	85 c0                	test   eax,eax
c000cbeb:	79 2f                	jns    c000cc1c <sinc_stereo_vari_process+0x166>
c000cbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbf8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbfc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc0c:	e8 33 7c 01 00       	call   c0024844 <__divdf3>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc1c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc1f:	50                   	push   eax
c000cc20:	50                   	push   eax
c000cc21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc29:	e8 b2 83 01 00       	call   c0024fe0 <lrint>
c000cc2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc31:	40                   	inc    eax
c000cc32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc36:	0f af c7             	imul   eax,edi
c000cc39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc44:	58                   	pop    eax
c000cc45:	5a                   	pop    edx
c000cc46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4e:	e8 bb ea ff ff       	call   c000b70e <fmod_one>
c000cc53:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc5a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc5e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc75:	e8 ba 78 01 00       	call   c0024534 <__subdf3>
c000cc7a:	83 c4 18             	add    esp,0x18
c000cc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc85:	52                   	push   edx
c000cc86:	50                   	push   eax
c000cc87:	e8 54 83 01 00       	call   c0024fe0 <lrint>
c000cc8c:	0f af f8             	imul   edi,eax
c000cc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc93:	01 f8                	add    eax,edi
c000cc95:	99                   	cdq    
c000cc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca4:	68 00 00 f0 3f       	push   0x3ff00000
c000cca9:	6a 00                	push   0x0
c000ccab:	e8 94 7b 01 00       	call   c0024844 <__divdf3>
c000ccb0:	83 c4 10             	add    esp,0x10
c000ccb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ccc0:	68 23 42 92 0c       	push   0xc924223
c000ccc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cccd:	e8 11 72 01 00       	call   c0023ee3 <__adddf3>
c000ccd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ccda:	83 c4 20             	add    esp,0x20
c000ccdd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cce5:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccf3:	7d 4e                	jge    c000cd43 <sinc_stereo_vari_process+0x28d>
c000ccf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccfb:	01 c8                	add    eax,ecx
c000ccfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd00:	99                   	cdq    
c000cd01:	f7 f9                	idiv   ecx
c000cd03:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd07:	7d 0c                	jge    c000cd15 <sinc_stereo_vari_process+0x25f>
c000cd09:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd0c:	85 ff                	test   edi,edi
c000cd0e:	79 69                	jns    c000cd79 <sinc_stereo_vari_process+0x2c3>
c000cd10:	e9 e4 00 00 00       	jmp    c000cdf9 <sinc_stereo_vari_process+0x343>
c000cd15:	50                   	push   eax
c000cd16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1a:	56                   	push   esi
c000cd1b:	53                   	push   ebx
c000cd1c:	e8 83 ea ff ff       	call   c000b7a4 <prepare_data>
c000cd21:	83 c4 10             	add    esp,0x10
c000cd24:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd27:	85 c0                	test   eax,eax
c000cd29:	0f 85 5d 03 00 00    	jne    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd35:	01 c8                	add    eax,ecx
c000cd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd3a:	99                   	cdq    
c000cd3b:	f7 f9                	idiv   ecx
c000cd3d:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd41:	7c c6                	jl     c000cd09 <sinc_stereo_vari_process+0x253>
c000cd43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd4a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd4d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd58:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd5b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd5e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd61:	99                   	cdq    
c000cd62:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd65:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd6b:	99                   	cdq    
c000cd6c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd6f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd72:	31 c0                	xor    eax,eax
c000cd74:	e9 13 03 00 00       	jmp    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cd79:	83 ec 0c             	sub    esp,0xc
c000cd7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd7f:	e8 3f 7e 01 00       	call   c0024bc3 <__floatsidf>
c000cd84:	83 c4 10             	add    esp,0x10
c000cd87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd8f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd93:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9f:	e8 3f 71 01 00       	call   c0023ee3 <__adddf3>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbf:	e8 1f 71 01 00       	call   c0023ee3 <__adddf3>
c000cdc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cdc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdcb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdcf:	e8 ef 7d 01 00       	call   c0024bc3 <__floatsidf>
c000cdd4:	83 c4 10             	add    esp,0x10
c000cdd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cddf:	52                   	push   edx
c000cde0:	50                   	push   eax
c000cde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde9:	e8 3f 80 01 00       	call   c0024e2d <__gedf2>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	85 c0                	test   eax,eax
c000cdf3:	0f 89 4a ff ff ff    	jns    c000cd43 <sinc_stereo_vari_process+0x28d>
c000cdf9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdfd:	0f 8e ef 00 00 00    	jle    c000cef2 <sinc_stereo_vari_process+0x43c>
c000ce03:	83 ec 10             	sub    esp,0x10
c000ce06:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce09:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce0c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce0f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce12:	e8 1d 77 01 00       	call   c0024534 <__subdf3>
c000ce17:	83 c4 18             	add    esp,0x18
c000ce1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce22:	52                   	push   edx
c000ce23:	50                   	push   eax
c000ce24:	e8 97 81 01 00       	call   c0024fc0 <fabs>
c000ce29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce39:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce46:	e8 c6 7f 01 00       	call   c0024e11 <__gtdf2>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	85 c0                	test   eax,eax
c000ce50:	0f 8e 9c 00 00 00    	jle    c000cef2 <sinc_stereo_vari_process+0x43c>
c000ce56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce59:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce64:	52                   	push   edx
c000ce65:	50                   	push   eax
c000ce66:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce69:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce6c:	e8 c3 76 01 00       	call   c0024534 <__subdf3>
c000ce71:	59                   	pop    ecx
c000ce72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce76:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce7d:	e8 41 7d 01 00       	call   c0024bc3 <__floatsidf>
c000ce82:	83 c4 10             	add    esp,0x10
c000ce85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce8d:	52                   	push   edx
c000ce8e:	50                   	push   eax
c000ce8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce97:	e8 c4 76 01 00       	call   c0024560 <__muldf3>
c000ce9c:	5f                   	pop    edi
c000ce9d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cea1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cea8:	e8 16 7d 01 00       	call   c0024bc3 <__floatsidf>
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb8:	52                   	push   edx
c000ceb9:	50                   	push   eax
c000ceba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cebe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec2:	e8 7d 79 01 00       	call   c0024844 <__divdf3>
c000cec7:	83 c4 10             	add    esp,0x10
c000ceca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cece:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ced2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ced6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ceda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee2:	e8 fc 6f 01 00       	call   c0023ee3 <__adddf3>
c000cee7:	83 c4 10             	add    esp,0x10
c000ceea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ceee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cef2:	83 ec 0c             	sub    esp,0xc
c000cef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cef8:	e8 c6 7c 01 00       	call   c0024bc3 <__floatsidf>
c000cefd:	83 c4 10             	add    esp,0x10
c000cf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf18:	e8 12 7f 01 00       	call   c0024e2f <__ltdf2>
c000cf1d:	83 c4 10             	add    esp,0x10
c000cf20:	85 c0                	test   eax,eax
c000cf22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf2a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf2e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf32:	78 10                	js     c000cf44 <sinc_stereo_vari_process+0x48e>
c000cf34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf38:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf54:	e8 07 76 01 00       	call   c0024560 <__muldf3>
c000cf59:	59                   	pop    ecx
c000cf5a:	5f                   	pop    edi
c000cf5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf6b:	e8 77 e7 ff ff       	call   c000b6e7 <double_to_fp>
c000cf70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf74:	89 c7                	mov    edi,eax
c000cf76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf82:	e8 d9 75 01 00       	call   c0024560 <__muldf3>
c000cf87:	83 c4 18             	add    esp,0x18
c000cf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf92:	52                   	push   edx
c000cf93:	50                   	push   eax
c000cf94:	e8 4e e7 ff ff       	call   c000b6e7 <double_to_fp>
c000cf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfa0:	83 c4 0c             	add    esp,0xc
c000cfa3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfa6:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfa9:	50                   	push   eax
c000cfaa:	50                   	push   eax
c000cfab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfae:	e8 10 7c 01 00       	call   c0024bc3 <__floatsidf>
c000cfb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfc3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfcb:	e8 74 78 01 00       	call   c0024844 <__divdf3>
c000cfd0:	83 c4 18             	add    esp,0x18
c000cfd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdb:	52                   	push   edx
c000cfdc:	89 fa                	mov    edx,edi
c000cfde:	50                   	push   eax
c000cfdf:	89 d8                	mov    eax,ebx
c000cfe1:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfe5:	e8 a6 c9 ff ff       	call   c0009990 <calc_output_stereo>
c000cfea:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000cfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cffe:	e8 41 78 01 00       	call   c0024844 <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d00a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d016:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d01a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d01e:	e8 c0 6e 01 00       	call   c0023ee3 <__adddf3>
c000d023:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d027:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d02b:	83 c4 18             	add    esp,0x18
c000d02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d032:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d036:	e8 d3 e6 ff ff       	call   c000b70e <fmod_one>
c000d03b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d03e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d042:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d046:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d049:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d04d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d055:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d059:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05d:	e8 d2 74 01 00       	call   c0024534 <__subdf3>
c000d062:	83 c4 18             	add    esp,0x18
c000d065:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d069:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d06d:	52                   	push   edx
c000d06e:	50                   	push   eax
c000d06f:	e8 6c 7f 01 00       	call   c0024fe0 <lrint>
c000d074:	0f af f8             	imul   edi,eax
c000d077:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d07b:	83 c4 10             	add    esp,0x10
c000d07e:	01 f8                	add    eax,edi
c000d080:	99                   	cdq    
c000d081:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d084:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d087:	e9 61 fc ff ff       	jmp    c000cced <sinc_stereo_vari_process+0x237>
c000d08c:	83 c4 4c             	add    esp,0x4c
c000d08f:	5b                   	pop    ebx
c000d090:	5e                   	pop    esi
c000d091:	5f                   	pop    edi
c000d092:	5d                   	pop    ebp
c000d093:	c3                   	ret    

c000d094 <sinc_mono_vari_process>:
c000d094:	55                   	push   ebp
c000d095:	b8 05 00 00 00       	mov    eax,0x5
c000d09a:	57                   	push   edi
c000d09b:	56                   	push   esi
c000d09c:	53                   	push   ebx
c000d09d:	83 ec 4c             	sub    esp,0x4c
c000d0a0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0a4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0a8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0ab:	85 db                	test   ebx,ebx
c000d0ad:	0f 84 e8 05 00 00    	je     c000d69b <sinc_mono_vari_process+0x607>
c000d0b3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0b6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0b9:	0f af d0             	imul   edx,eax
c000d0bc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0bf:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0c3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0cd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0d4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e2:	57                   	push   edi
c000d0e3:	57                   	push   edi
c000d0e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ec:	e8 9e c5 ff ff       	call   c000968f <is_bad_src_ratio>
c000d0f1:	83 c4 10             	add    esp,0x10
c000d0f4:	89 c2                	mov    edx,eax
c000d0f6:	b8 16 00 00 00       	mov    eax,0x16
c000d0fb:	85 d2                	test   edx,edx
c000d0fd:	0f 85 98 05 00 00    	jne    c000d69b <sinc_mono_vari_process+0x607>
c000d103:	83 ec 0c             	sub    esp,0xc
c000d106:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d109:	e8 b5 7a 01 00       	call   c0024bc3 <__floatsidf>
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	89 04 24             	mov    DWORD PTR [esp],eax
c000d114:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d118:	68 00 00 00 40       	push   0x40000000
c000d11d:	6a 00                	push   0x0
c000d11f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d123:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d127:	e8 b7 6d 01 00       	call   c0023ee3 <__adddf3>
c000d12c:	59                   	pop    ecx
c000d12d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d131:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d135:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d138:	e8 86 7a 01 00       	call   c0024bc3 <__floatsidf>
c000d13d:	83 c4 10             	add    esp,0x10
c000d140:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d144:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d148:	52                   	push   edx
c000d149:	50                   	push   eax
c000d14a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d14e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d152:	e8 ed 76 01 00       	call   c0024844 <__divdf3>
c000d157:	83 c4 10             	add    esp,0x10
c000d15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d15e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d162:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d165:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d168:	89 04 24             	mov    DWORD PTR [esp],eax
c000d16b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d16f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d172:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d179:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d17d:	52                   	push   edx
c000d17e:	50                   	push   eax
c000d17f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d183:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d187:	e8 a3 7c 01 00       	call   c0024e2f <__ltdf2>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	85 c0                	test   eax,eax
c000d191:	79 1d                	jns    c000d1b0 <sinc_mono_vari_process+0x11c>
c000d193:	68 00 00 f0 3f       	push   0x3ff00000
c000d198:	6a 00                	push   0x0
c000d19a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d19e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a2:	e8 88 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	85 c0                	test   eax,eax
c000d1ac:	78 2c                	js     c000d1da <sinc_mono_vari_process+0x146>
c000d1ae:	eb 4a                	jmp    c000d1fa <sinc_mono_vari_process+0x166>
c000d1b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d1b5:	6a 00                	push   0x0
c000d1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1bf:	e8 6b 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	85 c0                	test   eax,eax
c000d1c9:	79 2f                	jns    c000d1fa <sinc_mono_vari_process+0x166>
c000d1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1de:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ea:	e8 55 76 01 00       	call   c0024844 <__divdf3>
c000d1ef:	83 c4 10             	add    esp,0x10
c000d1f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1fd:	50                   	push   eax
c000d1fe:	50                   	push   eax
c000d1ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d203:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d207:	e8 d4 7d 01 00       	call   c0024fe0 <lrint>
c000d20c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d20f:	40                   	inc    eax
c000d210:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d214:	0f af c7             	imul   eax,edi
c000d217:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d222:	58                   	pop    eax
c000d223:	5a                   	pop    edx
c000d224:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d228:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22c:	e8 dd e4 ff ff       	call   c000b70e <fmod_one>
c000d231:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d23c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d23f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d243:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d24b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d253:	e8 dc 72 01 00       	call   c0024534 <__subdf3>
c000d258:	83 c4 18             	add    esp,0x18
c000d25b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d25f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d263:	52                   	push   edx
c000d264:	50                   	push   eax
c000d265:	e8 76 7d 01 00       	call   c0024fe0 <lrint>
c000d26a:	0f af f8             	imul   edi,eax
c000d26d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d271:	01 f8                	add    eax,edi
c000d273:	99                   	cdq    
c000d274:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d277:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d282:	68 00 00 f0 3f       	push   0x3ff00000
c000d287:	6a 00                	push   0x0
c000d289:	e8 b6 75 01 00       	call   c0024844 <__divdf3>
c000d28e:	83 c4 10             	add    esp,0x10
c000d291:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d295:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d299:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d29e:	68 23 42 92 0c       	push   0xc924223
c000d2a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2ab:	e8 33 6c 01 00       	call   c0023ee3 <__adddf3>
c000d2b0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2b4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2b8:	83 c4 20             	add    esp,0x20
c000d2bb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2c3:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2ce:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2d1:	7d 4e                	jge    c000d321 <sinc_mono_vari_process+0x28d>
c000d2d3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2d6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2d9:	01 c8                	add    eax,ecx
c000d2db:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2de:	99                   	cdq    
c000d2df:	f7 f9                	idiv   ecx
c000d2e1:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d2e5:	7d 0c                	jge    c000d2f3 <sinc_mono_vari_process+0x25f>
c000d2e7:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d2ea:	85 ff                	test   edi,edi
c000d2ec:	79 69                	jns    c000d357 <sinc_mono_vari_process+0x2c3>
c000d2ee:	e9 e4 00 00 00       	jmp    c000d3d7 <sinc_mono_vari_process+0x343>
c000d2f3:	57                   	push   edi
c000d2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2f8:	56                   	push   esi
c000d2f9:	53                   	push   ebx
c000d2fa:	e8 a5 e4 ff ff       	call   c000b7a4 <prepare_data>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d305:	85 c0                	test   eax,eax
c000d307:	0f 85 8e 03 00 00    	jne    c000d69b <sinc_mono_vari_process+0x607>
c000d30d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d310:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d313:	01 c8                	add    eax,ecx
c000d315:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d318:	99                   	cdq    
c000d319:	f7 f9                	idiv   ecx
c000d31b:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d31f:	7c c6                	jl     c000d2e7 <sinc_mono_vari_process+0x253>
c000d321:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d328:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d32b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d32e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d332:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d336:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d339:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d33c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d33f:	99                   	cdq    
c000d340:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d343:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d346:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d349:	99                   	cdq    
c000d34a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d34d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d350:	31 c0                	xor    eax,eax
c000d352:	e9 44 03 00 00       	jmp    c000d69b <sinc_mono_vari_process+0x607>
c000d357:	83 ec 0c             	sub    esp,0xc
c000d35a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d35d:	e8 61 78 01 00       	call   c0024bc3 <__floatsidf>
c000d362:	83 c4 10             	add    esp,0x10
c000d365:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d369:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d36d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d371:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d375:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d379:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37d:	e8 61 6b 01 00       	call   c0023ee3 <__adddf3>
c000d382:	83 c4 10             	add    esp,0x10
c000d385:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d38d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d391:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d395:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d399:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39d:	e8 41 6b 01 00       	call   c0023ee3 <__adddf3>
c000d3a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3ad:	e8 11 78 01 00       	call   c0024bc3 <__floatsidf>
c000d3b2:	83 c4 10             	add    esp,0x10
c000d3b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3bd:	52                   	push   edx
c000d3be:	50                   	push   eax
c000d3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c7:	e8 45 7a 01 00       	call   c0024e11 <__gtdf2>
c000d3cc:	83 c4 10             	add    esp,0x10
c000d3cf:	85 c0                	test   eax,eax
c000d3d1:	0f 8f 4a ff ff ff    	jg     c000d321 <sinc_mono_vari_process+0x28d>
c000d3d7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d3db:	0f 8e ef 00 00 00    	jle    c000d4d0 <sinc_mono_vari_process+0x43c>
c000d3e1:	83 ec 10             	sub    esp,0x10
c000d3e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d3e7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d3ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3ed:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3f0:	e8 3f 71 01 00       	call   c0024534 <__subdf3>
c000d3f5:	83 c4 18             	add    esp,0x18
c000d3f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3fc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d400:	52                   	push   edx
c000d401:	50                   	push   eax
c000d402:	e8 b9 7b 01 00       	call   c0024fc0 <fabs>
c000d407:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d417:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d41c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d420:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d424:	e8 e8 79 01 00       	call   c0024e11 <__gtdf2>
c000d429:	83 c4 10             	add    esp,0x10
c000d42c:	85 c0                	test   eax,eax
c000d42e:	0f 8e 9c 00 00 00    	jle    c000d4d0 <sinc_mono_vari_process+0x43c>
c000d434:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d437:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d43a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d43e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d442:	52                   	push   edx
c000d443:	50                   	push   eax
c000d444:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d447:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d44a:	e8 e5 70 01 00       	call   c0024534 <__subdf3>
c000d44f:	5f                   	pop    edi
c000d450:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d454:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d458:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d45b:	e8 63 77 01 00       	call   c0024bc3 <__floatsidf>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46b:	52                   	push   edx
c000d46c:	50                   	push   eax
c000d46d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d475:	e8 e6 70 01 00       	call   c0024560 <__muldf3>
c000d47a:	59                   	pop    ecx
c000d47b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d47f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d483:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d486:	e8 38 77 01 00       	call   c0024bc3 <__floatsidf>
c000d48b:	83 c4 10             	add    esp,0x10
c000d48e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d492:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d496:	52                   	push   edx
c000d497:	50                   	push   eax
c000d498:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a0:	e8 9f 73 01 00       	call   c0024844 <__divdf3>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c0:	e8 1e 6a 01 00       	call   c0023ee3 <__adddf3>
c000d4c5:	83 c4 10             	add    esp,0x10
c000d4c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4d0:	83 ec 0c             	sub    esp,0xc
c000d4d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4d6:	e8 e8 76 01 00       	call   c0024bc3 <__floatsidf>
c000d4db:	83 c4 10             	add    esp,0x10
c000d4de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4f6:	e8 34 79 01 00       	call   c0024e2f <__ltdf2>
c000d4fb:	83 c4 10             	add    esp,0x10
c000d4fe:	85 c0                	test   eax,eax
c000d500:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d508:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d50c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d510:	78 10                	js     c000d522 <sinc_mono_vari_process+0x48e>
c000d512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d516:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d51a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d51e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d52a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d52e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d532:	e8 29 70 01 00       	call   c0024560 <__muldf3>
c000d537:	59                   	pop    ecx
c000d538:	5f                   	pop    edi
c000d539:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d53d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d541:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d545:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d549:	e8 99 e1 ff ff       	call   c000b6e7 <double_to_fp>
c000d54e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d552:	89 c7                	mov    edi,eax
c000d554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d560:	e8 fb 6f 01 00       	call   c0024560 <__muldf3>
c000d565:	83 c4 18             	add    esp,0x18
c000d568:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d56c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d570:	52                   	push   edx
c000d571:	50                   	push   eax
c000d572:	e8 70 e1 ff ff       	call   c000b6e7 <double_to_fp>
c000d577:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d581:	e8 3d 76 01 00       	call   c0024bc3 <__floatsidf>
c000d586:	83 c4 10             	add    esp,0x10
c000d589:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d58d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d591:	52                   	push   edx
c000d592:	50                   	push   eax
c000d593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d597:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d59b:	e8 a4 72 01 00       	call   c0024844 <__divdf3>
c000d5a0:	83 c4 10             	add    esp,0x10
c000d5a3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5a7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ab:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5af:	89 d8                	mov    eax,ebx
c000d5b1:	89 fa                	mov    edx,edi
c000d5b3:	e8 7c c1 ff ff       	call   c0009734 <calc_output_single>
c000d5b8:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5bb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5c6:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5ca:	52                   	push   edx
c000d5cb:	50                   	push   eax
c000d5cc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5d0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5d4:	e8 87 6f 01 00       	call   c0024560 <__muldf3>
c000d5d9:	59                   	pop    ecx
c000d5da:	59                   	pop    ecx
c000d5db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5eb:	e8 43 78 01 00       	call   c0024e33 <__truncdfsf2>
c000d5f0:	83 c4 10             	add    esp,0x10
c000d5f3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5f7:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d5fa:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d609:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d60d:	e8 32 72 01 00       	call   c0024844 <__divdf3>
c000d612:	83 c4 10             	add    esp,0x10
c000d615:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d619:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d625:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d629:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d62d:	e8 b1 68 01 00       	call   c0023ee3 <__adddf3>
c000d632:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d636:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d63a:	83 c4 18             	add    esp,0x18
c000d63d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d641:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d645:	e8 c4 e0 ff ff       	call   c000b70e <fmod_one>
c000d64a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d64d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d651:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d655:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d658:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d660:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d664:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d668:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d66c:	e8 c3 6e 01 00       	call   c0024534 <__subdf3>
c000d671:	83 c4 18             	add    esp,0x18
c000d674:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d678:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d67c:	52                   	push   edx
c000d67d:	50                   	push   eax
c000d67e:	e8 5d 79 01 00       	call   c0024fe0 <lrint>
c000d683:	0f af f8             	imul   edi,eax
c000d686:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d68a:	83 c4 10             	add    esp,0x10
c000d68d:	01 f8                	add    eax,edi
c000d68f:	99                   	cdq    
c000d690:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d693:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d696:	e9 30 fc ff ff       	jmp    c000d2cb <sinc_mono_vari_process+0x237>
c000d69b:	83 c4 4c             	add    esp,0x4c
c000d69e:	5b                   	pop    ebx
c000d69f:	5e                   	pop    esi
c000d6a0:	5f                   	pop    edi
c000d6a1:	5d                   	pop    ebp
c000d6a2:	c3                   	ret    

c000d6a3 <sinc_get_name>:
c000d6a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6a7:	31 c0                	xor    eax,eax
c000d6a9:	83 fa 02             	cmp    edx,0x2
c000d6ac:	77 07                	ja     c000d6b5 <sinc_get_name+0x12>
c000d6ae:	8b 04 95 c4 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd983c]
c000d6b5:	c3                   	ret    

c000d6b6 <sinc_get_description>:
c000d6b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6ba:	31 c0                	xor    eax,eax
c000d6bc:	83 fa 02             	cmp    edx,0x2
c000d6bf:	77 07                	ja     c000d6c8 <sinc_get_description+0x12>
c000d6c1:	8b 04 95 b8 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9848]
c000d6c8:	c3                   	ret    

c000d6c9 <sinc_set_converter>:
c000d6c9:	53                   	push   ebx
c000d6ca:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6d0:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d6da:	85 c0                	test   eax,eax
c000d6dc:	74 13                	je     c000d6f1 <sinc_set_converter+0x28>
c000d6de:	83 ec 0c             	sub    esp,0xc
c000d6e1:	50                   	push   eax
c000d6e2:	e8 67 1a 00 00       	call   c000f14e <free>
c000d6e7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6ee:	83 c4 10             	add    esp,0x10
c000d6f1:	50                   	push   eax
c000d6f2:	68 44 08 00 00       	push   0x844
c000d6f7:	6a 00                	push   0x0
c000d6f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d6fd:	50                   	push   eax
c000d6fe:	e8 c2 2f ff ff       	call   c00006c5 <memset>
c000d703:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d706:	83 c4 10             	add    esp,0x10
c000d709:	b8 0b 00 00 00       	mov    eax,0xb
c000d70e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d714:	7f 6e                	jg     c000d784 <sinc_set_converter+0xbb>
c000d716:	83 fa 01             	cmp    edx,0x1
c000d719:	75 10                	jne    c000d72b <sinc_set_converter+0x62>
c000d71b:	c7 43 24 94 d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d094
c000d722:	c7 43 20 94 d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d094
c000d729:	eb 4d                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d72b:	83 fa 02             	cmp    edx,0x2
c000d72e:	75 10                	jne    c000d740 <sinc_set_converter+0x77>
c000d730:	c7 43 24 b6 ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cab6
c000d737:	c7 43 20 b6 ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cab6
c000d73e:	eb 38                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d740:	83 fa 04             	cmp    edx,0x4
c000d743:	75 10                	jne    c000d755 <sinc_set_converter+0x8c>
c000d745:	c7 43 24 d8 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4d8
c000d74c:	c7 43 20 d8 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4d8
c000d753:	eb 23                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d755:	83 fa 06             	cmp    edx,0x6
c000d758:	75 10                	jne    c000d76a <sinc_set_converter+0xa1>
c000d75a:	c7 43 24 fa be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000befa
c000d761:	c7 43 20 fa be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000befa
c000d768:	eb 0e                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d76a:	c7 43 24 1e b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b91e
c000d771:	c7 43 20 1e b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b91e
c000d778:	c7 43 28 3b ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab3b
c000d77f:	b8 0a 00 00 00       	mov    eax,0xa
c000d784:	81 c4 58 08 00 00    	add    esp,0x858
c000d78a:	5b                   	pop    ebx
c000d78b:	c3                   	ret    

c000d78c <is_bad_src_ratio>:
c000d78c:	83 ec 1c             	sub    esp,0x1c
c000d78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d797:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d79b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d79f:	b8 00 00 00 00       	mov    eax,0x0
c000d7a4:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7a9:	52                   	push   edx
c000d7aa:	50                   	push   eax
c000d7ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b3:	e8 77 76 01 00       	call   c0024e2f <__ltdf2>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	85 c0                	test   eax,eax
c000d7bd:	78 20                	js     c000d7df <is_bad_src_ratio+0x53>
c000d7bf:	b8 00 00 00 00       	mov    eax,0x0
c000d7c4:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7c9:	52                   	push   edx
c000d7ca:	50                   	push   eax
c000d7cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d3:	e8 39 76 01 00       	call   c0024e11 <__gtdf2>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	85 c0                	test   eax,eax
c000d7dd:	7e 07                	jle    c000d7e6 <is_bad_src_ratio+0x5a>
c000d7df:	b8 01 00 00 00       	mov    eax,0x1
c000d7e4:	eb 05                	jmp    c000d7eb <is_bad_src_ratio+0x5f>
c000d7e6:	b8 00 00 00 00       	mov    eax,0x0
c000d7eb:	83 c4 1c             	add    esp,0x1c
c000d7ee:	c3                   	ret    

c000d7ef <fmod_one>:
c000d7ef:	83 ec 2c             	sub    esp,0x2c
c000d7f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d802:	83 ec 08             	sub    esp,0x8
c000d805:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d809:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d80d:	e8 ce 77 01 00       	call   c0024fe0 <lrint>
c000d812:	83 c4 10             	add    esp,0x10
c000d815:	83 ec 0c             	sub    esp,0xc
c000d818:	50                   	push   eax
c000d819:	e8 a5 73 01 00       	call   c0024bc3 <__floatsidf>
c000d81e:	83 c4 10             	add    esp,0x10
c000d821:	52                   	push   edx
c000d822:	50                   	push   eax
c000d823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82b:	e8 04 6d 01 00       	call   c0024534 <__subdf3>
c000d830:	83 c4 10             	add    esp,0x10
c000d833:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d837:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d83b:	b8 00 00 00 00       	mov    eax,0x0
c000d840:	ba 00 00 00 00       	mov    edx,0x0
c000d845:	52                   	push   edx
c000d846:	50                   	push   eax
c000d847:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d84b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d84f:	e8 db 75 01 00       	call   c0024e2f <__ltdf2>
c000d854:	83 c4 10             	add    esp,0x10
c000d857:	85 c0                	test   eax,eax
c000d859:	79 1e                	jns    c000d879 <fmod_one+0x8a>
c000d85b:	b8 00 00 00 00       	mov    eax,0x0
c000d860:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d865:	52                   	push   edx
c000d866:	50                   	push   eax
c000d867:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d86b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d86f:	e8 6f 66 01 00       	call   c0023ee3 <__adddf3>
c000d874:	83 c4 10             	add    esp,0x10
c000d877:	eb 08                	jmp    c000d881 <fmod_one+0x92>
c000d879:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d87d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d881:	83 c4 2c             	add    esp,0x2c
c000d884:	c3                   	ret    

c000d885 <zoh_vari_process>:
c000d885:	55                   	push   ebp
c000d886:	57                   	push   edi
c000d887:	56                   	push   esi
c000d888:	53                   	push   ebx
c000d889:	83 ec 3c             	sub    esp,0x3c
c000d88c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d890:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d894:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d89c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8a0:	0f 8e a9 05 00 00    	jle    c000de4f <zoh_vari_process+0x5ca>
c000d8a6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8a9:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8b1:	85 db                	test   ebx,ebx
c000d8b3:	0f 84 96 05 00 00    	je     c000de4f <zoh_vari_process+0x5ca>
c000d8b9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8bc:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8c0:	74 19                	je     c000d8db <zoh_vari_process+0x56>
c000d8c2:	31 d2                	xor    edx,edx
c000d8c4:	39 c2                	cmp    edx,eax
c000d8c6:	7d 0c                	jge    c000d8d4 <zoh_vari_process+0x4f>
c000d8c8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8ca:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8cd:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8d1:	42                   	inc    edx
c000d8d2:	eb f0                	jmp    c000d8c4 <zoh_vari_process+0x3f>
c000d8d4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d8db:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d8de:	0f af d0             	imul   edx,eax
c000d8e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d8e4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d8e8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d8ef:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d8f2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d8f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d907:	57                   	push   edi
c000d908:	57                   	push   edi
c000d909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d911:	e8 76 fe ff ff       	call   c000d78c <is_bad_src_ratio>
c000d916:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91a:	83 c4 10             	add    esp,0x10
c000d91d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d922:	0f 85 1f 05 00 00    	jne    c000de47 <zoh_vari_process+0x5c2>
c000d928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d92b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d92e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d932:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d936:	68 00 00 f0 3f       	push   0x3ff00000
c000d93b:	6a 00                	push   0x0
c000d93d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d945:	e8 e5 74 01 00       	call   c0024e2f <__ltdf2>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	85 c0                	test   eax,eax
c000d94f:	0f 89 dc 01 00 00    	jns    c000db31 <zoh_vari_process+0x2ac>
c000d955:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d958:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d95b:	0f 8d d0 01 00 00    	jge    c000db31 <zoh_vari_process+0x2ac>
c000d961:	83 ec 0c             	sub    esp,0xc
c000d964:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d967:	e8 57 72 01 00       	call   c0024bc3 <__floatsidf>
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d972:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d982:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d986:	e8 d5 6b 01 00       	call   c0024560 <__muldf3>
c000d98b:	59                   	pop    ecx
c000d98c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d990:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d994:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d997:	e8 27 72 01 00       	call   c0024bc3 <__floatsidf>
c000d99c:	83 c4 10             	add    esp,0x10
c000d99f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9a7:	52                   	push   edx
c000d9a8:	50                   	push   eax
c000d9a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9b1:	e8 2d 65 01 00       	call   c0023ee3 <__adddf3>
c000d9b6:	59                   	pop    ecx
c000d9b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9bf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9c2:	e8 fc 71 01 00       	call   c0024bc3 <__floatsidf>
c000d9c7:	83 c4 10             	add    esp,0x10
c000d9ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9dc:	e8 4c 74 01 00       	call   c0024e2d <__gedf2>
c000d9e1:	83 c4 10             	add    esp,0x10
c000d9e4:	85 c0                	test   eax,eax
c000d9e6:	0f 89 45 01 00 00    	jns    c000db31 <zoh_vari_process+0x2ac>
c000d9ec:	85 ff                	test   edi,edi
c000d9ee:	0f 8e ee 00 00 00    	jle    c000dae2 <zoh_vari_process+0x25d>
c000d9f4:	83 ec 10             	sub    esp,0x10
c000d9f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9fa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da00:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da03:	e8 2c 6b 01 00       	call   c0024534 <__subdf3>
c000da08:	83 c4 18             	add    esp,0x18
c000da0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da13:	52                   	push   edx
c000da14:	50                   	push   eax
c000da15:	e8 a6 75 01 00       	call   c0024fc0 <fabs>
c000da1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da22:	83 c4 10             	add    esp,0x10
c000da25:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da2a:	68 23 42 92 0c       	push   0xc924223
c000da2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da37:	e8 d5 73 01 00       	call   c0024e11 <__gtdf2>
c000da3c:	83 c4 10             	add    esp,0x10
c000da3f:	85 c0                	test   eax,eax
c000da41:	0f 8e 9b 00 00 00    	jle    c000dae2 <zoh_vari_process+0x25d>
c000da47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da4a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000da50:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da54:	52                   	push   edx
c000da55:	50                   	push   eax
c000da56:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da59:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da5c:	e8 d3 6a 01 00       	call   c0024534 <__subdf3>
c000da61:	59                   	pop    ecx
c000da62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da6a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da6d:	e8 51 71 01 00       	call   c0024bc3 <__floatsidf>
c000da72:	83 c4 10             	add    esp,0x10
c000da75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da7d:	52                   	push   edx
c000da7e:	50                   	push   eax
c000da7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da87:	e8 d4 6a 01 00       	call   c0024560 <__muldf3>
c000da8c:	5f                   	pop    edi
c000da8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da91:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000da98:	e8 26 71 01 00       	call   c0024bc3 <__floatsidf>
c000da9d:	83 c4 10             	add    esp,0x10
c000daa0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000daa4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000daa8:	52                   	push   edx
c000daa9:	50                   	push   eax
c000daaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dab2:	e8 8d 6d 01 00       	call   c0024844 <__divdf3>
c000dab7:	83 c4 10             	add    esp,0x10
c000daba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dabe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dac2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dac6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dace:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad2:	e8 0c 64 01 00       	call   c0023ee3 <__adddf3>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dade:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae2:	31 c0                	xor    eax,eax
c000dae4:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dae7:	7e 13                	jle    c000dafc <zoh_vari_process+0x277>
c000dae9:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000daed:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000daf0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000daf3:	40                   	inc    eax
c000daf4:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000daf7:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dafa:	eb e8                	jmp    c000dae4 <zoh_vari_process+0x25f>
c000dafc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db04:	68 00 00 f0 3f       	push   0x3ff00000
c000db09:	6a 00                	push   0x0
c000db0b:	e8 34 6d 01 00       	call   c0024844 <__divdf3>
c000db10:	83 c4 10             	add    esp,0x10
c000db13:	89 04 24             	mov    DWORD PTR [esp],eax
c000db16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db1a:	52                   	push   edx
c000db1b:	50                   	push   eax
c000db1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db24:	e8 ba 63 01 00       	call   c0023ee3 <__adddf3>
c000db29:	83 c4 10             	add    esp,0x10
c000db2c:	e9 fd fd ff ff       	jmp    c000d92e <zoh_vari_process+0xa9>
c000db31:	57                   	push   edi
c000db32:	57                   	push   edi
c000db33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3b:	e8 af fc ff ff       	call   c000d7ef <fmod_one>
c000db40:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db47:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db5b:	e8 d4 69 01 00       	call   c0024534 <__subdf3>
c000db60:	83 c4 18             	add    esp,0x18
c000db63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db67:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db6b:	52                   	push   edx
c000db6c:	50                   	push   eax
c000db6d:	e8 6e 74 01 00       	call   c0024fe0 <lrint>
c000db72:	83 c4 10             	add    esp,0x10
c000db75:	0f af f8             	imul   edi,eax
c000db78:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db7b:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db7e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000db82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db85:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000db88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db8c:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000db8f:	0f 8d 1d 02 00 00    	jge    c000ddb2 <zoh_vari_process+0x52d>
c000db95:	83 ec 0c             	sub    esp,0xc
c000db98:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000db9b:	e8 23 70 01 00       	call   c0024bc3 <__floatsidf>
c000dba0:	83 c4 10             	add    esp,0x10
c000dba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dba7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbaf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbbb:	e8 a0 69 01 00       	call   c0024560 <__muldf3>
c000dbc0:	59                   	pop    ecx
c000dbc1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbc5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcd:	e8 f1 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dbd2:	83 c4 10             	add    esp,0x10
c000dbd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbd9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbdd:	52                   	push   edx
c000dbde:	50                   	push   eax
c000dbdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbe3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbe7:	e8 f7 62 01 00       	call   c0023ee3 <__adddf3>
c000dbec:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbf3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbf7:	e8 c7 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc07:	52                   	push   edx
c000dc08:	50                   	push   eax
c000dc09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc11:	e8 1b 72 01 00       	call   c0024e31 <__ledf2>
c000dc16:	83 c4 10             	add    esp,0x10
c000dc19:	85 c0                	test   eax,eax
c000dc1b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc1f:	0f 8f 8d 01 00 00    	jg     c000ddb2 <zoh_vari_process+0x52d>
c000dc25:	85 c9                	test   ecx,ecx
c000dc27:	0f 8e ef 00 00 00    	jle    c000dd1c <zoh_vari_process+0x497>
c000dc2d:	83 ec 10             	sub    esp,0x10
c000dc30:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc33:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc36:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc39:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc3c:	e8 f3 68 01 00       	call   c0024534 <__subdf3>
c000dc41:	83 c4 18             	add    esp,0x18
c000dc44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc4c:	52                   	push   edx
c000dc4d:	50                   	push   eax
c000dc4e:	e8 6d 73 01 00       	call   c0024fc0 <fabs>
c000dc53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc5b:	83 c4 10             	add    esp,0x10
c000dc5e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc63:	68 23 42 92 0c       	push   0xc924223
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc70:	e8 9c 71 01 00       	call   c0024e11 <__gtdf2>
c000dc75:	83 c4 10             	add    esp,0x10
c000dc78:	85 c0                	test   eax,eax
c000dc7a:	0f 8e 9c 00 00 00    	jle    c000dd1c <zoh_vari_process+0x497>
c000dc80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc83:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc8e:	52                   	push   edx
c000dc8f:	50                   	push   eax
c000dc90:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc93:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc96:	e8 99 68 01 00       	call   c0024534 <__subdf3>
c000dc9b:	5f                   	pop    edi
c000dc9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dca0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dca4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dca7:	e8 17 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dcac:	83 c4 10             	add    esp,0x10
c000dcaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcb7:	52                   	push   edx
c000dcb8:	50                   	push   eax
c000dcb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc1:	e8 9a 68 01 00       	call   c0024560 <__muldf3>
c000dcc6:	59                   	pop    ecx
c000dcc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dccb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dccf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcd2:	e8 ec 6e 01 00       	call   c0024bc3 <__floatsidf>
c000dcd7:	83 c4 10             	add    esp,0x10
c000dcda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcde:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dce2:	52                   	push   edx
c000dce3:	50                   	push   eax
c000dce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcec:	e8 53 6b 01 00       	call   c0024844 <__divdf3>
c000dcf1:	83 c4 10             	add    esp,0x10
c000dcf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcfc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0c:	e8 d2 61 01 00       	call   c0023ee3 <__adddf3>
c000dd11:	83 c4 10             	add    esp,0x10
c000dd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd1c:	31 c0                	xor    eax,eax
c000dd1e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd21:	39 c2                	cmp    edx,eax
c000dd23:	7e 1d                	jle    c000dd42 <zoh_vari_process+0x4bd>
c000dd25:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd28:	29 d1                	sub    ecx,edx
c000dd2a:	89 ca                	mov    edx,ecx
c000dd2c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd2e:	01 c2                	add    edx,eax
c000dd30:	40                   	inc    eax
c000dd31:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd34:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd37:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd3a:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd3d:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd40:	eb dc                	jmp    c000dd1e <zoh_vari_process+0x499>
c000dd42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd46:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd4a:	68 00 00 f0 3f       	push   0x3ff00000
c000dd4f:	6a 00                	push   0x0
c000dd51:	e8 ee 6a 01 00       	call   c0024844 <__divdf3>
c000dd56:	83 c4 10             	add    esp,0x10
c000dd59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd5d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd61:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd65:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd71:	e8 6d 61 01 00       	call   c0023ee3 <__adddf3>
c000dd76:	5f                   	pop    edi
c000dd77:	59                   	pop    ecx
c000dd78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd88:	e8 62 fa ff ff       	call   c000d7ef <fmod_one>
c000dd8d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dd90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda8:	e8 87 67 01 00       	call   c0024534 <__subdf3>
c000ddad:	e9 ae fd ff ff       	jmp    c000db60 <zoh_vari_process+0x2db>
c000ddb2:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000ddb6:	7d 3a                	jge    c000ddf2 <zoh_vari_process+0x56d>
c000ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddbc:	83 ec 0c             	sub    esp,0xc
c000ddbf:	29 f8                	sub    eax,edi
c000ddc1:	99                   	cdq    
c000ddc2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddc5:	50                   	push   eax
c000ddc6:	e8 f8 6d 01 00       	call   c0024bc3 <__floatsidf>
c000ddcb:	83 c4 10             	add    esp,0x10
c000ddce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddd6:	52                   	push   edx
c000ddd7:	50                   	push   eax
c000ddd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dde0:	e8 fe 60 01 00       	call   c0023ee3 <__adddf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000ddeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ddf5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ddf9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000ddfc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ddff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de02:	85 c0                	test   eax,eax
c000de04:	7f 24                	jg     c000de2a <zoh_vari_process+0x5a5>
c000de06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de11:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de17:	99                   	cdq    
c000de18:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de1b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de1e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de21:	99                   	cdq    
c000de22:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de25:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de28:	eb 25                	jmp    c000de4f <zoh_vari_process+0x5ca>
c000de2a:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de2d:	31 d2                	xor    edx,edx
c000de2f:	29 c8                	sub    eax,ecx
c000de31:	c1 e0 02             	shl    eax,0x2
c000de34:	39 d1                	cmp    ecx,edx
c000de36:	7e ce                	jle    c000de06 <zoh_vari_process+0x581>
c000de38:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de3a:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de3d:	83 c0 04             	add    eax,0x4
c000de40:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de44:	42                   	inc    edx
c000de45:	eb ed                	jmp    c000de34 <zoh_vari_process+0x5af>
c000de47:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de53:	83 c4 3c             	add    esp,0x3c
c000de56:	5b                   	pop    ebx
c000de57:	5e                   	pop    esi
c000de58:	5f                   	pop    edi
c000de59:	5d                   	pop    ebp
c000de5a:	c3                   	ret    

c000de5b <zoh_reset>:
c000de5b:	83 ec 0c             	sub    esp,0xc
c000de5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de62:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de65:	85 c0                	test   eax,eax
c000de67:	74 20                	je     c000de89 <zoh_reset+0x2e>
c000de69:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de6c:	83 c0 1c             	add    eax,0x1c
c000de6f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de72:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de79:	c1 e2 02             	shl    edx,0x2
c000de7c:	51                   	push   ecx
c000de7d:	52                   	push   edx
c000de7e:	6a 00                	push   0x0
c000de80:	50                   	push   eax
c000de81:	e8 3f 28 ff ff       	call   c00006c5 <memset>
c000de86:	83 c4 10             	add    esp,0x10
c000de89:	83 c4 0c             	add    esp,0xc
c000de8c:	c3                   	ret    

c000de8d <zoh_get_name>:
c000de8d:	31 c0                	xor    eax,eax
c000de8f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de94:	75 05                	jne    c000de9b <zoh_get_name+0xe>
c000de96:	b8 de 68 02 c0       	mov    eax,0xc00268de
c000de9b:	c3                   	ret    

c000de9c <zoh_get_description>:
c000de9c:	31 c0                	xor    eax,eax
c000de9e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000dea3:	75 05                	jne    c000deaa <zoh_get_description+0xe>
c000dea5:	b8 ef 68 02 c0       	mov    eax,0xc00268ef
c000deaa:	c3                   	ret    

c000deab <zoh_set_converter>:
c000deab:	53                   	push   ebx
c000deac:	b8 0a 00 00 00       	mov    eax,0xa
c000deb1:	83 ec 08             	sub    esp,0x8
c000deb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000deb8:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000debd:	75 6e                	jne    c000df2d <zoh_set_converter+0x82>
c000debf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dec2:	85 c0                	test   eax,eax
c000dec4:	74 13                	je     c000ded9 <zoh_set_converter+0x2e>
c000dec6:	83 ec 0c             	sub    esp,0xc
c000dec9:	50                   	push   eax
c000deca:	e8 7f 12 00 00       	call   c000f14e <free>
c000decf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ded6:	83 c4 10             	add    esp,0x10
c000ded9:	50                   	push   eax
c000deda:	50                   	push   eax
c000dedb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dede:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000dee5:	50                   	push   eax
c000dee6:	6a 01                	push   0x1
c000dee8:	e8 81 12 00 00       	call   c000f16e <calloc>
c000deed:	83 c4 10             	add    esp,0x10
c000def0:	89 c2                	mov    edx,eax
c000def2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000def5:	85 d2                	test   edx,edx
c000def7:	b8 01 00 00 00       	mov    eax,0x1
c000defc:	74 2f                	je     c000df2d <zoh_set_converter+0x82>
c000defe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df01:	83 ec 0c             	sub    esp,0xc
c000df04:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df07:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df0d:	c7 43 24 85 d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d885
c000df14:	c7 43 20 85 d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d885
c000df1b:	c7 43 28 5b de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de5b
c000df22:	53                   	push   ebx
c000df23:	e8 33 ff ff ff       	call   c000de5b <zoh_reset>
c000df28:	83 c4 10             	add    esp,0x10
c000df2b:	31 c0                	xor    eax,eax
c000df2d:	83 c4 08             	add    esp,0x8
c000df30:	5b                   	pop    ebx
c000df31:	c3                   	ret    

c000df32 <Computer::close(int, int, void*)>:
c000df32:	57                   	push   edi
c000df33:	56                   	push   esi
c000df34:	53                   	push   ebx
c000df35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df3d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df41:	83 ec 0c             	sub    esp,0xc
c000df44:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df4a:	e8 79 58 00 00       	call   c00137c8 <Device::closeAll()>
c000df4f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	8b 10                	mov    edx,DWORD PTR [eax]
c000df5a:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df5e:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df66:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df6e:	5b                   	pop    ebx
c000df6f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df72:	5e                   	pop    esi
c000df73:	5f                   	pop    edi
c000df74:	ff e0                	jmp    eax

c000df76 <Computer::Computer()>:
c000df76:	83 ec 0c             	sub    esp,0xc
c000df79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7d:	83 ec 08             	sub    esp,0x8
c000df80:	68 26 69 02 c0       	push   0xc0026926
c000df85:	50                   	push   eax
c000df86:	e8 b7 58 00 00       	call   c0013842 <Device::Device(char const*)>
c000df8b:	83 c4 10             	add    esp,0x10
c000df8e:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c000df93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df97:	89 10                	mov    DWORD PTR [eax],edx
c000df99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfab:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfbf:	83 ca 04             	or     edx,0x4
c000dfc2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfd2:	0f b6 d0             	movzx  edx,al
c000dfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd9:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfea:	0f b6 d0             	movzx  edx,al
c000dfed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000dff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e000:	8d 50 01             	lea    edx,[eax+0x1]
c000e003:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e007:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e00d:	0f b6 d0             	movzx  edx,al
c000e010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e014:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e018:	83 e1 3f             	and    ecx,0x3f
c000e01b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e023:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e029:	0f b6 d0             	movzx  edx,al
c000e02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e030:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e041:	0f b6 d0             	movzx  edx,al
c000e044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e048:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e051:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e057:	8d 50 01             	lea    edx,[eax+0x1]
c000e05a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e05e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e064:	0f b6 d0             	movzx  edx,al
c000e067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e06f:	83 e1 3f             	and    ecx,0x3f
c000e072:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e080:	0f b6 d0             	movzx  edx,al
c000e083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e087:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e092:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e098:	0f b6 d0             	movzx  edx,al
c000e09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0ae:	8d 50 01             	lea    edx,[eax+0x1]
c000e0b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0b5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0bb:	0f b6 d0             	movzx  edx,al
c000e0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0c6:	83 e1 3f             	and    ecx,0x3f
c000e0c9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0cd:	90                   	nop
c000e0ce:	83 c4 0c             	add    esp,0xc
c000e0d1:	c3                   	ret    

c000e0d2 <Computer::setBootMessage(char const*)>:
c000e0d2:	c3                   	ret    
c000e0d3:	90                   	nop

c000e0d4 <Computer::start()>:
c000e0d4:	56                   	push   esi
c000e0d5:	53                   	push   ebx
c000e0d6:	50                   	push   eax
c000e0d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0db:	e8 58 d8 00 00       	call   c001b938 <lockScheduler()>
c000e0e0:	e8 87 db 00 00       	call   c001bc6c <schedule()>
c000e0e5:	e8 50 d8 00 00       	call   c001b93a <unlockScheduler()>
c000e0ea:	fb                   	sti    
c000e0eb:	83 ec 0c             	sub    esp,0xc
c000e0ee:	68 3b 07 00 00       	push   0x73b
c000e0f3:	e8 60 40 00 00       	call   c0012158 <operator new(unsigned long)>
c000e0f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0ff:	89 c6                	mov    esi,eax
c000e101:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c000e107:	68 2f 69 02 c0       	push   0xc002692f
c000e10c:	6a 01                	push   0x1
c000e10e:	50                   	push   eax
c000e10f:	e8 84 d6 00 00       	call   c001b798 <Process::Process(bool, char const*, Process*, char**)>
c000e114:	83 c4 20             	add    esp,0x20
c000e117:	68 ff 00 00 00       	push   0xff
c000e11c:	6a 00                	push   0x0
c000e11e:	68 cb ea 00 c0       	push   0xc000eacb
c000e123:	56                   	push   esi
c000e124:	e8 39 d9 00 00       	call   c001ba62 <Process::createThread(void (*)(void*), void*, int)>
c000e129:	6a 7a                	push   0x7a
c000e12b:	6a 00                	push   0x0
c000e12d:	68 9b c2 01 c0       	push   0xc001c29b
c000e132:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c000e138:	e8 25 d9 00 00       	call   c001ba62 <Process::createThread(void (*)(void*), void*, int)>
c000e13d:	83 c4 20             	add    esp,0x20
c000e140:	a3 08 b8 02 c0       	mov    ds:0xc002b808,eax
c000e145:	c6 05 0d a4 02 c0 01 	mov    BYTE PTR ds:0xc002a40d,0x1
c000e14c:	e8 51 44 00 00       	call   c00125a2 <initVFS()>
c000e151:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e157:	8b 10                	mov    edx,DWORD PTR [eax]
c000e159:	6a 00                	push   0x0
c000e15b:	6a 00                	push   0x0
c000e15d:	6a 00                	push   0x0
c000e15f:	50                   	push   eax
c000e160:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e163:	e8 2e c0 00 00       	call   c001a196 <setupSystemCalls()>
c000e168:	e8 33 4f 00 00       	call   c00130a0 <loadClockSettings()>
c000e16d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e170:	e8 27 56 00 00       	call   c001379c <Device::loadDriversForAll()>
c000e175:	5a                   	pop    edx
c000e176:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c000e17c:	59                   	pop    ecx
c000e17d:	6a 01                	push   0x1
c000e17f:	68 3c 69 02 c0       	push   0xc002693c
c000e184:	e8 df d1 00 00       	call   c001b368 <Thr::loadDLL(char const*, bool)>
c000e189:	5e                   	pop    esi
c000e18a:	5a                   	pop    edx
c000e18b:	53                   	push   ebx
c000e18c:	50                   	push   eax
c000e18d:	e8 9c d3 00 00       	call   c001b52e <Thr::executeDLL(unsigned long, void*)>
c000e192:	c7 04 24 c0 7a 02 c0 	mov    DWORD PTR [esp],0xc0027ac0
c000e199:	e8 a9 40 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e19e:	83 c4 10             	add    esp,0x10
c000e1a1:	83 ec 0c             	sub    esp,0xc
c000e1a4:	6a 02                	push   0x2
c000e1a6:	e8 1b dc 00 00       	call   c001bdc6 <blockTask(TaskState)>
c000e1ab:	83 c4 10             	add    esp,0x10
c000e1ae:	eb f1                	jmp    c000e1a1 <Computer::start()+0xcd>

c000e1b0 <firstTask()>:
c000e1b0:	83 ec 18             	sub    esp,0x18
c000e1b3:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000e1b9:	e8 16 ff ff ff       	call   c000e0d4 <Computer::start()>

c000e1be <Computer::detectFeatures()>:
c000e1be:	55                   	push   ebp
c000e1bf:	57                   	push   edi
c000e1c0:	56                   	push   esi
c000e1c1:	53                   	push   ebx
c000e1c2:	83 ec 1c             	sub    esp,0x1c
c000e1c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1c9:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1d3:	e8 cb 21 ff ff       	call   c00003a3 <detectCPUID>
c000e1d8:	85 c0                	test   eax,eax
c000e1da:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1e0:	0f 95 c2             	setne  dl
c000e1e3:	83 e0 fd             	and    eax,0xfffffffd
c000e1e6:	d1 e2                	shl    edx,1
c000e1e8:	09 d0                	or     eax,edx
c000e1ea:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1f0:	a8 02                	test   al,0x2
c000e1f2:	75 46                	jne    c000e23a <Computer::detectFeatures()+0x7c>
c000e1f4:	f6 05 21 a4 02 c0 04 	test   BYTE PTR ds:0xc002a421,0x4
c000e1fb:	74 07                	je     c000e204 <Computer::detectFeatures()+0x46>
c000e1fd:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e204:	e8 1d 4e 01 00       	call   c0023026 <x87Detect>
c000e209:	83 e0 01             	and    eax,0x1
c000e20c:	c1 e0 04             	shl    eax,0x4
c000e20f:	88 c2                	mov    dl,al
c000e211:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e217:	83 e0 ef             	and    eax,0xffffffef
c000e21a:	09 d0                	or     eax,edx
c000e21c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e222:	a8 10                	test   al,0x10
c000e224:	0f 85 10 01 00 00    	jne    c000e33a <Computer::detectFeatures()+0x17c>
c000e22a:	84 c0                	test   al,al
c000e22c:	0f 88 2b 01 00 00    	js     c000e35d <Computer::detectFeatures()+0x19f>
c000e232:	83 c4 1c             	add    esp,0x1c
c000e235:	5b                   	pop    ebx
c000e236:	5e                   	pop    esi
c000e237:	5f                   	pop    edi
c000e238:	5d                   	pop    ebp
c000e239:	c3                   	ret    
c000e23a:	83 ec 0c             	sub    esp,0xc
c000e23d:	6a 20                	push   0x20
c000e23f:	e8 62 95 00 00       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c000e244:	83 e0 01             	and    eax,0x1
c000e247:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e24e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e254:	83 e0 f7             	and    eax,0xfffffff7
c000e257:	09 d0                	or     eax,edx
c000e259:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e25f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e266:	e8 3b 95 00 00       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c000e26b:	83 e0 01             	and    eax,0x1
c000e26e:	88 c2                	mov    dl,al
c000e270:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e276:	83 e0 fe             	and    eax,0xfffffffe
c000e279:	09 d0                	or     eax,edx
c000e27b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e281:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e288:	e8 19 95 00 00       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c000e28d:	c1 e0 07             	shl    eax,0x7
c000e290:	88 c2                	mov    dl,al
c000e292:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e298:	83 e0 7f             	and    eax,0x7f
c000e29b:	09 d0                	or     eax,edx
c000e29d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2a3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2aa:	e8 f7 94 00 00       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c000e2af:	83 c4 10             	add    esp,0x10
c000e2b2:	83 e0 01             	and    eax,0x1
c000e2b5:	c1 e0 05             	shl    eax,0x5
c000e2b8:	88 c2                	mov    dl,al
c000e2ba:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2c0:	83 e0 df             	and    eax,0xffffffdf
c000e2c3:	09 d0                	or     eax,edx
c000e2c5:	f7 05 20 a4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a420,0x401
c000e2cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2d5:	0f 84 a8 00 00 00    	je     c000e383 <Computer::detectFeatures()+0x1c5>
c000e2db:	83 ec 0c             	sub    esp,0xc
c000e2de:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000e2e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2e9:	50                   	push   eax
c000e2ea:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e2ee:	55                   	push   ebp
c000e2ef:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e2f3:	57                   	push   edi
c000e2f4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e2f8:	56                   	push   esi
c000e2f9:	68 00 00 00 80       	push   0x80000000
c000e2fe:	e8 1f 94 00 00       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e303:	83 c4 20             	add    esp,0x20
c000e306:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e30d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e311:	0f 86 dd fe ff ff    	jbe    c000e1f4 <Computer::detectFeatures()+0x36>
c000e317:	83 ec 0c             	sub    esp,0xc
c000e31a:	50                   	push   eax
c000e31b:	55                   	push   ebp
c000e31c:	57                   	push   edi
c000e31d:	56                   	push   esi
c000e31e:	68 01 00 00 80       	push   0x80000001
c000e323:	e8 fa 93 00 00       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e328:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e332:	83 c4 20             	add    esp,0x20
c000e335:	e9 ba fe ff ff       	jmp    c000e1f4 <Computer::detectFeatures()+0x36>
c000e33a:	e8 a1 4c 01 00       	call   c0022fe0 <sseDetect>
c000e33f:	88 c2                	mov    dl,al
c000e341:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e347:	c1 e2 07             	shl    edx,0x7
c000e34a:	83 e0 7f             	and    eax,0x7f
c000e34d:	09 d0                	or     eax,edx
c000e34f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e355:	84 c0                	test   al,al
c000e357:	0f 89 d5 fe ff ff    	jns    c000e232 <Computer::detectFeatures()+0x74>
c000e35d:	e8 6e 4c 01 00       	call   c0022fd0 <avxDetect>
c000e362:	83 e0 01             	and    eax,0x1
c000e365:	c1 e0 05             	shl    eax,0x5
c000e368:	88 c2                	mov    dl,al
c000e36a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e370:	83 e0 df             	and    eax,0xffffffdf
c000e373:	09 d0                	or     eax,edx
c000e375:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e37b:	83 c4 1c             	add    esp,0x1c
c000e37e:	5b                   	pop    ebx
c000e37f:	5e                   	pop    esi
c000e380:	5f                   	pop    edi
c000e381:	5d                   	pop    ebp
c000e382:	c3                   	ret    
c000e383:	83 ec 0c             	sub    esp,0xc
c000e386:	68 00 02 00 00       	push   0x200
c000e38b:	e8 16 94 00 00       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c000e390:	83 c4 10             	add    esp,0x10
c000e393:	e9 43 ff ff ff       	jmp    c000e2db <Computer::detectFeatures()+0x11d>

c000e398 <Computer::displayFeatures()>:
c000e398:	53                   	push   ebx
c000e399:	83 ec 14             	sub    esp,0x14
c000e39c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3a0:	68 5f 69 02 c0       	push   0xc002695f
c000e3a5:	e8 9d 3e 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3b4:	0f 85 73 02 00 00    	jne    c000e62d <Computer::displayFeatures()+0x295>
c000e3ba:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e3bf:	83 ec 08             	sub    esp,0x8
c000e3c2:	50                   	push   eax
c000e3c3:	68 72 69 02 c0       	push   0xc0026972
c000e3c8:	e8 7a 3e 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e3cd:	83 c4 10             	add    esp,0x10
c000e3d0:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3d7:	0f 85 8c 02 00 00    	jne    c000e669 <Computer::displayFeatures()+0x2d1>
c000e3dd:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e3e2:	83 ec 08             	sub    esp,0x8
c000e3e5:	50                   	push   eax
c000e3e6:	68 83 69 02 c0       	push   0xc0026983
c000e3eb:	e8 57 3e 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e3f0:	83 c4 10             	add    esp,0x10
c000e3f3:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e3fa:	0f 85 5f 02 00 00    	jne    c000e65f <Computer::displayFeatures()+0x2c7>
c000e400:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e405:	83 ec 08             	sub    esp,0x8
c000e408:	50                   	push   eax
c000e409:	68 94 69 02 c0       	push   0xc0026994
c000e40e:	e8 34 3e 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e41d:	0f 85 32 02 00 00    	jne    c000e655 <Computer::displayFeatures()+0x2bd>
c000e423:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e428:	83 ec 08             	sub    esp,0x8
c000e42b:	50                   	push   eax
c000e42c:	68 a5 69 02 c0       	push   0xc00269a5
c000e431:	e8 11 3e 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e440:	0f 85 05 02 00 00    	jne    c000e64b <Computer::displayFeatures()+0x2b3>
c000e446:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e44b:	83 ec 08             	sub    esp,0x8
c000e44e:	50                   	push   eax
c000e44f:	68 b6 69 02 c0       	push   0xc00269b6
c000e454:	e8 ee 3d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e459:	83 c4 10             	add    esp,0x10
c000e45c:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e463:	0f 85 d8 01 00 00    	jne    c000e641 <Computer::displayFeatures()+0x2a9>
c000e469:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e46e:	83 ec 08             	sub    esp,0x8
c000e471:	50                   	push   eax
c000e472:	68 c7 69 02 c0       	push   0xc00269c7
c000e477:	e8 cb 3d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e47c:	83 c4 10             	add    esp,0x10
c000e47f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e486:	0f 85 ab 01 00 00    	jne    c000e637 <Computer::displayFeatures()+0x29f>
c000e48c:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e491:	83 ec 08             	sub    esp,0x8
c000e494:	50                   	push   eax
c000e495:	68 d8 69 02 c0       	push   0xc00269d8
c000e49a:	e8 a8 3d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e49f:	83 c4 10             	add    esp,0x10
c000e4a2:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4a9:	0f 88 1b 02 00 00    	js     c000e6ca <Computer::displayFeatures()+0x332>
c000e4af:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4b4:	83 ec 08             	sub    esp,0x8
c000e4b7:	50                   	push   eax
c000e4b8:	68 e9 69 02 c0       	push   0xc00269e9
c000e4bd:	e8 85 3d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e4c2:	83 c4 10             	add    esp,0x10
c000e4c5:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4cc:	0f 85 a1 01 00 00    	jne    c000e673 <Computer::displayFeatures()+0x2db>
c000e4d2:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4d7:	83 ec 08             	sub    esp,0x8
c000e4da:	50                   	push   eax
c000e4db:	68 fa 69 02 c0       	push   0xc00269fa
c000e4e0:	e8 62 3d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e4e5:	83 c4 10             	add    esp,0x10
c000e4e8:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e4ef:	0f 85 cb 01 00 00    	jne    c000e6c0 <Computer::displayFeatures()+0x328>
c000e4f5:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4fa:	83 ec 08             	sub    esp,0x8
c000e4fd:	50                   	push   eax
c000e4fe:	68 0b 6a 02 c0       	push   0xc0026a0b
c000e503:	e8 3f 3d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e508:	83 c4 10             	add    esp,0x10
c000e50b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e512:	0f 85 9e 01 00 00    	jne    c000e6b6 <Computer::displayFeatures()+0x31e>
c000e518:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e51d:	83 ec 08             	sub    esp,0x8
c000e520:	50                   	push   eax
c000e521:	68 1c 6a 02 c0       	push   0xc0026a1c
c000e526:	e8 1c 3d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e52b:	83 c4 10             	add    esp,0x10
c000e52e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e535:	0f 85 71 01 00 00    	jne    c000e6ac <Computer::displayFeatures()+0x314>
c000e53b:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e540:	83 ec 08             	sub    esp,0x8
c000e543:	50                   	push   eax
c000e544:	68 2d 6a 02 c0       	push   0xc0026a2d
c000e549:	e8 f9 3c 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e54e:	83 c4 10             	add    esp,0x10
c000e551:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e558:	0f 85 44 01 00 00    	jne    c000e6a2 <Computer::displayFeatures()+0x30a>
c000e55e:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e563:	83 ec 08             	sub    esp,0x8
c000e566:	50                   	push   eax
c000e567:	68 3e 6a 02 c0       	push   0xc0026a3e
c000e56c:	e8 d6 3c 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e571:	83 c4 10             	add    esp,0x10
c000e574:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e57b:	0f 85 17 01 00 00    	jne    c000e698 <Computer::displayFeatures()+0x300>
c000e581:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e586:	83 ec 08             	sub    esp,0x8
c000e589:	50                   	push   eax
c000e58a:	68 4f 6a 02 c0       	push   0xc0026a4f
c000e58f:	e8 b3 3c 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e594:	83 c4 10             	add    esp,0x10
c000e597:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e59e:	0f 85 ea 00 00 00    	jne    c000e68e <Computer::displayFeatures()+0x2f6>
c000e5a4:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5a9:	83 ec 08             	sub    esp,0x8
c000e5ac:	50                   	push   eax
c000e5ad:	68 60 6a 02 c0       	push   0xc0026a60
c000e5b2:	e8 90 3c 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e5b7:	83 c4 10             	add    esp,0x10
c000e5ba:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5c1:	0f 88 0d 01 00 00    	js     c000e6d4 <Computer::displayFeatures()+0x33c>
c000e5c7:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5cc:	83 ec 08             	sub    esp,0x8
c000e5cf:	50                   	push   eax
c000e5d0:	68 71 6a 02 c0       	push   0xc0026a71
c000e5d5:	e8 6d 3c 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e5da:	83 c4 10             	add    esp,0x10
c000e5dd:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e5e4:	0f 85 9a 00 00 00    	jne    c000e684 <Computer::displayFeatures()+0x2ec>
c000e5ea:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5ef:	83 ec 08             	sub    esp,0x8
c000e5f2:	50                   	push   eax
c000e5f3:	68 82 6a 02 c0       	push   0xc0026a82
c000e5f8:	e8 4a 3c 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e5fd:	83 c4 10             	add    esp,0x10
c000e600:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e607:	75 74                	jne    c000e67d <Computer::displayFeatures()+0x2e5>
c000e609:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e60e:	83 ec 08             	sub    esp,0x8
c000e611:	50                   	push   eax
c000e612:	68 93 6a 02 c0       	push   0xc0026a93
c000e617:	e8 2b 3c 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e61c:	c7 44 24 20 7e 80 02 c0 	mov    DWORD PTR [esp+0x20],0xc002807e
c000e624:	83 c4 18             	add    esp,0x18
c000e627:	5b                   	pop    ebx
c000e628:	e9 1a 3c 00 00       	jmp    c0012247 <Dbg::kprintf(char const*, ...)>
c000e62d:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e632:	e9 88 fd ff ff       	jmp    c000e3bf <Computer::displayFeatures()+0x27>
c000e637:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e63c:	e9 50 fe ff ff       	jmp    c000e491 <Computer::displayFeatures()+0xf9>
c000e641:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e646:	e9 23 fe ff ff       	jmp    c000e46e <Computer::displayFeatures()+0xd6>
c000e64b:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e650:	e9 f6 fd ff ff       	jmp    c000e44b <Computer::displayFeatures()+0xb3>
c000e655:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e65a:	e9 c9 fd ff ff       	jmp    c000e428 <Computer::displayFeatures()+0x90>
c000e65f:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e664:	e9 9c fd ff ff       	jmp    c000e405 <Computer::displayFeatures()+0x6d>
c000e669:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e66e:	e9 6f fd ff ff       	jmp    c000e3e2 <Computer::displayFeatures()+0x4a>
c000e673:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e678:	e9 5a fe ff ff       	jmp    c000e4d7 <Computer::displayFeatures()+0x13f>
c000e67d:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e682:	eb 8a                	jmp    c000e60e <Computer::displayFeatures()+0x276>
c000e684:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e689:	e9 61 ff ff ff       	jmp    c000e5ef <Computer::displayFeatures()+0x257>
c000e68e:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e693:	e9 11 ff ff ff       	jmp    c000e5a9 <Computer::displayFeatures()+0x211>
c000e698:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e69d:	e9 e4 fe ff ff       	jmp    c000e586 <Computer::displayFeatures()+0x1ee>
c000e6a2:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6a7:	e9 b7 fe ff ff       	jmp    c000e563 <Computer::displayFeatures()+0x1cb>
c000e6ac:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6b1:	e9 8a fe ff ff       	jmp    c000e540 <Computer::displayFeatures()+0x1a8>
c000e6b6:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6bb:	e9 5d fe ff ff       	jmp    c000e51d <Computer::displayFeatures()+0x185>
c000e6c0:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6c5:	e9 30 fe ff ff       	jmp    c000e4fa <Computer::displayFeatures()+0x162>
c000e6ca:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6cf:	e9 e0 fd ff ff       	jmp    c000e4b4 <Computer::displayFeatures()+0x11c>
c000e6d4:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6d9:	e9 ee fe ff ff       	jmp    c000e5cc <Computer::displayFeatures()+0x234>

c000e6de <Computer::rdmsr(unsigned int)>:
c000e6de:	83 ec 0c             	sub    esp,0xc
c000e6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e6ec:	74 0a                	je     c000e6f8 <Computer::rdmsr(unsigned int)+0x1a>
c000e6ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6f2:	0f 32                	rdmsr  
c000e6f4:	83 c4 0c             	add    esp,0xc
c000e6f7:	c3                   	ret    
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	68 a4 6a 02 c0       	push   0xc0026aa4
c000e700:	e8 e0 a2 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000e705:	83 c4 10             	add    esp,0x10
c000e708:	eb e4                	jmp    c000e6ee <Computer::rdmsr(unsigned int)+0x10>

c000e70a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e70a:	57                   	push   edi
c000e70b:	56                   	push   esi
c000e70c:	52                   	push   edx
c000e70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e711:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e715:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e719:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e720:	74 0e                	je     c000e730 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e722:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e726:	89 f0                	mov    eax,esi
c000e728:	89 fa                	mov    edx,edi
c000e72a:	0f 30                	wrmsr  
c000e72c:	58                   	pop    eax
c000e72d:	5e                   	pop    esi
c000e72e:	5f                   	pop    edi
c000e72f:	c3                   	ret    
c000e730:	83 ec 0c             	sub    esp,0xc
c000e733:	68 aa 6a 02 c0       	push   0xc0026aaa
c000e738:	e8 a8 a2 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000e73d:	83 c4 10             	add    esp,0x10
c000e740:	eb e0                	jmp    c000e722 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e742 <Computer::nmiEnabled()>:
c000e742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e746:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e74c:	c3                   	ret    
c000e74d:	90                   	nop

c000e74e <Computer::readCMOS(unsigned char)>:
c000e74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e752:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e759:	19 c0                	sbb    eax,eax
c000e75b:	83 e0 80             	and    eax,0xffffff80
c000e75e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e762:	e6 70                	out    0x70,al
c000e764:	e4 71                	in     al,0x71
c000e766:	c3                   	ret    
c000e767:	90                   	nop

c000e768 <Computer::enableNMI(bool)>:
c000e768:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e76c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e770:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e776:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e77e:	eb ce                	jmp    c000e74e <Computer::readCMOS(unsigned char)>

c000e780 <Computer::open(int, int, void*)>:
c000e780:	56                   	push   esi
c000e781:	53                   	push   ebx
c000e782:	83 ec 10             	sub    esp,0x10
c000e785:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e789:	f6 05 20 a4 02 c0 04 	test   BYTE PTR ds:0xc002a420,0x4
c000e790:	68 68 22 00 00       	push   0x2268
c000e795:	0f 94 05 c0 93 02 c0 	sete   BYTE PTR ds:0xc00293c0
c000e79c:	e8 b7 39 00 00       	call   c0012158 <operator new(unsigned long)>
c000e7a1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7a4:	89 c6                	mov    esi,eax
c000e7a6:	e8 39 86 00 00       	call   c0016de4 <ACPI::ACPI()>
c000e7ab:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7b1:	58                   	pop    eax
c000e7b2:	5a                   	pop    edx
c000e7b3:	56                   	push   esi
c000e7b4:	53                   	push   ebx
c000e7b5:	e8 98 4e 00 00       	call   c0013652 <Device::addChild(Device*)>
c000e7ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7bd:	e8 fc f9 ff ff       	call   c000e1be <Computer::detectFeatures()>
c000e7c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7c5:	e8 ce fb ff ff       	call   c000e398 <Computer::displayFeatures()>
c000e7ca:	59                   	pop    ecx
c000e7cb:	5e                   	pop    esi
c000e7cc:	6a 01                	push   0x1
c000e7ce:	53                   	push   ebx
c000e7cf:	e8 94 ff ff ff       	call   c000e768 <Computer::enableNMI(bool)>
c000e7d4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e7db:	e8 78 39 00 00       	call   c0012158 <operator new(unsigned long)>
c000e7e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7e3:	89 c6                	mov    esi,eax
c000e7e5:	e8 8c 90 00 00       	call   c0017876 <CPU::CPU()>
c000e7ea:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e7f0:	58                   	pop    eax
c000e7f1:	5a                   	pop    edx
c000e7f2:	56                   	push   esi
c000e7f3:	53                   	push   ebx
c000e7f4:	e8 59 4e 00 00       	call   c0013652 <Device::addChild(Device*)>
c000e7f9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e7ff:	8b 10                	mov    edx,DWORD PTR [eax]
c000e801:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e805:	6a 00                	push   0x0
c000e807:	6a 00                	push   0x0
c000e809:	50                   	push   eax
c000e80a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e80d:	83 c4 20             	add    esp,0x20
c000e810:	e8 a5 53 00 00       	call   c0013bba <setupFPU()>
c000e815:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e81b:	85 c0                	test   eax,eax
c000e81d:	74 1f                	je     c000e83e <Computer::open(int, int, void*)+0xbe>
c000e81f:	83 ec 08             	sub    esp,0x8
c000e822:	50                   	push   eax
c000e823:	53                   	push   ebx
c000e824:	e8 29 4e 00 00       	call   c0013652 <Device::addChild(Device*)>
c000e829:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e82f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e831:	6a 00                	push   0x0
c000e833:	6a 00                	push   0x0
c000e835:	6a 00                	push   0x0
c000e837:	50                   	push   eax
c000e838:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e83b:	83 c4 20             	add    esp,0x20
c000e83e:	83 ec 0c             	sub    esp,0xc
c000e841:	68 b0 e1 00 c0       	push   0xc000e1b0
c000e846:	e8 17 d3 00 00       	call   c001bb62 <setupMultitasking(void (*)())>
c000e84b:	83 c4 14             	add    esp,0x14
c000e84e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e853:	5b                   	pop    ebx
c000e854:	5e                   	pop    esi
c000e855:	c3                   	ret    

c000e856 <Computer::disableNMI()>:
c000e856:	6a 00                	push   0x0
c000e858:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e85c:	e8 07 ff ff ff       	call   c000e768 <Computer::enableNMI(bool)>
c000e861:	58                   	pop    eax
c000e862:	5a                   	pop    edx
c000e863:	c3                   	ret    

c000e864 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e868:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e86f:	19 c0                	sbb    eax,eax
c000e871:	83 e0 80             	and    eax,0xffffff80
c000e874:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e878:	e6 70                	out    0x70,al
c000e87a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e87e:	e6 71                	out    0x71,al
c000e880:	c3                   	ret    
c000e881:	90                   	nop

c000e882 <Computer::handleNMI()>:
c000e882:	56                   	push   esi
c000e883:	53                   	push   ebx
c000e884:	83 ec 10             	sub    esp,0x10
c000e887:	e4 92                	in     al,0x92
c000e889:	89 c6                	mov    esi,eax
c000e88b:	e4 61                	in     al,0x61
c000e88d:	68 b0 6a 02 c0       	push   0xc0026ab0
c000e892:	88 c3                	mov    bl,al
c000e894:	e8 ae 39 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e899:	83 c4 10             	add    esp,0x10
c000e89c:	83 e6 10             	and    esi,0x10
c000e89f:	75 0d                	jne    c000e8ae <Computer::handleNMI()+0x2c>
c000e8a1:	f6 c3 40             	test   bl,0x40
c000e8a4:	75 1d                	jne    c000e8c3 <Computer::handleNMI()+0x41>
c000e8a6:	84 db                	test   bl,bl
c000e8a8:	78 2d                	js     c000e8d7 <Computer::handleNMI()+0x55>
c000e8aa:	58                   	pop    eax
c000e8ab:	5b                   	pop    ebx
c000e8ac:	5e                   	pop    esi
c000e8ad:	c3                   	ret    
c000e8ae:	83 ec 0c             	sub    esp,0xc
c000e8b1:	68 c1 6a 02 c0       	push   0xc0026ac1
c000e8b6:	e8 2a a1 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	f6 c3 40             	test   bl,0x40
c000e8c1:	74 e3                	je     c000e8a6 <Computer::handleNMI()+0x24>
c000e8c3:	83 ec 0c             	sub    esp,0xc
c000e8c6:	68 ce 6a 02 c0       	push   0xc0026ace
c000e8cb:	e8 15 a1 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000e8d0:	83 c4 10             	add    esp,0x10
c000e8d3:	84 db                	test   bl,bl
c000e8d5:	79 d3                	jns    c000e8aa <Computer::handleNMI()+0x28>
c000e8d7:	c7 44 24 10 d8 6a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ad8
c000e8df:	5a                   	pop    edx
c000e8e0:	5b                   	pop    ebx
c000e8e1:	5e                   	pop    esi
c000e8e2:	e9 fe a0 00 00       	jmp    c00189e5 <Krnl::panic(char const*)>
c000e8e7:	90                   	nop

c000e8e8 <Computer::setDiskActivityLight(int, bool)>:
c000e8e8:	56                   	push   esi
c000e8e9:	53                   	push   ebx
c000e8ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e8ee:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8f3:	77 1b                	ja     c000e910 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e8f5:	e4 92                	in     al,0x92
c000e8f7:	bb 40 00 00 00       	mov    ebx,0x40
c000e8fc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e900:	89 da                	mov    edx,ebx
c000e902:	d3 e2                	shl    edx,cl
c000e904:	89 f1                	mov    ecx,esi
c000e906:	f7 d2                	not    edx
c000e908:	d3 e3                	shl    ebx,cl
c000e90a:	21 d0                	and    eax,edx
c000e90c:	09 d8                	or     eax,ebx
c000e90e:	e6 92                	out    0x92,al
c000e910:	5b                   	pop    ebx
c000e911:	5e                   	pop    esi
c000e912:	c3                   	ret    
c000e913:	90                   	nop

c000e914 <GDTEntry::setBase(unsigned int)>:
c000e914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e918:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e91c:	89 c1                	mov    ecx,eax
c000e91e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e922:	c1 e9 10             	shr    ecx,0x10
c000e925:	c1 e8 18             	shr    eax,0x18
c000e928:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e92b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e92e:	c3                   	ret    
c000e92f:	90                   	nop

c000e930 <GDTEntry::setLimit(unsigned int)>:
c000e930:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e938:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e93b:	66 89 01             	mov    WORD PTR [ecx],ax
c000e93e:	83 e2 f0             	and    edx,0xfffffff0
c000e941:	c1 e8 10             	shr    eax,0x10
c000e944:	83 e0 0f             	and    eax,0xf
c000e947:	09 d0                	or     eax,edx
c000e949:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e94c:	c3                   	ret    
c000e94d:	90                   	nop

c000e94e <GDT::GDT()>:
c000e94e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e952:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e95c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e962:	90                   	nop
c000e963:	c3                   	ret    

c000e964 <GDT::addEntry(GDTEntry)>:
c000e964:	53                   	push   ebx
c000e965:	83 ec 0c             	sub    esp,0xc
c000e968:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e96c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e96e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e975:	52                   	push   edx
c000e976:	50                   	push   eax
c000e977:	68 14 6b 02 c0       	push   0xc0026b14
c000e97c:	e8 c6 38 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000e981:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e983:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e987:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e98b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e98f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e993:	8d 50 01             	lea    edx,[eax+0x1]
c000e996:	c1 e0 03             	shl    eax,0x3
c000e999:	89 13                	mov    DWORD PTR [ebx],edx
c000e99b:	83 c4 18             	add    esp,0x18
c000e99e:	5b                   	pop    ebx
c000e99f:	c3                   	ret    

c000e9a0 <GDT::getNumberOfEntries()>:
c000e9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9a6:	c3                   	ret    
c000e9a7:	90                   	nop

c000e9a8 <GDT::flush()>:
c000e9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9ae:	83 c0 04             	add    eax,0x4
c000e9b1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9b8:	a3 12 a4 02 c0       	mov    ds:0xc002a412,eax
c000e9bd:	66 89 15 10 a4 02 c0 	mov    WORD PTR ds:0xc002a410,dx
c000e9c4:	e9 4e 1a ff ff       	jmp    c0000417 <loadGDT>
c000e9c9:	90                   	nop

c000e9ca <GDT::setup()>:
c000e9ca:	55                   	push   ebp
c000e9cb:	57                   	push   edi
c000e9cc:	56                   	push   esi
c000e9cd:	53                   	push   ebx
c000e9ce:	83 ec 3c             	sub    esp,0x3c
c000e9d1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9d5:	6a 00                	push   0x0
c000e9d7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000e9db:	53                   	push   ebx
c000e9dc:	e8 33 ff ff ff       	call   c000e914 <GDTEntry::setBase(unsigned int)>
c000e9e1:	6a 00                	push   0x0
c000e9e3:	53                   	push   ebx
c000e9e4:	e8 47 ff ff ff       	call   c000e930 <GDTEntry::setLimit(unsigned int)>
c000e9e9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000e9f1:	6a 00                	push   0x0
c000e9f3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000e9f7:	53                   	push   ebx
c000e9f8:	e8 17 ff ff ff       	call   c000e914 <GDTEntry::setBase(unsigned int)>
c000e9fd:	68 ff ff ff 00       	push   0xffffff
c000ea02:	53                   	push   ebx
c000ea03:	e8 28 ff ff ff       	call   c000e930 <GDTEntry::setLimit(unsigned int)>
c000ea08:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea0c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea11:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea16:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea1a:	83 c4 20             	add    esp,0x20
c000ea1d:	6a 00                	push   0x0
c000ea1f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea23:	53                   	push   ebx
c000ea24:	e8 eb fe ff ff       	call   c000e914 <GDTEntry::setBase(unsigned int)>
c000ea29:	68 ff ff ff 00       	push   0xffffff
c000ea2e:	53                   	push   ebx
c000ea2f:	e8 fc fe ff ff       	call   c000e930 <GDTEntry::setLimit(unsigned int)>
c000ea34:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea3c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea40:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea44:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea48:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea4d:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea52:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea56:	89 d8                	mov    eax,ebx
c000ea58:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea5c:	80 cc 60             	or     ah,0x60
c000ea5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea63:	83 c4 0c             	add    esp,0xc
c000ea66:	89 f8                	mov    eax,edi
c000ea68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea6c:	80 cc 60             	or     ah,0x60
c000ea6f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea73:	89 c7                	mov    edi,eax
c000ea75:	55                   	push   ebp
c000ea76:	e8 e9 fe ff ff       	call   c000e964 <GDT::addEntry(GDTEntry)>
c000ea7b:	83 c4 0c             	add    esp,0xc
c000ea7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea86:	55                   	push   ebp
c000ea87:	e8 d8 fe ff ff       	call   c000e964 <GDT::addEntry(GDTEntry)>
c000ea8c:	83 c4 0c             	add    esp,0xc
c000ea8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea97:	55                   	push   ebp
c000ea98:	e8 c7 fe ff ff       	call   c000e964 <GDT::addEntry(GDTEntry)>
c000ea9d:	83 c4 0c             	add    esp,0xc
c000eaa0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaa4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eaa8:	53                   	push   ebx
c000eaa9:	51                   	push   ecx
c000eaaa:	55                   	push   ebp
c000eaab:	e8 b4 fe ff ff       	call   c000e964 <GDT::addEntry(GDTEntry)>
c000eab0:	83 c4 0c             	add    esp,0xc
c000eab3:	57                   	push   edi
c000eab4:	56                   	push   esi
c000eab5:	55                   	push   ebp
c000eab6:	e8 a9 fe ff ff       	call   c000e964 <GDT::addEntry(GDTEntry)>
c000eabb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eabe:	e8 e5 fe ff ff       	call   c000e9a8 <GDT::flush()>
c000eac3:	83 c4 4c             	add    esp,0x4c
c000eac6:	5b                   	pop    ebx
c000eac7:	5e                   	pop    esi
c000eac8:	5f                   	pop    edi
c000eac9:	5d                   	pop    ebp
c000eaca:	c3                   	ret    

c000eacb <idleFunction(void*)>:
c000eacb:	53                   	push   ebx
c000eacc:	83 ec 08             	sub    esp,0x8
c000eacf:	e8 66 ce 00 00       	call   c001b93a <unlockScheduler()>
c000ead4:	e8 89 8d 00 00       	call   c0017862 <CPU::current()>
c000ead9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eae0:	74 41                	je     c000eb23 <idleFunction(void*)+0x58>
c000eae2:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c000eae7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eaee:	74 33                	je     c000eb23 <idleFunction(void*)+0x58>
c000eaf0:	31 db                	xor    ebx,ebx
c000eaf2:	52                   	push   edx
c000eaf3:	52                   	push   edx
c000eaf4:	68 e1 00 00 00       	push   0xe1
c000eaf9:	50                   	push   eax
c000eafa:	e8 df fb ff ff       	call   c000e6de <Computer::rdmsr(unsigned int)>
c000eaff:	53                   	push   ebx
c000eb00:	83 e0 02             	and    eax,0x2
c000eb03:	50                   	push   eax
c000eb04:	68 e1 00 00 00       	push   0xe1
c000eb09:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000eb0f:	e8 f6 fb ff ff       	call   c000e70a <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb14:	83 c4 20             	add    esp,0x20
c000eb17:	e8 18 17 ff ff       	call   c0000234 <doTPAUSE>
c000eb1c:	e8 3f 65 01 00       	call   c0025060 <idleCommon()>
c000eb21:	eb f4                	jmp    c000eb17 <idleFunction(void*)+0x4c>
c000eb23:	fb                   	sti    
c000eb24:	f4                   	hlt    
c000eb25:	e8 36 65 01 00       	call   c0025060 <idleCommon()>
c000eb2a:	eb f7                	jmp    c000eb23 <idleFunction(void*)+0x58>

c000eb2c <IDTEntry::IDTEntry(bool)>:
c000eb2c:	83 ec 04             	sub    esp,0x4
c000eb2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb33:	88 04 24             	mov    BYTE PTR [esp],al
c000eb36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb3a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb44:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb4c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb4f:	83 e2 f0             	and    edx,0xfffffff0
c000eb52:	83 ca 0e             	or     edx,0xe
c000eb55:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb5c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb5f:	83 e2 ef             	and    edx,0xffffffef
c000eb62:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb65:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb69:	74 04                	je     c000eb6f <IDTEntry::IDTEntry(bool)+0x43>
c000eb6b:	b2 03                	mov    dl,0x3
c000eb6d:	eb 02                	jmp    c000eb71 <IDTEntry::IDTEntry(bool)+0x45>
c000eb6f:	b2 00                	mov    dl,0x0
c000eb71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb75:	83 e2 03             	and    edx,0x3
c000eb78:	88 d1                	mov    cl,dl
c000eb7a:	c1 e1 05             	shl    ecx,0x5
c000eb7d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb80:	83 e2 9f             	and    edx,0xffffff9f
c000eb83:	09 ca                	or     edx,ecx
c000eb85:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb8c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb8f:	83 ca 80             	or     edx,0xffffff80
c000eb92:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb95:	90                   	nop
c000eb96:	83 c4 04             	add    esp,0x4
c000eb99:	c3                   	ret    

c000eb9a <IDTEntry::setOffset(unsigned int)>:
c000eb9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eba2:	66 89 02             	mov    WORD PTR [edx],ax
c000eba5:	c1 e8 10             	shr    eax,0x10
c000eba8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebac:	c3                   	ret    
c000ebad:	90                   	nop

c000ebae <IDT::IDT()>:
c000ebae:	90                   	nop
c000ebaf:	c3                   	ret    

c000ebb0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	83 c0 30             	add    eax,0x30
c000ebb7:	c3                   	ret    

c000ebb8 <IDT::addEntry(IDTEntry, int)>:
c000ebb8:	53                   	push   ebx
c000ebb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebc9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebcc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebd0:	5b                   	pop    ebx
c000ebd1:	c3                   	ret    

c000ebd2 <IDT::addEntry(int, void (*)(), bool)>:
c000ebd2:	53                   	push   ebx
c000ebd3:	83 ec 10             	sub    esp,0x10
c000ebd6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebdb:	50                   	push   eax
c000ebdc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ebe0:	53                   	push   ebx
c000ebe1:	e8 46 ff ff ff       	call   c000eb2c <IDTEntry::IDTEntry(bool)>
c000ebe6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebea:	53                   	push   ebx
c000ebeb:	e8 aa ff ff ff       	call   c000eb9a <IDTEntry::setOffset(unsigned int)>
c000ebf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebf8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebfc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec00:	e8 b3 ff ff ff       	call   c000ebb8 <IDT::addEntry(IDTEntry, int)>
c000ec05:	83 c4 30             	add    esp,0x30
c000ec08:	5b                   	pop    ebx
c000ec09:	c3                   	ret    

c000ec0a <IDT::flush()>:
c000ec0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec0e:	66 c7 05 18 a4 02 c0 ff 07 	mov    WORD PTR ds:0xc002a418,0x7ff
c000ec17:	a3 1a a4 02 c0       	mov    ds:0xc002a41a,eax
c000ec1c:	0f 01 1d 18 a4 02 c0 	lidtd  ds:0xc002a418
c000ec23:	c3                   	ret    

c000ec24 <IDT::setup()>:
c000ec24:	57                   	push   edi
c000ec25:	56                   	push   esi
c000ec26:	53                   	push   ebx
c000ec27:	83 ec 10             	sub    esp,0x10
c000ec2a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec2e:	6a 00                	push   0x0
c000ec30:	68 37 04 00 c0       	push   0xc0000437
c000ec35:	6a 00                	push   0x0
c000ec37:	53                   	push   ebx
c000ec38:	e8 95 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ec3d:	6a 00                	push   0x0
c000ec3f:	68 47 04 00 c0       	push   0xc0000447
c000ec44:	6a 01                	push   0x1
c000ec46:	53                   	push   ebx
c000ec47:	e8 86 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ec4c:	83 c4 20             	add    esp,0x20
c000ec4f:	6a 00                	push   0x0
c000ec51:	68 51 04 00 c0       	push   0xc0000451
c000ec56:	6a 02                	push   0x2
c000ec58:	53                   	push   ebx
c000ec59:	e8 74 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ec5e:	6a 00                	push   0x0
c000ec60:	68 5b 04 00 c0       	push   0xc000045b
c000ec65:	6a 03                	push   0x3
c000ec67:	53                   	push   ebx
c000ec68:	e8 65 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ec6d:	83 c4 20             	add    esp,0x20
c000ec70:	6a 00                	push   0x0
c000ec72:	68 65 04 00 c0       	push   0xc0000465
c000ec77:	6a 04                	push   0x4
c000ec79:	53                   	push   ebx
c000ec7a:	e8 53 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ec7f:	6a 00                	push   0x0
c000ec81:	68 6f 04 00 c0       	push   0xc000046f
c000ec86:	6a 05                	push   0x5
c000ec88:	53                   	push   ebx
c000ec89:	e8 44 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ec8e:	83 c4 20             	add    esp,0x20
c000ec91:	6a 00                	push   0x0
c000ec93:	68 79 04 00 c0       	push   0xc0000479
c000ec98:	6a 06                	push   0x6
c000ec9a:	53                   	push   ebx
c000ec9b:	e8 32 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000eca0:	6a 00                	push   0x0
c000eca2:	68 83 04 00 c0       	push   0xc0000483
c000eca7:	6a 07                	push   0x7
c000eca9:	53                   	push   ebx
c000ecaa:	e8 23 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ecaf:	83 c4 20             	add    esp,0x20
c000ecb2:	6a 00                	push   0x0
c000ecb4:	68 8d 04 00 c0       	push   0xc000048d
c000ecb9:	6a 08                	push   0x8
c000ecbb:	53                   	push   ebx
c000ecbc:	e8 11 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ecc1:	6a 00                	push   0x0
c000ecc3:	68 95 04 00 c0       	push   0xc0000495
c000ecc8:	6a 09                	push   0x9
c000ecca:	53                   	push   ebx
c000eccb:	e8 02 ff ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ecd0:	83 c4 20             	add    esp,0x20
c000ecd3:	6a 00                	push   0x0
c000ecd5:	68 9f 04 00 c0       	push   0xc000049f
c000ecda:	6a 0a                	push   0xa
c000ecdc:	53                   	push   ebx
c000ecdd:	e8 f0 fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ece2:	6a 00                	push   0x0
c000ece4:	68 a7 04 00 c0       	push   0xc00004a7
c000ece9:	6a 0b                	push   0xb
c000eceb:	53                   	push   ebx
c000ecec:	e8 e1 fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ecf1:	83 c4 20             	add    esp,0x20
c000ecf4:	6a 00                	push   0x0
c000ecf6:	68 af 04 00 c0       	push   0xc00004af
c000ecfb:	6a 0c                	push   0xc
c000ecfd:	53                   	push   ebx
c000ecfe:	e8 cf fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed03:	6a 00                	push   0x0
c000ed05:	68 b7 04 00 c0       	push   0xc00004b7
c000ed0a:	6a 0d                	push   0xd
c000ed0c:	53                   	push   ebx
c000ed0d:	e8 c0 fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed12:	83 c4 20             	add    esp,0x20
c000ed15:	6a 00                	push   0x0
c000ed17:	68 bf 04 00 c0       	push   0xc00004bf
c000ed1c:	6a 0e                	push   0xe
c000ed1e:	53                   	push   ebx
c000ed1f:	e8 ae fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed24:	6a 00                	push   0x0
c000ed26:	68 c7 04 00 c0       	push   0xc00004c7
c000ed2b:	6a 0f                	push   0xf
c000ed2d:	53                   	push   ebx
c000ed2e:	e8 9f fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed33:	83 c4 20             	add    esp,0x20
c000ed36:	6a 00                	push   0x0
c000ed38:	68 d1 04 00 c0       	push   0xc00004d1
c000ed3d:	6a 10                	push   0x10
c000ed3f:	53                   	push   ebx
c000ed40:	e8 8d fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed45:	6a 00                	push   0x0
c000ed47:	68 db 04 00 c0       	push   0xc00004db
c000ed4c:	6a 11                	push   0x11
c000ed4e:	53                   	push   ebx
c000ed4f:	e8 7e fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed54:	83 c4 20             	add    esp,0x20
c000ed57:	6a 00                	push   0x0
c000ed59:	68 e5 04 00 c0       	push   0xc00004e5
c000ed5e:	6a 12                	push   0x12
c000ed60:	53                   	push   ebx
c000ed61:	e8 6c fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed66:	6a 01                	push   0x1
c000ed68:	68 ef 04 00 c0       	push   0xc00004ef
c000ed6d:	6a 60                	push   0x60
c000ed6f:	53                   	push   ebx
c000ed70:	e8 5d fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed75:	83 c4 20             	add    esp,0x20
c000ed78:	6a 00                	push   0x0
c000ed7a:	68 f9 04 00 c0       	push   0xc00004f9
c000ed7f:	6a 20                	push   0x20
c000ed81:	53                   	push   ebx
c000ed82:	e8 4b fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed87:	6a 00                	push   0x0
c000ed89:	68 03 05 00 c0       	push   0xc0000503
c000ed8e:	6a 21                	push   0x21
c000ed90:	53                   	push   ebx
c000ed91:	e8 3c fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ed96:	83 c4 20             	add    esp,0x20
c000ed99:	6a 00                	push   0x0
c000ed9b:	68 0d 05 00 c0       	push   0xc000050d
c000eda0:	6a 22                	push   0x22
c000eda2:	53                   	push   ebx
c000eda3:	e8 2a fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000eda8:	6a 00                	push   0x0
c000edaa:	68 17 05 00 c0       	push   0xc0000517
c000edaf:	6a 23                	push   0x23
c000edb1:	53                   	push   ebx
c000edb2:	e8 1b fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000edb7:	83 c4 20             	add    esp,0x20
c000edba:	6a 00                	push   0x0
c000edbc:	68 21 05 00 c0       	push   0xc0000521
c000edc1:	6a 24                	push   0x24
c000edc3:	53                   	push   ebx
c000edc4:	e8 09 fe ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000edc9:	6a 00                	push   0x0
c000edcb:	68 2b 05 00 c0       	push   0xc000052b
c000edd0:	6a 25                	push   0x25
c000edd2:	53                   	push   ebx
c000edd3:	e8 fa fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000edd8:	83 c4 20             	add    esp,0x20
c000eddb:	6a 00                	push   0x0
c000eddd:	68 35 05 00 c0       	push   0xc0000535
c000ede2:	6a 26                	push   0x26
c000ede4:	53                   	push   ebx
c000ede5:	e8 e8 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000edea:	6a 00                	push   0x0
c000edec:	68 3f 05 00 c0       	push   0xc000053f
c000edf1:	6a 27                	push   0x27
c000edf3:	53                   	push   ebx
c000edf4:	e8 d9 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000edf9:	83 c4 20             	add    esp,0x20
c000edfc:	6a 00                	push   0x0
c000edfe:	68 49 05 00 c0       	push   0xc0000549
c000ee03:	6a 28                	push   0x28
c000ee05:	53                   	push   ebx
c000ee06:	e8 c7 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee0b:	6a 00                	push   0x0
c000ee0d:	68 53 05 00 c0       	push   0xc0000553
c000ee12:	6a 29                	push   0x29
c000ee14:	53                   	push   ebx
c000ee15:	e8 b8 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee1a:	83 c4 20             	add    esp,0x20
c000ee1d:	6a 00                	push   0x0
c000ee1f:	68 5d 05 00 c0       	push   0xc000055d
c000ee24:	6a 2a                	push   0x2a
c000ee26:	53                   	push   ebx
c000ee27:	e8 a6 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee2c:	6a 00                	push   0x0
c000ee2e:	68 67 05 00 c0       	push   0xc0000567
c000ee33:	6a 2b                	push   0x2b
c000ee35:	53                   	push   ebx
c000ee36:	e8 97 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee3b:	83 c4 20             	add    esp,0x20
c000ee3e:	6a 00                	push   0x0
c000ee40:	68 71 05 00 c0       	push   0xc0000571
c000ee45:	6a 2c                	push   0x2c
c000ee47:	53                   	push   ebx
c000ee48:	e8 85 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee4d:	6a 00                	push   0x0
c000ee4f:	68 7b 05 00 c0       	push   0xc000057b
c000ee54:	6a 2d                	push   0x2d
c000ee56:	53                   	push   ebx
c000ee57:	e8 76 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee5c:	83 c4 20             	add    esp,0x20
c000ee5f:	6a 00                	push   0x0
c000ee61:	68 85 05 00 c0       	push   0xc0000585
c000ee66:	6a 2e                	push   0x2e
c000ee68:	53                   	push   ebx
c000ee69:	e8 64 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee6e:	6a 00                	push   0x0
c000ee70:	68 8f 05 00 c0       	push   0xc000058f
c000ee75:	6a 2f                	push   0x2f
c000ee77:	53                   	push   ebx
c000ee78:	e8 55 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee7d:	83 c4 20             	add    esp,0x20
c000ee80:	6a 00                	push   0x0
c000ee82:	68 99 05 00 c0       	push   0xc0000599
c000ee87:	6a 30                	push   0x30
c000ee89:	53                   	push   ebx
c000ee8a:	e8 43 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee8f:	6a 00                	push   0x0
c000ee91:	68 a3 05 00 c0       	push   0xc00005a3
c000ee96:	6a 31                	push   0x31
c000ee98:	53                   	push   ebx
c000ee99:	e8 34 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ee9e:	83 c4 20             	add    esp,0x20
c000eea1:	6a 00                	push   0x0
c000eea3:	68 ad 05 00 c0       	push   0xc00005ad
c000eea8:	6a 32                	push   0x32
c000eeaa:	53                   	push   ebx
c000eeab:	e8 22 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000eeb0:	6a 00                	push   0x0
c000eeb2:	68 b7 05 00 c0       	push   0xc00005b7
c000eeb7:	6a 33                	push   0x33
c000eeb9:	53                   	push   ebx
c000eeba:	e8 13 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000eebf:	83 c4 20             	add    esp,0x20
c000eec2:	6a 00                	push   0x0
c000eec4:	68 c1 05 00 c0       	push   0xc00005c1
c000eec9:	6a 34                	push   0x34
c000eecb:	53                   	push   ebx
c000eecc:	e8 01 fd ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000eed1:	6a 00                	push   0x0
c000eed3:	68 cb 05 00 c0       	push   0xc00005cb
c000eed8:	6a 35                	push   0x35
c000eeda:	53                   	push   ebx
c000eedb:	e8 f2 fc ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000eee0:	83 c4 20             	add    esp,0x20
c000eee3:	6a 00                	push   0x0
c000eee5:	68 d5 05 00 c0       	push   0xc00005d5
c000eeea:	6a 36                	push   0x36
c000eeec:	53                   	push   ebx
c000eeed:	e8 e0 fc ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000eef2:	6a 00                	push   0x0
c000eef4:	68 df 05 00 c0       	push   0xc00005df
c000eef9:	6a 37                	push   0x37
c000eefb:	53                   	push   ebx
c000eefc:	e8 d1 fc ff ff       	call   c000ebd2 <IDT::addEntry(int, void (*)(), bool)>
c000ef01:	83 c4 20             	add    esp,0x20
c000ef04:	e8 fc 24 00 00       	call   c0011405 <Virt::getAKernelVAS()>
c000ef09:	52                   	push   edx
c000ef0a:	6a 03                	push   0x3
c000ef0c:	6a 02                	push   0x2
c000ef0e:	50                   	push   eax
c000ef0f:	e8 34 2b 00 00       	call   c0011a48 <VAS::allocatePages(int, int)>
c000ef14:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef1b:	89 c6                	mov    esi,eax
c000ef1d:	e8 36 32 00 00       	call   c0012158 <operator new(unsigned long)>
c000ef22:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef28:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef2b:	89 c7                	mov    edi,eax
c000ef2d:	e8 c0 1c 00 00       	call   c0010bf2 <TSS::TSS()>
c000ef32:	83 c4 0c             	add    esp,0xc
c000ef35:	68 8d 04 00 c0       	push   0xc000048d
c000ef3a:	56                   	push   esi
c000ef3b:	57                   	push   edi
c000ef3c:	e8 f1 1c 00 00       	call   c0010c32 <TSS::setup(unsigned long, unsigned long)>
c000ef41:	59                   	pop    ecx
c000ef42:	89 c6                	mov    esi,eax
c000ef44:	5f                   	pop    edi
c000ef45:	6a 00                	push   0x0
c000ef47:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef4b:	50                   	push   eax
c000ef4c:	e8 db fb ff ff       	call   c000eb2c <IDTEntry::IDTEntry(bool)>
c000ef51:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef55:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef5a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef61:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef6b:	80 ce 05             	or     dh,0x5
c000ef6e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef79:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef7f:	e8 86 fc ff ff       	call   c000ec0a <IDT::flush()>
c000ef84:	83 c4 20             	add    esp,0x20
c000ef87:	5b                   	pop    ebx
c000ef88:	5e                   	pop    esi
c000ef89:	5f                   	pop    edi
c000ef8a:	c3                   	ret    

c000ef8b <sbrk>:
c000ef8b:	55                   	push   ebp
c000ef8c:	57                   	push   edi
c000ef8d:	56                   	push   esi
c000ef8e:	53                   	push   ebx
c000ef8f:	83 ec 1c             	sub    esp,0x1c
c000ef92:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ef96:	85 db                	test   ebx,ebx
c000ef98:	74 37                	je     c000efd1 <sbrk+0x46>
c000ef9a:	78 3f                	js     c000efdb <sbrk+0x50>
c000ef9c:	e8 c1 88 00 00       	call   c0017862 <CPU::current()>
c000efa1:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efa7:	83 e0 01             	and    eax,0x1
c000efaa:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efae:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c000efb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efb7:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efbd:	89 d8                	mov    eax,ebx
c000efbf:	78 35                	js     c000eff6 <sbrk+0x6b>
c000efc1:	c1 f8 0c             	sar    eax,0xc
c000efc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efc8:	89 c7                	mov    edi,eax
c000efca:	be 00 00 00 00       	mov    esi,0x0
c000efcf:	eb 3c                	jmp    c000f00d <sbrk+0x82>
c000efd1:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c000efd6:	e9 ad 00 00 00       	jmp    c000f088 <sbrk+0xfd>
c000efdb:	83 ec 08             	sub    esp,0x8
c000efde:	53                   	push   ebx
c000efdf:	68 30 6b 02 c0       	push   0xc0026b30
c000efe4:	e8 5e 32 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000efe9:	83 c4 10             	add    esp,0x10
c000efec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eff1:	e9 92 00 00 00       	jmp    c000f088 <sbrk+0xfd>
c000eff6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000effc:	eb c3                	jmp    c000efc1 <sbrk+0x36>
c000effe:	81 05 a0 93 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00293a0,0x1000
c000f008:	46                   	inc    esi
c000f009:	39 f7                	cmp    edi,esi
c000f00b:	74 34                	je     c000f041 <sbrk+0xb6>
c000f00d:	e8 f3 23 00 00       	call   c0011405 <Virt::getAKernelVAS()>
c000f012:	89 c3                	mov    ebx,eax
c000f014:	8b 2d a0 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293a0
c000f01a:	e8 c9 06 00 00       	call   c000f6e8 <Phys::allocatePage()>
c000f01f:	68 01 04 00 00       	push   0x401
c000f024:	55                   	push   ebp
c000f025:	50                   	push   eax
c000f026:	53                   	push   ebx
c000f027:	e8 1c 29 00 00       	call   c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f02c:	83 c4 10             	add    esp,0x10
c000f02f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f034:	74 c8                	je     c000effe <sbrk+0x73>
c000f036:	8b 1d a0 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293a0
c000f03c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f03f:	eb bd                	jmp    c000effe <sbrk+0x73>
c000f041:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f046:	74 48                	je     c000f090 <sbrk+0x105>
c000f048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f04c:	89 d3                	mov    ebx,edx
c000f04e:	c1 eb 0a             	shr    ebx,0xa
c000f051:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f057:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f05d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f061:	c1 e0 0c             	shl    eax,0xc
c000f064:	01 d0                	add    eax,edx
c000f066:	c1 e8 0a             	shr    eax,0xa
c000f069:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f06e:	2d 00 00 40 00       	sub    eax,0x400000
c000f073:	39 c3                	cmp    ebx,eax
c000f075:	77 0d                	ja     c000f084 <sbrk+0xf9>
c000f077:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f07a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f080:	39 d8                	cmp    eax,ebx
c000f082:	73 f3                	jae    c000f077 <sbrk+0xec>
c000f084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f088:	83 c4 1c             	add    esp,0x1c
c000f08b:	5b                   	pop    ebx
c000f08c:	5e                   	pop    esi
c000f08d:	5f                   	pop    edi
c000f08e:	5d                   	pop    ebp
c000f08f:	c3                   	ret    
c000f090:	e8 e0 5f 01 00       	call   c0025075 <CPU::readCR3()>
c000f095:	83 ec 0c             	sub    esp,0xc
c000f098:	50                   	push   eax
c000f099:	e8 e9 5f 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c000f09e:	83 c4 10             	add    esp,0x10
c000f0a1:	eb e1                	jmp    c000f084 <sbrk+0xf9>

c000f0a3 <mmap>:
c000f0a3:	83 ec 18             	sub    esp,0x18
c000f0a6:	68 60 6b 02 c0       	push   0xc0026b60
c000f0ab:	e8 35 99 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000f0b0:	b8 00 00 00 00       	mov    eax,0x0
c000f0b5:	83 c4 1c             	add    esp,0x1c
c000f0b8:	c3                   	ret    

c000f0b9 <munmap>:
c000f0b9:	83 ec 18             	sub    esp,0x18
c000f0bc:	68 65 6b 02 c0       	push   0xc0026b65
c000f0c1:	e8 1f 99 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000f0c6:	b8 00 00 00 00       	mov    eax,0x0
c000f0cb:	83 c4 1c             	add    esp,0x1c
c000f0ce:	c3                   	ret    

c000f0cf <liballoc_lock()>:
c000f0cf:	83 ec 0c             	sub    esp,0xc
c000f0d2:	e8 61 c8 00 00       	call   c001b938 <lockScheduler()>
c000f0d7:	b8 00 00 00 00       	mov    eax,0x0
c000f0dc:	83 c4 0c             	add    esp,0xc
c000f0df:	c3                   	ret    

c000f0e0 <liballoc_unlock()>:
c000f0e0:	83 ec 0c             	sub    esp,0xc
c000f0e3:	e8 52 c8 00 00       	call   c001b93a <unlockScheduler()>
c000f0e8:	b8 00 00 00 00       	mov    eax,0x0
c000f0ed:	83 c4 0c             	add    esp,0xc
c000f0f0:	c3                   	ret    

c000f0f1 <liballoc_alloc(int)>:
c000f0f1:	83 ec 0c             	sub    esp,0xc
c000f0f4:	e8 0c 23 00 00       	call   c0011405 <Virt::getAKernelVAS()>
c000f0f9:	83 ec 04             	sub    esp,0x4
c000f0fc:	6a 01                	push   0x1
c000f0fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f102:	50                   	push   eax
c000f103:	e8 40 29 00 00       	call   c0011a48 <VAS::allocatePages(int, int)>
c000f108:	83 c4 1c             	add    esp,0x1c
c000f10b:	c3                   	ret    

c000f10c <liballoc_free(void*, int)>:
c000f10c:	83 ec 0c             	sub    esp,0xc
c000f10f:	e8 f1 22 00 00       	call   c0011405 <Virt::getAKernelVAS()>
c000f114:	83 ec 08             	sub    esp,0x8
c000f117:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f11b:	50                   	push   eax
c000f11c:	e8 d1 25 00 00       	call   c00116f2 <VAS::freeAllocatedPages(unsigned long)>
c000f121:	b8 00 00 00 00       	mov    eax,0x0
c000f126:	83 c4 1c             	add    esp,0x1c
c000f129:	c3                   	ret    

c000f12a <realloc>:
c000f12a:	83 ec 14             	sub    esp,0x14
c000f12d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f135:	e8 04 23 ff ff       	call   c000143e <dlrealloc>
c000f13a:	83 c4 1c             	add    esp,0x1c
c000f13d:	c3                   	ret    

c000f13e <malloc>:
c000f13e:	83 ec 18             	sub    esp,0x18
c000f141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f145:	e8 b7 1d ff ff       	call   c0000f01 <dlmalloc>
c000f14a:	83 c4 1c             	add    esp,0x1c
c000f14d:	c3                   	ret    

c000f14e <free>:
c000f14e:	83 ec 18             	sub    esp,0x18
c000f151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f155:	e8 4c 1a ff ff       	call   c0000ba6 <dlfree>
c000f15a:	83 c4 1c             	add    esp,0x1c
c000f15d:	c3                   	ret    

c000f15e <rfree>:
c000f15e:	83 ec 18             	sub    esp,0x18
c000f161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f165:	e8 e4 ff ff ff       	call   c000f14e <free>
c000f16a:	83 c4 1c             	add    esp,0x1c
c000f16d:	c3                   	ret    

c000f16e <calloc>:
c000f16e:	56                   	push   esi
c000f16f:	53                   	push   ebx
c000f170:	83 ec 10             	sub    esp,0x10
c000f173:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f177:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f17c:	53                   	push   ebx
c000f17d:	e8 bc ff ff ff       	call   c000f13e <malloc>
c000f182:	89 c6                	mov    esi,eax
c000f184:	83 c4 0c             	add    esp,0xc
c000f187:	53                   	push   ebx
c000f188:	6a 00                	push   0x0
c000f18a:	50                   	push   eax
c000f18b:	e8 35 15 ff ff       	call   c00006c5 <memset>
c000f190:	89 f0                	mov    eax,esi
c000f192:	83 c4 14             	add    esp,0x14
c000f195:	5b                   	pop    ebx
c000f196:	5e                   	pop    esi
c000f197:	c3                   	ret    

c000f198 <hwTextMode_loadInData(VgaText*)>:
c000f198:	57                   	push   edi
c000f199:	56                   	push   esi
c000f19a:	53                   	push   ebx
c000f19b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f19f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1a5:	85 c0                	test   eax,eax
c000f1a7:	7e 30                	jle    c000f1d9 <hwTextMode_loadInData(VgaText*)+0x41>
c000f1a9:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1ac:	31 f6                	xor    esi,esi
c000f1ae:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1b1:	31 c0                	xor    eax,eax
c000f1b3:	c1 e1 05             	shl    ecx,0x5
c000f1b6:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1bc:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1c0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1c4:	40                   	inc    eax
c000f1c5:	83 f8 50             	cmp    eax,0x50
c000f1c8:	75 f2                	jne    c000f1bc <hwTextMode_loadInData(VgaText*)+0x24>
c000f1ca:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1d0:	46                   	inc    esi
c000f1d1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1d7:	7f d5                	jg     c000f1ae <hwTextMode_loadInData(VgaText*)+0x16>
c000f1d9:	5b                   	pop    ebx
c000f1da:	5e                   	pop    esi
c000f1db:	5f                   	pop    edi
c000f1dc:	c3                   	ret    

c000f1dd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f1dd:	56                   	push   esi
c000f1de:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f1e3:	53                   	push   ebx
c000f1e4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f1ec:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f1f2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f1f8:	c1 e0 04             	shl    eax,0x4
c000f1fb:	83 e6 0f             	and    esi,0xf
c000f1fe:	0f b6 c0             	movzx  eax,al
c000f201:	41                   	inc    ecx
c000f202:	09 f0                	or     eax,esi
c000f204:	83 c2 02             	add    edx,0x2
c000f207:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f20b:	c1 e0 08             	shl    eax,0x8
c000f20e:	09 f0                	or     eax,esi
c000f210:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f214:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f21a:	75 d0                	jne    c000f1ec <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f21c:	5b                   	pop    ebx
c000f21d:	5e                   	pop    esi
c000f21e:	c3                   	ret    

c000f21f <hwTextMode_showCursor(VgaText*, bool)>:
c000f21f:	56                   	push   esi
c000f220:	53                   	push   ebx
c000f221:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f226:	74 38                	je     c000f260 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f228:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f22d:	b0 0a                	mov    al,0xa
c000f22f:	89 da                	mov    edx,ebx
c000f231:	ee                   	out    dx,al
c000f232:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f237:	89 ca                	mov    edx,ecx
c000f239:	ec                   	in     al,dx
c000f23a:	b2 0f                	mov    dl,0xf
c000f23c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f240:	83 e0 c0             	and    eax,0xffffffc0
c000f243:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f249:	09 d0                	or     eax,edx
c000f24b:	89 ca                	mov    edx,ecx
c000f24d:	ee                   	out    dx,al
c000f24e:	b0 0b                	mov    al,0xb
c000f250:	89 da                	mov    edx,ebx
c000f252:	ee                   	out    dx,al
c000f253:	89 ca                	mov    edx,ecx
c000f255:	ec                   	in     al,dx
c000f256:	83 e0 e0             	and    eax,0xffffffe0
c000f259:	83 c8 0f             	or     eax,0xf
c000f25c:	ee                   	out    dx,al
c000f25d:	5b                   	pop    ebx
c000f25e:	5e                   	pop    esi
c000f25f:	c3                   	ret    
c000f260:	b0 0a                	mov    al,0xa
c000f262:	ba d4 03 00 00       	mov    edx,0x3d4
c000f267:	ee                   	out    dx,al
c000f268:	b0 20                	mov    al,0x20
c000f26a:	ba d5 03 00 00       	mov    edx,0x3d5
c000f26f:	ee                   	out    dx,al
c000f270:	5b                   	pop    ebx
c000f271:	5e                   	pop    esi
c000f272:	c3                   	ret    

c000f273 <hwTextMode_update(VgaText*)>:
c000f273:	c3                   	ret    

c000f274 <hwTextMode_updateCursor(VgaText*)>:
c000f274:	56                   	push   esi
c000f275:	b9 19 00 00 00       	mov    ecx,0x19
c000f27a:	53                   	push   ebx
c000f27b:	be d4 03 00 00       	mov    esi,0x3d4
c000f280:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f284:	89 f2                	mov    edx,esi
c000f286:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f28c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f292:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f295:	c1 e1 04             	shl    ecx,0x4
c000f298:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f29e:	b0 0f                	mov    al,0xf
c000f2a0:	ee                   	out    dx,al
c000f2a1:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2a6:	88 c8                	mov    al,cl
c000f2a8:	89 da                	mov    edx,ebx
c000f2aa:	ee                   	out    dx,al
c000f2ab:	b0 0e                	mov    al,0xe
c000f2ad:	89 f2                	mov    edx,esi
c000f2af:	ee                   	out    dx,al
c000f2b0:	89 c8                	mov    eax,ecx
c000f2b2:	89 da                	mov    edx,ebx
c000f2b4:	66 c1 e8 08          	shr    ax,0x8
c000f2b8:	ee                   	out    dx,al
c000f2b9:	5b                   	pop    ebx
c000f2ba:	5e                   	pop    esi
c000f2bb:	c3                   	ret    

c000f2bc <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2bc:	ba da 03 00 00       	mov    edx,0x3da
c000f2c1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2c6:	75 18                	jne    c000f2e0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2c8:	ec                   	in     al,dx
c000f2c9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2ce:	b0 30                	mov    al,0x30
c000f2d0:	89 ca                	mov    edx,ecx
c000f2d2:	ee                   	out    dx,al
c000f2d3:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2d8:	ec                   	in     al,dx
c000f2d9:	83 c8 08             	or     eax,0x8
c000f2dc:	89 ca                	mov    edx,ecx
c000f2de:	ee                   	out    dx,al
c000f2df:	c3                   	ret    
c000f2e0:	ec                   	in     al,dx
c000f2e1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2e6:	b0 30                	mov    al,0x30
c000f2e8:	89 ca                	mov    edx,ecx
c000f2ea:	ee                   	out    dx,al
c000f2eb:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2f0:	ec                   	in     al,dx
c000f2f1:	83 e0 f7             	and    eax,0xfffffff7
c000f2f4:	89 ca                	mov    edx,ecx
c000f2f6:	ee                   	out    dx,al
c000f2f7:	c3                   	ret    

c000f2f8 <hwTextMode_scrollScreen(VgaText*)>:
c000f2f8:	55                   	push   ebp
c000f2f9:	bd 02 00 00 00       	mov    ebp,0x2
c000f2fe:	57                   	push   edi
c000f2ff:	56                   	push   esi
c000f300:	53                   	push   ebx
c000f301:	83 ec 1c             	sub    esp,0x1c
c000f304:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f30c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f310:	31 c0                	xor    eax,eax
c000f312:	eb 0b                	jmp    c000f31f <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f314:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f31a:	74 57                	je     c000f373 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f31c:	43                   	inc    ebx
c000f31d:	89 f0                	mov    eax,esi
c000f31f:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f325:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f32b:	88 13                	mov    BYTE PTR [ebx],dl
c000f32d:	8d 70 01             	lea    esi,[eax+0x1]
c000f330:	83 fd 18             	cmp    ebp,0x18
c000f333:	75 df                	jne    c000f314 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f335:	a8 01                	test   al,0x1
c000f337:	75 13                	jne    c000f34c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f339:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f33c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f342:	75 d8                	jne    c000f31c <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f344:	83 c4 1c             	add    esp,0x1c
c000f347:	5b                   	pop    ebx
c000f348:	5e                   	pop    esi
c000f349:	5f                   	pop    edi
c000f34a:	5d                   	pop    ebp
c000f34b:	c3                   	ret    
c000f34c:	83 ec 08             	sub    esp,0x8
c000f34f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f353:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f35a:	50                   	push   eax
c000f35b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f35f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f366:	50                   	push   eax
c000f367:	e8 66 0b 00 00       	call   c000fed2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f36c:	83 c4 10             	add    esp,0x10
c000f36f:	88 07                	mov    BYTE PTR [edi],al
c000f371:	eb c9                	jmp    c000f33c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f373:	45                   	inc    ebp
c000f374:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f37c:	eb 8e                	jmp    c000f30c <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f37e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f37e:	56                   	push   esi
c000f37f:	53                   	push   ebx
c000f380:	83 ec 0c             	sub    esp,0xc
c000f383:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f387:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f38b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f390:	50                   	push   eax
c000f391:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f396:	50                   	push   eax
c000f397:	e8 36 0b 00 00       	call   c000fed2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f39c:	5a                   	pop    edx
c000f39d:	0f b6 c0             	movzx  eax,al
c000f3a0:	59                   	pop    ecx
c000f3a1:	50                   	push   eax
c000f3a2:	89 f0                	mov    eax,esi
c000f3a4:	0f be f0             	movsx  esi,al
c000f3a7:	56                   	push   esi
c000f3a8:	e8 cb 0b 00 00       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c000f3ad:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3b1:	ba 19 00 00 00       	mov    edx,0x19
c000f3b6:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3bc:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3bf:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3c2:	c1 e1 04             	shl    ecx,0x4
c000f3c5:	c1 e2 04             	shl    edx,0x4
c000f3c8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3cc:	01 ca                	add    edx,ecx
c000f3ce:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3d6:	83 c4 14             	add    esp,0x14
c000f3d9:	5b                   	pop    ebx
c000f3da:	5e                   	pop    esi
c000f3db:	c3                   	ret    

c000f3dc <setupTextMode()>:
c000f3dc:	c7 05 b8 a4 02 c0 bc f2 00 c0 	mov    DWORD PTR ds:0xc002a4b8,0xc000f2bc
c000f3e6:	c7 05 a4 a4 02 c0 98 f1 00 c0 	mov    DWORD PTR ds:0xc002a4a4,0xc000f198
c000f3f0:	c7 05 a0 a4 02 c0 dd f1 00 c0 	mov    DWORD PTR ds:0xc002a4a0,0xc000f1dd
c000f3fa:	c7 05 ac a4 02 c0 f8 f2 00 c0 	mov    DWORD PTR ds:0xc002a4ac,0xc000f2f8
c000f404:	c7 05 b4 a4 02 c0 1f f2 00 c0 	mov    DWORD PTR ds:0xc002a4b4,0xc000f21f
c000f40e:	c7 05 a8 a4 02 c0 73 f2 00 c0 	mov    DWORD PTR ds:0xc002a4a8,0xc000f273
c000f418:	c7 05 b0 a4 02 c0 74 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b0,0xc000f274
c000f422:	c7 05 bc a4 02 c0 7e f3 00 c0 	mov    DWORD PTR ds:0xc002a4bc,0xc000f37e
c000f42c:	c3                   	ret    

c000f42d <kernel_main>:
c000f42d:	57                   	push   edi
c000f42e:	bf f9 03 00 00       	mov    edi,0x3f9
c000f433:	56                   	push   esi
c000f434:	31 f6                	xor    esi,esi
c000f436:	53                   	push   ebx
c000f437:	83 ec 10             	sub    esp,0x10
c000f43a:	e8 ed 08 00 00       	call   c000fd2c <installVgaTextImplementation()>
c000f43f:	e8 98 ff ff ff       	call   c000f3dc <setupTextMode()>
c000f444:	89 f0                	mov    eax,esi
c000f446:	89 fa                	mov    edx,edi
c000f448:	ee                   	out    dx,al
c000f449:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f44e:	b0 80                	mov    al,0x80
c000f450:	89 da                	mov    edx,ebx
c000f452:	ee                   	out    dx,al
c000f453:	b1 03                	mov    cl,0x3
c000f455:	ba f8 03 00 00       	mov    edx,0x3f8
c000f45a:	88 c8                	mov    al,cl
c000f45c:	ee                   	out    dx,al
c000f45d:	89 f0                	mov    eax,esi
c000f45f:	89 fa                	mov    edx,edi
c000f461:	ee                   	out    dx,al
c000f462:	88 c8                	mov    al,cl
c000f464:	89 da                	mov    edx,ebx
c000f466:	ee                   	out    dx,al
c000f467:	b0 c7                	mov    al,0xc7
c000f469:	ba fa 03 00 00       	mov    edx,0x3fa
c000f46e:	ee                   	out    dx,al
c000f46f:	b0 0b                	mov    al,0xb
c000f471:	ba fc 03 00 00       	mov    edx,0x3fc
c000f476:	ee                   	out    dx,al
c000f477:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f47c:	83 ec 0c             	sub    esp,0xc
c000f47f:	05 ff 0f 00 00       	add    eax,0xfff
c000f484:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f489:	50                   	push   eax
c000f48a:	e8 59 03 00 00       	call   c000f7e8 <Phys::physicalMemorySetup(unsigned int)>
c000f48f:	e8 f2 1e 00 00       	call   c0011386 <Virt::virtualMemorySetup()>
c000f494:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f49a:	83 c4 10             	add    esp,0x10
c000f49d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4a3:	75 0e                	jne    c000f4b3 <kernel_main+0x86>
c000f4a5:	89 d8                	mov    eax,ebx
c000f4a7:	25 48 03 00 00       	and    eax,0x348
c000f4ac:	3d 00 03 00 00       	cmp    eax,0x300
c000f4b1:	74 10                	je     c000f4c3 <kernel_main+0x96>
c000f4b3:	83 ec 0c             	sub    esp,0xc
c000f4b6:	68 7f 80 02 c0       	push   0xc002807f
c000f4bb:	e8 25 95 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	83 ec 0c             	sub    esp,0xc
c000f4c6:	89 1d 20 a4 02 c0    	mov    DWORD PTR ds:0xc002a420,ebx
c000f4cc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4d0:	53                   	push   ebx
c000f4d1:	e8 5a 20 00 00       	call   c0011530 <VAS::VAS()>
c000f4d6:	89 1d 64 a5 02 c0    	mov    DWORD PTR ds:0xc002a564,ebx
c000f4dc:	e8 3f 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f4e1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f4e8:	e8 6b 2c 00 00       	call   c0012158 <operator new(unsigned long)>
c000f4ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4f0:	89 c6                	mov    esi,eax
c000f4f2:	e8 7f ea ff ff       	call   c000df76 <Computer::Computer()>
c000f4f7:	6a 00                	push   0x0
c000f4f9:	89 35 08 a4 02 c0    	mov    DWORD PTR ds:0xc002a408,esi
c000f4ff:	6a 00                	push   0x0
c000f501:	6a 00                	push   0x0
c000f503:	56                   	push   esi
c000f504:	e8 77 f2 ff ff       	call   c000e780 <Computer::open(int, int, void*)>
c000f509:	83 c4 14             	add    esp,0x14
c000f50c:	53                   	push   ebx
c000f50d:	e8 ca 22 00 00       	call   c00117dc <VAS::~VAS()>
c000f512:	c7 04 24 6c 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b6c
c000f519:	e8 c7 94 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000f51e:	83 c4 20             	add    esp,0x20
c000f521:	5b                   	pop    ebx
c000f522:	5e                   	pop    esi
c000f523:	5f                   	pop    edi
c000f524:	c3                   	ret    

c000f525 <Phys::allocateDMA(unsigned long)>:
c000f525:	55                   	push   ebp
c000f526:	31 d2                	xor    edx,edx
c000f528:	57                   	push   edi
c000f529:	31 ed                	xor    ebp,ebp
c000f52b:	56                   	push   esi
c000f52c:	31 c9                	xor    ecx,ecx
c000f52e:	53                   	push   ebx
c000f52f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f533:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f539:	31 c0                	xor    eax,eax
c000f53b:	c1 ee 0c             	shr    esi,0xc
c000f53e:	eb 17                	jmp    c000f557 <Phys::allocateDMA(unsigned long)+0x32>
c000f540:	85 c9                	test   ecx,ecx
c000f542:	75 04                	jne    c000f548 <Phys::allocateDMA(unsigned long)+0x23>
c000f544:	89 d5                	mov    ebp,edx
c000f546:	89 d0                	mov    eax,edx
c000f548:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f54b:	39 de                	cmp    esi,ebx
c000f54d:	74 20                	je     c000f56f <Phys::allocateDMA(unsigned long)+0x4a>
c000f54f:	42                   	inc    edx
c000f550:	89 d9                	mov    ecx,ebx
c000f552:	83 fa 2f             	cmp    edx,0x2f
c000f555:	7f 11                	jg     c000f568 <Phys::allocateDMA(unsigned long)+0x43>
c000f557:	80 ba 60 a4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5ba0],0x0
c000f55e:	74 e0                	je     c000f540 <Phys::allocateDMA(unsigned long)+0x1b>
c000f560:	31 c9                	xor    ecx,ecx
c000f562:	42                   	inc    edx
c000f563:	83 fa 2f             	cmp    edx,0x2f
c000f566:	7e ef                	jle    c000f557 <Phys::allocateDMA(unsigned long)+0x32>
c000f568:	5b                   	pop    ebx
c000f569:	31 c0                	xor    eax,eax
c000f56b:	5e                   	pop    esi
c000f56c:	5f                   	pop    edi
c000f56d:	5d                   	pop    ebp
c000f56e:	c3                   	ret    
c000f56f:	8d 14 30             	lea    edx,[eax+esi*1]
c000f572:	89 d7                	mov    edi,edx
c000f574:	4f                   	dec    edi
c000f575:	79 03                	jns    c000f57a <Phys::allocateDMA(unsigned long)+0x55>
c000f577:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f57a:	c1 ff 04             	sar    edi,0x4
c000f57d:	89 c2                	mov    edx,eax
c000f57f:	c1 fa 04             	sar    edx,0x4
c000f582:	39 fa                	cmp    edx,edi
c000f584:	75 2f                	jne    c000f5b5 <Phys::allocateDMA(unsigned long)+0x90>
c000f586:	85 db                	test   ebx,ebx
c000f588:	74 1a                	je     c000f5a4 <Phys::allocateDMA(unsigned long)+0x7f>
c000f58a:	be 60 a4 02 c0       	mov    esi,0xc002a460
c000f58f:	8d 90 60 a4 02 c0    	lea    edx,[eax-0x3ffd5ba0]
c000f595:	f7 d6                	not    esi
c000f597:	29 c6                	sub    esi,eax
c000f599:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f59c:	42                   	inc    edx
c000f59d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5a0:	39 d9                	cmp    ecx,ebx
c000f5a2:	7f f5                	jg     c000f599 <Phys::allocateDMA(unsigned long)+0x74>
c000f5a4:	85 ff                	test   edi,edi
c000f5a6:	74 13                	je     c000f5bb <Phys::allocateDMA(unsigned long)+0x96>
c000f5a8:	5b                   	pop    ebx
c000f5a9:	05 50 20 0c 00       	add    eax,0xc2050
c000f5ae:	5e                   	pop    esi
c000f5af:	c1 e0 0c             	shl    eax,0xc
c000f5b2:	5f                   	pop    edi
c000f5b3:	5d                   	pop    ebp
c000f5b4:	c3                   	ret    
c000f5b5:	89 ea                	mov    edx,ebp
c000f5b7:	31 c9                	xor    ecx,ecx
c000f5b9:	eb a7                	jmp    c000f562 <Phys::allocateDMA(unsigned long)+0x3d>
c000f5bb:	5b                   	pop    ebx
c000f5bc:	c1 e0 0c             	shl    eax,0xc
c000f5bf:	5e                   	pop    esi
c000f5c0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5c5:	5f                   	pop    edi
c000f5c6:	5d                   	pop    ebp
c000f5c7:	c3                   	ret    

c000f5c8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5d0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5d6:	c1 e9 0c             	shr    ecx,0xc
c000f5d9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f5de:	76 25                	jbe    c000f605 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f5e0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f5e5:	c1 e8 0c             	shr    eax,0xc
c000f5e8:	8d 50 10             	lea    edx,[eax+0x10]
c000f5eb:	85 c9                	test   ecx,ecx
c000f5ed:	74 15                	je     c000f604 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f5ef:	8d 82 60 a4 02 c0    	lea    eax,[edx-0x3ffd5ba0]
c000f5f5:	8d 94 11 60 a4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5ba0]
c000f5fc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f5ff:	40                   	inc    eax
c000f600:	39 d0                	cmp    eax,edx
c000f602:	75 f8                	jne    c000f5fc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f604:	c3                   	ret    
c000f605:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f60b:	c1 ea 0c             	shr    edx,0xc
c000f60e:	eb db                	jmp    c000f5eb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f610 <Phys::setPageState(unsigned long, bool)>:
c000f610:	56                   	push   esi
c000f611:	ba 01 00 00 00       	mov    edx,0x1
c000f616:	53                   	push   ebx
c000f617:	8b 35 a4 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293a4
c000f61d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f621:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f625:	89 c8                	mov    eax,ecx
c000f627:	83 e1 07             	and    ecx,0x7
c000f62a:	c1 e8 03             	shr    eax,0x3
c000f62d:	d3 e3                	shl    ebx,cl
c000f62f:	01 c6                	add    esi,eax
c000f631:	d3 e2                	shl    edx,cl
c000f633:	f7 d2                	not    edx
c000f635:	20 16                	and    BYTE PTR [esi],dl
c000f637:	03 05 a4 93 02 c0    	add    eax,DWORD PTR ds:0xc00293a4
c000f63d:	08 18                	or     BYTE PTR [eax],bl
c000f63f:	5b                   	pop    ebx
c000f640:	5e                   	pop    esi
c000f641:	c3                   	ret    

c000f642 <Phys::getPageState(unsigned long)>:
c000f642:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f646:	8b 15 a4 93 02 c0    	mov    edx,DWORD PTR ds:0xc00293a4
c000f64c:	89 c8                	mov    eax,ecx
c000f64e:	83 e1 07             	and    ecx,0x7
c000f651:	c1 e8 03             	shr    eax,0x3
c000f654:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f658:	d3 f8                	sar    eax,cl
c000f65a:	83 e0 01             	and    eax,0x1
c000f65d:	c3                   	ret    

c000f65e <Phys::freePage(unsigned long)>:
c000f65e:	53                   	push   ebx
c000f65f:	83 ec 08             	sub    esp,0x8
c000f662:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f666:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f66c:	76 57                	jbe    c000f6c5 <Phys::freePage(unsigned long)+0x67>
c000f66e:	c1 eb 0c             	shr    ebx,0xc
c000f671:	53                   	push   ebx
c000f672:	e8 cb ff ff ff       	call   c000f642 <Phys::getPageState(unsigned long)>
c000f677:	5a                   	pop    edx
c000f678:	84 c0                	test   al,al
c000f67a:	74 5b                	je     c000f6d7 <Phys::freePage(unsigned long)+0x79>
c000f67c:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f681:	48                   	dec    eax
c000f682:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f687:	8d 04 80             	lea    eax,[eax+eax*4]
c000f68a:	8d 04 80             	lea    eax,[eax+eax*4]
c000f68d:	c1 e0 02             	shl    eax,0x2
c000f690:	99                   	cdq    
c000f691:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f697:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f69d:	75 13                	jne    c000f6b2 <Phys::freePage(unsigned long)+0x54>
c000f69f:	83 ec 08             	sub    esp,0x8
c000f6a2:	6a 00                	push   0x0
c000f6a4:	53                   	push   ebx
c000f6a5:	e8 66 ff ff ff       	call   c000f610 <Phys::setPageState(unsigned long, bool)>
c000f6aa:	83 c4 10             	add    esp,0x10
c000f6ad:	83 c4 08             	add    esp,0x8
c000f6b0:	5b                   	pop    ebx
c000f6b1:	c3                   	ret    
c000f6b2:	83 ec 0c             	sub    esp,0xc
c000f6b5:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f6ba:	50                   	push   eax
c000f6bb:	e8 00 0a 00 00       	call   c00100c0 <VgaText::updateRAMUsageDisplay(int)>
c000f6c0:	83 c4 10             	add    esp,0x10
c000f6c3:	eb da                	jmp    c000f69f <Phys::freePage(unsigned long)+0x41>
c000f6c5:	68 00 10 00 00       	push   0x1000
c000f6ca:	53                   	push   ebx
c000f6cb:	e8 f8 fe ff ff       	call   c000f5c8 <Phys::freeDMA(unsigned long, unsigned long)>
c000f6d0:	59                   	pop    ecx
c000f6d1:	5b                   	pop    ebx
c000f6d2:	83 c4 08             	add    esp,0x8
c000f6d5:	5b                   	pop    ebx
c000f6d6:	c3                   	ret    
c000f6d7:	c7 44 24 10 87 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026b87
c000f6df:	83 c4 08             	add    esp,0x8
c000f6e2:	5b                   	pop    ebx
c000f6e3:	e9 fd 92 00 00       	jmp    c00189e5 <Krnl::panic(char const*)>

c000f6e8 <Phys::allocatePage()>:
c000f6e8:	56                   	push   esi
c000f6e9:	53                   	push   ebx
c000f6ea:	51                   	push   ecx
c000f6eb:	8b 35 40 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a440
c000f6f1:	89 f3                	mov    ebx,esi
c000f6f3:	eb 0a                	jmp    c000f6ff <Phys::allocatePage()+0x17>
c000f6f5:	89 1d 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,ebx
c000f6fb:	39 de                	cmp    esi,ebx
c000f6fd:	74 24                	je     c000f723 <Phys::allocatePage()+0x3b>
c000f6ff:	53                   	push   ebx
c000f700:	e8 3d ff ff ff       	call   c000f642 <Phys::getPageState(unsigned long)>
c000f705:	5a                   	pop    edx
c000f706:	84 c0                	test   al,al
c000f708:	74 5a                	je     c000f764 <Phys::allocatePage()+0x7c>
c000f70a:	43                   	inc    ebx
c000f70b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f711:	75 e2                	jne    c000f6f5 <Phys::allocatePage()+0xd>
c000f713:	31 db                	xor    ebx,ebx
c000f715:	c7 05 40 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a440,0x0
c000f71f:	39 de                	cmp    esi,ebx
c000f721:	75 dc                	jne    c000f6ff <Phys::allocatePage()+0x17>
c000f723:	83 ec 0c             	sub    esp,0xc
c000f726:	68 9d 6b 02 c0       	push   0xc0026b9d
c000f72b:	e8 17 2b 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000f730:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f737:	e8 e9 fd ff ff       	call   c000f525 <Phys::allocateDMA(unsigned long)>
c000f73c:	83 c4 10             	add    esp,0x10
c000f73f:	85 c0                	test   eax,eax
c000f741:	75 56                	jne    c000f799 <Phys::allocatePage()+0xb1>
c000f743:	83 ec 0c             	sub    esp,0xc
c000f746:	68 ae 6b 02 c0       	push   0xc0026bae
c000f74b:	e8 95 92 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000f750:	83 c4 10             	add    esp,0x10
c000f753:	8b 1d 40 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a440
c000f759:	53                   	push   ebx
c000f75a:	e8 e3 fe ff ff       	call   c000f642 <Phys::getPageState(unsigned long)>
c000f75f:	5a                   	pop    edx
c000f760:	84 c0                	test   al,al
c000f762:	75 a6                	jne    c000f70a <Phys::allocatePage()+0x22>
c000f764:	6a 01                	push   0x1
c000f766:	53                   	push   ebx
c000f767:	e8 a4 fe ff ff       	call   c000f610 <Phys::setPageState(unsigned long, bool)>
c000f76c:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f771:	59                   	pop    ecx
c000f772:	40                   	inc    eax
c000f773:	5b                   	pop    ebx
c000f774:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f779:	8d 04 80             	lea    eax,[eax+eax*4]
c000f77c:	8d 04 80             	lea    eax,[eax+eax*4]
c000f77f:	c1 e0 02             	shl    eax,0x2
c000f782:	99                   	cdq    
c000f783:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f789:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f78f:	75 0c                	jne    c000f79d <Phys::allocatePage()+0xb5>
c000f791:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c000f796:	c1 e0 0c             	shl    eax,0xc
c000f799:	5a                   	pop    edx
c000f79a:	5b                   	pop    ebx
c000f79b:	5e                   	pop    esi
c000f79c:	c3                   	ret    
c000f79d:	83 ec 0c             	sub    esp,0xc
c000f7a0:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f7a5:	50                   	push   eax
c000f7a6:	e8 15 09 00 00       	call   c00100c0 <VgaText::updateRAMUsageDisplay(int)>
c000f7ab:	83 c4 10             	add    esp,0x10
c000f7ae:	eb e1                	jmp    c000f791 <Phys::allocatePage()+0xa9>

c000f7b0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7b0:	56                   	push   esi
c000f7b1:	53                   	push   ebx
c000f7b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7b6:	39 1d 44 a4 02 c0    	cmp    DWORD PTR ds:0xc002a444,ebx
c000f7bc:	73 06                	jae    c000f7c4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7be:	89 1d 44 a4 02 c0    	mov    DWORD PTR ds:0xc002a444,ebx
c000f7c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7c8:	c1 eb 0c             	shr    ebx,0xc
c000f7cb:	c1 e8 0c             	shr    eax,0xc
c000f7ce:	39 d8                	cmp    eax,ebx
c000f7d0:	73 13                	jae    c000f7e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7d2:	6a 00                	push   0x0
c000f7d4:	8d 70 01             	lea    esi,[eax+0x1]
c000f7d7:	50                   	push   eax
c000f7d8:	e8 33 fe ff ff       	call   c000f610 <Phys::setPageState(unsigned long, bool)>
c000f7dd:	5a                   	pop    edx
c000f7de:	89 f0                	mov    eax,esi
c000f7e0:	59                   	pop    ecx
c000f7e1:	39 f3                	cmp    ebx,esi
c000f7e3:	75 ed                	jne    c000f7d2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f7e5:	5b                   	pop    ebx
c000f7e6:	5e                   	pop    esi
c000f7e7:	c3                   	ret    

c000f7e8 <Phys::physicalMemorySetup(unsigned int)>:
c000f7e8:	55                   	push   ebp
c000f7e9:	57                   	push   edi
c000f7ea:	56                   	push   esi
c000f7eb:	53                   	push   ebx
c000f7ec:	31 db                	xor    ebx,ebx
c000f7ee:	83 ec 40             	sub    esp,0x40
c000f7f1:	6a 30                	push   0x30
c000f7f3:	6a 00                	push   0x0
c000f7f5:	68 60 a4 02 c0       	push   0xc002a460
c000f7fa:	e8 c6 0e ff ff       	call   c00006c5 <memset>
c000f7ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f803:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f808:	05 00 10 00 00       	add    eax,0x1000
c000f80d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f811:	83 c4 10             	add    esp,0x10
c000f814:	83 ec 08             	sub    esp,0x8
c000f817:	6a 01                	push   0x1
c000f819:	53                   	push   ebx
c000f81a:	43                   	inc    ebx
c000f81b:	e8 f0 fd ff ff       	call   c000f610 <Phys::setPageState(unsigned long, bool)>
c000f820:	83 c4 10             	add    esp,0x10
c000f823:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f829:	75 e9                	jne    c000f814 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f82b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f832:	66 85 c0             	test   ax,ax
c000f835:	0f 84 8e 01 00 00    	je     c000f9c9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f83b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f83f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f847:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f84b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f850:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f854:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f85c:	eb 15                	jmp    c000f873 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f85e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f862:	83 c3 18             	add    ebx,0x18
c000f865:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f869:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f86d:	0f 84 66 01 00 00    	je     c000f9d9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f873:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f876:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f879:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f87c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f880:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f884:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f886:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f889:	01 f0                	add    eax,esi
c000f88b:	55                   	push   ebp
c000f88c:	11 fa                	adc    edx,edi
c000f88e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f892:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f896:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f89a:	56                   	push   esi
c000f89b:	68 e8 6b 02 c0       	push   0xc0026be8
c000f8a0:	e8 a2 29 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000f8a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8a9:	83 c4 10             	add    esp,0x10
c000f8ac:	09 f8                	or     eax,edi
c000f8ae:	0f 85 25 01 00 00    	jne    c000f9d9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8b4:	4d                   	dec    ebp
c000f8b5:	75 a7                	jne    c000f85e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8b7:	ba 00 00 08 00       	mov    edx,0x80000
c000f8bc:	89 c1                	mov    ecx,eax
c000f8be:	39 f2                	cmp    edx,esi
c000f8c0:	19 f9                	sbb    ecx,edi
c000f8c2:	0f 82 a7 00 00 00    	jb     c000f96f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8c8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8cc:	89 c1                	mov    ecx,eax
c000f8ce:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8d2:	0f 83 97 00 00 00    	jae    c000f96f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8d8:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8dd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8e1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8e5:	39 fa                	cmp    edx,edi
c000f8e7:	19 e8                	sbb    eax,ebp
c000f8e9:	0f 82 14 01 00 00    	jb     c000fa03 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f8ef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8f3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8f7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f8fd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f902:	83 d5 ff             	adc    ebp,0xffffffff
c000f905:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f909:	31 c0                	xor    eax,eax
c000f90b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f90f:	39 fa                	cmp    edx,edi
c000f911:	89 c1                	mov    ecx,eax
c000f913:	19 e9                	sbb    ecx,ebp
c000f915:	0f 83 43 ff ff ff    	jae    c000f85e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f91b:	be 00 00 08 00       	mov    esi,0x80000
c000f920:	50                   	push   eax
c000f921:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f925:	57                   	push   edi
c000f926:	56                   	push   esi
c000f927:	68 0c 6c 02 c0       	push   0xc0026c0c
c000f92c:	e8 16 29 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000f931:	5a                   	pop    edx
c000f932:	59                   	pop    ecx
c000f933:	57                   	push   edi
c000f934:	56                   	push   esi
c000f935:	e8 76 fe ff ff       	call   c000f7b0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f93a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f93e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f942:	83 c4 0c             	add    esp,0xc
c000f945:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f949:	03 05 50 a4 02 c0    	add    eax,DWORD PTR ds:0xc002a450
c000f94f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f956:	a3 50 a4 02 c0       	mov    ds:0xc002a450,eax
c000f95b:	52                   	push   edx
c000f95c:	50                   	push   eax
c000f95d:	68 ca 6b 02 c0       	push   0xc0026bca
c000f962:	e8 e0 28 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c000f967:	83 c4 10             	add    esp,0x10
c000f96a:	e9 ef fe ff ff       	jmp    c000f85e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f96f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f973:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f977:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f97b:	39 ea                	cmp    edx,ebp
c000f97d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f981:	0f 82 d7 fe ff ff    	jb     c000f85e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f987:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f98c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f990:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f994:	0f 83 c4 fe ff ff    	jae    c000f85e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f99a:	39 ee                	cmp    esi,ebp
c000f99c:	89 f8                	mov    eax,edi
c000f99e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9a2:	0f 83 78 ff ff ff    	jae    c000f920 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9b0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9b4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9b8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9c4:	e9 57 ff ff ff       	jmp    c000f920 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9c9:	83 ec 0c             	sub    esp,0xc
c000f9cc:	68 bc 6b 02 c0       	push   0xc0026bbc
c000f9d1:	e8 0f 90 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000f9d6:	83 c4 10             	add    esp,0x10
c000f9d9:	bb 40 01 00 00       	mov    ebx,0x140
c000f9de:	83 ec 08             	sub    esp,0x8
c000f9e1:	6a 00                	push   0x0
c000f9e3:	53                   	push   ebx
c000f9e4:	43                   	inc    ebx
c000f9e5:	e8 26 fc ff ff       	call   c000f610 <Phys::setPageState(unsigned long, bool)>
c000f9ea:	ff 05 50 a4 02 c0    	inc    DWORD PTR ds:0xc002a450
c000f9f0:	83 c4 10             	add    esp,0x10
c000f9f3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000f9f9:	75 e3                	jne    c000f9de <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000f9fb:	83 c4 3c             	add    esp,0x3c
c000f9fe:	5b                   	pop    ebx
c000f9ff:	5e                   	pop    esi
c000fa00:	5f                   	pop    edi
c000fa01:	5d                   	pop    ebp
c000fa02:	c3                   	ret    
c000fa03:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa0b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa13:	e9 d7 fe ff ff       	jmp    c000f8ef <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa18 <Pipe::isAtty()>:
c000fa18:	31 c0                	xor    eax,eax
c000fa1a:	c3                   	ret    
c000fa1b:	90                   	nop

c000fa1c <Pipe::~Pipe()>:
c000fa1c:	83 ec 0c             	sub    esp,0xc
c000fa1f:	ba 78 6c 02 c0       	mov    edx,0xc0026c78
c000fa24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa28:	89 10                	mov    DWORD PTR [eax],edx
c000fa2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2e:	83 ec 0c             	sub    esp,0xc
c000fa31:	50                   	push   eax
c000fa32:	e8 dd 15 00 00       	call   c0011014 <UnixFile::~UnixFile()>
c000fa37:	83 c4 10             	add    esp,0x10
c000fa3a:	90                   	nop
c000fa3b:	83 c4 0c             	add    esp,0xc
c000fa3e:	c3                   	ret    
c000fa3f:	90                   	nop

c000fa40 <Pipe::~Pipe()>:
c000fa40:	83 ec 0c             	sub    esp,0xc
c000fa43:	83 ec 0c             	sub    esp,0xc
c000fa46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa4a:	e8 cd ff ff ff       	call   c000fa1c <Pipe::~Pipe()>
c000fa4f:	83 c4 10             	add    esp,0x10
c000fa52:	83 ec 08             	sub    esp,0x8
c000fa55:	6a 20                	push   0x20
c000fa57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa5b:	e8 07 27 00 00       	call   c0012167 <operator delete(void*, unsigned long)>
c000fa60:	83 c4 10             	add    esp,0x10
c000fa63:	83 c4 0c             	add    esp,0xc
c000fa66:	c3                   	ret    
c000fa67:	90                   	nop

c000fa68 <Pipe::read(unsigned long long, void*, int*)>:
c000fa68:	55                   	push   ebp
c000fa69:	57                   	push   edi
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	83 ec 1c             	sub    esp,0x1c
c000fa6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa73:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa77:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fa7b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fa7e:	89 c8                	mov    eax,ecx
c000fa80:	99                   	cdq    
c000fa81:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fa85:	74 19                	je     c000faa0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa87:	39 f9                	cmp    ecx,edi
c000fa89:	89 d1                	mov    ecx,edx
c000fa8b:	19 f1                	sbb    ecx,esi
c000fa8d:	73 11                	jae    c000faa0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa8f:	e8 a4 be 00 00       	call   c001b938 <lockScheduler()>
c000fa94:	e8 d3 c1 00 00       	call   c001bc6c <schedule()>
c000fa99:	e8 9c be 00 00       	call   c001b93a <unlockScheduler()>
c000fa9e:	eb db                	jmp    c000fa7b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000faa0:	39 f8                	cmp    eax,edi
c000faa2:	89 d1                	mov    ecx,edx
c000faa4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000faa8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000faac:	19 f1                	sbb    ecx,esi
c000faae:	73 08                	jae    c000fab8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fab4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fab8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fabb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fabe:	29 c6                	sub    esi,eax
c000fac0:	89 f1                	mov    ecx,esi
c000fac2:	c1 f9 1f             	sar    ecx,0x1f
c000fac5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fac9:	89 ca                	mov    edx,ecx
c000facb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000facf:	19 d1                	sbb    ecx,edx
c000fad1:	73 04                	jae    c000fad7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fad3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fad7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fadb:	89 fd                	mov    ebp,edi
c000fadd:	29 f5                	sub    ebp,esi
c000fadf:	85 f6                	test   esi,esi
c000fae1:	74 12                	je     c000faf5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fae3:	52                   	push   edx
c000fae4:	56                   	push   esi
c000fae5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fae8:	50                   	push   eax
c000fae9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000faed:	e8 9d 0b ff ff       	call   c000068f <memcpy>
c000faf2:	83 c4 10             	add    esp,0x10
c000faf5:	85 ed                	test   ebp,ebp
c000faf7:	74 12                	je     c000fb0b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000faf9:	50                   	push   eax
c000fafa:	55                   	push   ebp
c000fafb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fafe:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb02:	56                   	push   esi
c000fb03:	e8 87 0b ff ff       	call   c000068f <memcpy>
c000fb08:	83 c4 10             	add    esp,0x10
c000fb0b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb11:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb14:	99                   	cdq    
c000fb15:	89 f7                	mov    edi,esi
c000fb17:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb1b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb1f:	c1 ff 1f             	sar    edi,0x1f
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	52                   	push   edx
c000fb25:	50                   	push   eax
c000fb26:	e8 31 39 01 00       	call   c002345c <__umoddi3>
c000fb2b:	83 c4 10             	add    esp,0x10
c000fb2e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb31:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb36:	75 10                	jne    c000fb48 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb38:	83 ec 0c             	sub    esp,0xc
c000fb3b:	68 35 6c 02 c0       	push   0xc0026c35
c000fb40:	e8 a0 8e 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000fb45:	83 c4 10             	add    esp,0x10
c000fb48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb50:	89 10                	mov    DWORD PTR [eax],edx
c000fb52:	83 c4 1c             	add    esp,0x1c
c000fb55:	31 c0                	xor    eax,eax
c000fb57:	5b                   	pop    ebx
c000fb58:	5e                   	pop    esi
c000fb59:	5f                   	pop    edi
c000fb5a:	5d                   	pop    ebp
c000fb5b:	c3                   	ret    

c000fb5c <Pipe::write(unsigned long long, void*, int*)>:
c000fb5c:	55                   	push   ebp
c000fb5d:	57                   	push   edi
c000fb5e:	56                   	push   esi
c000fb5f:	53                   	push   ebx
c000fb60:	83 ec 1c             	sub    esp,0x1c
c000fb63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb67:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb6b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb6f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb72:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb75:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fb78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb7c:	89 de                	mov    esi,ebx
c000fb7e:	89 df                	mov    edi,ebx
c000fb80:	c1 ff 1f             	sar    edi,0x1f
c000fb83:	01 c6                	add    esi,eax
c000fb85:	89 c8                	mov    eax,ecx
c000fb87:	11 d7                	adc    edi,edx
c000fb89:	99                   	cdq    
c000fb8a:	39 f1                	cmp    ecx,esi
c000fb8c:	89 d0                	mov    eax,edx
c000fb8e:	19 f8                	sbb    eax,edi
c000fb90:	b8 01 00 00 00       	mov    eax,0x1
c000fb95:	0f 82 80 00 00 00    	jb     c000fc1b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fb9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fb9e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fba1:	01 d8                	add    eax,ebx
c000fba3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fba7:	99                   	cdq    
c000fba8:	f7 f9                	idiv   ecx
c000fbaa:	29 d1                	sub    ecx,edx
c000fbac:	89 d7                	mov    edi,edx
c000fbae:	89 c8                	mov    eax,ecx
c000fbb0:	99                   	cdq    
c000fbb1:	39 ce                	cmp    esi,ecx
c000fbb3:	19 d3                	sbb    ebx,edx
c000fbb5:	bb 00 00 00 00       	mov    ebx,0x0
c000fbba:	72 04                	jb     c000fbc0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbbc:	89 f3                	mov    ebx,esi
c000fbbe:	29 cb                	sub    ebx,ecx
c000fbc0:	89 f1                	mov    ecx,esi
c000fbc2:	29 d9                	sub    ecx,ebx
c000fbc4:	74 1a                	je     c000fbe0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbc6:	52                   	push   edx
c000fbc7:	51                   	push   ecx
c000fbc8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbcc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbd0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbd3:	57                   	push   edi
c000fbd4:	e8 b6 0a ff ff       	call   c000068f <memcpy>
c000fbd9:	83 c4 10             	add    esp,0x10
c000fbdc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbe0:	85 db                	test   ebx,ebx
c000fbe2:	74 12                	je     c000fbf6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fbe4:	50                   	push   eax
c000fbe5:	53                   	push   ebx
c000fbe6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fbea:	51                   	push   ecx
c000fbeb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fbee:	e8 9c 0a ff ff       	call   c000068f <memcpy>
c000fbf3:	83 c4 10             	add    esp,0x10
c000fbf6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fbf9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fbfe:	75 10                	jne    c000fc10 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc00:	83 ec 0c             	sub    esp,0xc
c000fc03:	68 51 6c 02 c0       	push   0xc0026c51
c000fc08:	e8 d8 8d 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c000fc0d:	83 c4 10             	add    esp,0x10
c000fc10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc17:	89 38                	mov    DWORD PTR [eax],edi
c000fc19:	31 c0                	xor    eax,eax
c000fc1b:	83 c4 1c             	add    esp,0x1c
c000fc1e:	5b                   	pop    ebx
c000fc1f:	5e                   	pop    esi
c000fc20:	5f                   	pop    edi
c000fc21:	5d                   	pop    ebp
c000fc22:	c3                   	ret    
c000fc23:	90                   	nop

c000fc24 <Pipe::Pipe(int)>:
c000fc24:	83 ec 0c             	sub    esp,0xc
c000fc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2b:	83 ec 08             	sub    esp,0x8
c000fc2e:	6a 00                	push   0x0
c000fc30:	50                   	push   eax
c000fc31:	e8 3c 12 00 00       	call   c0010e72 <UnixFile::UnixFile(int)>
c000fc36:	83 c4 10             	add    esp,0x10
c000fc39:	ba 78 6c 02 c0       	mov    edx,0xc0026c78
c000fc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc42:	89 10                	mov    DWORD PTR [eax],edx
c000fc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc53:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc69:	83 ec 0c             	sub    esp,0xc
c000fc6c:	50                   	push   eax
c000fc6d:	e8 cc f4 ff ff       	call   c000f13e <malloc>
c000fc72:	83 c4 10             	add    esp,0x10
c000fc75:	89 c2                	mov    edx,eax
c000fc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc7b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc82:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fc86:	90                   	nop
c000fc87:	83 c4 0c             	add    esp,0xc
c000fc8a:	c3                   	ret    
c000fc8b:	90                   	nop

c000fc8c <VgaText::isAtty()>:
c000fc8c:	b0 01                	mov    al,0x1
c000fc8e:	c3                   	ret    
c000fc8f:	90                   	nop

c000fc90 <VgaText::~VgaText()>:
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	ba 34 6d 02 c0       	mov    edx,0xc0026d34
c000fc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc9c:	89 10                	mov    DWORD PTR [eax],edx
c000fc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca2:	83 ec 0c             	sub    esp,0xc
c000fca5:	50                   	push   eax
c000fca6:	e8 69 13 00 00       	call   c0011014 <UnixFile::~UnixFile()>
c000fcab:	83 c4 10             	add    esp,0x10
c000fcae:	90                   	nop
c000fcaf:	83 c4 0c             	add    esp,0xc
c000fcb2:	c3                   	ret    
c000fcb3:	90                   	nop

c000fcb4 <VgaText::~VgaText()>:
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	83 ec 0c             	sub    esp,0xc
c000fcba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcbe:	e8 cd ff ff ff       	call   c000fc90 <VgaText::~VgaText()>
c000fcc3:	83 c4 10             	add    esp,0x10
c000fcc6:	83 ec 08             	sub    esp,0x8
c000fcc9:	68 60 12 00 00       	push   0x1260
c000fcce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcd2:	e8 90 24 00 00       	call   c0012167 <operator delete(void*, unsigned long)>
c000fcd7:	83 c4 10             	add    esp,0x10
c000fcda:	83 c4 0c             	add    esp,0xc
c000fcdd:	c3                   	ret    

c000fcde <VgaText::read(unsigned long long, void*, int*)>:
c000fcde:	83 ec 10             	sub    esp,0x10
c000fce1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fce5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fced:	e8 26 57 00 00       	call   c0015418 <readKeyboard(VgaText*, char*, unsigned long)>
c000fcf2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fcf6:	89 02                	mov    DWORD PTR [edx],eax
c000fcf8:	31 c0                	xor    eax,eax
c000fcfa:	83 c4 1c             	add    esp,0x1c
c000fcfd:	c3                   	ret    

c000fcfe <setTerminalScrollLock(bool)>:
c000fcfe:	c3                   	ret    

c000fcff <addToTerminalCycle(VgaText*)>:
c000fcff:	8b 15 c0 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4c0
c000fd05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd09:	85 d2                	test   edx,edx
c000fd0b:	75 0c                	jne    c000fd19 <addToTerminalCycle(VgaText*)+0x1a>
c000fd0d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd13:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c000fd18:	c3                   	ret    
c000fd19:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd1f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd25:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd2b:	c3                   	ret    

c000fd2c <installVgaTextImplementation()>:
c000fd2c:	83 ec 10             	sub    esp,0x10
c000fd2f:	6a 20                	push   0x20
c000fd31:	6a 00                	push   0x0
c000fd33:	68 a0 a4 02 c0       	push   0xc002a4a0
c000fd38:	e8 88 09 ff ff       	call   c00006c5 <memset>
c000fd3d:	83 c4 1c             	add    esp,0x1c
c000fd40:	c3                   	ret    

c000fd41 <scrollTerminalScrollLock(int)>:
c000fd41:	c3                   	ret    

c000fd42 <VgaText::load()>:
c000fd42:	53                   	push   ebx
c000fd43:	31 c0                	xor    eax,eax
c000fd45:	83 ec 58             	sub    esp,0x58
c000fd48:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd4c:	89 e2                	mov    edx,esp
c000fd4e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd52:	40                   	inc    eax
c000fd53:	83 f8 50             	cmp    eax,0x50
c000fd56:	75 f6                	jne    c000fd4e <VgaText::load()+0xc>
c000fd58:	31 c0                	xor    eax,eax
c000fd5a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd61:	84 c9                	test   cl,cl
c000fd63:	74 06                	je     c000fd6b <VgaText::load()+0x29>
c000fd65:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd68:	40                   	inc    eax
c000fd69:	eb ef                	jmp    c000fd5a <VgaText::load()+0x18>
c000fd6b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd71:	85 c0                	test   eax,eax
c000fd73:	74 09                	je     c000fd7e <VgaText::load()+0x3c>
c000fd75:	51                   	push   ecx
c000fd76:	51                   	push   ecx
c000fd77:	52                   	push   edx
c000fd78:	53                   	push   ebx
c000fd79:	ff d0                	call   eax
c000fd7b:	83 c4 10             	add    esp,0x10
c000fd7e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fd84:	85 c0                	test   eax,eax
c000fd86:	74 09                	je     c000fd91 <VgaText::load()+0x4f>
c000fd88:	83 ec 0c             	sub    esp,0xc
c000fd8b:	53                   	push   ebx
c000fd8c:	ff d0                	call   eax
c000fd8e:	83 c4 10             	add    esp,0x10
c000fd91:	83 c4 58             	add    esp,0x58
c000fd94:	5b                   	pop    ebx
c000fd95:	c3                   	ret    

c000fd96 <VgaText::updateCursor()>:
c000fd96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd9a:	39 05 c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,eax
c000fda0:	75 0c                	jne    c000fdae <VgaText::updateCursor()+0x18>
c000fda2:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fda8:	85 c0                	test   eax,eax
c000fdaa:	74 02                	je     c000fdae <VgaText::updateCursor()+0x18>
c000fdac:	ff e0                	jmp    eax
c000fdae:	c3                   	ret    
c000fdaf:	90                   	nop

c000fdb0 <VgaText::showCursor(bool)>:
c000fdb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdb8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fdbe:	c3                   	ret    
c000fdbf:	90                   	nop

c000fdc0 <VgaText::disableBlink(bool)>:
c000fdc0:	56                   	push   esi
c000fdc1:	53                   	push   ebx
c000fdc2:	51                   	push   ecx
c000fdc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdc7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdcb:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000fdd1:	75 18                	jne    c000fdeb <VgaText::disableBlink(bool)+0x2b>
c000fdd3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fdd9:	85 c0                	test   eax,eax
c000fddb:	74 0e                	je     c000fdeb <VgaText::disableBlink(bool)+0x2b>
c000fddd:	89 f1                	mov    ecx,esi
c000fddf:	52                   	push   edx
c000fde0:	52                   	push   edx
c000fde1:	0f b6 d1             	movzx  edx,cl
c000fde4:	52                   	push   edx
c000fde5:	53                   	push   ebx
c000fde6:	ff d0                	call   eax
c000fde8:	83 c4 10             	add    esp,0x10
c000fdeb:	89 f0                	mov    eax,esi
c000fded:	83 f0 01             	xor    eax,0x1
c000fdf0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fdf6:	58                   	pop    eax
c000fdf7:	5b                   	pop    ebx
c000fdf8:	5e                   	pop    esi
c000fdf9:	c3                   	ret    

c000fdfa <VgaText::doANSI_SGR(int)>:
c000fdfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe02:	85 d2                	test   edx,edx
c000fe04:	75 14                	jne    c000fe1a <VgaText::doANSI_SGR(int)+0x20>
c000fe06:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe0c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe12:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe18:	eb 65                	jmp    c000fe7f <VgaText::doANSI_SGR(int)+0x85>
c000fe1a:	83 fa 07             	cmp    edx,0x7
c000fe1d:	75 14                	jne    c000fe33 <VgaText::doANSI_SGR(int)+0x39>
c000fe1f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe25:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe2b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe31:	eb 4c                	jmp    c000fe7f <VgaText::doANSI_SGR(int)+0x85>
c000fe33:	83 fa 1b             	cmp    edx,0x1b
c000fe36:	74 ce                	je     c000fe06 <VgaText::doANSI_SGR(int)+0xc>
c000fe38:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe3b:	83 f9 07             	cmp    ecx,0x7
c000fe3e:	77 09                	ja     c000fe49 <VgaText::doANSI_SGR(int)+0x4f>
c000fe40:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe47:	eb 20                	jmp    c000fe69 <VgaText::doANSI_SGR(int)+0x6f>
c000fe49:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe4c:	83 f9 07             	cmp    ecx,0x7
c000fe4f:	77 09                	ja     c000fe5a <VgaText::doANSI_SGR(int)+0x60>
c000fe51:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe58:	eb 25                	jmp    c000fe7f <VgaText::doANSI_SGR(int)+0x85>
c000fe5a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe5d:	83 f9 07             	cmp    ecx,0x7
c000fe60:	77 0e                	ja     c000fe70 <VgaText::doANSI_SGR(int)+0x76>
c000fe62:	8b 14 95 98 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d68]
c000fe69:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe6f:	c3                   	ret    
c000fe70:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe73:	83 f9 07             	cmp    ecx,0x7
c000fe76:	77 0d                	ja     c000fe85 <VgaText::doANSI_SGR(int)+0x8b>
c000fe78:	8b 14 95 70 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d90]
c000fe7f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe85:	c3                   	ret    

c000fe86 <VgaText::setDefaultBgColour(VgaColour)>:
c000fe86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe8e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fe94:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe9a:	c3                   	ret    
c000fe9b:	90                   	nop

c000fe9c <VgaText::setDefaultFgColour(VgaColour)>:
c000fe9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fea4:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000feaa:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000feb0:	c3                   	ret    
c000feb1:	90                   	nop

c000feb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000feb2:	53                   	push   ebx
c000feb3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000feb7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000febb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000febf:	51                   	push   ecx
c000fec0:	e8 c1 ff ff ff       	call   c000fe86 <VgaText::setDefaultBgColour(VgaColour)>
c000fec5:	58                   	pop    eax
c000fec6:	5a                   	pop    edx
c000fec7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fecb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fecf:	5b                   	pop    ebx
c000fed0:	eb ca                	jmp    c000fe9c <VgaText::setDefaultFgColour(VgaColour)>

c000fed2 <VgaText::combineColours(unsigned char, unsigned char)>:
c000fed2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fed6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fedb:	83 e0 0f             	and    eax,0xf
c000fede:	c1 e2 04             	shl    edx,0x4
c000fee1:	09 d0                	or     eax,edx
c000fee3:	c3                   	ret    

c000fee4 <VgaText::scrollScreen()>:
c000fee4:	57                   	push   edi
c000fee5:	56                   	push   esi
c000fee6:	be 01 00 00 00       	mov    esi,0x1
c000feeb:	53                   	push   ebx
c000feec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fef0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fef6:	31 ff                	xor    edi,edi
c000fef8:	01 d9                	add    ecx,ebx
c000fefa:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000fefd:	83 fe 17             	cmp    esi,0x17
c000ff00:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff06:	75 28                	jne    c000ff30 <VgaText::scrollScreen()+0x4c>
c000ff08:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff0e:	74 1c                	je     c000ff2c <VgaText::scrollScreen()+0x48>
c000ff10:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff17:	50                   	push   eax
c000ff18:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff1f:	50                   	push   eax
c000ff20:	e8 ad ff ff ff       	call   c000fed2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff25:	5a                   	pop    edx
c000ff26:	5a                   	pop    edx
c000ff27:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff2a:	eb 04                	jmp    c000ff30 <VgaText::scrollScreen()+0x4c>
c000ff2c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff30:	47                   	inc    edi
c000ff31:	41                   	inc    ecx
c000ff32:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff38:	75 c0                	jne    c000fefa <VgaText::scrollScreen()+0x16>
c000ff3a:	46                   	inc    esi
c000ff3b:	83 fe 18             	cmp    esi,0x18
c000ff3e:	75 b0                	jne    c000fef0 <VgaText::scrollScreen()+0xc>
c000ff40:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000ff46:	75 24                	jne    c000ff6c <VgaText::scrollScreen()+0x88>
c000ff48:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff4f:	74 08                	je     c000ff59 <VgaText::scrollScreen()+0x75>
c000ff51:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff57:	eb 13                	jmp    c000ff6c <VgaText::scrollScreen()+0x88>
c000ff59:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff5f:	85 c0                	test   eax,eax
c000ff61:	74 09                	je     c000ff6c <VgaText::scrollScreen()+0x88>
c000ff63:	83 ec 0c             	sub    esp,0xc
c000ff66:	53                   	push   ebx
c000ff67:	ff d0                	call   eax
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff70:	5b                   	pop    ebx
c000ff71:	5e                   	pop    esi
c000ff72:	5f                   	pop    edi
c000ff73:	e9 1e fe ff ff       	jmp    c000fd96 <VgaText::updateCursor()>

c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff7d:	c1 e0 08             	shl    eax,0x8
c000ff80:	89 c2                	mov    edx,eax
c000ff82:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ff87:	09 d0                	or     eax,edx
c000ff89:	c3                   	ret    

c000ff8a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ff8a:	53                   	push   ebx
c000ff8b:	83 ec 08             	sub    esp,0x8
c000ff8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff92:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff97:	50                   	push   eax
c000ff98:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff9d:	50                   	push   eax
c000ff9e:	e8 2f ff ff ff       	call   c000fed2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ffa3:	5a                   	pop    edx
c000ffa4:	0f b6 c0             	movzx  eax,al
c000ffa7:	5b                   	pop    ebx
c000ffa8:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffad:	50                   	push   eax
c000ffae:	53                   	push   ebx
c000ffaf:	e8 c4 ff ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffb4:	5a                   	pop    edx
c000ffb5:	5a                   	pop    edx
c000ffb6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffbc:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffc0:	0f b7 d2             	movzx  edx,dx
c000ffc3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ffc8:	39 0d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ecx
c000ffce:	75 14                	jne    c000ffe4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffd0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ffd6:	85 c0                	test   eax,eax
c000ffd8:	74 0a                	je     c000ffe4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffda:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ffde:	83 c4 08             	add    esp,0x8
c000ffe1:	5b                   	pop    ebx
c000ffe2:	ff e0                	jmp    eax
c000ffe4:	83 c4 08             	add    esp,0x8
c000ffe7:	5b                   	pop    ebx
c000ffe8:	c3                   	ret    
c000ffe9:	90                   	nop

c000ffea <VgaText::getCursorX()>:
c000ffea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffee:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000fff4:	c3                   	ret    
c000fff5:	90                   	nop

c000fff6 <VgaText::getCursorY()>:
c000fff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fffa:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010000:	c3                   	ret    
c0010001:	90                   	nop

c0010002 <VgaText::setCursor(int, int)>:
c0010002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001000a:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010010:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010014:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001001a:	e9 77 fd ff ff       	jmp    c000fd96 <VgaText::updateCursor()>
c001001f:	90                   	nop

c0010020 <VgaText::setCursorX(int)>:
c0010020:	83 ec 10             	sub    esp,0x10
c0010023:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010027:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001002d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010031:	50                   	push   eax
c0010032:	e8 cb ff ff ff       	call   c0010002 <VgaText::setCursor(int, int)>
c0010037:	83 c4 1c             	add    esp,0x1c
c001003a:	c3                   	ret    
c001003b:	90                   	nop

c001003c <VgaText::setCursorY(int)>:
c001003c:	83 ec 10             	sub    esp,0x10
c001003f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010043:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010047:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001004d:	50                   	push   eax
c001004e:	e8 af ff ff ff       	call   c0010002 <VgaText::setCursor(int, int)>
c0010053:	83 c4 1c             	add    esp,0x1c
c0010056:	c3                   	ret    
c0010057:	90                   	nop

c0010058 <VgaText::incrementCursor(bool)>:
c0010058:	56                   	push   esi
c0010059:	53                   	push   ebx
c001005a:	51                   	push   ecx
c001005b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001005f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010063:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010069:	40                   	inc    eax
c001006a:	83 f8 50             	cmp    eax,0x50
c001006d:	74 08                	je     c0010077 <VgaText::incrementCursor(bool)+0x1f>
c001006f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010075:	eb 33                	jmp    c00100aa <VgaText::incrementCursor(bool)+0x52>
c0010077:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001007d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010087:	8d 50 01             	lea    edx,[eax+0x1]
c001008a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010090:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010096:	75 12                	jne    c00100aa <VgaText::incrementCursor(bool)+0x52>
c0010098:	83 ec 0c             	sub    esp,0xc
c001009b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100a1:	53                   	push   ebx
c00100a2:	e8 3d fe ff ff       	call   c000fee4 <VgaText::scrollScreen()>
c00100a7:	83 c4 10             	add    esp,0x10
c00100aa:	89 f0                	mov    eax,esi
c00100ac:	84 c0                	test   al,al
c00100ae:	74 0c                	je     c00100bc <VgaText::incrementCursor(bool)+0x64>
c00100b0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100b4:	5a                   	pop    edx
c00100b5:	5b                   	pop    ebx
c00100b6:	5e                   	pop    esi
c00100b7:	e9 da fc ff ff       	jmp    c000fd96 <VgaText::updateCursor()>
c00100bc:	58                   	pop    eax
c00100bd:	5b                   	pop    ebx
c00100be:	5e                   	pop    esi
c00100bf:	c3                   	ret    

c00100c0 <VgaText::updateRAMUsageDisplay(int)>:
c00100c0:	53                   	push   ebx
c00100c1:	bb 0a 00 00 00       	mov    ebx,0xa
c00100c6:	6a 0f                	push   0xf
c00100c8:	6a 00                	push   0x0
c00100ca:	e8 03 fe ff ff       	call   c000fed2 <VgaText::combineColours(unsigned char, unsigned char)>
c00100cf:	5a                   	pop    edx
c00100d0:	59                   	pop    ecx
c00100d1:	0f b6 c8             	movzx  ecx,al
c00100d4:	51                   	push   ecx
c00100d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100d9:	99                   	cdq    
c00100da:	f7 fb                	idiv   ebx
c00100dc:	89 d3                	mov    ebx,edx
c00100de:	83 c0 30             	add    eax,0x30
c00100e1:	83 c3 30             	add    ebx,0x30
c00100e4:	0f be c0             	movsx  eax,al
c00100e7:	0f b6 db             	movzx  ebx,bl
c00100ea:	50                   	push   eax
c00100eb:	e8 88 fe ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c00100f0:	5a                   	pop    edx
c00100f1:	5a                   	pop    edx
c00100f2:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00100f8:	51                   	push   ecx
c00100f9:	53                   	push   ebx
c00100fa:	e8 79 fe ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c00100ff:	5b                   	pop    ebx
c0010100:	5a                   	pop    edx
c0010101:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010107:	51                   	push   ecx
c0010108:	6a 25                	push   0x25
c001010a:	e8 69 fe ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c001010f:	59                   	pop    ecx
c0010110:	5b                   	pop    ebx
c0010111:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010117:	5b                   	pop    ebx
c0010118:	c3                   	ret    
c0010119:	90                   	nop

c001011a <VgaText::updateDiskUsage()>:
c001011a:	55                   	push   ebp
c001011b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010120:	57                   	push   edi
c0010121:	56                   	push   esi
c0010122:	53                   	push   ebx
c0010123:	6a 0f                	push   0xf
c0010125:	6a 00                	push   0x0
c0010127:	e8 a6 fd ff ff       	call   c000fed2 <VgaText::combineColours(unsigned char, unsigned char)>
c001012c:	5a                   	pop    edx
c001012d:	0f b6 d8             	movzx  ebx,al
c0010130:	59                   	pop    ecx
c0010131:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c0010136:	53                   	push   ebx
c0010137:	b9 0a 00 00 00       	mov    ecx,0xa
c001013c:	99                   	cdq    
c001013d:	f7 fd                	idiv   ebp
c001013f:	99                   	cdq    
c0010140:	f7 f9                	idiv   ecx
c0010142:	8d 42 30             	lea    eax,[edx+0x30]
c0010145:	0f b6 c0             	movzx  eax,al
c0010148:	50                   	push   eax
c0010149:	e8 2a fe ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c001014e:	5e                   	pop    esi
c001014f:	5f                   	pop    edi
c0010150:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010156:	bf e8 03 00 00       	mov    edi,0x3e8
c001015b:	53                   	push   ebx
c001015c:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c0010161:	99                   	cdq    
c0010162:	f7 ff                	idiv   edi
c0010164:	99                   	cdq    
c0010165:	f7 f9                	idiv   ecx
c0010167:	8d 42 30             	lea    eax,[edx+0x30]
c001016a:	0f b6 c0             	movzx  eax,al
c001016d:	50                   	push   eax
c001016e:	e8 05 fe ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c0010173:	5a                   	pop    edx
c0010174:	5e                   	pop    esi
c0010175:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001017b:	be 64 00 00 00       	mov    esi,0x64
c0010180:	53                   	push   ebx
c0010181:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c0010186:	99                   	cdq    
c0010187:	f7 fe                	idiv   esi
c0010189:	99                   	cdq    
c001018a:	f7 f9                	idiv   ecx
c001018c:	8d 42 30             	lea    eax,[edx+0x30]
c001018f:	0f b6 c0             	movzx  eax,al
c0010192:	50                   	push   eax
c0010193:	e8 e0 fd ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c0010198:	5a                   	pop    edx
c0010199:	5a                   	pop    edx
c001019a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101a0:	53                   	push   ebx
c00101a1:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101a6:	99                   	cdq    
c00101a7:	f7 f9                	idiv   ecx
c00101a9:	99                   	cdq    
c00101aa:	f7 f9                	idiv   ecx
c00101ac:	8d 42 30             	lea    eax,[edx+0x30]
c00101af:	0f b6 c0             	movzx  eax,al
c00101b2:	50                   	push   eax
c00101b3:	e8 c0 fd ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c00101b8:	5a                   	pop    edx
c00101b9:	5a                   	pop    edx
c00101ba:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101c0:	53                   	push   ebx
c00101c1:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101c6:	99                   	cdq    
c00101c7:	f7 f9                	idiv   ecx
c00101c9:	8d 42 30             	lea    eax,[edx+0x30]
c00101cc:	0f b6 c0             	movzx  eax,al
c00101cf:	50                   	push   eax
c00101d0:	e8 a3 fd ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c00101d5:	5a                   	pop    edx
c00101d6:	5a                   	pop    edx
c00101d7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00101dd:	53                   	push   ebx
c00101de:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c00101e3:	99                   	cdq    
c00101e4:	f7 fd                	idiv   ebp
c00101e6:	99                   	cdq    
c00101e7:	f7 f9                	idiv   ecx
c00101e9:	8d 42 30             	lea    eax,[edx+0x30]
c00101ec:	0f b6 c0             	movzx  eax,al
c00101ef:	50                   	push   eax
c00101f0:	e8 83 fd ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c00101f5:	5d                   	pop    ebp
c00101f6:	5a                   	pop    edx
c00101f7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00101fd:	53                   	push   ebx
c00101fe:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c0010203:	99                   	cdq    
c0010204:	f7 ff                	idiv   edi
c0010206:	99                   	cdq    
c0010207:	f7 f9                	idiv   ecx
c0010209:	8d 42 30             	lea    eax,[edx+0x30]
c001020c:	0f b6 c0             	movzx  eax,al
c001020f:	50                   	push   eax
c0010210:	e8 63 fd ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c0010215:	5f                   	pop    edi
c0010216:	5d                   	pop    ebp
c0010217:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001021d:	53                   	push   ebx
c001021e:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c0010223:	99                   	cdq    
c0010224:	f7 fe                	idiv   esi
c0010226:	99                   	cdq    
c0010227:	f7 f9                	idiv   ecx
c0010229:	8d 42 30             	lea    eax,[edx+0x30]
c001022c:	0f b6 c0             	movzx  eax,al
c001022f:	50                   	push   eax
c0010230:	e8 43 fd ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c0010235:	5a                   	pop    edx
c0010236:	5e                   	pop    esi
c0010237:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001023d:	53                   	push   ebx
c001023e:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c0010243:	99                   	cdq    
c0010244:	f7 f9                	idiv   ecx
c0010246:	99                   	cdq    
c0010247:	f7 f9                	idiv   ecx
c0010249:	8d 42 30             	lea    eax,[edx+0x30]
c001024c:	0f b6 c0             	movzx  eax,al
c001024f:	50                   	push   eax
c0010250:	e8 23 fd ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c0010255:	5f                   	pop    edi
c0010256:	5d                   	pop    ebp
c0010257:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001025d:	53                   	push   ebx
c001025e:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c0010263:	99                   	cdq    
c0010264:	f7 f9                	idiv   ecx
c0010266:	83 c2 30             	add    edx,0x30
c0010269:	0f b6 d2             	movzx  edx,dl
c001026c:	52                   	push   edx
c001026d:	e8 06 fd ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c0010272:	5a                   	pop    edx
c0010273:	59                   	pop    ecx
c0010274:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001027a:	5b                   	pop    ebx
c001027b:	5e                   	pop    esi
c001027c:	5f                   	pop    edi
c001027d:	5d                   	pop    ebp
c001027e:	c3                   	ret    
c001027f:	90                   	nop

c0010280 <VgaText::updateTitle()>:
c0010280:	53                   	push   ebx
c0010281:	31 c0                	xor    eax,eax
c0010283:	83 ec 58             	sub    esp,0x58
c0010286:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001028a:	89 e1                	mov    ecx,esp
c001028c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010290:	40                   	inc    eax
c0010291:	83 f8 50             	cmp    eax,0x50
c0010294:	75 f6                	jne    c001028c <VgaText::updateTitle()+0xc>
c0010296:	31 c0                	xor    eax,eax
c0010298:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001029f:	84 db                	test   bl,bl
c00102a1:	74 06                	je     c00102a9 <VgaText::updateTitle()+0x29>
c00102a3:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102a6:	40                   	inc    eax
c00102a7:	eb ef                	jmp    c0010298 <VgaText::updateTitle()+0x18>
c00102a9:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102af:	85 c0                	test   eax,eax
c00102b1:	74 09                	je     c00102bc <VgaText::updateTitle()+0x3c>
c00102b3:	53                   	push   ebx
c00102b4:	53                   	push   ebx
c00102b5:	51                   	push   ecx
c00102b6:	52                   	push   edx
c00102b7:	ff d0                	call   eax
c00102b9:	83 c4 10             	add    esp,0x10
c00102bc:	e8 59 fe ff ff       	call   c001011a <VgaText::updateDiskUsage()>
c00102c1:	83 c4 58             	add    esp,0x58
c00102c4:	5b                   	pop    ebx
c00102c5:	c3                   	ret    

c00102c6 <VgaText::setTitleTextColour(VgaColour)>:
c00102c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ce:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102d4:	eb aa                	jmp    c0010280 <VgaText::updateTitle()>

c00102d6 <VgaText::setTitleColour(VgaColour)>:
c00102d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102de:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00102e4:	eb 9a                	jmp    c0010280 <VgaText::updateTitle()>

c00102e6 <VgaText::setTitle(char*)>:
c00102e6:	53                   	push   ebx
c00102e7:	83 ec 10             	sub    esp,0x10
c00102ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00102ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00102f8:	50                   	push   eax
c00102f9:	e8 66 04 ff ff       	call   c0000764 <strcpy>
c00102fe:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010302:	83 c4 18             	add    esp,0x18
c0010305:	5b                   	pop    ebx
c0010306:	e9 75 ff ff ff       	jmp    c0010280 <VgaText::updateTitle()>
c001030b:	90                   	nop

c001030c <VgaText::decrementCursor(bool)>:
c001030c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010310:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010314:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 07                	je     c0010325 <VgaText::decrementCursor(bool)+0x19>
c001031e:	48                   	dec    eax
c001031f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010325:	84 c9                	test   cl,cl
c0010327:	74 09                	je     c0010332 <VgaText::decrementCursor(bool)+0x26>
c0010329:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001032d:	e9 64 fa ff ff       	jmp    c000fd96 <VgaText::updateCursor()>
c0010332:	c3                   	ret    
c0010333:	90                   	nop

c0010334 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010334:	53                   	push   ebx
c0010335:	83 ec 08             	sub    esp,0x8
c0010338:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001033c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010340:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010344:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010348:	3c 07                	cmp    al,0x7
c001034a:	75 2a                	jne    c0010376 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001034c:	a1 6c a5 02 c0       	mov    eax,ds:0xc002a56c
c0010351:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010359:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010361:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010369:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001036d:	83 c4 08             	add    esp,0x8
c0010370:	5b                   	pop    ebx
c0010371:	e9 bc 2c 00 00       	jmp    c0013032 <Buzzer::beep(int, int, bool)>
c0010376:	3c 0d                	cmp    al,0xd
c0010378:	75 0c                	jne    c0010386 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001037a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010384:	eb 3b                	jmp    c00103c1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010386:	3c 0a                	cmp    al,0xa
c0010388:	75 40                	jne    c00103ca <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001038a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010390:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001039a:	8d 50 01             	lea    edx,[eax+0x1]
c001039d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103a3:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103a9:	75 12                	jne    c00103bd <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103ab:	83 ec 0c             	sub    esp,0xc
c00103ae:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103b4:	53                   	push   ebx
c00103b5:	e8 2a fb ff ff       	call   c000fee4 <VgaText::scrollScreen()>
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103c1:	83 c4 08             	add    esp,0x8
c00103c4:	5b                   	pop    ebx
c00103c5:	e9 cc f9 ff ff       	jmp    c000fd96 <VgaText::updateCursor()>
c00103ca:	3c 08                	cmp    al,0x8
c00103cc:	75 31                	jne    c00103ff <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103ce:	50                   	push   eax
c00103cf:	50                   	push   eax
c00103d0:	6a 01                	push   0x1
c00103d2:	53                   	push   ebx
c00103d3:	e8 34 ff ff ff       	call   c001030c <VgaText::decrementCursor(bool)>
c00103d8:	5a                   	pop    edx
c00103d9:	59                   	pop    ecx
c00103da:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103e0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103e6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00103ec:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00103f2:	6a 20                	push   0x20
c00103f4:	53                   	push   ebx
c00103f5:	e8 90 fb ff ff       	call   c000ff8a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00103fa:	83 c4 28             	add    esp,0x28
c00103fd:	5b                   	pop    ebx
c00103fe:	c3                   	ret    
c00103ff:	83 ec 08             	sub    esp,0x8
c0010402:	0f be c0             	movsx  eax,al
c0010405:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001040b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010411:	51                   	push   ecx
c0010412:	52                   	push   edx
c0010413:	50                   	push   eax
c0010414:	53                   	push   ebx
c0010415:	e8 70 fb ff ff       	call   c000ff8a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001041a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001041e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010426:	83 c4 28             	add    esp,0x28
c0010429:	5b                   	pop    ebx
c001042a:	e9 29 fc ff ff       	jmp    c0010058 <VgaText::incrementCursor(bool)>
c001042f:	90                   	nop

c0010430 <VgaText::isShowingCursor()>:
c0010430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010434:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001043a:	c3                   	ret    
c001043b:	90                   	nop

c001043c <VgaText::isBlinkDisabled()>:
c001043c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010440:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010446:	83 f0 01             	xor    eax,0x1
c0010449:	c3                   	ret    

c001044a <VgaText::setCursorHeight(int)>:
c001044a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010452:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010458:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001045f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010463:	e9 48 f9 ff ff       	jmp    c000fdb0 <VgaText::showCursor(bool)>

c0010468 <VgaText::getCursorHeight()>:
c0010468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001046c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010472:	c3                   	ret    

c0010473 <setActiveTerminal(VgaText*)>:
c0010473:	53                   	push   ebx
c0010474:	83 ec 08             	sub    esp,0x8
c0010477:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001047b:	85 db                	test   ebx,ebx
c001047d:	75 11                	jne    c0010490 <setActiveTerminal(VgaText*)+0x1d>
c001047f:	c7 44 24 10 8c 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026c8c
c0010487:	83 c4 08             	add    esp,0x8
c001048a:	5b                   	pop    ebx
c001048b:	e9 55 85 00 00       	jmp    c00189e5 <Krnl::panic(char const*)>
c0010490:	50                   	push   eax
c0010491:	50                   	push   eax
c0010492:	53                   	push   ebx
c0010493:	68 9a 6c 02 c0       	push   0xc0026c9a
c0010498:	e8 aa 1d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001049d:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	85 c0                	test   eax,eax
c00104a7:	74 0c                	je     c00104b5 <setActiveTerminal(VgaText*)+0x42>
c00104a9:	83 ec 0c             	sub    esp,0xc
c00104ac:	50                   	push   eax
c00104ad:	e8 e4 f8 ff ff       	call   c000fd96 <VgaText::updateCursor()>
c00104b2:	83 c4 10             	add    esp,0x10
c00104b5:	89 1d c4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4c4,ebx
c00104bb:	51                   	push   ecx
c00104bc:	51                   	push   ecx
c00104bd:	53                   	push   ebx
c00104be:	68 b2 6c 02 c0       	push   0xc0026cb2
c00104c3:	e8 7f 1d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00104c8:	83 c4 0c             	add    esp,0xc
c00104cb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104d1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104d7:	53                   	push   ebx
c00104d8:	e8 25 fb ff ff       	call   c0010002 <VgaText::setCursor(int, int)>
c00104dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104e0:	e8 57 ff ff ff       	call   c001043c <VgaText::isBlinkDisabled()>
c00104e5:	5a                   	pop    edx
c00104e6:	0f b6 c0             	movzx  eax,al
c00104e9:	59                   	pop    ecx
c00104ea:	50                   	push   eax
c00104eb:	53                   	push   ebx
c00104ec:	e8 cf f8 ff ff       	call   c000fdc0 <VgaText::disableBlink(bool)>
c00104f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104f4:	e8 6f ff ff ff       	call   c0010468 <VgaText::getCursorHeight()>
c00104f9:	5a                   	pop    edx
c00104fa:	59                   	pop    ecx
c00104fb:	50                   	push   eax
c00104fc:	53                   	push   ebx
c00104fd:	e8 48 ff ff ff       	call   c001044a <VgaText::setCursorHeight(int)>
c0010502:	83 c4 10             	add    esp,0x10
c0010505:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001050c:	75 0a                	jne    c0010518 <setActiveTerminal(VgaText*)+0xa5>
c001050e:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010518:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001051c:	83 c4 08             	add    esp,0x8
c001051f:	5b                   	pop    ebx
c0010520:	e9 1d f8 ff ff       	jmp    c000fd42 <VgaText::load()>

c0010525 <doTerminalCycle()>:
c0010525:	83 ec 18             	sub    esp,0x18
c0010528:	a1 c0 a4 02 c0       	mov    eax,ds:0xc002a4c0
c001052d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010533:	50                   	push   eax
c0010534:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c0010539:	e8 35 ff ff ff       	call   c0010473 <setActiveTerminal(VgaText*)>
c001053e:	83 c4 1c             	add    esp,0x1c
c0010541:	c3                   	ret    

c0010542 <VgaText::doUpdate()>:
c0010542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010546:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001054c:	85 c0                	test   eax,eax
c001054e:	74 02                	je     c0010552 <VgaText::doUpdate()+0x10>
c0010550:	ff e0                	jmp    eax
c0010552:	c3                   	ret    
c0010553:	90                   	nop

c0010554 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010554:	55                   	push   ebp
c0010555:	57                   	push   edi
c0010556:	56                   	push   esi
c0010557:	53                   	push   ebx
c0010558:	83 ec 1c             	sub    esp,0x1c
c001055b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001055f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010564:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001056b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001056e:	50                   	push   eax
c001056f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010574:	50                   	push   eax
c0010575:	e8 58 f9 ff ff       	call   c000fed2 <VgaText::combineColours(unsigned char, unsigned char)>
c001057a:	59                   	pop    ecx
c001057b:	0f b6 c0             	movzx  eax,al
c001057e:	5b                   	pop    ebx
c001057f:	31 c9                	xor    ecx,ecx
c0010581:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010589:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001058d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010593:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010597:	0f b7 db             	movzx  ebx,bx
c001059a:	01 db                	add    ebx,ebx
c001059c:	01 fb                	add    ebx,edi
c001059e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 38 01 00 00    	je     c00106e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0f                	jne    c00105bc <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105ad:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105b7:	e9 1f 01 00 00       	jmp    c00106db <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105bc:	3c 0a                	cmp    al,0xa
c00105be:	75 5b                	jne    c001061b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105c0:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105c6:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105d0:	8d 48 01             	lea    ecx,[eax+0x1]
c00105d3:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00105d9:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00105df:	75 12                	jne    c00105f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00105ea:	55                   	push   ebp
c00105eb:	e8 f4 f8 ff ff       	call   c000fee4 <VgaText::scrollScreen()>
c00105f0:	83 c4 10             	add    esp,0x10
c00105f3:	83 ec 0c             	sub    esp,0xc
c00105f6:	55                   	push   ebp
c00105f7:	e8 9a f7 ff ff       	call   c000fd96 <VgaText::updateCursor()>
c00105fc:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010604:	83 c4 10             	add    esp,0x10
c0010607:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001060d:	31 c9                	xor    ecx,ecx
c001060f:	0f b7 db             	movzx  ebx,bx
c0010612:	01 db                	add    ebx,ebx
c0010614:	01 fb                	add    ebx,edi
c0010616:	e9 c0 00 00 00       	jmp    c00106db <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001061b:	3c 08                	cmp    al,0x8
c001061d:	75 4e                	jne    c001066d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c001061f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010623:	53                   	push   ebx
c0010624:	53                   	push   ebx
c0010625:	6a 01                	push   0x1
c0010627:	55                   	push   ebp
c0010628:	e8 df fc ff ff       	call   c001030c <VgaText::decrementCursor(bool)>
c001062d:	58                   	pop    eax
c001062e:	5a                   	pop    edx
c001062f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010635:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001063b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010641:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010647:	6a 20                	push   0x20
c0010649:	55                   	push   ebp
c001064a:	e8 3b f9 ff ff       	call   c000ff8a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001064f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010657:	83 c4 20             	add    esp,0x20
c001065a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010660:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010664:	0f b7 db             	movzx  ebx,bx
c0010667:	01 db                	add    ebx,ebx
c0010669:	01 fb                	add    ebx,edi
c001066b:	eb 6e                	jmp    c00106db <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001066d:	51                   	push   ecx
c001066e:	51                   	push   ecx
c001066f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010673:	50                   	push   eax
c0010674:	e8 ff f8 ff ff       	call   c000ff78 <VgaText::combineCharAndColour(char, unsigned char)>
c0010679:	83 c4 10             	add    esp,0x10
c001067c:	66 89 03             	mov    WORD PTR [ebx],ax
c001067f:	39 2d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebp
c0010685:	75 2a                	jne    c00106b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010687:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c001068d:	85 c0                	test   eax,eax
c001068f:	74 20                	je     c00106b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010691:	52                   	push   edx
c0010692:	52                   	push   edx
c0010693:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010699:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001069f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106a7:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106aa:	51                   	push   ecx
c00106ab:	55                   	push   ebp
c00106ac:	ff d0                	call   eax
c00106ae:	83 c4 20             	add    esp,0x20
c00106b1:	83 c3 02             	add    ebx,0x2
c00106b4:	50                   	push   eax
c00106b5:	50                   	push   eax
c00106b6:	6a 00                	push   0x0
c00106b8:	55                   	push   ebp
c00106b9:	e8 9a f9 ff ff       	call   c0010058 <VgaText::incrementCursor(bool)>
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106c8:	75 0f                	jne    c00106d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106ca:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106d2:	0f b7 db             	movzx  ebx,bx
c00106d5:	01 db                	add    ebx,ebx
c00106d7:	01 fb                	add    ebx,edi
c00106d9:	b1 01                	mov    cl,0x1
c00106db:	46                   	inc    esi
c00106dc:	e9 bd fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00106e1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00106e5:	83 ec 0c             	sub    esp,0xc
c00106e8:	55                   	push   ebp
c00106e9:	e8 a8 f6 ff ff       	call   c000fd96 <VgaText::updateCursor()>
c00106ee:	83 c4 10             	add    esp,0x10
c00106f1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00106f5:	84 c9                	test   cl,cl
c00106f7:	74 0c                	je     c0010705 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00106f9:	83 ec 0c             	sub    esp,0xc
c00106fc:	55                   	push   ebp
c00106fd:	e8 40 fe ff ff       	call   c0010542 <VgaText::doUpdate()>
c0010702:	83 c4 10             	add    esp,0x10
c0010705:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001070c:	83 c4 1c             	add    esp,0x1c
c001070f:	5b                   	pop    ebx
c0010710:	5e                   	pop    esi
c0010711:	5f                   	pop    edi
c0010712:	5d                   	pop    ebp
c0010713:	c3                   	ret    

c0010714 <VgaText::clearScreen()>:
c0010714:	57                   	push   edi
c0010715:	56                   	push   esi
c0010716:	31 f6                	xor    esi,esi
c0010718:	53                   	push   ebx
c0010719:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001071d:	52                   	push   edx
c001071e:	6a 00                	push   0x0
c0010720:	6a 00                	push   0x0
c0010722:	53                   	push   ebx
c0010723:	e8 da f8 ff ff       	call   c0010002 <VgaText::setCursor(int, int)>
c0010728:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010738:	7e 26                	jle    c0010760 <VgaText::clearScreen()+0x4c>
c001073a:	31 ff                	xor    edi,edi
c001073c:	50                   	push   eax
c001073d:	50                   	push   eax
c001073e:	56                   	push   esi
c001073f:	57                   	push   edi
c0010740:	47                   	inc    edi
c0010741:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010747:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001074d:	6a 20                	push   0x20
c001074f:	53                   	push   ebx
c0010750:	e8 35 f8 ff ff       	call   c000ff8a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010755:	83 c4 20             	add    esp,0x20
c0010758:	83 ff 50             	cmp    edi,0x50
c001075b:	75 df                	jne    c001073c <VgaText::clearScreen()+0x28>
c001075d:	46                   	inc    esi
c001075e:	eb d2                	jmp    c0010732 <VgaText::clearScreen()+0x1e>
c0010760:	83 ec 0c             	sub    esp,0xc
c0010763:	53                   	push   ebx
c0010764:	e8 d9 fd ff ff       	call   c0010542 <VgaText::doUpdate()>
c0010769:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010770:	83 c4 10             	add    esp,0x10
c0010773:	5b                   	pop    ebx
c0010774:	5e                   	pop    esi
c0010775:	5f                   	pop    edi
c0010776:	c3                   	ret    
c0010777:	90                   	nop

c0010778 <VgaText::putchar(char)>:
c0010778:	56                   	push   esi
c0010779:	53                   	push   ebx
c001077a:	83 ec 14             	sub    esp,0x14
c001077d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010781:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010785:	3c 5b                	cmp    al,0x5b
c0010787:	75 21                	jne    c00107aa <VgaText::putchar(char)+0x32>
c0010789:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010790:	74 28                	je     c00107ba <VgaText::putchar(char)+0x42>
c0010792:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001079b:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107a5:	e9 e2 00 00 00       	jmp    c001088c <VgaText::putchar(char)+0x114>
c00107aa:	3c 1b                	cmp    al,0x1b
c00107ac:	75 0c                	jne    c00107ba <VgaText::putchar(char)+0x42>
c00107ae:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107b5:	e9 d2 00 00 00       	jmp    c001088c <VgaText::putchar(char)+0x114>
c00107ba:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107c0:	84 c9                	test   cl,cl
c00107c2:	0f 84 ab 00 00 00    	je     c0010873 <VgaText::putchar(char)+0xfb>
c00107c8:	8d 50 c0             	lea    edx,[eax-0x40]
c00107cb:	80 fa 3e             	cmp    dl,0x3e
c00107ce:	0f 87 82 00 00 00    	ja     c0010856 <VgaText::putchar(char)+0xde>
c00107d4:	3c 6d                	cmp    al,0x6d
c00107d6:	75 4d                	jne    c0010825 <VgaText::putchar(char)+0xad>
c00107d8:	31 f6                	xor    esi,esi
c00107da:	31 d2                	xor    edx,edx
c00107dc:	31 c0                	xor    eax,eax
c00107de:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00107e4:	7e 30                	jle    c0010816 <VgaText::putchar(char)+0x9e>
c00107e6:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00107ee:	80 fa 3b             	cmp    dl,0x3b
c00107f1:	75 17                	jne    c001080a <VgaText::putchar(char)+0x92>
c00107f3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107f7:	50                   	push   eax
c00107f8:	53                   	push   ebx
c00107f9:	e8 fc f5 ff ff       	call   c000fdfa <VgaText::doANSI_SGR(int)>
c00107fe:	59                   	pop    ecx
c00107ff:	31 d2                	xor    edx,edx
c0010801:	58                   	pop    eax
c0010802:	31 c0                	xor    eax,eax
c0010804:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010808:	eb 09                	jmp    c0010813 <VgaText::putchar(char)+0x9b>
c001080a:	6b c0 0a             	imul   eax,eax,0xa
c001080d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010811:	88 ca                	mov    dl,cl
c0010813:	46                   	inc    esi
c0010814:	eb c8                	jmp    c00107de <VgaText::putchar(char)+0x66>
c0010816:	84 d2                	test   dl,dl
c0010818:	74 31                	je     c001084b <VgaText::putchar(char)+0xd3>
c001081a:	50                   	push   eax
c001081b:	53                   	push   ebx
c001081c:	e8 d9 f5 ff ff       	call   c000fdfa <VgaText::doANSI_SGR(int)>
c0010821:	58                   	pop    eax
c0010822:	5a                   	pop    edx
c0010823:	eb 26                	jmp    c001084b <VgaText::putchar(char)+0xd3>
c0010825:	3c 4a                	cmp    al,0x4a
c0010827:	75 22                	jne    c001084b <VgaText::putchar(char)+0xd3>
c0010829:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010830:	75 19                	jne    c001084b <VgaText::putchar(char)+0xd3>
c0010832:	83 ec 0c             	sub    esp,0xc
c0010835:	53                   	push   ebx
c0010836:	e8 d9 fe ff ff       	call   c0010714 <VgaText::clearScreen()>
c001083b:	83 c4 0c             	add    esp,0xc
c001083e:	6a 00                	push   0x0
c0010840:	6a 00                	push   0x0
c0010842:	53                   	push   ebx
c0010843:	e8 ba f7 ff ff       	call   c0010002 <VgaText::setCursor(int, int)>
c0010848:	83 c4 10             	add    esp,0x10
c001084b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010854:	eb 36                	jmp    c001088c <VgaText::putchar(char)+0x114>
c0010856:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001085c:	83 fa 0e             	cmp    edx,0xe
c001085f:	7f 2b                	jg     c001088c <VgaText::putchar(char)+0x114>
c0010861:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010864:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001086a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010871:	eb 19                	jmp    c001088c <VgaText::putchar(char)+0x114>
c0010873:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010879:	0f be c0             	movsx  eax,al
c001087c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010882:	50                   	push   eax
c0010883:	53                   	push   ebx
c0010884:	e8 ab fa ff ff       	call   c0010334 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010889:	83 c4 10             	add    esp,0x10
c001088c:	83 c4 14             	add    esp,0x14
c001088f:	5b                   	pop    ebx
c0010890:	5e                   	pop    esi
c0010891:	c3                   	ret    

c0010892 <VgaText::puts(char const*)>:
c0010892:	53                   	push   ebx
c0010893:	83 ec 08             	sub    esp,0x8
c0010896:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001089a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001089d:	84 c0                	test   al,al
c001089f:	74 12                	je     c00108b3 <VgaText::puts(char const*)+0x21>
c00108a1:	43                   	inc    ebx
c00108a2:	51                   	push   ecx
c00108a3:	51                   	push   ecx
c00108a4:	50                   	push   eax
c00108a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a9:	e8 ca fe ff ff       	call   c0010778 <VgaText::putchar(char)>
c00108ae:	83 c4 10             	add    esp,0x10
c00108b1:	eb e7                	jmp    c001089a <VgaText::puts(char const*)+0x8>
c00108b3:	83 c4 08             	add    esp,0x8
c00108b6:	5b                   	pop    ebx
c00108b7:	c3                   	ret    

c00108b8 <VgaText::putx(unsigned int)>:
c00108b8:	57                   	push   edi
c00108b9:	b9 11 00 00 00       	mov    ecx,0x11
c00108be:	56                   	push   esi
c00108bf:	be ce 6c 02 c0       	mov    esi,0xc0026cce
c00108c4:	53                   	push   ebx
c00108c5:	83 ec 20             	sub    esp,0x20
c00108c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108cc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108d0:	fc                   	cld    
c00108d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108d3:	be 08 00 00 00       	mov    esi,0x8
c00108d8:	50                   	push   eax
c00108d9:	50                   	push   eax
c00108da:	89 d8                	mov    eax,ebx
c00108dc:	c1 e3 04             	shl    ebx,0x4
c00108df:	c1 e8 1c             	shr    eax,0x1c
c00108e2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00108e7:	50                   	push   eax
c00108e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00108ec:	e8 87 fe ff ff       	call   c0010778 <VgaText::putchar(char)>
c00108f1:	83 c4 10             	add    esp,0x10
c00108f4:	4e                   	dec    esi
c00108f5:	75 e1                	jne    c00108d8 <VgaText::putx(unsigned int)+0x20>
c00108f7:	83 c4 20             	add    esp,0x20
c00108fa:	5b                   	pop    ebx
c00108fb:	5e                   	pop    esi
c00108fc:	5f                   	pop    edi
c00108fd:	c3                   	ret    

c00108fe <VgaText::VgaText(char const*)>:
c00108fe:	57                   	push   edi
c00108ff:	56                   	push   esi
c0010900:	53                   	push   ebx
c0010901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010905:	83 ec 08             	sub    esp,0x8
c0010908:	6a 00                	push   0x0
c001090a:	50                   	push   eax
c001090b:	e8 62 05 00 00       	call   c0010e72 <UnixFile::UnixFile(int)>
c0010910:	83 c4 10             	add    esp,0x10
c0010913:	ba 34 6d 02 c0       	mov    edx,0xc0026d34
c0010918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091c:	89 10                	mov    DWORD PTR [eax],edx
c001091e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010922:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010954:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001095e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010962:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001096c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010970:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097b:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010986:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001098c:	bb a0 a4 02 c0       	mov    ebx,0xc002a4a0
c0010991:	b8 08 00 00 00       	mov    eax,0x8
c0010996:	fc                   	cld    
c0010997:	89 d7                	mov    edi,edx
c0010999:	89 de                	mov    esi,ebx
c001099b:	89 c1                	mov    ecx,eax
c001099d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001099f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a3:	05 1e 10 00 00       	add    eax,0x101e
c00109a8:	83 ec 08             	sub    esp,0x8
c00109ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109af:	50                   	push   eax
c00109b0:	e8 af fd fe ff       	call   c0000764 <strcpy>
c00109b5:	83 c4 10             	add    esp,0x10
c00109b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109bc:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ca:	83 c0 0c             	add    eax,0xc
c00109cd:	83 ec 04             	sub    esp,0x4
c00109d0:	68 00 0f 00 00       	push   0xf00
c00109d5:	6a 00                	push   0x0
c00109d7:	50                   	push   eax
c00109d8:	e8 e8 fc fe ff       	call   c00006c5 <memset>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	83 ec 04             	sub    esp,0x4
c00109e3:	6a 00                	push   0x0
c00109e5:	6a 07                	push   0x7
c00109e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109eb:	e8 c2 f4 ff ff       	call   c000feb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00109f0:	83 c4 10             	add    esp,0x10
c00109f3:	83 ec 08             	sub    esp,0x8
c00109f6:	6a 02                	push   0x2
c00109f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109fc:	e8 49 fa ff ff       	call   c001044a <VgaText::setCursorHeight(int)>
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	83 ec 04             	sub    esp,0x4
c0010a07:	6a 00                	push   0x0
c0010a09:	6a 00                	push   0x0
c0010a0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0f:	e8 ee f5 ff ff       	call   c0010002 <VgaText::setCursor(int, int)>
c0010a14:	83 c4 10             	add    esp,0x10
c0010a17:	83 ec 08             	sub    esp,0x8
c0010a1a:	6a 01                	push   0x1
c0010a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a20:	e8 8b f3 ff ff       	call   c000fdb0 <VgaText::showCursor(bool)>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	83 ec 08             	sub    esp,0x8
c0010a2b:	6a 01                	push   0x1
c0010a2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a31:	e8 8a f3 ff ff       	call   c000fdc0 <VgaText::disableBlink(bool)>
c0010a36:	83 c4 10             	add    esp,0x10
c0010a39:	83 ec 0c             	sub    esp,0xc
c0010a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a40:	e8 cf fc ff ff       	call   c0010714 <VgaText::clearScreen()>
c0010a45:	83 c4 10             	add    esp,0x10
c0010a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a57:	05 9e 10 00 00       	add    eax,0x109e
c0010a5c:	83 ec 04             	sub    esp,0x4
c0010a5f:	68 96 00 00 00       	push   0x96
c0010a64:	6a 00                	push   0x0
c0010a66:	50                   	push   eax
c0010a67:	e8 59 fc fe ff       	call   c00006c5 <memset>
c0010a6c:	83 c4 10             	add    esp,0x10
c0010a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a73:	05 34 11 00 00       	add    eax,0x1134
c0010a78:	83 ec 04             	sub    esp,0x4
c0010a7b:	68 2c 01 00 00       	push   0x12c
c0010a80:	6a 00                	push   0x0
c0010a82:	50                   	push   eax
c0010a83:	e8 3d fc fe ff       	call   c00006c5 <memset>
c0010a88:	83 c4 10             	add    esp,0x10
c0010a8b:	90                   	nop
c0010a8c:	5b                   	pop    ebx
c0010a8d:	5e                   	pop    esi
c0010a8e:	5f                   	pop    edi
c0010a8f:	c3                   	ret    

c0010a90 <VgaText::receiveKey(unsigned char)>:
c0010a90:	55                   	push   ebp
c0010a91:	57                   	push   edi
c0010a92:	56                   	push   esi
c0010a93:	53                   	push   ebx
c0010a94:	83 ec 1c             	sub    esp,0x1c
c0010a97:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a9f:	84 db                	test   bl,bl
c0010aa1:	0f 84 c9 00 00 00    	je     c0010b70 <VgaText::receiveKey(unsigned char)+0xe0>
c0010aa7:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010aad:	80 fb 08             	cmp    bl,0x8
c0010ab0:	75 2c                	jne    c0010ade <VgaText::receiveKey(unsigned char)+0x4e>
c0010ab2:	83 ec 0c             	sub    esp,0xc
c0010ab5:	57                   	push   edi
c0010ab6:	e8 27 fc fe ff       	call   c00006e2 <strlen>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	85 c0                	test   eax,eax
c0010ac0:	74 41                	je     c0010b03 <VgaText::receiveKey(unsigned char)+0x73>
c0010ac2:	50                   	push   eax
c0010ac3:	50                   	push   eax
c0010ac4:	6a 08                	push   0x8
c0010ac6:	56                   	push   esi
c0010ac7:	e8 ac fc ff ff       	call   c0010778 <VgaText::putchar(char)>
c0010acc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010acf:	e8 0e fc fe ff       	call   c00006e2 <strlen>
c0010ad4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010adc:	eb 22                	jmp    c0010b00 <VgaText::receiveKey(unsigned char)+0x70>
c0010ade:	0f be c3             	movsx  eax,bl
c0010ae1:	52                   	push   edx
c0010ae2:	52                   	push   edx
c0010ae3:	50                   	push   eax
c0010ae4:	56                   	push   esi
c0010ae5:	e8 8e fc ff ff       	call   c0010778 <VgaText::putchar(char)>
c0010aea:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010aee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010af3:	59                   	pop    ecx
c0010af4:	5d                   	pop    ebp
c0010af5:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010af9:	50                   	push   eax
c0010afa:	57                   	push   edi
c0010afb:	e8 1b fd fe ff       	call   c000081b <strcat>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b0a:	75 05                	jne    c0010b11 <VgaText::receiveKey(unsigned char)+0x81>
c0010b0c:	80 fb 0a             	cmp    bl,0xa
c0010b0f:	75 53                	jne    c0010b64 <VgaText::receiveKey(unsigned char)+0xd4>
c0010b11:	83 ec 0c             	sub    esp,0xc
c0010b14:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b1a:	53                   	push   ebx
c0010b1b:	e8 c2 fb fe ff       	call   c00006e2 <strlen>
c0010b20:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b23:	89 c5                	mov    ebp,eax
c0010b25:	e8 b8 fb fe ff       	call   c00006e2 <strlen>
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b31:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b36:	76 10                	jbe    c0010b48 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b38:	83 ec 0c             	sub    esp,0xc
c0010b3b:	68 df 6c 02 c0       	push   0xc0026cdf
c0010b40:	e8 a0 7e 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0010b45:	83 c4 10             	add    esp,0x10
c0010b48:	50                   	push   eax
c0010b49:	50                   	push   eax
c0010b4a:	57                   	push   edi
c0010b4b:	53                   	push   ebx
c0010b4c:	e8 ca fc fe ff       	call   c000081b <strcat>
c0010b51:	83 c4 0c             	add    esp,0xc
c0010b54:	68 96 00 00 00       	push   0x96
c0010b59:	6a 00                	push   0x0
c0010b5b:	57                   	push   edi
c0010b5c:	e8 64 fb fe ff       	call   c00006c5 <memset>
c0010b61:	83 c4 10             	add    esp,0x10
c0010b64:	83 ec 0c             	sub    esp,0xc
c0010b67:	56                   	push   esi
c0010b68:	e8 d5 f9 ff ff       	call   c0010542 <VgaText::doUpdate()>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	83 c4 1c             	add    esp,0x1c
c0010b73:	5b                   	pop    ebx
c0010b74:	5e                   	pop    esi
c0010b75:	5f                   	pop    edi
c0010b76:	5d                   	pop    ebp
c0010b77:	c3                   	ret    

c0010b78 <VgaText::write(unsigned long long, void*, int*)>:
c0010b78:	55                   	push   ebp
c0010b79:	57                   	push   edi
c0010b7a:	56                   	push   esi
c0010b7b:	53                   	push   ebx
c0010b7c:	83 ec 0c             	sub    esp,0xc
c0010b7f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b83:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b87:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b8b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010b92:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b95:	39 eb                	cmp    ebx,ebp
c0010b97:	74 13                	je     c0010bac <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b99:	43                   	inc    ebx
c0010b9a:	50                   	push   eax
c0010b9b:	50                   	push   eax
c0010b9c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010ba0:	50                   	push   eax
c0010ba1:	56                   	push   esi
c0010ba2:	e8 d1 fb ff ff       	call   c0010778 <VgaText::putchar(char)>
c0010ba7:	83 c4 10             	add    esp,0x10
c0010baa:	eb e9                	jmp    c0010b95 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010bb6:	56                   	push   esi
c0010bb7:	e8 86 f9 ff ff       	call   c0010542 <VgaText::doUpdate()>
c0010bbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010bc0:	89 38                	mov    DWORD PTR [eax],edi
c0010bc2:	83 c4 1c             	add    esp,0x1c
c0010bc5:	31 c0                	xor    eax,eax
c0010bc7:	5b                   	pop    ebx
c0010bc8:	5e                   	pop    esi
c0010bc9:	5f                   	pop    edi
c0010bca:	5d                   	pop    ebp
c0010bcb:	c3                   	ret    

c0010bcc <newTerminal(char*)>:
c0010bcc:	83 ec 28             	sub    esp,0x28
c0010bcf:	68 60 12 00 00       	push   0x1260
c0010bd4:	e8 7f 15 00 00       	call   c0012158 <operator new(unsigned long)>
c0010bd9:	5a                   	pop    edx
c0010bda:	59                   	pop    ecx
c0010bdb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010bdf:	50                   	push   eax
c0010be0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010be4:	e8 15 fd ff ff       	call   c00108fe <VgaText::VgaText(char const*)>
c0010be9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010bed:	83 c4 2c             	add    esp,0x2c
c0010bf0:	c3                   	ret    
c0010bf1:	90                   	nop

c0010bf2 <TSS::TSS()>:
c0010bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bfd:	90                   	nop
c0010bfe:	c3                   	ret    
c0010bff:	90                   	nop

c0010c00 <TSS::setESP(unsigned long)>:
c0010c00:	55                   	push   ebp
c0010c01:	89 e5                	mov    ebp,esp
c0010c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c09:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c0c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c0f:	90                   	nop
c0010c10:	5d                   	pop    ebp
c0010c11:	c3                   	ret    

c0010c12 <TSS::flush()>:
c0010c12:	55                   	push   ebp
c0010c13:	89 e5                	mov    ebp,esp
c0010c15:	83 ec 10             	sub    esp,0x10
c0010c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c1d:	83 c8 03             	or     eax,0x3
c0010c20:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c24:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c28:	66 89 d0             	mov    ax,dx
c0010c2b:	0f 00 d8             	ltr    ax
c0010c2e:	90                   	nop
c0010c2f:	c9                   	leave  
c0010c30:	c3                   	ret    
c0010c31:	90                   	nop

c0010c32 <TSS::setup(unsigned long, unsigned long)>:
c0010c32:	55                   	push   ebp
c0010c33:	89 e5                	mov    ebp,esp
c0010c35:	53                   	push   ebx
c0010c36:	83 ec 14             	sub    esp,0x14
c0010c39:	83 ec 0c             	sub    esp,0xc
c0010c3c:	6a 68                	push   0x68
c0010c3e:	e8 fb e4 ff ff       	call   c000f13e <malloc>
c0010c43:	83 c4 10             	add    esp,0x10
c0010c46:	89 c2                	mov    edx,eax
c0010c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c54:	83 ec 04             	sub    esp,0x4
c0010c57:	6a 68                	push   0x68
c0010c59:	6a 00                	push   0x0
c0010c5b:	50                   	push   eax
c0010c5c:	e8 64 fa fe ff       	call   c00006c5 <memset>
c0010c61:	83 c4 10             	add    esp,0x10
c0010c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c76:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c9a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010caf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cbe:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cca:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010cd9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ce5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cee:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cf8:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010cfb:	e8 75 43 01 00       	call   c0025075 <CPU::readCR3()>
c0010d00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d09:	83 ec 08             	sub    esp,0x8
c0010d0c:	50                   	push   eax
c0010d0d:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d10:	50                   	push   eax
c0010d11:	e8 fe db ff ff       	call   c000e914 <GDTEntry::setBase(unsigned int)>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	83 ec 08             	sub    esp,0x8
c0010d1c:	6a 68                	push   0x68
c0010d1e:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d21:	50                   	push   eax
c0010d22:	e8 09 dc ff ff       	call   c000e930 <GDTEntry::setLimit(unsigned int)>
c0010d27:	83 c4 10             	add    esp,0x10
c0010d2a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d2e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d31:	83 e0 0f             	and    eax,0xf
c0010d34:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d37:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d3a:	83 c8 40             	or     eax,0x40
c0010d3d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d40:	e8 1d 6b 00 00       	call   c0017862 <CPU::current()>
c0010d45:	05 78 01 00 00       	add    eax,0x178
c0010d4a:	83 ec 04             	sub    esp,0x4
c0010d4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d50:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d53:	50                   	push   eax
c0010d54:	e8 0b dc ff ff       	call   c000e964 <GDT::addEntry(GDTEntry)>
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	89 c2                	mov    edx,eax
c0010d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d61:	89 10                	mov    DWORD PTR [eax],edx
c0010d63:	e8 fa 6a 00 00       	call   c0017862 <CPU::current()>
c0010d68:	05 78 01 00 00       	add    eax,0x178
c0010d6d:	83 ec 0c             	sub    esp,0xc
c0010d70:	50                   	push   eax
c0010d71:	e8 32 dc ff ff       	call   c000e9a8 <GDT::flush()>
c0010d76:	83 c4 10             	add    esp,0x10
c0010d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d7e:	83 ec 08             	sub    esp,0x8
c0010d81:	50                   	push   eax
c0010d82:	68 48 6d 02 c0       	push   0xc0026d48
c0010d87:	e8 bb 14 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010d97:	c9                   	leave  
c0010d98:	c3                   	ret    
c0010d99:	90                   	nop

c0010d9a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010da2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010da5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010daa:	75 08                	jne    c0010db4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010dac:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010db2:	eb 38                	jmp    c0010dec <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010db4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010db9:	75 17                	jne    c0010dd2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dc0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dc3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dcf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010dd2:	89 c1                	mov    ecx,eax
c0010dd4:	83 e1 fd             	and    ecx,0xfffffffd
c0010dd7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010ddd:	74 cd                	je     c0010dac <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ddf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010de4:	83 e0 ef             	and    eax,0xffffffef
c0010de7:	83 f8 08             	cmp    eax,0x8
c0010dea:	76 c0                	jbe    c0010dac <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010dec:	31 c0                	xor    eax,eax
c0010dee:	c3                   	ret    
c0010def:	90                   	nop

c0010df0 <ReservedFilename::isAtty()>:
c0010df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010df4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010df7:	31 c0                	xor    eax,eax
c0010df9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010dff:	74 09                	je     c0010e0a <ReservedFilename::isAtty()+0x1a>
c0010e01:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e07:	0f 94 c0             	sete   al
c0010e0a:	c3                   	ret    
c0010e0b:	90                   	nop

c0010e0c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e1b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e20:	75 08                	jne    c0010e2a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e22:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e28:	eb 3d                	jmp    c0010e67 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e2a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e2f:	75 17                	jne    c0010e48 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e39:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e45:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e4d:	75 04                	jne    c0010e53 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e4f:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e51:	eb 14                	jmp    c0010e67 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e53:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e58:	74 c8                	je     c0010e22 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e5a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e5f:	83 e0 ef             	and    eax,0xffffffef
c0010e62:	83 f8 08             	cmp    eax,0x8
c0010e65:	76 bb                	jbe    c0010e22 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e67:	31 c0                	xor    eax,eax
c0010e69:	c3                   	ret    

c0010e6a <UnixFile::getFileDescriptor()>:
c0010e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e71:	c3                   	ret    

c0010e72 <UnixFile::UnixFile(int)>:
c0010e72:	53                   	push   ebx
c0010e73:	83 ec 18             	sub    esp,0x18
c0010e76:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c0010e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e7f:	89 10                	mov    DWORD PTR [eax],edx
c0010e81:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e89:	0f 8f 4d 01 00 00    	jg     c0010fdc <UnixFile::UnixFile(int)+0x16a>
c0010e8f:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0010e94:	8d 50 01             	lea    edx,[eax+0x1]
c0010e97:	89 15 20 94 02 c0    	mov    DWORD PTR ds:0xc0029420,edx
c0010e9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ea1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010ea4:	83 ec 08             	sub    esp,0x8
c0010ea7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010eab:	68 58 a5 02 c0       	push   0xc002a558
c0010eb0:	e8 35 42 01 00       	call   c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	a0 54 a5 02 c0       	mov    al,ds:0xc002a554
c0010ebd:	83 f0 01             	xor    eax,0x1
c0010ec0:	84 c0                	test   al,al
c0010ec2:	0f 84 15 01 00 00    	je     c0010fdd <UnixFile::UnixFile(int)+0x16b>
c0010ec8:	c6 05 54 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a554,0x1
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	6a 0c                	push   0xc
c0010ed4:	e8 7f 12 00 00       	call   c0012158 <operator new(unsigned long)>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	89 c3                	mov    ebx,eax
c0010ede:	83 ec 08             	sub    esp,0x8
c0010ee1:	68 03 ff ff 0f       	push   0xfffff03
c0010ee6:	53                   	push   ebx
c0010ee7:	e8 f6 00 00 00       	call   c0010fe2 <ReservedFilename::ReservedFilename(int)>
c0010eec:	83 c4 10             	add    esp,0x10
c0010eef:	89 1d 4c a5 02 c0    	mov    DWORD PTR ds:0xc002a54c,ebx
c0010ef5:	83 ec 0c             	sub    esp,0xc
c0010ef8:	6a 0c                	push   0xc
c0010efa:	e8 59 12 00 00       	call   c0012158 <operator new(unsigned long)>
c0010eff:	83 c4 10             	add    esp,0x10
c0010f02:	89 c3                	mov    ebx,eax
c0010f04:	83 ec 08             	sub    esp,0x8
c0010f07:	68 01 ff ff 0f       	push   0xfffff01
c0010f0c:	53                   	push   ebx
c0010f0d:	e8 d0 00 00 00       	call   c0010fe2 <ReservedFilename::ReservedFilename(int)>
c0010f12:	83 c4 10             	add    esp,0x10
c0010f15:	89 1d 50 a5 02 c0    	mov    DWORD PTR ds:0xc002a550,ebx
c0010f1b:	83 ec 0c             	sub    esp,0xc
c0010f1e:	6a 0c                	push   0xc
c0010f20:	e8 33 12 00 00       	call   c0012158 <operator new(unsigned long)>
c0010f25:	83 c4 10             	add    esp,0x10
c0010f28:	89 c3                	mov    ebx,eax
c0010f2a:	83 ec 08             	sub    esp,0x8
c0010f2d:	68 00 ff ff 0f       	push   0xfffff00
c0010f32:	53                   	push   ebx
c0010f33:	e8 aa 00 00 00       	call   c0010fe2 <ReservedFilename::ReservedFilename(int)>
c0010f38:	83 c4 10             	add    esp,0x10
c0010f3b:	89 1d 44 a5 02 c0    	mov    DWORD PTR ds:0xc002a544,ebx
c0010f41:	83 ec 0c             	sub    esp,0xc
c0010f44:	6a 0c                	push   0xc
c0010f46:	e8 0d 12 00 00       	call   c0012158 <operator new(unsigned long)>
c0010f4b:	83 c4 10             	add    esp,0x10
c0010f4e:	89 c3                	mov    ebx,eax
c0010f50:	83 ec 08             	sub    esp,0x8
c0010f53:	68 02 ff ff 0f       	push   0xfffff02
c0010f58:	53                   	push   ebx
c0010f59:	e8 84 00 00 00       	call   c0010fe2 <ReservedFilename::ReservedFilename(int)>
c0010f5e:	83 c4 10             	add    esp,0x10
c0010f61:	89 1d 48 a5 02 c0    	mov    DWORD PTR ds:0xc002a548,ebx
c0010f67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f6f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f74:	7f 67                	jg     c0010fdd <UnixFile::UnixFile(int)+0x16b>
c0010f76:	83 ec 0c             	sub    esp,0xc
c0010f79:	6a 0c                	push   0xc
c0010f7b:	e8 d8 11 00 00       	call   c0012158 <operator new(unsigned long)>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	89 c3                	mov    ebx,eax
c0010f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f89:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f8e:	83 ec 08             	sub    esp,0x8
c0010f91:	50                   	push   eax
c0010f92:	53                   	push   ebx
c0010f93:	e8 4a 00 00 00       	call   c0010fe2 <ReservedFilename::ReservedFilename(int)>
c0010f98:	83 c4 10             	add    esp,0x10
c0010f9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f9f:	89 1c 85 20 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ae0],ebx
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	6a 0c                	push   0xc
c0010fab:	e8 a8 11 00 00       	call   c0012158 <operator new(unsigned long)>
c0010fb0:	83 c4 10             	add    esp,0x10
c0010fb3:	89 c3                	mov    ebx,eax
c0010fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fb9:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fbe:	83 ec 08             	sub    esp,0x8
c0010fc1:	50                   	push   eax
c0010fc2:	53                   	push   ebx
c0010fc3:	e8 1a 00 00 00       	call   c0010fe2 <ReservedFilename::ReservedFilename(int)>
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fcf:	89 1c 85 e0 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5b20],ebx
c0010fd6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fda:	eb 93                	jmp    c0010f6f <UnixFile::UnixFile(int)+0xfd>
c0010fdc:	90                   	nop
c0010fdd:	83 c4 18             	add    esp,0x18
c0010fe0:	5b                   	pop    ebx
c0010fe1:	c3                   	ret    

c0010fe2 <ReservedFilename::ReservedFilename(int)>:
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe9:	83 ec 08             	sub    esp,0x8
c0010fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff0:	50                   	push   eax
c0010ff1:	e8 7c fe ff ff       	call   c0010e72 <UnixFile::UnixFile(int)>
c0010ff6:	83 c4 10             	add    esp,0x10
c0010ff9:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c0010ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011002:	89 10                	mov    DWORD PTR [eax],edx
c0011004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011008:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001100c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001100f:	90                   	nop
c0011010:	83 c4 0c             	add    esp,0xc
c0011013:	c3                   	ret    

c0011014 <UnixFile::~UnixFile()>:
c0011014:	83 ec 1c             	sub    esp,0x1c
c0011017:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c001101c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011020:	89 10                	mov    DWORD PTR [eax],edx
c0011022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011029:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001102e:	7f 73                	jg     c00110a3 <UnixFile::~UnixFile()+0x8f>
c0011030:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	68 58 a5 02 c0       	push   0xc002a558
c0011040:	e8 79 41 01 00       	call   c00251be <LinkedList<UnixFile>::getFirstElement()>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001104c:	83 ec 0c             	sub    esp,0xc
c001104f:	68 58 a5 02 c0       	push   0xc002a558
c0011054:	e8 6d 41 01 00       	call   c00251c6 <LinkedList<UnixFile>::removeFirst()>
c0011059:	83 c4 10             	add    esp,0x10
c001105c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011060:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011064:	74 40                	je     c00110a6 <UnixFile::~UnixFile()+0x92>
c0011066:	83 ec 08             	sub    esp,0x8
c0011069:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001106d:	68 58 a5 02 c0       	push   0xc002a558
c0011072:	e8 73 40 01 00       	call   c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011077:	83 c4 10             	add    esp,0x10
c001107a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001107e:	8d 50 01             	lea    edx,[eax+0x1]
c0011081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011085:	3d 88 13 00 00       	cmp    eax,0x1388
c001108a:	0f 94 c0             	sete   al
c001108d:	84 c0                	test   al,al
c001108f:	74 a7                	je     c0011038 <UnixFile::~UnixFile()+0x24>
c0011091:	83 ec 0c             	sub    esp,0xc
c0011094:	68 0c 6e 02 c0       	push   0xc0026e0c
c0011099:	e8 47 79 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	eb 95                	jmp    c0011038 <UnixFile::~UnixFile()+0x24>
c00110a3:	90                   	nop
c00110a4:	eb 01                	jmp    c00110a7 <UnixFile::~UnixFile()+0x93>
c00110a6:	90                   	nop
c00110a7:	90                   	nop
c00110a8:	83 c4 1c             	add    esp,0x1c
c00110ab:	c3                   	ret    

c00110ac <UnixFile::~UnixFile()>:
c00110ac:	83 ec 0c             	sub    esp,0xc
c00110af:	83 ec 0c             	sub    esp,0xc
c00110b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110b6:	e8 59 ff ff ff       	call   c0011014 <UnixFile::~UnixFile()>
c00110bb:	83 c4 10             	add    esp,0x10
c00110be:	83 ec 08             	sub    esp,0x8
c00110c1:	6a 0c                	push   0xc
c00110c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c7:	e8 9b 10 00 00       	call   c0012167 <operator delete(void*, unsigned long)>
c00110cc:	83 c4 10             	add    esp,0x10
c00110cf:	83 c4 0c             	add    esp,0xc
c00110d2:	c3                   	ret    
c00110d3:	90                   	nop

c00110d4 <ReservedFilename::~ReservedFilename()>:
c00110d4:	83 ec 0c             	sub    esp,0xc
c00110d7:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c00110dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e0:	89 10                	mov    DWORD PTR [eax],edx
c00110e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e6:	83 ec 0c             	sub    esp,0xc
c00110e9:	50                   	push   eax
c00110ea:	e8 25 ff ff ff       	call   c0011014 <UnixFile::~UnixFile()>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	90                   	nop
c00110f3:	83 c4 0c             	add    esp,0xc
c00110f6:	c3                   	ret    
c00110f7:	90                   	nop

c00110f8 <ReservedFilename::~ReservedFilename()>:
c00110f8:	83 ec 0c             	sub    esp,0xc
c00110fb:	83 ec 0c             	sub    esp,0xc
c00110fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011102:	e8 cd ff ff ff       	call   c00110d4 <ReservedFilename::~ReservedFilename()>
c0011107:	83 c4 10             	add    esp,0x10
c001110a:	83 ec 08             	sub    esp,0x8
c001110d:	6a 0c                	push   0xc
c001110f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011113:	e8 4f 10 00 00       	call   c0012167 <operator delete(void*, unsigned long)>
c0011118:	83 c4 10             	add    esp,0x10
c001111b:	83 c4 0c             	add    esp,0xc
c001111e:	c3                   	ret    

c001111f <getFromFileDescriptor(int)>:
c001111f:	53                   	push   ebx
c0011120:	83 ec 08             	sub    esp,0x8
c0011123:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011127:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001112d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011133:	7f 2c                	jg     c0011161 <getFromFileDescriptor(int)+0x42>
c0011135:	83 ec 0c             	sub    esp,0xc
c0011138:	68 58 a5 02 c0       	push   0xc002a558
c001113d:	e8 7c 40 01 00       	call   c00251be <LinkedList<UnixFile>::getFirstElement()>
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	85 c0                	test   eax,eax
c0011147:	75 04                	jne    c001114d <getFromFileDescriptor(int)+0x2e>
c0011149:	31 c0                	xor    eax,eax
c001114b:	eb 6e                	jmp    c00111bb <getFromFileDescriptor(int)+0x9c>
c001114d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011150:	74 69                	je     c00111bb <getFromFileDescriptor(int)+0x9c>
c0011152:	52                   	push   edx
c0011153:	52                   	push   edx
c0011154:	50                   	push   eax
c0011155:	68 58 a5 02 c0       	push   0xc002a558
c001115a:	e8 09 41 01 00       	call   c0025268 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001115f:	eb e1                	jmp    c0011142 <getFromFileDescriptor(int)+0x23>
c0011161:	a1 4c a5 02 c0       	mov    eax,ds:0xc002a54c
c0011166:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001116c:	74 4d                	je     c00111bb <getFromFileDescriptor(int)+0x9c>
c001116e:	a1 50 a5 02 c0       	mov    eax,ds:0xc002a550
c0011173:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011179:	74 40                	je     c00111bb <getFromFileDescriptor(int)+0x9c>
c001117b:	a1 48 a5 02 c0       	mov    eax,ds:0xc002a548
c0011180:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011186:	74 33                	je     c00111bb <getFromFileDescriptor(int)+0x9c>
c0011188:	a1 44 a5 02 c0       	mov    eax,ds:0xc002a544
c001118d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011193:	74 26                	je     c00111bb <getFromFileDescriptor(int)+0x9c>
c0011195:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001119b:	83 f8 08             	cmp    eax,0x8
c001119e:	77 09                	ja     c00111a9 <getFromFileDescriptor(int)+0x8a>
c00111a0:	8b 04 85 20 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ae0]
c00111a7:	eb 12                	jmp    c00111bb <getFromFileDescriptor(int)+0x9c>
c00111a9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111af:	83 fb 08             	cmp    ebx,0x8
c00111b2:	77 95                	ja     c0011149 <getFromFileDescriptor(int)+0x2a>
c00111b4:	8b 04 9d e0 a4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5b20]
c00111bb:	83 c4 08             	add    esp,0x8
c00111be:	5b                   	pop    ebx
c00111bf:	c3                   	ret    

c00111c0 <__static_initialization_and_destruction_0(int, int)>:
c00111c0:	83 ec 0c             	sub    esp,0xc
c00111c3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111c8:	75 34                	jne    c00111fe <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111ca:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111d2:	75 2a                	jne    c00111fe <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111d4:	83 ec 0c             	sub    esp,0xc
c00111d7:	68 58 a5 02 c0       	push   0xc002a558
c00111dc:	e8 b1 3e 01 00       	call   c0025092 <LinkedList<UnixFile>::LinkedList()>
c00111e1:	83 c4 10             	add    esp,0x10
c00111e4:	83 ec 04             	sub    esp,0x4
c00111e7:	68 9c 93 02 c0       	push   0xc002939c
c00111ec:	68 58 a5 02 c0       	push   0xc002a558
c00111f1:	68 90 50 02 c0       	push   0xc0025090
c00111f6:	e8 e8 0e 00 00       	call   c00120e3 <__cxa_atexit>
c00111fb:	83 c4 10             	add    esp,0x10
c00111fe:	90                   	nop
c00111ff:	83 c4 0c             	add    esp,0xc
c0011202:	c3                   	ret    

c0011203 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011203:	83 ec 0c             	sub    esp,0xc
c0011206:	83 ec 08             	sub    esp,0x8
c0011209:	68 ff ff 00 00       	push   0xffff
c001120e:	6a 01                	push   0x1
c0011210:	e8 ab ff ff ff       	call   c00111c0 <__static_initialization_and_destruction_0(int, int)>
c0011215:	83 c4 10             	add    esp,0x10
c0011218:	83 c4 0c             	add    esp,0xc
c001121b:	c3                   	ret    

c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001121c:	53                   	push   ebx
c001121d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011221:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011225:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001122b:	89 c8                	mov    eax,ecx
c001122d:	d1 e8                	shr    eax,1
c001122f:	03 05 28 94 02 c0    	add    eax,DWORD PTR ds:0xc0029428
c0011235:	83 e1 01             	and    ecx,0x1
c0011238:	8a 10                	mov    dl,BYTE PTR [eax]
c001123a:	75 09                	jne    c0011245 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001123c:	83 e2 f0             	and    edx,0xfffffff0
c001123f:	09 da                	or     edx,ebx
c0011241:	88 10                	mov    BYTE PTR [eax],dl
c0011243:	5b                   	pop    ebx
c0011244:	c3                   	ret    
c0011245:	c1 e3 04             	shl    ebx,0x4
c0011248:	83 e2 0f             	and    edx,0xf
c001124b:	09 da                	or     edx,ebx
c001124d:	88 10                	mov    BYTE PTR [eax],dl
c001124f:	5b                   	pop    ebx
c0011250:	c3                   	ret    

c0011251 <Virt::getPageState(unsigned long)>:
c0011251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011255:	8b 0d 28 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029428
c001125b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011261:	89 d0                	mov    eax,edx
c0011263:	d1 e8                	shr    eax,1
c0011265:	83 e2 01             	and    edx,0x1
c0011268:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001126b:	75 04                	jne    c0011271 <Virt::getPageState(unsigned long)+0x20>
c001126d:	83 e0 0f             	and    eax,0xf
c0011270:	c3                   	ret    
c0011271:	c0 e8 04             	shr    al,0x4
c0011274:	c3                   	ret    

c0011275 <Virt::allocateKernelVirtualPages(int)>:
c0011275:	55                   	push   ebp
c0011276:	31 ed                	xor    ebp,ebp
c0011278:	57                   	push   edi
c0011279:	56                   	push   esi
c001127a:	53                   	push   ebx
c001127b:	31 db                	xor    ebx,ebx
c001127d:	83 ec 1c             	sub    esp,0x1c
c0011280:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011284:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c001128a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001128f:	57                   	push   edi
c0011290:	e8 bc ff ff ff       	call   c0011251 <Virt::getPageState(unsigned long)>
c0011295:	5a                   	pop    edx
c0011296:	84 c0                	test   al,al
c0011298:	75 3a                	jne    c00112d4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001129a:	85 db                	test   ebx,ebx
c001129c:	75 02                	jne    c00112a0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001129e:	89 fd                	mov    ebp,edi
c00112a0:	43                   	inc    ebx
c00112a1:	39 f3                	cmp    ebx,esi
c00112a3:	74 5a                	je     c00112ff <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112a5:	47                   	inc    edi
c00112a6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112ac:	76 31                	jbe    c00112df <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112ae:	c7 05 24 94 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029424,0xc8000
c00112b8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112bd:	75 28                	jne    c00112e7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112bf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112c4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112c9:	57                   	push   edi
c00112ca:	e8 82 ff ff ff       	call   c0011251 <Virt::getPageState(unsigned long)>
c00112cf:	5a                   	pop    edx
c00112d0:	84 c0                	test   al,al
c00112d2:	74 c6                	je     c001129a <Virt::allocateKernelVirtualPages(int)+0x25>
c00112d4:	31 db                	xor    ebx,ebx
c00112d6:	47                   	inc    edi
c00112d7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112dd:	77 cf                	ja     c00112ae <Virt::allocateKernelVirtualPages(int)+0x39>
c00112df:	89 3d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edi
c00112e5:	eb a8                	jmp    c001128f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112e7:	83 ec 0c             	sub    esp,0xc
c00112ea:	68 64 6e 02 c0       	push   0xc0026e64
c00112ef:	e8 f1 76 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c00112f4:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c00112fa:	83 c4 10             	add    esp,0x10
c00112fd:	eb 90                	jmp    c001128f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112ff:	89 2d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ebp
c0011305:	4b                   	dec    ebx
c0011306:	74 5f                	je     c0011367 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011308:	85 f6                	test   esi,esi
c001130a:	74 3d                	je     c0011349 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001130c:	89 e8                	mov    eax,ebp
c001130e:	31 db                	xor    ebx,ebx
c0011310:	8d 7e ff             	lea    edi,[esi-0x1]
c0011313:	eb 14                	jmp    c0011329 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011315:	6a 01                	push   0x1
c0011317:	43                   	inc    ebx
c0011318:	50                   	push   eax
c0011319:	e8 fe fe ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001131e:	58                   	pop    eax
c001131f:	39 f3                	cmp    ebx,esi
c0011321:	5a                   	pop    edx
c0011322:	74 25                	je     c0011349 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011324:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0011329:	8d 50 01             	lea    edx,[eax+0x1]
c001132c:	85 db                	test   ebx,ebx
c001132e:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c0011334:	74 20                	je     c0011356 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011336:	39 df                	cmp    edi,ebx
c0011338:	75 db                	jne    c0011315 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001133a:	6a 03                	push   0x3
c001133c:	43                   	inc    ebx
c001133d:	50                   	push   eax
c001133e:	e8 d9 fe ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011343:	59                   	pop    ecx
c0011344:	39 f3                	cmp    ebx,esi
c0011346:	58                   	pop    eax
c0011347:	75 db                	jne    c0011324 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011349:	83 c4 1c             	add    esp,0x1c
c001134c:	89 e8                	mov    eax,ebp
c001134e:	5b                   	pop    ebx
c001134f:	c1 e0 0c             	shl    eax,0xc
c0011352:	5e                   	pop    esi
c0011353:	5f                   	pop    edi
c0011354:	5d                   	pop    ebp
c0011355:	c3                   	ret    
c0011356:	6a 02                	push   0x2
c0011358:	bb 01 00 00 00       	mov    ebx,0x1
c001135d:	50                   	push   eax
c001135e:	e8 b9 fe ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011363:	58                   	pop    eax
c0011364:	5a                   	pop    edx
c0011365:	eb bd                	jmp    c0011324 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011367:	6a 04                	push   0x4
c0011369:	8d 45 01             	lea    eax,[ebp+0x1]
c001136c:	55                   	push   ebp
c001136d:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0011372:	e8 a5 fe ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011377:	59                   	pop    ecx
c0011378:	89 e8                	mov    eax,ebp
c001137a:	5b                   	pop    ebx
c001137b:	c1 e0 0c             	shl    eax,0xc
c001137e:	83 c4 1c             	add    esp,0x1c
c0011381:	5b                   	pop    ebx
c0011382:	5e                   	pop    esi
c0011383:	5f                   	pop    edi
c0011384:	5d                   	pop    ebp
c0011385:	c3                   	ret    

c0011386 <Virt::virtualMemorySetup()>:
c0011386:	53                   	push   ebx
c0011387:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001138c:	83 ec 08             	sub    esp,0x8
c001138f:	6a 0f                	push   0xf
c0011391:	53                   	push   ebx
c0011392:	43                   	inc    ebx
c0011393:	e8 84 fe ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011398:	59                   	pop    ecx
c0011399:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001139f:	58                   	pop    eax
c00113a0:	75 ed                	jne    c001138f <Virt::virtualMemorySetup()+0x9>
c00113a2:	83 ec 08             	sub    esp,0x8
c00113a5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113aa:	68 00 00 00 c8       	push   0xc8000000
c00113af:	68 eb 6f 02 c0       	push   0xc0026feb
c00113b4:	e8 8e 0e 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00113b9:	58                   	pop    eax
c00113ba:	5a                   	pop    edx
c00113bb:	68 00 f0 ff ef       	push   0xeffff000
c00113c0:	68 ff 6f 02 c0       	push   0xc0026fff
c00113c5:	e8 7d 0e 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	83 ec 08             	sub    esp,0x8
c00113d0:	6a 00                	push   0x0
c00113d2:	53                   	push   ebx
c00113d3:	43                   	inc    ebx
c00113d4:	e8 43 fe ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113d9:	83 c4 10             	add    esp,0x10
c00113dc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113e2:	75 e9                	jne    c00113cd <Virt::virtualMemorySetup()+0x47>
c00113e4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113e9:	83 ec 08             	sub    esp,0x8
c00113ec:	6a 0f                	push   0xf
c00113ee:	53                   	push   ebx
c00113ef:	43                   	inc    ebx
c00113f0:	e8 27 fe ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113f5:	83 c4 10             	add    esp,0x10
c00113f8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113fe:	75 e9                	jne    c00113e9 <Virt::virtualMemorySetup()+0x63>
c0011400:	83 c4 08             	add    esp,0x8
c0011403:	5b                   	pop    ebx
c0011404:	c3                   	ret    

c0011405 <Virt::getAKernelVAS()>:
c0011405:	a1 64 a5 02 c0       	mov    eax,ds:0xc002a564
c001140a:	c3                   	ret    

c001140b <Virt::setupPageSwapping(int)>:
c001140b:	57                   	push   edi
c001140c:	56                   	push   esi
c001140d:	53                   	push   ebx
c001140e:	83 ec 1c             	sub    esp,0x1c
c0011411:	68 14 01 00 00       	push   0x114
c0011416:	e8 3d 0d 00 00       	call   c0012158 <operator new(unsigned long)>
c001141b:	83 c4 0c             	add    esp,0xc
c001141e:	89 c6                	mov    esi,eax
c0011420:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c0011426:	68 13 70 02 c0       	push   0xc0027013
c001142b:	50                   	push   eax
c001142c:	e8 45 13 00 00       	call   c0012776 <File::File(char const*, Process*)>
c0011431:	89 34 24             	mov    DWORD PTR [esp],esi
c0011434:	e8 19 15 00 00       	call   c0012952 <File::unlink()>
c0011439:	58                   	pop    eax
c001143a:	5a                   	pop    edx
c001143b:	6a 12                	push   0x12
c001143d:	56                   	push   esi
c001143e:	e8 97 13 00 00       	call   c00127da <File::open(FileOpenMode)>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	85 c0                	test   eax,eax
c0011448:	0f 85 bf 00 00 00    	jne    c001150d <Virt::setupPageSwapping(int)+0x102>
c001144e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011452:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001145a:	c1 e3 08             	shl    ebx,0x8
c001145d:	83 ec 0c             	sub    esp,0xc
c0011460:	68 00 00 01 00       	push   0x10000
c0011465:	e8 d4 dc ff ff       	call   c000f13e <malloc>
c001146a:	83 c4 0c             	add    esp,0xc
c001146d:	89 c7                	mov    edi,eax
c001146f:	68 00 00 01 00       	push   0x10000
c0011474:	6a 00                	push   0x0
c0011476:	50                   	push   eax
c0011477:	e8 49 f2 fe ff       	call   c00006c5 <memset>
c001147c:	83 c4 10             	add    esp,0x10
c001147f:	85 db                	test   ebx,ebx
c0011481:	79 03                	jns    c0011486 <Virt::setupPageSwapping(int)+0x7b>
c0011483:	83 c3 0f             	add    ebx,0xf
c0011486:	c1 fb 04             	sar    ebx,0x4
c0011489:	4b                   	dec    ebx
c001148a:	83 fb ff             	cmp    ebx,0xffffffff
c001148d:	74 4b                	je     c00114da <Virt::setupPageSwapping(int)+0xcf>
c001148f:	83 ec 0c             	sub    esp,0xc
c0011492:	8b 06                	mov    eax,DWORD PTR [esi]
c0011494:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011498:	52                   	push   edx
c0011499:	57                   	push   edi
c001149a:	6a 00                	push   0x0
c001149c:	68 00 00 01 00       	push   0x10000
c00114a1:	56                   	push   esi
c00114a2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114a5:	83 c4 20             	add    esp,0x20
c00114a8:	85 c0                	test   eax,eax
c00114aa:	75 4e                	jne    c00114fa <Virt::setupPageSwapping(int)+0xef>
c00114ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114b0:	3d 00 00 01 00       	cmp    eax,0x10000
c00114b5:	74 d2                	je     c0011489 <Virt::setupPageSwapping(int)+0x7e>
c00114b7:	83 ec 08             	sub    esp,0x8
c00114ba:	4b                   	dec    ebx
c00114bb:	50                   	push   eax
c00114bc:	68 66 70 02 c0       	push   0xc0027066
c00114c1:	e8 81 0d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00114c6:	c7 04 24 6f 70 02 c0 	mov    DWORD PTR [esp],0xc002706f
c00114cd:	e8 13 75 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c00114d2:	83 c4 10             	add    esp,0x10
c00114d5:	83 fb ff             	cmp    ebx,0xffffffff
c00114d8:	75 b5                	jne    c001148f <Virt::setupPageSwapping(int)+0x84>
c00114da:	83 ec 0c             	sub    esp,0xc
c00114dd:	56                   	push   esi
c00114de:	e8 55 13 00 00       	call   c0012838 <File::close()>
c00114e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114e6:	e8 73 dc ff ff       	call   c000f15e <rfree>
c00114eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00114ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00114f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114f3:	83 c4 20             	add    esp,0x20
c00114f6:	5b                   	pop    ebx
c00114f7:	5e                   	pop    esi
c00114f8:	5f                   	pop    edi
c00114f9:	c3                   	ret    
c00114fa:	83 ec 08             	sub    esp,0x8
c00114fd:	50                   	push   eax
c00114fe:	68 4e 70 02 c0       	push   0xc002704e
c0011503:	e8 3f 0d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0011508:	83 c4 10             	add    esp,0x10
c001150b:	eb 9f                	jmp    c00114ac <Virt::setupPageSwapping(int)+0xa1>
c001150d:	83 ec 08             	sub    esp,0x8
c0011510:	50                   	push   eax
c0011511:	68 2a 70 02 c0       	push   0xc002702a
c0011516:	e8 2c 0d 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001151b:	c7 04 24 33 70 02 c0 	mov    DWORD PTR [esp],0xc0027033
c0011522:	e8 be 74 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0011527:	83 c4 10             	add    esp,0x10
c001152a:	e9 1f ff ff ff       	jmp    c001144e <Virt::setupPageSwapping(int)+0x43>
c001152f:	90                   	nop

c0011530 <VAS::VAS()>:
c0011530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011534:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001153b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153f:	a3 64 a5 02 c0       	mov    ds:0xc002a564,eax
c0011544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011548:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001154c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011550:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011557:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001155e:	90                   	nop
c001155f:	c3                   	ret    

c0011560 <VAS::VAS(VAS*)>:
c0011560:	83 ec 0c             	sub    esp,0xc
c0011563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011567:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001156e:	83 ec 0c             	sub    esp,0xc
c0011571:	68 84 6e 02 c0       	push   0xc0026e84
c0011576:	e8 6a 74 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c001157b:	83 c4 10             	add    esp,0x10
c001157e:	90                   	nop
c001157f:	83 c4 0c             	add    esp,0xc
c0011582:	c3                   	ret    
c0011583:	90                   	nop

c0011584 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011588:	89 c2                	mov    edx,eax
c001158a:	c1 e8 0a             	shr    eax,0xa
c001158d:	c1 ea 16             	shr    edx,0x16
c0011590:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011595:	19 c9                	sbb    ecx,ecx
c0011597:	c1 e2 0c             	shl    edx,0xc
c001159a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115a0:	25 fc 0f 00 00       	and    eax,0xffc
c00115a5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115ac:	01 d0                	add    eax,edx
c00115ae:	c3                   	ret    
c00115af:	90                   	nop

c00115b0 <VAS::getPageTableEntry(unsigned long)>:
c00115b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115b4:	89 ca                	mov    edx,ecx
c00115b6:	c1 e9 0a             	shr    ecx,0xa
c00115b9:	c1 ea 16             	shr    edx,0x16
c00115bc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115c2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115c8:	c1 e0 0c             	shl    eax,0xc
c00115cb:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115ce:	c3                   	ret    

c00115cf <Virt::freeKernelVirtualPages(unsigned long)>:
c00115cf:	57                   	push   edi
c00115d0:	56                   	push   esi
c00115d1:	be 01 00 00 00       	mov    esi,0x1
c00115d6:	53                   	push   ebx
c00115d7:	83 ec 10             	sub    esp,0x10
c00115da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115de:	c1 eb 0c             	shr    ebx,0xc
c00115e1:	eb 3f                	jmp    c0011622 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115e3:	e8 1d fe ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c00115e8:	83 ec 08             	sub    esp,0x8
c00115eb:	57                   	push   edi
c00115ec:	50                   	push   eax
c00115ed:	e8 be ff ff ff       	call   c00115b0 <VAS::getPageTableEntry(unsigned long)>
c00115f2:	83 c4 10             	add    esp,0x10
c00115f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00115f7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00115fb:	f6 c4 04             	test   ah,0x4
c00115fe:	75 5f                	jne    c001165f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011600:	80 fa 04             	cmp    dl,0x4
c0011603:	74 78                	je     c001167d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011605:	80 fa 02             	cmp    dl,0x2
c0011608:	0f 84 88 00 00 00    	je     c0011696 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001160e:	80 fa 03             	cmp    dl,0x3
c0011611:	0f 84 ad 00 00 00    	je     c00116c4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011617:	fe ca                	dec    dl
c0011619:	0f 84 92 00 00 00    	je     c00116b1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001161f:	43                   	inc    ebx
c0011620:	31 f6                	xor    esi,esi
c0011622:	53                   	push   ebx
c0011623:	e8 29 fc ff ff       	call   c0011251 <Virt::getPageState(unsigned long)>
c0011628:	5f                   	pop    edi
c0011629:	89 df                	mov    edi,ebx
c001162b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001162f:	c1 e7 0c             	shl    edi,0xc
c0011632:	84 c0                	test   al,al
c0011634:	75 ad                	jne    c00115e3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011636:	83 ec 0c             	sub    esp,0xc
c0011639:	68 75 70 02 c0       	push   0xc0027075
c001163e:	e8 a2 73 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0011643:	e8 bd fd ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c0011648:	5a                   	pop    edx
c0011649:	59                   	pop    ecx
c001164a:	57                   	push   edi
c001164b:	50                   	push   eax
c001164c:	e8 5f ff ff ff       	call   c00115b0 <VAS::getPageTableEntry(unsigned long)>
c0011651:	83 c4 10             	add    esp,0x10
c0011654:	8b 00                	mov    eax,DWORD PTR [eax]
c0011656:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001165a:	f6 c4 04             	test   ah,0x4
c001165d:	74 c0                	je     c001161f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001165f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011663:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011668:	83 ec 0c             	sub    esp,0xc
c001166b:	50                   	push   eax
c001166c:	e8 ed df ff ff       	call   c000f65e <Phys::freePage(unsigned long)>
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011678:	80 fa 04             	cmp    dl,0x4
c001167b:	75 88                	jne    c0011605 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001167d:	89 f0                	mov    eax,esi
c001167f:	84 c0                	test   al,al
c0011681:	75 47                	jne    c00116ca <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011683:	c7 44 24 20 a8 6e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ea8
c001168b:	83 c4 10             	add    esp,0x10
c001168e:	5b                   	pop    ebx
c001168f:	5e                   	pop    esi
c0011690:	5f                   	pop    edi
c0011691:	e9 4f 73 00 00       	jmp    c00189e5 <Krnl::panic(char const*)>
c0011696:	89 f0                	mov    eax,esi
c0011698:	84 c0                	test   al,al
c001169a:	75 15                	jne    c00116b1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001169c:	83 ec 0c             	sub    esp,0xc
c001169f:	68 91 70 02 c0       	push   0xc0027091
c00116a4:	e8 3c 73 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c00116a9:	83 c4 10             	add    esp,0x10
c00116ac:	e9 6e ff ff ff       	jmp    c001161f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116b1:	83 ec 08             	sub    esp,0x8
c00116b4:	6a 00                	push   0x0
c00116b6:	53                   	push   ebx
c00116b7:	e8 60 fb ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116bc:	83 c4 10             	add    esp,0x10
c00116bf:	e9 5b ff ff ff       	jmp    c001161f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116c4:	89 f0                	mov    eax,esi
c00116c6:	84 c0                	test   al,al
c00116c8:	75 15                	jne    c00116df <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116ca:	83 ec 08             	sub    esp,0x8
c00116cd:	6a 00                	push   0x0
c00116cf:	53                   	push   ebx
c00116d0:	e8 47 fb ff ff       	call   c001121c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d5:	83 c4 10             	add    esp,0x10
c00116d8:	83 c4 10             	add    esp,0x10
c00116db:	5b                   	pop    ebx
c00116dc:	5e                   	pop    esi
c00116dd:	5f                   	pop    edi
c00116de:	c3                   	ret    
c00116df:	c7 44 24 20 ad 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270ad
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	5b                   	pop    ebx
c00116eb:	5e                   	pop    esi
c00116ec:	5f                   	pop    edi
c00116ed:	e9 f3 72 00 00       	jmp    c00189e5 <Krnl::panic(char const*)>

c00116f2 <VAS::freeAllocatedPages(unsigned long)>:
c00116f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116fa:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00116fe:	74 09                	je     c0011709 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011700:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011704:	e9 c6 fe ff ff       	jmp    c00115cf <Virt::freeKernelVirtualPages(unsigned long)>
c0011709:	c7 44 24 04 cc 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026ecc
c0011711:	e9 31 0b 00 00       	jmp    c0012247 <Dbg::kprintf(char const*, ...)>

c0011716 <VAS::virtualToPhysical(unsigned long)>:
c0011716:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001171a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001171e:	e8 8d fe ff ff       	call   c00115b0 <VAS::getPageTableEntry(unsigned long)>
c0011723:	5a                   	pop    edx
c0011724:	8b 00                	mov    eax,DWORD PTR [eax]
c0011726:	59                   	pop    ecx
c0011727:	25 00 f0 ff ff       	and    eax,0xfffff000
c001172c:	c3                   	ret    
c001172d:	90                   	nop

c001172e <VAS::reflagRange(unsigned long, int, int, int)>:
c001172e:	55                   	push   ebp
c001172f:	57                   	push   edi
c0011730:	56                   	push   esi
c0011731:	53                   	push   ebx
c0011732:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011736:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001173a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001173e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011742:	85 db                	test   ebx,ebx
c0011744:	7e 22                	jle    c0011768 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011746:	c1 e3 0c             	shl    ebx,0xc
c0011749:	01 f3                	add    ebx,esi
c001174b:	56                   	push   esi
c001174c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011752:	55                   	push   ebp
c0011753:	e8 58 fe ff ff       	call   c00115b0 <VAS::getPageTableEntry(unsigned long)>
c0011758:	5a                   	pop    edx
c0011759:	59                   	pop    ecx
c001175a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001175c:	21 f9                	and    ecx,edi
c001175e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011762:	39 f3                	cmp    ebx,esi
c0011764:	89 08                	mov    DWORD PTR [eax],ecx
c0011766:	75 e3                	jne    c001174b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011768:	5b                   	pop    ebx
c0011769:	5e                   	pop    esi
c001176a:	5f                   	pop    edi
c001176b:	5d                   	pop    ebp
c001176c:	c3                   	ret    
c001176d:	90                   	nop

c001176e <VAS::setToWriteCombining(unsigned long, int)>:
c001176e:	83 ec 0c             	sub    esp,0xc
c0011771:	e8 ec 60 00 00       	call   c0017862 <CPU::current()>
c0011776:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001177d:	75 04                	jne    c0011783 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001177f:	83 c4 0c             	add    esp,0xc
c0011782:	c3                   	ret    
c0011783:	83 ec 0c             	sub    esp,0xc
c0011786:	68 80 00 00 00       	push   0x80
c001178b:	6a ff                	push   0xffffffff
c001178d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011795:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011799:	e8 90 ff ff ff       	call   c001172e <VAS::reflagRange(unsigned long, int, int, int)>
c001179e:	83 c4 20             	add    esp,0x20
c00117a1:	83 c4 0c             	add    esp,0xc
c00117a4:	c3                   	ret    
c00117a5:	90                   	nop

c00117a6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117a6:	83 ec 0c             	sub    esp,0xc
c00117a9:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117b2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117bc:	19 c0                	sbb    eax,eax
c00117be:	83 ca 03             	or     edx,0x3
c00117c1:	83 e0 fc             	and    eax,0xfffffffc
c00117c4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117cb:	e8 a5 38 01 00       	call   c0025075 <CPU::readCR3()>
c00117d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117d4:	83 c4 0c             	add    esp,0xc
c00117d7:	e9 ab 38 01 00       	jmp    c0025087 <CPU::writeCR3(unsigned long)>

c00117dc <VAS::~VAS()>:
c00117dc:	83 ec 2c             	sub    esp,0x2c
c00117df:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117e7:	e8 4c a1 00 00       	call   c001b938 <lockScheduler()>
c00117ec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00117f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117f6:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00117fc:	83 ec 04             	sub    esp,0x4
c00117ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011803:	6a 01                	push   0x1
c0011805:	50                   	push   eax
c0011806:	e8 9b ff ff ff       	call   c00117a6 <VAS::mapOtherVASIn(bool, VAS*)>
c001180b:	83 c4 10             	add    esp,0x10
c001180e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011816:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001181e:	0f 8f d7 00 00 00    	jg     c00118fb <VAS::~VAS()+0x11f>
c0011824:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011828:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001182b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001182f:	c1 e2 02             	shl    edx,0x2
c0011832:	01 d0                	add    eax,edx
c0011834:	8b 00                	mov    eax,DWORD PTR [eax]
c0011836:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001183a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001183e:	83 e0 01             	and    eax,0x1
c0011841:	0f 84 ab 00 00 00    	je     c00118f2 <VAS::~VAS()+0x116>
c0011847:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001184f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011857:	7f 75                	jg     c00118ce <VAS::~VAS()+0xf2>
c0011859:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001185d:	c1 e0 0a             	shl    eax,0xa
c0011860:	89 c2                	mov    edx,eax
c0011862:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011866:	01 d0                	add    eax,edx
c0011868:	c1 e0 0c             	shl    eax,0xc
c001186b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001186f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011874:	8b 00                	mov    eax,DWORD PTR [eax]
c0011876:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011879:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001187f:	83 ec 04             	sub    esp,0x4
c0011882:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011886:	6a 01                	push   0x1
c0011888:	50                   	push   eax
c0011889:	e8 f6 fc ff ff       	call   c0011584 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011899:	8b 00                	mov    eax,DWORD PTR [eax]
c001189b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001189f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118a3:	25 01 04 00 00       	and    eax,0x401
c00118a8:	3d 01 04 00 00       	cmp    eax,0x401
c00118ad:	75 19                	jne    c00118c8 <VAS::~VAS()+0xec>
c00118af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118b8:	83 ec 0c             	sub    esp,0xc
c00118bb:	50                   	push   eax
c00118bc:	e8 9d dd ff ff       	call   c000f65e <Phys::freePage(unsigned long)>
c00118c1:	83 c4 10             	add    esp,0x10
c00118c4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118c8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118cc:	eb 81                	jmp    c001184f <VAS::~VAS()+0x73>
c00118ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d2:	25 00 04 00 00       	and    eax,0x400
c00118d7:	74 19                	je     c00118f2 <VAS::~VAS()+0x116>
c00118d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e2:	83 ec 0c             	sub    esp,0xc
c00118e5:	50                   	push   eax
c00118e6:	e8 73 dd ff ff       	call   c000f65e <Phys::freePage(unsigned long)>
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118f6:	e9 1b ff ff ff       	jmp    c0011816 <VAS::~VAS()+0x3a>
c00118fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011902:	83 ec 0c             	sub    esp,0xc
c0011905:	50                   	push   eax
c0011906:	e8 c4 fc ff ff       	call   c00115cf <Virt::freeKernelVirtualPages(unsigned long)>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011912:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011915:	83 ec 0c             	sub    esp,0xc
c0011918:	50                   	push   eax
c0011919:	e8 40 dd ff ff       	call   c000f65e <Phys::freePage(unsigned long)>
c001191e:	83 c4 10             	add    esp,0x10
c0011921:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011925:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011929:	c1 e0 02             	shl    eax,0x2
c001192c:	83 ec 08             	sub    esp,0x8
c001192f:	50                   	push   eax
c0011930:	68 f0 6e 02 c0       	push   0xc0026ef0
c0011935:	e8 0d 09 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001193a:	83 c4 10             	add    esp,0x10
c001193d:	e8 f8 9f 00 00       	call   c001b93a <unlockScheduler()>
c0011942:	90                   	nop
c0011943:	83 c4 2c             	add    esp,0x2c
c0011946:	c3                   	ret    
c0011947:	90                   	nop

c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011948:	55                   	push   ebp
c0011949:	57                   	push   edi
c001194a:	56                   	push   esi
c001194b:	53                   	push   ebx
c001194c:	83 ec 1c             	sub    esp,0x1c
c001194f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011953:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011957:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001195d:	77 08                	ja     c0011967 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001195f:	0f 20 d8             	mov    eax,cr3
c0011962:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011965:	75 47                	jne    c00119ae <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011967:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001196b:	09 d8                	or     eax,ebx
c001196d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011972:	75 57                	jne    c00119cb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011974:	89 de                	mov    esi,ebx
c0011976:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011979:	c1 ee 16             	shr    esi,0x16
c001197c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011983:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011987:	74 54                	je     c00119dd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011989:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001198d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011993:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011997:	c1 e6 0c             	shl    esi,0xc
c001199a:	c1 eb 0a             	shr    ebx,0xa
c001199d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119a3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119a6:	83 c4 1c             	add    esp,0x1c
c00119a9:	5b                   	pop    ebx
c00119aa:	5e                   	pop    esi
c00119ab:	5f                   	pop    edi
c00119ac:	5d                   	pop    ebp
c00119ad:	c3                   	ret    
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	68 10 6f 02 c0       	push   0xc0026f10
c00119b6:	e8 8c 08 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00119bb:	83 c4 10             	add    esp,0x10
c00119be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119c2:	09 d8                	or     eax,ebx
c00119c4:	a9 ff 0f 00 00       	test   eax,0xfff
c00119c9:	74 a9                	je     c0011974 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119cb:	83 ec 0c             	sub    esp,0xc
c00119ce:	68 78 6f 02 c0       	push   0xc0026f78
c00119d3:	e8 0d 70 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c00119d8:	83 c4 10             	add    esp,0x10
c00119db:	eb 97                	jmp    c0011974 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119e1:	e8 02 dd ff ff       	call   c000f6e8 <Phys::allocatePage()>
c00119e6:	89 c5                	mov    ebp,eax
c00119e8:	e8 18 fa ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c00119ed:	83 ec 0c             	sub    esp,0xc
c00119f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119f4:	6a 01                	push   0x1
c00119f6:	e8 7a f8 ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c00119fb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a02:	6a 01                	push   0x1
c0011a04:	50                   	push   eax
c0011a05:	55                   	push   ebp
c0011a06:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a0c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a10:	51                   	push   ecx
c0011a11:	e8 1e 02 00 00       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a16:	83 c4 1c             	add    esp,0x1c
c0011a19:	68 00 10 00 00       	push   0x1000
c0011a1e:	6a 00                	push   0x0
c0011a20:	50                   	push   eax
c0011a21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a25:	e8 9b ec fe ff       	call   c00006c5 <memset>
c0011a2a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a2e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a31:	e8 99 fb ff ff       	call   c00115cf <Virt::freeKernelVirtualPages(unsigned long)>
c0011a36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a3a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a3d:	83 c4 10             	add    esp,0x10
c0011a40:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a43:	e9 41 ff ff ff       	jmp    c0011989 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a48 <VAS::allocatePages(int, int)>:
c0011a48:	55                   	push   ebp
c0011a49:	57                   	push   edi
c0011a4a:	56                   	push   esi
c0011a4b:	53                   	push   ebx
c0011a4c:	83 ec 1c             	sub    esp,0x1c
c0011a4f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a53:	e8 0a 5e 00 00       	call   c0017862 <CPU::current()>
c0011a58:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a5e:	83 e0 01             	and    eax,0x1
c0011a61:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a69:	0f 85 d7 00 00 00    	jne    c0011b46 <VAS::allocatePages(int, int)+0xfe>
c0011a6f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a76:	85 c0                	test   eax,eax
c0011a78:	0f 84 ac 00 00 00    	je     c0011b2a <VAS::allocatePages(int, int)+0xe2>
c0011a7e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a82:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a86:	c1 e6 0c             	shl    esi,0xc
c0011a89:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a8d:	85 c0                	test   eax,eax
c0011a8f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a92:	7e 33                	jle    c0011ac7 <VAS::allocatePages(int, int)+0x7f>
c0011a94:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a98:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a9c:	81 cd 00 04 00 00    	or     ebp,0x400
c0011aa2:	e8 41 dc ff ff       	call   c000f6e8 <Phys::allocatePage()>
c0011aa7:	55                   	push   ebp
c0011aa8:	53                   	push   ebx
c0011aa9:	50                   	push   eax
c0011aaa:	57                   	push   edi
c0011aab:	e8 98 fe ff ff       	call   c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ab8:	74 03                	je     c0011abd <VAS::allocatePages(int, int)+0x75>
c0011aba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011abd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ac3:	39 de                	cmp    esi,ebx
c0011ac5:	75 db                	jne    c0011aa2 <VAS::allocatePages(int, int)+0x5a>
c0011ac7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011acc:	74 3f                	je     c0011b0d <VAS::allocatePages(int, int)+0xc5>
c0011ace:	c1 ee 0a             	shr    esi,0xa
c0011ad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ad5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011adb:	c1 eb 0a             	shr    ebx,0xa
c0011ade:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011ae4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011aea:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011af0:	39 f3                	cmp    ebx,esi
c0011af2:	77 0d                	ja     c0011b01 <VAS::allocatePages(int, int)+0xb9>
c0011af4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011af7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011afd:	39 de                	cmp    esi,ebx
c0011aff:	73 f3                	jae    c0011af4 <VAS::allocatePages(int, int)+0xac>
c0011b01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b05:	83 c4 1c             	add    esp,0x1c
c0011b08:	5b                   	pop    ebx
c0011b09:	5e                   	pop    esi
c0011b0a:	5f                   	pop    edi
c0011b0b:	5d                   	pop    ebp
c0011b0c:	c3                   	ret    
c0011b0d:	e8 63 35 01 00       	call   c0025075 <CPU::readCR3()>
c0011b12:	83 ec 0c             	sub    esp,0xc
c0011b15:	50                   	push   eax
c0011b16:	e8 6c 35 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b22:	83 c4 1c             	add    esp,0x1c
c0011b25:	5b                   	pop    ebx
c0011b26:	5e                   	pop    esi
c0011b27:	5f                   	pop    edi
c0011b28:	5d                   	pop    ebp
c0011b29:	c3                   	ret    
c0011b2a:	83 ec 0c             	sub    esp,0xc
c0011b2d:	68 9c 6f 02 c0       	push   0xc0026f9c
c0011b32:	e8 ae 6e 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0011b37:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	e9 38 ff ff ff       	jmp    c0011a7e <VAS::allocatePages(int, int)+0x36>
c0011b46:	83 ec 0c             	sub    esp,0xc
c0011b49:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b4d:	e8 23 f7 ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c0011b52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b5e:	0f 87 94 00 00 00    	ja     c0011bf8 <VAS::allocatePages(int, int)+0x1b0>
c0011b64:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b68:	85 d2                	test   edx,edx
c0011b6a:	7e 3c                	jle    c0011ba8 <VAS::allocatePages(int, int)+0x160>
c0011b6c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b70:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b78:	c1 e5 0c             	shl    ebp,0xc
c0011b7b:	81 ce 00 04 00 00    	or     esi,0x400
c0011b81:	01 dd                	add    ebp,ebx
c0011b83:	e8 60 db ff ff       	call   c000f6e8 <Phys::allocatePage()>
c0011b88:	56                   	push   esi
c0011b89:	53                   	push   ebx
c0011b8a:	50                   	push   eax
c0011b8b:	57                   	push   edi
c0011b8c:	e8 b7 fd ff ff       	call   c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b91:	83 c4 10             	add    esp,0x10
c0011b94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b99:	74 03                	je     c0011b9e <VAS::allocatePages(int, int)+0x156>
c0011b9b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b9e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ba4:	39 dd                	cmp    ebp,ebx
c0011ba6:	75 db                	jne    c0011b83 <VAS::allocatePages(int, int)+0x13b>
c0011ba8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bad:	0f 84 5a ff ff ff    	je     c0011b0d <VAS::allocatePages(int, int)+0xc5>
c0011bb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bbb:	89 d3                	mov    ebx,edx
c0011bbd:	c1 e0 0c             	shl    eax,0xc
c0011bc0:	c1 eb 0a             	shr    ebx,0xa
c0011bc3:	01 d0                	add    eax,edx
c0011bc5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bcb:	c1 e8 0a             	shr    eax,0xa
c0011bce:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bd4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bd9:	2d 00 00 40 00       	sub    eax,0x400000
c0011bde:	39 c3                	cmp    ebx,eax
c0011be0:	0f 87 1b ff ff ff    	ja     c0011b01 <VAS::allocatePages(int, int)+0xb9>
c0011be6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011be9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bef:	39 d8                	cmp    eax,ebx
c0011bf1:	73 f3                	jae    c0011be6 <VAS::allocatePages(int, int)+0x19e>
c0011bf3:	e9 09 ff ff ff       	jmp    c0011b01 <VAS::allocatePages(int, int)+0xb9>
c0011bf8:	e8 65 5c 00 00       	call   c0017862 <CPU::current()>
c0011bfd:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c04:	0f 84 5a ff ff ff    	je     c0011b64 <VAS::allocatePages(int, int)+0x11c>
c0011c0a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c12:	e9 4d ff ff ff       	jmp    c0011b64 <VAS::allocatePages(int, int)+0x11c>
c0011c17:	90                   	nop

c0011c18 <VAS::setCPUSpecific(unsigned long)>:
c0011c18:	83 ec 0c             	sub    esp,0xc
c0011c1b:	6a 05                	push   0x5
c0011c1d:	68 00 00 40 c2       	push   0xc2400000
c0011c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c2a:	e8 19 fd ff ff       	call   c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c2f:	83 c4 1c             	add    esp,0x1c
c0011c32:	c3                   	ret    
c0011c33:	90                   	nop

c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c34:	55                   	push   ebp
c0011c35:	57                   	push   edi
c0011c36:	56                   	push   esi
c0011c37:	53                   	push   ebx
c0011c38:	83 ec 1c             	sub    esp,0x1c
c0011c3b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c3f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c43:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c47:	e8 16 5c 00 00       	call   c0017862 <CPU::current()>
c0011c4c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c52:	83 e0 01             	and    eax,0x1
c0011c55:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c5d:	85 c0                	test   eax,eax
c0011c5f:	7e 39                	jle    c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c65:	89 f3                	mov    ebx,esi
c0011c67:	c1 e0 0c             	shl    eax,0xc
c0011c6a:	01 f0                	add    eax,esi
c0011c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c70:	55                   	push   ebp
c0011c71:	53                   	push   ebx
c0011c72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c76:	29 f0                	sub    eax,esi
c0011c78:	01 d8                	add    eax,ebx
c0011c7a:	50                   	push   eax
c0011c7b:	57                   	push   edi
c0011c7c:	e8 c7 fc ff ff       	call   c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c81:	83 c4 10             	add    esp,0x10
c0011c84:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c89:	74 03                	je     c0011c8e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c8b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c8e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c94:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c98:	75 d6                	jne    c0011c70 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011c9a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c9f:	74 42                	je     c0011ce3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011ca1:	89 f3                	mov    ebx,esi
c0011ca3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ca7:	c1 eb 0a             	shr    ebx,0xa
c0011caa:	c1 e0 0c             	shl    eax,0xc
c0011cad:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cb3:	01 f0                	add    eax,esi
c0011cb5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cbb:	c1 e8 0a             	shr    eax,0xa
c0011cbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cc3:	2d 00 00 40 00       	sub    eax,0x400000
c0011cc8:	39 c3                	cmp    ebx,eax
c0011cca:	77 0d                	ja     c0011cd9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011ccc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ccf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cd5:	39 d8                	cmp    eax,ebx
c0011cd7:	73 f3                	jae    c0011ccc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011cd9:	83 c4 1c             	add    esp,0x1c
c0011cdc:	89 f0                	mov    eax,esi
c0011cde:	5b                   	pop    ebx
c0011cdf:	5e                   	pop    esi
c0011ce0:	5f                   	pop    edi
c0011ce1:	5d                   	pop    ebp
c0011ce2:	c3                   	ret    
c0011ce3:	e8 8d 33 01 00       	call   c0025075 <CPU::readCR3()>
c0011ce8:	83 ec 0c             	sub    esp,0xc
c0011ceb:	50                   	push   eax
c0011cec:	e8 96 33 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c0011cf1:	89 f0                	mov    eax,esi
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	83 c4 1c             	add    esp,0x1c
c0011cf9:	5b                   	pop    ebx
c0011cfa:	5e                   	pop    esi
c0011cfb:	5f                   	pop    edi
c0011cfc:	5d                   	pop    ebp
c0011cfd:	c3                   	ret    

c0011cfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011cfe:	55                   	push   ebp
c0011cff:	57                   	push   edi
c0011d00:	56                   	push   esi
c0011d01:	53                   	push   ebx
c0011d02:	83 ec 1c             	sub    esp,0x1c
c0011d05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d09:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d0d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d11:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d15:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d1a:	75 4a                	jne    c0011d66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d1c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d20:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d23:	c1 eb 16             	shr    ebx,0x16
c0011d26:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d2d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d31:	74 4d                	je     c0011d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d37:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d3b:	c1 e8 0a             	shr    eax,0xa
c0011d3e:	80 fa 01             	cmp    dl,0x1
c0011d41:	19 d2                	sbb    edx,edx
c0011d43:	c1 e3 0c             	shl    ebx,0xc
c0011d46:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d4a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d50:	25 fc 0f 00 00       	and    eax,0xffc
c0011d55:	01 d8                	add    eax,ebx
c0011d57:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d5e:	83 c4 1c             	add    esp,0x1c
c0011d61:	5b                   	pop    ebx
c0011d62:	5e                   	pop    esi
c0011d63:	5f                   	pop    edi
c0011d64:	5d                   	pop    ebp
c0011d65:	c3                   	ret    
c0011d66:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	68 c8 6f 02 c0       	push   0xc0026fc8
c0011d72:	e8 6e 6c 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d7e:	eb 9c                	jmp    c0011d1c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d84:	e8 5f d9 ff ff       	call   c000f6e8 <Phys::allocatePage()>
c0011d89:	89 c5                	mov    ebp,eax
c0011d8b:	e8 75 f6 ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c0011d90:	83 ec 0c             	sub    esp,0xc
c0011d93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d97:	6a 01                	push   0x1
c0011d99:	e8 d7 f4 ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c0011d9e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011da5:	6a 01                	push   0x1
c0011da7:	50                   	push   eax
c0011da8:	55                   	push   ebp
c0011da9:	81 cd 07 04 00 00    	or     ebp,0x407
c0011daf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011db3:	51                   	push   ecx
c0011db4:	e8 7b fe ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011db9:	83 c4 1c             	add    esp,0x1c
c0011dbc:	68 00 10 00 00       	push   0x1000
c0011dc1:	6a 00                	push   0x0
c0011dc3:	50                   	push   eax
c0011dc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dc8:	e8 f8 e8 fe ff       	call   c00006c5 <memset>
c0011dcd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dd1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dd4:	e8 f6 f7 ff ff       	call   c00115cf <Virt::freeKernelVirtualPages(unsigned long)>
c0011dd9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ddc:	83 c4 10             	add    esp,0x10
c0011ddf:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011de2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011de6:	e9 48 ff ff ff       	jmp    c0011d33 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011deb:	90                   	nop

c0011dec <VAS::VAS(bool)>:
c0011dec:	53                   	push   ebx
c0011ded:	83 ec 28             	sub    esp,0x28
c0011df0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011df4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011df8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011dfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e07:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e0b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e0e:	e8 d5 d8 ff ff       	call   c000f6e8 <Phys::allocatePage()>
c0011e13:	89 c2                	mov    edx,eax
c0011e15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e1c:	e8 e4 f5 ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c0011e21:	89 c3                	mov    ebx,eax
c0011e23:	83 ec 0c             	sub    esp,0xc
c0011e26:	6a 01                	push   0x1
c0011e28:	e8 48 f4 ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	89 c2                	mov    edx,eax
c0011e32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e39:	83 ec 0c             	sub    esp,0xc
c0011e3c:	6a 03                	push   0x3
c0011e3e:	6a 01                	push   0x1
c0011e40:	52                   	push   edx
c0011e41:	50                   	push   eax
c0011e42:	53                   	push   ebx
c0011e43:	e8 ec fd ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e48:	83 c4 20             	add    esp,0x20
c0011e4b:	89 c2                	mov    edx,eax
c0011e4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e51:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e54:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e5c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e64:	7f 1c                	jg     c0011e82 <VAS::VAS(bool)+0x96>
c0011e66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e71:	c1 e2 02             	shl    edx,0x2
c0011e74:	01 d0                	add    eax,edx
c0011e76:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e80:	eb da                	jmp    c0011e5c <VAS::VAS(bool)+0x70>
c0011e82:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e8a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e92:	7f 71                	jg     c0011f05 <VAS::VAS(bool)+0x119>
c0011e94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e98:	2d 00 02 00 00       	sub    eax,0x200
c0011e9d:	c1 e0 0c             	shl    eax,0xc
c0011ea0:	83 c8 03             	or     eax,0x3
c0011ea3:	89 c3                	mov    ebx,eax
c0011ea5:	e8 b8 59 00 00       	call   c0017862 <CPU::current()>
c0011eaa:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011eb0:	83 e0 10             	and    eax,0x10
c0011eb3:	84 c0                	test   al,al
c0011eb5:	74 07                	je     c0011ebe <VAS::VAS(bool)+0xd2>
c0011eb7:	b8 00 01 00 00       	mov    eax,0x100
c0011ebc:	eb 05                	jmp    c0011ec3 <VAS::VAS(bool)+0xd7>
c0011ebe:	b8 00 00 00 00       	mov    eax,0x0
c0011ec3:	09 d8                	or     eax,ebx
c0011ec5:	89 c1                	mov    ecx,eax
c0011ec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ecb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ece:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ed2:	c1 e2 02             	shl    edx,0x2
c0011ed5:	01 d0                	add    eax,edx
c0011ed7:	89 ca                	mov    edx,ecx
c0011ed9:	89 10                	mov    DWORD PTR [eax],edx
c0011edb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011edf:	2d 40 03 00 00       	sub    eax,0x340
c0011ee4:	83 f8 7f             	cmp    eax,0x7f
c0011ee7:	77 16                	ja     c0011eff <VAS::VAS(bool)+0x113>
c0011ee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ef0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ef4:	c1 e2 02             	shl    edx,0x2
c0011ef7:	01 d0                	add    eax,edx
c0011ef9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011eff:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f03:	eb 85                	jmp    c0011e8a <VAS::VAS(bool)+0x9e>
c0011f05:	e8 58 59 00 00       	call   c0017862 <CPU::current()>
c0011f0a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f10:	83 e0 10             	and    eax,0x10
c0011f13:	84 c0                	test   al,al
c0011f15:	74 07                	je     c0011f1e <VAS::VAS(bool)+0x132>
c0011f17:	b8 03 41 00 00       	mov    eax,0x4103
c0011f1c:	eb 05                	jmp    c0011f23 <VAS::VAS(bool)+0x137>
c0011f1e:	b8 03 40 00 00       	mov    eax,0x4003
c0011f23:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f27:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f2a:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f30:	89 02                	mov    DWORD PTR [edx],eax
c0011f32:	e8 2b 59 00 00       	call   c0017862 <CPU::current()>
c0011f37:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f3d:	83 ec 08             	sub    esp,0x8
c0011f40:	50                   	push   eax
c0011f41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f45:	e8 ce fc ff ff       	call   c0011c18 <VAS::setCPUSpecific(unsigned long)>
c0011f4a:	83 c4 10             	add    esp,0x10
c0011f4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f51:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f54:	e8 09 59 00 00       	call   c0017862 <CPU::current()>
c0011f59:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f5f:	83 e0 10             	and    eax,0x10
c0011f62:	84 c0                	test   al,al
c0011f64:	74 07                	je     c0011f6d <VAS::VAS(bool)+0x181>
c0011f66:	b8 00 01 00 00       	mov    eax,0x100
c0011f6b:	eb 05                	jmp    c0011f72 <VAS::VAS(bool)+0x186>
c0011f6d:	b8 00 00 00 00       	mov    eax,0x0
c0011f72:	09 d8                	or     eax,ebx
c0011f74:	89 c2                	mov    edx,eax
c0011f76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f7d:	05 fc 0f 00 00       	add    eax,0xffc
c0011f82:	83 ca 03             	or     edx,0x3
c0011f85:	89 10                	mov    DWORD PTR [eax],edx
c0011f87:	e8 d6 58 00 00       	call   c0017862 <CPU::current()>
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	50                   	push   eax
c0011f90:	e8 9f 19 00 00       	call   c0013934 <Device::getName()>
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	83 ec 08             	sub    esp,0x8
c0011f9b:	68 c7 70 02 c0       	push   0xc00270c7
c0011fa0:	50                   	push   eax
c0011fa1:	e8 0f e8 fe ff       	call   c00007b5 <strcmp>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	85 c0                	test   eax,eax
c0011fab:	0f 94 c0             	sete   al
c0011fae:	84 c0                	test   al,al
c0011fb0:	74 64                	je     c0012016 <VAS::VAS(bool)+0x22a>
c0011fb2:	e8 64 99 00 00       	call   c001b91b <disableIRQs()>
c0011fb7:	e8 a6 58 00 00       	call   c0017862 <CPU::current()>
c0011fbc:	05 7c 09 00 00       	add    eax,0x97c
c0011fc1:	83 ec 0c             	sub    esp,0xc
c0011fc4:	50                   	push   eax
c0011fc5:	e8 e6 cb ff ff       	call   c000ebb0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fca:	83 c4 10             	add    esp,0x10
c0011fcd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fd2:	89 c3                	mov    ebx,eax
c0011fd4:	e8 89 58 00 00       	call   c0017862 <CPU::current()>
c0011fd9:	05 7c 09 00 00       	add    eax,0x97c
c0011fde:	83 ec 0c             	sub    esp,0xc
c0011fe1:	50                   	push   eax
c0011fe2:	e8 c9 cb ff ff       	call   c000ebb0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	83 ec 08             	sub    esp,0x8
c0011fed:	50                   	push   eax
c0011fee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ff2:	e8 b9 f5 ff ff       	call   c00115b0 <VAS::getPageTableEntry(unsigned long)>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012001:	6a 11                	push   0x11
c0012003:	53                   	push   ebx
c0012004:	50                   	push   eax
c0012005:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012009:	e8 3a f9 ff ff       	call   c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001200e:	83 c4 10             	add    esp,0x10
c0012011:	e8 13 99 00 00       	call   c001b929 <enableIRQs()>
c0012016:	90                   	nop
c0012017:	83 c4 28             	add    esp,0x28
c001201a:	5b                   	pop    ebx
c001201b:	c3                   	ret    

c001201c <mapVASFirstTime>:
c001201c:	55                   	push   ebp
c001201d:	57                   	push   edi
c001201e:	56                   	push   esi
c001201f:	53                   	push   ebx
c0012020:	83 ec 0c             	sub    esp,0xc
c0012023:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012028:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001202b:	4a                   	dec    edx
c001202c:	0f 84 99 00 00 00    	je     c00120cb <mapVASFirstTime+0xaf>
c0012032:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012035:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012038:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001203d:	c1 e5 15             	shl    ebp,0x15
c0012040:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012045:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001204b:	29 eb                	sub    ebx,ebp
c001204d:	29 ee                	sub    esi,ebp
c001204f:	e8 94 d6 ff ff       	call   c000f6e8 <Phys::allocatePage()>
c0012054:	83 ec 0c             	sub    esp,0xc
c0012057:	68 03 04 00 00       	push   0x403
c001205c:	6a 01                	push   0x1
c001205e:	53                   	push   ebx
c001205f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012065:	50                   	push   eax
c0012066:	57                   	push   edi
c0012067:	e8 c8 fb ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001206c:	83 c4 20             	add    esp,0x20
c001206f:	39 f3                	cmp    ebx,esi
c0012071:	75 dc                	jne    c001204f <mapVASFirstTime+0x33>
c0012073:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012078:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001207d:	29 ee                	sub    esi,ebp
c001207f:	29 e8                	sub    eax,ebp
c0012081:	89 c5                	mov    ebp,eax
c0012083:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012087:	19 db                	sbb    ebx,ebx
c0012089:	e8 5a d6 ff ff       	call   c000f6e8 <Phys::allocatePage()>
c001208e:	83 e3 04             	and    ebx,0x4
c0012091:	83 ec 0c             	sub    esp,0xc
c0012094:	81 c3 03 04 00 00    	add    ebx,0x403
c001209a:	53                   	push   ebx
c001209b:	6a 01                	push   0x1
c001209d:	56                   	push   esi
c001209e:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120a4:	50                   	push   eax
c00120a5:	57                   	push   edi
c00120a6:	e8 89 fb ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120ab:	83 c4 20             	add    esp,0x20
c00120ae:	39 f5                	cmp    ebp,esi
c00120b0:	75 d1                	jne    c0012083 <mapVASFirstTime+0x67>
c00120b2:	e8 be 2f 01 00       	call   c0025075 <CPU::readCR3()>
c00120b7:	83 ec 0c             	sub    esp,0xc
c00120ba:	50                   	push   eax
c00120bb:	e8 c7 2f 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c00120c0:	83 c4 10             	add    esp,0x10
c00120c3:	83 c4 0c             	add    esp,0xc
c00120c6:	5b                   	pop    ebx
c00120c7:	5e                   	pop    esi
c00120c8:	5f                   	pop    edi
c00120c9:	5d                   	pop    ebp
c00120ca:	c3                   	ret    
c00120cb:	83 ec 0c             	sub    esp,0xc
c00120ce:	68 d5 70 02 c0       	push   0xc00270d5
c00120d3:	e8 6f 01 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00120d8:	83 c4 10             	add    esp,0x10
c00120db:	83 c4 0c             	add    esp,0xc
c00120de:	5b                   	pop    ebx
c00120df:	5e                   	pop    esi
c00120e0:	5f                   	pop    edi
c00120e1:	5d                   	pop    ebp
c00120e2:	c3                   	ret    

c00120e3 <__cxa_atexit>:
c00120e3:	31 c0                	xor    eax,eax
c00120e5:	c3                   	ret    

c00120e6 <__cxa_finalize>:
c00120e6:	c3                   	ret    

c00120e7 <__stack_chk_fail>:
c00120e7:	55                   	push   ebp
c00120e8:	89 e5                	mov    ebp,esp
c00120ea:	83 ec 10             	sub    esp,0x10
c00120ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120f0:	68 ee 70 02 c0       	push   0xc00270ee
c00120f5:	e8 4d 01 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00120fa:	58                   	pop    eax
c00120fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120fe:	5a                   	pop    edx
c00120ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012102:	68 ee 70 02 c0       	push   0xc00270ee
c0012107:	e8 3b 01 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001210c:	59                   	pop    ecx
c001210d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012110:	5a                   	pop    edx
c0012111:	8b 00                	mov    eax,DWORD PTR [eax]
c0012113:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012116:	68 ee 70 02 c0       	push   0xc00270ee
c001211b:	e8 27 01 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0012120:	59                   	pop    ecx
c0012121:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012124:	5a                   	pop    edx
c0012125:	8b 00                	mov    eax,DWORD PTR [eax]
c0012127:	8b 00                	mov    eax,DWORD PTR [eax]
c0012129:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001212c:	68 ee 70 02 c0       	push   0xc00270ee
c0012131:	e8 11 01 00 00       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0012136:	c7 04 24 f6 70 02 c0 	mov    DWORD PTR [esp],0xc00270f6
c001213d:	e8 a3 68 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	c9                   	leave  
c0012146:	c3                   	ret    

c0012147 <__cxa_pure_virtual>:
c0012147:	83 ec 18             	sub    esp,0x18
c001214a:	68 0e 71 02 c0       	push   0xc002710e
c001214f:	e8 91 68 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0012154:	83 c4 1c             	add    esp,0x1c
c0012157:	c3                   	ret    

c0012158 <operator new(unsigned long)>:
c0012158:	e9 e1 cf ff ff       	jmp    c000f13e <malloc>

c001215d <operator new[](unsigned long)>:
c001215d:	e9 dc cf ff ff       	jmp    c000f13e <malloc>

c0012162 <operator delete(void*)>:
c0012162:	e9 f7 cf ff ff       	jmp    c000f15e <rfree>

c0012167 <operator delete(void*, unsigned long)>:
c0012167:	e9 f2 cf ff ff       	jmp    c000f15e <rfree>

c001216c <operator delete[](void*)>:
c001216c:	e9 ed cf ff ff       	jmp    c000f15e <rfree>

c0012171 <operator delete[](void*, unsigned long)>:
c0012171:	e9 e8 cf ff ff       	jmp    c000f15e <rfree>

c0012176 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012176:	57                   	push   edi
c0012177:	b9 3f 00 00 00       	mov    ecx,0x3f
c001217c:	56                   	push   esi
c001217d:	be 24 71 02 c0       	mov    esi,0xc0027124
c0012182:	53                   	push   ebx
c0012183:	83 ec 40             	sub    esp,0x40
c0012186:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001218a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001218e:	fc                   	cld    
c001218f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012191:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012195:	83 f9 3e             	cmp    ecx,0x3e
c0012198:	7e 05                	jle    c001219f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001219a:	b9 3e 00 00 00       	mov    ecx,0x3e
c001219f:	89 df                	mov    edi,ebx
c00121a1:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121a5:	eb 02                	jmp    c00121a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121a7:	89 c7                	mov    edi,eax
c00121a9:	31 d2                	xor    edx,edx
c00121ab:	46                   	inc    esi
c00121ac:	89 f8                	mov    eax,edi
c00121ae:	f7 f1                	div    ecx
c00121b0:	39 cf                	cmp    edi,ecx
c00121b2:	73 f3                	jae    c00121a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121b4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121b7:	eb 02                	jmp    c00121bb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121b9:	89 c3                	mov    ebx,eax
c00121bb:	31 d2                	xor    edx,edx
c00121bd:	4e                   	dec    esi
c00121be:	89 d8                	mov    eax,ebx
c00121c0:	f7 f1                	div    ecx
c00121c2:	39 cb                	cmp    ebx,ecx
c00121c4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121c8:	88 16                	mov    BYTE PTR [esi],dl
c00121ca:	73 ed                	jae    c00121b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121cc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121d0:	83 c4 40             	add    esp,0x40
c00121d3:	5b                   	pop    ebx
c00121d4:	5e                   	pop    esi
c00121d5:	5f                   	pop    edi
c00121d6:	c3                   	ret    

c00121d7 <Dbg::logc(char)>:
c00121d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121db:	ba fd 03 00 00       	mov    edx,0x3fd
c00121e0:	ec                   	in     al,dx
c00121e1:	a8 20                	test   al,0x20
c00121e3:	74 fb                	je     c00121e0 <Dbg::logc(char)+0x9>
c00121e5:	ba f8 03 00 00       	mov    edx,0x3f8
c00121ea:	88 c8                	mov    al,cl
c00121ec:	ee                   	out    dx,al
c00121ed:	c3                   	ret    

c00121ee <Dbg::logs(char*)>:
c00121ee:	53                   	push   ebx
c00121ef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00121f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00121f6:	84 c0                	test   al,al
c00121f8:	74 0f                	je     c0012209 <Dbg::logs(char*)+0x1b>
c00121fa:	50                   	push   eax
c00121fb:	43                   	inc    ebx
c00121fc:	e8 d6 ff ff ff       	call   c00121d7 <Dbg::logc(char)>
c0012201:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012204:	5a                   	pop    edx
c0012205:	84 c0                	test   al,al
c0012207:	75 f1                	jne    c00121fa <Dbg::logs(char*)+0xc>
c0012209:	5b                   	pop    ebx
c001220a:	c3                   	ret    

c001220b <Dbg::logWriteInt(unsigned int)>:
c001220b:	83 ec 10             	sub    esp,0x10
c001220e:	6a 0a                	push   0xa
c0012210:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012214:	50                   	push   eax
c0012215:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012219:	e8 58 ff ff ff       	call   c0012176 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001221e:	50                   	push   eax
c001221f:	e8 ca ff ff ff       	call   c00121ee <Dbg::logs(char*)>
c0012224:	83 c4 20             	add    esp,0x20
c0012227:	c3                   	ret    

c0012228 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012228:	83 ec 10             	sub    esp,0x10
c001222b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001222f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012233:	50                   	push   eax
c0012234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012238:	e8 39 ff ff ff       	call   c0012176 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001223d:	50                   	push   eax
c001223e:	e8 ab ff ff ff       	call   c00121ee <Dbg::logs(char*)>
c0012243:	83 c4 20             	add    esp,0x20
c0012246:	c3                   	ret    

c0012247 <Dbg::kprintf(char const*, ...)>:
c0012247:	55                   	push   ebp
c0012248:	57                   	push   edi
c0012249:	56                   	push   esi
c001224a:	53                   	push   ebx
c001224b:	83 ec 0c             	sub    esp,0xc
c001224e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012252:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001225a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001225d:	84 c0                	test   al,al
c001225f:	74 4a                	je     c00122ab <Dbg::kprintf(char const*, ...)+0x64>
c0012261:	31 db                	xor    ebx,ebx
c0012263:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012266:	3c 25                	cmp    al,0x25
c0012268:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001226b:	0f 85 e4 00 00 00    	jne    c0012355 <Dbg::kprintf(char const*, ...)+0x10e>
c0012271:	83 c3 02             	add    ebx,0x2
c0012274:	8a 07                	mov    al,BYTE PTR [edi]
c0012276:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012279:	83 e8 25             	sub    eax,0x25
c001227c:	3c 53                	cmp    al,0x53
c001227e:	0f 87 ba 00 00 00    	ja     c001233e <Dbg::kprintf(char const*, ...)+0xf7>
c0012284:	0f b6 c0             	movzx  eax,al
c0012287:	ff 24 85 64 71 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8e9c]
c001228e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012292:	89 c8                	mov    eax,ecx
c0012294:	83 c1 04             	add    ecx,0x4
c0012297:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001229b:	ff 30                	push   DWORD PTR [eax]
c001229d:	e8 4c ff ff ff       	call   c00121ee <Dbg::logs(char*)>
c00122a2:	58                   	pop    eax
c00122a3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122a7:	84 c0                	test   al,al
c00122a9:	75 b8                	jne    c0012263 <Dbg::kprintf(char const*, ...)+0x1c>
c00122ab:	83 c4 0c             	add    esp,0xc
c00122ae:	5b                   	pop    ebx
c00122af:	5e                   	pop    esi
c00122b0:	5f                   	pop    edi
c00122b1:	5d                   	pop    ebp
c00122b2:	c3                   	ret    
c00122b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122b7:	89 d0                	mov    eax,edx
c00122b9:	83 c2 04             	add    edx,0x4
c00122bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122c0:	ff 30                	push   DWORD PTR [eax]
c00122c2:	e8 44 ff ff ff       	call   c001220b <Dbg::logWriteInt(unsigned int)>
c00122c7:	58                   	pop    eax
c00122c8:	eb d9                	jmp    c00122a3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122ce:	89 d0                	mov    eax,edx
c00122d0:	83 c2 04             	add    edx,0x4
c00122d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122da:	50                   	push   eax
c00122db:	e8 f7 fe ff ff       	call   c00121d7 <Dbg::logc(char)>
c00122e0:	58                   	pop    eax
c00122e1:	eb c0                	jmp    c00122a3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122e7:	89 c8                	mov    eax,ecx
c00122e9:	83 c1 04             	add    ecx,0x4
c00122ec:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122f0:	ff 30                	push   DWORD PTR [eax]
c00122f2:	e8 14 ff ff ff       	call   c001220b <Dbg::logWriteInt(unsigned int)>
c00122f7:	5f                   	pop    edi
c00122f8:	eb a9                	jmp    c00122a3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122fe:	89 c8                	mov    eax,ecx
c0012300:	83 c1 04             	add    ecx,0x4
c0012303:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012307:	6a 10                	push   0x10
c0012309:	ff 30                	push   DWORD PTR [eax]
c001230b:	e8 18 ff ff ff       	call   c0012228 <Dbg::logWriteIntBase(unsigned int, int)>
c0012310:	59                   	pop    ecx
c0012311:	5f                   	pop    edi
c0012312:	eb 8f                	jmp    c00122a3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012314:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012318:	89 d0                	mov    eax,edx
c001231a:	83 c2 08             	add    edx,0x8
c001231d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012321:	6a 10                	push   0x10
c0012323:	ff 30                	push   DWORD PTR [eax]
c0012325:	e8 fe fe ff ff       	call   c0012228 <Dbg::logWriteIntBase(unsigned int, int)>
c001232a:	58                   	pop    eax
c001232b:	5a                   	pop    edx
c001232c:	e9 72 ff ff ff       	jmp    c00122a3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012331:	6a 25                	push   0x25
c0012333:	e8 9f fe ff ff       	call   c00121d7 <Dbg::logc(char)>
c0012338:	58                   	pop    eax
c0012339:	e9 65 ff ff ff       	jmp    c00122a3 <Dbg::kprintf(char const*, ...)+0x5c>
c001233e:	6a 25                	push   0x25
c0012340:	e8 92 fe ff ff       	call   c00121d7 <Dbg::logc(char)>
c0012345:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012348:	50                   	push   eax
c0012349:	e8 89 fe ff ff       	call   c00121d7 <Dbg::logc(char)>
c001234e:	5a                   	pop    edx
c001234f:	59                   	pop    ecx
c0012350:	e9 4e ff ff ff       	jmp    c00122a3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012355:	50                   	push   eax
c0012356:	89 eb                	mov    ebx,ebp
c0012358:	e8 7a fe ff ff       	call   c00121d7 <Dbg::logc(char)>
c001235d:	89 fd                	mov    ebp,edi
c001235f:	58                   	pop    eax
c0012360:	e9 3e ff ff ff       	jmp    c00122a3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012365:	90                   	nop

c0012366 <File::read(unsigned long long, void*, int*)>:
c0012366:	53                   	push   ebx
c0012367:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001236b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001236f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012376:	3c 19                	cmp    al,0x19
c0012378:	77 35                	ja     c00123af <File::read(unsigned long long, void*, int*)+0x49>
c001237a:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c0012381:	85 c0                	test   eax,eax
c0012383:	74 2a                	je     c00123af <File::read(unsigned long long, void*, int*)+0x49>
c0012385:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001238b:	85 c0                	test   eax,eax
c001238d:	74 20                	je     c00123af <File::read(unsigned long long, void*, int*)+0x49>
c001238f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012393:	74 21                	je     c00123b6 <File::read(unsigned long long, void*, int*)+0x50>
c0012395:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012397:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001239b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123a9:	5b                   	pop    ebx
c00123aa:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123ad:	ff e0                	jmp    eax
c00123af:	b8 0b 00 00 00       	mov    eax,0xb
c00123b4:	eb 05                	jmp    c00123bb <File::read(unsigned long long, void*, int*)+0x55>
c00123b6:	b8 05 00 00 00       	mov    eax,0x5
c00123bb:	5b                   	pop    ebx
c00123bc:	c3                   	ret    
c00123bd:	90                   	nop

c00123be <File::write(unsigned long long, void*, int*)>:
c00123be:	53                   	push   ebx
c00123bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123ce:	3c 19                	cmp    al,0x19
c00123d0:	77 35                	ja     c0012407 <File::write(unsigned long long, void*, int*)+0x49>
c00123d2:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c00123d9:	85 c0                	test   eax,eax
c00123db:	74 2a                	je     c0012407 <File::write(unsigned long long, void*, int*)+0x49>
c00123dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123e3:	85 c0                	test   eax,eax
c00123e5:	74 20                	je     c0012407 <File::write(unsigned long long, void*, int*)+0x49>
c00123e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123eb:	74 21                	je     c001240e <File::write(unsigned long long, void*, int*)+0x50>
c00123ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123f3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012401:	5b                   	pop    ebx
c0012402:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012405:	ff e0                	jmp    eax
c0012407:	b8 0b 00 00 00       	mov    eax,0xb
c001240c:	eb 05                	jmp    c0012413 <File::write(unsigned long long, void*, int*)+0x55>
c001240e:	b8 05 00 00 00       	mov    eax,0x5
c0012413:	5b                   	pop    ebx
c0012414:	c3                   	ret    
c0012415:	90                   	nop

c0012416 <Directory::read(unsigned long long, void*, int*)>:
c0012416:	53                   	push   ebx
c0012417:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001241b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001241f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012426:	3c 19                	cmp    al,0x19
c0012428:	77 35                	ja     c001245f <Directory::read(unsigned long long, void*, int*)+0x49>
c001242a:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c0012431:	85 c0                	test   eax,eax
c0012433:	74 2a                	je     c001245f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012435:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001243b:	85 c0                	test   eax,eax
c001243d:	74 20                	je     c001245f <Directory::read(unsigned long long, void*, int*)+0x49>
c001243f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012443:	74 21                	je     c0012466 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012445:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012447:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001244b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012451:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012455:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012459:	5b                   	pop    ebx
c001245a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001245d:	ff e0                	jmp    eax
c001245f:	b8 0b 00 00 00       	mov    eax,0xb
c0012464:	eb 05                	jmp    c001246b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012466:	b8 05 00 00 00       	mov    eax,0x5
c001246b:	5b                   	pop    ebx
c001246c:	c3                   	ret    
c001246d:	90                   	nop

c001246e <Directory::write(unsigned long long, void*, int*)>:
c001246e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012472:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012479:	b8 0b 00 00 00       	mov    eax,0xb
c001247e:	80 fa 19             	cmp    dl,0x19
c0012481:	77 18                	ja     c001249b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012483:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c001248a:	85 d2                	test   edx,edx
c001248c:	74 0d                	je     c001249b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001248e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012495:	19 c0                	sbb    eax,eax
c0012497:	83 e0 0a             	and    eax,0xa
c001249a:	40                   	inc    eax
c001249b:	c3                   	ret    

c001249c <File::isAtty()>:
c001249c:	31 c0                	xor    eax,eax
c001249e:	c3                   	ret    
c001249f:	90                   	nop

c00124a0 <Directory::isAtty()>:
c00124a0:	31 c0                	xor    eax,eax
c00124a2:	c3                   	ret    
c00124a3:	90                   	nop

c00124a4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124a4:	b8 0a 00 00 00       	mov    eax,0xa
c00124a9:	c3                   	ret    

c00124aa <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124aa:	b8 0a 00 00 00       	mov    eax,0xa
c00124af:	c3                   	ret    

c00124b0 <File::~File()>:
c00124b0:	83 ec 0c             	sub    esp,0xc
c00124b3:	ba 20 73 02 c0       	mov    edx,0xc0027320
c00124b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124bc:	89 10                	mov    DWORD PTR [eax],edx
c00124be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	50                   	push   eax
c00124c6:	e8 49 eb ff ff       	call   c0011014 <UnixFile::~UnixFile()>
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	90                   	nop
c00124cf:	83 c4 0c             	add    esp,0xc
c00124d2:	c3                   	ret    
c00124d3:	90                   	nop

c00124d4 <File::~File()>:
c00124d4:	83 ec 0c             	sub    esp,0xc
c00124d7:	83 ec 0c             	sub    esp,0xc
c00124da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124de:	e8 cd ff ff ff       	call   c00124b0 <File::~File()>
c00124e3:	83 c4 10             	add    esp,0x10
c00124e6:	83 ec 08             	sub    esp,0x8
c00124e9:	68 14 01 00 00       	push   0x114
c00124ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124f2:	e8 70 fc ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c00124f7:	83 c4 10             	add    esp,0x10
c00124fa:	83 c4 0c             	add    esp,0xc
c00124fd:	c3                   	ret    

c00124fe <Directory::~Directory()>:
c00124fe:	83 ec 0c             	sub    esp,0xc
c0012501:	ba 3c 73 02 c0       	mov    edx,0xc002733c
c0012506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250a:	89 10                	mov    DWORD PTR [eax],edx
c001250c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012510:	83 ec 0c             	sub    esp,0xc
c0012513:	50                   	push   eax
c0012514:	e8 fb ea ff ff       	call   c0011014 <UnixFile::~UnixFile()>
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	90                   	nop
c001251d:	83 c4 0c             	add    esp,0xc
c0012520:	c3                   	ret    
c0012521:	90                   	nop

c0012522 <Directory::~Directory()>:
c0012522:	83 ec 0c             	sub    esp,0xc
c0012525:	83 ec 0c             	sub    esp,0xc
c0012528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001252c:	e8 cd ff ff ff       	call   c00124fe <Directory::~Directory()>
c0012531:	83 c4 10             	add    esp,0x10
c0012534:	83 ec 08             	sub    esp,0x8
c0012537:	68 14 01 00 00       	push   0x114
c001253c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012540:	e8 22 fc ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0012545:	83 c4 10             	add    esp,0x10
c0012548:	83 c4 0c             	add    esp,0xc
c001254b:	c3                   	ret    

c001254c <Filesystem::Filesystem()>:
c001254c:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c0012551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012555:	89 10                	mov    DWORD PTR [eax],edx
c0012557:	8b 15 68 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a568
c001255d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012561:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012568:	a3 68 a5 02 c0       	mov    ds:0xc002a568,eax
c001256d:	90                   	nop
c001256e:	c3                   	ret    
c001256f:	90                   	nop

c0012570 <Filesystem::~Filesystem()>:
c0012570:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c0012575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012579:	89 10                	mov    DWORD PTR [eax],edx
c001257b:	90                   	nop
c001257c:	c3                   	ret    
c001257d:	90                   	nop

c001257e <Filesystem::~Filesystem()>:
c001257e:	83 ec 0c             	sub    esp,0xc
c0012581:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012585:	e8 e6 ff ff ff       	call   c0012570 <Filesystem::~Filesystem()>
c001258a:	83 c4 04             	add    esp,0x4
c001258d:	83 ec 08             	sub    esp,0x8
c0012590:	6a 08                	push   0x8
c0012592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012596:	e8 cc fb ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c001259b:	83 c4 10             	add    esp,0x10
c001259e:	83 c4 0c             	add    esp,0xc
c00125a1:	c3                   	ret    

c00125a2 <initVFS()>:
c00125a2:	83 ec 18             	sub    esp,0x18
c00125a5:	6a 08                	push   0x8
c00125a7:	e8 ac fb ff ff       	call   c0012158 <operator new(unsigned long)>
c00125ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00125af:	e8 62 c1 00 00       	call   c001e716 <FAT::FAT()>
c00125b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125bb:	e8 98 fb ff ff       	call   c0012158 <operator new(unsigned long)>
c00125c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00125c3:	e8 c4 d3 00 00       	call   c001f98c <ISO9660::ISO9660()>
c00125c8:	83 c4 1c             	add    esp,0x1c
c00125cb:	c3                   	ret    

c00125cc <standardiseFiles(char*, char const*, char const*)>:
c00125cc:	55                   	push   ebp
c00125cd:	57                   	push   edi
c00125ce:	56                   	push   esi
c00125cf:	53                   	push   ebx
c00125d0:	81 ec 10 04 00 00    	sub    esp,0x410
c00125d6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125dd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125e4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125eb:	68 00 04 00 00       	push   0x400
c00125f0:	6a 00                	push   0x0
c00125f2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00125f6:	56                   	push   esi
c00125f7:	e8 c9 e0 fe ff       	call   c00006c5 <memset>
c00125fc:	83 c4 10             	add    esp,0x10
c00125ff:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012603:	75 0b                	jne    c0012610 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012605:	50                   	push   eax
c0012606:	50                   	push   eax
c0012607:	57                   	push   edi
c0012608:	56                   	push   esi
c0012609:	e8 56 e1 fe ff       	call   c0000764 <strcpy>
c001260e:	eb 41                	jmp    c0012651 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012610:	8a 07                	mov    al,BYTE PTR [edi]
c0012612:	3c 5c                	cmp    al,0x5c
c0012614:	74 04                	je     c001261a <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012616:	3c 2f                	cmp    al,0x2f
c0012618:	75 18                	jne    c0012632 <standardiseFiles(char*, char const*, char const*)+0x66>
c001261a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001261d:	3c 60                	cmp    al,0x60
c001261f:	7e 03                	jle    c0012624 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012621:	83 e8 20             	sub    eax,0x20
c0012624:	88 04 24             	mov    BYTE PTR [esp],al
c0012627:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001262e:	50                   	push   eax
c001262f:	50                   	push   eax
c0012630:	eb 18                	jmp    c001264a <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012632:	50                   	push   eax
c0012633:	50                   	push   eax
c0012634:	55                   	push   ebp
c0012635:	56                   	push   esi
c0012636:	e8 29 e1 fe ff       	call   c0000764 <strcpy>
c001263b:	5a                   	pop    edx
c001263c:	59                   	pop    ecx
c001263d:	68 cc 85 02 c0       	push   0xc00285cc
c0012642:	56                   	push   esi
c0012643:	e8 d3 e1 fe ff       	call   c000081b <strcat>
c0012648:	5d                   	pop    ebp
c0012649:	58                   	pop    eax
c001264a:	57                   	push   edi
c001264b:	56                   	push   esi
c001264c:	e8 ca e1 fe ff       	call   c000081b <strcat>
c0012651:	83 c4 10             	add    esp,0x10
c0012654:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012657:	3c 60                	cmp    al,0x60
c0012659:	7e 03                	jle    c001265e <standardiseFiles(char*, char const*, char const*)+0x92>
c001265b:	83 e8 20             	sub    eax,0x20
c001265e:	88 04 24             	mov    BYTE PTR [esp],al
c0012661:	88 03                	mov    BYTE PTR [ebx],al
c0012663:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001266a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012670:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012674:	bf 03 00 00 00       	mov    edi,0x3
c0012679:	b8 03 00 00 00       	mov    eax,0x3
c001267e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012681:	84 d2                	test   dl,dl
c0012683:	0f 84 91 00 00 00    	je     c001271a <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012689:	8d 4f 01             	lea    ecx,[edi+0x1]
c001268c:	80 fa 5c             	cmp    dl,0x5c
c001268f:	74 05                	je     c0012696 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012691:	80 fa 2f             	cmp    dl,0x2f
c0012694:	75 12                	jne    c00126a8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012696:	89 c5                	mov    ebp,eax
c0012698:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001269d:	74 09                	je     c00126a8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c001269f:	40                   	inc    eax
c00126a0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126a4:	89 cf                	mov    edi,ecx
c00126a6:	eb d6                	jmp    c001267e <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126a8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126ad:	75 5b                	jne    c001270a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126af:	80 fa 2e             	cmp    dl,0x2e
c00126b2:	75 56                	jne    c001270a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126b4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126b8:	74 19                	je     c00126d3 <standardiseFiles(char*, char const*, char const*)+0x107>
c00126ba:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126bf:	74 53                	je     c0012714 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126c1:	89 f9                	mov    ecx,edi
c00126c3:	41                   	inc    ecx
c00126c4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126c7:	80 fa 2f             	cmp    dl,0x2f
c00126ca:	74 f7                	je     c00126c3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126cc:	80 fa 5c             	cmp    dl,0x5c
c00126cf:	74 f2                	je     c00126c3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126d1:	eb d1                	jmp    c00126a4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126d3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126d8:	74 3a                	je     c0012714 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126da:	83 f8 03             	cmp    eax,0x3
c00126dd:	74 c5                	je     c00126a4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126df:	41                   	inc    ecx
c00126e0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126e3:	80 fa 2f             	cmp    dl,0x2f
c00126e6:	74 f7                	je     c00126df <standardiseFiles(char*, char const*, char const*)+0x113>
c00126e8:	80 fa 5c             	cmp    dl,0x5c
c00126eb:	74 f2                	je     c00126df <standardiseFiles(char*, char const*, char const*)+0x113>
c00126ed:	48                   	dec    eax
c00126ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126f2:	75 06                	jne    c00126fa <standardiseFiles(char*, char const*, char const*)+0x12e>
c00126f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00126f8:	eb f3                	jmp    c00126ed <standardiseFiles(char*, char const*, char const*)+0x121>
c00126fa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126fe:	74 07                	je     c0012707 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012700:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012704:	48                   	dec    eax
c0012705:	eb f3                	jmp    c00126fa <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012707:	40                   	inc    eax
c0012708:	eb 9a                	jmp    c00126a4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001270a:	80 fa 2f             	cmp    dl,0x2f
c001270d:	74 95                	je     c00126a4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001270f:	80 fa 5c             	cmp    dl,0x5c
c0012712:	74 90                	je     c00126a4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012714:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012717:	40                   	inc    eax
c0012718:	eb 8a                	jmp    c00126a4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001271e:	83 ec 0c             	sub    esp,0xc
c0012721:	53                   	push   ebx
c0012722:	e8 bb df fe ff       	call   c00006e2 <strlen>
c0012727:	83 c4 10             	add    esp,0x10
c001272a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001272f:	75 26                	jne    c0012757 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012731:	83 ec 0c             	sub    esp,0xc
c0012734:	53                   	push   ebx
c0012735:	e8 a8 df fe ff       	call   c00006e2 <strlen>
c001273a:	83 c4 10             	add    esp,0x10
c001273d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012742:	74 26                	je     c001276a <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012744:	83 ec 0c             	sub    esp,0xc
c0012747:	53                   	push   ebx
c0012748:	e8 95 df fe ff       	call   c00006e2 <strlen>
c001274d:	83 c4 10             	add    esp,0x10
c0012750:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012755:	eb c7                	jmp    c001271e <standardiseFiles(char*, char const*, char const*)+0x152>
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	53                   	push   ebx
c001275b:	e8 82 df fe ff       	call   c00006e2 <strlen>
c0012760:	83 c4 10             	add    esp,0x10
c0012763:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012768:	74 c7                	je     c0012731 <standardiseFiles(char*, char const*, char const*)+0x165>
c001276a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012770:	5b                   	pop    ebx
c0012771:	5e                   	pop    esi
c0012772:	5f                   	pop    edi
c0012773:	5d                   	pop    ebp
c0012774:	c3                   	ret    
c0012775:	90                   	nop

c0012776 <File::File(char const*, Process*)>:
c0012776:	83 ec 0c             	sub    esp,0xc
c0012779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277d:	83 ec 08             	sub    esp,0x8
c0012780:	6a 00                	push   0x0
c0012782:	50                   	push   eax
c0012783:	e8 ea e6 ff ff       	call   c0010e72 <UnixFile::UnixFile(int)>
c0012788:	83 c4 10             	add    esp,0x10
c001278b:	ba 20 73 02 c0       	mov    edx,0xc0027320
c0012790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012794:	89 10                	mov    DWORD PTR [eax],edx
c0012796:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001279a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a4:	83 c0 0d             	add    eax,0xd
c00127a7:	83 ec 04             	sub    esp,0x4
c00127aa:	52                   	push   edx
c00127ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127af:	50                   	push   eax
c00127b0:	e8 17 fe ff ff       	call   c00125cc <standardiseFiles(char*, char const*, char const*)>
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127bc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127bf:	8d 50 bf             	lea    edx,[eax-0x41]
c00127c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127d4:	90                   	nop
c00127d5:	83 c4 0c             	add    esp,0xc
c00127d8:	c3                   	ret    
c00127d9:	90                   	nop

c00127da <File::open(FileOpenMode)>:
c00127da:	53                   	push   ebx
c00127db:	b8 0b 00 00 00       	mov    eax,0xb
c00127e0:	83 ec 08             	sub    esp,0x8
c00127e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127ee:	80 fa 19             	cmp    dl,0x19
c00127f1:	77 40                	ja     c0012833 <File::open(FileOpenMode)+0x59>
c00127f3:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c00127fa:	85 d2                	test   edx,edx
c00127fc:	74 35                	je     c0012833 <File::open(FileOpenMode)+0x59>
c00127fe:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012804:	85 d2                	test   edx,edx
c0012806:	74 2b                	je     c0012833 <File::open(FileOpenMode)+0x59>
c0012808:	b8 06 00 00 00       	mov    eax,0x6
c001280d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012811:	75 20                	jne    c0012833 <File::open(FileOpenMode)+0x59>
c0012813:	8b 02                	mov    eax,DWORD PTR [edx]
c0012815:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001281b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001281f:	51                   	push   ecx
c0012820:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012823:	51                   	push   ecx
c0012824:	52                   	push   edx
c0012825:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012828:	83 c4 10             	add    esp,0x10
c001282b:	85 c0                	test   eax,eax
c001282d:	75 04                	jne    c0012833 <File::open(FileOpenMode)+0x59>
c001282f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012833:	83 c4 08             	add    esp,0x8
c0012836:	5b                   	pop    ebx
c0012837:	c3                   	ret    

c0012838 <File::close()>:
c0012838:	53                   	push   ebx
c0012839:	b8 0b 00 00 00       	mov    eax,0xb
c001283e:	83 ec 08             	sub    esp,0x8
c0012841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012845:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001284c:	80 fa 19             	cmp    dl,0x19
c001284f:	77 41                	ja     c0012892 <File::close()+0x5a>
c0012851:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012858:	85 db                	test   ebx,ebx
c001285a:	74 36                	je     c0012892 <File::close()+0x5a>
c001285c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012863:	74 2d                	je     c0012892 <File::close()+0x5a>
c0012865:	b8 05 00 00 00       	mov    eax,0x5
c001286a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001286e:	74 22                	je     c0012892 <File::close()+0x5a>
c0012870:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012874:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c001287b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012881:	53                   	push   ebx
c0012882:	53                   	push   ebx
c0012883:	8b 10                	mov    edx,DWORD PTR [eax]
c0012885:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001288b:	50                   	push   eax
c001288c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	83 c4 08             	add    esp,0x8
c0012895:	5b                   	pop    ebx
c0012896:	c3                   	ret    
c0012897:	90                   	nop

c0012898 <File::seek(unsigned long long)>:
c0012898:	56                   	push   esi
c0012899:	53                   	push   ebx
c001289a:	b8 0b 00 00 00       	mov    eax,0xb
c001289f:	51                   	push   ecx
c00128a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128a8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128b3:	80 fa 19             	cmp    dl,0x19
c00128b6:	77 31                	ja     c00128e9 <File::seek(unsigned long long)+0x51>
c00128b8:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c00128bf:	85 d2                	test   edx,edx
c00128c1:	74 26                	je     c00128e9 <File::seek(unsigned long long)+0x51>
c00128c3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128c9:	85 d2                	test   edx,edx
c00128cb:	74 1c                	je     c00128e9 <File::seek(unsigned long long)+0x51>
c00128cd:	b8 05 00 00 00       	mov    eax,0x5
c00128d2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128d6:	74 11                	je     c00128e9 <File::seek(unsigned long long)+0x51>
c00128d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00128da:	53                   	push   ebx
c00128db:	51                   	push   ecx
c00128dc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128e2:	52                   	push   edx
c00128e3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128e6:	83 c4 10             	add    esp,0x10
c00128e9:	5a                   	pop    edx
c00128ea:	5b                   	pop    ebx
c00128eb:	5e                   	pop    esi
c00128ec:	c3                   	ret    
c00128ed:	90                   	nop

c00128ee <File::tell(unsigned long long*)>:
c00128ee:	83 ec 0c             	sub    esp,0xc
c00128f1:	b8 0b 00 00 00       	mov    eax,0xb
c00128f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00128fa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012901:	80 fa 19             	cmp    dl,0x19
c0012904:	77 34                	ja     c001293a <File::tell(unsigned long long*)+0x4c>
c0012906:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c001290d:	85 d2                	test   edx,edx
c001290f:	74 29                	je     c001293a <File::tell(unsigned long long*)+0x4c>
c0012911:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012917:	85 d2                	test   edx,edx
c0012919:	74 1f                	je     c001293a <File::tell(unsigned long long*)+0x4c>
c001291b:	b8 05 00 00 00       	mov    eax,0x5
c0012920:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012924:	74 14                	je     c001293a <File::tell(unsigned long long*)+0x4c>
c0012926:	50                   	push   eax
c0012927:	8b 02                	mov    eax,DWORD PTR [edx]
c0012929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001292d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012933:	52                   	push   edx
c0012934:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	83 c4 0c             	add    esp,0xc
c001293d:	c3                   	ret    

c001293e <File::rewind()>:
c001293e:	83 ec 10             	sub    esp,0x10
c0012941:	6a 00                	push   0x0
c0012943:	6a 00                	push   0x0
c0012945:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012949:	e8 4a ff ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001294e:	83 c4 1c             	add    esp,0x1c
c0012951:	c3                   	ret    

c0012952 <File::unlink()>:
c0012952:	83 ec 0c             	sub    esp,0xc
c0012955:	b8 0b 00 00 00       	mov    eax,0xb
c001295a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001295e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012965:	80 f9 19             	cmp    cl,0x19
c0012968:	77 2f                	ja     c0012999 <File::unlink()+0x47>
c001296a:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012971:	85 c9                	test   ecx,ecx
c0012973:	74 24                	je     c0012999 <File::unlink()+0x47>
c0012975:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001297b:	85 c9                	test   ecx,ecx
c001297d:	74 1a                	je     c0012999 <File::unlink()+0x47>
c001297f:	b8 06 00 00 00       	mov    eax,0x6
c0012984:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012988:	75 0f                	jne    c0012999 <File::unlink()+0x47>
c001298a:	83 c2 0d             	add    edx,0xd
c001298d:	50                   	push   eax
c001298e:	50                   	push   eax
c001298f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012991:	52                   	push   edx
c0012992:	51                   	push   ecx
c0012993:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012996:	83 c4 10             	add    esp,0x10
c0012999:	83 c4 0c             	add    esp,0xc
c001299c:	c3                   	ret    
c001299d:	90                   	nop

c001299e <File::rename(char const*)>:
c001299e:	83 ec 0c             	sub    esp,0xc
c00129a1:	b8 0b 00 00 00       	mov    eax,0xb
c00129a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129b1:	80 f9 19             	cmp    cl,0x19
c00129b4:	77 32                	ja     c00129e8 <File::rename(char const*)+0x4a>
c00129b6:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c00129bd:	85 c9                	test   ecx,ecx
c00129bf:	74 27                	je     c00129e8 <File::rename(char const*)+0x4a>
c00129c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129c7:	85 c9                	test   ecx,ecx
c00129c9:	74 1d                	je     c00129e8 <File::rename(char const*)+0x4a>
c00129cb:	b8 06 00 00 00       	mov    eax,0x6
c00129d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129d4:	75 12                	jne    c00129e8 <File::rename(char const*)+0x4a>
c00129d6:	83 c2 0d             	add    edx,0xd
c00129d9:	50                   	push   eax
c00129da:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129e0:	52                   	push   edx
c00129e1:	51                   	push   ecx
c00129e2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129e5:	83 c4 10             	add    esp,0x10
c00129e8:	83 c4 0c             	add    esp,0xc
c00129eb:	c3                   	ret    

c00129ec <File::chfatattr(unsigned char, unsigned char)>:
c00129ec:	57                   	push   edi
c00129ed:	b8 0b 00 00 00       	mov    eax,0xb
c00129f2:	56                   	push   esi
c00129f3:	53                   	push   ebx
c00129f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a07:	80 f9 19             	cmp    cl,0x19
c0012a0a:	77 37                	ja     c0012a43 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a0c:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a13:	85 c9                	test   ecx,ecx
c0012a15:	74 2c                	je     c0012a43 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a17:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a1d:	85 c9                	test   ecx,ecx
c0012a1f:	74 22                	je     c0012a43 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a21:	b8 06 00 00 00       	mov    eax,0x6
c0012a26:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a2a:	75 17                	jne    c0012a43 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a2c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a2e:	89 f0                	mov    eax,esi
c0012a30:	83 c2 0d             	add    edx,0xd
c0012a33:	0f b6 f0             	movzx  esi,al
c0012a36:	0f b6 db             	movzx  ebx,bl
c0012a39:	56                   	push   esi
c0012a3a:	53                   	push   ebx
c0012a3b:	52                   	push   edx
c0012a3c:	51                   	push   ecx
c0012a3d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	5b                   	pop    ebx
c0012a44:	5e                   	pop    esi
c0012a45:	5f                   	pop    edi
c0012a46:	c3                   	ret    
c0012a47:	90                   	nop

c0012a48 <File::exists()>:
c0012a48:	83 ec 0c             	sub    esp,0xc
c0012a4b:	31 c0                	xor    eax,eax
c0012a4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a51:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a58:	80 f9 19             	cmp    cl,0x19
c0012a5b:	77 24                	ja     c0012a81 <File::exists()+0x39>
c0012a5d:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a64:	85 c9                	test   ecx,ecx
c0012a66:	74 19                	je     c0012a81 <File::exists()+0x39>
c0012a68:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a6e:	85 c9                	test   ecx,ecx
c0012a70:	74 0f                	je     c0012a81 <File::exists()+0x39>
c0012a72:	83 c2 0d             	add    edx,0xd
c0012a75:	50                   	push   eax
c0012a76:	50                   	push   eax
c0012a77:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a79:	52                   	push   edx
c0012a7a:	51                   	push   ecx
c0012a7b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	83 c4 0c             	add    esp,0xc
c0012a84:	c3                   	ret    
c0012a85:	90                   	nop

c0012a86 <File::stat(unsigned long long*, bool*)>:
c0012a86:	56                   	push   esi
c0012a87:	53                   	push   ebx
c0012a88:	50                   	push   eax
c0012a89:	b8 0b 00 00 00       	mov    eax,0xb
c0012a8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a92:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a96:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012aa1:	80 f9 19             	cmp    cl,0x19
c0012aa4:	77 3d                	ja     c0012ae3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012aa6:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012aad:	85 c9                	test   ecx,ecx
c0012aaf:	74 32                	je     c0012ae3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ab7:	85 c9                	test   ecx,ecx
c0012ab9:	74 28                	je     c0012ae3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012abb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012abd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ac1:	74 13                	je     c0012ad6 <File::stat(unsigned long long*, bool*)+0x50>
c0012ac3:	83 ec 04             	sub    esp,0x4
c0012ac6:	56                   	push   esi
c0012ac7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012acd:	51                   	push   ecx
c0012ace:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ad1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ad4:	eb 0a                	jmp    c0012ae0 <File::stat(unsigned long long*, bool*)+0x5a>
c0012ad6:	53                   	push   ebx
c0012ad7:	83 c2 0d             	add    edx,0xd
c0012ada:	56                   	push   esi
c0012adb:	52                   	push   edx
c0012adc:	51                   	push   ecx
c0012add:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ae0:	83 c4 10             	add    esp,0x10
c0012ae3:	5a                   	pop    edx
c0012ae4:	5b                   	pop    ebx
c0012ae5:	5e                   	pop    esi
c0012ae6:	c3                   	ret    

c0012ae7 <getcwd(Process*, char*, int)>:
c0012ae7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aeb:	31 c0                	xor    eax,eax
c0012aed:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012af0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012af4:	7d 15                	jge    c0012b0b <getcwd(Process*, char*, int)+0x24>
c0012af6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012afa:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b01:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b04:	84 c9                	test   cl,cl
c0012b06:	74 06                	je     c0012b0e <getcwd(Process*, char*, int)+0x27>
c0012b08:	40                   	inc    eax
c0012b09:	eb e2                	jmp    c0012aed <getcwd(Process*, char*, int)+0x6>
c0012b0b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b0e:	31 c0                	xor    eax,eax
c0012b10:	c3                   	ret    

c0012b11 <setcwd(Process*, char*)>:
c0012b11:	55                   	push   ebp
c0012b12:	57                   	push   edi
c0012b13:	56                   	push   esi
c0012b14:	53                   	push   ebx
c0012b15:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b1b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b22:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b28:	57                   	push   edi
c0012b29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b30:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b34:	56                   	push   esi
c0012b35:	e8 92 fa ff ff       	call   c00125cc <standardiseFiles(char*, char const*, char const*)>
c0012b3a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b3d:	e8 a0 db fe ff       	call   c00006e2 <strlen>
c0012b42:	83 c4 10             	add    esp,0x10
c0012b45:	83 f8 02             	cmp    eax,0x2
c0012b48:	77 17                	ja     c0012b61 <setcwd(Process*, char*)+0x50>
c0012b4a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b4f:	83 e8 41             	sub    eax,0x41
c0012b52:	83 f8 19             	cmp    eax,0x19
c0012b55:	76 24                	jbe    c0012b7b <setcwd(Process*, char*)+0x6a>
c0012b57:	b8 03 00 00 00       	mov    eax,0x3
c0012b5c:	e9 cb 00 00 00       	jmp    c0012c2c <setcwd(Process*, char*)+0x11b>
c0012b61:	83 ec 0c             	sub    esp,0xc
c0012b64:	56                   	push   esi
c0012b65:	e8 78 db fe ff       	call   c00006e2 <strlen>
c0012b6a:	83 c4 10             	add    esp,0x10
c0012b6d:	83 f8 03             	cmp    eax,0x3
c0012b70:	75 33                	jne    c0012ba5 <setcwd(Process*, char*)+0x94>
c0012b72:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b77:	75 2c                	jne    c0012ba5 <setcwd(Process*, char*)+0x94>
c0012b79:	eb cf                	jmp    c0012b4a <setcwd(Process*, char*)+0x39>
c0012b7b:	8b 14 85 00 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5600]
c0012b82:	b8 05 00 00 00       	mov    eax,0x5
c0012b87:	85 d2                	test   edx,edx
c0012b89:	0f 84 9d 00 00 00    	je     c0012c2c <setcwd(Process*, char*)+0x11b>
c0012b8f:	b8 06 00 00 00       	mov    eax,0x6
c0012b94:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012b9b:	0f 84 8b 00 00 00    	je     c0012c2c <setcwd(Process*, char*)+0x11b>
c0012ba1:	51                   	push   ecx
c0012ba2:	51                   	push   ecx
c0012ba3:	eb 7b                	jmp    c0012c20 <setcwd(Process*, char*)+0x10f>
c0012ba5:	83 ec 0c             	sub    esp,0xc
c0012ba8:	68 14 01 00 00       	push   0x114
c0012bad:	e8 a6 f5 ff ff       	call   c0012158 <operator new(unsigned long)>
c0012bb2:	83 c4 0c             	add    esp,0xc
c0012bb5:	89 c3                	mov    ebx,eax
c0012bb7:	55                   	push   ebp
c0012bb8:	56                   	push   esi
c0012bb9:	50                   	push   eax
c0012bba:	e8 b7 fb ff ff       	call   c0012776 <File::File(char const*, Process*)>
c0012bbf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bc4:	83 c4 0c             	add    esp,0xc
c0012bc7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bcb:	50                   	push   eax
c0012bcc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bd0:	50                   	push   eax
c0012bd1:	53                   	push   ebx
c0012bd2:	e8 af fe ff ff       	call   c0012a86 <File::stat(unsigned long long*, bool*)>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bdc:	83 f8 02             	cmp    eax,0x2
c0012bdf:	75 09                	jne    c0012bea <setcwd(Process*, char*)+0xd9>
c0012be1:	83 ec 0c             	sub    esp,0xc
c0012be4:	53                   	push   ebx
c0012be5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012be8:	eb 0d                	jmp    c0012bf7 <setcwd(Process*, char*)+0xe6>
c0012bea:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bed:	85 c0                	test   eax,eax
c0012bef:	74 10                	je     c0012c01 <setcwd(Process*, char*)+0xf0>
c0012bf1:	83 ec 0c             	sub    esp,0xc
c0012bf4:	53                   	push   ebx
c0012bf5:	ff d2                	call   edx
c0012bf7:	83 c4 10             	add    esp,0x10
c0012bfa:	b8 01 00 00 00       	mov    eax,0x1
c0012bff:	eb 2b                	jmp    c0012c2c <setcwd(Process*, char*)+0x11b>
c0012c01:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c06:	75 10                	jne    c0012c18 <setcwd(Process*, char*)+0x107>
c0012c08:	83 ec 0c             	sub    esp,0xc
c0012c0b:	53                   	push   ebx
c0012c0c:	ff d2                	call   edx
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	b8 02 00 00 00       	mov    eax,0x2
c0012c16:	eb 14                	jmp    c0012c2c <setcwd(Process*, char*)+0x11b>
c0012c18:	83 ec 0c             	sub    esp,0xc
c0012c1b:	53                   	push   ebx
c0012c1c:	ff d2                	call   edx
c0012c1e:	58                   	pop    eax
c0012c1f:	5a                   	pop    edx
c0012c20:	56                   	push   esi
c0012c21:	57                   	push   edi
c0012c22:	e8 3d db fe ff       	call   c0000764 <strcpy>
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	31 c0                	xor    eax,eax
c0012c2c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c32:	5b                   	pop    ebx
c0012c33:	5e                   	pop    esi
c0012c34:	5f                   	pop    edi
c0012c35:	5d                   	pop    ebp
c0012c36:	c3                   	ret    
c0012c37:	90                   	nop

c0012c38 <Directory::Directory(char const*, Process*)>:
c0012c38:	83 ec 0c             	sub    esp,0xc
c0012c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3f:	83 ec 08             	sub    esp,0x8
c0012c42:	6a 00                	push   0x0
c0012c44:	50                   	push   eax
c0012c45:	e8 28 e2 ff ff       	call   c0010e72 <UnixFile::UnixFile(int)>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	ba 3c 73 02 c0       	mov    edx,0xc002733c
c0012c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c56:	89 10                	mov    DWORD PTR [eax],edx
c0012c58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c5c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c66:	83 c0 0d             	add    eax,0xd
c0012c69:	83 ec 04             	sub    esp,0x4
c0012c6c:	52                   	push   edx
c0012c6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c71:	50                   	push   eax
c0012c72:	e8 55 f9 ff ff       	call   c00125cc <standardiseFiles(char*, char const*, char const*)>
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c81:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c92:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c96:	90                   	nop
c0012c97:	83 c4 0c             	add    esp,0xc
c0012c9a:	c3                   	ret    
c0012c9b:	90                   	nop

c0012c9c <Directory::open()>:
c0012c9c:	53                   	push   ebx
c0012c9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012ca2:	83 ec 08             	sub    esp,0x8
c0012ca5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ca9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cb0:	80 fa 19             	cmp    dl,0x19
c0012cb3:	77 3d                	ja     c0012cf2 <Directory::open()+0x56>
c0012cb5:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012cbc:	85 d2                	test   edx,edx
c0012cbe:	74 32                	je     c0012cf2 <Directory::open()+0x56>
c0012cc0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cc6:	85 d2                	test   edx,edx
c0012cc8:	74 28                	je     c0012cf2 <Directory::open()+0x56>
c0012cca:	b8 06 00 00 00       	mov    eax,0x6
c0012ccf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cd3:	75 1d                	jne    c0012cf2 <Directory::open()+0x56>
c0012cd5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012cdb:	50                   	push   eax
c0012cdc:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cde:	51                   	push   ecx
c0012cdf:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ce2:	51                   	push   ecx
c0012ce3:	52                   	push   edx
c0012ce4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012ce7:	83 c4 10             	add    esp,0x10
c0012cea:	85 c0                	test   eax,eax
c0012cec:	75 04                	jne    c0012cf2 <Directory::open()+0x56>
c0012cee:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cf2:	83 c4 08             	add    esp,0x8
c0012cf5:	5b                   	pop    ebx
c0012cf6:	c3                   	ret    
c0012cf7:	90                   	nop

c0012cf8 <Directory::close()>:
c0012cf8:	53                   	push   ebx
c0012cf9:	b8 0b 00 00 00       	mov    eax,0xb
c0012cfe:	83 ec 08             	sub    esp,0x8
c0012d01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d05:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d0c:	80 fa 19             	cmp    dl,0x19
c0012d0f:	77 41                	ja     c0012d52 <Directory::close()+0x5a>
c0012d11:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012d18:	85 db                	test   ebx,ebx
c0012d1a:	74 36                	je     c0012d52 <Directory::close()+0x5a>
c0012d1c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d23:	74 2d                	je     c0012d52 <Directory::close()+0x5a>
c0012d25:	b8 05 00 00 00       	mov    eax,0x5
c0012d2a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d2e:	74 22                	je     c0012d52 <Directory::close()+0x5a>
c0012d30:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d34:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c0012d3b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d41:	53                   	push   ebx
c0012d42:	53                   	push   ebx
c0012d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d45:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d4b:	50                   	push   eax
c0012d4c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d4f:	83 c4 10             	add    esp,0x10
c0012d52:	83 c4 08             	add    esp,0x8
c0012d55:	5b                   	pop    ebx
c0012d56:	c3                   	ret    
c0012d57:	90                   	nop

c0012d58 <Directory::unlink()>:
c0012d58:	83 ec 0c             	sub    esp,0xc
c0012d5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d6b:	80 f9 19             	cmp    cl,0x19
c0012d6e:	77 2f                	ja     c0012d9f <Directory::unlink()+0x47>
c0012d70:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012d77:	85 c9                	test   ecx,ecx
c0012d79:	74 24                	je     c0012d9f <Directory::unlink()+0x47>
c0012d7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d81:	85 c9                	test   ecx,ecx
c0012d83:	74 1a                	je     c0012d9f <Directory::unlink()+0x47>
c0012d85:	b8 06 00 00 00       	mov    eax,0x6
c0012d8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d8e:	75 0f                	jne    c0012d9f <Directory::unlink()+0x47>
c0012d90:	83 c2 0d             	add    edx,0xd
c0012d93:	50                   	push   eax
c0012d94:	50                   	push   eax
c0012d95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d97:	52                   	push   edx
c0012d98:	51                   	push   ecx
c0012d99:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d9c:	83 c4 10             	add    esp,0x10
c0012d9f:	83 c4 0c             	add    esp,0xc
c0012da2:	c3                   	ret    
c0012da3:	90                   	nop

c0012da4 <Directory::rename(char const*)>:
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012db0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012db7:	80 f9 19             	cmp    cl,0x19
c0012dba:	77 32                	ja     c0012dee <Directory::rename(char const*)+0x4a>
c0012dbc:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012dc3:	85 c9                	test   ecx,ecx
c0012dc5:	74 27                	je     c0012dee <Directory::rename(char const*)+0x4a>
c0012dc7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dcd:	85 c9                	test   ecx,ecx
c0012dcf:	74 1d                	je     c0012dee <Directory::rename(char const*)+0x4a>
c0012dd1:	b8 06 00 00 00       	mov    eax,0x6
c0012dd6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dda:	75 12                	jne    c0012dee <Directory::rename(char const*)+0x4a>
c0012ddc:	83 c2 0d             	add    edx,0xd
c0012ddf:	50                   	push   eax
c0012de0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012de2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012de6:	52                   	push   edx
c0012de7:	51                   	push   ecx
c0012de8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	83 c4 0c             	add    esp,0xc
c0012df1:	c3                   	ret    

c0012df2 <Directory::exists()>:
c0012df2:	83 ec 0c             	sub    esp,0xc
c0012df5:	31 c0                	xor    eax,eax
c0012df7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dfb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e02:	80 f9 19             	cmp    cl,0x19
c0012e05:	77 24                	ja     c0012e2b <Directory::exists()+0x39>
c0012e07:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012e0e:	85 c9                	test   ecx,ecx
c0012e10:	74 19                	je     c0012e2b <Directory::exists()+0x39>
c0012e12:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e18:	85 c9                	test   ecx,ecx
c0012e1a:	74 0f                	je     c0012e2b <Directory::exists()+0x39>
c0012e1c:	83 c2 0d             	add    edx,0xd
c0012e1f:	50                   	push   eax
c0012e20:	50                   	push   eax
c0012e21:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e23:	52                   	push   edx
c0012e24:	51                   	push   ecx
c0012e25:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e28:	83 c4 10             	add    esp,0x10
c0012e2b:	83 c4 0c             	add    esp,0xc
c0012e2e:	c3                   	ret    
c0012e2f:	90                   	nop

c0012e30 <Directory::read(dirent*)>:
c0012e30:	83 ec 1c             	sub    esp,0x1c
c0012e33:	b8 0b 00 00 00       	mov    eax,0xb
c0012e38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e3c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e43:	80 fa 19             	cmp    dl,0x19
c0012e46:	77 30                	ja     c0012e78 <Directory::read(dirent*)+0x48>
c0012e48:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012e4f:	85 d2                	test   edx,edx
c0012e51:	74 25                	je     c0012e78 <Directory::read(dirent*)+0x48>
c0012e53:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e5a:	74 1c                	je     c0012e78 <Directory::read(dirent*)+0x48>
c0012e5c:	83 ec 0c             	sub    esp,0xc
c0012e5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e61:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e65:	52                   	push   edx
c0012e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e6a:	6a 00                	push   0x0
c0012e6c:	68 10 01 00 00       	push   0x110
c0012e71:	51                   	push   ecx
c0012e72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e75:	83 c4 20             	add    esp,0x20
c0012e78:	83 c4 1c             	add    esp,0x1c
c0012e7b:	c3                   	ret    

c0012e7c <Directory::create()>:
c0012e7c:	83 ec 0c             	sub    esp,0xc
c0012e7f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e8f:	80 f9 19             	cmp    cl,0x19
c0012e92:	77 2f                	ja     c0012ec3 <Directory::create()+0x47>
c0012e94:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012e9b:	85 c9                	test   ecx,ecx
c0012e9d:	74 24                	je     c0012ec3 <Directory::create()+0x47>
c0012e9f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea5:	85 c9                	test   ecx,ecx
c0012ea7:	74 1a                	je     c0012ec3 <Directory::create()+0x47>
c0012ea9:	b8 06 00 00 00       	mov    eax,0x6
c0012eae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eb2:	75 0f                	jne    c0012ec3 <Directory::create()+0x47>
c0012eb4:	83 c2 0d             	add    edx,0xd
c0012eb7:	50                   	push   eax
c0012eb8:	50                   	push   eax
c0012eb9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ebb:	52                   	push   edx
c0012ebc:	51                   	push   ecx
c0012ebd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	83 c4 0c             	add    esp,0xc
c0012ec6:	c3                   	ret    
c0012ec7:	90                   	nop

c0012ec8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ec8:	b8 0a 00 00 00       	mov    eax,0xa
c0012ecd:	c3                   	ret    

c0012ece <Bus::Bus(char const*)>:
c0012ece:	83 ec 0c             	sub    esp,0xc
c0012ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed5:	83 ec 08             	sub    esp,0x8
c0012ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012edc:	50                   	push   eax
c0012edd:	e8 60 09 00 00       	call   c0013842 <Device::Device(char const*)>
c0012ee2:	83 c4 10             	add    esp,0x10
c0012ee5:	ba 58 73 02 c0       	mov    edx,0xc0027358
c0012eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eee:	89 10                	mov    DWORD PTR [eax],edx
c0012ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012efe:	90                   	nop
c0012eff:	83 c4 0c             	add    esp,0xc
c0012f02:	c3                   	ret    
c0012f03:	90                   	nop

c0012f04 <Bus::~Bus()>:
c0012f04:	83 ec 0c             	sub    esp,0xc
c0012f07:	ba 58 73 02 c0       	mov    edx,0xc0027358
c0012f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f10:	89 10                	mov    DWORD PTR [eax],edx
c0012f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f16:	83 ec 0c             	sub    esp,0xc
c0012f19:	50                   	push   eax
c0012f1a:	e8 d5 05 00 00       	call   c00134f4 <Device::~Device()>
c0012f1f:	83 c4 10             	add    esp,0x10
c0012f22:	90                   	nop
c0012f23:	83 c4 0c             	add    esp,0xc
c0012f26:	c3                   	ret    
c0012f27:	90                   	nop

c0012f28 <Bus::~Bus()>:
c0012f28:	83 ec 0c             	sub    esp,0xc
c0012f2b:	83 ec 0c             	sub    esp,0xc
c0012f2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f32:	e8 cd ff ff ff       	call   c0012f04 <Bus::~Bus()>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	83 ec 08             	sub    esp,0x8
c0012f3d:	68 58 01 00 00       	push   0x158
c0012f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f46:	e8 1c f2 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	83 c4 0c             	add    esp,0xc
c0012f51:	c3                   	ret    

c0012f52 <Buzzer::Buzzer(char const*)>:
c0012f52:	83 ec 0c             	sub    esp,0xc
c0012f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f59:	83 ec 08             	sub    esp,0x8
c0012f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f60:	50                   	push   eax
c0012f61:	e8 dc 08 00 00       	call   c0013842 <Device::Device(char const*)>
c0012f66:	83 c4 10             	add    esp,0x10
c0012f69:	ba 84 73 02 c0       	mov    edx,0xc0027384
c0012f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f72:	89 10                	mov    DWORD PTR [eax],edx
c0012f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f78:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f86:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012f90:	90                   	nop
c0012f91:	83 c4 0c             	add    esp,0xc
c0012f94:	c3                   	ret    
c0012f95:	90                   	nop

c0012f96 <Buzzer::~Buzzer()>:
c0012f96:	83 ec 0c             	sub    esp,0xc
c0012f99:	ba 84 73 02 c0       	mov    edx,0xc0027384
c0012f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa2:	89 10                	mov    DWORD PTR [eax],edx
c0012fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa8:	83 ec 0c             	sub    esp,0xc
c0012fab:	50                   	push   eax
c0012fac:	e8 43 05 00 00       	call   c00134f4 <Device::~Device()>
c0012fb1:	83 c4 10             	add    esp,0x10
c0012fb4:	90                   	nop
c0012fb5:	83 c4 0c             	add    esp,0xc
c0012fb8:	c3                   	ret    
c0012fb9:	90                   	nop

c0012fba <Buzzer::~Buzzer()>:
c0012fba:	83 ec 0c             	sub    esp,0xc
c0012fbd:	83 ec 0c             	sub    esp,0xc
c0012fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fc4:	e8 cd ff ff ff       	call   c0012f96 <Buzzer::~Buzzer()>
c0012fc9:	83 c4 10             	add    esp,0x10
c0012fcc:	83 ec 08             	sub    esp,0x8
c0012fcf:	68 5c 01 00 00       	push   0x15c
c0012fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd8:	e8 8a f1 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0012fdd:	83 c4 10             	add    esp,0x10
c0012fe0:	83 c4 0c             	add    esp,0xc
c0012fe3:	c3                   	ret    

c0012fe4 <Buzzer::stop()>:
c0012fe4:	83 ec 14             	sub    esp,0x14
c0012fe7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012feb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fed:	6a 00                	push   0x0
c0012fef:	50                   	push   eax
c0012ff0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ff3:	83 c4 1c             	add    esp,0x1c
c0012ff6:	c3                   	ret    

c0012ff7 <beepThread(void*)>:
c0012ff7:	53                   	push   ebx
c0012ff8:	83 ec 08             	sub    esp,0x8
c0012ffb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fff:	e8 36 89 00 00       	call   c001b93a <unlockScheduler()>
c0013004:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013009:	52                   	push   edx
c001300a:	52                   	push   edx
c001300b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013011:	52                   	push   edx
c0013012:	50                   	push   eax
c0013013:	e8 68 8e 00 00       	call   c001be80 <nanoSleep(unsigned long long)>
c0013018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001301b:	e8 c4 ff ff ff       	call   c0012fe4 <Buzzer::stop()>
c0013020:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013028:	83 c4 18             	add    esp,0x18
c001302b:	5b                   	pop    ebx
c001302c:	e9 95 8d 00 00       	jmp    c001bdc6 <blockTask(TaskState)>
c0013031:	90                   	nop

c0013032 <Buzzer::beep(int, int, bool)>:
c0013032:	57                   	push   edi
c0013033:	56                   	push   esi
c0013034:	53                   	push   ebx
c0013035:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013039:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001303d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013041:	52                   	push   edx
c0013042:	52                   	push   edx
c0013043:	8b 06                	mov    eax,DWORD PTR [esi]
c0013045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013049:	56                   	push   esi
c001304a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001304d:	83 c4 10             	add    esp,0x10
c0013050:	89 f8                	mov    eax,edi
c0013052:	84 c0                	test   al,al
c0013054:	74 1f                	je     c0013075 <Buzzer::beep(int, int, bool)+0x43>
c0013056:	50                   	push   eax
c0013057:	50                   	push   eax
c0013058:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001305e:	99                   	cdq    
c001305f:	52                   	push   edx
c0013060:	50                   	push   eax
c0013061:	e8 1a 8e 00 00       	call   c001be80 <nanoSleep(unsigned long long)>
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001306d:	5b                   	pop    ebx
c001306e:	5e                   	pop    esi
c001306f:	5f                   	pop    edi
c0013070:	e9 6f ff ff ff       	jmp    c0012fe4 <Buzzer::stop()>
c0013075:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001307b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0013080:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013088:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001308c:	c7 44 24 14 f7 2f 01 c0 	mov    DWORD PTR [esp+0x14],0xc0012ff7
c0013094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013098:	5b                   	pop    ebx
c0013099:	5e                   	pop    esi
c001309a:	5f                   	pop    edi
c001309b:	e9 c2 89 00 00       	jmp    c001ba62 <Process::createThread(void (*)(void*), void*, int)>

c00130a0 <loadClockSettings()>:
c00130a0:	c7 05 74 a5 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a574,0xa
c00130aa:	c6 05 71 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a571,0x0
c00130b1:	c6 05 70 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a570,0x1
c00130b8:	c3                   	ret    
c00130b9:	90                   	nop

c00130ba <Clock::Clock(char const*)>:
c00130ba:	83 ec 0c             	sub    esp,0xc
c00130bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c1:	83 ec 08             	sub    esp,0x8
c00130c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c8:	50                   	push   eax
c00130c9:	e8 74 07 00 00       	call   c0013842 <Device::Device(char const*)>
c00130ce:	83 c4 10             	add    esp,0x10
c00130d1:	ba b4 73 02 c0       	mov    edx,0xc00273b4
c00130d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130da:	89 10                	mov    DWORD PTR [eax],edx
c00130dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130ea:	90                   	nop
c00130eb:	83 c4 0c             	add    esp,0xc
c00130ee:	c3                   	ret    
c00130ef:	90                   	nop

c00130f0 <Clock::~Clock()>:
c00130f0:	83 ec 0c             	sub    esp,0xc
c00130f3:	ba b4 73 02 c0       	mov    edx,0xc00273b4
c00130f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130fc:	89 10                	mov    DWORD PTR [eax],edx
c00130fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013102:	83 ec 0c             	sub    esp,0xc
c0013105:	50                   	push   eax
c0013106:	e8 e9 03 00 00       	call   c00134f4 <Device::~Device()>
c001310b:	83 c4 10             	add    esp,0x10
c001310e:	90                   	nop
c001310f:	83 c4 0c             	add    esp,0xc
c0013112:	c3                   	ret    
c0013113:	90                   	nop

c0013114 <Clock::~Clock()>:
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	83 ec 0c             	sub    esp,0xc
c001311a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001311e:	e8 cd ff ff ff       	call   c00130f0 <Clock::~Clock()>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	83 ec 08             	sub    esp,0x8
c0013129:	68 58 01 00 00       	push   0x158
c001312e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013132:	e8 30 f0 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0013137:	83 c4 10             	add    esp,0x10
c001313a:	83 c4 0c             	add    esp,0xc
c001313d:	c3                   	ret    

c001313e <Clock::timeInSecondsLocal()>:
c001313e:	53                   	push   ebx
c001313f:	83 ec 14             	sub    esp,0x14
c0013142:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013146:	8b 10                	mov    edx,DWORD PTR [eax]
c0013148:	50                   	push   eax
c0013149:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001314c:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c0013153:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c0013159:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001315f:	89 cb                	mov    ebx,ecx
c0013161:	c1 fb 1f             	sar    ebx,0x1f
c0013164:	01 c8                	add    eax,ecx
c0013166:	11 da                	adc    edx,ebx
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	31 c9                	xor    ecx,ecx
c001316d:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c0013174:	74 05                	je     c001317b <Clock::timeInSecondsLocal()+0x3d>
c0013176:	b9 08 07 00 00       	mov    ecx,0x708
c001317b:	31 db                	xor    ebx,ebx
c001317d:	01 c8                	add    eax,ecx
c001317f:	11 da                	adc    edx,ebx
c0013181:	83 c4 08             	add    esp,0x8
c0013184:	5b                   	pop    ebx
c0013185:	c3                   	ret    

c0013186 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013186:	57                   	push   edi
c0013187:	56                   	push   esi
c0013188:	53                   	push   ebx
c0013189:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001318d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013191:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013193:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013197:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001319a:	0f b6 05 70 a5 02 c0 	movzx  eax,BYTE PTR ds:0xc002a570
c00131a1:	03 05 74 a5 02 c0    	add    eax,DWORD PTR ds:0xc002a574
c00131a7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131ad:	99                   	cdq    
c00131ae:	29 c6                	sub    esi,eax
c00131b0:	19 d7                	sbb    edi,edx
c00131b2:	89 f0                	mov    eax,esi
c00131b4:	89 fa                	mov    edx,edi
c00131b6:	31 f6                	xor    esi,esi
c00131b8:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c00131bf:	74 05                	je     c00131c6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131c1:	be 08 07 00 00       	mov    esi,0x708
c00131c6:	31 ff                	xor    edi,edi
c00131c8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131cc:	29 f0                	sub    eax,esi
c00131ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131d2:	19 fa                	sbb    edx,edi
c00131d4:	89 d8                	mov    eax,ebx
c00131d6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131da:	5b                   	pop    ebx
c00131db:	5e                   	pop    esi
c00131dc:	5f                   	pop    edi
c00131dd:	ff e0                	jmp    eax

c00131df <datetimeToSeconds(datetime_t)>:
c00131df:	55                   	push   ebp
c00131e0:	57                   	push   edi
c00131e1:	56                   	push   esi
c00131e2:	53                   	push   ebx
c00131e3:	83 ec 14             	sub    esp,0x14
c00131e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131ea:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131ee:	89 d3                	mov    ebx,edx
c00131f0:	0f b6 c6             	movzx  eax,dh
c00131f3:	c1 eb 10             	shr    ebx,0x10
c00131f6:	48                   	dec    eax
c00131f7:	66 81 eb 6c 07       	sub    bx,0x76c
c00131fc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013200:	0f b6 f5             	movzx  esi,ch
c0013203:	89 cf                	mov    edi,ecx
c0013205:	6b f6 3c             	imul   esi,esi,0x3c
c0013208:	c1 ef 10             	shr    edi,0x10
c001320b:	0f b6 c9             	movzx  ecx,cl
c001320e:	89 f8                	mov    eax,edi
c0013210:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013216:	0f b6 f8             	movzx  edi,al
c0013219:	0f b6 d2             	movzx  edx,dl
c001321c:	01 fe                	add    esi,edi
c001321e:	01 f1                	add    ecx,esi
c0013220:	0f b7 f3             	movzx  esi,bx
c0013223:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013227:	c1 f9 1f             	sar    ecx,0x1f
c001322a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001322f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013233:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013238:	8b 0c 8d 00 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8c00]
c001323f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013243:	76 29                	jbe    c001326e <datetimeToSeconds(datetime_t)+0x8f>
c0013245:	f6 c3 03             	test   bl,0x3
c0013248:	75 24                	jne    c001326e <datetimeToSeconds(datetime_t)+0x8f>
c001324a:	31 d2                	xor    edx,edx
c001324c:	bf 64 00 00 00       	mov    edi,0x64
c0013251:	89 d8                	mov    eax,ebx
c0013253:	66 f7 f7             	div    di
c0013256:	66 85 d2             	test   dx,dx
c0013259:	75 12                	jne    c001326d <datetimeToSeconds(datetime_t)+0x8e>
c001325b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013261:	bf 90 01 00 00       	mov    edi,0x190
c0013266:	99                   	cdq    
c0013267:	f7 ff                	idiv   edi
c0013269:	85 d2                	test   edx,edx
c001326b:	75 01                	jne    c001326e <datetimeToSeconds(datetime_t)+0x8f>
c001326d:	41                   	inc    ecx
c001326e:	66 83 fb 46          	cmp    bx,0x46
c0013272:	76 45                	jbe    c00132b9 <datetimeToSeconds(datetime_t)+0xda>
c0013274:	bb 46 00 00 00       	mov    ebx,0x46
c0013279:	bf 64 00 00 00       	mov    edi,0x64
c001327e:	bd 90 01 00 00       	mov    ebp,0x190
c0013283:	b8 6d 01 00 00       	mov    eax,0x16d
c0013288:	f6 c3 03             	test   bl,0x3
c001328b:	75 23                	jne    c00132b0 <datetimeToSeconds(datetime_t)+0xd1>
c001328d:	89 d8                	mov    eax,ebx
c001328f:	99                   	cdq    
c0013290:	f7 ff                	idiv   edi
c0013292:	b8 6e 01 00 00       	mov    eax,0x16e
c0013297:	85 d2                	test   edx,edx
c0013299:	75 15                	jne    c00132b0 <datetimeToSeconds(datetime_t)+0xd1>
c001329b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132a1:	99                   	cdq    
c00132a2:	f7 fd                	idiv   ebp
c00132a4:	83 fa 01             	cmp    edx,0x1
c00132a7:	19 c0                	sbb    eax,eax
c00132a9:	f7 d0                	not    eax
c00132ab:	05 6e 01 00 00       	add    eax,0x16e
c00132b0:	01 c1                	add    ecx,eax
c00132b2:	43                   	inc    ebx
c00132b3:	39 f3                	cmp    ebx,esi
c00132b5:	7c cc                	jl     c0013283 <datetimeToSeconds(datetime_t)+0xa4>
c00132b7:	eb 35                	jmp    c00132ee <datetimeToSeconds(datetime_t)+0x10f>
c00132b9:	74 33                	je     c00132ee <datetimeToSeconds(datetime_t)+0x10f>
c00132bb:	b8 45 00 00 00       	mov    eax,0x45
c00132c0:	89 c2                	mov    edx,eax
c00132c2:	83 e2 03             	and    edx,0x3
c00132c5:	39 f0                	cmp    eax,esi
c00132c7:	7e 0f                	jle    c00132d8 <datetimeToSeconds(datetime_t)+0xf9>
c00132c9:	83 fa 01             	cmp    edx,0x1
c00132cc:	19 d2                	sbb    edx,edx
c00132ce:	48                   	dec    eax
c00132cf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132d6:	eb e8                	jmp    c00132c0 <datetimeToSeconds(datetime_t)+0xe1>
c00132d8:	b8 6d 01 00 00       	mov    eax,0x16d
c00132dd:	85 d2                	test   edx,edx
c00132df:	75 0b                	jne    c00132ec <datetimeToSeconds(datetime_t)+0x10d>
c00132e1:	66 83 fb 01          	cmp    bx,0x1
c00132e5:	19 c0                	sbb    eax,eax
c00132e7:	05 6e 01 00 00       	add    eax,0x16e
c00132ec:	29 c1                	sub    ecx,eax
c00132ee:	b8 80 51 01 00       	mov    eax,0x15180
c00132f3:	f7 e9                	imul   ecx
c00132f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00132f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00132fd:	83 c4 14             	add    esp,0x14
c0013300:	5b                   	pop    ebx
c0013301:	5e                   	pop    esi
c0013302:	5f                   	pop    edi
c0013303:	5d                   	pop    ebp
c0013304:	c3                   	ret    
c0013305:	90                   	nop

c0013306 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013306:	57                   	push   edi
c0013307:	56                   	push   esi
c0013308:	53                   	push   ebx
c0013309:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001330d:	8b 06                	mov    eax,DWORD PTR [esi]
c001330f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013316:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001331a:	e8 c0 fe ff ff       	call   c00131df <datetimeToSeconds(datetime_t)>
c001331f:	59                   	pop    ecx
c0013320:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c0013327:	5b                   	pop    ebx
c0013328:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c001332e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013334:	89 cb                	mov    ebx,ecx
c0013336:	c1 fb 1f             	sar    ebx,0x1f
c0013339:	29 c8                	sub    eax,ecx
c001333b:	19 da                	sbb    edx,ebx
c001333d:	31 c9                	xor    ecx,ecx
c001333f:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c0013346:	74 05                	je     c001334d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013348:	b9 08 07 00 00       	mov    ecx,0x708
c001334d:	31 db                	xor    ebx,ebx
c001334f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013353:	29 c8                	sub    eax,ecx
c0013355:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013359:	19 da                	sbb    edx,ebx
c001335b:	89 f8                	mov    eax,edi
c001335d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013361:	5b                   	pop    ebx
c0013362:	5e                   	pop    esi
c0013363:	5f                   	pop    edi
c0013364:	ff e0                	jmp    eax

c0013366 <secondsToDatetime(unsigned long long)>:
c0013366:	55                   	push   ebp
c0013367:	57                   	push   edi
c0013368:	56                   	push   esi
c0013369:	53                   	push   ebx
c001336a:	83 ec 1c             	sub    esp,0x1c
c001336d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013371:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013375:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013379:	6a 00                	push   0x0
c001337b:	68 80 51 01 00       	push   0x15180
c0013380:	55                   	push   ebp
c0013381:	57                   	push   edi
c0013382:	e8 d5 ff 00 00       	call   c002335c <__udivdi3>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013394:	6a 00                	push   0x0
c0013396:	68 80 51 01 00       	push   0x15180
c001339b:	55                   	push   ebp
c001339c:	57                   	push   edi
c001339d:	bf 10 0e 00 00       	mov    edi,0xe10
c00133a2:	e8 b5 00 01 00       	call   c002345c <__umoddi3>
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	99                   	cdq    
c00133ab:	f7 ff                	idiv   edi
c00133ad:	bf 3c 00 00 00       	mov    edi,0x3c
c00133b2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133b5:	89 d0                	mov    eax,edx
c00133b7:	99                   	cdq    
c00133b8:	f7 ff                	idiv   edi
c00133ba:	85 db                	test   ebx,ebx
c00133bc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133bf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133c2:	79 11                	jns    c00133d5 <secondsToDatetime(unsigned long long)+0x6f>
c00133c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133c8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133ce:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133d3:	eb 07                	jmp    c00133dc <secondsToDatetime(unsigned long long)+0x76>
c00133d5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133da:	89 d8                	mov    eax,ebx
c00133dc:	bf b4 05 00 00       	mov    edi,0x5b4
c00133e1:	99                   	cdq    
c00133e2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133e7:	f7 f9                	idiv   ecx
c00133e9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133f2:	31 d2                	xor    edx,edx
c00133f4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00133fc:	01 c3                	add    ebx,eax
c00133fe:	89 d8                	mov    eax,ebx
c0013400:	f7 f1                	div    ecx
c0013402:	31 d2                	xor    edx,edx
c0013404:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013407:	89 d8                	mov    eax,ebx
c0013409:	f7 f7                	div    edi
c001340b:	31 d2                	xor    edx,edx
c001340d:	29 c1                	sub    ecx,eax
c001340f:	89 d8                	mov    eax,ebx
c0013411:	f7 f5                	div    ebp
c0013413:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013418:	29 c1                	sub    ecx,eax
c001341a:	31 d2                	xor    edx,edx
c001341c:	89 c8                	mov    eax,ecx
c001341e:	f7 f5                	div    ebp
c0013420:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013429:	31 d2                	xor    edx,edx
c001342b:	89 c8                	mov    eax,ecx
c001342d:	f7 f5                	div    ebp
c001342f:	31 d2                	xor    edx,edx
c0013431:	01 c3                	add    ebx,eax
c0013433:	89 c8                	mov    eax,ecx
c0013435:	f7 f7                	div    edi
c0013437:	bf 99 00 00 00       	mov    edi,0x99
c001343c:	29 c3                	sub    ebx,eax
c001343e:	31 d2                	xor    edx,edx
c0013440:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013448:	29 c3                	sub    ebx,eax
c001344a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001344d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013450:	bb 05 00 00 00       	mov    ebx,0x5
c0013455:	83 c1 02             	add    ecx,0x2
c0013458:	89 c8                	mov    eax,ecx
c001345a:	f7 f7                	div    edi
c001345c:	31 d2                	xor    edx,edx
c001345e:	89 c7                	mov    edi,eax
c0013460:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013466:	83 c0 02             	add    eax,0x2
c0013469:	f7 f3                	div    ebx
c001346b:	89 eb                	mov    ebx,ebp
c001346d:	29 c3                	sub    ebx,eax
c001346f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013475:	88 1e                	mov    BYTE PTR [esi],bl
c0013477:	19 c0                	sbb    eax,eax
c0013479:	31 d2                	xor    edx,edx
c001347b:	83 e0 0c             	and    eax,0xc
c001347e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013482:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001348a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001348e:	83 f9 01             	cmp    ecx,0x1
c0013491:	0f 96 c2             	setbe  dl
c0013494:	41                   	inc    ecx
c0013495:	01 d0                	add    eax,edx
c0013497:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001349a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001349e:	83 c4 1c             	add    esp,0x1c
c00134a1:	89 f0                	mov    eax,esi
c00134a3:	5b                   	pop    ebx
c00134a4:	5e                   	pop    esi
c00134a5:	5f                   	pop    edi
c00134a6:	5d                   	pop    ebp
c00134a7:	c2 04 00             	ret    0x4

c00134aa <Clock::timeInDatetimeLocal()>:
c00134aa:	53                   	push   ebx
c00134ab:	83 ec 14             	sub    esp,0x14
c00134ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134b6:	e8 83 fc ff ff       	call   c001313e <Clock::timeInSecondsLocal()>
c00134bb:	83 c4 0c             	add    esp,0xc
c00134be:	52                   	push   edx
c00134bf:	50                   	push   eax
c00134c0:	53                   	push   ebx
c00134c1:	e8 a0 fe ff ff       	call   c0013366 <secondsToDatetime(unsigned long long)>
c00134c6:	89 d8                	mov    eax,ebx
c00134c8:	83 c4 14             	add    esp,0x14
c00134cb:	5b                   	pop    ebx
c00134cc:	c2 04 00             	ret    0x4
c00134cf:	90                   	nop

c00134d0 <Device::hibernate()>:
c00134d0:	c3                   	ret    
c00134d1:	90                   	nop

c00134d2 <Device::wake()>:
c00134d2:	c3                   	ret    
c00134d3:	90                   	nop

c00134d4 <Device::detect()>:
c00134d4:	c3                   	ret    
c00134d5:	90                   	nop

c00134d6 <Device::disableLegacy()>:
c00134d6:	c3                   	ret    
c00134d7:	90                   	nop

c00134d8 <Device::powerSaving(PowerSavingLevel)>:
c00134d8:	c3                   	ret    
c00134d9:	90                   	nop

c00134da <DriverlessDevice::close(int, int, void*)>:
c00134da:	31 c0                	xor    eax,eax
c00134dc:	c3                   	ret    
c00134dd:	90                   	nop

c00134de <DriverlessDevice::detect()>:
c00134de:	c3                   	ret    
c00134df:	90                   	nop

c00134e0 <DriverlessDevice::open(int, int, void*)>:
c00134e0:	83 ec 18             	sub    esp,0x18
c00134e3:	68 30 74 02 c0       	push   0xc0027430
c00134e8:	e8 f8 54 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c00134ed:	83 c8 ff             	or     eax,0xffffffff
c00134f0:	83 c4 1c             	add    esp,0x1c
c00134f3:	c3                   	ret    

c00134f4 <Device::~Device()>:
c00134f4:	ba 58 74 02 c0       	mov    edx,0xc0027458
c00134f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134fd:	89 10                	mov    DWORD PTR [eax],edx
c00134ff:	90                   	nop
c0013500:	c3                   	ret    
c0013501:	90                   	nop

c0013502 <Device::~Device()>:
c0013502:	83 ec 0c             	sub    esp,0xc
c0013505:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013509:	e8 e6 ff ff ff       	call   c00134f4 <Device::~Device()>
c001350e:	83 c4 04             	add    esp,0x4
c0013511:	83 ec 08             	sub    esp,0x8
c0013514:	68 58 01 00 00       	push   0x158
c0013519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001351d:	e8 45 ec ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	83 c4 0c             	add    esp,0xc
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <Device::findAndLoadDriver()>:
c001352a:	c3                   	ret    
c001352b:	90                   	nop

c001352c <Device::preOpenPCI(PCIDeviceInfo)>:
c001352c:	57                   	push   edi
c001352d:	b9 09 00 00 00       	mov    ecx,0x9
c0013532:	56                   	push   esi
c0013533:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013537:	8d 74 24 10          	lea    esi,[esp+0x10]
c001353b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013545:	81 c7 18 01 00 00    	add    edi,0x118
c001354b:	fc                   	cld    
c001354c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001354e:	5e                   	pop    esi
c001354f:	5f                   	pop    edi
c0013550:	c3                   	ret    
c0013551:	90                   	nop

c0013552 <Device::preOpenACPI(void*, char*, char*)>:
c0013552:	56                   	push   esi
c0013553:	53                   	push   ebx
c0013554:	83 ec 08             	sub    esp,0x8
c0013557:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001355b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001355f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013569:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001356d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013573:	6a 1e                	push   0x1e
c0013575:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001357b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001357f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013585:	50                   	push   eax
c0013586:	e8 04 d1 fe ff       	call   c000068f <memcpy>
c001358b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001358f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013593:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001359b:	83 c4 14             	add    esp,0x14
c001359e:	5b                   	pop    ebx
c001359f:	5e                   	pop    esi
c00135a0:	e9 ea d0 fe ff       	jmp    c000068f <memcpy>
c00135a5:	90                   	nop

c00135a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135a6:	55                   	push   ebp
c00135a7:	57                   	push   edi
c00135a8:	56                   	push   esi
c00135a9:	53                   	push   ebx
c00135aa:	83 ec 0c             	sub    esp,0xc
c00135ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135b1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135b5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135bd:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135c2:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135c9:	75 0b                	jne    c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00135cd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135d1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135d4:	eb 24                	jmp    c00135fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00135d6:	e8 87 42 00 00       	call   c0017862 <CPU::current()>
c00135db:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00135e3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00135e7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135eb:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00135ef:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00135f7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00135fa:	83 c4 0c             	add    esp,0xc
c00135fd:	5b                   	pop    ebx
c00135fe:	5e                   	pop    esi
c00135ff:	5f                   	pop    edi
c0013600:	5d                   	pop    ebp
c0013601:	ff e0                	jmp    eax
c0013603:	90                   	nop

c0013604 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013604:	57                   	push   edi
c0013605:	56                   	push   esi
c0013606:	53                   	push   ebx
c0013607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001360f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013613:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013618:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001361f:	75 0b                	jne    c001362c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013621:	8b 00                	mov    eax,DWORD PTR [eax]
c0013623:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013627:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001362a:	eb 20                	jmp    c001364c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001362c:	e8 31 42 00 00       	call   c0017862 <CPU::current()>
c0013631:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013637:	8b 10                	mov    edx,DWORD PTR [eax]
c0013639:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001363d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013641:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013645:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013649:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001364c:	5b                   	pop    ebx
c001364d:	5e                   	pop    esi
c001364e:	5f                   	pop    edi
c001364f:	ff e0                	jmp    eax
c0013651:	90                   	nop

c0013652 <Device::addChild(Device*)>:
c0013652:	53                   	push   ebx
c0013653:	83 ec 08             	sub    esp,0x8
c0013656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001365a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001365e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013664:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001366a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001366c:	85 d2                	test   edx,edx
c001366e:	74 04                	je     c0013674 <Device::addChild(Device*)+0x22>
c0013670:	89 d3                	mov    ebx,edx
c0013672:	eb f6                	jmp    c001366a <Device::addChild(Device*)+0x18>
c0013674:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013677:	83 ec 0c             	sub    esp,0xc
c001367a:	6a 08                	push   0x8
c001367c:	e8 d7 ea ff ff       	call   c0012158 <operator new(unsigned long)>
c0013681:	89 03                	mov    DWORD PTR [ebx],eax
c0013683:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013690:	83 c4 18             	add    esp,0x18
c0013693:	5b                   	pop    ebx
c0013694:	c3                   	ret    
c0013695:	90                   	nop

c0013696 <Device::removeAllChildren()>:
c0013696:	56                   	push   esi
c0013697:	53                   	push   ebx
c0013698:	52                   	push   edx
c0013699:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001369d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136a6:	74 17                	je     c00136bf <Device::removeAllChildren()+0x29>
c00136a8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136ab:	85 c0                	test   eax,eax
c00136ad:	74 0c                	je     c00136bb <Device::removeAllChildren()+0x25>
c00136af:	83 ec 0c             	sub    esp,0xc
c00136b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00136b4:	50                   	push   eax
c00136b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136bd:	eb e4                	jmp    c00136a3 <Device::removeAllChildren()+0xd>
c00136bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136cb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136d8:	58                   	pop    eax
c00136d9:	5b                   	pop    ebx
c00136da:	5e                   	pop    esi
c00136db:	c3                   	ret    

c00136dc <Device::hibernateAll()>:
c00136dc:	53                   	push   ebx
c00136dd:	83 ec 14             	sub    esp,0x14
c00136e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136e6:	53                   	push   ebx
c00136e7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136f6:	74 0f                	je     c0013707 <Device::hibernateAll()+0x2b>
c00136f8:	83 ec 0c             	sub    esp,0xc
c00136fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00136fe:	e8 d9 ff ff ff       	call   c00136dc <Device::hibernateAll()>
c0013703:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013705:	eb e9                	jmp    c00136f0 <Device::hibernateAll()+0x14>
c0013707:	83 c4 08             	add    esp,0x8
c001370a:	5b                   	pop    ebx
c001370b:	c3                   	ret    

c001370c <Device::wakeAll()>:
c001370c:	53                   	push   ebx
c001370d:	83 ec 14             	sub    esp,0x14
c0013710:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013714:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013716:	53                   	push   ebx
c0013717:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001371a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013720:	83 c4 10             	add    esp,0x10
c0013723:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013726:	74 0f                	je     c0013737 <Device::wakeAll()+0x2b>
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001372e:	e8 d9 ff ff ff       	call   c001370c <Device::wakeAll()>
c0013733:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013735:	eb e9                	jmp    c0013720 <Device::wakeAll()+0x14>
c0013737:	83 c4 08             	add    esp,0x8
c001373a:	5b                   	pop    ebx
c001373b:	c3                   	ret    

c001373c <Device::detectAll()>:
c001373c:	53                   	push   ebx
c001373d:	83 ec 14             	sub    esp,0x14
c0013740:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013744:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013746:	53                   	push   ebx
c0013747:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001374a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013750:	83 c4 10             	add    esp,0x10
c0013753:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013756:	74 0f                	je     c0013767 <Device::detectAll()+0x2b>
c0013758:	83 ec 0c             	sub    esp,0xc
c001375b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001375e:	e8 d9 ff ff ff       	call   c001373c <Device::detectAll()>
c0013763:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013765:	eb e9                	jmp    c0013750 <Device::detectAll()+0x14>
c0013767:	83 c4 08             	add    esp,0x8
c001376a:	5b                   	pop    ebx
c001376b:	c3                   	ret    

c001376c <Device::disableLegacyAll()>:
c001376c:	53                   	push   ebx
c001376d:	83 ec 14             	sub    esp,0x14
c0013770:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013774:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013776:	53                   	push   ebx
c0013777:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001377a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013786:	74 0f                	je     c0013797 <Device::disableLegacyAll()+0x2b>
c0013788:	83 ec 0c             	sub    esp,0xc
c001378b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001378e:	e8 d9 ff ff ff       	call   c001376c <Device::disableLegacyAll()>
c0013793:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013795:	eb e9                	jmp    c0013780 <Device::disableLegacyAll()+0x14>
c0013797:	83 c4 08             	add    esp,0x8
c001379a:	5b                   	pop    ebx
c001379b:	c3                   	ret    

c001379c <Device::loadDriversForAll()>:
c001379c:	53                   	push   ebx
c001379d:	83 ec 08             	sub    esp,0x8
c00137a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a4:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137aa:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137ac:	85 db                	test   ebx,ebx
c00137ae:	74 12                	je     c00137c2 <Device::loadDriversForAll()+0x26>
c00137b0:	83 ec 0c             	sub    esp,0xc
c00137b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137b6:	e8 e1 ff ff ff       	call   c001379c <Device::loadDriversForAll()>
c00137bb:	83 c4 10             	add    esp,0x10
c00137be:	89 d8                	mov    eax,ebx
c00137c0:	eb e8                	jmp    c00137aa <Device::loadDriversForAll()+0xe>
c00137c2:	83 c4 08             	add    esp,0x8
c00137c5:	5b                   	pop    ebx
c00137c6:	c3                   	ret    
c00137c7:	90                   	nop

c00137c8 <Device::closeAll()>:
c00137c8:	53                   	push   ebx
c00137c9:	83 ec 08             	sub    esp,0x8
c00137cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137d2:	6a 00                	push   0x0
c00137d4:	6a 00                	push   0x0
c00137d6:	6a 00                	push   0x0
c00137d8:	53                   	push   ebx
c00137d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137e2:	83 c4 10             	add    esp,0x10
c00137e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137e8:	74 0f                	je     c00137f9 <Device::closeAll()+0x31>
c00137ea:	83 ec 0c             	sub    esp,0xc
c00137ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137f0:	e8 d3 ff ff ff       	call   c00137c8 <Device::closeAll()>
c00137f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137f7:	eb e9                	jmp    c00137e2 <Device::closeAll()+0x1a>
c00137f9:	83 c4 08             	add    esp,0x8
c00137fc:	5b                   	pop    ebx
c00137fd:	c3                   	ret    

c00137fe <Device::powerSavingAll(PowerSavingLevel)>:
c00137fe:	56                   	push   esi
c00137ff:	53                   	push   ebx
c0013800:	83 ec 0c             	sub    esp,0xc
c0013803:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013807:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001380b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001380d:	56                   	push   esi
c001380e:	53                   	push   ebx
c001380f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013812:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013818:	83 c4 10             	add    esp,0x10
c001381b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001381e:	74 0f                	je     c001382f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013820:	52                   	push   edx
c0013821:	52                   	push   edx
c0013822:	56                   	push   esi
c0013823:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013826:	e8 d3 ff ff ff       	call   c00137fe <Device::powerSavingAll(PowerSavingLevel)>
c001382b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001382d:	eb e9                	jmp    c0013818 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001382f:	58                   	pop    eax
c0013830:	5b                   	pop    ebx
c0013831:	5e                   	pop    esi
c0013832:	c3                   	ret    
c0013833:	90                   	nop

c0013834 <Device::setName(char const*)>:
c0013834:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001383c:	e9 23 cf fe ff       	jmp    c0000764 <strcpy>
c0013841:	90                   	nop

c0013842 <Device::Device(char const*)>:
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	ba 58 74 02 c0       	mov    edx,0xc0027458
c001384a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384e:	89 10                	mov    DWORD PTR [eax],edx
c0013850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013854:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001385e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013862:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001386c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013870:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013888:	83 ec 08             	sub    esp,0x8
c001388b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001388f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013893:	e8 9c ff ff ff       	call   c0013834 <Device::setName(char const*)>
c0013898:	83 c4 10             	add    esp,0x10
c001389b:	83 ec 0c             	sub    esp,0xc
c001389e:	6a 08                	push   0x8
c00138a0:	e8 b3 e8 ff ff       	call   c0012158 <operator new(unsigned long)>
c00138a5:	83 c4 10             	add    esp,0x10
c00138a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138b9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ef:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00138f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013908:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013916:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013924:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001392e:	90                   	nop
c001392f:	83 c4 0c             	add    esp,0xc
c0013932:	c3                   	ret    
c0013933:	90                   	nop

c0013934 <Device::getName()>:
c0013934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013938:	05 d0 00 00 00       	add    eax,0xd0
c001393d:	c3                   	ret    

c001393e <DriverlessDevice::DriverlessDevice(char const*)>:
c001393e:	83 ec 0c             	sub    esp,0xc
c0013941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013945:	83 ec 08             	sub    esp,0x8
c0013948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394c:	50                   	push   eax
c001394d:	e8 f0 fe ff ff       	call   c0013842 <Device::Device(char const*)>
c0013952:	83 c4 10             	add    esp,0x10
c0013955:	ba 84 74 02 c0       	mov    edx,0xc0027484
c001395a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395e:	89 10                	mov    DWORD PTR [eax],edx
c0013960:	90                   	nop
c0013961:	83 c4 0c             	add    esp,0xc
c0013964:	c3                   	ret    
c0013965:	90                   	nop

c0013966 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013966:	57                   	push   edi
c0013967:	56                   	push   esi
c0013968:	53                   	push   ebx
c0013969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001396d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013971:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013975:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001397b:	75 0c                	jne    c0013989 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001397d:	52                   	push   edx
c001397e:	52                   	push   edx
c001397f:	53                   	push   ebx
c0013980:	56                   	push   esi
c0013981:	e8 2e 19 01 00       	call   c00252b4 <LinkedList<Device>::addElement(Device*)>
c0013986:	83 c4 10             	add    esp,0x10
c0013989:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001398f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013992:	74 12                	je     c00139a6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013994:	50                   	push   eax
c0013995:	57                   	push   edi
c0013996:	56                   	push   esi
c0013997:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001399a:	e8 c7 ff ff ff       	call   c0013966 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001399f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	eb e9                	jmp    c001398f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139a6:	5b                   	pop    ebx
c00139a7:	5e                   	pop    esi
c00139a8:	5f                   	pop    edi
c00139a9:	c3                   	ret    

c00139aa <getDevicesOfType(DeviceType)>:
c00139aa:	53                   	push   ebx
c00139ab:	83 ec 14             	sub    esp,0x14
c00139ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139b2:	53                   	push   ebx
c00139b3:	e8 d8 19 01 00       	call   c0025390 <LinkedList<Device>::LinkedList()>
c00139b8:	83 c4 0c             	add    esp,0xc
c00139bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139bf:	53                   	push   ebx
c00139c0:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00139c6:	e8 9b ff ff ff       	call   c0013966 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139cb:	89 d8                	mov    eax,ebx
c00139cd:	83 c4 18             	add    esp,0x18
c00139d0:	5b                   	pop    ebx
c00139d1:	c2 04 00             	ret    0x4

c00139d4 <HardDiskController::HardDiskController(char const*)>:
c00139d4:	83 ec 0c             	sub    esp,0xc
c00139d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139db:	83 ec 08             	sub    esp,0x8
c00139de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e2:	50                   	push   eax
c00139e3:	e8 5a fe ff ff       	call   c0013842 <Device::Device(char const*)>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c00139f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f4:	89 10                	mov    DWORD PTR [eax],edx
c00139f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a04:	90                   	nop
c0013a05:	83 c4 0c             	add    esp,0xc
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <HardDiskController::~HardDiskController()>:
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	89 10                	mov    DWORD PTR [eax],edx
c0013a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	50                   	push   eax
c0013a20:	e8 cf fa ff ff       	call   c00134f4 <Device::~Device()>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	90                   	nop
c0013a29:	83 c4 0c             	add    esp,0xc
c0013a2c:	c3                   	ret    
c0013a2d:	90                   	nop

c0013a2e <HardDiskController::~HardDiskController()>:
c0013a2e:	83 ec 0c             	sub    esp,0xc
c0013a31:	83 ec 0c             	sub    esp,0xc
c0013a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a38:	e8 cd ff ff ff       	call   c0013a0a <HardDiskController::~HardDiskController()>
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	83 ec 08             	sub    esp,0x8
c0013a43:	68 58 01 00 00       	push   0x158
c0013a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a4c:	e8 16 e7 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	83 c4 0c             	add    esp,0xc
c0013a57:	c3                   	ret    

c0013a58 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5f:	83 ec 08             	sub    esp,0x8
c0013a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a66:	50                   	push   eax
c0013a67:	e8 d6 fd ff ff       	call   c0013842 <Device::Device(char const*)>
c0013a6c:	83 c4 10             	add    esp,0x10
c0013a6f:	ba dc 74 02 c0       	mov    edx,0xc00274dc
c0013a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a78:	89 10                	mov    DWORD PTR [eax],edx
c0013a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a7e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a89:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a94:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013aa6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013aba:	90                   	nop
c0013abb:	83 c4 0c             	add    esp,0xc
c0013abe:	c3                   	ret    
c0013abf:	90                   	nop

c0013ac0 <PhysicalDisk::startCache()>:
c0013ac0:	56                   	push   esi
c0013ac1:	53                   	push   ebx
c0013ac2:	83 ec 10             	sub    esp,0x10
c0013ac5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ac9:	6a 30                	push   0x30
c0013acb:	e8 88 e6 ff ff       	call   c0012158 <operator new(unsigned long)>
c0013ad0:	89 c6                	mov    esi,eax
c0013ad2:	58                   	pop    eax
c0013ad3:	5a                   	pop    edx
c0013ad4:	53                   	push   ebx
c0013ad5:	56                   	push   esi
c0013ad6:	e8 15 25 00 00       	call   c0015ff0 <VCache::VCache(PhysicalDisk*)>
c0013adb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ae1:	83 c4 14             	add    esp,0x14
c0013ae4:	5b                   	pop    ebx
c0013ae5:	5e                   	pop    esi
c0013ae6:	c3                   	ret    
c0013ae7:	90                   	nop

c0013ae8 <PhysicalDisk::~PhysicalDisk()>:
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	ba dc 74 02 c0       	mov    edx,0xc00274dc
c0013af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af4:	89 10                	mov    DWORD PTR [eax],edx
c0013af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afa:	83 ec 0c             	sub    esp,0xc
c0013afd:	50                   	push   eax
c0013afe:	e8 f1 f9 ff ff       	call   c00134f4 <Device::~Device()>
c0013b03:	83 c4 10             	add    esp,0x10
c0013b06:	90                   	nop
c0013b07:	83 c4 0c             	add    esp,0xc
c0013b0a:	c3                   	ret    
c0013b0b:	90                   	nop

c0013b0c <PhysicalDisk::~PhysicalDisk()>:
c0013b0c:	83 ec 0c             	sub    esp,0xc
c0013b0f:	83 ec 0c             	sub    esp,0xc
c0013b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b16:	e8 cd ff ff ff       	call   c0013ae8 <PhysicalDisk::~PhysicalDisk()>
c0013b1b:	83 c4 10             	add    esp,0x10
c0013b1e:	83 ec 08             	sub    esp,0x8
c0013b21:	68 6c 01 00 00       	push   0x16c
c0013b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b2a:	e8 38 e6 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0013b2f:	83 c4 10             	add    esp,0x10
c0013b32:	83 c4 0c             	add    esp,0xc
c0013b35:	c3                   	ret    

c0013b36 <FPU::FPU(char const*)>:
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3d:	83 ec 08             	sub    esp,0x8
c0013b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b44:	50                   	push   eax
c0013b45:	e8 f8 fc ff ff       	call   c0013842 <Device::Device(char const*)>
c0013b4a:	83 c4 10             	add    esp,0x10
c0013b4d:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0013b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b56:	89 10                	mov    DWORD PTR [eax],edx
c0013b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b66:	90                   	nop
c0013b67:	83 c4 0c             	add    esp,0xc
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop

c0013b6c <FPU::~FPU()>:
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0013b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b78:	89 10                	mov    DWORD PTR [eax],edx
c0013b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7e:	83 ec 0c             	sub    esp,0xc
c0013b81:	50                   	push   eax
c0013b82:	e8 6d f9 ff ff       	call   c00134f4 <Device::~Device()>
c0013b87:	83 c4 10             	add    esp,0x10
c0013b8a:	90                   	nop
c0013b8b:	83 c4 0c             	add    esp,0xc
c0013b8e:	c3                   	ret    
c0013b8f:	90                   	nop

c0013b90 <FPU::~FPU()>:
c0013b90:	83 ec 0c             	sub    esp,0xc
c0013b93:	83 ec 0c             	sub    esp,0xc
c0013b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b9a:	e8 cd ff ff ff       	call   c0013b6c <FPU::~FPU()>
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	83 ec 08             	sub    esp,0x8
c0013ba5:	68 58 01 00 00       	push   0x158
c0013baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bae:	e8 b4 e5 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0013bb3:	83 c4 10             	add    esp,0x10
c0013bb6:	83 c4 0c             	add    esp,0xc
c0013bb9:	c3                   	ret    

c0013bba <setupFPU()>:
c0013bba:	53                   	push   ebx
c0013bbb:	83 ec 08             	sub    esp,0x8
c0013bbe:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0013bc4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013bcb:	74 19                	je     c0013be6 <setupFPU()+0x2c>
c0013bcd:	83 ec 0c             	sub    esp,0xc
c0013bd0:	68 58 01 00 00       	push   0x158
c0013bd5:	e8 7e e5 ff ff       	call   c0012158 <operator new(unsigned long)>
c0013bda:	89 c3                	mov    ebx,eax
c0013bdc:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bdf:	e8 40 e4 00 00       	call   c0022024 <AVX::AVX()>
c0013be4:	eb 5b                	jmp    c0013c41 <setupFPU()+0x87>
c0013be6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013bec:	84 c0                	test   al,al
c0013bee:	79 19                	jns    c0013c09 <setupFPU()+0x4f>
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	68 58 01 00 00       	push   0x158
c0013bf8:	e8 5b e5 ff ff       	call   c0012158 <operator new(unsigned long)>
c0013bfd:	89 c3                	mov    ebx,eax
c0013bff:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c02:	e8 43 e5 00 00       	call   c002214a <SSE::SSE()>
c0013c07:	eb 38                	jmp    c0013c41 <setupFPU()+0x87>
c0013c09:	a8 20                	test   al,0x20
c0013c0b:	74 19                	je     c0013c26 <setupFPU()+0x6c>
c0013c0d:	83 ec 0c             	sub    esp,0xc
c0013c10:	68 58 01 00 00       	push   0x158
c0013c15:	e8 3e e5 ff ff       	call   c0012158 <operator new(unsigned long)>
c0013c1a:	89 c3                	mov    ebx,eax
c0013c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c1f:	e8 90 e4 00 00       	call   c00220b4 <MMX::MMX()>
c0013c24:	eb 1b                	jmp    c0013c41 <setupFPU()+0x87>
c0013c26:	a8 10                	test   al,0x10
c0013c28:	74 1c                	je     c0013c46 <setupFPU()+0x8c>
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	68 58 01 00 00       	push   0x158
c0013c32:	e8 21 e5 ff ff       	call   c0012158 <operator new(unsigned long)>
c0013c37:	89 c3                	mov    ebx,eax
c0013c39:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c3c:	e8 97 e5 00 00       	call   c00221d8 <x87::x87()>
c0013c41:	83 c4 10             	add    esp,0x10
c0013c44:	eb 35                	jmp    c0013c7b <setupFPU()+0xc1>
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	83 e0 ef             	and    eax,0xffffffef
c0013c4c:	31 db                	xor    ebx,ebx
c0013c4e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c54:	68 08 75 02 c0       	push   0xc0027508
c0013c59:	e8 e9 e5 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0013c5e:	e8 ff 3b 00 00       	call   c0017862 <CPU::current()>
c0013c63:	e8 fa 3b 00 00       	call   c0017862 <CPU::current()>
c0013c68:	e8 7b 17 01 00       	call   c00253e8 <CPU::readCR0()>
c0013c6d:	83 c8 04             	or     eax,0x4
c0013c70:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c73:	e8 82 17 01 00       	call   c00253fa <CPU::writeCR0(unsigned long)>
c0013c78:	83 c4 10             	add    esp,0x10
c0013c7b:	89 d8                	mov    eax,ebx
c0013c7d:	83 c4 08             	add    esp,0x8
c0013c80:	5b                   	pop    ebx
c0013c81:	c3                   	ret    

c0013c82 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c8a:	c1 e0 04             	shl    eax,0x4
c0013c8d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013c91:	8d 50 10             	lea    edx,[eax+0x10]
c0013c94:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013c9a:	74 08                	je     c0013ca4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013c9c:	83 c0 04             	add    eax,0x4
c0013c9f:	39 d0                	cmp    eax,edx
c0013ca1:	75 f1                	jne    c0013c94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013ca3:	c3                   	ret    
c0013ca4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cae:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013cb8:	eb e2                	jmp    c0013c9c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013cba <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013cba:	57                   	push   edi
c0013cbb:	31 c0                	xor    eax,eax
c0013cbd:	56                   	push   esi
c0013cbe:	53                   	push   ebx
c0013cbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013cc3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cc7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013ccb:	89 da                	mov    edx,ebx
c0013ccd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cd1:	c1 e2 04             	shl    edx,0x4
c0013cd4:	01 ca                	add    edx,ecx
c0013cd6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013cde:	74 16                	je     c0013cf6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013ce0:	40                   	inc    eax
c0013ce1:	83 f8 04             	cmp    eax,0x4
c0013ce4:	75 f0                	jne    c0013cd6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013ce6:	c7 44 24 10 4c 75 02 c0 	mov    DWORD PTR [esp+0x10],0xc002754c
c0013cee:	5b                   	pop    ebx
c0013cef:	5e                   	pop    esi
c0013cf0:	5f                   	pop    edi
c0013cf1:	e9 ef 4c 00 00       	jmp    c00189e5 <Krnl::panic(char const*)>
c0013cf6:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013cf9:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013cfc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d02:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d08:	5b                   	pop    ebx
c0013d09:	5e                   	pop    esi
c0013d0a:	5f                   	pop    edi
c0013d0b:	c3                   	ret    

c0013d0c <doubleFault(regs*, void*)>:
c0013d0c:	55                   	push   ebp
c0013d0d:	89 e5                	mov    ebp,esp
c0013d0f:	83 ec 08             	sub    esp,0x8
c0013d12:	83 ec 0c             	sub    esp,0xc
c0013d15:	68 87 75 02 c0       	push   0xc0027587
c0013d1a:	e8 c6 4c 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	90                   	nop
c0013d23:	c9                   	leave  
c0013d24:	c3                   	ret    
c0013d25:	90                   	nop

c0013d26 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d26:	56                   	push   esi
c0013d27:	53                   	push   ebx
c0013d28:	50                   	push   eax
c0013d29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d2d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d31:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d36:	75 35                	jne    c0013d6d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d38:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d3b:	31 d2                	xor    edx,edx
c0013d3d:	89 c1                	mov    ecx,eax
c0013d3f:	c1 e1 04             	shl    ecx,0x4
c0013d42:	01 f1                	add    ecx,esi
c0013d44:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d4c:	74 3e                	je     c0013d8c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d4e:	42                   	inc    edx
c0013d4f:	83 fa 04             	cmp    edx,0x4
c0013d52:	75 f0                	jne    c0013d44 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	68 cc 75 02 c0       	push   0xc00275cc
c0013d5c:	e8 84 4c 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d69:	5a                   	pop    edx
c0013d6a:	5b                   	pop    ebx
c0013d6b:	5e                   	pop    esi
c0013d6c:	c3                   	ret    
c0013d6d:	83 ec 0c             	sub    esp,0xc
c0013d70:	56                   	push   esi
c0013d71:	e8 be fb ff ff       	call   c0013934 <Device::getName()>
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d7c:	75 ba                	jne    c0013d38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d7e:	83 fb 0f             	cmp    ebx,0xf
c0013d81:	7f 29                	jg     c0013dac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d83:	0f b6 9b e0 96 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6920]
c0013d8a:	eb ac                	jmp    c0013d38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d8c:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d93:	8d 04 86             	lea    eax,[esi+eax*4]
c0013d96:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013d9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013da0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013da6:	89 d8                	mov    eax,ebx
c0013da8:	5a                   	pop    edx
c0013da9:	5b                   	pop    ebx
c0013daa:	5e                   	pop    esi
c0013dab:	c3                   	ret    
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	68 94 75 02 c0       	push   0xc0027594
c0013db4:	e8 2c 4c 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0013db9:	83 c4 10             	add    esp,0x10
c0013dbc:	e9 77 ff ff ff       	jmp    c0013d38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dc1:	90                   	nop

c0013dc2 <InterruptController::clearAllHandlers(int, bool)>:
c0013dc2:	56                   	push   esi
c0013dc3:	53                   	push   ebx
c0013dc4:	52                   	push   edx
c0013dc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dcd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013dd2:	75 61                	jne    c0013e35 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013dd4:	8d 46 20             	lea    eax,[esi+0x20]
c0013dd7:	c1 e6 04             	shl    esi,0x4
c0013dda:	c1 e0 04             	shl    eax,0x4
c0013ddd:	01 de                	add    esi,ebx
c0013ddf:	01 d8                	add    eax,ebx
c0013de1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013deb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013df5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013dff:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e09:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e13:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e1d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e27:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e31:	58                   	pop    eax
c0013e32:	5b                   	pop    ebx
c0013e33:	5e                   	pop    esi
c0013e34:	c3                   	ret    
c0013e35:	83 ec 0c             	sub    esp,0xc
c0013e38:	53                   	push   ebx
c0013e39:	e8 f6 fa ff ff       	call   c0013934 <Device::getName()>
c0013e3e:	83 c4 10             	add    esp,0x10
c0013e41:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e44:	75 8e                	jne    c0013dd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e46:	83 fe 0f             	cmp    esi,0xf
c0013e49:	7f 09                	jg     c0013e54 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e4b:	0f b6 b6 e0 96 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6920]
c0013e52:	eb 80                	jmp    c0013dd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e54:	83 ec 0c             	sub    esp,0xc
c0013e57:	68 08 76 02 c0       	push   0xc0027608
c0013e5c:	e8 84 4b 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0013e61:	83 c4 10             	add    esp,0x10
c0013e64:	e9 6b ff ff ff       	jmp    c0013dd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e69:	90                   	nop

c0013e6a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e6a:	56                   	push   esi
c0013e6b:	53                   	push   ebx
c0013e6c:	52                   	push   edx
c0013e6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e75:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e7a:	75 3a                	jne    c0013eb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e80:	8d 50 20             	lea    edx,[eax+0x20]
c0013e83:	c1 e2 04             	shl    edx,0x4
c0013e86:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e89:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e8d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013e93:	74 0b                	je     c0013ea0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013e95:	83 c0 04             	add    eax,0x4
c0013e98:	39 d0                	cmp    eax,edx
c0013e9a:	75 f1                	jne    c0013e8d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013e9c:	58                   	pop    eax
c0013e9d:	5b                   	pop    ebx
c0013e9e:	5e                   	pop    esi
c0013e9f:	c3                   	ret    
c0013ea0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eaa:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013eb4:	eb df                	jmp    c0013e95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013eb6:	83 ec 0c             	sub    esp,0xc
c0013eb9:	56                   	push   esi
c0013eba:	e8 75 fa ff ff       	call   c0013934 <Device::getName()>
c0013ebf:	83 c4 10             	add    esp,0x10
c0013ec2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ec5:	75 b5                	jne    c0013e7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ec7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013ecc:	7f 11                	jg     c0013edf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ece:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ed2:	0f b6 80 e0 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6920]
c0013ed9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013edd:	eb 9d                	jmp    c0013e7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013edf:	83 ec 0c             	sub    esp,0xc
c0013ee2:	68 08 76 02 c0       	push   0xc0027608
c0013ee7:	e8 f9 4a 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	eb 8b                	jmp    c0013e7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013ef1 <nmiHandler(regs*, void*)>:
c0013ef1:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0013ef6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013efa:	e9 83 a9 ff ff       	jmp    c000e882 <Computer::handleNMI()>

c0013eff <int_handler>:
c0013eff:	55                   	push   ebp
c0013f00:	57                   	push   edi
c0013f01:	56                   	push   esi
c0013f02:	53                   	push   ebx
c0013f03:	83 ec 0c             	sub    esp,0xc
c0013f06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f0a:	80 3d 54 ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae54,0x0
c0013f11:	74 0b                	je     c0013f1e <int_handler+0x1f>
c0013f13:	fa                   	cli    
c0013f14:	f4                   	hlt    
c0013f15:	80 3d 54 ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae54,0x0
c0013f1c:	75 f5                	jne    c0013f13 <int_handler+0x14>
c0013f1e:	e8 3f 39 00 00       	call   c0017862 <CPU::current()>
c0013f23:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f26:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f2c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f2f:	83 f8 17             	cmp    eax,0x17
c0013f32:	77 13                	ja     c0013f47 <int_handler+0x48>
c0013f34:	83 ec 08             	sub    esp,0x8
c0013f37:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f39:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f3c:	0f b6 c0             	movzx  eax,al
c0013f3f:	50                   	push   eax
c0013f40:	57                   	push   edi
c0013f41:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f44:	83 c4 10             	add    esp,0x10
c0013f47:	83 c3 15             	add    ebx,0x15
c0013f4a:	c1 e3 04             	shl    ebx,0x4
c0013f4d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f51:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f58:	31 db                	xor    ebx,ebx
c0013f5a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f5e:	85 c0                	test   eax,eax
c0013f60:	74 13                	je     c0013f75 <int_handler+0x76>
c0013f62:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f65:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f69:	74 1c                	je     c0013f87 <int_handler+0x88>
c0013f6b:	83 ec 08             	sub    esp,0x8
c0013f6e:	52                   	push   edx
c0013f6f:	56                   	push   esi
c0013f70:	ff d0                	call   eax
c0013f72:	83 c4 10             	add    esp,0x10
c0013f75:	43                   	inc    ebx
c0013f76:	83 fb 04             	cmp    ebx,0x4
c0013f79:	75 df                	jne    c0013f5a <int_handler+0x5b>
c0013f7b:	83 c4 0c             	add    esp,0xc
c0013f7e:	31 c0                	xor    eax,eax
c0013f80:	5b                   	pop    ebx
c0013f81:	31 d2                	xor    edx,edx
c0013f83:	5e                   	pop    esi
c0013f84:	5f                   	pop    edi
c0013f85:	5d                   	pop    ebp
c0013f86:	c3                   	ret    
c0013f87:	83 ec 08             	sub    esp,0x8
c0013f8a:	52                   	push   edx
c0013f8b:	56                   	push   esi
c0013f8c:	ff d0                	call   eax
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	83 c4 0c             	add    esp,0xc
c0013f94:	5b                   	pop    ebx
c0013f95:	5e                   	pop    esi
c0013f96:	5f                   	pop    edi
c0013f97:	5d                   	pop    ebp
c0013f98:	c3                   	ret    
c0013f99:	90                   	nop

c0013f9a <InterruptController::InterruptController(char const*)>:
c0013f9a:	83 ec 1c             	sub    esp,0x1c
c0013f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa1:	83 ec 08             	sub    esp,0x8
c0013fa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fa8:	50                   	push   eax
c0013fa9:	e8 94 f8 ff ff       	call   c0013842 <Device::Device(char const*)>
c0013fae:	83 c4 10             	add    esp,0x10
c0013fb1:	ba 3c 78 02 c0       	mov    edx,0xc002783c
c0013fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fba:	89 10                	mov    DWORD PTR [eax],edx
c0013fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013fca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fd2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013fda:	7f 5e                	jg     c001403a <InterruptController::InterruptController(char const*)+0xa0>
c0013fdc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fe4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013fe9:	7f 49                	jg     c0014034 <InterruptController::InterruptController(char const*)+0x9a>
c0013feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ff3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013ffe:	01 ca                	add    edx,ecx
c0014000:	83 c2 54             	add    edx,0x54
c0014003:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001400b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014013:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001401a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001401e:	01 ca                	add    edx,ecx
c0014020:	81 c2 54 04 00 00    	add    edx,0x454
c0014026:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001402e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014032:	eb b0                	jmp    c0013fe4 <InterruptController::InterruptController(char const*)+0x4a>
c0014034:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014038:	eb 98                	jmp    c0013fd2 <InterruptController::InterruptController(char const*)+0x38>
c001403a:	90                   	nop
c001403b:	83 c4 1c             	add    esp,0x1c
c001403e:	c3                   	ret    
c001403f:	90                   	nop

c0014040 <InterruptController::~InterruptController()>:
c0014040:	83 ec 0c             	sub    esp,0xc
c0014043:	ba 3c 78 02 c0       	mov    edx,0xc002783c
c0014048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404c:	89 10                	mov    DWORD PTR [eax],edx
c001404e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014052:	83 ec 0c             	sub    esp,0xc
c0014055:	50                   	push   eax
c0014056:	e8 99 f4 ff ff       	call   c00134f4 <Device::~Device()>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	90                   	nop
c001405f:	83 c4 0c             	add    esp,0xc
c0014062:	c3                   	ret    
c0014063:	90                   	nop

c0014064 <InterruptController::~InterruptController()>:
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	83 ec 0c             	sub    esp,0xc
c001406a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001406e:	e8 cd ff ff ff       	call   c0014040 <InterruptController::~InterruptController()>
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	83 ec 08             	sub    esp,0x8
c0014079:	68 58 21 00 00       	push   0x2158
c001407e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014082:	e8 e0 e0 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0014087:	83 c4 10             	add    esp,0x10
c001408a:	83 c4 0c             	add    esp,0xc
c001408d:	c3                   	ret    

c001408e <displayDebugInfo(regs*)>:
c001408e:	55                   	push   ebp
c001408f:	57                   	push   edi
c0014090:	56                   	push   esi
c0014091:	53                   	push   ebx
c0014092:	83 ec 24             	sub    esp,0x24
c0014095:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014099:	0f 20 c2             	mov    edx,cr0
c001409c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140a0:	0f 20 d7             	mov    edi,cr2
c00140a3:	0f 20 de             	mov    esi,cr3
c00140a6:	0f 20 e5             	mov    ebp,cr4
c00140a9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140ac:	68 42 76 02 c0       	push   0xc0027642
c00140b1:	e8 91 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00140b6:	58                   	pop    eax
c00140b7:	5a                   	pop    edx
c00140b8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140bb:	68 4d 76 02 c0       	push   0xc002764d
c00140c0:	e8 82 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00140c5:	59                   	pop    ecx
c00140c6:	58                   	pop    eax
c00140c7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140ca:	68 58 76 02 c0       	push   0xc0027658
c00140cf:	e8 73 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00140d4:	58                   	pop    eax
c00140d5:	5a                   	pop    edx
c00140d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140d9:	68 63 76 02 c0       	push   0xc0027663
c00140de:	e8 64 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00140e3:	59                   	pop    ecx
c00140e4:	58                   	pop    eax
c00140e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140e8:	68 6e 76 02 c0       	push   0xc002766e
c00140ed:	e8 55 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00140f2:	58                   	pop    eax
c00140f3:	5a                   	pop    edx
c00140f4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00140f7:	68 79 76 02 c0       	push   0xc0027679
c00140fc:	e8 46 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014101:	59                   	pop    ecx
c0014102:	58                   	pop    eax
c0014103:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014106:	68 84 76 02 c0       	push   0xc0027684
c001410b:	e8 37 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014110:	58                   	pop    eax
c0014111:	5a                   	pop    edx
c0014112:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014115:	68 8f 76 02 c0       	push   0xc002768f
c001411a:	e8 28 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001411f:	59                   	pop    ecx
c0014120:	58                   	pop    eax
c0014121:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014124:	68 9a 76 02 c0       	push   0xc002769a
c0014129:	e8 19 e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001412e:	58                   	pop    eax
c001412f:	5a                   	pop    edx
c0014130:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014133:	68 a9 76 02 c0       	push   0xc00276a9
c0014138:	e8 0a e1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001413d:	59                   	pop    ecx
c001413e:	58                   	pop    eax
c001413f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014142:	68 b4 76 02 c0       	push   0xc00276b4
c0014147:	e8 fb e0 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001414c:	58                   	pop    eax
c001414d:	5a                   	pop    edx
c001414e:	57                   	push   edi
c001414f:	68 bf 76 02 c0       	push   0xc00276bf
c0014154:	e8 ee e0 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014159:	59                   	pop    ecx
c001415a:	58                   	pop    eax
c001415b:	56                   	push   esi
c001415c:	68 ca 76 02 c0       	push   0xc00276ca
c0014161:	e8 e1 e0 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014166:	58                   	pop    eax
c0014167:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001416c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014172:	e8 fc c2 ff ff       	call   c0010473 <setActiveTerminal(VgaText*)>
c0014177:	58                   	pop    eax
c0014178:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001417b:	5a                   	pop    edx
c001417c:	c1 e0 05             	shl    eax,0x5
c001417f:	05 40 94 02 c0       	add    eax,0xc0029440
c0014184:	50                   	push   eax
c0014185:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001418a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014190:	e8 fd c6 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014195:	59                   	pop    ecx
c0014196:	58                   	pop    eax
c0014197:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001419c:	68 d5 76 02 c0       	push   0xc00276d5
c00141a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141a7:	e8 e6 c6 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c00141ac:	58                   	pop    eax
c00141ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141b2:	5a                   	pop    edx
c00141b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00141b6:	83 c0 0c             	add    eax,0xc
c00141b9:	50                   	push   eax
c00141ba:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c5:	e8 c8 c6 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c00141ca:	59                   	pop    ecx
c00141cb:	58                   	pop    eax
c00141cc:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141d1:	68 de 76 02 c0       	push   0xc00276de
c00141d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141dc:	e8 b1 c6 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c00141e1:	58                   	pop    eax
c00141e2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141e7:	5a                   	pop    edx
c00141e8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f1:	e8 c2 c6 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c00141f6:	59                   	pop    ecx
c00141f7:	58                   	pop    eax
c00141f8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141fd:	68 e6 76 02 c0       	push   0xc00276e6
c0014202:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014208:	e8 85 c6 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c001420d:	58                   	pop    eax
c001420e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014213:	5a                   	pop    edx
c0014214:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014217:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001421d:	e8 96 c6 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0014222:	59                   	pop    ecx
c0014223:	58                   	pop    eax
c0014224:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014229:	68 ee 76 02 c0       	push   0xc00276ee
c001422e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014234:	e8 59 c6 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014239:	58                   	pop    eax
c001423a:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001423f:	5a                   	pop    edx
c0014240:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014243:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014249:	e8 6a c6 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c001424e:	59                   	pop    ecx
c001424f:	58                   	pop    eax
c0014250:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014255:	68 f6 76 02 c0       	push   0xc00276f6
c001425a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014260:	e8 2d c6 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014265:	58                   	pop    eax
c0014266:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001426b:	5a                   	pop    edx
c001426c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001426f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014275:	e8 3e c6 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c001427a:	59                   	pop    ecx
c001427b:	58                   	pop    eax
c001427c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014281:	68 fe 76 02 c0       	push   0xc00276fe
c0014286:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001428c:	e8 01 c6 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014291:	58                   	pop    eax
c0014292:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014297:	5a                   	pop    edx
c0014298:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001429b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a1:	e8 12 c6 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c00142a6:	59                   	pop    ecx
c00142a7:	58                   	pop    eax
c00142a8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142ad:	68 06 77 02 c0       	push   0xc0027706
c00142b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b8:	e8 d5 c5 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c00142bd:	58                   	pop    eax
c00142be:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142c3:	5a                   	pop    edx
c00142c4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142cd:	e8 e6 c5 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c00142d2:	59                   	pop    ecx
c00142d3:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142d8:	5b                   	pop    ebx
c00142d9:	68 0e 77 02 c0       	push   0xc002770e
c00142de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e4:	e8 a9 c5 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c00142e9:	58                   	pop    eax
c00142ea:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142ef:	5a                   	pop    edx
c00142f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142f4:	52                   	push   edx
c00142f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142fb:	e8 b8 c5 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0014300:	59                   	pop    ecx
c0014301:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014306:	5b                   	pop    ebx
c0014307:	68 17 77 02 c0       	push   0xc0027717
c001430c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014312:	e8 7b c5 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014317:	58                   	pop    eax
c0014318:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001431d:	5a                   	pop    edx
c001431e:	57                   	push   edi
c001431f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014325:	e8 8e c5 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c001432a:	59                   	pop    ecx
c001432b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014330:	5b                   	pop    ebx
c0014331:	68 1f 77 02 c0       	push   0xc002771f
c0014336:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001433c:	e8 51 c5 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014341:	5f                   	pop    edi
c0014342:	58                   	pop    eax
c0014343:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014348:	56                   	push   esi
c0014349:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434f:	e8 64 c5 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0014354:	58                   	pop    eax
c0014355:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001435a:	5a                   	pop    edx
c001435b:	68 27 77 02 c0       	push   0xc0027727
c0014360:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014366:	e8 27 c5 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c001436b:	59                   	pop    ecx
c001436c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014371:	5b                   	pop    ebx
c0014372:	55                   	push   ebp
c0014373:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014379:	e8 3a c5 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c001437e:	5e                   	pop    esi
c001437f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014384:	5f                   	pop    edi
c0014385:	68 2f 77 02 c0       	push   0xc002772f
c001438a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014390:	e8 fd c4 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014395:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001439a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143a0:	e8 5e 10 01 00       	call   c0025403 <CPU::readDR0()>
c00143a5:	5d                   	pop    ebp
c00143a6:	5a                   	pop    edx
c00143a7:	50                   	push   eax
c00143a8:	53                   	push   ebx
c00143a9:	e8 0a c5 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c00143ae:	59                   	pop    ecx
c00143af:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143b4:	5b                   	pop    ebx
c00143b5:	68 38 77 02 c0       	push   0xc0027738
c00143ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c0:	e8 cd c4 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c00143c5:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143ca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143d0:	e8 40 10 01 00       	call   c0025415 <CPU::readDR1()>
c00143d5:	5e                   	pop    esi
c00143d6:	5f                   	pop    edi
c00143d7:	50                   	push   eax
c00143d8:	53                   	push   ebx
c00143d9:	e8 da c4 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c00143de:	5d                   	pop    ebp
c00143df:	58                   	pop    eax
c00143e0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143e5:	68 40 77 02 c0       	push   0xc0027740
c00143ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143f0:	e8 9d c4 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c00143f5:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143fa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014400:	e8 22 10 01 00       	call   c0025427 <CPU::readDR2()>
c0014405:	5a                   	pop    edx
c0014406:	59                   	pop    ecx
c0014407:	50                   	push   eax
c0014408:	53                   	push   ebx
c0014409:	e8 aa c4 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c001440e:	5b                   	pop    ebx
c001440f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014414:	5e                   	pop    esi
c0014415:	68 48 77 02 c0       	push   0xc0027748
c001441a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014420:	e8 6d c4 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014425:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001442a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014430:	e8 04 10 01 00       	call   c0025439 <CPU::readDR3()>
c0014435:	5f                   	pop    edi
c0014436:	5d                   	pop    ebp
c0014437:	50                   	push   eax
c0014438:	53                   	push   ebx
c0014439:	e8 7a c4 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c001443e:	58                   	pop    eax
c001443f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014444:	5a                   	pop    edx
c0014445:	68 50 77 02 c0       	push   0xc0027750
c001444a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014450:	e8 3d c4 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014455:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001445a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014460:	e8 e6 0f 01 00       	call   c002544b <CPU::readDR6()>
c0014465:	59                   	pop    ecx
c0014466:	5e                   	pop    esi
c0014467:	50                   	push   eax
c0014468:	53                   	push   ebx
c0014469:	e8 4a c4 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c001446e:	5f                   	pop    edi
c001446f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014474:	5d                   	pop    ebp
c0014475:	68 58 77 02 c0       	push   0xc0027758
c001447a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014480:	e8 0d c4 ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0014485:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001448a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014490:	e8 c8 0f 01 00       	call   c002545d <CPU::readDR7()>
c0014495:	5a                   	pop    edx
c0014496:	59                   	pop    ecx
c0014497:	50                   	push   eax
c0014498:	53                   	push   ebx
c0014499:	e8 1a c4 ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c001449e:	fa                   	cli    
c001449f:	f4                   	hlt    
c00144a0:	83 c4 10             	add    esp,0x10
c00144a3:	eb fe                	jmp    c00144a3 <displayDebugInfo(regs*)+0x415>

c00144a5 <x87EmulHandler(regs*, void*)>:
c00144a5:	53                   	push   ebx
c00144a6:	83 ec 14             	sub    esp,0x14
c00144a9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144ad:	53                   	push   ebx
c00144ae:	e8 84 8d 00 00       	call   c001d237 <Vm::x87Handler(regs*)>
c00144b3:	83 c4 10             	add    esp,0x10
c00144b6:	84 c0                	test   al,al
c00144b8:	74 05                	je     c00144bf <x87EmulHandler(regs*, void*)+0x1a>
c00144ba:	83 c4 08             	add    esp,0x8
c00144bd:	5b                   	pop    ebx
c00144be:	c3                   	ret    
c00144bf:	83 ec 0c             	sub    esp,0xc
c00144c2:	68 60 77 02 c0       	push   0xc0027760
c00144c7:	e8 7b dd ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00144cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144cf:	e8 ba fb ff ff       	call   c001408e <displayDebugInfo(regs*)>

c00144d4 <gpFault(regs*, void*)>:
c00144d4:	53                   	push   ebx
c00144d5:	83 ec 14             	sub    esp,0x14
c00144d8:	c7 05 90 a5 02 c0 ab c7 01 c0 	mov    DWORD PTR ds:0xc002a590,0xc001c7ab
c00144e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144e6:	53                   	push   ebx
c00144e7:	e8 bf 82 00 00       	call   c001c7ab <Vm::faultHandler(regs*)>
c00144ec:	83 c4 10             	add    esp,0x10
c00144ef:	84 c0                	test   al,al
c00144f1:	74 05                	je     c00144f8 <gpFault(regs*, void*)+0x24>
c00144f3:	83 c4 08             	add    esp,0x8
c00144f6:	5b                   	pop    ebx
c00144f7:	c3                   	ret    
c00144f8:	83 ec 0c             	sub    esp,0xc
c00144fb:	68 76 77 02 c0       	push   0xc0027776
c0014500:	e8 42 dd ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014505:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014508:	e8 81 fb ff ff       	call   c001408e <displayDebugInfo(regs*)>

c001450d <pgFault(regs*, void*)>:
c001450d:	83 ec 18             	sub    esp,0x18
c0014510:	68 91 77 02 c0       	push   0xc0027791
c0014515:	e8 2d dd ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001451a:	58                   	pop    eax
c001451b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001451f:	e8 6a fb ff ff       	call   c001408e <displayDebugInfo(regs*)>

c0014524 <otherISRHandler(regs*, void*)>:
c0014524:	53                   	push   ebx
c0014525:	83 ec 0c             	sub    esp,0xc
c0014528:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001452c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001452f:	50                   	push   eax
c0014530:	50                   	push   eax
c0014531:	68 9e 77 02 c0       	push   0xc002779e
c0014536:	e8 0c dd ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001453b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001453e:	e8 4b fb ff ff       	call   c001408e <displayDebugInfo(regs*)>

c0014543 <opcodeFault(regs*, void*)>:
c0014543:	55                   	push   ebp
c0014544:	89 e5                	mov    ebp,esp
c0014546:	56                   	push   esi
c0014547:	53                   	push   ebx
c0014548:	83 ec 40             	sub    esp,0x40
c001454b:	e8 12 33 00 00       	call   c0017862 <CPU::current()>
c0014550:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014556:	84 c0                	test   al,al
c0014558:	74 24                	je     c001457e <opcodeFault(regs*, void*)+0x3b>
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	68 bc 77 02 c0       	push   0xc00277bc
c0014562:	e8 e0 dc ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014567:	83 c4 10             	add    esp,0x10
c001456a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001456d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014570:	8d 50 19             	lea    edx,[eax+0x19]
c0014573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014576:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014579:	e9 77 05 00 00       	jmp    c0014af5 <opcodeFault(regs*, void*)+0x5b2>
c001457e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014581:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014584:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014587:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001458b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001458f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014592:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014595:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014598:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001459b:	8a 00                	mov    al,BYTE PTR [eax]
c001459d:	3c f0                	cmp    al,0xf0
c001459f:	75 17                	jne    c00145b8 <opcodeFault(regs*, void*)+0x75>
c00145a1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145aa:	8d 50 01             	lea    edx,[eax+0x1]
c00145ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145b3:	e9 da 00 00 00       	jmp    c0014692 <opcodeFault(regs*, void*)+0x14f>
c00145b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145bb:	8a 00                	mov    al,BYTE PTR [eax]
c00145bd:	3c f2                	cmp    al,0xf2
c00145bf:	74 09                	je     c00145ca <opcodeFault(regs*, void*)+0x87>
c00145c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145c4:	8a 00                	mov    al,BYTE PTR [eax]
c00145c6:	3c f3                	cmp    al,0xf3
c00145c8:	75 1b                	jne    c00145e5 <opcodeFault(regs*, void*)+0xa2>
c00145ca:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145ce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145d7:	8d 50 01             	lea    edx,[eax+0x1]
c00145da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145e0:	e9 ad 00 00 00       	jmp    c0014692 <opcodeFault(regs*, void*)+0x14f>
c00145e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145e8:	8a 00                	mov    al,BYTE PTR [eax]
c00145ea:	3c 66                	cmp    al,0x66
c00145ec:	75 1f                	jne    c001460d <opcodeFault(regs*, void*)+0xca>
c00145ee:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145f2:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00145f6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145ff:	8d 50 01             	lea    edx,[eax+0x1]
c0014602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014605:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014608:	e9 85 00 00 00       	jmp    c0014692 <opcodeFault(regs*, void*)+0x14f>
c001460d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014610:	8a 00                	mov    al,BYTE PTR [eax]
c0014612:	3c 67                	cmp    al,0x67
c0014614:	75 18                	jne    c001462e <opcodeFault(regs*, void*)+0xeb>
c0014616:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001461a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001461d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014620:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014623:	8d 50 01             	lea    edx,[eax+0x1]
c0014626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014629:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001462c:	eb 64                	jmp    c0014692 <opcodeFault(regs*, void*)+0x14f>
c001462e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014631:	8a 00                	mov    al,BYTE PTR [eax]
c0014633:	3c 2e                	cmp    al,0x2e
c0014635:	74 09                	je     c0014640 <opcodeFault(regs*, void*)+0xfd>
c0014637:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001463a:	8a 00                	mov    al,BYTE PTR [eax]
c001463c:	3c 3e                	cmp    al,0x3e
c001463e:	75 18                	jne    c0014658 <opcodeFault(regs*, void*)+0x115>
c0014640:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014644:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001464a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001464d:	8d 50 01             	lea    edx,[eax+0x1]
c0014650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014653:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014656:	eb 3a                	jmp    c0014692 <opcodeFault(regs*, void*)+0x14f>
c0014658:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001465b:	8a 00                	mov    al,BYTE PTR [eax]
c001465d:	3c 36                	cmp    al,0x36
c001465f:	74 1b                	je     c001467c <opcodeFault(regs*, void*)+0x139>
c0014661:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014664:	8a 00                	mov    al,BYTE PTR [eax]
c0014666:	3c 26                	cmp    al,0x26
c0014668:	74 12                	je     c001467c <opcodeFault(regs*, void*)+0x139>
c001466a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001466d:	8a 00                	mov    al,BYTE PTR [eax]
c001466f:	3c 64                	cmp    al,0x64
c0014671:	74 09                	je     c001467c <opcodeFault(regs*, void*)+0x139>
c0014673:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014676:	8a 00                	mov    al,BYTE PTR [eax]
c0014678:	3c 65                	cmp    al,0x65
c001467a:	75 16                	jne    c0014692 <opcodeFault(regs*, void*)+0x14f>
c001467c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014680:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014686:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014689:	8d 50 01             	lea    edx,[eax+0x1]
c001468c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001468f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014695:	8a 00                	mov    al,BYTE PTR [eax]
c0014697:	3c 0f                	cmp    al,0xf
c0014699:	0f 85 ad 00 00 00    	jne    c001474c <opcodeFault(regs*, void*)+0x209>
c001469f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146a2:	40                   	inc    eax
c00146a3:	8a 00                	mov    al,BYTE PTR [eax]
c00146a5:	3c c2                	cmp    al,0xc2
c00146a7:	74 0e                	je     c00146b7 <opcodeFault(regs*, void*)+0x174>
c00146a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146ac:	40                   	inc    eax
c00146ad:	8a 00                	mov    al,BYTE PTR [eax]
c00146af:	3c c3                	cmp    al,0xc3
c00146b1:	0f 85 95 00 00 00    	jne    c001474c <opcodeFault(regs*, void*)+0x209>
c00146b7:	83 ec 0c             	sub    esp,0xc
c00146ba:	68 df 77 02 c0       	push   0xc00277df
c00146bf:	e8 83 db ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00146c4:	83 c4 10             	add    esp,0x10
c00146c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146cd:	8d 50 01             	lea    edx,[eax+0x1]
c00146d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146d6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146dc:	8a 00                	mov    al,BYTE PTR [eax]
c00146de:	8d 50 fe             	lea    edx,[eax-0x2]
c00146e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146e4:	88 10                	mov    BYTE PTR [eax],dl
c00146e6:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00146e9:	50                   	push   eax
c00146ea:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00146ed:	50                   	push   eax
c00146ee:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00146f1:	50                   	push   eax
c00146f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00146f5:	e8 f0 40 00 00       	call   c00187ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00146fa:	83 c4 10             	add    esp,0x10
c00146fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014700:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014703:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014706:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014709:	01 d0                	add    eax,edx
c001470b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001470e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014711:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014714:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014717:	48                   	dec    eax
c0014718:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001471b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001471e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014721:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014727:	83 ec 04             	sub    esp,0x4
c001472a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001472d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014730:	50                   	push   eax
c0014731:	e8 33 ba fe ff       	call   c0000169 <voodooXADD>
c0014736:	83 c4 10             	add    esp,0x10
c0014739:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001473c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001473f:	01 c2                	add    edx,eax
c0014741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014744:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014747:	e9 a9 03 00 00       	jmp    c0014af5 <opcodeFault(regs*, void*)+0x5b2>
c001474c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001474f:	8a 00                	mov    al,BYTE PTR [eax]
c0014751:	3c 0f                	cmp    al,0xf
c0014753:	0f 85 8b 01 00 00    	jne    c00148e4 <opcodeFault(regs*, void*)+0x3a1>
c0014759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001475c:	40                   	inc    eax
c001475d:	8a 00                	mov    al,BYTE PTR [eax]
c001475f:	3c c7                	cmp    al,0xc7
c0014761:	0f 86 7d 01 00 00    	jbe    c00148e4 <opcodeFault(regs*, void*)+0x3a1>
c0014767:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001476a:	40                   	inc    eax
c001476b:	8a 00                	mov    al,BYTE PTR [eax]
c001476d:	3c cf                	cmp    al,0xcf
c001476f:	0f 87 6f 01 00 00    	ja     c00148e4 <opcodeFault(regs*, void*)+0x3a1>
c0014775:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014778:	40                   	inc    eax
c0014779:	8a 00                	mov    al,BYTE PTR [eax]
c001477b:	83 c0 38             	add    eax,0x38
c001477e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014781:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014785:	75 0b                	jne    c0014792 <opcodeFault(regs*, void*)+0x24f>
c0014787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001478a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001478d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014790:	eb 75                	jmp    c0014807 <opcodeFault(regs*, void*)+0x2c4>
c0014792:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014796:	75 0b                	jne    c00147a3 <opcodeFault(regs*, void*)+0x260>
c0014798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001479b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001479e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147a1:	eb 64                	jmp    c0014807 <opcodeFault(regs*, void*)+0x2c4>
c00147a3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00147a7:	75 0b                	jne    c00147b4 <opcodeFault(regs*, void*)+0x271>
c00147a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ac:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00147af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147b2:	eb 53                	jmp    c0014807 <opcodeFault(regs*, void*)+0x2c4>
c00147b4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147b8:	75 0b                	jne    c00147c5 <opcodeFault(regs*, void*)+0x282>
c00147ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147c3:	eb 42                	jmp    c0014807 <opcodeFault(regs*, void*)+0x2c4>
c00147c5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147c9:	75 0b                	jne    c00147d6 <opcodeFault(regs*, void*)+0x293>
c00147cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ce:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00147d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147d4:	eb 31                	jmp    c0014807 <opcodeFault(regs*, void*)+0x2c4>
c00147d6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00147da:	75 0b                	jne    c00147e7 <opcodeFault(regs*, void*)+0x2a4>
c00147dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147df:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00147e2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147e5:	eb 20                	jmp    c0014807 <opcodeFault(regs*, void*)+0x2c4>
c00147e7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00147eb:	75 0b                	jne    c00147f8 <opcodeFault(regs*, void*)+0x2b5>
c00147ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00147f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147f6:	eb 0f                	jmp    c0014807 <opcodeFault(regs*, void*)+0x2c4>
c00147f8:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00147fc:	75 09                	jne    c0014807 <opcodeFault(regs*, void*)+0x2c4>
c00147fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014801:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014804:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014807:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001480b:	74 10                	je     c001481d <opcodeFault(regs*, void*)+0x2da>
c001480d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014814:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001481b:	eb 2d                	jmp    c001484a <opcodeFault(regs*, void*)+0x307>
c001481d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014820:	c1 e0 18             	shl    eax,0x18
c0014823:	89 c2                	mov    edx,eax
c0014825:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014828:	c1 e0 08             	shl    eax,0x8
c001482b:	25 00 00 ff 00       	and    eax,0xff0000
c0014830:	09 c2                	or     edx,eax
c0014832:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014835:	c1 e8 08             	shr    eax,0x8
c0014838:	25 00 ff 00 00       	and    eax,0xff00
c001483d:	09 c2                	or     edx,eax
c001483f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014842:	c1 e8 18             	shr    eax,0x18
c0014845:	09 d0                	or     eax,edx
c0014847:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001484a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001484e:	75 0b                	jne    c001485b <opcodeFault(regs*, void*)+0x318>
c0014850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014853:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014856:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014859:	eb 75                	jmp    c00148d0 <opcodeFault(regs*, void*)+0x38d>
c001485b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001485f:	75 0b                	jne    c001486c <opcodeFault(regs*, void*)+0x329>
c0014861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014864:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014867:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001486a:	eb 64                	jmp    c00148d0 <opcodeFault(regs*, void*)+0x38d>
c001486c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014870:	75 0b                	jne    c001487d <opcodeFault(regs*, void*)+0x33a>
c0014872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014875:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014878:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001487b:	eb 53                	jmp    c00148d0 <opcodeFault(regs*, void*)+0x38d>
c001487d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014881:	75 0b                	jne    c001488e <opcodeFault(regs*, void*)+0x34b>
c0014883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014886:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014889:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001488c:	eb 42                	jmp    c00148d0 <opcodeFault(regs*, void*)+0x38d>
c001488e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014892:	75 0b                	jne    c001489f <opcodeFault(regs*, void*)+0x35c>
c0014894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014897:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001489a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001489d:	eb 31                	jmp    c00148d0 <opcodeFault(regs*, void*)+0x38d>
c001489f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00148a3:	75 0b                	jne    c00148b0 <opcodeFault(regs*, void*)+0x36d>
c00148a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00148ae:	eb 20                	jmp    c00148d0 <opcodeFault(regs*, void*)+0x38d>
c00148b0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00148b4:	75 0b                	jne    c00148c1 <opcodeFault(regs*, void*)+0x37e>
c00148b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148bc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148bf:	eb 0f                	jmp    c00148d0 <opcodeFault(regs*, void*)+0x38d>
c00148c1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148c5:	75 09                	jne    c00148d0 <opcodeFault(regs*, void*)+0x38d>
c00148c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00148d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148d6:	8d 50 02             	lea    edx,[eax+0x2]
c00148d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148dc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148df:	e9 11 02 00 00       	jmp    c0014af5 <opcodeFault(regs*, void*)+0x5b2>
c00148e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148e7:	8a 00                	mov    al,BYTE PTR [eax]
c00148e9:	3c 0f                	cmp    al,0xf
c00148eb:	0f 85 76 01 00 00    	jne    c0014a67 <opcodeFault(regs*, void*)+0x524>
c00148f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148f4:	40                   	inc    eax
c00148f5:	8a 00                	mov    al,BYTE PTR [eax]
c00148f7:	3c c7                	cmp    al,0xc7
c00148f9:	0f 85 68 01 00 00    	jne    c0014a67 <opcodeFault(regs*, void*)+0x524>
c00148ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014905:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014908:	8d 50 01             	lea    edx,[eax+0x1]
c001490b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001490e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014911:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014914:	50                   	push   eax
c0014915:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014918:	50                   	push   eax
c0014919:	8d 45 bc             	lea    eax,[ebp-0x44]
c001491c:	50                   	push   eax
c001491d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014920:	e8 c5 3e 00 00       	call   c00187ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014925:	83 c4 10             	add    esp,0x10
c0014928:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001492b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001492e:	83 f0 01             	xor    eax,0x1
c0014931:	84 c0                	test   al,al
c0014933:	0f 84 2e 01 00 00    	je     c0014a67 <opcodeFault(regs*, void*)+0x524>
c0014939:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001493c:	3c 01                	cmp    al,0x1
c001493e:	0f 85 23 01 00 00    	jne    c0014a67 <opcodeFault(regs*, void*)+0x524>
c0014944:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014947:	83 f0 01             	xor    eax,0x1
c001494a:	84 c0                	test   al,al
c001494c:	0f 84 15 01 00 00    	je     c0014a67 <opcodeFault(regs*, void*)+0x524>
c0014952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014955:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014958:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001495b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014962:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014965:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014968:	89 c2                	mov    edx,eax
c001496a:	b8 00 00 00 00       	mov    eax,0x0
c001496f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014972:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014978:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001497b:	ba 00 00 00 00       	mov    edx,0x0
c0014980:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014983:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014989:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001498c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001498f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014996:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014999:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001499c:	89 c2                	mov    edx,eax
c001499e:	b8 00 00 00 00       	mov    eax,0x0
c00149a3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149a6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00149a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149af:	ba 00 00 00 00       	mov    edx,0x0
c00149b4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00149b7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149ba:	e8 79 6f 00 00       	call   c001b938 <lockScheduler()>
c00149bf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00149c7:	89 c1                	mov    ecx,eax
c00149c9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149cc:	89 cb                	mov    ebx,ecx
c00149ce:	89 d0                	mov    eax,edx
c00149d0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00149d3:	89 c6                	mov    esi,eax
c00149d5:	89 f0                	mov    eax,esi
c00149d7:	09 d8                	or     eax,ebx
c00149d9:	85 c0                	test   eax,eax
c00149db:	75 21                	jne    c00149fe <opcodeFault(regs*, void*)+0x4bb>
c00149dd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00149e0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149e3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149e6:	89 01                	mov    DWORD PTR [ecx],eax
c00149e8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00149eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149f1:	83 c8 40             	or     eax,0x40
c00149f4:	89 c2                	mov    edx,eax
c00149f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00149fc:	eb 3e                	jmp    c0014a3c <opcodeFault(regs*, void*)+0x4f9>
c00149fe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014a01:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014a04:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a06:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014a09:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014a0c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a12:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014a15:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a18:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a1b:	89 d0                	mov    eax,edx
c0014a1d:	31 d2                	xor    edx,edx
c0014a1f:	89 c3                	mov    ebx,eax
c0014a21:	89 d6                	mov    esi,edx
c0014a23:	89 da                	mov    edx,ebx
c0014a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a28:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a31:	83 e0 bf             	and    eax,0xffffffbf
c0014a34:	89 c2                	mov    edx,eax
c0014a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a39:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a3c:	e8 f9 6e 00 00       	call   c001b93a <unlockScheduler()>
c0014a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a47:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a4a:	01 c2                	add    edx,eax
c0014a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	68 ee 77 02 c0       	push   0xc00277ee
c0014a5a:	e8 e8 d7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014a5f:	83 c4 10             	add    esp,0x10
c0014a62:	e9 8e 00 00 00       	jmp    c0014af5 <opcodeFault(regs*, void*)+0x5b2>
c0014a67:	83 ec 0c             	sub    esp,0xc
c0014a6a:	68 01 78 02 c0       	push   0xc0027801
c0014a6f:	e8 d3 d7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014a74:	83 c4 10             	add    esp,0x10
c0014a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a83:	c1 e0 04             	shl    eax,0x4
c0014a86:	01 d0                	add    eax,edx
c0014a88:	83 c0 03             	add    eax,0x3
c0014a8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8d:	0f b6 d8             	movzx  ebx,al
c0014a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a93:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a9c:	c1 e0 04             	shl    eax,0x4
c0014a9f:	01 d0                	add    eax,edx
c0014aa1:	83 c0 02             	add    eax,0x2
c0014aa4:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa6:	0f b6 c8             	movzx  ecx,al
c0014aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ab5:	c1 e0 04             	shl    eax,0x4
c0014ab8:	01 d0                	add    eax,edx
c0014aba:	40                   	inc    eax
c0014abb:	8a 00                	mov    al,BYTE PTR [eax]
c0014abd:	0f b6 d0             	movzx  edx,al
c0014ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014acc:	c1 e0 04             	shl    eax,0x4
c0014acf:	01 f0                	add    eax,esi
c0014ad1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad3:	0f b6 c0             	movzx  eax,al
c0014ad6:	83 ec 0c             	sub    esp,0xc
c0014ad9:	53                   	push   ebx
c0014ada:	51                   	push   ecx
c0014adb:	52                   	push   edx
c0014adc:	50                   	push   eax
c0014add:	68 14 78 02 c0       	push   0xc0027814
c0014ae2:	e8 60 d7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014ae7:	83 c4 20             	add    esp,0x20
c0014aea:	83 ec 0c             	sub    esp,0xc
c0014aed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014af0:	e8 99 f5 ff ff       	call   c001408e <displayDebugInfo(regs*)>
c0014af5:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014af8:	5b                   	pop    ebx
c0014af9:	5e                   	pop    esi
c0014afa:	5d                   	pop    ebp
c0014afb:	c3                   	ret    

c0014afc <displayProgramFault(char const*)>:
c0014afc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b04:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014b0a:	85 c0                	test   eax,eax
c0014b0c:	74 15                	je     c0014b23 <displayProgramFault(char const*)+0x27>
c0014b0e:	83 ec 0c             	sub    esp,0xc
c0014b11:	6a 04                	push   0x4
c0014b13:	6a 0f                	push   0xf
c0014b15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b19:	50                   	push   eax
c0014b1a:	e8 35 ba ff ff       	call   c0010554 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b1f:	83 c4 1c             	add    esp,0x1c
c0014b22:	c3                   	ret    
c0014b23:	c3                   	ret    

c0014b24 <setupInterruptController()>:
c0014b24:	55                   	push   ebp
c0014b25:	89 e5                	mov    ebp,esp
c0014b27:	53                   	push   ebx
c0014b28:	83 ec 14             	sub    esp,0x14
c0014b2b:	e8 2e 2d 00 00       	call   c001785e <CPU::getNumber()>
c0014b30:	85 c0                	test   eax,eax
c0014b32:	0f 95 c0             	setne  al
c0014b35:	84 c0                	test   al,al
c0014b37:	74 56                	je     c0014b8f <setupInterruptController()+0x6b>
c0014b39:	83 ec 0c             	sub    esp,0xc
c0014b3c:	68 58 21 00 00       	push   0x2158
c0014b41:	e8 12 d6 ff ff       	call   c0012158 <operator new(unsigned long)>
c0014b46:	83 c4 10             	add    esp,0x10
c0014b49:	89 c3                	mov    ebx,eax
c0014b4b:	83 ec 0c             	sub    esp,0xc
c0014b4e:	53                   	push   ebx
c0014b4f:	e8 2e d8 00 00       	call   c0022382 <APIC::APIC()>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b5a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b62:	83 c0 08             	add    eax,0x8
c0014b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b67:	6a 00                	push   0x0
c0014b69:	6a 00                	push   0x0
c0014b6b:	6a 00                	push   0x0
c0014b6d:	52                   	push   edx
c0014b6e:	ff d0                	call   eax
c0014b70:	83 c4 10             	add    esp,0x10
c0014b73:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014b78:	83 ec 08             	sub    esp,0x8
c0014b7b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014b7e:	50                   	push   eax
c0014b7f:	e8 ce ea ff ff       	call   c0013652 <Device::addChild(Device*)>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b8a:	e9 48 03 00 00       	jmp    c0014ed7 <setupInterruptController()+0x3b3>
c0014b8f:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014b94:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014b9a:	83 e0 01             	and    eax,0x1
c0014b9d:	84 c0                	test   al,al
c0014b9f:	0f 95 c0             	setne  al
c0014ba2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014ba5:	83 ec 0c             	sub    esp,0xc
c0014ba8:	68 58 21 00 00       	push   0x2158
c0014bad:	e8 a6 d5 ff ff       	call   c0012158 <operator new(unsigned long)>
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	89 c3                	mov    ebx,eax
c0014bb7:	83 ec 0c             	sub    esp,0xc
c0014bba:	53                   	push   ebx
c0014bbb:	e8 84 dc 00 00       	call   c0022844 <PIC::PIC()>
c0014bc0:	83 c4 10             	add    esp,0x10
c0014bc3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bc6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bce:	83 c0 08             	add    eax,0x8
c0014bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bd3:	6a 00                	push   0x0
c0014bd5:	6a 00                	push   0x0
c0014bd7:	6a 00                	push   0x0
c0014bd9:	52                   	push   edx
c0014bda:	ff d0                	call   eax
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014be3:	74 6e                	je     c0014c53 <setupInterruptController()+0x12f>
c0014be5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014be8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bed:	83 c0 0c             	add    eax,0xc
c0014bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bf2:	6a 00                	push   0x0
c0014bf4:	6a 00                	push   0x0
c0014bf6:	6a 00                	push   0x0
c0014bf8:	52                   	push   edx
c0014bf9:	ff d0                	call   eax
c0014bfb:	83 c4 10             	add    esp,0x10
c0014bfe:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014c02:	74 15                	je     c0014c19 <setupInterruptController()+0xf5>
c0014c04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c09:	83 c0 04             	add    eax,0x4
c0014c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c0e:	83 ec 0c             	sub    esp,0xc
c0014c11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c14:	ff d0                	call   eax
c0014c16:	83 c4 10             	add    esp,0x10
c0014c19:	83 ec 0c             	sub    esp,0xc
c0014c1c:	68 58 21 00 00       	push   0x2158
c0014c21:	e8 32 d5 ff ff       	call   c0012158 <operator new(unsigned long)>
c0014c26:	83 c4 10             	add    esp,0x10
c0014c29:	89 c3                	mov    ebx,eax
c0014c2b:	83 ec 0c             	sub    esp,0xc
c0014c2e:	53                   	push   ebx
c0014c2f:	e8 4e d7 00 00       	call   c0022382 <APIC::APIC()>
c0014c34:	83 c4 10             	add    esp,0x10
c0014c37:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c3a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c42:	83 c0 08             	add    eax,0x8
c0014c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c47:	6a 00                	push   0x0
c0014c49:	6a 00                	push   0x0
c0014c4b:	6a 00                	push   0x0
c0014c4d:	52                   	push   edx
c0014c4e:	ff d0                	call   eax
c0014c50:	83 c4 10             	add    esp,0x10
c0014c53:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014c58:	83 ec 08             	sub    esp,0x8
c0014c5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c5e:	50                   	push   eax
c0014c5f:	e8 ee e9 ff ff       	call   c0013652 <Device::addChild(Device*)>
c0014c64:	83 c4 10             	add    esp,0x10
c0014c67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c6c:	83 c0 24             	add    eax,0x24
c0014c6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c71:	6a 00                	push   0x0
c0014c73:	68 24 45 01 c0       	push   0xc0014524
c0014c78:	6a 00                	push   0x0
c0014c7a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c7d:	ff d0                	call   eax
c0014c7f:	83 c4 10             	add    esp,0x10
c0014c82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c87:	83 c0 24             	add    eax,0x24
c0014c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c8c:	6a 00                	push   0x0
c0014c8e:	68 24 45 01 c0       	push   0xc0014524
c0014c93:	6a 01                	push   0x1
c0014c95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c98:	ff d0                	call   eax
c0014c9a:	83 c4 10             	add    esp,0x10
c0014c9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca2:	83 c0 24             	add    eax,0x24
c0014ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca7:	6a 00                	push   0x0
c0014ca9:	68 f1 3e 01 c0       	push   0xc0013ef1
c0014cae:	6a 02                	push   0x2
c0014cb0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cb3:	ff d0                	call   eax
c0014cb5:	83 c4 10             	add    esp,0x10
c0014cb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cbd:	83 c0 24             	add    eax,0x24
c0014cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cc2:	6a 00                	push   0x0
c0014cc4:	68 24 45 01 c0       	push   0xc0014524
c0014cc9:	6a 03                	push   0x3
c0014ccb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cce:	ff d0                	call   eax
c0014cd0:	83 c4 10             	add    esp,0x10
c0014cd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd8:	83 c0 24             	add    eax,0x24
c0014cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cdd:	6a 00                	push   0x0
c0014cdf:	68 24 45 01 c0       	push   0xc0014524
c0014ce4:	6a 04                	push   0x4
c0014ce6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ce9:	ff d0                	call   eax
c0014ceb:	83 c4 10             	add    esp,0x10
c0014cee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf3:	83 c0 24             	add    eax,0x24
c0014cf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf8:	6a 00                	push   0x0
c0014cfa:	68 24 45 01 c0       	push   0xc0014524
c0014cff:	6a 05                	push   0x5
c0014d01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d04:	ff d0                	call   eax
c0014d06:	83 c4 10             	add    esp,0x10
c0014d09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d0e:	83 c0 24             	add    eax,0x24
c0014d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d13:	6a 00                	push   0x0
c0014d15:	68 43 45 01 c0       	push   0xc0014543
c0014d1a:	6a 06                	push   0x6
c0014d1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d1f:	ff d0                	call   eax
c0014d21:	83 c4 10             	add    esp,0x10
c0014d24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d29:	83 c0 24             	add    eax,0x24
c0014d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d2e:	6a 00                	push   0x0
c0014d30:	68 a5 44 01 c0       	push   0xc00144a5
c0014d35:	6a 07                	push   0x7
c0014d37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d3a:	ff d0                	call   eax
c0014d3c:	83 c4 10             	add    esp,0x10
c0014d3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d42:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d44:	83 c0 24             	add    eax,0x24
c0014d47:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d49:	6a 00                	push   0x0
c0014d4b:	68 0c 3d 01 c0       	push   0xc0013d0c
c0014d50:	6a 08                	push   0x8
c0014d52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d55:	ff d0                	call   eax
c0014d57:	83 c4 10             	add    esp,0x10
c0014d5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d5f:	83 c0 24             	add    eax,0x24
c0014d62:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d64:	6a 00                	push   0x0
c0014d66:	68 24 45 01 c0       	push   0xc0014524
c0014d6b:	6a 09                	push   0x9
c0014d6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d70:	ff d0                	call   eax
c0014d72:	83 c4 10             	add    esp,0x10
c0014d75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d7a:	83 c0 24             	add    eax,0x24
c0014d7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d7f:	6a 00                	push   0x0
c0014d81:	68 24 45 01 c0       	push   0xc0014524
c0014d86:	6a 0a                	push   0xa
c0014d88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d8b:	ff d0                	call   eax
c0014d8d:	83 c4 10             	add    esp,0x10
c0014d90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d93:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d95:	83 c0 24             	add    eax,0x24
c0014d98:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d9a:	6a 00                	push   0x0
c0014d9c:	68 24 45 01 c0       	push   0xc0014524
c0014da1:	6a 0b                	push   0xb
c0014da3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014da6:	ff d0                	call   eax
c0014da8:	83 c4 10             	add    esp,0x10
c0014dab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db0:	83 c0 24             	add    eax,0x24
c0014db3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db5:	6a 00                	push   0x0
c0014db7:	68 24 45 01 c0       	push   0xc0014524
c0014dbc:	6a 0c                	push   0xc
c0014dbe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dc1:	ff d0                	call   eax
c0014dc3:	83 c4 10             	add    esp,0x10
c0014dc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dcb:	83 c0 24             	add    eax,0x24
c0014dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd0:	6a 00                	push   0x0
c0014dd2:	68 d4 44 01 c0       	push   0xc00144d4
c0014dd7:	6a 0d                	push   0xd
c0014dd9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ddc:	ff d0                	call   eax
c0014dde:	83 c4 10             	add    esp,0x10
c0014de1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de6:	83 c0 24             	add    eax,0x24
c0014de9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014deb:	6a 00                	push   0x0
c0014ded:	68 0d 45 01 c0       	push   0xc001450d
c0014df2:	6a 0e                	push   0xe
c0014df4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014df7:	ff d0                	call   eax
c0014df9:	83 c4 10             	add    esp,0x10
c0014dfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e01:	83 c0 24             	add    eax,0x24
c0014e04:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e06:	6a 00                	push   0x0
c0014e08:	68 24 45 01 c0       	push   0xc0014524
c0014e0d:	6a 0f                	push   0xf
c0014e0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e12:	ff d0                	call   eax
c0014e14:	83 c4 10             	add    esp,0x10
c0014e17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1c:	83 c0 24             	add    eax,0x24
c0014e1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e21:	6a 00                	push   0x0
c0014e23:	68 24 45 01 c0       	push   0xc0014524
c0014e28:	6a 10                	push   0x10
c0014e2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e2d:	ff d0                	call   eax
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e37:	83 c0 24             	add    eax,0x24
c0014e3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e3c:	6a 00                	push   0x0
c0014e3e:	68 24 45 01 c0       	push   0xc0014524
c0014e43:	6a 11                	push   0x11
c0014e45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e48:	ff d0                	call   eax
c0014e4a:	83 c4 10             	add    esp,0x10
c0014e4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e50:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e52:	83 c0 24             	add    eax,0x24
c0014e55:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e57:	6a 00                	push   0x0
c0014e59:	68 24 45 01 c0       	push   0xc0014524
c0014e5e:	6a 12                	push   0x12
c0014e60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e63:	ff d0                	call   eax
c0014e65:	83 c4 10             	add    esp,0x10
c0014e68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e6d:	83 c0 24             	add    eax,0x24
c0014e70:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e72:	6a 00                	push   0x0
c0014e74:	68 24 45 01 c0       	push   0xc0014524
c0014e79:	6a 13                	push   0x13
c0014e7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e7e:	ff d0                	call   eax
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e86:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e88:	83 c0 24             	add    eax,0x24
c0014e8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e8d:	6a 00                	push   0x0
c0014e8f:	68 24 45 01 c0       	push   0xc0014524
c0014e94:	6a 14                	push   0x14
c0014e96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e99:	ff d0                	call   eax
c0014e9b:	83 c4 10             	add    esp,0x10
c0014e9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea3:	83 c0 24             	add    eax,0x24
c0014ea6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea8:	6a 00                	push   0x0
c0014eaa:	68 24 45 01 c0       	push   0xc0014524
c0014eaf:	6a 1e                	push   0x1e
c0014eb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014eb4:	ff d0                	call   eax
c0014eb6:	83 c4 10             	add    esp,0x10
c0014eb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ebc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ebe:	83 c0 24             	add    eax,0x24
c0014ec1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ec3:	6a 00                	push   0x0
c0014ec5:	68 4f a3 01 c0       	push   0xc001a34f
c0014eca:	6a 60                	push   0x60
c0014ecc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ecf:	ff d0                	call   eax
c0014ed1:	83 c4 10             	add    esp,0x10
c0014ed4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014eda:	c9                   	leave  
c0014edb:	c3                   	ret    

c0014edc <InterruptController::convertLegacyIRQNumber(int)>:
c0014edc:	55                   	push   ebp
c0014edd:	89 e5                	mov    ebp,esp
c0014edf:	83 ec 08             	sub    esp,0x8
c0014ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee5:	83 ec 0c             	sub    esp,0xc
c0014ee8:	50                   	push   eax
c0014ee9:	e8 46 ea ff ff       	call   c0013934 <Device::getName()>
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef3:	3c 41                	cmp    al,0x41
c0014ef5:	0f 94 c0             	sete   al
c0014ef8:	84 c0                	test   al,al
c0014efa:	74 28                	je     c0014f24 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014efc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014f00:	7f 12                	jg     c0014f14 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014f02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f05:	05 e0 96 02 c0       	add    eax,0xc00296e0
c0014f0a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f0c:	0f b6 c0             	movzx  eax,al
c0014f0f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014f12:	eb 10                	jmp    c0014f24 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	68 94 75 02 c0       	push   0xc0027594
c0014f1c:	e8 c4 3a 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f27:	c9                   	leave  
c0014f28:	c3                   	ret    
c0014f29:	90                   	nop

c0014f2a <startGUI(void*)>:
c0014f2a:	55                   	push   ebp
c0014f2b:	89 e5                	mov    ebp,esp
c0014f2d:	53                   	push   ebx
c0014f2e:	83 ec 04             	sub    esp,0x4
c0014f31:	e8 04 6a 00 00       	call   c001b93a <unlockScheduler()>
c0014f36:	e8 e8 69 00 00       	call   c001b923 <getIRQNestingLevel()>
c0014f3b:	83 ec 08             	sub    esp,0x8
c0014f3e:	50                   	push   eax
c0014f3f:	68 7c 78 02 c0       	push   0xc002787c
c0014f44:	e8 fe d2 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0014f49:	83 c4 10             	add    esp,0x10
c0014f4c:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f52:	83 ec 08             	sub    esp,0x8
c0014f55:	6a 01                	push   0x1
c0014f57:	68 96 78 02 c0       	push   0xc0027896
c0014f5c:	e8 07 64 00 00       	call   c001b368 <Thr::loadDLL(char const*, bool)>
c0014f61:	83 c4 10             	add    esp,0x10
c0014f64:	83 ec 08             	sub    esp,0x8
c0014f67:	53                   	push   ebx
c0014f68:	50                   	push   eax
c0014f69:	e8 c0 65 00 00       	call   c001b52e <Thr::executeDLL(unsigned long, void*)>
c0014f6e:	83 c4 10             	add    esp,0x10
c0014f71:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f77:	83 ec 08             	sub    esp,0x8
c0014f7a:	6a 01                	push   0x1
c0014f7c:	68 b0 78 02 c0       	push   0xc00278b0
c0014f81:	e8 e2 63 00 00       	call   c001b368 <Thr::loadDLL(char const*, bool)>
c0014f86:	83 c4 10             	add    esp,0x10
c0014f89:	83 ec 08             	sub    esp,0x8
c0014f8c:	53                   	push   ebx
c0014f8d:	50                   	push   eax
c0014f8e:	e8 9b 65 00 00       	call   c001b52e <Thr::executeDLL(unsigned long, void*)>
c0014f93:	83 c4 10             	add    esp,0x10
c0014f96:	90                   	nop
c0014f97:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f9a:	c9                   	leave  
c0014f9b:	c3                   	ret    

c0014f9c <sendKeyToTerminal(unsigned char)>:
c0014f9c:	55                   	push   ebp
c0014f9d:	89 e5                	mov    ebp,esp
c0014f9f:	83 ec 28             	sub    esp,0x28
c0014fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014fa8:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c0014fad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014fb1:	83 ec 08             	sub    esp,0x8
c0014fb4:	52                   	push   edx
c0014fb5:	50                   	push   eax
c0014fb6:	e8 d5 ba ff ff       	call   c0010a90 <VgaText::receiveKey(unsigned char)>
c0014fbb:	83 c4 10             	add    esp,0x10
c0014fbe:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014fc2:	75 41                	jne    c0015005 <sendKeyToTerminal(unsigned char)+0x69>
c0014fc4:	e8 96 69 00 00       	call   c001b95f <lockStuff()>
c0014fc9:	a1 a0 a5 02 c0       	mov    eax,ds:0xc002a5a0
c0014fce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fd1:	c7 05 a0 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a5a0,0x0
c0014fdb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fdf:	74 1f                	je     c0015000 <sendKeyToTerminal(unsigned char)+0x64>
c0014fe1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014fe7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014fed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ff0:	83 ec 0c             	sub    esp,0xc
c0014ff3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014ff6:	e8 4d 6f 00 00       	call   c001bf48 <unblockTask(ThreadControlBlock*)>
c0014ffb:	83 c4 10             	add    esp,0x10
c0014ffe:	eb db                	jmp    c0014fdb <sendKeyToTerminal(unsigned char)+0x3f>
c0015000:	e8 ec 6c 00 00       	call   c001bcf1 <unlockStuff()>
c0015005:	90                   	nop
c0015006:	c9                   	leave  
c0015007:	c3                   	ret    

c0015008 <sendKeyboardToken(KeyboardToken)>:
c0015008:	55                   	push   ebp
c0015009:	89 e5                	mov    ebp,esp
c001500b:	83 ec 18             	sub    esp,0x18
c001500e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015014:	0f b7 c0             	movzx  eax,ax
c0015017:	83 f2 01             	xor    edx,0x1
c001501a:	88 90 c0 a5 02 c0    	mov    BYTE PTR [eax-0x3ffd5a40],dl
c0015020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015023:	66 3d 03 02          	cmp    ax,0x203
c0015027:	75 07                	jne    c0015030 <sendKeyboardToken(KeyboardToken)+0x28>
c0015029:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c001502e:	84 c0                	test   al,al
c0015030:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015034:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015037:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c001503c:	38 c2                	cmp    dl,al
c001503e:	74 1c                	je     c001505c <sendKeyboardToken(KeyboardToken)+0x54>
c0015040:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015043:	a2 c8 a9 02 c0       	mov    ds:0xc002a9c8,al
c0015048:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c001504d:	0f b6 c0             	movzx  eax,al
c0015050:	83 ec 0c             	sub    esp,0xc
c0015053:	50                   	push   eax
c0015054:	e8 a5 ac ff ff       	call   c000fcfe <setTerminalScrollLock(bool)>
c0015059:	83 c4 10             	add    esp,0x10
c001505c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001505f:	84 c0                	test   al,al
c0015061:	0f 84 ae 00 00 00    	je     c0015115 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506a:	66 3d 10 03          	cmp    ax,0x310
c001506e:	75 06                	jne    c0015076 <sendKeyboardToken(KeyboardToken)+0x6e>
c0015070:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015079:	66 3d 11 03          	cmp    ax,0x311
c001507d:	75 06                	jne    c0015085 <sendKeyboardToken(KeyboardToken)+0x7d>
c001507f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015088:	66 3d 12 03          	cmp    ax,0x312
c001508c:	75 06                	jne    c0015094 <sendKeyboardToken(KeyboardToken)+0x8c>
c001508e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015097:	66 3d 13 03          	cmp    ax,0x313
c001509b:	75 06                	jne    c00150a3 <sendKeyboardToken(KeyboardToken)+0x9b>
c001509d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00150a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a6:	66 3d 14 03          	cmp    ax,0x314
c00150aa:	75 06                	jne    c00150b2 <sendKeyboardToken(KeyboardToken)+0xaa>
c00150ac:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00150b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b5:	66 3d 15 03          	cmp    ax,0x315
c00150b9:	75 06                	jne    c00150c1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00150bb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c4:	66 3d 16 03          	cmp    ax,0x316
c00150c8:	75 06                	jne    c00150d0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00150ca:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00150d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d3:	66 3d 17 03          	cmp    ax,0x317
c00150d7:	75 06                	jne    c00150df <sendKeyboardToken(KeyboardToken)+0xd7>
c00150d9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00150df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e2:	66 3d 18 03          	cmp    ax,0x318
c00150e6:	75 06                	jne    c00150ee <sendKeyboardToken(KeyboardToken)+0xe6>
c00150e8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00150ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f1:	66 3d 19 03          	cmp    ax,0x319
c00150f5:	75 06                	jne    c00150fd <sendKeyboardToken(KeyboardToken)+0xf5>
c00150f7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00150fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015100:	66 3d 1a 03          	cmp    ax,0x31a
c0015104:	0f 85 c9 00 00 00    	jne    c00151d3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001510a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015110:	e9 be 00 00 00       	jmp    c00151d3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015118:	66 3d 10 03          	cmp    ax,0x310
c001511c:	75 0a                	jne    c0015128 <sendKeyboardToken(KeyboardToken)+0x120>
c001511e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015124:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512b:	66 3d 11 03          	cmp    ax,0x311
c001512f:	75 0a                	jne    c001513b <sendKeyboardToken(KeyboardToken)+0x133>
c0015131:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015137:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001513b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513e:	66 3d 12 03          	cmp    ax,0x312
c0015142:	75 0a                	jne    c001514e <sendKeyboardToken(KeyboardToken)+0x146>
c0015144:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001514a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001514e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015151:	66 3d 13 03          	cmp    ax,0x313
c0015155:	75 0a                	jne    c0015161 <sendKeyboardToken(KeyboardToken)+0x159>
c0015157:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001515d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015164:	66 3d 14 03          	cmp    ax,0x314
c0015168:	75 0a                	jne    c0015174 <sendKeyboardToken(KeyboardToken)+0x16c>
c001516a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015170:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015177:	66 3d 15 03          	cmp    ax,0x315
c001517b:	75 0a                	jne    c0015187 <sendKeyboardToken(KeyboardToken)+0x17f>
c001517d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015183:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518a:	66 3d 16 03          	cmp    ax,0x316
c001518e:	75 0a                	jne    c001519a <sendKeyboardToken(KeyboardToken)+0x192>
c0015190:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015196:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001519a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519d:	66 3d 17 03          	cmp    ax,0x317
c00151a1:	75 0a                	jne    c00151ad <sendKeyboardToken(KeyboardToken)+0x1a5>
c00151a3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00151a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b0:	66 3d 18 03          	cmp    ax,0x318
c00151b4:	75 0a                	jne    c00151c0 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00151b6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c3:	66 3d 19 03          	cmp    ax,0x319
c00151c7:	75 0a                	jne    c00151d3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151c9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d6:	66 3d 00 02          	cmp    ax,0x200
c00151da:	75 2a                	jne    c0015206 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151dc:	a0 c0 a9 02 c0       	mov    al,ds:0xc002a9c0
c00151e1:	83 f0 01             	xor    eax,0x1
c00151e4:	84 c0                	test   al,al
c00151e6:	74 1e                	je     c0015206 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151e8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00151ed:	6a 01                	push   0x1
c00151ef:	6a 00                	push   0x0
c00151f1:	68 2a 4f 01 c0       	push   0xc0014f2a
c00151f6:	50                   	push   eax
c00151f7:	e8 66 68 00 00       	call   c001ba62 <Process::createThread(void (*)(void*), void*, int)>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	c6 05 c0 a9 02 c0 01 	mov    BYTE PTR ds:0xc002a9c0,0x1
c0015206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015209:	66 3d 1d 03          	cmp    ax,0x31d
c001520d:	75 06                	jne    c0015215 <sendKeyboardToken(KeyboardToken)+0x20d>
c001520f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015218:	66 3d 1c 03          	cmp    ax,0x31c
c001521c:	75 06                	jne    c0015224 <sendKeyboardToken(KeyboardToken)+0x21c>
c001521e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015227:	66 3d 1b 03          	cmp    ax,0x31b
c001522b:	75 06                	jne    c0015233 <sendKeyboardToken(KeyboardToken)+0x22b>
c001522d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015236:	66 3d 1e 03          	cmp    ax,0x31e
c001523a:	75 06                	jne    c0015242 <sendKeyboardToken(KeyboardToken)+0x23a>
c001523c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015245:	66 3d 1f 03          	cmp    ax,0x31f
c0015249:	75 06                	jne    c0015251 <sendKeyboardToken(KeyboardToken)+0x249>
c001524b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015254:	66 3d 1a 03          	cmp    ax,0x31a
c0015258:	75 06                	jne    c0015260 <sendKeyboardToken(KeyboardToken)+0x258>
c001525a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015260:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015264:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015267:	83 f0 01             	xor    eax,0x1
c001526a:	84 c0                	test   al,al
c001526c:	74 77                	je     c00152e5 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001526e:	a0 c1 a6 02 c0       	mov    al,ds:0xc002a6c1
c0015273:	84 c0                	test   al,al
c0015275:	74 41                	je     c00152b8 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0015277:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001527b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001527f:	74 2b                	je     c00152ac <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015281:	8b 15 c4 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c4
c0015287:	89 d0                	mov    eax,edx
c0015289:	c1 e0 02             	shl    eax,0x2
c001528c:	01 d0                	add    eax,edx
c001528e:	01 c0                	add    eax,eax
c0015290:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c0015295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015298:	0f b7 c0             	movzx  eax,ax
c001529b:	8d 50 d0             	lea    edx,[eax-0x30]
c001529e:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152a3:	01 d0                	add    eax,edx
c00152a5:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c00152aa:	eb 6d                	jmp    c0015319 <sendKeyboardToken(KeyboardToken)+0x311>
c00152ac:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152b6:	eb 61                	jmp    c0015319 <sendKeyboardToken(KeyboardToken)+0x311>
c00152b8:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152bd:	85 c0                	test   eax,eax
c00152bf:	74 18                	je     c00152d9 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152c1:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152c6:	0f b6 c0             	movzx  eax,al
c00152c9:	83 ec 0c             	sub    esp,0xc
c00152cc:	50                   	push   eax
c00152cd:	e8 ca fc ff ff       	call   c0014f9c <sendKeyToTerminal(unsigned char)>
c00152d2:	83 c4 10             	add    esp,0x10
c00152d5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152d9:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152e3:	eb 34                	jmp    c0015319 <sendKeyboardToken(KeyboardToken)+0x311>
c00152e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e8:	66 3d 01 01          	cmp    ax,0x101
c00152ec:	75 2b                	jne    c0015319 <sendKeyboardToken(KeyboardToken)+0x311>
c00152ee:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152f3:	85 c0                	test   eax,eax
c00152f5:	74 18                	je     c001530f <sendKeyboardToken(KeyboardToken)+0x307>
c00152f7:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152fc:	0f b6 c0             	movzx  eax,al
c00152ff:	83 ec 0c             	sub    esp,0xc
c0015302:	50                   	push   eax
c0015303:	e8 94 fc ff ff       	call   c0014f9c <sendKeyToTerminal(unsigned char)>
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001530f:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c0015319:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001531c:	83 f0 01             	xor    eax,0x1
c001531f:	84 c0                	test   al,al
c0015321:	74 4c                	je     c001536f <sendKeyboardToken(KeyboardToken)+0x367>
c0015323:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015326:	83 f0 01             	xor    eax,0x1
c0015329:	84 c0                	test   al,al
c001532b:	74 42                	je     c001536f <sendKeyboardToken(KeyboardToken)+0x367>
c001532d:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015332:	83 f0 01             	xor    eax,0x1
c0015335:	84 c0                	test   al,al
c0015337:	74 36                	je     c001536f <sendKeyboardToken(KeyboardToken)+0x367>
c0015339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533c:	66 83 f8 1f          	cmp    ax,0x1f
c0015340:	76 09                	jbe    c001534b <sendKeyboardToken(KeyboardToken)+0x343>
c0015342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015345:	66 83 f8 7e          	cmp    ax,0x7e
c0015349:	76 12                	jbe    c001535d <sendKeyboardToken(KeyboardToken)+0x355>
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	66 83 f8 0a          	cmp    ax,0xa
c0015352:	74 09                	je     c001535d <sendKeyboardToken(KeyboardToken)+0x355>
c0015354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015357:	66 83 f8 08          	cmp    ax,0x8
c001535b:	75 12                	jne    c001536f <sendKeyboardToken(KeyboardToken)+0x367>
c001535d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015360:	0f b6 c0             	movzx  eax,al
c0015363:	83 ec 0c             	sub    esp,0xc
c0015366:	50                   	push   eax
c0015367:	e8 30 fc ff ff       	call   c0014f9c <sendKeyToTerminal(unsigned char)>
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015372:	83 f0 01             	xor    eax,0x1
c0015375:	84 c0                	test   al,al
c0015377:	74 4f                	je     c00153c8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015379:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001537c:	83 f0 01             	xor    eax,0x1
c001537f:	84 c0                	test   al,al
c0015381:	74 45                	je     c00153c8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015383:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015388:	84 c0                	test   al,al
c001538a:	74 3c                	je     c00153c8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001538c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538f:	66 83 f8 3f          	cmp    ax,0x3f
c0015393:	76 33                	jbe    c00153c8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015398:	66 83 f8 7f          	cmp    ax,0x7f
c001539c:	77 2a                	ja     c00153c8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001539e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a1:	88 c2                	mov    dl,al
c00153a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a6:	66 83 f8 5f          	cmp    ax,0x5f
c00153aa:	76 04                	jbe    c00153b0 <sendKeyboardToken(KeyboardToken)+0x3a8>
c00153ac:	b0 20                	mov    al,0x20
c00153ae:	eb 02                	jmp    c00153b2 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00153b0:	b0 00                	mov    al,0x0
c00153b2:	29 c2                	sub    edx,eax
c00153b4:	88 d0                	mov    al,dl
c00153b6:	83 e8 40             	sub    eax,0x40
c00153b9:	0f b6 c0             	movzx  eax,al
c00153bc:	83 ec 0c             	sub    esp,0xc
c00153bf:	50                   	push   eax
c00153c0:	e8 d7 fb ff ff       	call   c0014f9c <sendKeyToTerminal(unsigned char)>
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cb:	66 3d 00 03          	cmp    ax,0x300
c00153cf:	75 0f                	jne    c00153e0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153d4:	83 f0 01             	xor    eax,0x1
c00153d7:	84 c0                	test   al,al
c00153d9:	74 05                	je     c00153e0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153db:	e8 45 b1 ff ff       	call   c0010525 <doTerminalCycle()>
c00153e0:	90                   	nop
c00153e1:	c9                   	leave  
c00153e2:	c3                   	ret    

c00153e3 <clearInternalKeybuffer(VgaText*)>:
c00153e3:	55                   	push   ebp
c00153e4:	89 e5                	mov    ebp,esp
c00153e6:	83 ec 08             	sub    esp,0x8
c00153e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ec:	05 34 11 00 00       	add    eax,0x1134
c00153f1:	83 ec 0c             	sub    esp,0xc
c00153f4:	50                   	push   eax
c00153f5:	e8 e8 b2 fe ff       	call   c00006e2 <strlen>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015400:	81 c2 34 11 00 00    	add    edx,0x1134
c0015406:	83 ec 04             	sub    esp,0x4
c0015409:	50                   	push   eax
c001540a:	6a 00                	push   0x0
c001540c:	52                   	push   edx
c001540d:	e8 b3 b2 fe ff       	call   c00006c5 <memset>
c0015412:	83 c4 10             	add    esp,0x10
c0015415:	90                   	nop
c0015416:	c9                   	leave  
c0015417:	c3                   	ret    

c0015418 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015418:	55                   	push   ebp
c0015419:	89 e5                	mov    ebp,esp
c001541b:	83 ec 18             	sub    esp,0x18
c001541e:	fb                   	sti    
c001541f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015426:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001542a:	0f 84 8a 00 00 00    	je     c00154ba <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015433:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015439:	84 c0                	test   al,al
c001543b:	75 11                	jne    c001544e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001543d:	e8 f6 64 00 00       	call   c001b938 <lockScheduler()>
c0015442:	e8 25 68 00 00       	call   c001bc6c <schedule()>
c0015447:	e8 ee 64 00 00       	call   c001b93a <unlockScheduler()>
c001544c:	eb e2                	jmp    c0015430 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001544e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015451:	8d 50 01             	lea    edx,[eax+0x1]
c0015454:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015457:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001545a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015460:	88 10                	mov    BYTE PTR [eax],dl
c0015462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015465:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001546b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	05 34 11 00 00       	add    eax,0x1134
c0015476:	83 ec 0c             	sub    esp,0xc
c0015479:	50                   	push   eax
c001547a:	e8 63 b2 fe ff       	call   c00006e2 <strlen>
c001547f:	83 c4 10             	add    esp,0x10
c0015482:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015485:	81 c2 34 11 00 00    	add    edx,0x1134
c001548b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001548e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015491:	81 c2 34 11 00 00    	add    edx,0x1134
c0015497:	83 ec 04             	sub    esp,0x4
c001549a:	50                   	push   eax
c001549b:	51                   	push   ecx
c001549c:	52                   	push   edx
c001549d:	e8 b5 b1 fe ff       	call   c0000657 <memmove>
c00154a2:	83 c4 10             	add    esp,0x10
c00154a5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00154a8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154ab:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00154af:	0f 85 71 ff ff ff    	jne    c0015426 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00154b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b8:	eb 03                	jmp    c00154bd <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bd:	c9                   	leave  
c00154be:	c3                   	ret    
c00154bf:	90                   	nop

c00154c0 <Keyboard::Keyboard(char const*)>:
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154c7:	83 ec 08             	sub    esp,0x8
c00154ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154ce:	50                   	push   eax
c00154cf:	e8 6e e3 ff ff       	call   c0013842 <Device::Device(char const*)>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c00154dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154e0:	89 10                	mov    DWORD PTR [eax],edx
c00154e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154e6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00154f0:	c6 05 a4 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5a4,0x1
c00154f7:	90                   	nop
c00154f8:	83 c4 0c             	add    esp,0xc
c00154fb:	c3                   	ret    

c00154fc <Keyboard::~Keyboard()>:
c00154fc:	83 ec 0c             	sub    esp,0xc
c00154ff:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c0015504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015508:	89 10                	mov    DWORD PTR [eax],edx
c001550a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001550e:	83 ec 0c             	sub    esp,0xc
c0015511:	50                   	push   eax
c0015512:	e8 dd df ff ff       	call   c00134f4 <Device::~Device()>
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	90                   	nop
c001551b:	83 c4 0c             	add    esp,0xc
c001551e:	c3                   	ret    
c001551f:	90                   	nop

c0015520 <Keyboard::~Keyboard()>:
c0015520:	83 ec 0c             	sub    esp,0xc
c0015523:	83 ec 0c             	sub    esp,0xc
c0015526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001552a:	e8 cd ff ff ff       	call   c00154fc <Keyboard::~Keyboard()>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	83 ec 08             	sub    esp,0x8
c0015535:	68 5c 01 00 00       	push   0x15c
c001553a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001553e:	e8 24 cc ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0015543:	83 c4 10             	add    esp,0x10
c0015546:	83 c4 0c             	add    esp,0xc
c0015549:	c3                   	ret    

c001554a <LogicalDisk::close(int, int, void*)>:
c001554a:	83 c8 ff             	or     eax,0xffffffff
c001554d:	c3                   	ret    

c001554e <LogicalDisk::~LogicalDisk()>:
c001554e:	83 ec 0c             	sub    esp,0xc
c0015551:	ba 84 79 02 c0       	mov    edx,0xc0027984
c0015556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001555a:	89 10                	mov    DWORD PTR [eax],edx
c001555c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015560:	83 ec 0c             	sub    esp,0xc
c0015563:	50                   	push   eax
c0015564:	e8 8b df ff ff       	call   c00134f4 <Device::~Device()>
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	90                   	nop
c001556d:	83 c4 0c             	add    esp,0xc
c0015570:	c3                   	ret    
c0015571:	90                   	nop

c0015572 <LogicalDisk::~LogicalDisk()>:
c0015572:	83 ec 0c             	sub    esp,0xc
c0015575:	83 ec 0c             	sub    esp,0xc
c0015578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001557c:	e8 cd ff ff ff       	call   c001554e <LogicalDisk::~LogicalDisk()>
c0015581:	83 c4 10             	add    esp,0x10
c0015584:	83 ec 08             	sub    esp,0x8
c0015587:	68 74 01 00 00       	push   0x174
c001558c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015590:	e8 d2 cb ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0015595:	83 c4 10             	add    esp,0x10
c0015598:	83 c4 0c             	add    esp,0xc
c001559b:	c3                   	ret    

c001559c <LogicalDisk::open(int, int, void*)>:
c001559c:	83 ec 18             	sub    esp,0x18
c001559f:	68 00 79 02 c0       	push   0xc0027900
c00155a4:	e8 3c 34 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c00155a9:	83 c8 ff             	or     eax,0xffffffff
c00155ac:	83 c4 1c             	add    esp,0x1c
c00155af:	c3                   	ret    

c00155b0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00155b0:	53                   	push   ebx
c00155b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155bd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155c3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155c9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155cf:	77 10                	ja     c00155e1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00155d1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00155d7:	89 d3                	mov    ebx,edx
c00155d9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00155df:	72 05                	jb     c00155e6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00155e1:	83 c8 ff             	or     eax,0xffffffff
c00155e4:	89 c2                	mov    edx,eax
c00155e6:	5b                   	pop    ebx
c00155e7:	c3                   	ret    

c00155e8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00155e8:	56                   	push   esi
c00155e9:	83 c8 ff             	or     eax,0xffffffff
c00155ec:	53                   	push   ebx
c00155ed:	89 c2                	mov    edx,eax
c00155ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00155f3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00155f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00155fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015601:	77 27                	ja     c001562a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015603:	89 d8                	mov    eax,ebx
c0015605:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001560b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015611:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015616:	89 c2                	mov    edx,eax
c0015618:	73 10                	jae    c001562a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001561a:	89 c8                	mov    eax,ecx
c001561c:	89 da                	mov    edx,ebx
c001561e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015624:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001562a:	5b                   	pop    ebx
c001562b:	5e                   	pop    esi
c001562c:	c3                   	ret    
c001562d:	90                   	nop

c001562e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001562e:	83 ec 1c             	sub    esp,0x1c
c0015631:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015635:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001563d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015641:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015645:	89 04 24             	mov    DWORD PTR [esp],eax
c0015648:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001564c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015654:	83 ec 08             	sub    esp,0x8
c0015657:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001565b:	50                   	push   eax
c001565c:	e8 e1 e1 ff ff       	call   c0013842 <Device::Device(char const*)>
c0015661:	83 c4 10             	add    esp,0x10
c0015664:	ba 84 79 02 c0       	mov    edx,0xc0027984
c0015669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001566d:	89 10                	mov    DWORD PTR [eax],edx
c001566f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015673:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001567a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001567e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015689:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015693:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001569b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001569f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00156a5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00156ab:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00156b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156b6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156bc:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156ca:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00156d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156d4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00156de:	90                   	nop
c00156df:	83 c4 1c             	add    esp,0x1c
c00156e2:	c3                   	ret    
c00156e3:	90                   	nop

c00156e4 <LogicalDisk::assignDriveLetter()>:
c00156e4:	55                   	push   ebp
c00156e5:	57                   	push   edi
c00156e6:	56                   	push   esi
c00156e7:	53                   	push   ebx
c00156e8:	83 ec 14             	sub    esp,0x14
c00156eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156ef:	8b 3d e0 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e0
c00156f5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00156fb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00156ff:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015705:	8b 3d e4 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e4
c001570b:	3c 01                	cmp    al,0x1
c001570d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015711:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015715:	19 c0                	sbb    eax,eax
c0015717:	83 e0 02             	and    eax,0x2
c001571a:	83 c0 41             	add    eax,0x41
c001571d:	0f be e8             	movsx  ebp,al
c0015720:	3c 43                	cmp    al,0x43
c0015722:	75 10                	jne    c0015734 <LogicalDisk::assignDriveLetter()+0x50>
c0015724:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001572b:	75 5d                	jne    c001578a <LogicalDisk::assignDriveLetter()+0xa6>
c001572d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015732:	75 56                	jne    c001578a <LogicalDisk::assignDriveLetter()+0xa6>
c0015734:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015737:	ba 01 00 00 00       	mov    edx,0x1
c001573c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015740:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015744:	d3 e2                	shl    edx,cl
c0015746:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001574a:	89 d7                	mov    edi,edx
c001574c:	89 d6                	mov    esi,edx
c001574e:	c1 ff 1f             	sar    edi,0x1f
c0015751:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015755:	21 f9                	and    ecx,edi
c0015757:	09 d1                	or     ecx,edx
c0015759:	75 2f                	jne    c001578a <LogicalDisk::assignDriveLetter()+0xa6>
c001575b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001575f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015763:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015769:	09 f2                	or     edx,esi
c001576b:	89 15 e0 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e0,edx
c0015771:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015775:	09 fa                	or     edx,edi
c0015777:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001577b:	89 15 e4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e4,edx
c0015781:	89 1c bd 00 aa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5600],ebx
c0015788:	eb 08                	jmp    c0015792 <LogicalDisk::assignDriveLetter()+0xae>
c001578a:	45                   	inc    ebp
c001578b:	40                   	inc    eax
c001578c:	3c 5b                	cmp    al,0x5b
c001578e:	75 90                	jne    c0015720 <LogicalDisk::assignDriveLetter()+0x3c>
c0015790:	31 c0                	xor    eax,eax
c0015792:	83 c4 14             	add    esp,0x14
c0015795:	5b                   	pop    ebx
c0015796:	5e                   	pop    esi
c0015797:	5f                   	pop    edi
c0015798:	5d                   	pop    ebp
c0015799:	c3                   	ret    

c001579a <LogicalDisk::mount()>:
c001579a:	56                   	push   esi
c001579b:	53                   	push   ebx
c001579c:	51                   	push   ecx
c001579d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157a1:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c00157a7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00157b1:	85 db                	test   ebx,ebx
c00157b3:	74 50                	je     c0015805 <LogicalDisk::mount()+0x6b>
c00157b5:	e8 69 61 00 00       	call   c001b923 <getIRQNestingLevel()>
c00157ba:	52                   	push   edx
c00157bb:	52                   	push   edx
c00157bc:	50                   	push   eax
c00157bd:	68 24 79 02 c0       	push   0xc0027924
c00157c2:	e8 80 ca ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00157c7:	83 c4 0c             	add    esp,0xc
c00157ca:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00157d1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00157d3:	83 e8 41             	sub    eax,0x41
c00157d6:	50                   	push   eax
c00157d7:	56                   	push   esi
c00157d8:	53                   	push   ebx
c00157d9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	84 c0                	test   al,al
c00157e1:	74 08                	je     c00157eb <LogicalDisk::mount()+0x51>
c00157e3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00157e9:	eb 1c                	jmp    c0015807 <LogicalDisk::mount()+0x6d>
c00157eb:	e8 33 61 00 00       	call   c001b923 <getIRQNestingLevel()>
c00157f0:	51                   	push   ecx
c00157f1:	51                   	push   ecx
c00157f2:	50                   	push   eax
c00157f3:	68 3f 79 02 c0       	push   0xc002793f
c00157f8:	e8 4a ca ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00157fd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015800:	83 c4 10             	add    esp,0x10
c0015803:	eb ac                	jmp    c00157b1 <LogicalDisk::mount()+0x17>
c0015805:	31 c0                	xor    eax,eax
c0015807:	5a                   	pop    edx
c0015808:	5b                   	pop    ebx
c0015809:	5e                   	pop    esi
c001580a:	c3                   	ret    
c001580b:	90                   	nop

c001580c <LogicalDisk::unmount()>:
c001580c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015810:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001581a:	c3                   	ret    
c001581b:	90                   	nop

c001581c <LogicalDisk::unassignDriveLetter()>:
c001581c:	57                   	push   edi
c001581d:	56                   	push   esi
c001581e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015822:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015829:	84 c9                	test   cl,cl
c001582b:	75 0f                	jne    c001583c <LogicalDisk::unassignDriveLetter()+0x20>
c001582d:	c7 44 24 0c 5a 79 02 c0 	mov    DWORD PTR [esp+0xc],0xc002795a
c0015835:	5e                   	pop    esi
c0015836:	5f                   	pop    edi
c0015837:	e9 a9 31 00 00       	jmp    c00189e5 <Krnl::panic(char const*)>
c001583c:	83 e9 41             	sub    ecx,0x41
c001583f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015846:	b8 01 00 00 00       	mov    eax,0x1
c001584b:	c7 04 8d 00 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5600],0x0
c0015856:	d3 e0                	shl    eax,cl
c0015858:	89 c7                	mov    edi,eax
c001585a:	f7 d0                	not    eax
c001585c:	c1 ff 1f             	sar    edi,0x1f
c001585f:	21 05 e0 a9 02 c0    	and    DWORD PTR ds:0xc002a9e0,eax
c0015865:	89 fe                	mov    esi,edi
c0015867:	f7 d6                	not    esi
c0015869:	21 35 e4 a9 02 c0    	and    DWORD PTR ds:0xc002a9e4,esi
c001586f:	5e                   	pop    esi
c0015870:	5f                   	pop    edi
c0015871:	c3                   	ret    

c0015872 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015872:	57                   	push   edi
c0015873:	56                   	push   esi
c0015874:	53                   	push   ebx
c0015875:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015879:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001587d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015881:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015885:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001588b:	77 41                	ja     c00158ce <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001588d:	99                   	cdq    
c001588e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015894:	01 c8                	add    eax,ecx
c0015896:	11 da                	adc    edx,ebx
c0015898:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001589e:	19 d7                	sbb    edi,edx
c00158a0:	72 33                	jb     c00158d5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00158a2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158a8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158ae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158b2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158b6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158bc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158c6:	5b                   	pop    ebx
c00158c7:	5e                   	pop    esi
c00158c8:	5f                   	pop    edi
c00158c9:	e9 9a 09 00 00       	jmp    c0016268 <VCache::read(unsigned long long, int, void*)>
c00158ce:	b8 05 00 00 00       	mov    eax,0x5
c00158d3:	eb 05                	jmp    c00158da <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00158d5:	b8 07 00 00 00       	mov    eax,0x7
c00158da:	5b                   	pop    ebx
c00158db:	5e                   	pop    esi
c00158dc:	5f                   	pop    edi
c00158dd:	c3                   	ret    

c00158de <LogicalDisk::write(unsigned long long, int, void*)>:
c00158de:	57                   	push   edi
c00158df:	56                   	push   esi
c00158e0:	53                   	push   ebx
c00158e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158f1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158f7:	77 41                	ja     c001593a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00158f9:	99                   	cdq    
c00158fa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015900:	01 c8                	add    eax,ecx
c0015902:	11 da                	adc    edx,ebx
c0015904:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001590a:	19 d7                	sbb    edi,edx
c001590c:	72 33                	jb     c0015941 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001590e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015914:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001591a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001591e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015922:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015928:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001592e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015932:	5b                   	pop    ebx
c0015933:	5e                   	pop    esi
c0015934:	5f                   	pop    edi
c0015935:	e9 4a 08 00 00       	jmp    c0016184 <VCache::write(unsigned long long, int, void*)>
c001593a:	b8 05 00 00 00       	mov    eax,0x5
c001593f:	eb 05                	jmp    c0015946 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015941:	b8 07 00 00 00       	mov    eax,0x7
c0015946:	5b                   	pop    ebx
c0015947:	5e                   	pop    esi
c0015948:	5f                   	pop    edi
c0015949:	c3                   	ret    

c001594a <Mouse::Mouse(char const*)>:
c001594a:	83 ec 0c             	sub    esp,0xc
c001594d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015951:	83 ec 08             	sub    esp,0x8
c0015954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015958:	50                   	push   eax
c0015959:	e8 e4 de ff ff       	call   c0013842 <Device::Device(char const*)>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	ba b0 79 02 c0       	mov    edx,0xc00279b0
c0015966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001596a:	89 10                	mov    DWORD PTR [eax],edx
c001596c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015970:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001597a:	90                   	nop
c001597b:	83 c4 0c             	add    esp,0xc
c001597e:	c3                   	ret    
c001597f:	90                   	nop

c0015980 <Mouse::~Mouse()>:
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	ba b0 79 02 c0       	mov    edx,0xc00279b0
c0015988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001598c:	89 10                	mov    DWORD PTR [eax],edx
c001598e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015992:	83 ec 0c             	sub    esp,0xc
c0015995:	50                   	push   eax
c0015996:	e8 59 db ff ff       	call   c00134f4 <Device::~Device()>
c001599b:	83 c4 10             	add    esp,0x10
c001599e:	90                   	nop
c001599f:	83 c4 0c             	add    esp,0xc
c00159a2:	c3                   	ret    
c00159a3:	90                   	nop

c00159a4 <Mouse::~Mouse()>:
c00159a4:	83 ec 0c             	sub    esp,0xc
c00159a7:	83 ec 0c             	sub    esp,0xc
c00159aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159ae:	e8 cd ff ff ff       	call   c0015980 <Mouse::~Mouse()>
c00159b3:	83 c4 10             	add    esp,0x10
c00159b6:	83 ec 08             	sub    esp,0x8
c00159b9:	68 58 01 00 00       	push   0x158
c00159be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159c2:	e8 a0 c7 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	83 c4 0c             	add    esp,0xc
c00159cd:	c3                   	ret    

c00159ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159ce:	55                   	push   ebp
c00159cf:	57                   	push   edi
c00159d0:	56                   	push   esi
c00159d1:	53                   	push   ebx
c00159d2:	81 ec 28 01 00 00    	sub    esp,0x128
c00159d8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00159df:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00159e6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00159ed:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00159f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00159f8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00159fc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a03:	e8 2c df ff ff       	call   c0013934 <Device::getName()>
c0015a08:	5a                   	pop    edx
c0015a09:	59                   	pop    ecx
c0015a0a:	50                   	push   eax
c0015a0b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015a0f:	55                   	push   ebp
c0015a10:	e8 4f ad fe ff       	call   c0000764 <strcpy>
c0015a15:	5b                   	pop    ebx
c0015a16:	58                   	pop    eax
c0015a17:	68 d4 79 02 c0       	push   0xc00279d4
c0015a1c:	55                   	push   ebp
c0015a1d:	e8 f9 ad fe ff       	call   c000081b <strcat>
c0015a22:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a29:	e8 2a c7 ff ff       	call   c0012158 <operator new(unsigned long)>
c0015a2e:	83 c4 0c             	add    esp,0xc
c0015a31:	89 c3                	mov    ebx,eax
c0015a33:	57                   	push   edi
c0015a34:	56                   	push   esi
c0015a35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a3d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a44:	55                   	push   ebp
c0015a45:	50                   	push   eax
c0015a46:	e8 e3 fb ff ff       	call   c001562e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a4b:	83 c4 14             	add    esp,0x14
c0015a4e:	53                   	push   ebx
c0015a4f:	e8 90 fc ff ff       	call   c00156e4 <LogicalDisk::assignDriveLetter()>
c0015a54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a57:	e8 3e fd ff ff       	call   c001579a <LogicalDisk::mount()>
c0015a5c:	58                   	pop    eax
c0015a5d:	5a                   	pop    edx
c0015a5e:	53                   	push   ebx
c0015a5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a66:	e8 e7 db ff ff       	call   c0013652 <Device::addChild(Device*)>
c0015a6b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a71:	5b                   	pop    ebx
c0015a72:	5e                   	pop    esi
c0015a73:	5f                   	pop    edi
c0015a74:	5d                   	pop    ebp
c0015a75:	c3                   	ret    

c0015a76 <createPartitionsForDisk(PhysicalDisk*)>:
c0015a76:	55                   	push   ebp
c0015a77:	57                   	push   edi
c0015a78:	56                   	push   esi
c0015a79:	53                   	push   ebx
c0015a7a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015a80:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015a87:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015a8d:	3d 00 02 00 00       	cmp    eax,0x200
c0015a92:	74 27                	je     c0015abb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015a94:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015a9a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015aa0:	83 ec 10             	sub    esp,0x10
c0015aa3:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015aa7:	99                   	cdq    
c0015aa8:	c1 e6 0a             	shl    esi,0xa
c0015aab:	52                   	push   edx
c0015aac:	89 fd                	mov    ebp,edi
c0015aae:	50                   	push   eax
c0015aaf:	55                   	push   ebp
c0015ab0:	56                   	push   esi
c0015ab1:	e8 a6 d8 00 00       	call   c002335c <__udivdi3>
c0015ab6:	e9 b1 00 00 00       	jmp    c0015b6c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015abb:	83 ec 0c             	sub    esp,0xc
c0015abe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ac0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015ac4:	56                   	push   esi
c0015ac5:	6a 01                	push   0x1
c0015ac7:	6a 00                	push   0x0
c0015ac9:	6a 00                	push   0x0
c0015acb:	53                   	push   ebx
c0015acc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015acf:	83 c4 20             	add    esp,0x20
c0015ad2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015ada:	75 0a                	jne    c0015ae6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015adc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015ae4:	74 2c                	je     c0015b12 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015ae6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015aec:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015af2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015af8:	83 ec 10             	sub    esp,0x10
c0015afb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015aff:	89 f7                	mov    edi,esi
c0015b01:	c1 e0 0a             	shl    eax,0xa
c0015b04:	c1 ff 1f             	sar    edi,0x1f
c0015b07:	57                   	push   edi
c0015b08:	56                   	push   esi
c0015b09:	52                   	push   edx
c0015b0a:	50                   	push   eax
c0015b0b:	e8 4c d8 00 00       	call   c002335c <__udivdi3>
c0015b10:	eb 5a                	jmp    c0015b6c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015b12:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b19:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b20:	83 e1 7f             	and    ecx,0x7f
c0015b23:	83 e0 7f             	and    eax,0x7f
c0015b26:	01 c1                	add    ecx,eax
c0015b28:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b2f:	83 e0 7f             	and    eax,0x7f
c0015b32:	01 c1                	add    ecx,eax
c0015b34:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b3b:	83 e0 7f             	and    eax,0x7f
c0015b3e:	00 c1                	add    cl,al
c0015b40:	74 41                	je     c0015b83 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b42:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b48:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b54:	83 ec 10             	sub    esp,0x10
c0015b57:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b5b:	89 f7                	mov    edi,esi
c0015b5d:	c1 e0 0a             	shl    eax,0xa
c0015b60:	c1 ff 1f             	sar    edi,0x1f
c0015b63:	57                   	push   edi
c0015b64:	56                   	push   esi
c0015b65:	52                   	push   edx
c0015b66:	50                   	push   eax
c0015b67:	e8 f0 d7 00 00       	call   c002335c <__udivdi3>
c0015b6c:	83 c4 14             	add    esp,0x14
c0015b6f:	52                   	push   edx
c0015b70:	50                   	push   eax
c0015b71:	6a 00                	push   0x0
c0015b73:	6a 00                	push   0x0
c0015b75:	53                   	push   ebx
c0015b76:	e8 53 fe ff ff       	call   c00159ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015b7b:	83 c4 20             	add    esp,0x20
c0015b7e:	e9 79 01 00 00       	jmp    c0015cfc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015b83:	89 f0                	mov    eax,esi
c0015b85:	31 f6                	xor    esi,esi
c0015b87:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015b8e:	75 02                	jne    c0015b92 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015b90:	89 f1                	mov    ecx,esi
c0015b92:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015b99:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015ba0:	c1 e2 08             	shl    edx,0x8
c0015ba3:	c1 e7 10             	shl    edi,0x10
c0015ba6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015bae:	09 fa                	or     edx,edi
c0015bb0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015bb8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015bbf:	83 c0 10             	add    eax,0x10
c0015bc2:	09 fa                	or     edx,edi
c0015bc4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bcb:	c1 e7 18             	shl    edi,0x18
c0015bce:	09 fa                	or     edx,edi
c0015bd0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015bd7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015bdb:	c1 e7 10             	shl    edi,0x10
c0015bde:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015be5:	c1 e2 08             	shl    edx,0x8
c0015be8:	09 fa                	or     edx,edi
c0015bea:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015bf1:	09 fa                	or     edx,edi
c0015bf3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015bfa:	c1 e7 18             	shl    edi,0x18
c0015bfd:	09 fa                	or     edx,edi
c0015bff:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015c03:	46                   	inc    esi
c0015c04:	83 fe 04             	cmp    esi,0x4
c0015c07:	0f 85 7a ff ff ff    	jne    c0015b87 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c11:	83 f0 01             	xor    eax,0x1
c0015c14:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c18:	75 57                	jne    c0015c71 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c1e:	83 f0 01             	xor    eax,0x1
c0015c21:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c25:	75 4a                	jne    c0015c71 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c27:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c2b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c33:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c3b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c41:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c47:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c4d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c51:	89 f7                	mov    edi,esi
c0015c53:	c1 e0 0a             	shl    eax,0xa
c0015c56:	c1 ff 1f             	sar    edi,0x1f
c0015c59:	57                   	push   edi
c0015c5a:	56                   	push   esi
c0015c5b:	52                   	push   edx
c0015c5c:	50                   	push   eax
c0015c5d:	e8 fa d6 00 00       	call   c002335c <__udivdi3>
c0015c62:	83 c4 10             	add    esp,0x10
c0015c65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c6d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c71:	84 c9                	test   cl,cl
c0015c73:	74 53                	je     c0015cc8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c75:	0f b6 c9             	movzx  ecx,cl
c0015c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c80:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c84:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015c88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c90:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015c94:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015c98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015ca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ca4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ca8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015cac:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015cb0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015cb4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015cb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cc0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015cc4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cc8:	31 ed                	xor    ebp,ebp
c0015cca:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cce:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015cd2:	89 f8                	mov    eax,edi
c0015cd4:	09 f0                	or     eax,esi
c0015cd6:	74 1e                	je     c0015cf6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cd8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015cdc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015ce0:	89 d1                	mov    ecx,edx
c0015ce2:	09 c1                	or     ecx,eax
c0015ce4:	74 10                	je     c0015cf6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015ce6:	83 ec 0c             	sub    esp,0xc
c0015ce9:	57                   	push   edi
c0015cea:	56                   	push   esi
c0015ceb:	52                   	push   edx
c0015cec:	50                   	push   eax
c0015ced:	53                   	push   ebx
c0015cee:	e8 db fc ff ff       	call   c00159ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015cf3:	83 c4 20             	add    esp,0x20
c0015cf6:	45                   	inc    ebp
c0015cf7:	83 fd 04             	cmp    ebp,0x4
c0015cfa:	75 ce                	jne    c0015cca <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015cfc:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015d02:	5b                   	pop    ebx
c0015d03:	5e                   	pop    esi
c0015d04:	5f                   	pop    edi
c0015d05:	5d                   	pop    ebp
c0015d06:	c3                   	ret    
c0015d07:	90                   	nop

c0015d08 <Timer::Timer(char const*)>:
c0015d08:	83 ec 0c             	sub    esp,0xc
c0015d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d0f:	83 ec 08             	sub    esp,0x8
c0015d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d16:	50                   	push   eax
c0015d17:	e8 26 db ff ff       	call   c0013842 <Device::Device(char const*)>
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	ba e8 79 02 c0       	mov    edx,0xc00279e8
c0015d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d28:	89 10                	mov    DWORD PTR [eax],edx
c0015d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d2e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d38:	90                   	nop
c0015d39:	83 c4 0c             	add    esp,0xc
c0015d3c:	c3                   	ret    
c0015d3d:	90                   	nop

c0015d3e <Timer::~Timer()>:
c0015d3e:	83 ec 0c             	sub    esp,0xc
c0015d41:	ba e8 79 02 c0       	mov    edx,0xc00279e8
c0015d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d4a:	89 10                	mov    DWORD PTR [eax],edx
c0015d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	50                   	push   eax
c0015d54:	e8 9b d7 ff ff       	call   c00134f4 <Device::~Device()>
c0015d59:	83 c4 10             	add    esp,0x10
c0015d5c:	90                   	nop
c0015d5d:	83 c4 0c             	add    esp,0xc
c0015d60:	c3                   	ret    
c0015d61:	90                   	nop

c0015d62 <Timer::~Timer()>:
c0015d62:	83 ec 0c             	sub    esp,0xc
c0015d65:	83 ec 0c             	sub    esp,0xc
c0015d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d6c:	e8 cd ff ff ff       	call   c0015d3e <Timer::~Timer()>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	83 ec 08             	sub    esp,0x8
c0015d77:	68 5c 01 00 00       	push   0x15c
c0015d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d80:	e8 e2 c3 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	83 c4 0c             	add    esp,0xc
c0015d8b:	c3                   	ret    

c0015d8c <Timer::read()>:
c0015d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d90:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d96:	c3                   	ret    

c0015d97 <timerHandler(unsigned long long)>:
c0015d97:	55                   	push   ebp
c0015d98:	57                   	push   edi
c0015d99:	56                   	push   esi
c0015d9a:	53                   	push   ebx
c0015d9b:	83 ec 0c             	sub    esp,0xc
c0015d9e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015da2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015da6:	01 35 70 aa 02 c0    	add    DWORD PTR ds:0xc002aa70,esi
c0015dac:	11 3d 74 aa 02 c0    	adc    DWORD PTR ds:0xc002aa74,edi
c0015db2:	80 3d 0d a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40d,0x0
c0015db9:	0f 84 07 01 00 00    	je     c0015ec6 <timerHandler(unsigned long long)+0x12f>
c0015dbf:	e8 9b 5b 00 00       	call   c001b95f <lockStuff()>
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	68 3c b8 02 c0       	push   0xc002b83c
c0015dcc:	e8 9f f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015dd1:	c7 04 24 3c b8 02 c0 	mov    DWORD PTR [esp],0xc002b83c
c0015dd8:	89 c3                	mov    ebx,eax
c0015dda:	e8 99 f6 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ddf:	83 c4 10             	add    esp,0x10
c0015de2:	84 c0                	test   al,al
c0015de4:	74 60                	je     c0015e46 <timerHandler(unsigned long long)+0xaf>
c0015de6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dec:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015def:	85 c0                	test   eax,eax
c0015df1:	0f 85 91 00 00 00    	jne    c0015e88 <timerHandler(unsigned long long)+0xf1>
c0015df7:	e9 be 00 00 00       	jmp    c0015eba <timerHandler(unsigned long long)+0x123>
c0015dfc:	83 ec 0c             	sub    esp,0xc
c0015dff:	55                   	push   ebp
c0015e00:	e8 43 61 00 00       	call   c001bf48 <unblockTask(ThreadControlBlock*)>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	39 eb                	cmp    ebx,ebp
c0015e0a:	75 12                	jne    c0015e1e <timerHandler(unsigned long long)+0x87>
c0015e0c:	83 ec 0c             	sub    esp,0xc
c0015e0f:	68 3c b8 02 c0       	push   0xc002b83c
c0015e14:	e8 57 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e19:	89 c3                	mov    ebx,eax
c0015e1b:	83 c4 10             	add    esp,0x10
c0015e1e:	83 ec 0c             	sub    esp,0xc
c0015e21:	68 3c b8 02 c0       	push   0xc002b83c
c0015e26:	e8 4d f6 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e2b:	83 c4 10             	add    esp,0x10
c0015e2e:	84 c0                	test   al,al
c0015e30:	75 b4                	jne    c0015de6 <timerHandler(unsigned long long)+0x4f>
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	68 3c b8 02 c0       	push   0xc002b83c
c0015e3a:	e8 31 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	39 d8                	cmp    eax,ebx
c0015e44:	74 a0                	je     c0015de6 <timerHandler(unsigned long long)+0x4f>
c0015e46:	83 ec 0c             	sub    esp,0xc
c0015e49:	68 3c b8 02 c0       	push   0xc002b83c
c0015e4e:	e8 1d f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e53:	c7 04 24 3c b8 02 c0 	mov    DWORD PTR [esp],0xc002b83c
c0015e5a:	89 c5                	mov    ebp,eax
c0015e5c:	e8 33 f6 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e61:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e64:	83 c4 10             	add    esp,0x10
c0015e67:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e6a:	39 15 70 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa70,edx
c0015e70:	a1 74 aa 02 c0       	mov    eax,ds:0xc002aa74
c0015e75:	19 c8                	sbb    eax,ecx
c0015e77:	73 83                	jae    c0015dfc <timerHandler(unsigned long long)+0x65>
c0015e79:	50                   	push   eax
c0015e7a:	50                   	push   eax
c0015e7b:	55                   	push   ebp
c0015e7c:	68 3c b8 02 c0       	push   0xc002b83c
c0015e81:	e8 bc f6 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e86:	eb 93                	jmp    c0015e1b <timerHandler(unsigned long long)+0x84>
c0015e88:	80 3d 0c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40c,0x0
c0015e8f:	74 29                	je     c0015eba <timerHandler(unsigned long long)+0x123>
c0015e91:	39 c6                	cmp    esi,eax
c0015e93:	bb 00 00 00 00       	mov    ebx,0x0
c0015e98:	19 df                	sbb    edi,ebx
c0015e9a:	72 19                	jb     c0015eb5 <timerHandler(unsigned long long)+0x11e>
c0015e9c:	e8 97 5a 00 00       	call   c001b938 <lockScheduler()>
c0015ea1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015ea9:	e8 be 5d 00 00       	call   c001bc6c <schedule()>
c0015eae:	e8 87 5a 00 00       	call   c001b93a <unlockScheduler()>
c0015eb3:	eb 05                	jmp    c0015eba <timerHandler(unsigned long long)+0x123>
c0015eb5:	29 f0                	sub    eax,esi
c0015eb7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015eba:	83 c4 0c             	add    esp,0xc
c0015ebd:	5b                   	pop    ebx
c0015ebe:	5e                   	pop    esi
c0015ebf:	5f                   	pop    edi
c0015ec0:	5d                   	pop    ebp
c0015ec1:	e9 2b 5e 00 00       	jmp    c001bcf1 <unlockStuff()>
c0015ec6:	83 c4 0c             	add    esp,0xc
c0015ec9:	5b                   	pop    ebx
c0015eca:	5e                   	pop    esi
c0015ecb:	5f                   	pop    edi
c0015ecc:	5d                   	pop    ebp
c0015ecd:	c3                   	ret    

c0015ece <setupTimer(int)>:
c0015ece:	57                   	push   edi
c0015ecf:	56                   	push   esi
c0015ed0:	53                   	push   ebx
c0015ed1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ed5:	e8 84 19 00 00       	call   c001785e <CPU::getNumber()>
c0015eda:	85 c0                	test   eax,eax
c0015edc:	74 32                	je     c0015f10 <setupTimer(int)+0x42>
c0015ede:	83 ec 0c             	sub    esp,0xc
c0015ee1:	68 60 01 00 00       	push   0x160
c0015ee6:	e8 6d c2 ff ff       	call   c0012158 <operator new(unsigned long)>
c0015eeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015eee:	89 c3                	mov    ebx,eax
c0015ef0:	e8 fd ce 00 00       	call   c0022df2 <APICTimer::APICTimer()>
c0015ef5:	6a 00                	push   0x0
c0015ef7:	6a 00                	push   0x0
c0015ef9:	56                   	push   esi
c0015efa:	53                   	push   ebx
c0015efb:	e8 fa cd 00 00       	call   c0022cfa <APICTimer::open(int, int, void*)>
c0015f00:	83 c4 20             	add    esp,0x20
c0015f03:	e8 5a 19 00 00       	call   c0017862 <CPU::current()>
c0015f08:	56                   	push   esi
c0015f09:	56                   	push   esi
c0015f0a:	53                   	push   ebx
c0015f0b:	e9 96 00 00 00       	jmp    c0015fa6 <setupTimer(int)+0xd8>
c0015f10:	e8 4d 19 00 00       	call   c0017862 <CPU::current()>
c0015f15:	83 ec 0c             	sub    esp,0xc
c0015f18:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f1e:	e8 11 da ff ff       	call   c0013934 <Device::getName()>
c0015f23:	83 c4 10             	add    esp,0x10
c0015f26:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f29:	0f 85 87 00 00 00    	jne    c0015fb6 <setupTimer(int)+0xe8>
c0015f2f:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0015f34:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f3b:	74 79                	je     c0015fb6 <setupTimer(int)+0xe8>
c0015f3d:	83 ec 0c             	sub    esp,0xc
c0015f40:	68 5c 01 00 00       	push   0x15c
c0015f45:	e8 0e c2 ff ff       	call   c0012158 <operator new(unsigned long)>
c0015f4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f4d:	89 c3                	mov    ebx,eax
c0015f4f:	e8 ee cf 00 00       	call   c0022f42 <PIT::PIT()>
c0015f54:	59                   	pop    ecx
c0015f55:	5f                   	pop    edi
c0015f56:	53                   	push   ebx
c0015f57:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015f5d:	e8 f0 d6 ff ff       	call   c0013652 <Device::addChild(Device*)>
c0015f62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f64:	6a 00                	push   0x0
c0015f66:	6a 00                	push   0x0
c0015f68:	56                   	push   esi
c0015f69:	53                   	push   ebx
c0015f6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f6d:	83 c4 14             	add    esp,0x14
c0015f70:	68 60 01 00 00       	push   0x160
c0015f75:	e8 de c1 ff ff       	call   c0012158 <operator new(unsigned long)>
c0015f7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f7d:	89 c7                	mov    edi,eax
c0015f7f:	e8 6e ce 00 00       	call   c0022df2 <APICTimer::APICTimer()>
c0015f84:	6a 00                	push   0x0
c0015f86:	6a 00                	push   0x0
c0015f88:	56                   	push   esi
c0015f89:	57                   	push   edi
c0015f8a:	e8 6b cd 00 00       	call   c0022cfa <APICTimer::open(int, int, void*)>
c0015f8f:	83 c4 20             	add    esp,0x20
c0015f92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f94:	6a 00                	push   0x0
c0015f96:	6a 00                	push   0x0
c0015f98:	6a 00                	push   0x0
c0015f9a:	53                   	push   ebx
c0015f9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f9e:	e8 bf 18 00 00       	call   c0017862 <CPU::current()>
c0015fa3:	5a                   	pop    edx
c0015fa4:	59                   	pop    ecx
c0015fa5:	57                   	push   edi
c0015fa6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015fac:	e8 a1 d6 ff ff       	call   c0013652 <Device::addChild(Device*)>
c0015fb1:	83 c4 10             	add    esp,0x10
c0015fb4:	eb 33                	jmp    c0015fe9 <setupTimer(int)+0x11b>
c0015fb6:	83 ec 0c             	sub    esp,0xc
c0015fb9:	68 5c 01 00 00       	push   0x15c
c0015fbe:	e8 95 c1 ff ff       	call   c0012158 <operator new(unsigned long)>
c0015fc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fc6:	89 c3                	mov    ebx,eax
c0015fc8:	e8 75 cf 00 00       	call   c0022f42 <PIT::PIT()>
c0015fcd:	58                   	pop    eax
c0015fce:	5a                   	pop    edx
c0015fcf:	53                   	push   ebx
c0015fd0:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015fd6:	e8 77 d6 ff ff       	call   c0013652 <Device::addChild(Device*)>
c0015fdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fdd:	6a 00                	push   0x0
c0015fdf:	6a 00                	push   0x0
c0015fe1:	56                   	push   esi
c0015fe2:	53                   	push   ebx
c0015fe3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fe6:	83 c4 20             	add    esp,0x20
c0015fe9:	89 d8                	mov    eax,ebx
c0015feb:	5b                   	pop    ebx
c0015fec:	5e                   	pop    esi
c0015fed:	5f                   	pop    edi
c0015fee:	c3                   	ret    
c0015fef:	90                   	nop

c0015ff0 <VCache::VCache(PhysicalDisk*)>:
c0015ff0:	53                   	push   ebx
c0015ff1:	83 ec 08             	sub    esp,0x8
c0015ff4:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c0015ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ffd:	89 10                	mov    DWORD PTR [eax],edx
c0015fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016003:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001600a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016019:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016020:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001602b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016032:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016048:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001604c:	83 ec 0c             	sub    esp,0xc
c001604f:	6a 10                	push   0x10
c0016051:	e8 02 c1 ff ff       	call   c0012158 <operator new(unsigned long)>
c0016056:	83 c4 10             	add    esp,0x10
c0016059:	89 c3                	mov    ebx,eax
c001605b:	83 ec 0c             	sub    esp,0xc
c001605e:	53                   	push   ebx
c001605f:	e8 ec 59 00 00       	call   c001ba50 <Mutex::Mutex()>
c0016064:	83 c4 10             	add    esp,0x10
c0016067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001606e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016072:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016076:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016084:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016088:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001608e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016092:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016099:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001609f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00160a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160a9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00160ac:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00160af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00160b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160c1:	c1 e0 06             	shl    eax,0x6
c00160c4:	83 ec 0c             	sub    esp,0xc
c00160c7:	50                   	push   eax
c00160c8:	e8 71 90 ff ff       	call   c000f13e <malloc>
c00160cd:	83 c4 10             	add    esp,0x10
c00160d0:	89 c2                	mov    edx,eax
c00160d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00160d9:	90                   	nop
c00160da:	83 c4 08             	add    esp,0x8
c00160dd:	5b                   	pop    ebx
c00160de:	c3                   	ret    
c00160df:	90                   	nop

c00160e0 <VCache::writeWriteBuffer()>:
c00160e0:	53                   	push   ebx
c00160e1:	83 ec 14             	sub    esp,0x14
c00160e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00160e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00160eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00160ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00160f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160f3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00160f6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00160f9:	50                   	push   eax
c00160fa:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00160fd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016104:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001610b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001610f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016116:	83 c4 28             	add    esp,0x28
c0016119:	5b                   	pop    ebx
c001611a:	c3                   	ret    
c001611b:	90                   	nop

c001611c <VCache::~VCache()>:
c001611c:	83 ec 0c             	sub    esp,0xc
c001611f:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c0016124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016128:	89 10                	mov    DWORD PTR [eax],edx
c001612a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001612e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016131:	84 c0                	test   al,al
c0016133:	74 0f                	je     c0016144 <VCache::~VCache()+0x28>
c0016135:	83 ec 0c             	sub    esp,0xc
c0016138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001613c:	e8 9f ff ff ff       	call   c00160e0 <VCache::writeWriteBuffer()>
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016148:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001614b:	83 ec 0c             	sub    esp,0xc
c001614e:	50                   	push   eax
c001614f:	e8 fa 8f ff ff       	call   c000f14e <free>
c0016154:	83 c4 10             	add    esp,0x10
c0016157:	90                   	nop
c0016158:	83 c4 0c             	add    esp,0xc
c001615b:	c3                   	ret    

c001615c <VCache::~VCache()>:
c001615c:	83 ec 0c             	sub    esp,0xc
c001615f:	83 ec 0c             	sub    esp,0xc
c0016162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016166:	e8 b1 ff ff ff       	call   c001611c <VCache::~VCache()>
c001616b:	83 c4 10             	add    esp,0x10
c001616e:	83 ec 08             	sub    esp,0x8
c0016171:	6a 30                	push   0x30
c0016173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016177:	e8 eb bf ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c001617c:	83 c4 10             	add    esp,0x10
c001617f:	83 c4 0c             	add    esp,0xc
c0016182:	c3                   	ret    
c0016183:	90                   	nop

c0016184 <VCache::write(unsigned long long, int, void*)>:
c0016184:	55                   	push   ebp
c0016185:	57                   	push   edi
c0016186:	56                   	push   esi
c0016187:	53                   	push   ebx
c0016188:	83 ec 28             	sub    esp,0x28
c001618b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001618f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016193:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016197:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001619b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001619e:	e8 0f 5d 00 00       	call   c001beb2 <Semaphore::acquire()>
c00161a3:	83 c4 10             	add    esp,0x10
c00161a6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00161aa:	74 66                	je     c0016212 <VCache::write(unsigned long long, int, void*)+0x8e>
c00161ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161af:	99                   	cdq    
c00161b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161b4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00161b7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161ba:	89 c1                	mov    ecx,eax
c00161bc:	89 d0                	mov    eax,edx
c00161be:	31 f1                	xor    ecx,esi
c00161c0:	31 f8                	xor    eax,edi
c00161c2:	89 ca                	mov    edx,ecx
c00161c4:	09 c2                	or     edx,eax
c00161c6:	75 3e                	jne    c0016206 <VCache::write(unsigned long long, int, void*)+0x82>
c00161c8:	83 fd 01             	cmp    ebp,0x1
c00161cb:	75 39                	jne    c0016206 <VCache::write(unsigned long long, int, void*)+0x82>
c00161cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161d0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00161d6:	51                   	push   ecx
c00161d7:	50                   	push   eax
c00161d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161dc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161e0:	0f af c8             	imul   ecx,eax
c00161e3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00161e6:	51                   	push   ecx
c00161e7:	e8 a3 a4 fe ff       	call   c000068f <memcpy>
c00161ec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161ef:	83 c4 10             	add    esp,0x10
c00161f2:	40                   	inc    eax
c00161f3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00161f6:	83 f8 40             	cmp    eax,0x40
c00161f9:	75 57                	jne    c0016252 <VCache::write(unsigned long long, int, void*)+0xce>
c00161fb:	83 ec 0c             	sub    esp,0xc
c00161fe:	53                   	push   ebx
c00161ff:	e8 dc fe ff ff       	call   c00160e0 <VCache::writeWriteBuffer()>
c0016204:	eb 34                	jmp    c001623a <VCache::write(unsigned long long, int, void*)+0xb6>
c0016206:	83 ec 0c             	sub    esp,0xc
c0016209:	53                   	push   ebx
c001620a:	e8 d1 fe ff ff       	call   c00160e0 <VCache::writeWriteBuffer()>
c001620f:	83 c4 10             	add    esp,0x10
c0016212:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016215:	83 fd 3f             	cmp    ebp,0x3f
c0016218:	7f 25                	jg     c001623f <VCache::write(unsigned long long, int, void*)+0xbb>
c001621a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001621d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016220:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016223:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016227:	52                   	push   edx
c0016228:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001622e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016232:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016235:	e8 55 a4 fe ff       	call   c000068f <memcpy>
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	eb 13                	jmp    c0016252 <VCache::write(unsigned long long, int, void*)+0xce>
c001623f:	83 ec 0c             	sub    esp,0xc
c0016242:	8b 10                	mov    edx,DWORD PTR [eax]
c0016244:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016248:	55                   	push   ebp
c0016249:	57                   	push   edi
c001624a:	56                   	push   esi
c001624b:	50                   	push   eax
c001624c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001624f:	83 c4 20             	add    esp,0x20
c0016252:	83 ec 0c             	sub    esp,0xc
c0016255:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016258:	e8 dd 61 00 00       	call   c001c43a <Semaphore::release()>
c001625d:	83 c4 2c             	add    esp,0x2c
c0016260:	31 c0                	xor    eax,eax
c0016262:	5b                   	pop    ebx
c0016263:	5e                   	pop    esi
c0016264:	5f                   	pop    edi
c0016265:	5d                   	pop    ebp
c0016266:	c3                   	ret    
c0016267:	90                   	nop

c0016268 <VCache::read(unsigned long long, int, void*)>:
c0016268:	57                   	push   edi
c0016269:	56                   	push   esi
c001626a:	53                   	push   ebx
c001626b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001626f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016273:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016277:	83 ec 0c             	sub    esp,0xc
c001627a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001627d:	e8 30 5c 00 00       	call   c001beb2 <Semaphore::acquire()>
c0016282:	83 c4 10             	add    esp,0x10
c0016285:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016289:	74 0c                	je     c0016297 <VCache::read(unsigned long long, int, void*)+0x2f>
c001628b:	83 ec 0c             	sub    esp,0xc
c001628e:	53                   	push   ebx
c001628f:	e8 4c fe ff ff       	call   c00160e0 <VCache::writeWriteBuffer()>
c0016294:	83 c4 10             	add    esp,0x10
c0016297:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001629a:	83 ec 0c             	sub    esp,0xc
c001629d:	8b 10                	mov    edx,DWORD PTR [eax]
c001629f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162a7:	57                   	push   edi
c00162a8:	56                   	push   esi
c00162a9:	50                   	push   eax
c00162aa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162ad:	83 c4 14             	add    esp,0x14
c00162b0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162b3:	e8 82 61 00 00       	call   c001c43a <Semaphore::release()>
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	31 c0                	xor    eax,eax
c00162bd:	5b                   	pop    ebx
c00162be:	5e                   	pop    esi
c00162bf:	5f                   	pop    edi
c00162c0:	c3                   	ret    
c00162c1:	90                   	nop

c00162c2 <Video::putrect(int, int, int, int, unsigned int)>:
c00162c2:	55                   	push   ebp
c00162c3:	57                   	push   edi
c00162c4:	56                   	push   esi
c00162c5:	53                   	push   ebx
c00162c6:	83 ec 1c             	sub    esp,0x1c
c00162c9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162cd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00162d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162d5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00162d9:	01 e8                	add    eax,ebp
c00162db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162e3:	01 df                	add    edi,ebx
c00162e5:	39 fb                	cmp    ebx,edi
c00162e7:	7d 1b                	jge    c0016304 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00162e9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00162ed:	7d 12                	jge    c0016301 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00162ef:	8b 16                	mov    edx,DWORD PTR [esi]
c00162f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00162f5:	53                   	push   ebx
c00162f6:	55                   	push   ebp
c00162f7:	45                   	inc    ebp
c00162f8:	56                   	push   esi
c00162f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162fc:	83 c4 10             	add    esp,0x10
c00162ff:	eb e8                	jmp    c00162e9 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016301:	43                   	inc    ebx
c0016302:	eb e1                	jmp    c00162e5 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0016304:	83 c4 1c             	add    esp,0x1c
c0016307:	5b                   	pop    ebx
c0016308:	5e                   	pop    esi
c0016309:	5f                   	pop    edi
c001630a:	5d                   	pop    ebp
c001630b:	c3                   	ret    

c001630c <Video::blit(unsigned int*, int, int, int, int)>:
c001630c:	55                   	push   ebp
c001630d:	57                   	push   edi
c001630e:	56                   	push   esi
c001630f:	53                   	push   ebx
c0016310:	83 ec 1c             	sub    esp,0x1c
c0016313:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016317:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001631b:	85 c0                	test   eax,eax
c001631d:	79 02                	jns    c0016321 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001631f:	31 c0                	xor    eax,eax
c0016321:	c1 e0 02             	shl    eax,0x2
c0016324:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016328:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001632c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016330:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016334:	39 d8                	cmp    eax,ebx
c0016336:	7e 49                	jle    c0016381 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016338:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001633e:	7c 41                	jl     c0016381 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016340:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016344:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016348:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001634c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016350:	39 f9                	cmp    ecx,edi
c0016352:	7e 22                	jle    c0016376 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016354:	83 c5 04             	add    ebp,0x4
c0016357:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001635d:	7c 14                	jl     c0016373 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001635f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016361:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016364:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016368:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001636c:	56                   	push   esi
c001636d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	47                   	inc    edi
c0016374:	eb d2                	jmp    c0016348 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016376:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001637a:	43                   	inc    ebx
c001637b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001637f:	eb ab                	jmp    c001632c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016381:	83 c4 1c             	add    esp,0x1c
c0016384:	5b                   	pop    ebx
c0016385:	5e                   	pop    esi
c0016386:	5f                   	pop    edi
c0016387:	5d                   	pop    ebp
c0016388:	c3                   	ret    
c0016389:	90                   	nop

c001638a <Video::clearScreen(unsigned int)>:
c001638a:	57                   	push   edi
c001638b:	56                   	push   esi
c001638c:	53                   	push   ebx
c001638d:	31 db                	xor    ebx,ebx
c001638f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016393:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016399:	7e 1f                	jle    c00163ba <Video::clearScreen(unsigned int)+0x30>
c001639b:	31 ff                	xor    edi,edi
c001639d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00163a3:	7e 12                	jle    c00163b7 <Video::clearScreen(unsigned int)+0x2d>
c00163a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00163a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163ab:	53                   	push   ebx
c00163ac:	57                   	push   edi
c00163ad:	47                   	inc    edi
c00163ae:	56                   	push   esi
c00163af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00163b2:	83 c4 10             	add    esp,0x10
c00163b5:	eb e6                	jmp    c001639d <Video::clearScreen(unsigned int)+0x13>
c00163b7:	43                   	inc    ebx
c00163b8:	eb d9                	jmp    c0016393 <Video::clearScreen(unsigned int)+0x9>
c00163ba:	5b                   	pop    ebx
c00163bb:	5e                   	pop    esi
c00163bc:	5f                   	pop    edi
c00163bd:	c3                   	ret    

c00163be <Video::putpixel(int, int, unsigned int)>:
c00163be:	c7 44 24 04 20 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027a20
c00163c6:	e9 7c be ff ff       	jmp    c0012247 <Dbg::kprintf(char const*, ...)>
c00163cb:	90                   	nop

c00163cc <Video::Video(char const*)>:
c00163cc:	83 ec 0c             	sub    esp,0xc
c00163cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d3:	83 ec 08             	sub    esp,0x8
c00163d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163da:	50                   	push   eax
c00163db:	e8 62 d4 ff ff       	call   c0013842 <Device::Device(char const*)>
c00163e0:	83 c4 10             	add    esp,0x10
c00163e3:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	89 10                	mov    DWORD PTR [eax],edx
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00163fc:	90                   	nop
c00163fd:	83 c4 0c             	add    esp,0xc
c0016400:	c3                   	ret    
c0016401:	90                   	nop

c0016402 <Video::~Video()>:
c0016402:	83 ec 0c             	sub    esp,0xc
c0016405:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c001640a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640e:	89 10                	mov    DWORD PTR [eax],edx
c0016410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016414:	83 ec 0c             	sub    esp,0xc
c0016417:	50                   	push   eax
c0016418:	e8 d7 d0 ff ff       	call   c00134f4 <Device::~Device()>
c001641d:	83 c4 10             	add    esp,0x10
c0016420:	90                   	nop
c0016421:	83 c4 0c             	add    esp,0xc
c0016424:	c3                   	ret    
c0016425:	90                   	nop

c0016426 <Video::~Video()>:
c0016426:	83 ec 0c             	sub    esp,0xc
c0016429:	83 ec 0c             	sub    esp,0xc
c001642c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016430:	e8 cd ff ff ff       	call   c0016402 <Video::~Video()>
c0016435:	83 c4 10             	add    esp,0x10
c0016438:	83 ec 08             	sub    esp,0x8
c001643b:	68 64 01 00 00       	push   0x164
c0016440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016444:	e8 1e bd ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0016449:	83 c4 10             	add    esp,0x10
c001644c:	83 c4 0c             	add    esp,0xc
c001644f:	c3                   	ret    

c0016450 <Video::isMonochrome()>:
c0016450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016454:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001645a:	c3                   	ret    
c001645b:	90                   	nop

c001645c <Video::getWidth()>:
c001645c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016460:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016466:	c3                   	ret    
c0016467:	90                   	nop

c0016468 <Video::getHeight()>:
c0016468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001646c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016472:	c3                   	ret    
c0016473:	90                   	nop

c0016474 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016474:	55                   	push   ebp
c0016475:	57                   	push   edi
c0016476:	56                   	push   esi
c0016477:	53                   	push   ebx
c0016478:	83 ec 2c             	sub    esp,0x2c
c001647b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001647f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016483:	83 f8 01             	cmp    eax,0x1
c0016486:	19 c9                	sbb    ecx,ecx
c0016488:	31 db                	xor    ebx,ebx
c001648a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001648e:	89 cd                	mov    ebp,ecx
c0016490:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016498:	f7 d5                	not    ebp
c001649a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00164a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00164a4:	01 d8                	add    eax,ebx
c00164a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164aa:	56                   	push   esi
c00164ab:	e8 b8 ff ff ff       	call   c0016468 <Video::getHeight()>
c00164b0:	59                   	pop    ecx
c00164b1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00164b5:	7e 70                	jle    c0016527 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00164b7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164bb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164bf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164ca:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00164d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164d5:	89 f8                	mov    eax,edi
c00164d7:	83 c0 20             	add    eax,0x20
c00164da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164de:	56                   	push   esi
c00164df:	e8 78 ff ff ff       	call   c001645c <Video::getWidth()>
c00164e4:	5a                   	pop    edx
c00164e5:	39 c7                	cmp    edi,eax
c00164e7:	7d 34                	jge    c001651d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00164e9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00164ee:	74 05                	je     c00164f5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00164f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00164f2:	55                   	push   ebp
c00164f3:	eb 0d                	jmp    c0016502 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00164f5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00164fa:	74 12                	je     c001650e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00164fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00164fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016502:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016506:	57                   	push   edi
c0016507:	56                   	push   esi
c0016508:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016512:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016516:	47                   	inc    edi
c0016517:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001651b:	75 c1                	jne    c00164de <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001651d:	43                   	inc    ebx
c001651e:	83 fb 20             	cmp    ebx,0x20
c0016521:	0f 85 79 ff ff ff    	jne    c00164a0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016527:	83 c4 2c             	add    esp,0x2c
c001652a:	5b                   	pop    ebx
c001652b:	5e                   	pop    esi
c001652c:	5f                   	pop    edi
c001652d:	5d                   	pop    ebp
c001652e:	c3                   	ret    
c001652f:	90                   	nop

c0016530 <ACPI::close(int, int, void*)>:
c0016530:	83 ec 1c             	sub    esp,0x1c
c0016533:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001653b:	74 0a                	je     c0016547 <ACPI::close(int, int, void*)+0x17>
c001653d:	b8 00 00 00 00       	mov    eax,0x0
c0016542:	e9 9a 00 00 00       	jmp    c00165e1 <ACPI::close(int, int, void*)+0xb1>
c0016547:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001654c:	75 37                	jne    c0016585 <ACPI::close(int, int, void*)+0x55>
c001654e:	83 ec 0c             	sub    esp,0xc
c0016551:	68 70 7a 02 c0       	push   0xc0027a70
c0016556:	e8 ec bc ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001655b:	83 c4 10             	add    esp,0x10
c001655e:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016563:	85 c0                	test   eax,eax
c0016565:	74 07                	je     c001656e <ACPI::close(int, int, void*)+0x3e>
c0016567:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001656c:	ff d0                	call   eax
c001656e:	83 ec 0c             	sub    esp,0xc
c0016571:	68 24 7b 02 c0       	push   0xc0027b24
c0016576:	e8 6a 24 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c001657b:	83 c4 10             	add    esp,0x10
c001657e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016583:	eb 5c                	jmp    c00165e1 <ACPI::close(int, int, void*)+0xb1>
c0016585:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001658a:	75 50                	jne    c00165dc <ACPI::close(int, int, void*)+0xac>
c001658c:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c0016591:	85 c0                	test   eax,eax
c0016593:	74 07                	je     c001659c <ACPI::close(int, int, void*)+0x6c>
c0016595:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c001659a:	ff d0                	call   eax
c001659c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00165a1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00165a6:	83 e0 02             	and    eax,0x2
c00165a9:	74 1c                	je     c00165c7 <ACPI::close(int, int, void*)+0x97>
c00165ab:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00165b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165b6:	89 c2                	mov    edx,eax
c00165b8:	ec                   	in     al,dx
c00165b9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165bd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165c5:	eb da                	jmp    c00165a1 <ACPI::close(int, int, void*)+0x71>
c00165c7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165ce:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00165d3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00165d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165db:	ee                   	out    dx,al
c00165dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165e1:	83 c4 1c             	add    esp,0x1c
c00165e4:	c3                   	ret    

c00165e5 <findRSDP()>:
c00165e5:	83 ec 1c             	sub    esp,0x1c
c00165e8:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00165ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00165f3:	83 e0 04             	and    eax,0x4
c00165f6:	84 c0                	test   al,al
c00165f8:	75 07                	jne    c0016601 <findRSDP()+0x1c>
c00165fa:	b8 00 00 00 00       	mov    eax,0x0
c00165ff:	eb 6a                	jmp    c001666b <findRSDP()+0x86>
c0016601:	a1 50 a4 02 c0       	mov    eax,ds:0xc002a450
c0016606:	3d ff 07 00 00       	cmp    eax,0x7ff
c001660b:	7f 1b                	jg     c0016628 <findRSDP()+0x43>
c001660d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016612:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016618:	83 e2 fb             	and    edx,0xfffffffb
c001661b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016621:	b8 00 00 00 00       	mov    eax,0x0
c0016626:	eb 43                	jmp    c001666b <findRSDP()+0x86>
c0016628:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016630:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016638:	77 2c                	ja     c0016666 <findRSDP()+0x81>
c001663a:	83 ec 04             	sub    esp,0x4
c001663d:	6a 08                	push   0x8
c001663f:	68 7d 7a 02 c0       	push   0xc0027a7d
c0016644:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016648:	e8 df 9f fe ff       	call   c000062c <memcmp>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	85 c0                	test   eax,eax
c0016652:	0f 94 c0             	sete   al
c0016655:	84 c0                	test   al,al
c0016657:	74 06                	je     c001665f <findRSDP()+0x7a>
c0016659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001665d:	eb 0c                	jmp    c001666b <findRSDP()+0x86>
c001665f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016664:	eb ca                	jmp    c0016630 <findRSDP()+0x4b>
c0016666:	b8 00 00 00 00       	mov    eax,0x0
c001666b:	83 c4 1c             	add    esp,0x1c
c001666e:	c3                   	ret    

c001666f <loadACPITables(unsigned char*)>:
c001666f:	56                   	push   esi
c0016670:	53                   	push   ebx
c0016671:	83 ec 44             	sub    esp,0x44
c0016674:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016679:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001667f:	83 e0 04             	and    eax,0x4
c0016682:	84 c0                	test   al,al
c0016684:	0f 84 05 02 00 00    	je     c001688f <loadACPITables(unsigned char*)+0x220>
c001668a:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c001668f:	84 c0                	test   al,al
c0016691:	74 75                	je     c0016708 <loadACPITables(unsigned char*)+0x99>
c0016693:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016697:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001669b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001669f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166a2:	83 e8 24             	sub    eax,0x24
c00166a5:	c1 e8 03             	shr    eax,0x3
c00166a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00166ac:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00166b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166b8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166bc:	0f 8d b2 00 00 00    	jge    c0016774 <loadACPITables(unsigned char*)+0x105>
c00166c2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166c6:	83 c0 24             	add    eax,0x24
c00166c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00166d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166d9:	c1 e0 03             	shl    eax,0x3
c00166dc:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00166e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00166e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00166e9:	89 c1                	mov    ecx,eax
c00166eb:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c00166f0:	8d 50 01             	lea    edx,[eax+0x1]
c00166f3:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c00166f9:	89 ca                	mov    edx,ecx
c00166fb:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c0016702:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016706:	eb ac                	jmp    c00166b4 <loadACPITables(unsigned char*)+0x45>
c0016708:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001670c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016714:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016717:	83 e8 24             	sub    eax,0x24
c001671a:	c1 e8 02             	shr    eax,0x2
c001671d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016721:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016729:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001672d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016731:	7d 41                	jge    c0016774 <loadACPITables(unsigned char*)+0x105>
c0016733:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016737:	83 c0 24             	add    eax,0x24
c001673a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001673e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016742:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016746:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001674a:	c1 e0 02             	shl    eax,0x2
c001674d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016751:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016755:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016757:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c001675c:	8d 50 01             	lea    edx,[eax+0x1]
c001675f:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c0016765:	89 ca                	mov    edx,ecx
c0016767:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c001676e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016772:	eb b5                	jmp    c0016729 <loadACPITables(unsigned char*)+0xba>
c0016774:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001677c:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c0016781:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016785:	0f 8d 05 01 00 00    	jge    c0016890 <loadACPITables(unsigned char*)+0x221>
c001678b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001678f:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c0016796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001679a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a6:	25 ff 0f 00 00       	and    eax,0xfff
c00167ab:	89 c6                	mov    esi,eax
c00167ad:	e8 53 ac ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c00167b2:	89 c3                	mov    ebx,eax
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	6a 01                	push   0x1
c00167b9:	e8 b7 aa ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c00167be:	83 c4 10             	add    esp,0x10
c00167c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167c5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	6a 01                	push   0x1
c00167d0:	6a 01                	push   0x1
c00167d2:	50                   	push   eax
c00167d3:	52                   	push   edx
c00167d4:	53                   	push   ebx
c00167d5:	e8 5a b4 ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167da:	83 c4 20             	add    esp,0x20
c00167dd:	09 f0                	or     eax,esi
c00167df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167e7:	c1 e0 03             	shl    eax,0x3
c00167ea:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c00167ef:	83 ec 04             	sub    esp,0x4
c00167f2:	6a 04                	push   0x4
c00167f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167f8:	50                   	push   eax
c00167f9:	e8 91 9e fe ff       	call   c000068f <memcpy>
c00167fe:	83 c4 10             	add    esp,0x10
c0016801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016805:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016808:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001680c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016810:	05 00 10 00 00       	add    eax,0x1000
c0016815:	c1 e8 0c             	shr    eax,0xc
c0016818:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001681c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016820:	89 04 24             	mov    DWORD PTR [esp],eax
c0016823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016827:	25 ff 0f 00 00       	and    eax,0xfff
c001682c:	89 c6                	mov    esi,eax
c001682e:	e8 d2 ab ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c0016833:	89 c3                	mov    ebx,eax
c0016835:	83 ec 0c             	sub    esp,0xc
c0016838:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001683c:	e8 34 aa ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c0016841:	83 c4 10             	add    esp,0x10
c0016844:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016848:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001684e:	83 ec 0c             	sub    esp,0xc
c0016851:	6a 01                	push   0x1
c0016853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016857:	50                   	push   eax
c0016858:	52                   	push   edx
c0016859:	53                   	push   ebx
c001685a:	e8 d5 b3 ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001685f:	83 c4 20             	add    esp,0x20
c0016862:	09 f0                	or     eax,esi
c0016864:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016868:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001686b:	83 ec 0c             	sub    esp,0xc
c001686e:	50                   	push   eax
c001686f:	e8 5b ad ff ff       	call   c00115cf <Virt::freeKernelVirtualPages(unsigned long)>
c0016874:	83 c4 10             	add    esp,0x10
c0016877:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001687b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001687f:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c0016886:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001688a:	e9 ed fe ff ff       	jmp    c001677c <loadACPITables(unsigned char*)+0x10d>
c001688f:	90                   	nop
c0016890:	83 c4 44             	add    esp,0x44
c0016893:	5b                   	pop    ebx
c0016894:	5e                   	pop    esi
c0016895:	c3                   	ret    

c0016896 <findRSDT(unsigned char*)>:
c0016896:	56                   	push   esi
c0016897:	53                   	push   ebx
c0016898:	83 ec 44             	sub    esp,0x44
c001689b:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00168a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168a6:	83 e0 04             	and    eax,0x4
c00168a9:	84 c0                	test   al,al
c00168ab:	75 0a                	jne    c00168b7 <findRSDT(unsigned char*)+0x21>
c00168ad:	b8 00 00 00 00       	mov    eax,0x0
c00168b2:	e9 f7 00 00 00       	jmp    c00169ae <findRSDT(unsigned char*)+0x118>
c00168b7:	83 ec 04             	sub    esp,0x4
c00168ba:	6a 24                	push   0x24
c00168bc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168c4:	50                   	push   eax
c00168c5:	e8 c5 9d fe ff       	call   c000068f <memcpy>
c00168ca:	83 c4 10             	add    esp,0x10
c00168cd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00168d1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00168d5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00168dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168e5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00168e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00168f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168f5:	25 ff 0f 00 00       	and    eax,0xfff
c00168fa:	89 c6                	mov    esi,eax
c00168fc:	e8 04 ab ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c0016901:	89 c3                	mov    ebx,eax
c0016903:	83 ec 0c             	sub    esp,0xc
c0016906:	6a 02                	push   0x2
c0016908:	e8 68 a9 ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016914:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001691a:	83 ec 0c             	sub    esp,0xc
c001691d:	6a 01                	push   0x1
c001691f:	6a 02                	push   0x2
c0016921:	50                   	push   eax
c0016922:	52                   	push   edx
c0016923:	53                   	push   ebx
c0016924:	e8 0b b3 ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016929:	83 c4 20             	add    esp,0x20
c001692c:	09 f0                	or     eax,esi
c001692e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016932:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016936:	25 ff 0f 00 00       	and    eax,0xfff
c001693b:	89 c6                	mov    esi,eax
c001693d:	e8 c3 aa ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c0016942:	89 c3                	mov    ebx,eax
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	6a 02                	push   0x2
c0016949:	e8 27 a9 ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c001694e:	83 c4 10             	add    esp,0x10
c0016951:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016955:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001695b:	83 ec 0c             	sub    esp,0xc
c001695e:	6a 01                	push   0x1
c0016960:	6a 02                	push   0x2
c0016962:	50                   	push   eax
c0016963:	52                   	push   edx
c0016964:	53                   	push   ebx
c0016965:	e8 ca b2 ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001696a:	83 c4 20             	add    esp,0x20
c001696d:	09 f0                	or     eax,esi
c001696f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016973:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016978:	75 11                	jne    c001698b <findRSDT(unsigned char*)+0xf5>
c001697a:	c6 05 a0 ac 02 c0 00 	mov    BYTE PTR ds:0xc002aca0,0x0
c0016981:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016985:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016989:	eb 1f                	jmp    c00169aa <findRSDT(unsigned char*)+0x114>
c001698b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016990:	75 11                	jne    c00169a3 <findRSDT(unsigned char*)+0x10d>
c0016992:	c6 05 a0 ac 02 c0 01 	mov    BYTE PTR ds:0xc002aca0,0x1
c0016999:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001699d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169a1:	eb 07                	jmp    c00169aa <findRSDT(unsigned char*)+0x114>
c00169a3:	b8 00 00 00 00       	mov    eax,0x0
c00169a8:	eb 04                	jmp    c00169ae <findRSDT(unsigned char*)+0x118>
c00169aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169ae:	83 c4 44             	add    esp,0x44
c00169b1:	5b                   	pop    ebx
c00169b2:	5e                   	pop    esi
c00169b3:	c3                   	ret    

c00169b4 <findDataTable(unsigned char*, char*)>:
c00169b4:	83 ec 1c             	sub    esp,0x1c
c00169b7:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00169bc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169c2:	83 e0 04             	and    eax,0x4
c00169c5:	84 c0                	test   al,al
c00169c7:	75 07                	jne    c00169d0 <findDataTable(unsigned char*, char*)+0x1c>
c00169c9:	b8 00 00 00 00       	mov    eax,0x0
c00169ce:	eb 7c                	jmp    c0016a4c <findDataTable(unsigned char*, char*)+0x98>
c00169d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00169d8:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c00169dd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00169e1:	7d 3a                	jge    c0016a1d <findDataTable(unsigned char*, char*)+0x69>
c00169e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169e7:	c1 e0 03             	shl    eax,0x3
c00169ea:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c00169ef:	83 ec 04             	sub    esp,0x4
c00169f2:	6a 04                	push   0x4
c00169f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169f8:	50                   	push   eax
c00169f9:	e8 2e 9c fe ff       	call   c000062c <memcmp>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	85 c0                	test   eax,eax
c0016a03:	0f 94 c0             	sete   al
c0016a06:	84 c0                	test   al,al
c0016a08:	74 0d                	je     c0016a17 <findDataTable(unsigned char*, char*)+0x63>
c0016a0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a0e:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c0016a15:	eb 35                	jmp    c0016a4c <findDataTable(unsigned char*, char*)+0x98>
c0016a17:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a1b:	eb bb                	jmp    c00169d8 <findDataTable(unsigned char*, char*)+0x24>
c0016a1d:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c0016a22:	84 c0                	test   al,al
c0016a24:	74 07                	je     c0016a2d <findDataTable(unsigned char*, char*)+0x79>
c0016a26:	b8 58 00 00 00       	mov    eax,0x58
c0016a2b:	eb 05                	jmp    c0016a32 <findDataTable(unsigned char*, char*)+0x7e>
c0016a2d:	b8 52 00 00 00       	mov    eax,0x52
c0016a32:	83 ec 04             	sub    esp,0x4
c0016a35:	50                   	push   eax
c0016a36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a3a:	68 48 7b 02 c0       	push   0xc0027b48
c0016a3f:	e8 03 b8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	b8 00 00 00 00       	mov    eax,0x0
c0016a4c:	83 c4 1c             	add    esp,0x1c
c0016a4f:	c3                   	ret    

c0016a50 <scanMADT()>:
c0016a50:	83 ec 2c             	sub    esp,0x2c
c0016a53:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a58:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a5e:	83 e0 04             	and    eax,0x4
c0016a61:	84 c0                	test   al,al
c0016a63:	0f 84 73 03 00 00    	je     c0016ddc <scanMADT()+0x38c>
c0016a69:	e8 77 fb ff ff       	call   c00165e5 <findRSDP()>
c0016a6e:	a3 ac ac 02 c0       	mov    ds:0xc002acac,eax
c0016a73:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016a78:	85 c0                	test   eax,eax
c0016a7a:	75 19                	jne    c0016a95 <scanMADT()+0x45>
c0016a7c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a81:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a87:	83 e2 fb             	and    edx,0xfffffffb
c0016a8a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a90:	e9 4b 03 00 00       	jmp    c0016de0 <scanMADT()+0x390>
c0016a95:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016a9a:	83 ec 0c             	sub    esp,0xc
c0016a9d:	50                   	push   eax
c0016a9e:	e8 f3 fd ff ff       	call   c0016896 <findRSDT(unsigned char*)>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	a3 a8 ac 02 c0       	mov    ds:0xc002aca8,eax
c0016aab:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016ab0:	85 c0                	test   eax,eax
c0016ab2:	75 19                	jne    c0016acd <scanMADT()+0x7d>
c0016ab4:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016ab9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016abf:	83 e2 fb             	and    edx,0xfffffffb
c0016ac2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ac8:	e9 13 03 00 00       	jmp    c0016de0 <scanMADT()+0x390>
c0016acd:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016ad2:	83 ec 0c             	sub    esp,0xc
c0016ad5:	50                   	push   eax
c0016ad6:	e8 94 fb ff ff       	call   c001666f <loadACPITables(unsigned char*)>
c0016adb:	83 c4 10             	add    esp,0x10
c0016ade:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016ae3:	83 ec 08             	sub    esp,0x8
c0016ae6:	68 86 7a 02 c0       	push   0xc0027a86
c0016aeb:	50                   	push   eax
c0016aec:	e8 c3 fe ff ff       	call   c00169b4 <findDataTable(unsigned char*, char*)>
c0016af1:	83 c4 10             	add    esp,0x10
c0016af4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016af8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016afd:	75 19                	jne    c0016b18 <scanMADT()+0xc8>
c0016aff:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016b04:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016b0a:	83 e2 fe             	and    edx,0xfffffffe
c0016b0d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016b13:	e9 c8 02 00 00       	jmp    c0016de0 <scanMADT()+0x390>
c0016b18:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b27:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016b2b:	0f 87 af 02 00 00    	ja     c0016de0 <scanMADT()+0x390>
c0016b31:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016b39:	0f 87 a1 02 00 00    	ja     c0016de0 <scanMADT()+0x390>
c0016b3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b4b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b52:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b56:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b5a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b62:	8d 50 01             	lea    edx,[eax+0x1]
c0016b65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b6d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b71:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016b75:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016b7a:	0f 86 5f 02 00 00    	jbe    c0016ddf <scanMADT()+0x38f>
c0016b80:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016b85:	75 57                	jne    c0016bde <scanMADT()+0x18e>
c0016b87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b8b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b92:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016b98:	0f b6 d2             	movzx  edx,dl
c0016b9b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016b9f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016ba3:	88 82 20 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd51e0],al
c0016ba9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bad:	8d 50 01             	lea    edx,[eax+0x1]
c0016bb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bb4:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016bba:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016bbd:	88 0d e0 ad 02 c0    	mov    BYTE PTR ds:0xc002ade0,cl
c0016bc3:	0f b6 d2             	movzx  edx,dl
c0016bc6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bce:	88 82 00 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd5200],al
c0016bd4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016bd9:	e9 ea 01 00 00       	jmp    c0016dc8 <scanMADT()+0x378>
c0016bde:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016be3:	0f 85 14 01 00 00    	jne    c0016cfd <scanMADT()+0x2ad>
c0016be9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bed:	8d 50 01             	lea    edx,[eax+0x1]
c0016bf0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bf4:	8a 15 b0 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002acb0
c0016bfa:	0f b6 d2             	movzx  edx,dl
c0016bfd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c01:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c05:	88 82 c0 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd5340],al
c0016c0b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016c0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c17:	01 d0                	add    eax,edx
c0016c19:	83 c0 2c             	add    eax,0x2c
c0016c1c:	8a 00                	mov    al,BYTE PTR [eax]
c0016c1e:	0f b6 d0             	movzx  edx,al
c0016c21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c25:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c2c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c30:	0f b6 c0             	movzx  eax,al
c0016c33:	c1 e0 08             	shl    eax,0x8
c0016c36:	89 d1                	mov    ecx,edx
c0016c38:	09 c1                	or     ecx,eax
c0016c3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c3e:	8d 50 02             	lea    edx,[eax+0x2]
c0016c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c45:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c49:	0f b6 c0             	movzx  eax,al
c0016c4c:	c1 e0 10             	shl    eax,0x10
c0016c4f:	09 c1                	or     ecx,eax
c0016c51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c55:	8d 50 03             	lea    edx,[eax+0x3]
c0016c58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c5c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c60:	0f b6 c0             	movzx  eax,al
c0016c63:	c1 e0 18             	shl    eax,0x18
c0016c66:	09 c1                	or     ecx,eax
c0016c68:	89 ca                	mov    edx,ecx
c0016c6a:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016c6f:	0f b6 c0             	movzx  eax,al
c0016c72:	89 14 85 e0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5320],edx
c0016c79:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016c7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c86:	01 d0                	add    eax,edx
c0016c88:	83 c0 2c             	add    eax,0x2c
c0016c8b:	8a 00                	mov    al,BYTE PTR [eax]
c0016c8d:	0f b6 d0             	movzx  edx,al
c0016c90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c94:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c9b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c9f:	0f b6 c0             	movzx  eax,al
c0016ca2:	c1 e0 08             	shl    eax,0x8
c0016ca5:	89 d1                	mov    ecx,edx
c0016ca7:	09 c1                	or     ecx,eax
c0016ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cad:	8d 50 02             	lea    edx,[eax+0x2]
c0016cb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cb4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cb8:	0f b6 c0             	movzx  eax,al
c0016cbb:	c1 e0 10             	shl    eax,0x10
c0016cbe:	09 c1                	or     ecx,eax
c0016cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cc4:	8d 50 03             	lea    edx,[eax+0x3]
c0016cc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ccb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016ccf:	0f b6 c0             	movzx  eax,al
c0016cd2:	c1 e0 18             	shl    eax,0x18
c0016cd5:	09 c1                	or     ecx,eax
c0016cd7:	89 ca                	mov    edx,ecx
c0016cd9:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016cde:	0f b6 c0             	movzx  eax,al
c0016ce1:	89 14 85 60 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd52a0],edx
c0016ce8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016ced:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016cf2:	40                   	inc    eax
c0016cf3:	a2 b0 ac 02 c0       	mov    ds:0xc002acb0,al
c0016cf8:	e9 cb 00 00 00       	jmp    c0016dc8 <scanMADT()+0x378>
c0016cfd:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016d02:	0f 85 a6 00 00 00    	jne    c0016dae <scanMADT()+0x35e>
c0016d08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d0c:	8d 50 01             	lea    edx,[eax+0x1]
c0016d0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d17:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d1b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d23:	8d 50 01             	lea    edx,[eax+0x1]
c0016d26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d2e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d32:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d3e:	01 d0                	add    eax,edx
c0016d40:	83 c0 2c             	add    eax,0x2c
c0016d43:	8a 00                	mov    al,BYTE PTR [eax]
c0016d45:	0f b6 d0             	movzx  edx,al
c0016d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d4c:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d53:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d57:	0f b6 c0             	movzx  eax,al
c0016d5a:	c1 e0 08             	shl    eax,0x8
c0016d5d:	89 d1                	mov    ecx,edx
c0016d5f:	09 c1                	or     ecx,eax
c0016d61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d65:	8d 50 02             	lea    edx,[eax+0x2]
c0016d68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d6c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d70:	0f b6 c0             	movzx  eax,al
c0016d73:	c1 e0 10             	shl    eax,0x10
c0016d76:	09 c1                	or     ecx,eax
c0016d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d7c:	8d 50 03             	lea    edx,[eax+0x3]
c0016d7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d83:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d87:	0f b6 c0             	movzx  eax,al
c0016d8a:	c1 e0 18             	shl    eax,0x18
c0016d8d:	09 c8                	or     eax,ecx
c0016d8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d93:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016d98:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016d9d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016da2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016da6:	88 90 e0 96 02 c0    	mov    BYTE PTR [eax-0x3ffd6920],dl
c0016dac:	eb 1a                	jmp    c0016dc8 <scanMADT()+0x378>
c0016dae:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016db3:	75 07                	jne    c0016dbc <scanMADT()+0x36c>
c0016db5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016dba:	eb 0c                	jmp    c0016dc8 <scanMADT()+0x378>
c0016dbc:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016dc1:	75 05                	jne    c0016dc8 <scanMADT()+0x378>
c0016dc3:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016dc8:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016dcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dd1:	01 d0                	add    eax,edx
c0016dd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dd7:	e9 44 fd ff ff       	jmp    c0016b20 <scanMADT()+0xd0>
c0016ddc:	90                   	nop
c0016ddd:	eb 01                	jmp    c0016de0 <scanMADT()+0x390>
c0016ddf:	90                   	nop
c0016de0:	83 c4 2c             	add    esp,0x2c
c0016de3:	c3                   	ret    

c0016de4 <ACPI::ACPI()>:
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016deb:	83 ec 08             	sub    esp,0x8
c0016dee:	68 8b 7a 02 c0       	push   0xc0027a8b
c0016df3:	50                   	push   eax
c0016df4:	e8 49 ca ff ff       	call   c0013842 <Device::Device(char const*)>
c0016df9:	83 c4 10             	add    esp,0x10
c0016dfc:	ba 14 7c 02 c0       	mov    edx,0xc0027c14
c0016e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e05:	89 10                	mov    DWORD PTR [eax],edx
c0016e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e0b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e16:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e24:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e32:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016e39:	e8 12 fc ff ff       	call   c0016a50 <scanMADT()>
c0016e3e:	90                   	nop
c0016e3f:	83 c4 0c             	add    esp,0xc
c0016e42:	c3                   	ret    
c0016e43:	90                   	nop

c0016e44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016e44:	83 ec 2c             	sub    esp,0x2c
c0016e47:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e4f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016e53:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016e57:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016e5c:	88 d0                	mov    al,dl
c0016e5e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016e62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016e67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016e6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e73:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016e79:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016e7d:	0f 8d 97 00 00 00    	jge    c0016f1a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016e83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e8b:	83 c2 2a             	add    edx,0x2a
c0016e8e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016e92:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016e97:	75 78                	jne    c0016f11 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016e99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ea1:	83 c2 2a             	add    edx,0x2a
c0016ea4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016ea8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016eac:	75 63                	jne    c0016f11 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016eb3:	74 3a                	je     c0016eef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016eb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eb9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ebd:	83 c2 2a             	add    edx,0x2a
c0016ec0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016ec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ec8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ecb:	39 c2                	cmp    edx,eax
c0016ecd:	74 10                	je     c0016edf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016ecf:	83 ec 0c             	sub    esp,0xc
c0016ed2:	68 78 7b 02 c0       	push   0xc0027b78
c0016ed7:	e8 09 1b 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	83 ec 0c             	sub    esp,0xc
c0016ee2:	68 90 7a 02 c0       	push   0xc0027a90
c0016ee7:	e8 f9 1a 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0016eec:	83 c4 10             	add    esp,0x10
c0016eef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016ef3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ef7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016efb:	83 c2 2a             	add    edx,0x2a
c0016efe:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016f02:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f04:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016f07:	89 01                	mov    DWORD PTR [ecx],eax
c0016f09:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f0c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016f11:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016f15:	e9 55 ff ff ff       	jmp    c0016e6f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016f1a:	90                   	nop
c0016f1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f1f:	83 c4 2c             	add    esp,0x2c
c0016f22:	c2 04 00             	ret    0x4
c0016f25:	90                   	nop

c0016f26 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016f26:	56                   	push   esi
c0016f27:	53                   	push   ebx
c0016f28:	83 ec 14             	sub    esp,0x14
c0016f2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f2f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016f33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f37:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f3c:	88 c8                	mov    al,cl
c0016f3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f42:	88 d0                	mov    al,dl
c0016f44:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4c:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f56:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016f5c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016f61:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f66:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016f6b:	83 ec 04             	sub    esp,0x4
c0016f6e:	56                   	push   esi
c0016f6f:	53                   	push   ebx
c0016f70:	51                   	push   ecx
c0016f71:	52                   	push   edx
c0016f72:	50                   	push   eax
c0016f73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f77:	68 a8 7b 02 c0       	push   0xc0027ba8
c0016f7c:	e8 c6 b2 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0016f81:	83 c4 20             	add    esp,0x20
c0016f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f88:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f92:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016f95:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016f99:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016fa7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fab:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fb2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbb:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fc1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016fc5:	8d 48 01             	lea    ecx,[eax+0x1]
c0016fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcc:	83 c2 2a             	add    edx,0x2a
c0016fcf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0016fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016fe4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016fe8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0016fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff0:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0016ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffd:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017007:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001700d:	3d 00 08 00 00       	cmp    eax,0x800
c0017012:	75 10                	jne    c0017024 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017014:	83 ec 0c             	sub    esp,0xc
c0017017:	68 9f 7a 02 c0       	push   0xc0027a9f
c001701c:	e8 c4 19 00 00       	call   c00189e5 <Krnl::panic(char const*)>
c0017021:	83 c4 10             	add    esp,0x10
c0017024:	90                   	nop
c0017025:	83 c4 14             	add    esp,0x14
c0017028:	5b                   	pop    ebx
c0017029:	5e                   	pop    esi
c001702a:	c3                   	ret    
c001702b:	90                   	nop

c001702c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001702c:	b8 00 00 00 00       	mov    eax,0x0
c0017031:	c3                   	ret    

c0017032 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017032:	83 ec 1c             	sub    esp,0x1c
c0017035:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017039:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001703c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017040:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017045:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001704a:	83 ec 08             	sub    esp,0x8
c001704d:	52                   	push   edx
c001704e:	50                   	push   eax
c001704f:	e8 fa 76 ff ff       	call   c000e74e <Computer::readCMOS(unsigned char)>
c0017054:	83 c4 10             	add    esp,0x10
c0017057:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001705b:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017060:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017065:	83 ec 04             	sub    esp,0x4
c0017068:	6a 01                	push   0x1
c001706a:	52                   	push   edx
c001706b:	50                   	push   eax
c001706c:	e8 f3 77 ff ff       	call   c000e864 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	90                   	nop
c0017075:	83 c4 1c             	add    esp,0x1c
c0017078:	c3                   	ret    
c0017079:	90                   	nop

c001707a <ACPI::open(int, int, void*)>:
c001707a:	53                   	push   ebx
c001707b:	83 ec 18             	sub    esp,0x18
c001707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017082:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017089:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708d:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017093:	84 c0                	test   al,al
c0017095:	74 60                	je     c00170f7 <ACPI::open(int, int, void*)+0x7d>
c0017097:	83 ec 0c             	sub    esp,0xc
c001709a:	68 58 01 00 00       	push   0x158
c001709f:	e8 b4 b0 ff ff       	call   c0012158 <operator new(unsigned long)>
c00170a4:	83 c4 10             	add    esp,0x10
c00170a7:	89 c3                	mov    ebx,eax
c00170a9:	83 ec 0c             	sub    esp,0xc
c00170ac:	53                   	push   ebx
c00170ad:	e8 12 90 00 00       	call   c00200c4 <PCI::PCI()>
c00170b2:	83 c4 10             	add    esp,0x10
c00170b5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bd:	83 ec 08             	sub    esp,0x8
c00170c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170c4:	50                   	push   eax
c00170c5:	e8 88 c5 ff ff       	call   c0013652 <Device::addChild(Device*)>
c00170ca:	83 c4 10             	add    esp,0x10
c00170cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00170d3:	83 c0 08             	add    eax,0x8
c00170d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00170d8:	6a 00                	push   0x0
c00170da:	6a 00                	push   0x0
c00170dc:	6a 00                	push   0x0
c00170de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170e2:	ff d0                	call   eax
c00170e4:	83 c4 10             	add    esp,0x10
c00170e7:	83 ec 0c             	sub    esp,0xc
c00170ea:	68 bc 7a 02 c0       	push   0xc0027abc
c00170ef:	e8 53 b1 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00170f4:	83 c4 10             	add    esp,0x10
c00170f7:	83 ec 0c             	sub    esp,0xc
c00170fa:	68 c7 7a 02 c0       	push   0xc0027ac7
c00170ff:	e8 82 37 00 00       	call   c001a886 <Thr::loadKernelSymbolTable(char const*)>
c0017104:	83 c4 10             	add    esp,0x10
c0017107:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c001710d:	83 ec 08             	sub    esp,0x8
c0017110:	6a 01                	push   0x1
c0017112:	68 e5 7a 02 c0       	push   0xc0027ae5
c0017117:	e8 4c 42 00 00       	call   c001b368 <Thr::loadDLL(char const*, bool)>
c001711c:	83 c4 10             	add    esp,0x10
c001711f:	83 ec 08             	sub    esp,0x8
c0017122:	53                   	push   ebx
c0017123:	50                   	push   eax
c0017124:	e8 05 44 00 00       	call   c001b52e <Thr::executeDLL(unsigned long, void*)>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017131:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017137:	83 e0 04             	and    eax,0x4
c001713a:	84 c0                	test   al,al
c001713c:	0f 84 cf 00 00 00    	je     c0017211 <ACPI::open(int, int, void*)+0x197>
c0017142:	83 ec 0c             	sub    esp,0xc
c0017145:	68 14 01 00 00       	push   0x114
c001714a:	e8 09 b0 ff ff       	call   c0012158 <operator new(unsigned long)>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	89 c3                	mov    ebx,eax
c0017154:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0017159:	83 ec 04             	sub    esp,0x4
c001715c:	50                   	push   eax
c001715d:	68 02 7b 02 c0       	push   0xc0027b02
c0017162:	53                   	push   ebx
c0017163:	e8 0e b6 ff ff       	call   c0012776 <File::File(char const*, Process*)>
c0017168:	83 c4 10             	add    esp,0x10
c001716b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001716f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017174:	74 17                	je     c001718d <ACPI::open(int, int, void*)+0x113>
c0017176:	83 ec 0c             	sub    esp,0xc
c0017179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001717d:	e8 c6 b8 ff ff       	call   c0012a48 <File::exists()>
c0017182:	83 c4 10             	add    esp,0x10
c0017185:	84 c0                	test   al,al
c0017187:	74 04                	je     c001718d <ACPI::open(int, int, void*)+0x113>
c0017189:	b0 01                	mov    al,0x1
c001718b:	eb 02                	jmp    c001718f <ACPI::open(int, int, void*)+0x115>
c001718d:	b0 00                	mov    al,0x0
c001718f:	84 c0                	test   al,al
c0017191:	74 25                	je     c00171b8 <ACPI::open(int, int, void*)+0x13e>
c0017193:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0017199:	83 ec 08             	sub    esp,0x8
c001719c:	6a 01                	push   0x1
c001719e:	68 02 7b 02 c0       	push   0xc0027b02
c00171a3:	e8 c0 41 00 00       	call   c001b368 <Thr::loadDLL(char const*, bool)>
c00171a8:	83 c4 10             	add    esp,0x10
c00171ab:	83 ec 08             	sub    esp,0x8
c00171ae:	53                   	push   ebx
c00171af:	50                   	push   eax
c00171b0:	e8 79 43 00 00       	call   c001b52e <Thr::executeDLL(unsigned long, void*)>
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171bd:	74 1e                	je     c00171dd <ACPI::open(int, int, void*)+0x163>
c00171bf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171c4:	74 17                	je     c00171dd <ACPI::open(int, int, void*)+0x163>
c00171c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00171cc:	83 c0 08             	add    eax,0x8
c00171cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00171d1:	83 ec 0c             	sub    esp,0xc
c00171d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171d8:	ff d0                	call   eax
c00171da:	83 c4 10             	add    esp,0x10
c00171dd:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c00171e2:	83 ec 08             	sub    esp,0x8
c00171e5:	68 1f 7b 02 c0       	push   0xc0027b1f
c00171ea:	50                   	push   eax
c00171eb:	e8 c4 f7 ff ff       	call   c00169b4 <findDataTable(unsigned char*, char*)>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171f7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00171fc:	74 13                	je     c0017211 <ACPI::open(int, int, void*)+0x197>
c00171fe:	83 ec 08             	sub    esp,0x8
c0017201:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017209:	e8 24 fe ff ff       	call   c0017032 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001720e:	83 c4 10             	add    esp,0x10
c0017211:	b8 00 00 00 00       	mov    eax,0x0
c0017216:	83 c4 18             	add    esp,0x18
c0017219:	5b                   	pop    ebx
c001721a:	c3                   	ret    
c001721b:	90                   	nop

c001721c <ACPI::sleep()>:
c001721c:	83 ec 0c             	sub    esp,0xc
c001721f:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c0017224:	85 c0                	test   eax,eax
c0017226:	74 07                	je     c001722f <ACPI::sleep()+0x13>
c0017228:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c001722d:	ff d0                	call   eax
c001722f:	90                   	nop
c0017230:	83 c4 0c             	add    esp,0xc
c0017233:	c3                   	ret    

c0017234 <CPU::close(int, int, void*)>:
c0017234:	31 c0                	xor    eax,eax
c0017236:	c3                   	ret    
c0017237:	90                   	nop

c0017238 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017238:	55                   	push   ebp
c0017239:	57                   	push   edi
c001723a:	56                   	push   esi
c001723b:	53                   	push   ebx
c001723c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017240:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017244:	89 ce                	mov    esi,ecx
c0017246:	89 d5                	mov    ebp,edx
c0017248:	80 f9 04             	cmp    cl,0x4
c001724b:	75 28                	jne    c0017275 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001724d:	8d 42 f9             	lea    eax,[edx-0x7]
c0017250:	3c 03                	cmp    al,0x3
c0017252:	0f 86 63 01 00 00    	jbe    c00173bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017258:	80 fa 03             	cmp    dl,0x3
c001725b:	0f 84 5a 01 00 00    	je     c00173bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017261:	8d 7a f2             	lea    edi,[edx-0xe]
c0017264:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017269:	89 fb                	mov    ebx,edi
c001726b:	80 fb 01             	cmp    bl,0x1
c001726e:	77 4e                	ja     c00172be <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017270:	e9 52 01 00 00       	jmp    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017275:	80 f9 05             	cmp    cl,0x5
c0017278:	75 4d                	jne    c00172c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001727a:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c001727f:	80 fa 03             	cmp    dl,0x3
c0017282:	0f 86 3f 01 00 00    	jbe    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017288:	8d 7a fa             	lea    edi,[edx-0x6]
c001728b:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c0017290:	89 fb                	mov    ebx,edi
c0017292:	80 fb 01             	cmp    bl,0x1
c0017295:	0f 86 2c 01 00 00    	jbe    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001729b:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00172a0:	80 fa 08             	cmp    dl,0x8
c00172a3:	0f 84 1e 01 00 00    	je     c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172a9:	89 d7                	mov    edi,edx
c00172ab:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c00172b0:	83 e7 fb             	and    edi,0xfffffffb
c00172b3:	89 fb                	mov    ebx,edi
c00172b5:	80 fb 09             	cmp    bl,0x9
c00172b8:	0f 84 09 01 00 00    	je     c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172be:	31 c0                	xor    eax,eax
c00172c0:	89 eb                	mov    ebx,ebp
c00172c2:	0f b6 fb             	movzx  edi,bl
c00172c5:	eb 30                	jmp    c00172f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00172c7:	31 c0                	xor    eax,eax
c00172c9:	80 f9 06             	cmp    cl,0x6
c00172cc:	75 f2                	jne    c00172c0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172ce:	80 fa 0a             	cmp    dl,0xa
c00172d1:	77 ed                	ja     c00172c0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172d3:	bf de 05 00 00       	mov    edi,0x5de
c00172d8:	0f a3 d7             	bt     edi,edx
c00172db:	73 e3                	jae    c00172c0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172dd:	b8 00 99 02 c0       	mov    eax,0xc0029900
c00172e2:	e9 e0 00 00 00       	jmp    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172e7:	39 c7                	cmp    edi,eax
c00172e9:	0f 84 d3 00 00 00    	je     c00173c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00172ef:	40                   	inc    eax
c00172f0:	3d d0 00 00 00       	cmp    eax,0xd0
c00172f5:	74 09                	je     c0017300 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00172f7:	89 f3                	mov    ebx,esi
c00172f9:	80 fb 0f             	cmp    bl,0xf
c00172fc:	75 f1                	jne    c00172ef <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00172fe:	eb e7                	jmp    c00172e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017300:	80 f9 10             	cmp    cl,0x10
c0017303:	75 14                	jne    c0017319 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017305:	8d 42 fc             	lea    eax,[edx-0x4]
c0017308:	83 e0 fb             	and    eax,0xfffffffb
c001730b:	3c 02                	cmp    al,0x2
c001730d:	76 34                	jbe    c0017343 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001730f:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017314:	80 fa 02             	cmp    dl,0x2
c0017317:	eb 24                	jmp    c001733d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017319:	80 f9 11             	cmp    cl,0x11
c001731c:	75 13                	jne    c0017331 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001731e:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017323:	80 fa 03             	cmp    dl,0x3
c0017326:	0f 85 9b 00 00 00    	jne    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001732c:	e9 91 00 00 00       	jmp    c00173c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017331:	80 f9 12             	cmp    cl,0x12
c0017334:	75 14                	jne    c001734a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017336:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001733b:	fe ca                	dec    dl
c001733d:	0f 85 84 00 00 00    	jne    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017343:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0017348:	eb 7d                	jmp    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001734a:	80 f9 14             	cmp    cl,0x14
c001734d:	75 12                	jne    c0017361 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001734f:	4a                   	dec    edx
c0017350:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017355:	80 fa 01             	cmp    dl,0x1
c0017358:	77 6d                	ja     c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001735a:	b8 30 99 02 c0       	mov    eax,0xc0029930
c001735f:	eb 66                	jmp    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017361:	80 f9 15             	cmp    cl,0x15
c0017364:	75 31                	jne    c0017397 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017366:	b8 40 99 02 c0       	mov    eax,0xc0029940
c001736b:	80 fa 01             	cmp    dl,0x1
c001736e:	74 57                	je     c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017370:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017375:	80 fa 13             	cmp    dl,0x13
c0017378:	76 0c                	jbe    c0017386 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001737a:	80 fa 30             	cmp    dl,0x30
c001737d:	75 48                	jne    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001737f:	b8 60 99 02 c0       	mov    eax,0xc0029960
c0017384:	eb 41                	jmp    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017386:	b9 04 00 09 00       	mov    ecx,0x90004
c001738b:	0f a3 d1             	bt     ecx,edx
c001738e:	73 37                	jae    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017390:	b8 50 99 02 c0       	mov    eax,0xc0029950
c0017395:	eb 30                	jmp    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017397:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001739c:	80 f9 16             	cmp    cl,0x16
c001739f:	75 26                	jne    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173a1:	b8 70 99 02 c0       	mov    eax,0xc0029970
c00173a6:	84 d2                	test   dl,dl
c00173a8:	74 1d                	je     c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173aa:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c00173af:	80 fa 30             	cmp    dl,0x30
c00173b2:	75 13                	jne    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173b4:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00173b9:	eb 0c                	jmp    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173bb:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c00173c0:	eb 05                	jmp    c00173c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173c2:	b8 10 99 02 c0       	mov    eax,0xc0029910
c00173c7:	5b                   	pop    ebx
c00173c8:	5e                   	pop    esi
c00173c9:	5f                   	pop    edi
c00173ca:	5d                   	pop    ebp
c00173cb:	c3                   	ret    

c00173cc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00173cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00173d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173d4:	80 f9 04             	cmp    cl,0x4
c00173d7:	75 6b                	jne    c0017444 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00173d9:	b8 00 97 02 c0       	mov    eax,0xc0029700
c00173de:	80 fa 01             	cmp    dl,0x1
c00173e1:	0f 86 92 02 00 00    	jbe    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00173e7:	b8 10 97 02 c0       	mov    eax,0xc0029710
c00173ec:	80 fa 02             	cmp    dl,0x2
c00173ef:	0f 84 84 02 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00173f5:	b8 20 97 02 c0       	mov    eax,0xc0029720
c00173fa:	80 fa 03             	cmp    dl,0x3
c00173fd:	0f 84 76 02 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017403:	b8 30 97 02 c0       	mov    eax,0xc0029730
c0017408:	80 fa 04             	cmp    dl,0x4
c001740b:	0f 84 68 02 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017411:	b8 40 97 02 c0       	mov    eax,0xc0029740
c0017416:	80 fa 05             	cmp    dl,0x5
c0017419:	0f 84 5a 02 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001741f:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0017424:	80 fa 07             	cmp    dl,0x7
c0017427:	0f 84 4c 02 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001742d:	83 ea 08             	sub    edx,0x8
c0017430:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017435:	80 fa 01             	cmp    dl,0x1
c0017438:	0f 87 3b 02 00 00    	ja     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001743e:	b8 50 97 02 c0       	mov    eax,0xc0029750
c0017443:	c3                   	ret    
c0017444:	80 f9 05             	cmp    cl,0x5
c0017447:	75 45                	jne    c001748e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017449:	8d 4a ff             	lea    ecx,[edx-0x1]
c001744c:	b8 60 97 02 c0       	mov    eax,0xc0029760
c0017451:	80 f9 02             	cmp    cl,0x2
c0017454:	0f 86 1f 02 00 00    	jbe    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001745a:	80 fa 04             	cmp    dl,0x4
c001745d:	0f 84 f3 01 00 00    	je     c0017656 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017463:	80 fa 07             	cmp    dl,0x7
c0017466:	0f 84 0d 02 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001746c:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017471:	80 fa 08             	cmp    dl,0x8
c0017474:	0f 84 ff 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001747a:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001747f:	80 fa 09             	cmp    dl,0x9
c0017482:	0f 85 f1 01 00 00    	jne    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017488:	b8 80 97 02 c0       	mov    eax,0xc0029780
c001748d:	c3                   	ret    
c001748e:	80 f9 06             	cmp    cl,0x6
c0017491:	0f 85 85 01 00 00    	jne    c001761c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017497:	b8 90 97 02 c0       	mov    eax,0xc0029790
c001749c:	80 fa 01             	cmp    dl,0x1
c001749f:	0f 84 d4 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174a5:	8d 42 fb             	lea    eax,[edx-0x5]
c00174a8:	3c 01                	cmp    al,0x1
c00174aa:	0f 86 ac 01 00 00    	jbe    c001765c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00174b0:	80 fa 03             	cmp    dl,0x3
c00174b3:	0f 84 a3 01 00 00    	je     c001765c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00174b9:	8d 4a f9             	lea    ecx,[edx-0x7]
c00174bc:	b8 b0 97 02 c0       	mov    eax,0xc00297b0
c00174c1:	80 f9 01             	cmp    cl,0x1
c00174c4:	0f 86 af 01 00 00    	jbe    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174ca:	80 fa 09             	cmp    dl,0x9
c00174cd:	0f 84 8f 01 00 00    	je     c0017662 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00174d3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00174d6:	80 f9 01             	cmp    cl,0x1
c00174d9:	0f 86 9a 01 00 00    	jbe    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174df:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00174e4:	80 fa 0d             	cmp    dl,0xd
c00174e7:	0f 84 8c 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174ed:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c00174f2:	80 fa 0e             	cmp    dl,0xe
c00174f5:	0f 84 7e 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174fb:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0017500:	80 fa 0f             	cmp    dl,0xf
c0017503:	0f 84 70 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017509:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c001750e:	80 fa 15             	cmp    dl,0x15
c0017511:	0f 84 62 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017517:	8d 4a ea             	lea    ecx,[edx-0x16]
c001751a:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c001751f:	80 f9 01             	cmp    cl,0x1
c0017522:	0f 86 51 01 00 00    	jbe    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017528:	80 fa 1a             	cmp    dl,0x1a
c001752b:	0f 84 37 01 00 00    	je     c0017668 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017531:	80 fa 1c             	cmp    dl,0x1c
c0017534:	0f 84 34 01 00 00    	je     c001766e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001753a:	80 fa 1d             	cmp    dl,0x1d
c001753d:	0f 84 36 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017543:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017548:	80 fa 25             	cmp    dl,0x25
c001754b:	0f 84 28 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017551:	8d 4a da             	lea    ecx,[edx-0x26]
c0017554:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017559:	80 f9 01             	cmp    cl,0x1
c001755c:	0f 86 17 01 00 00    	jbe    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017562:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017567:	80 fa 2a             	cmp    dl,0x2a
c001756a:	0f 84 09 01 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017570:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017575:	80 fa 2c             	cmp    dl,0x2c
c0017578:	0f 84 fb 00 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001757e:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017583:	80 fa 2d             	cmp    dl,0x2d
c0017586:	0f 84 ed 00 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001758c:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0017591:	80 fa 2e             	cmp    dl,0x2e
c0017594:	0f 84 df 00 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001759a:	b8 10 98 02 c0       	mov    eax,0xc0029810
c001759f:	80 fa 2f             	cmp    dl,0x2f
c00175a2:	0f 84 d1 00 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175a8:	8d 4a cb             	lea    ecx,[edx-0x35]
c00175ab:	b8 00 98 02 c0       	mov    eax,0xc0029800
c00175b0:	80 f9 01             	cmp    cl,0x1
c00175b3:	0f 86 c0 00 00 00    	jbe    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175b9:	b8 30 98 02 c0       	mov    eax,0xc0029830
c00175be:	80 fa 37             	cmp    dl,0x37
c00175c1:	0f 84 b2 00 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175c7:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175cc:	80 fa 3a             	cmp    dl,0x3a
c00175cf:	0f 84 a4 00 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175d5:	b8 50 98 02 c0       	mov    eax,0xc0029850
c00175da:	80 fa 3c             	cmp    dl,0x3c
c00175dd:	0f 84 96 00 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175e3:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00175e8:	80 fa 3d             	cmp    dl,0x3d
c00175eb:	0f 84 88 00 00 00    	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175f1:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175f6:	80 fa 3e             	cmp    dl,0x3e
c00175f9:	74 7e                	je     c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175fb:	8d 42 bb             	lea    eax,[edx-0x45]
c00175fe:	3c 01                	cmp    al,0x1
c0017600:	76 72                	jbe    c0017674 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017602:	80 fa 3f             	cmp    dl,0x3f
c0017605:	74 6d                	je     c0017674 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017607:	80 fa 4a             	cmp    dl,0x4a
c001760a:	74 0a                	je     c0017616 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001760c:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017611:	80 fa 4d             	cmp    dl,0x4d
c0017614:	75 63                	jne    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017616:	b8 30 98 02 c0       	mov    eax,0xc0029830
c001761b:	c3                   	ret    
c001761c:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017621:	80 f9 0b             	cmp    cl,0xb
c0017624:	75 0a                	jne    c0017630 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017626:	fe ca                	dec    dl
c0017628:	75 4f                	jne    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001762a:	b8 70 98 02 c0       	mov    eax,0xc0029870
c001762f:	c3                   	ret    
c0017630:	80 f9 0f             	cmp    cl,0xf
c0017633:	75 44                	jne    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017635:	b8 80 98 02 c0       	mov    eax,0xc0029880
c001763a:	80 fa 02             	cmp    dl,0x2
c001763d:	76 3a                	jbe    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001763f:	8d 42 fd             	lea    eax,[edx-0x3]
c0017642:	3c 01                	cmp    al,0x1
c0017644:	76 0a                	jbe    c0017650 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017646:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001764b:	80 fa 06             	cmp    dl,0x6
c001764e:	75 29                	jne    c0017679 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017650:	b8 90 98 02 c0       	mov    eax,0xc0029890
c0017655:	c3                   	ret    
c0017656:	b8 70 97 02 c0       	mov    eax,0xc0029770
c001765b:	c3                   	ret    
c001765c:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c0017661:	c3                   	ret    
c0017662:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0017667:	c3                   	ret    
c0017668:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c001766d:	c3                   	ret    
c001766e:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017673:	c3                   	ret    
c0017674:	b8 50 98 02 c0       	mov    eax,0xc0029850
c0017679:	c3                   	ret    

c001767a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001767a:	60                   	pusha  
c001767b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001767f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017687:	9c                   	pushf  
c0017688:	fa                   	cli    
c0017689:	0f 09                	wbinvd 
c001768b:	0f 30                	wrmsr  
c001768d:	9d                   	popf   
c001768e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017692:	89 02                	mov    DWORD PTR [edx],eax
c0017694:	61                   	popa   
c0017695:	c3                   	ret    

c0017696 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017696:	60                   	pusha  
c0017697:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001769b:	9c                   	pushf  
c001769c:	fa                   	cli    
c001769d:	0f 09                	wbinvd 
c001769f:	31 c0                	xor    eax,eax
c00176a1:	31 d2                	xor    edx,edx
c00176a3:	0f 32                	rdmsr  
c00176a5:	9d                   	popf   
c00176a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176aa:	89 02                	mov    DWORD PTR [edx],eax
c00176ac:	61                   	popa   
c00176ad:	c3                   	ret    

c00176ae <CPU::AMD_K6_writeback(int, int, int)>:
c00176ae:	56                   	push   esi
c00176af:	53                   	push   ebx
c00176b0:	83 ec 10             	sub    esp,0x10
c00176b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176b7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00176bc:	75 5d                	jne    c001771b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176be:	83 f8 08             	cmp    eax,0x8
c00176c1:	75 09                	jne    c00176cc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00176c3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00176c8:	7e 13                	jle    c00176dd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00176ca:	eb 30                	jmp    c00176fc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00176cc:	83 f8 06             	cmp    eax,0x6
c00176cf:	7c 4a                	jl     c001771b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176d1:	83 f8 07             	cmp    eax,0x7
c00176d4:	7e 07                	jle    c00176dd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00176d6:	83 f8 09             	cmp    eax,0x9
c00176d9:	74 21                	je     c00176fc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00176db:	eb 3e                	jmp    c001771b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176dd:	89 e6                	mov    esi,esp
c00176df:	8b 1d 44 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a444
c00176e5:	56                   	push   esi
c00176e6:	c1 eb 15             	shr    ebx,0x15
c00176e9:	68 82 00 00 c0       	push   0xc0000082
c00176ee:	83 e3 7e             	and    ebx,0x7e
c00176f1:	e8 a0 ff ff ff       	call   c0017696 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00176f6:	56                   	push   esi
c00176f7:	6a 00                	push   0x0
c00176f9:	53                   	push   ebx
c00176fa:	eb 12                	jmp    c001770e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00176fc:	89 e3                	mov    ebx,esp
c00176fe:	53                   	push   ebx
c00176ff:	68 82 00 00 c0       	push   0xc0000082
c0017704:	e8 8d ff ff ff       	call   c0017696 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017709:	53                   	push   ebx
c001770a:	6a 00                	push   0x0
c001770c:	6a 00                	push   0x0
c001770e:	68 82 00 00 c0       	push   0xc0000082
c0017713:	e8 62 ff ff ff       	call   c001767a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017718:	83 c4 18             	add    esp,0x18
c001771b:	83 c4 10             	add    esp,0x10
c001771e:	5b                   	pop    ebx
c001771f:	5e                   	pop    esi
c0017720:	c3                   	ret    
c0017721:	90                   	nop

c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017722:	55                   	push   ebp
c0017723:	57                   	push   edi
c0017724:	56                   	push   esi
c0017725:	53                   	push   ebx
c0017726:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001772a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001772e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017732:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017736:	39 05 a0 99 02 c0    	cmp    DWORD PTR ds:0xc00299a0,eax
c001773c:	75 23                	jne    c0017761 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001773e:	a1 4c ae 02 c0       	mov    eax,ds:0xc002ae4c
c0017743:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017747:	89 06                	mov    DWORD PTR [esi],eax
c0017749:	a1 48 ae 02 c0       	mov    eax,ds:0xc002ae48
c001774e:	89 07                	mov    DWORD PTR [edi],eax
c0017750:	a1 44 ae 02 c0       	mov    eax,ds:0xc002ae44
c0017755:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017758:	a1 40 ae 02 c0       	mov    eax,ds:0xc002ae40
c001775d:	89 02                	mov    DWORD PTR [edx],eax
c001775f:	eb 3f                	jmp    c00177a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017761:	31 c9                	xor    ecx,ecx
c0017763:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017767:	0f a2                	cpuid  
c0017769:	89 06                	mov    DWORD PTR [esi],eax
c001776b:	89 1f                	mov    DWORD PTR [edi],ebx
c001776d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017771:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017774:	89 10                	mov    DWORD PTR [eax],edx
c0017776:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001777a:	a3 a0 99 02 c0       	mov    ds:0xc00299a0,eax
c001777f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017781:	a3 4c ae 02 c0       	mov    ds:0xc002ae4c,eax
c0017786:	8b 07                	mov    eax,DWORD PTR [edi]
c0017788:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c001778d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017790:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c0017795:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017799:	8b 00                	mov    eax,DWORD PTR [eax]
c001779b:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c00177a0:	5b                   	pop    ebx
c00177a1:	5e                   	pop    esi
c00177a2:	5f                   	pop    edi
c00177a3:	5d                   	pop    ebp
c00177a4:	c3                   	ret    
c00177a5:	90                   	nop

c00177a6 <CPU::cpuidCheckEDX(unsigned int)>:
c00177a6:	83 ec 10             	sub    esp,0x10
c00177a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ad:	50                   	push   eax
c00177ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177b2:	50                   	push   eax
c00177b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177b7:	50                   	push   eax
c00177b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177bc:	50                   	push   eax
c00177bd:	6a 01                	push   0x1
c00177bf:	e8 5e ff ff ff       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177c8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00177cc:	0f 95 c0             	setne  al
c00177cf:	83 c4 24             	add    esp,0x24
c00177d2:	c3                   	ret    
c00177d3:	90                   	nop

c00177d4 <CPU::cpuidCheckECX(unsigned int)>:
c00177d4:	83 ec 10             	sub    esp,0x10
c00177d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177db:	50                   	push   eax
c00177dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e0:	50                   	push   eax
c00177e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e5:	50                   	push   eax
c00177e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ea:	50                   	push   eax
c00177eb:	6a 01                	push   0x1
c00177ed:	e8 30 ff ff ff       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177f6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00177fa:	0f 95 c0             	setne  al
c00177fd:	83 c4 24             	add    esp,0x24
c0017800:	c3                   	ret    
c0017801:	90                   	nop

c0017802 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0017802:	83 ec 10             	sub    esp,0x10
c0017805:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017809:	50                   	push   eax
c001780a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001780e:	50                   	push   eax
c001780f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017813:	50                   	push   eax
c0017814:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017818:	50                   	push   eax
c0017819:	6a 07                	push   0x7
c001781b:	e8 02 ff ff ff       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017820:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017824:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017828:	0f 95 c0             	setne  al
c001782b:	83 c4 24             	add    esp,0x24
c001782e:	c3                   	ret    
c001782f:	90                   	nop

c0017830 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0017830:	83 ec 10             	sub    esp,0x10
c0017833:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017837:	50                   	push   eax
c0017838:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001783c:	50                   	push   eax
c001783d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017841:	50                   	push   eax
c0017842:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017846:	50                   	push   eax
c0017847:	6a 07                	push   0x7
c0017849:	e8 d4 fe ff ff       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001784e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017852:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017856:	0f 95 c0             	setne  al
c0017859:	83 c4 24             	add    esp,0x24
c001785c:	c3                   	ret    
c001785d:	90                   	nop

c001785e <CPU::getNumber()>:
c001785e:	31 c0                	xor    eax,eax
c0017860:	c3                   	ret    
c0017861:	90                   	nop

c0017862 <CPU::current()>:
c0017862:	e8 f7 ff ff ff       	call   c001785e <CPU::getNumber()>
c0017867:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c001786d:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0017874:	c3                   	ret    
c0017875:	90                   	nop

c0017876 <CPU::CPU()>:
c0017876:	83 ec 0c             	sub    esp,0xc
c0017879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001787d:	83 ec 08             	sub    esp,0x8
c0017880:	68 2a 7f 02 c0       	push   0xc0027f2a
c0017885:	50                   	push   eax
c0017886:	e8 b7 bf ff ff       	call   c0013842 <Device::Device(char const*)>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	ba 04 80 02 c0       	mov    edx,0xc0028004
c0017893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017897:	89 10                	mov    DWORD PTR [eax],edx
c0017899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001789d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00178a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ab:	05 78 01 00 00       	add    eax,0x178
c00178b0:	83 ec 0c             	sub    esp,0xc
c00178b3:	50                   	push   eax
c00178b4:	e8 95 70 ff ff       	call   c000e94e <GDT::GDT()>
c00178b9:	83 c4 10             	add    esp,0x10
c00178bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c0:	05 7c 09 00 00       	add    eax,0x97c
c00178c5:	83 ec 0c             	sub    esp,0xc
c00178c8:	50                   	push   eax
c00178c9:	e8 e0 72 ff ff       	call   c000ebae <IDT::IDT()>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178d5:	05 7c 11 00 00       	add    eax,0x117c
c00178da:	83 ec 0c             	sub    esp,0xc
c00178dd:	50                   	push   eax
c00178de:	e8 0f 93 ff ff       	call   c0010bf2 <TSS::TSS()>
c00178e3:	83 c4 10             	add    esp,0x10
c00178e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ea:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00178f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00178ff:	90                   	nop
c0017900:	83 c4 0c             	add    esp,0xc
c0017903:	c3                   	ret    

c0017904 <CPU::displayFeatures()>:
c0017904:	53                   	push   ebx
c0017905:	83 ec 10             	sub    esp,0x10
c0017908:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001790c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017912:	68 38 7c 02 c0       	push   0xc0027c38
c0017917:	e8 2b a9 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001791c:	59                   	pop    ecx
c001791d:	58                   	pop    eax
c001791e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017924:	50                   	push   eax
c0017925:	68 49 7c 02 c0       	push   0xc0027c49
c001792a:	e8 18 a9 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001792f:	58                   	pop    eax
c0017930:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017936:	5a                   	pop    edx
c0017937:	c1 e8 0e             	shr    eax,0xe
c001793a:	0f b6 c0             	movzx  eax,al
c001793d:	50                   	push   eax
c001793e:	68 5a 7c 02 c0       	push   0xc0027c5a
c0017943:	e8 ff a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017948:	59                   	pop    ecx
c0017949:	58                   	pop    eax
c001794a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017950:	66 c1 e8 06          	shr    ax,0x6
c0017954:	0f b6 c0             	movzx  eax,al
c0017957:	50                   	push   eax
c0017958:	68 6b 7c 02 c0       	push   0xc0027c6b
c001795d:	e8 e5 a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017962:	c7 04 24 7e 80 02 c0 	mov    DWORD PTR [esp],0xc002807e
c0017969:	e8 d9 a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017976:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001797d:	74 05                	je     c0017984 <CPU::displayFeatures()+0x80>
c001797f:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017984:	52                   	push   edx
c0017985:	52                   	push   edx
c0017986:	50                   	push   eax
c0017987:	68 7c 7c 02 c0       	push   0xc0027c7c
c001798c:	e8 b6 a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017991:	83 c4 10             	add    esp,0x10
c0017994:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017999:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00179a0:	78 05                	js     c00179a7 <CPU::displayFeatures()+0xa3>
c00179a2:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179a7:	51                   	push   ecx
c00179a8:	51                   	push   ecx
c00179a9:	50                   	push   eax
c00179aa:	68 93 7c 02 c0       	push   0xc0027c93
c00179af:	e8 93 a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00179b4:	83 c4 10             	add    esp,0x10
c00179b7:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179bc:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00179c3:	75 05                	jne    c00179ca <CPU::displayFeatures()+0xc6>
c00179c5:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179ca:	52                   	push   edx
c00179cb:	52                   	push   edx
c00179cc:	50                   	push   eax
c00179cd:	68 aa 7c 02 c0       	push   0xc0027caa
c00179d2:	e8 70 a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00179d7:	83 c4 10             	add    esp,0x10
c00179da:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179df:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00179e6:	75 05                	jne    c00179ed <CPU::displayFeatures()+0xe9>
c00179e8:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179ed:	51                   	push   ecx
c00179ee:	51                   	push   ecx
c00179ef:	50                   	push   eax
c00179f0:	68 c1 7c 02 c0       	push   0xc0027cc1
c00179f5:	e8 4d a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00179fa:	83 c4 10             	add    esp,0x10
c00179fd:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a02:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a09:	75 05                	jne    c0017a10 <CPU::displayFeatures()+0x10c>
c0017a0b:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a10:	52                   	push   edx
c0017a11:	52                   	push   edx
c0017a12:	50                   	push   eax
c0017a13:	68 d8 7c 02 c0       	push   0xc0027cd8
c0017a18:	e8 2a a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017a1d:	83 c4 10             	add    esp,0x10
c0017a20:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a25:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a2c:	75 05                	jne    c0017a33 <CPU::displayFeatures()+0x12f>
c0017a2e:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a33:	51                   	push   ecx
c0017a34:	51                   	push   ecx
c0017a35:	50                   	push   eax
c0017a36:	68 ef 7c 02 c0       	push   0xc0027cef
c0017a3b:	e8 07 a8 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017a40:	83 c4 10             	add    esp,0x10
c0017a43:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a48:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017a4f:	75 05                	jne    c0017a56 <CPU::displayFeatures()+0x152>
c0017a51:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a56:	52                   	push   edx
c0017a57:	52                   	push   edx
c0017a58:	50                   	push   eax
c0017a59:	68 06 7d 02 c0       	push   0xc0027d06
c0017a5e:	e8 e4 a7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017a63:	83 c4 10             	add    esp,0x10
c0017a66:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a6b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a72:	75 05                	jne    c0017a79 <CPU::displayFeatures()+0x175>
c0017a74:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a79:	51                   	push   ecx
c0017a7a:	51                   	push   ecx
c0017a7b:	50                   	push   eax
c0017a7c:	68 1d 7d 02 c0       	push   0xc0027d1d
c0017a81:	e8 c1 a7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017a86:	83 c4 10             	add    esp,0x10
c0017a89:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a8e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017a95:	75 05                	jne    c0017a9c <CPU::displayFeatures()+0x198>
c0017a97:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a9c:	52                   	push   edx
c0017a9d:	52                   	push   edx
c0017a9e:	50                   	push   eax
c0017a9f:	68 34 7d 02 c0       	push   0xc0027d34
c0017aa4:	e8 9e a7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017ab1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017ab8:	75 05                	jne    c0017abf <CPU::displayFeatures()+0x1bb>
c0017aba:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017abf:	51                   	push   ecx
c0017ac0:	51                   	push   ecx
c0017ac1:	50                   	push   eax
c0017ac2:	68 4b 7d 02 c0       	push   0xc0027d4b
c0017ac7:	e8 7b a7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017acc:	83 c4 10             	add    esp,0x10
c0017acf:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017ad4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017adb:	75 05                	jne    c0017ae2 <CPU::displayFeatures()+0x1de>
c0017add:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017ae2:	52                   	push   edx
c0017ae3:	52                   	push   edx
c0017ae4:	50                   	push   eax
c0017ae5:	68 62 7d 02 c0       	push   0xc0027d62
c0017aea:	e8 58 a7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017af7:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017afe:	75 05                	jne    c0017b05 <CPU::displayFeatures()+0x201>
c0017b00:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b05:	51                   	push   ecx
c0017b06:	51                   	push   ecx
c0017b07:	50                   	push   eax
c0017b08:	68 79 7d 02 c0       	push   0xc0027d79
c0017b0d:	e8 35 a7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b1a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017b21:	75 05                	jne    c0017b28 <CPU::displayFeatures()+0x224>
c0017b23:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b28:	52                   	push   edx
c0017b29:	52                   	push   edx
c0017b2a:	50                   	push   eax
c0017b2b:	68 90 7d 02 c0       	push   0xc0027d90
c0017b30:	e8 12 a7 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017b35:	83 c4 10             	add    esp,0x10
c0017b38:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b3d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017b44:	78 05                	js     c0017b4b <CPU::displayFeatures()+0x247>
c0017b46:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b4b:	51                   	push   ecx
c0017b4c:	51                   	push   ecx
c0017b4d:	50                   	push   eax
c0017b4e:	68 a7 7d 02 c0       	push   0xc0027da7
c0017b53:	e8 ef a6 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017b58:	83 c4 10             	add    esp,0x10
c0017b5b:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b60:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017b67:	75 05                	jne    c0017b6e <CPU::displayFeatures()+0x26a>
c0017b69:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b6e:	52                   	push   edx
c0017b6f:	52                   	push   edx
c0017b70:	50                   	push   eax
c0017b71:	68 be 7d 02 c0       	push   0xc0027dbe
c0017b76:	e8 cc a6 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0017b7b:	83 c4 18             	add    esp,0x18
c0017b7e:	5b                   	pop    ebx
c0017b7f:	c3                   	ret    

c0017b80 <CPU::detectFeatures()>:
c0017b80:	55                   	push   ebp
c0017b81:	57                   	push   edi
c0017b82:	56                   	push   esi
c0017b83:	53                   	push   ebx
c0017b84:	83 ec 50             	sub    esp,0x50
c0017b87:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017b8b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017b95:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017b9c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017ba2:	6a 0d                	push   0xd
c0017ba4:	6a 00                	push   0x0
c0017ba6:	57                   	push   edi
c0017ba7:	e8 19 8b fe ff       	call   c00006c5 <memset>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017bb4:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017bbb:	0f 84 20 09 00 00    	je     c00184e1 <CPU::detectFeatures()+0x961>
c0017bc1:	83 ec 0c             	sub    esp,0xc
c0017bc4:	6a 10                	push   0x10
c0017bc6:	e8 db fb ff ff       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c0017bcb:	83 e0 01             	and    eax,0x1
c0017bce:	8d 14 00             	lea    edx,[eax+eax*1]
c0017bd1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017bd7:	83 e0 fd             	and    eax,0xfffffffd
c0017bda:	09 d0                	or     eax,edx
c0017bdc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017be2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017be9:	e8 b8 fb ff ff       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c0017bee:	83 e0 01             	and    eax,0x1
c0017bf1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017bf8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017bfe:	83 e0 fb             	and    eax,0xfffffffb
c0017c01:	09 d0                	or     eax,edx
c0017c03:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c09:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017c10:	e8 91 fb ff ff       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c0017c15:	83 e0 01             	and    eax,0x1
c0017c18:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017c1f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c25:	83 e0 f7             	and    eax,0xfffffff7
c0017c28:	09 d0                	or     eax,edx
c0017c2a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c30:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017c37:	e8 6a fb ff ff       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c0017c3c:	83 e0 01             	and    eax,0x1
c0017c3f:	c1 e0 04             	shl    eax,0x4
c0017c42:	88 c2                	mov    dl,al
c0017c44:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c4a:	83 e0 ef             	and    eax,0xffffffef
c0017c4d:	09 d0                	or     eax,edx
c0017c4f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c55:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017c5c:	e8 45 fb ff ff       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c0017c61:	83 e0 01             	and    eax,0x1
c0017c64:	c1 e0 05             	shl    eax,0x5
c0017c67:	88 c2                	mov    dl,al
c0017c69:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c6f:	83 e0 df             	and    eax,0xffffffdf
c0017c72:	09 d0                	or     eax,edx
c0017c74:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c7a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017c81:	e8 20 fb ff ff       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c0017c86:	83 e0 01             	and    eax,0x1
c0017c89:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c8c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017c92:	83 e0 fd             	and    eax,0xfffffffd
c0017c95:	09 d0                	or     eax,edx
c0017c97:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017c9d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017ca4:	e8 fd fa ff ff       	call   c00177a6 <CPU::cpuidCheckEDX(unsigned int)>
c0017ca9:	83 e0 01             	and    eax,0x1
c0017cac:	c1 e0 06             	shl    eax,0x6
c0017caf:	88 c2                	mov    dl,al
c0017cb1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017cb7:	83 e0 bf             	and    eax,0xffffffbf
c0017cba:	09 d0                	or     eax,edx
c0017cbc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017cc2:	58                   	pop    eax
c0017cc3:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017cc7:	56                   	push   esi
c0017cc8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017ccc:	55                   	push   ebp
c0017ccd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017cd1:	50                   	push   eax
c0017cd2:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017cd6:	52                   	push   edx
c0017cd7:	6a 00                	push   0x0
c0017cd9:	e8 44 fa ff ff       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cde:	83 c4 1c             	add    esp,0x1c
c0017ce1:	6a 04                	push   0x4
c0017ce3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017ce7:	50                   	push   eax
c0017ce8:	57                   	push   edi
c0017ce9:	e8 a1 89 fe ff       	call   c000068f <memcpy>
c0017cee:	83 c4 0c             	add    esp,0xc
c0017cf1:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017cf7:	6a 04                	push   0x4
c0017cf9:	56                   	push   esi
c0017cfa:	50                   	push   eax
c0017cfb:	e8 8f 89 fe ff       	call   c000068f <memcpy>
c0017d00:	83 c4 0c             	add    esp,0xc
c0017d03:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017d09:	6a 04                	push   0x4
c0017d0b:	55                   	push   ebp
c0017d0c:	50                   	push   eax
c0017d0d:	e8 7d 89 fe ff       	call   c000068f <memcpy>
c0017d12:	58                   	pop    eax
c0017d13:	5a                   	pop    edx
c0017d14:	68 d5 7d 02 c0       	push   0xc0027dd5
c0017d19:	57                   	push   edi
c0017d1a:	e8 96 8a fe ff       	call   c00007b5 <strcmp>
c0017d1f:	83 c4 10             	add    esp,0x10
c0017d22:	85 c0                	test   eax,eax
c0017d24:	75 0f                	jne    c0017d35 <CPU::detectFeatures()+0x1b5>
c0017d26:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017d30:	e9 22 02 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017d35:	50                   	push   eax
c0017d36:	50                   	push   eax
c0017d37:	68 e2 7d 02 c0       	push   0xc0027de2
c0017d3c:	57                   	push   edi
c0017d3d:	e8 73 8a fe ff       	call   c00007b5 <strcmp>
c0017d42:	83 c4 10             	add    esp,0x10
c0017d45:	85 c0                	test   eax,eax
c0017d47:	74 dd                	je     c0017d26 <CPU::detectFeatures()+0x1a6>
c0017d49:	51                   	push   ecx
c0017d4a:	51                   	push   ecx
c0017d4b:	68 ef 7d 02 c0       	push   0xc0027def
c0017d50:	57                   	push   edi
c0017d51:	e8 5f 8a fe ff       	call   c00007b5 <strcmp>
c0017d56:	83 c4 10             	add    esp,0x10
c0017d59:	85 c0                	test   eax,eax
c0017d5b:	74 2a                	je     c0017d87 <CPU::detectFeatures()+0x207>
c0017d5d:	52                   	push   edx
c0017d5e:	52                   	push   edx
c0017d5f:	68 fc 7d 02 c0       	push   0xc0027dfc
c0017d64:	57                   	push   edi
c0017d65:	e8 4b 8a fe ff       	call   c00007b5 <strcmp>
c0017d6a:	83 c4 10             	add    esp,0x10
c0017d6d:	85 c0                	test   eax,eax
c0017d6f:	74 16                	je     c0017d87 <CPU::detectFeatures()+0x207>
c0017d71:	50                   	push   eax
c0017d72:	50                   	push   eax
c0017d73:	68 09 7e 02 c0       	push   0xc0027e09
c0017d78:	57                   	push   edi
c0017d79:	e8 37 8a fe ff       	call   c00007b5 <strcmp>
c0017d7e:	83 c4 10             	add    esp,0x10
c0017d81:	85 c0                	test   eax,eax
c0017d83:	74 48                	je     c0017dcd <CPU::detectFeatures()+0x24d>
c0017d85:	eb 0f                	jmp    c0017d96 <CPU::detectFeatures()+0x216>
c0017d87:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017d91:	e9 c1 01 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017d96:	50                   	push   eax
c0017d97:	50                   	push   eax
c0017d98:	68 16 7e 02 c0       	push   0xc0027e16
c0017d9d:	57                   	push   edi
c0017d9e:	e8 12 8a fe ff       	call   c00007b5 <strcmp>
c0017da3:	83 c4 10             	add    esp,0x10
c0017da6:	85 c0                	test   eax,eax
c0017da8:	74 23                	je     c0017dcd <CPU::detectFeatures()+0x24d>
c0017daa:	50                   	push   eax
c0017dab:	50                   	push   eax
c0017dac:	68 23 7e 02 c0       	push   0xc0027e23
c0017db1:	57                   	push   edi
c0017db2:	e8 fe 89 fe ff       	call   c00007b5 <strcmp>
c0017db7:	83 c4 10             	add    esp,0x10
c0017dba:	85 c0                	test   eax,eax
c0017dbc:	75 1e                	jne    c0017ddc <CPU::detectFeatures()+0x25c>
c0017dbe:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017dc8:	e9 8a 01 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017dcd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017dd7:	e9 7b 01 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017ddc:	50                   	push   eax
c0017ddd:	50                   	push   eax
c0017dde:	68 30 7e 02 c0       	push   0xc0027e30
c0017de3:	57                   	push   edi
c0017de4:	e8 cc 89 fe ff       	call   c00007b5 <strcmp>
c0017de9:	83 c4 10             	add    esp,0x10
c0017dec:	85 c0                	test   eax,eax
c0017dee:	75 0f                	jne    c0017dff <CPU::detectFeatures()+0x27f>
c0017df0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017dfa:	e9 58 01 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017dff:	50                   	push   eax
c0017e00:	50                   	push   eax
c0017e01:	68 ef 7d 02 c0       	push   0xc0027def
c0017e06:	57                   	push   edi
c0017e07:	e8 a9 89 fe ff       	call   c00007b5 <strcmp>
c0017e0c:	83 c4 10             	add    esp,0x10
c0017e0f:	85 c0                	test   eax,eax
c0017e11:	75 0f                	jne    c0017e22 <CPU::detectFeatures()+0x2a2>
c0017e13:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017e1d:	e9 35 01 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017e22:	50                   	push   eax
c0017e23:	50                   	push   eax
c0017e24:	68 3d 7e 02 c0       	push   0xc0027e3d
c0017e29:	57                   	push   edi
c0017e2a:	e8 86 89 fe ff       	call   c00007b5 <strcmp>
c0017e2f:	83 c4 10             	add    esp,0x10
c0017e32:	85 c0                	test   eax,eax
c0017e34:	75 0f                	jne    c0017e45 <CPU::detectFeatures()+0x2c5>
c0017e36:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017e40:	e9 12 01 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017e45:	51                   	push   ecx
c0017e46:	51                   	push   ecx
c0017e47:	68 4a 7e 02 c0       	push   0xc0027e4a
c0017e4c:	57                   	push   edi
c0017e4d:	e8 63 89 fe ff       	call   c00007b5 <strcmp>
c0017e52:	83 c4 10             	add    esp,0x10
c0017e55:	85 c0                	test   eax,eax
c0017e57:	75 0f                	jne    c0017e68 <CPU::detectFeatures()+0x2e8>
c0017e59:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017e63:	e9 ef 00 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017e68:	52                   	push   edx
c0017e69:	52                   	push   edx
c0017e6a:	68 57 7e 02 c0       	push   0xc0027e57
c0017e6f:	57                   	push   edi
c0017e70:	e8 40 89 fe ff       	call   c00007b5 <strcmp>
c0017e75:	83 c4 10             	add    esp,0x10
c0017e78:	85 c0                	test   eax,eax
c0017e7a:	75 0f                	jne    c0017e8b <CPU::detectFeatures()+0x30b>
c0017e7c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017e86:	e9 cc 00 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017e8b:	50                   	push   eax
c0017e8c:	50                   	push   eax
c0017e8d:	68 64 7e 02 c0       	push   0xc0027e64
c0017e92:	57                   	push   edi
c0017e93:	e8 1d 89 fe ff       	call   c00007b5 <strcmp>
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	85 c0                	test   eax,eax
c0017e9d:	75 0f                	jne    c0017eae <CPU::detectFeatures()+0x32e>
c0017e9f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017ea9:	e9 a9 00 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017eae:	50                   	push   eax
c0017eaf:	50                   	push   eax
c0017eb0:	68 71 7e 02 c0       	push   0xc0027e71
c0017eb5:	57                   	push   edi
c0017eb6:	e8 fa 88 fe ff       	call   c00007b5 <strcmp>
c0017ebb:	83 c4 10             	add    esp,0x10
c0017ebe:	85 c0                	test   eax,eax
c0017ec0:	75 0f                	jne    c0017ed1 <CPU::detectFeatures()+0x351>
c0017ec2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017ecc:	e9 86 00 00 00       	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017ed1:	50                   	push   eax
c0017ed2:	50                   	push   eax
c0017ed3:	68 7e 7e 02 c0       	push   0xc0027e7e
c0017ed8:	57                   	push   edi
c0017ed9:	e8 d7 88 fe ff       	call   c00007b5 <strcmp>
c0017ede:	83 c4 10             	add    esp,0x10
c0017ee1:	85 c0                	test   eax,eax
c0017ee3:	75 0c                	jne    c0017ef1 <CPU::detectFeatures()+0x371>
c0017ee5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017eef:	eb 66                	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017ef1:	50                   	push   eax
c0017ef2:	50                   	push   eax
c0017ef3:	68 8b 7e 02 c0       	push   0xc0027e8b
c0017ef8:	57                   	push   edi
c0017ef9:	e8 b7 88 fe ff       	call   c00007b5 <strcmp>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	85 c0                	test   eax,eax
c0017f03:	75 0c                	jne    c0017f11 <CPU::detectFeatures()+0x391>
c0017f05:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017f0f:	eb 46                	jmp    c0017f57 <CPU::detectFeatures()+0x3d7>
c0017f11:	50                   	push   eax
c0017f12:	50                   	push   eax
c0017f13:	68 98 7e 02 c0       	push   0xc0027e98
c0017f18:	57                   	push   edi
c0017f19:	e8 97 88 fe ff       	call   c00007b5 <strcmp>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	85 c0                	test   eax,eax
c0017f23:	74 e0                	je     c0017f05 <CPU::detectFeatures()+0x385>
c0017f25:	50                   	push   eax
c0017f26:	50                   	push   eax
c0017f27:	68 a5 7e 02 c0       	push   0xc0027ea5
c0017f2c:	57                   	push   edi
c0017f2d:	e8 83 88 fe ff       	call   c00007b5 <strcmp>
c0017f32:	83 c4 10             	add    esp,0x10
c0017f35:	85 c0                	test   eax,eax
c0017f37:	74 cc                	je     c0017f05 <CPU::detectFeatures()+0x385>
c0017f39:	51                   	push   ecx
c0017f3a:	51                   	push   ecx
c0017f3b:	68 b2 7e 02 c0       	push   0xc0027eb2
c0017f40:	57                   	push   edi
c0017f41:	e8 6f 88 fe ff       	call   c00007b5 <strcmp>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	85 c0                	test   eax,eax
c0017f4b:	74 b8                	je     c0017f05 <CPU::detectFeatures()+0x385>
c0017f4d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017f57:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017f5c:	0f 86 be 00 00 00    	jbe    c0018020 <CPU::detectFeatures()+0x4a0>
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	68 80 00 00 00       	push   0x80
c0017f6a:	e8 93 f8 ff ff       	call   c0017802 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017f6f:	83 e0 01             	and    eax,0x1
c0017f72:	c1 e0 06             	shl    eax,0x6
c0017f75:	88 c2                	mov    dl,al
c0017f77:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017f7d:	83 e0 bf             	and    eax,0xffffffbf
c0017f80:	09 d0                	or     eax,edx
c0017f82:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017f88:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017f8f:	e8 6e f8 ff ff       	call   c0017802 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017f94:	83 e0 01             	and    eax,0x1
c0017f97:	c1 e0 04             	shl    eax,0x4
c0017f9a:	88 c2                	mov    dl,al
c0017f9c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017fa2:	83 e0 ef             	and    eax,0xffffffef
c0017fa5:	09 d0                	or     eax,edx
c0017fa7:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017fad:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017fb4:	e8 49 f8 ff ff       	call   c0017802 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017fb9:	c1 e0 07             	shl    eax,0x7
c0017fbc:	88 c2                	mov    dl,al
c0017fbe:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017fc4:	83 e0 7f             	and    eax,0x7f
c0017fc7:	09 d0                	or     eax,edx
c0017fc9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017fcf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017fd6:	e8 55 f8 ff ff       	call   c0017830 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0017fdb:	83 e0 01             	and    eax,0x1
c0017fde:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017fe5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017feb:	83 e0 f7             	and    eax,0xfffffff7
c0017fee:	09 d0                	or     eax,edx
c0017ff0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017ff6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0017ffd:	e8 2e f8 ff ff       	call   c0017830 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018002:	83 c4 10             	add    esp,0x10
c0018005:	83 e0 01             	and    eax,0x1
c0018008:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001800f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018015:	83 e0 fb             	and    eax,0xfffffffb
c0018018:	09 d0                	or     eax,edx
c001801a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018020:	83 ec 0c             	sub    esp,0xc
c0018023:	56                   	push   esi
c0018024:	55                   	push   ebp
c0018025:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018029:	57                   	push   edi
c001802a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001802e:	50                   	push   eax
c001802f:	6a 01                	push   0x1
c0018031:	e8 ec f6 ff ff       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018036:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001803a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018040:	88 ca                	mov    dl,cl
c0018042:	83 e0 f0             	and    eax,0xfffffff0
c0018045:	83 e2 0f             	and    edx,0xf
c0018048:	09 d0                	or     eax,edx
c001804a:	88 ca                	mov    dl,cl
c001804c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018052:	c0 ea 04             	shr    dl,0x4
c0018055:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018059:	0f b6 c2             	movzx  eax,dl
c001805c:	83 c4 20             	add    esp,0x20
c001805f:	c1 e0 06             	shl    eax,0x6
c0018062:	89 c5                	mov    ebp,eax
c0018064:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001806a:	66 25 3f c0          	and    ax,0xc03f
c001806e:	09 e8                	or     eax,ebp
c0018070:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018077:	89 c8                	mov    eax,ecx
c0018079:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001807f:	c1 e8 08             	shr    eax,0x8
c0018082:	83 e2 3f             	and    edx,0x3f
c0018085:	83 e0 0f             	and    eax,0xf
c0018088:	89 c5                	mov    ebp,eax
c001808a:	c1 e5 06             	shl    ebp,0x6
c001808d:	09 d5                	or     ebp,edx
c001808f:	89 ea                	mov    edx,ebp
c0018091:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018097:	88 c2                	mov    dl,al
c0018099:	c0 ea 02             	shr    dl,0x2
c001809c:	89 d5                	mov    ebp,edx
c001809e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00180a4:	83 e2 c0             	and    edx,0xffffffc0
c00180a7:	09 d5                	or     ebp,edx
c00180a9:	89 ea                	mov    edx,ebp
c00180ab:	89 cd                	mov    ebp,ecx
c00180ad:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00180b3:	c1 ed 0c             	shr    ebp,0xc
c00180b6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00180bc:	83 e5 03             	and    ebp,0x3
c00180bf:	83 e2 cf             	and    edx,0xffffffcf
c00180c2:	c1 e5 04             	shl    ebp,0x4
c00180c5:	09 d5                	or     ebp,edx
c00180c7:	3c 06                	cmp    al,0x6
c00180c9:	89 ea                	mov    edx,ebp
c00180cb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00180d1:	74 04                	je     c00180d7 <CPU::detectFeatures()+0x557>
c00180d3:	3c 0f                	cmp    al,0xf
c00180d5:	75 5c                	jne    c0018133 <CPU::detectFeatures()+0x5b3>
c00180d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00180db:	89 cd                	mov    ebp,ecx
c00180dd:	c1 ed 10             	shr    ebp,0x10
c00180e0:	c1 e5 04             	shl    ebp,0x4
c00180e3:	09 ea                	or     edx,ebp
c00180e5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00180eb:	0f b6 d2             	movzx  edx,dl
c00180ee:	66 81 e5 3f c0       	and    bp,0xc03f
c00180f3:	c1 e2 06             	shl    edx,0x6
c00180f6:	09 ea                	or     edx,ebp
c00180f8:	3c 0f                	cmp    al,0xf
c00180fa:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018101:	75 30                	jne    c0018133 <CPU::detectFeatures()+0x5b3>
c0018103:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018109:	c1 e9 14             	shr    ecx,0x14
c001810c:	83 e0 3f             	and    eax,0x3f
c001810f:	83 c1 0f             	add    ecx,0xf
c0018112:	88 ca                	mov    dl,cl
c0018114:	c0 e9 02             	shr    cl,0x2
c0018117:	c1 e2 06             	shl    edx,0x6
c001811a:	09 d0                	or     eax,edx
c001811c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018122:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018128:	83 e0 c0             	and    eax,0xffffffc0
c001812b:	09 c1                	or     ecx,eax
c001812d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018133:	83 ec 0c             	sub    esp,0xc
c0018136:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001813d:	56                   	push   esi
c001813e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018142:	50                   	push   eax
c0018143:	57                   	push   edi
c0018144:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018148:	55                   	push   ebp
c0018149:	68 00 00 00 80       	push   0x80000000
c001814e:	e8 cf f5 ff ff       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018153:	83 c4 20             	add    esp,0x20
c0018156:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001815e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018162:	76 1e                	jbe    c0018182 <CPU::detectFeatures()+0x602>
c0018164:	83 ec 0c             	sub    esp,0xc
c0018167:	56                   	push   esi
c0018168:	50                   	push   eax
c0018169:	57                   	push   edi
c001816a:	55                   	push   ebp
c001816b:	68 01 00 00 80       	push   0x80000001
c0018170:	e8 ad f5 ff ff       	call   c0017722 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018175:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001817f:	83 c4 20             	add    esp,0x20
c0018182:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018188:	83 f8 01             	cmp    eax,0x1
c001818b:	75 6f                	jne    c00181fc <CPU::detectFeatures()+0x67c>
c001818d:	51                   	push   ecx
c001818e:	51                   	push   ecx
c001818f:	68 be 7e 02 c0       	push   0xc0027ebe
c0018194:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018198:	56                   	push   esi
c0018199:	e8 c6 85 fe ff       	call   c0000764 <strcpy>
c001819e:	5f                   	pop    edi
c001819f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181a5:	5d                   	pop    ebp
c00181a6:	66 c1 e8 06          	shr    ax,0x6
c00181aa:	0f b6 c0             	movzx  eax,al
c00181ad:	50                   	push   eax
c00181ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181b4:	c1 e8 0e             	shr    eax,0xe
c00181b7:	0f b6 c0             	movzx  eax,al
c00181ba:	50                   	push   eax
c00181bb:	e8 0c f2 ff ff       	call   c00173cc <CPU::lookupIntelName(unsigned char, unsigned char)>
c00181c0:	5a                   	pop    edx
c00181c1:	59                   	pop    ecx
c00181c2:	50                   	push   eax
c00181c3:	56                   	push   esi
c00181c4:	e8 52 86 fe ff       	call   c000081b <strcat>
c00181c9:	5f                   	pop    edi
c00181ca:	5d                   	pop    ebp
c00181cb:	56                   	push   esi
c00181cc:	53                   	push   ebx
c00181cd:	e8 62 b6 ff ff       	call   c0013834 <Device::setName(char const*)>
c00181d2:	58                   	pop    eax
c00181d3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00181d9:	5a                   	pop    edx
c00181da:	68 c5 7e 02 c0       	push   0xc0027ec5
c00181df:	50                   	push   eax
c00181e0:	e8 d0 85 fe ff       	call   c00007b5 <strcmp>
c00181e5:	83 c4 10             	add    esp,0x10
c00181e8:	85 c0                	test   eax,eax
c00181ea:	0f 85 73 03 00 00    	jne    c0018563 <CPU::detectFeatures()+0x9e3>
c00181f0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00181f7:	e9 67 03 00 00       	jmp    c0018563 <CPU::detectFeatures()+0x9e3>
c00181fc:	83 f8 02             	cmp    eax,0x2
c00181ff:	0f 85 b5 00 00 00    	jne    c00182ba <CPU::detectFeatures()+0x73a>
c0018205:	57                   	push   edi
c0018206:	57                   	push   edi
c0018207:	68 d7 7e 02 c0       	push   0xc0027ed7
c001820c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018210:	56                   	push   esi
c0018211:	e8 4e 85 fe ff       	call   c0000764 <strcpy>
c0018216:	5d                   	pop    ebp
c0018217:	58                   	pop    eax
c0018218:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001821e:	66 c1 e8 06          	shr    ax,0x6
c0018222:	0f b6 c0             	movzx  eax,al
c0018225:	50                   	push   eax
c0018226:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001822c:	c1 e8 0e             	shr    eax,0xe
c001822f:	0f b6 c0             	movzx  eax,al
c0018232:	50                   	push   eax
c0018233:	e8 00 f0 ff ff       	call   c0017238 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018238:	5a                   	pop    edx
c0018239:	59                   	pop    ecx
c001823a:	50                   	push   eax
c001823b:	56                   	push   esi
c001823c:	e8 da 85 fe ff       	call   c000081b <strcat>
c0018241:	5f                   	pop    edi
c0018242:	5d                   	pop    ebp
c0018243:	56                   	push   esi
c0018244:	53                   	push   ebx
c0018245:	e8 ea b5 ff ff       	call   c0013834 <Device::setName(char const*)>
c001824a:	58                   	pop    eax
c001824b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018251:	5a                   	pop    edx
c0018252:	68 dc 7e 02 c0       	push   0xc0027edc
c0018257:	50                   	push   eax
c0018258:	e8 58 85 fe ff       	call   c00007b5 <strcmp>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	85 c0                	test   eax,eax
c0018262:	75 20                	jne    c0018284 <CPU::detectFeatures()+0x704>
c0018264:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c001826a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018270:	a8 01                	test   al,0x1
c0018272:	74 10                	je     c0018284 <CPU::detectFeatures()+0x704>
c0018274:	83 e0 fe             	and    eax,0xfffffffe
c0018277:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001827d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018284:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001828a:	c1 e8 0e             	shr    eax,0xe
c001828d:	3c 05                	cmp    al,0x5
c001828f:	0f 85 ce 02 00 00    	jne    c0018563 <CPU::detectFeatures()+0x9e3>
c0018295:	56                   	push   esi
c0018296:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001829c:	83 e0 0f             	and    eax,0xf
c001829f:	50                   	push   eax
c00182a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182a6:	66 c1 e8 06          	shr    ax,0x6
c00182aa:	0f b6 c0             	movzx  eax,al
c00182ad:	50                   	push   eax
c00182ae:	6a 05                	push   0x5
c00182b0:	e8 f9 f3 ff ff       	call   c00176ae <CPU::AMD_K6_writeback(int, int, int)>
c00182b5:	e9 1f 02 00 00       	jmp    c00184d9 <CPU::detectFeatures()+0x959>
c00182ba:	8d 50 fd             	lea    edx,[eax-0x3]
c00182bd:	83 fa 01             	cmp    edx,0x1
c00182c0:	76 09                	jbe    c00182cb <CPU::detectFeatures()+0x74b>
c00182c2:	83 f8 06             	cmp    eax,0x6
c00182c5:	0f 85 91 01 00 00    	jne    c001845c <CPU::detectFeatures()+0x8dc>
c00182cb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182d1:	c1 ea 0e             	shr    edx,0xe
c00182d4:	80 fa 05             	cmp    dl,0x5
c00182d7:	75 7b                	jne    c0018354 <CPU::detectFeatures()+0x7d4>
c00182d9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182df:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00182e4:	66 81 fa 00 01       	cmp    dx,0x100
c00182e9:	75 0c                	jne    c00182f7 <CPU::detectFeatures()+0x777>
c00182eb:	51                   	push   ecx
c00182ec:	51                   	push   ecx
c00182ed:	68 e3 7e 02 c0       	push   0xc0027ee3
c00182f2:	e9 dc 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c00182f7:	66 81 fa 00 02       	cmp    dx,0x200
c00182fc:	75 0c                	jne    c001830a <CPU::detectFeatures()+0x78a>
c00182fe:	52                   	push   edx
c00182ff:	52                   	push   edx
c0018300:	68 f6 7e 02 c0       	push   0xc0027ef6
c0018305:	e9 c9 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c001830a:	66 81 fa 40 02       	cmp    dx,0x240
c001830f:	75 0c                	jne    c001831d <CPU::detectFeatures()+0x79d>
c0018311:	50                   	push   eax
c0018312:	50                   	push   eax
c0018313:	68 08 7f 02 c0       	push   0xc0027f08
c0018318:	e9 b6 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c001831d:	83 f8 06             	cmp    eax,0x6
c0018320:	75 0c                	jne    c001832e <CPU::detectFeatures()+0x7ae>
c0018322:	50                   	push   eax
c0018323:	50                   	push   eax
c0018324:	68 1a 7f 02 c0       	push   0xc0027f1a
c0018329:	e9 a5 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c001832e:	83 f8 04             	cmp    eax,0x4
c0018331:	75 0c                	jne    c001833f <CPU::detectFeatures()+0x7bf>
c0018333:	50                   	push   eax
c0018334:	50                   	push   eax
c0018335:	68 26 7f 02 c0       	push   0xc0027f26
c001833a:	e9 94 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c001833f:	83 f8 03             	cmp    eax,0x3
c0018342:	0f 85 1b 02 00 00    	jne    c0018563 <CPU::detectFeatures()+0x9e3>
c0018348:	50                   	push   eax
c0018349:	50                   	push   eax
c001834a:	68 2e 7f 02 c0       	push   0xc0027f2e
c001834f:	e9 7f 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c0018354:	80 fa 06             	cmp    dl,0x6
c0018357:	0f 85 db 00 00 00    	jne    c0018438 <CPU::detectFeatures()+0x8b8>
c001835d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018363:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018368:	66 81 fa 80 01       	cmp    dx,0x180
c001836d:	75 0c                	jne    c001837b <CPU::detectFeatures()+0x7fb>
c001836f:	50                   	push   eax
c0018370:	50                   	push   eax
c0018371:	68 39 7f 02 c0       	push   0xc0027f39
c0018376:	e9 58 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c001837b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018381:	66 f7 c1 80 ff       	test   cx,0xff80
c0018386:	75 0c                	jne    c0018394 <CPU::detectFeatures()+0x814>
c0018388:	50                   	push   eax
c0018389:	50                   	push   eax
c001838a:	68 49 7f 02 c0       	push   0xc0027f49
c001838f:	e9 3f 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c0018394:	66 81 fa 40 02       	cmp    dx,0x240
c0018399:	75 0c                	jne    c00183a7 <CPU::detectFeatures()+0x827>
c001839b:	55                   	push   ebp
c001839c:	55                   	push   ebp
c001839d:	68 50 7f 02 c0       	push   0xc0027f50
c00183a2:	e9 2c 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c00183a7:	66 81 fa 80 02       	cmp    dx,0x280
c00183ac:	75 0c                	jne    c00183ba <CPU::detectFeatures()+0x83a>
c00183ae:	57                   	push   edi
c00183af:	57                   	push   edi
c00183b0:	68 59 7f 02 c0       	push   0xc0027f59
c00183b5:	e9 19 01 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c00183ba:	66 81 fa 40 03       	cmp    dx,0x340
c00183bf:	74 ed                	je     c00183ae <CPU::detectFeatures()+0x82e>
c00183c1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00183c6:	75 0c                	jne    c00183d4 <CPU::detectFeatures()+0x854>
c00183c8:	56                   	push   esi
c00183c9:	56                   	push   esi
c00183ca:	68 60 7f 02 c0       	push   0xc0027f60
c00183cf:	e9 ff 00 00 00       	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c00183d4:	83 f8 06             	cmp    eax,0x6
c00183d7:	0f 84 45 ff ff ff    	je     c0018322 <CPU::detectFeatures()+0x7a2>
c00183dd:	83 f8 04             	cmp    eax,0x4
c00183e0:	0f 84 4d ff ff ff    	je     c0018333 <CPU::detectFeatures()+0x7b3>
c00183e6:	83 f8 03             	cmp    eax,0x3
c00183e9:	0f 85 74 01 00 00    	jne    c0018563 <CPU::detectFeatures()+0x9e3>
c00183ef:	51                   	push   ecx
c00183f0:	51                   	push   ecx
c00183f1:	68 69 7f 02 c0       	push   0xc0027f69
c00183f6:	53                   	push   ebx
c00183f7:	e8 38 b4 ff ff       	call   c0013834 <Device::setName(char const*)>
c00183fc:	b1 c1                	mov    cl,0xc1
c00183fe:	88 c8                	mov    al,cl
c0018400:	e6 22                	out    0x22,al
c0018402:	e4 23                	in     al,0x23
c0018404:	88 c2                	mov    dl,al
c0018406:	88 c8                	mov    al,cl
c0018408:	e6 22                	out    0x22,al
c001840a:	88 d0                	mov    al,dl
c001840c:	83 c8 10             	or     eax,0x10
c001840f:	e6 23                	out    0x23,al
c0018411:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018418:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001841b:	89 d0                	mov    eax,edx
c001841d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018423:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018427:	40                   	inc    eax
c0018428:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001842e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018433:	e9 a1 00 00 00       	jmp    c00184d9 <CPU::detectFeatures()+0x959>
c0018438:	83 f8 06             	cmp    eax,0x6
c001843b:	0f 84 e1 fe ff ff    	je     c0018322 <CPU::detectFeatures()+0x7a2>
c0018441:	83 f8 04             	cmp    eax,0x4
c0018444:	0f 84 e9 fe ff ff    	je     c0018333 <CPU::detectFeatures()+0x7b3>
c001844a:	83 f8 03             	cmp    eax,0x3
c001844d:	0f 85 10 01 00 00    	jne    c0018563 <CPU::detectFeatures()+0x9e3>
c0018453:	52                   	push   edx
c0018454:	52                   	push   edx
c0018455:	68 74 7f 02 c0       	push   0xc0027f74
c001845a:	eb 77                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c001845c:	83 f8 07             	cmp    eax,0x7
c001845f:	75 09                	jne    c001846a <CPU::detectFeatures()+0x8ea>
c0018461:	50                   	push   eax
c0018462:	50                   	push   eax
c0018463:	68 7e 7f 02 c0       	push   0xc0027f7e
c0018468:	eb 69                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c001846a:	83 f8 0a             	cmp    eax,0xa
c001846d:	75 09                	jne    c0018478 <CPU::detectFeatures()+0x8f8>
c001846f:	50                   	push   eax
c0018470:	50                   	push   eax
c0018471:	68 89 7f 02 c0       	push   0xc0027f89
c0018476:	eb 5b                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c0018478:	83 f8 0b             	cmp    eax,0xb
c001847b:	75 09                	jne    c0018486 <CPU::detectFeatures()+0x906>
c001847d:	50                   	push   eax
c001847e:	50                   	push   eax
c001847f:	68 91 7f 02 c0       	push   0xc0027f91
c0018484:	eb 4d                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c0018486:	83 f8 08             	cmp    eax,0x8
c0018489:	75 09                	jne    c0018494 <CPU::detectFeatures()+0x914>
c001848b:	50                   	push   eax
c001848c:	50                   	push   eax
c001848d:	68 9a 7f 02 c0       	push   0xc0027f9a
c0018492:	eb 3f                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c0018494:	83 f8 09             	cmp    eax,0x9
c0018497:	75 09                	jne    c00184a2 <CPU::detectFeatures()+0x922>
c0018499:	50                   	push   eax
c001849a:	50                   	push   eax
c001849b:	68 a2 7f 02 c0       	push   0xc0027fa2
c00184a0:	eb 31                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c00184a2:	83 f8 05             	cmp    eax,0x5
c00184a5:	75 09                	jne    c00184b0 <CPU::detectFeatures()+0x930>
c00184a7:	50                   	push   eax
c00184a8:	50                   	push   eax
c00184a9:	68 aa 7f 02 c0       	push   0xc0027faa
c00184ae:	eb 23                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c00184b0:	83 f8 0c             	cmp    eax,0xc
c00184b3:	75 09                	jne    c00184be <CPU::detectFeatures()+0x93e>
c00184b5:	55                   	push   ebp
c00184b6:	55                   	push   ebp
c00184b7:	68 b8 7f 02 c0       	push   0xc0027fb8
c00184bc:	eb 15                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c00184be:	83 f8 0d             	cmp    eax,0xd
c00184c1:	75 09                	jne    c00184cc <CPU::detectFeatures()+0x94c>
c00184c3:	57                   	push   edi
c00184c4:	57                   	push   edi
c00184c5:	68 c3 7f 02 c0       	push   0xc0027fc3
c00184ca:	eb 07                	jmp    c00184d3 <CPU::detectFeatures()+0x953>
c00184cc:	56                   	push   esi
c00184cd:	56                   	push   esi
c00184ce:	68 d7 7f 02 c0       	push   0xc0027fd7
c00184d3:	53                   	push   ebx
c00184d4:	e8 5b b3 ff ff       	call   c0013834 <Device::setName(char const*)>
c00184d9:	83 c4 10             	add    esp,0x10
c00184dc:	e9 82 00 00 00       	jmp    c0018563 <CPU::detectFeatures()+0x9e3>
c00184e1:	51                   	push   ecx
c00184e2:	51                   	push   ecx
c00184e3:	68 23 7e 02 c0       	push   0xc0027e23
c00184e8:	57                   	push   edi
c00184e9:	e8 76 82 fe ff       	call   c0000764 <strcpy>
c00184ee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00184f8:	e8 66 7d fe ff       	call   c0000263 <is486>
c00184fd:	83 c4 10             	add    esp,0x10
c0018500:	85 c0                	test   eax,eax
c0018502:	74 2d                	je     c0018531 <CPU::detectFeatures()+0x9b1>
c0018504:	52                   	push   edx
c0018505:	52                   	push   edx
c0018506:	68 e3 7f 02 c0       	push   0xc0027fe3
c001850b:	53                   	push   ebx
c001850c:	e8 23 b3 ff ff       	call   c0013834 <Device::setName(char const*)>
c0018511:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018518:	e8 cb ce 00 00       	call   c00253e8 <CPU::readCR0()>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	83 e0 14             	and    eax,0x14
c0018523:	83 f8 04             	cmp    eax,0x4
c0018526:	75 1f                	jne    c0018547 <CPU::detectFeatures()+0x9c7>
c0018528:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001852f:	eb 32                	jmp    c0018563 <CPU::detectFeatures()+0x9e3>
c0018531:	50                   	push   eax
c0018532:	50                   	push   eax
c0018533:	68 ee 7f 02 c0       	push   0xc0027fee
c0018538:	53                   	push   ebx
c0018539:	e8 f6 b2 ff ff       	call   c0013834 <Device::setName(char const*)>
c001853e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018545:	eb d1                	jmp    c0018518 <CPU::detectFeatures()+0x998>
c0018547:	e8 f2 7c fe ff       	call   c000023e <hasLegacyFPU>
c001854c:	83 e0 01             	and    eax,0x1
c001854f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018552:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018558:	83 e0 fd             	and    eax,0xfffffffd
c001855b:	09 d0                	or     eax,edx
c001855d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018563:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001856a:	83 c4 4c             	add    esp,0x4c
c001856d:	5b                   	pop    ebx
c001856e:	5e                   	pop    esi
c001856f:	5f                   	pop    edi
c0018570:	5d                   	pop    ebp
c0018571:	c3                   	ret    

c0018572 <CPU::setupSMEP()>:
c0018572:	83 ec 0c             	sub    esp,0xc
c0018575:	e8 38 d1 00 00       	call   c00256b2 <CPU::readCR4()>
c001857a:	0d 00 00 10 00       	or     eax,0x100000
c001857f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018583:	83 c4 0c             	add    esp,0xc
c0018586:	e9 42 d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c001858b:	90                   	nop

c001858c <CPU::setupUMIP()>:
c001858c:	83 ec 0c             	sub    esp,0xc
c001858f:	e8 1e d1 00 00       	call   c00256b2 <CPU::readCR4()>
c0018594:	80 cc 08             	or     ah,0x8
c0018597:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001859b:	83 c4 0c             	add    esp,0xc
c001859e:	e9 2a d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185a3:	90                   	nop

c00185a4 <CPU::setupTSC()>:
c00185a4:	83 ec 0c             	sub    esp,0xc
c00185a7:	e8 06 d1 00 00       	call   c00256b2 <CPU::readCR4()>
c00185ac:	83 c8 04             	or     eax,0x4
c00185af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185b3:	83 c4 0c             	add    esp,0xc
c00185b6:	e9 12 d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185bb:	90                   	nop

c00185bc <CPU::setupLargePages()>:
c00185bc:	83 ec 0c             	sub    esp,0xc
c00185bf:	e8 ee d0 00 00       	call   c00256b2 <CPU::readCR4()>
c00185c4:	83 c8 10             	or     eax,0x10
c00185c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185cb:	83 c4 0c             	add    esp,0xc
c00185ce:	e9 fa d0 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185d3:	90                   	nop

c00185d4 <CPU::setupPAT()>:
c00185d4:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00185d9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00185e0:	74 2c                	je     c001860e <CPU::setupPAT()+0x3a>
c00185e2:	53                   	push   ebx
c00185e3:	83 ec 10             	sub    esp,0x10
c00185e6:	68 77 02 00 00       	push   0x277
c00185eb:	50                   	push   eax
c00185ec:	e8 ed 60 ff ff       	call   c000e6de <Computer::rdmsr(unsigned int)>
c00185f1:	83 e2 f8             	and    edx,0xfffffff8
c00185f4:	83 ca 01             	or     edx,0x1
c00185f7:	52                   	push   edx
c00185f8:	50                   	push   eax
c00185f9:	68 77 02 00 00       	push   0x277
c00185fe:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0018604:	e8 01 61 ff ff       	call   c000e70a <Computer::wrmsr(unsigned int, unsigned long long)>
c0018609:	83 c4 28             	add    esp,0x28
c001860c:	5b                   	pop    ebx
c001860d:	c3                   	ret    
c001860e:	c3                   	ret    
c001860f:	90                   	nop

c0018610 <CPU::setupMTRR()>:
c0018610:	c3                   	ret    
c0018611:	90                   	nop

c0018612 <CPU::setupGlobalPages()>:
c0018612:	83 ec 0c             	sub    esp,0xc
c0018615:	e8 98 d0 00 00       	call   c00256b2 <CPU::readCR4()>
c001861a:	0c 80                	or     al,0x80
c001861c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018620:	83 c4 0c             	add    esp,0xc
c0018623:	e9 a5 d0 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>

c0018628 <CPU::allowUsermodeDataAccess()>:
c0018628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001862c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018633:	74 03                	je     c0018638 <CPU::allowUsermodeDataAccess()+0x10>
c0018635:	0f 01 cb             	stac   
c0018638:	c3                   	ret    
c0018639:	90                   	nop

c001863a <CPU::prohibitUsermodeDataAccess()>:
c001863a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001863e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018645:	74 03                	je     c001864a <CPU::prohibitUsermodeDataAccess()+0x10>
c0018647:	0f 01 ca             	clac   
c001864a:	c3                   	ret    
c001864b:	90                   	nop

c001864c <CPU::setupSMAP()>:
c001864c:	53                   	push   ebx
c001864d:	83 ec 08             	sub    esp,0x8
c0018650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018654:	e8 59 d0 00 00       	call   c00256b2 <CPU::readCR4()>
c0018659:	83 ec 0c             	sub    esp,0xc
c001865c:	0d 00 00 20 00       	or     eax,0x200000
c0018661:	50                   	push   eax
c0018662:	e8 66 d0 00 00       	call   c00256cd <CPU::writeCR4(unsigned long)>
c0018667:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001866b:	83 c4 18             	add    esp,0x18
c001866e:	5b                   	pop    ebx
c001866f:	eb c9                	jmp    c001863a <CPU::prohibitUsermodeDataAccess()>
c0018671:	90                   	nop

c0018672 <CPU::setupFeatures()>:
c0018672:	53                   	push   ebx
c0018673:	83 ec 08             	sub    esp,0x8
c0018676:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001867a:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018681:	74 0c                	je     c001868f <CPU::setupFeatures()+0x1d>
c0018683:	83 ec 0c             	sub    esp,0xc
c0018686:	53                   	push   ebx
c0018687:	e8 e6 fe ff ff       	call   c0018572 <CPU::setupSMEP()>
c001868c:	83 c4 10             	add    esp,0x10
c001868f:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018696:	74 0c                	je     c00186a4 <CPU::setupFeatures()+0x32>
c0018698:	83 ec 0c             	sub    esp,0xc
c001869b:	53                   	push   ebx
c001869c:	e8 ab ff ff ff       	call   c001864c <CPU::setupSMAP()>
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00186ab:	74 0c                	je     c00186b9 <CPU::setupFeatures()+0x47>
c00186ad:	83 ec 0c             	sub    esp,0xc
c00186b0:	53                   	push   ebx
c00186b1:	e8 d6 fe ff ff       	call   c001858c <CPU::setupUMIP()>
c00186b6:	83 c4 10             	add    esp,0x10
c00186b9:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00186c0:	74 0c                	je     c00186ce <CPU::setupFeatures()+0x5c>
c00186c2:	83 ec 0c             	sub    esp,0xc
c00186c5:	53                   	push   ebx
c00186c6:	e8 d9 fe ff ff       	call   c00185a4 <CPU::setupTSC()>
c00186cb:	83 c4 10             	add    esp,0x10
c00186ce:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00186d5:	74 0c                	je     c00186e3 <CPU::setupFeatures()+0x71>
c00186d7:	83 ec 0c             	sub    esp,0xc
c00186da:	53                   	push   ebx
c00186db:	e8 dc fe ff ff       	call   c00185bc <CPU::setupLargePages()>
c00186e0:	83 c4 10             	add    esp,0x10
c00186e3:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00186ea:	74 0c                	je     c00186f8 <CPU::setupFeatures()+0x86>
c00186ec:	83 ec 0c             	sub    esp,0xc
c00186ef:	53                   	push   ebx
c00186f0:	e8 1d ff ff ff       	call   c0018612 <CPU::setupGlobalPages()>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00186ff:	74 0d                	je     c001870e <CPU::setupFeatures()+0x9c>
c0018701:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018705:	83 c4 08             	add    esp,0x8
c0018708:	5b                   	pop    ebx
c0018709:	e9 c6 fe ff ff       	jmp    c00185d4 <CPU::setupPAT()>
c001870e:	83 c4 08             	add    esp,0x8
c0018711:	5b                   	pop    ebx
c0018712:	c3                   	ret    
c0018713:	90                   	nop

c0018714 <CPU::open(int, int, void*)>:
c0018714:	57                   	push   edi
c0018715:	56                   	push   esi
c0018716:	53                   	push   ebx
c0018717:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001871b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001871f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018725:	83 ec 0c             	sub    esp,0xc
c0018728:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001872e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018734:	50                   	push   eax
c0018735:	e8 90 62 ff ff       	call   c000e9ca <GDT::setup()>
c001873a:	83 c4 0c             	add    esp,0xc
c001873d:	6a 00                	push   0x0
c001873f:	68 ef be ad de       	push   0xdeadbeef
c0018744:	57                   	push   edi
c0018745:	e8 e8 84 ff ff       	call   c0010c32 <TSS::setup(unsigned long, unsigned long)>
c001874a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001874d:	e8 c0 84 ff ff       	call   c0010c12 <TSS::flush()>
c0018752:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018758:	89 04 24             	mov    DWORD PTR [esp],eax
c001875b:	e8 c4 64 ff ff       	call   c000ec24 <IDT::setup()>
c0018760:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0018767:	e8 58 cf 00 00       	call   c00256c4 <CPU::writeDR7(unsigned long)>
c001876c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018776:	e8 6d 6f ff ff       	call   c000f6e8 <Phys::allocatePage()>
c001877b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018781:	89 30                	mov    DWORD PTR [eax],esi
c0018783:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018789:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001878c:	58                   	pop    eax
c001878d:	5a                   	pop    edx
c001878e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018794:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018798:	e8 7b 94 ff ff       	call   c0011c18 <VAS::setCPUSpecific(unsigned long)>
c001879d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187a0:	e8 db f3 ff ff       	call   c0017b80 <CPU::detectFeatures()>
c00187a5:	e8 7a c3 ff ff       	call   c0014b24 <setupInterruptController()>
c00187aa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00187b0:	a1 20 a4 02 c0       	mov    eax,ds:0xc002a420
c00187b5:	83 e0 10             	and    eax,0x10
c00187b8:	83 f8 01             	cmp    eax,0x1
c00187bb:	19 c0                	sbb    eax,eax
c00187bd:	83 e0 46             	and    eax,0x46
c00187c0:	83 c0 1e             	add    eax,0x1e
c00187c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00187c6:	e8 03 d7 ff ff       	call   c0015ece <setupTimer(int)>
c00187cb:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187d4:	e8 99 fe ff ff       	call   c0018672 <CPU::setupFeatures()>
c00187d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187dc:	e8 23 f1 ff ff       	call   c0017904 <CPU::displayFeatures()>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	31 c0                	xor    eax,eax
c00187e6:	5b                   	pop    ebx
c00187e7:	5e                   	pop    esi
c00187e8:	5f                   	pop    edi
c00187e9:	c3                   	ret    

c00187ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00187ea:	57                   	push   edi
c00187eb:	56                   	push   esi
c00187ec:	53                   	push   ebx
c00187ed:	51                   	push   ecx
c00187ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187f2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00187f5:	0f 02 c0             	lar    eax,ax
c00187f8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00187fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00187ff:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018802:	88 ca                	mov    dl,cl
c0018804:	c0 ea 06             	shr    dl,0x6
c0018807:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001880b:	89 ca                	mov    edx,ecx
c001880d:	66 c1 ea 03          	shr    dx,0x3
c0018811:	83 e2 07             	and    edx,0x7
c0018814:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018819:	88 17                	mov    BYTE PTR [edi],dl
c001881b:	0f 84 a6 01 00 00    	je     c00189c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018821:	83 e1 07             	and    ecx,0x7
c0018824:	80 f9 04             	cmp    cl,0x4
c0018827:	0f 84 98 00 00 00    	je     c00188c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001882d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018832:	0f 95 c0             	setne  al
c0018835:	80 f9 05             	cmp    cl,0x5
c0018838:	0f 95 c2             	setne  dl
c001883b:	08 c2                	or     dl,al
c001883d:	74 79                	je     c00188b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001883f:	84 c9                	test   cl,cl
c0018841:	75 05                	jne    c0018848 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018843:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018846:	eb 3c                	jmp    c0018884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018848:	80 f9 01             	cmp    cl,0x1
c001884b:	75 05                	jne    c0018852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001884d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018850:	eb 32                	jmp    c0018884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018852:	80 f9 02             	cmp    cl,0x2
c0018855:	75 05                	jne    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018857:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001885a:	eb 28                	jmp    c0018884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001885c:	31 c0                	xor    eax,eax
c001885e:	80 f9 03             	cmp    cl,0x3
c0018861:	75 05                	jne    c0018868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018863:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018866:	eb 1c                	jmp    c0018884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018868:	80 f9 05             	cmp    cl,0x5
c001886b:	75 05                	jne    c0018872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001886d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018870:	eb 12                	jmp    c0018884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018872:	80 f9 06             	cmp    cl,0x6
c0018875:	75 05                	jne    c001887c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018877:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001887a:	eb 08                	jmp    c0018884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001887c:	80 f9 07             	cmp    cl,0x7
c001887f:	75 03                	jne    c0018884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018881:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018884:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018889:	75 10                	jne    c001889b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001888b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001888f:	b9 03 00 00 00       	mov    ecx,0x3
c0018894:	01 d0                	add    eax,edx
c0018896:	e9 37 01 00 00       	jmp    c00189d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001889b:	b9 02 00 00 00       	mov    ecx,0x2
c00188a0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00188a5:	0f 85 27 01 00 00    	jne    c00189d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188ab:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00188ae:	b9 06 00 00 00       	mov    ecx,0x6
c00188b3:	e9 1a 01 00 00       	jmp    c00189d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188b8:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00188bb:	b9 06 00 00 00       	mov    ecx,0x6
c00188c0:	e9 0f 01 00 00       	jmp    c00189d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00188c5:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188c8:	88 ca                	mov    dl,cl
c00188ca:	c0 ea 06             	shr    dl,0x6
c00188cd:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188d1:	89 ca                	mov    edx,ecx
c00188d3:	66 c1 ea 03          	shr    dx,0x3
c00188d7:	83 e2 07             	and    edx,0x7
c00188da:	80 e1 07             	and    cl,0x7
c00188dd:	75 05                	jne    c00188e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00188df:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00188e2:	eb 4c                	jmp    c0018930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188e4:	80 f9 01             	cmp    cl,0x1
c00188e7:	75 05                	jne    c00188ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00188e9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00188ec:	eb 42                	jmp    c0018930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188ee:	80 f9 02             	cmp    cl,0x2
c00188f1:	75 05                	jne    c00188f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00188f3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00188f6:	eb 38                	jmp    c0018930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188f8:	80 f9 03             	cmp    cl,0x3
c00188fb:	75 05                	jne    c0018902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00188fd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0018900:	eb 2e                	jmp    c0018930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018902:	80 f9 04             	cmp    cl,0x4
c0018905:	75 12                	jne    c0018919 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018907:	f6 c4 60             	test   ah,0x60
c001890a:	75 08                	jne    c0018914 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001890c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001890f:	8d 78 14             	lea    edi,[eax+0x14]
c0018912:	eb 1c                	jmp    c0018930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018914:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018917:	eb 17                	jmp    c0018930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018919:	80 f9 05             	cmp    cl,0x5
c001891c:	75 05                	jne    c0018923 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001891e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018921:	eb 0d                	jmp    c0018930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018923:	80 f9 06             	cmp    cl,0x6
c0018926:	75 05                	jne    c001892d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018928:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001892b:	eb 03                	jmp    c0018930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001892d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018930:	84 d2                	test   dl,dl
c0018932:	75 05                	jne    c0018939 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018934:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018937:	eb 3c                	jmp    c0018975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018939:	80 fa 01             	cmp    dl,0x1
c001893c:	75 05                	jne    c0018943 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001893e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018941:	eb 32                	jmp    c0018975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018943:	80 fa 02             	cmp    dl,0x2
c0018946:	75 05                	jne    c001894d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018948:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001894b:	eb 28                	jmp    c0018975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001894d:	80 fa 03             	cmp    dl,0x3
c0018950:	75 05                	jne    c0018957 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018952:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018955:	eb 1e                	jmp    c0018975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018957:	31 c0                	xor    eax,eax
c0018959:	80 fa 04             	cmp    dl,0x4
c001895c:	74 17                	je     c0018975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001895e:	80 fa 05             	cmp    dl,0x5
c0018961:	75 05                	jne    c0018968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018963:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018966:	eb 0d                	jmp    c0018975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018968:	80 fa 06             	cmp    dl,0x6
c001896b:	75 05                	jne    c0018972 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001896d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018970:	eb 03                	jmp    c0018975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018972:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018975:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001897a:	0f 94 c2             	sete   dl
c001897d:	80 f9 05             	cmp    cl,0x5
c0018980:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018984:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018989:	d3 e0                	shl    eax,cl
c001898b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001898f:	74 0a                	je     c001899b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0018991:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018994:	b9 07 00 00 00       	mov    ecx,0x7
c0018999:	eb 37                	jmp    c00189d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001899b:	01 f8                	add    eax,edi
c001899d:	b9 03 00 00 00       	mov    ecx,0x3
c00189a2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00189a7:	74 2b                	je     c00189d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189a9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00189ae:	75 0d                	jne    c00189bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00189b0:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00189b4:	01 c8                	add    eax,ecx
c00189b6:	b9 04 00 00 00       	mov    ecx,0x4
c00189bb:	eb 17                	jmp    c00189d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189bd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189c0:	b9 07 00 00 00       	mov    ecx,0x7
c00189c5:	eb 0d                	jmp    c00189d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189c7:	b9 02 00 00 00       	mov    ecx,0x2
c00189cc:	b2 01                	mov    dl,0x1
c00189ce:	31 c0                	xor    eax,eax
c00189d0:	eb 02                	jmp    c00189d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189d2:	31 d2                	xor    edx,edx
c00189d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189d8:	89 0b                	mov    DWORD PTR [ebx],ecx
c00189da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189de:	88 11                	mov    BYTE PTR [ecx],dl
c00189e0:	5a                   	pop    edx
c00189e1:	5b                   	pop    ebx
c00189e2:	5e                   	pop    esi
c00189e3:	5f                   	pop    edi
c00189e4:	c3                   	ret    

c00189e5 <Krnl::panic(char const*)>:
c00189e5:	55                   	push   ebp
c00189e6:	89 e5                	mov    ebp,esp
c00189e8:	53                   	push   ebx
c00189e9:	50                   	push   eax
c00189ea:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c00189ef:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00189f2:	85 c0                	test   eax,eax
c00189f4:	74 02                	je     c00189f8 <Krnl::panic(char const*)+0x13>
c00189f6:	ff d0                	call   eax
c00189f8:	fa                   	cli    
c00189f9:	c6 05 54 ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae54,0x1
c0018a00:	83 ec 08             	sub    esp,0x8
c0018a03:	c6 05 c0 93 02 c0 00 	mov    BYTE PTR ds:0xc00293c0,0x0
c0018a0a:	53                   	push   ebx
c0018a0b:	68 28 80 02 c0       	push   0xc0028028
c0018a10:	e8 32 98 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0018a15:	58                   	pop    eax
c0018a16:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a21:	e8 4d 7a ff ff       	call   c0010473 <setActiveTerminal(VgaText*)>
c0018a26:	83 c4 0c             	add    esp,0xc
c0018a29:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a2e:	6a 01                	push   0x1
c0018a30:	6a 0f                	push   0xf
c0018a32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a38:	e8 75 74 ff ff       	call   c000feb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a3d:	5a                   	pop    edx
c0018a3e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a49:	e8 c6 7c ff ff       	call   c0010714 <VgaText::clearScreen()>
c0018a4e:	59                   	pop    ecx
c0018a4f:	58                   	pop    eax
c0018a50:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a55:	68 41 80 02 c0       	push   0xc0028041
c0018a5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a60:	e8 2d 7e ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018a65:	58                   	pop    eax
c0018a66:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a6b:	5a                   	pop    edx
c0018a6c:	68 e8 80 02 c0       	push   0xc00280e8
c0018a71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a77:	e8 16 7e ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018a7c:	59                   	pop    ecx
c0018a7d:	58                   	pop    eax
c0018a7e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a83:	68 5d 80 02 c0       	push   0xc002805d
c0018a88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a8e:	e8 ff 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018a93:	58                   	pop    eax
c0018a94:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a99:	5a                   	pop    edx
c0018a9a:	53                   	push   ebx
c0018a9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aa1:	e8 ec 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018aa6:	59                   	pop    ecx
c0018aa7:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018aac:	5b                   	pop    ebx
c0018aad:	68 7d 80 02 c0       	push   0xc002807d
c0018ab2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ab8:	e8 d5 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018abd:	58                   	pop    eax
c0018abe:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ac3:	5a                   	pop    edx
c0018ac4:	68 24 81 02 c0       	push   0xc0028124
c0018ac9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018acf:	e8 be 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018ad4:	59                   	pop    ecx
c0018ad5:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ada:	5b                   	pop    ebx
c0018adb:	68 5d 80 02 c0       	push   0xc002805d
c0018ae0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ae6:	e8 a7 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018aeb:	58                   	pop    eax
c0018aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018af1:	5a                   	pop    edx
c0018af2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018af5:	83 c0 0c             	add    eax,0xc
c0018af8:	50                   	push   eax
c0018af9:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018afe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b04:	e8 89 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018b09:	59                   	pop    ecx
c0018b0a:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b0f:	5b                   	pop    ebx
c0018b10:	68 7c 80 02 c0       	push   0xc002807c
c0018b15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b1b:	e8 72 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018b20:	58                   	pop    eax
c0018b21:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b26:	5a                   	pop    edx
c0018b27:	68 50 81 02 c0       	push   0xc0028150
c0018b2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b32:	e8 5b 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018b37:	59                   	pop    ecx
c0018b38:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b3d:	5b                   	pop    ebx
c0018b3e:	68 90 81 02 c0       	push   0xc0028190
c0018b43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b49:	e8 44 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018b4e:	58                   	pop    eax
c0018b4f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b54:	5a                   	pop    edx
c0018b55:	68 68 80 02 c0       	push   0xc0028068
c0018b5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b60:	e8 2d 7d ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018b65:	59                   	pop    ecx
c0018b66:	5b                   	pop    ebx
c0018b67:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018b6a:	68 80 80 02 c0       	push   0xc0028080
c0018b6f:	e8 d3 96 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0018b74:	58                   	pop    eax
c0018b75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b78:	5a                   	pop    edx
c0018b79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b7c:	68 89 80 02 c0       	push   0xc0028089
c0018b81:	e8 c1 96 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0018b86:	59                   	pop    ecx
c0018b87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b8a:	5b                   	pop    ebx
c0018b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b8d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b90:	68 92 80 02 c0       	push   0xc0028092
c0018b95:	e8 ad 96 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0018b9a:	58                   	pop    eax
c0018b9b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ba0:	5a                   	pop    edx
c0018ba1:	68 d4 81 02 c0       	push   0xc00281d4
c0018ba6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bac:	e8 e1 7c ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018bb1:	59                   	pop    ecx
c0018bb2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bb7:	5b                   	pop    ebx
c0018bb8:	68 9b 80 02 c0       	push   0xc002809b
c0018bbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bc3:	e8 ca 7c ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018bc8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bcd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018bd3:	e8 10 c8 00 00       	call   c00253e8 <CPU::readCR0()>
c0018bd8:	5a                   	pop    edx
c0018bd9:	59                   	pop    ecx
c0018bda:	50                   	push   eax
c0018bdb:	53                   	push   ebx
c0018bdc:	e8 d7 7c ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0018be1:	5b                   	pop    ebx
c0018be2:	58                   	pop    eax
c0018be3:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018be8:	68 a5 80 02 c0       	push   0xc00280a5
c0018bed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bf3:	e8 9a 7c ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018bf8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bfd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c03:	e8 ce ca 00 00       	call   c00256d6 <CPU::readCR2()>
c0018c08:	5a                   	pop    edx
c0018c09:	59                   	pop    ecx
c0018c0a:	50                   	push   eax
c0018c0b:	53                   	push   ebx
c0018c0c:	e8 a7 7c ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0018c11:	5b                   	pop    ebx
c0018c12:	58                   	pop    eax
c0018c13:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c18:	68 af 80 02 c0       	push   0xc00280af
c0018c1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c23:	e8 6a 7c ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018c28:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c2d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c33:	e8 3d c4 00 00       	call   c0025075 <CPU::readCR3()>
c0018c38:	5a                   	pop    edx
c0018c39:	59                   	pop    ecx
c0018c3a:	50                   	push   eax
c0018c3b:	53                   	push   ebx
c0018c3c:	e8 77 7c ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0018c41:	5b                   	pop    ebx
c0018c42:	58                   	pop    eax
c0018c43:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c48:	68 c2 80 02 c0       	push   0xc00280c2
c0018c4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c53:	e8 3a 7c ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018c58:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c5d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c63:	e8 4a ca 00 00       	call   c00256b2 <CPU::readCR4()>
c0018c68:	5a                   	pop    edx
c0018c69:	59                   	pop    ecx
c0018c6a:	50                   	push   eax
c0018c6b:	53                   	push   ebx
c0018c6c:	e8 47 7c ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0018c71:	5b                   	pop    ebx
c0018c72:	58                   	pop    eax
c0018c73:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c78:	68 cc 80 02 c0       	push   0xc00280cc
c0018c7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c83:	e8 0a 7c ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018c88:	5a                   	pop    edx
c0018c89:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c8e:	59                   	pop    ecx
c0018c8f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018c95:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018c98:	50                   	push   eax
c0018c99:	e8 1a 7c ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0018c9e:	5b                   	pop    ebx
c0018c9f:	58                   	pop    eax
c0018ca0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ca5:	68 e3 80 02 c0       	push   0xc00280e3
c0018caa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cb0:	e8 dd 7b ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018cb5:	5a                   	pop    edx
c0018cb6:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cbb:	59                   	pop    ecx
c0018cbc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cc2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018cc5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018cc8:	50                   	push   eax
c0018cc9:	e8 ea 7b ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0018cce:	5b                   	pop    ebx
c0018ccf:	58                   	pop    eax
c0018cd0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cd5:	68 e3 80 02 c0       	push   0xc00280e3
c0018cda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ce0:	e8 ad 7b ff ff       	call   c0010892 <VgaText::puts(char const*)>
c0018ce5:	59                   	pop    ecx
c0018ce6:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ceb:	5b                   	pop    ebx
c0018cec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cf2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018cf5:	8b 12                	mov    edx,DWORD PTR [edx]
c0018cf7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018cfa:	50                   	push   eax
c0018cfb:	e8 b8 7b ff ff       	call   c00108b8 <VgaText::putx(unsigned int)>
c0018d00:	83 c4 10             	add    esp,0x10
c0018d03:	b2 fe                	mov    dl,0xfe
c0018d05:	e4 60                	in     al,0x60
c0018d07:	3c 1c                	cmp    al,0x1c
c0018d09:	74 04                	je     c0018d0f <Krnl::panic(char const*)+0x32a>
c0018d0b:	3c 5a                	cmp    al,0x5a
c0018d0d:	75 f6                	jne    c0018d05 <Krnl::panic(char const*)+0x320>
c0018d0f:	e4 64                	in     al,0x64
c0018d11:	a8 02                	test   al,0x2
c0018d13:	75 fa                	jne    c0018d0f <Krnl::panic(char const*)+0x32a>
c0018d15:	88 d0                	mov    al,dl
c0018d17:	e6 64                	out    0x64,al
c0018d19:	fa                   	cli    
c0018d1a:	f4                   	hlt    
c0018d1b:	eb e8                	jmp    c0018d05 <Krnl::panic(char const*)+0x320>

c0018d1d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018d1d:	55                   	push   ebp
c0018d1e:	57                   	push   edi
c0018d1f:	56                   	push   esi
c0018d20:	53                   	push   ebx
c0018d21:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018d27:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018d2e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018d30:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018d33:	80 fb 40             	cmp    bl,0x40
c0018d36:	75 1b                	jne    c0018d53 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018d38:	8a 16                	mov    dl,BYTE PTR [esi]
c0018d3a:	84 d2                	test   dl,dl
c0018d3c:	0f 84 f1 00 00 00    	je     c0018e33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d42:	8d 46 01             	lea    eax,[esi+0x1]
c0018d45:	80 fa 3a             	cmp    dl,0x3a
c0018d48:	74 04                	je     c0018d4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018d4a:	89 c6                	mov    esi,eax
c0018d4c:	eb ea                	jmp    c0018d38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018d4e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018d51:	89 c6                	mov    esi,eax
c0018d53:	50                   	push   eax
c0018d54:	6a 40                	push   0x40
c0018d56:	6a 00                	push   0x0
c0018d58:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d5c:	50                   	push   eax
c0018d5d:	e8 63 79 fe ff       	call   c00006c5 <memset>
c0018d62:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018d69:	31 c0                	xor    eax,eax
c0018d6b:	83 c4 10             	add    esp,0x10
c0018d6e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018d70:	84 c9                	test   cl,cl
c0018d72:	0f 84 bb 00 00 00    	je     c0018e33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d78:	3d c7 00 00 00       	cmp    eax,0xc7
c0018d7d:	0f 8f b0 00 00 00    	jg     c0018e33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d83:	80 f9 0a             	cmp    cl,0xa
c0018d86:	0f 85 98 00 00 00    	jne    c0018e24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018d8c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018d91:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018d95:	a8 df                	test   al,0xdf
c0018d97:	0f 94 c1             	sete   cl
c0018d9a:	3c 23                	cmp    al,0x23
c0018d9c:	0f 94 c2             	sete   dl
c0018d9f:	08 d1                	or     cl,dl
c0018da1:	75 4a                	jne    c0018ded <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018da3:	8d 50 f7             	lea    edx,[eax-0x9]
c0018da6:	80 fa 01             	cmp    dl,0x1
c0018da9:	76 42                	jbe    c0018ded <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018dab:	3c 5b                	cmp    al,0x5b
c0018dad:	75 42                	jne    c0018df1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018daf:	80 fb 40             	cmp    bl,0x40
c0018db2:	75 39                	jne    c0018ded <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018db4:	83 ec 0c             	sub    esp,0xc
c0018db7:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018dbb:	52                   	push   edx
c0018dbc:	e8 21 79 fe ff       	call   c00006e2 <strlen>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	83 f8 3f             	cmp    eax,0x3f
c0018dc7:	77 6a                	ja     c0018e33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018dc9:	50                   	push   eax
c0018dca:	50                   	push   eax
c0018dcb:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018dcf:	52                   	push   edx
c0018dd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018dd4:	52                   	push   edx
c0018dd5:	e8 8a 79 fe ff       	call   c0000764 <strcpy>
c0018dda:	58                   	pop    eax
c0018ddb:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018ddf:	52                   	push   edx
c0018de0:	e8 fd 78 fe ff       	call   c00006e2 <strlen>
c0018de5:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018dea:	83 c4 10             	add    esp,0x10
c0018ded:	31 d2                	xor    edx,edx
c0018def:	eb 3a                	jmp    c0018e2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018df1:	80 fb 40             	cmp    bl,0x40
c0018df4:	74 06                	je     c0018dfc <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018df6:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018dfa:	eb 20                	jmp    c0018e1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018dfc:	50                   	push   eax
c0018dfd:	50                   	push   eax
c0018dfe:	55                   	push   ebp
c0018dff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e03:	50                   	push   eax
c0018e04:	e8 ac 79 fe ff       	call   c00007b5 <strcmp>
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	85 c0                	test   eax,eax
c0018e0e:	75 dd                	jne    c0018ded <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e10:	eb e4                	jmp    c0018df6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018e12:	8d 50 01             	lea    edx,[eax+0x1]
c0018e15:	80 f9 3d             	cmp    cl,0x3d
c0018e18:	74 1d                	je     c0018e37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018e1a:	89 d0                	mov    eax,edx
c0018e1c:	8a 08                	mov    cl,BYTE PTR [eax]
c0018e1e:	84 c9                	test   cl,cl
c0018e20:	75 f0                	jne    c0018e12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018e22:	eb 0f                	jmp    c0018e33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e24:	8d 50 01             	lea    edx,[eax+0x1]
c0018e27:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018e2b:	47                   	inc    edi
c0018e2c:	89 d0                	mov    eax,edx
c0018e2e:	e9 3b ff ff ff       	jmp    c0018d6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018e33:	31 c0                	xor    eax,eax
c0018e35:	eb 33                	jmp    c0018e6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018e37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018e3b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018e3e:	50                   	push   eax
c0018e3f:	50                   	push   eax
c0018e40:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018e44:	50                   	push   eax
c0018e45:	56                   	push   esi
c0018e46:	e8 6a 79 fe ff       	call   c00007b5 <strcmp>
c0018e4b:	83 c4 10             	add    esp,0x10
c0018e4e:	85 c0                	test   eax,eax
c0018e50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e54:	75 97                	jne    c0018ded <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e56:	51                   	push   ecx
c0018e57:	51                   	push   ecx
c0018e58:	52                   	push   edx
c0018e59:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018e60:	e8 ff 78 fe ff       	call   c0000764 <strcpy>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	b0 01                	mov    al,0x1
c0018e6a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e70:	5b                   	pop    ebx
c0018e71:	5e                   	pop    esi
c0018e72:	5f                   	pop    edi
c0018e73:	5d                   	pop    ebp
c0018e74:	c3                   	ret    

c0018e75 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018e75:	57                   	push   edi
c0018e76:	56                   	push   esi
c0018e77:	53                   	push   ebx
c0018e78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e7e:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018e85:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018e8c:	53                   	push   ebx
c0018e8d:	e8 50 78 fe ff       	call   c00006e2 <strlen>
c0018e92:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e95:	89 c7                	mov    edi,eax
c0018e97:	e8 46 78 fe ff       	call   c00006e2 <strlen>
c0018e9c:	83 c4 10             	add    esp,0x10
c0018e9f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018ea3:	31 ff                	xor    edi,edi
c0018ea5:	3d ff 00 00 00       	cmp    eax,0xff
c0018eaa:	0f 87 18 01 00 00    	ja     c0018fc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018eb0:	51                   	push   ecx
c0018eb1:	51                   	push   ecx
c0018eb2:	56                   	push   esi
c0018eb3:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018eb7:	56                   	push   esi
c0018eb8:	e8 a7 78 fe ff       	call   c0000764 <strcpy>
c0018ebd:	58                   	pop    eax
c0018ebe:	5a                   	pop    edx
c0018ebf:	68 cc 85 02 c0       	push   0xc00285cc
c0018ec4:	56                   	push   esi
c0018ec5:	e8 51 79 fe ff       	call   c000081b <strcat>
c0018eca:	59                   	pop    ecx
c0018ecb:	58                   	pop    eax
c0018ecc:	53                   	push   ebx
c0018ecd:	56                   	push   esi
c0018ece:	e8 48 79 fe ff       	call   c000081b <strcat>
c0018ed3:	58                   	pop    eax
c0018ed4:	5a                   	pop    edx
c0018ed5:	68 fa 81 02 c0       	push   0xc00281fa
c0018eda:	56                   	push   esi
c0018edb:	e8 3b 79 fe ff       	call   c000081b <strcat>
c0018ee0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018ee7:	e8 6c 92 ff ff       	call   c0012158 <operator new(unsigned long)>
c0018eec:	83 c4 0c             	add    esp,0xc
c0018eef:	89 c3                	mov    ebx,eax
c0018ef1:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c0018ef7:	56                   	push   esi
c0018ef8:	50                   	push   eax
c0018ef9:	e8 78 98 ff ff       	call   c0012776 <File::File(char const*, Process*)>
c0018efe:	59                   	pop    ecx
c0018eff:	5e                   	pop    esi
c0018f00:	6a 01                	push   0x1
c0018f02:	53                   	push   ebx
c0018f03:	e8 d2 98 ff ff       	call   c00127da <File::open(FileOpenMode)>
c0018f08:	83 c4 10             	add    esp,0x10
c0018f0b:	85 c0                	test   eax,eax
c0018f0d:	74 08                	je     c0018f17 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018f0f:	83 ec 0c             	sub    esp,0xc
c0018f12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f14:	53                   	push   ebx
c0018f15:	eb 2e                	jmp    c0018f45 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018f17:	52                   	push   edx
c0018f18:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018f1c:	50                   	push   eax
c0018f1d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f21:	50                   	push   eax
c0018f22:	53                   	push   ebx
c0018f23:	e8 5e 9b ff ff       	call   c0012a86 <File::stat(unsigned long long*, bool*)>
c0018f28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f2c:	83 c4 10             	add    esp,0x10
c0018f2f:	89 c1                	mov    ecx,eax
c0018f31:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018f35:	75 13                	jne    c0018f4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018f37:	83 ec 0c             	sub    esp,0xc
c0018f3a:	53                   	push   ebx
c0018f3b:	e8 f8 98 ff ff       	call   c0012838 <File::close()>
c0018f40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f48:	eb 7b                	jmp    c0018fc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018f4a:	83 ec 0c             	sub    esp,0xc
c0018f4d:	50                   	push   eax
c0018f4e:	e8 eb 61 ff ff       	call   c000f13e <malloc>
c0018f53:	89 c6                	mov    esi,eax
c0018f55:	58                   	pop    eax
c0018f56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f58:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f5c:	52                   	push   edx
c0018f5d:	56                   	push   esi
c0018f5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f66:	53                   	push   ebx
c0018f67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018f6a:	83 c4 20             	add    esp,0x20
c0018f6d:	85 c0                	test   eax,eax
c0018f6f:	75 0a                	jne    c0018f7b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018f71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f75:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f79:	74 18                	je     c0018f93 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018f7b:	83 ec 0c             	sub    esp,0xc
c0018f7e:	31 ff                	xor    edi,edi
c0018f80:	53                   	push   ebx
c0018f81:	e8 b2 98 ff ff       	call   c0012838 <File::close()>
c0018f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f8e:	83 c4 10             	add    esp,0x10
c0018f91:	eb 35                	jmp    c0018fc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018f93:	83 ec 0c             	sub    esp,0xc
c0018f96:	53                   	push   ebx
c0018f97:	e8 9c 98 ff ff       	call   c0012838 <File::close()>
c0018f9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fa1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018fa4:	83 c4 0c             	add    esp,0xc
c0018fa7:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fae:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fb5:	56                   	push   esi
c0018fb6:	e8 62 fd ff ff       	call   c0018d1d <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018fbb:	89 34 24             	mov    DWORD PTR [esp],esi
c0018fbe:	89 c7                	mov    edi,eax
c0018fc0:	e8 89 61 ff ff       	call   c000f14e <free>
c0018fc5:	83 c4 10             	add    esp,0x10
c0018fc8:	81 c4 10 01 00 00    	add    esp,0x110
c0018fce:	89 f8                	mov    eax,edi
c0018fd0:	5b                   	pop    ebx
c0018fd1:	5e                   	pop    esi
c0018fd2:	5f                   	pop    edi
c0018fd3:	c3                   	ret    

c0018fd4 <Reg::getLine(char*, char*, char*)>:
c0018fd4:	57                   	push   edi
c0018fd5:	56                   	push   esi
c0018fd6:	53                   	push   ebx
c0018fd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fdb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fdf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018fe3:	57                   	push   edi
c0018fe4:	56                   	push   esi
c0018fe5:	53                   	push   ebx
c0018fe6:	68 ff 81 02 c0       	push   0xc00281ff
c0018feb:	e8 85 fe ff ff       	call   c0018e75 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018ff0:	83 c4 10             	add    esp,0x10
c0018ff3:	84 c0                	test   al,al
c0018ff5:	75 10                	jne    c0019007 <Reg::getLine(char*, char*, char*)+0x33>
c0018ff7:	57                   	push   edi
c0018ff8:	56                   	push   esi
c0018ff9:	53                   	push   ebx
c0018ffa:	68 24 82 02 c0       	push   0xc0028224
c0018fff:	e8 71 fe ff ff       	call   c0018e75 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019004:	83 c4 10             	add    esp,0x10
c0019007:	5b                   	pop    ebx
c0019008:	5e                   	pop    esi
c0019009:	5f                   	pop    edi
c001900a:	c3                   	ret    

c001900b <Reg::readInt(char*, char*, int*)>:
c001900b:	55                   	push   ebp
c001900c:	57                   	push   edi
c001900d:	56                   	push   esi
c001900e:	53                   	push   ebx
c001900f:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019015:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019019:	57                   	push   edi
c001901a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019021:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019028:	e8 a7 ff ff ff       	call   c0018fd4 <Reg::getLine(char*, char*, char*)>
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	84 c0                	test   al,al
c0019032:	0f 84 b3 00 00 00    	je     c00190eb <Reg::readInt(char*, char*, int*)+0xe0>
c0019038:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001903c:	80 fa 2b             	cmp    dl,0x2b
c001903f:	74 0c                	je     c001904d <Reg::readInt(char*, char*, int*)+0x42>
c0019041:	80 fa 2d             	cmp    dl,0x2d
c0019044:	75 0e                	jne    c0019054 <Reg::readInt(char*, char*, int*)+0x49>
c0019046:	ba 01 00 00 00       	mov    edx,0x1
c001904b:	eb 0b                	jmp    c0019058 <Reg::readInt(char*, char*, int*)+0x4d>
c001904d:	ba 01 00 00 00       	mov    edx,0x1
c0019052:	eb 02                	jmp    c0019056 <Reg::readInt(char*, char*, int*)+0x4b>
c0019054:	31 d2                	xor    edx,edx
c0019056:	31 c0                	xor    eax,eax
c0019058:	be 0a 00 00 00       	mov    esi,0xa
c001905d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019062:	75 20                	jne    c0019084 <Reg::readInt(char*, char*, int*)+0x79>
c0019064:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019068:	80 f9 78             	cmp    cl,0x78
c001906b:	75 0a                	jne    c0019077 <Reg::readInt(char*, char*, int*)+0x6c>
c001906d:	83 c2 02             	add    edx,0x2
c0019070:	be 10 00 00 00       	mov    esi,0x10
c0019075:	eb 0d                	jmp    c0019084 <Reg::readInt(char*, char*, int*)+0x79>
c0019077:	80 f9 62             	cmp    cl,0x62
c001907a:	75 08                	jne    c0019084 <Reg::readInt(char*, char*, int*)+0x79>
c001907c:	83 c2 02             	add    edx,0x2
c001907f:	be 02 00 00 00       	mov    esi,0x2
c0019084:	01 d7                	add    edi,edx
c0019086:	31 d2                	xor    edx,edx
c0019088:	8a 1f                	mov    bl,BYTE PTR [edi]
c001908a:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001908e:	80 fb 0d             	cmp    bl,0xd
c0019091:	0f 94 c3             	sete   bl
c0019094:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019099:	0f 94 c1             	sete   cl
c001909c:	08 cb                	or     bl,cl
c001909e:	75 3a                	jne    c00190da <Reg::readInt(char*, char*, int*)+0xcf>
c00190a0:	0f af d6             	imul   edx,esi
c00190a3:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00190a8:	83 fe 10             	cmp    esi,0x10
c00190ab:	75 26                	jne    c00190d3 <Reg::readInt(char*, char*, int*)+0xc8>
c00190ad:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190b1:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00190b4:	89 e9                	mov    ecx,ebp
c00190b6:	80 f9 05             	cmp    cl,0x5
c00190b9:	77 06                	ja     c00190c1 <Reg::readInt(char*, char*, int*)+0xb6>
c00190bb:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00190bf:	eb 16                	jmp    c00190d7 <Reg::readInt(char*, char*, int*)+0xcc>
c00190c1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190c5:	83 e9 61             	sub    ecx,0x61
c00190c8:	80 f9 05             	cmp    cl,0x5
c00190cb:	77 06                	ja     c00190d3 <Reg::readInt(char*, char*, int*)+0xc8>
c00190cd:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00190d1:	eb 04                	jmp    c00190d7 <Reg::readInt(char*, char*, int*)+0xcc>
c00190d3:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00190d7:	47                   	inc    edi
c00190d8:	eb ae                	jmp    c0019088 <Reg::readInt(char*, char*, int*)+0x7d>
c00190da:	84 c0                	test   al,al
c00190dc:	74 02                	je     c00190e0 <Reg::readInt(char*, char*, int*)+0xd5>
c00190de:	f7 da                	neg    edx
c00190e0:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00190e7:	89 10                	mov    DWORD PTR [eax],edx
c00190e9:	88 d8                	mov    al,bl
c00190eb:	81 c4 ec 00 00 00    	add    esp,0xec
c00190f1:	5b                   	pop    ebx
c00190f2:	5e                   	pop    esi
c00190f3:	5f                   	pop    edi
c00190f4:	5d                   	pop    ebp
c00190f5:	c3                   	ret    

c00190f6 <Reg::readString(char*, char*, char*, int)>:
c00190f6:	57                   	push   edi
c00190f7:	56                   	push   esi
c00190f8:	53                   	push   ebx
c00190f9:	81 ec d4 00 00 00    	sub    esp,0xd4
c00190ff:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019106:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001910a:	57                   	push   edi
c001910b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019112:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019119:	e8 b6 fe ff ff       	call   c0018fd4 <Reg::getLine(char*, char*, char*)>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	89 c6                	mov    esi,eax
c0019123:	84 c0                	test   al,al
c0019125:	74 44                	je     c001916b <Reg::readString(char*, char*, char*, int)+0x75>
c0019127:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001912e:	31 c0                	xor    eax,eax
c0019130:	4a                   	dec    edx
c0019131:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019134:	84 c9                	test   cl,cl
c0019136:	74 0f                	je     c0019147 <Reg::readString(char*, char*, char*, int)+0x51>
c0019138:	39 c2                	cmp    edx,eax
c001913a:	7e 0b                	jle    c0019147 <Reg::readString(char*, char*, char*, int)+0x51>
c001913c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001913f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019144:	40                   	inc    eax
c0019145:	eb ea                	jmp    c0019131 <Reg::readString(char*, char*, char*, int)+0x3b>
c0019147:	83 ec 0c             	sub    esp,0xc
c001914a:	53                   	push   ebx
c001914b:	e8 92 75 fe ff       	call   c00006e2 <strlen>
c0019150:	83 c4 10             	add    esp,0x10
c0019153:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019158:	75 11                	jne    c001916b <Reg::readString(char*, char*, char*, int)+0x75>
c001915a:	83 ec 0c             	sub    esp,0xc
c001915d:	53                   	push   ebx
c001915e:	e8 7f 75 fe ff       	call   c00006e2 <strlen>
c0019163:	83 c4 10             	add    esp,0x10
c0019166:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001916b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019171:	89 f0                	mov    eax,esi
c0019173:	5b                   	pop    ebx
c0019174:	5e                   	pop    esi
c0019175:	5f                   	pop    edi
c0019176:	c3                   	ret    

c0019177 <Reg::readBool(char*, char*, bool*)>:
c0019177:	83 ec 20             	sub    esp,0x20
c001917a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001917e:	50                   	push   eax
c001917f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019183:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019187:	e8 7f fe ff ff       	call   c001900b <Reg::readInt(char*, char*, int*)>
c001918c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019191:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019195:	0f 95 02             	setne  BYTE PTR [edx]
c0019198:	83 c4 2c             	add    esp,0x2c
c001919b:	c3                   	ret    

c001919c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001919c:	53                   	push   ebx
c001919d:	83 ec 1c             	sub    esp,0x1c
c00191a0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00191a4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00191a8:	50                   	push   eax
c00191a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191b1:	e8 c1 ff ff ff       	call   c0019177 <Reg::readBool(char*, char*, bool*)>
c00191b6:	83 c4 10             	add    esp,0x10
c00191b9:	84 c0                	test   al,al
c00191bb:	74 04                	je     c00191c1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00191bd:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00191c1:	88 d8                	mov    al,bl
c00191c3:	83 c4 18             	add    esp,0x18
c00191c6:	5b                   	pop    ebx
c00191c7:	c3                   	ret    

c00191c8 <Reg::readIntWithDefault(char*, char*, int)>:
c00191c8:	53                   	push   ebx
c00191c9:	83 ec 1c             	sub    esp,0x1c
c00191cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00191d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191d4:	50                   	push   eax
c00191d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191dd:	e8 29 fe ff ff       	call   c001900b <Reg::readInt(char*, char*, int*)>
c00191e2:	83 c4 10             	add    esp,0x10
c00191e5:	84 c0                	test   al,al
c00191e7:	74 04                	je     c00191ed <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00191e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00191ed:	89 d8                	mov    eax,ebx
c00191ef:	83 c4 18             	add    esp,0x18
c00191f2:	5b                   	pop    ebx
c00191f3:	c3                   	ret    

c00191f4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00191f4:	56                   	push   esi
c00191f5:	53                   	push   ebx
c00191f6:	51                   	push   ecx
c00191f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00191fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00191ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019203:	56                   	push   esi
c0019204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001920c:	e8 e5 fe ff ff       	call   c00190f6 <Reg::readString(char*, char*, char*, int)>
c0019211:	83 c4 10             	add    esp,0x10
c0019214:	84 c0                	test   al,al
c0019216:	74 02                	je     c001921a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019218:	89 f3                	mov    ebx,esi
c001921a:	89 d8                	mov    eax,ebx
c001921c:	5a                   	pop    edx
c001921d:	5b                   	pop    ebx
c001921e:	5e                   	pop    esi
c001921f:	c3                   	ret    

c0019220 <Sys::exit(regs*)>:
c0019220:	83 ec 18             	sub    esp,0x18
c0019223:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019227:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001922a:	e8 1f 31 00 00       	call   c001c34e <terminateTask(int)>
c001922f:	83 c8 ff             	or     eax,0xffffffff
c0019232:	83 c4 1c             	add    esp,0x1c
c0019235:	89 c2                	mov    edx,eax
c0019237:	c3                   	ret    

c0019238 <Sys::loadDLL(regs*)>:
c0019238:	56                   	push   esi
c0019239:	53                   	push   ebx
c001923a:	31 d2                	xor    edx,edx
c001923c:	51                   	push   ecx
c001923d:	b8 01 00 00 00       	mov    eax,0x1
c0019242:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019246:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001924a:	74 7d                	je     c00192c9 <Sys::loadDLL(regs*)+0x91>
c001924c:	83 ec 0c             	sub    esp,0xc
c001924f:	68 14 01 00 00       	push   0x114
c0019254:	e8 ff 8e ff ff       	call   c0012158 <operator new(unsigned long)>
c0019259:	83 c4 0c             	add    esp,0xc
c001925c:	89 c3                	mov    ebx,eax
c001925e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019263:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019266:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019269:	53                   	push   ebx
c001926a:	e8 07 95 ff ff       	call   c0012776 <File::File(char const*, Process*)>
c001926f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019272:	e8 d1 97 ff ff       	call   c0012a48 <File::exists()>
c0019277:	83 c4 10             	add    esp,0x10
c001927a:	84 c0                	test   al,al
c001927c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001927e:	75 11                	jne    c0019291 <Sys::loadDLL(regs*)+0x59>
c0019280:	83 ec 0c             	sub    esp,0xc
c0019283:	53                   	push   ebx
c0019284:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019287:	83 c4 10             	add    esp,0x10
c001928a:	b8 03 00 00 00       	mov    eax,0x3
c001928f:	eb 36                	jmp    c00192c7 <Sys::loadDLL(regs*)+0x8f>
c0019291:	83 ec 0c             	sub    esp,0xc
c0019294:	53                   	push   ebx
c0019295:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019298:	58                   	pop    eax
c0019299:	5a                   	pop    edx
c001929a:	6a 00                	push   0x0
c001929c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001929f:	e8 c4 20 00 00       	call   c001b368 <Thr::loadDLL(char const*, bool)>
c00192a4:	83 c4 10             	add    esp,0x10
c00192a7:	89 c1                	mov    ecx,eax
c00192a9:	31 d2                	xor    edx,edx
c00192ab:	b8 04 00 00 00       	mov    eax,0x4
c00192b0:	85 c9                	test   ecx,ecx
c00192b2:	74 15                	je     c00192c9 <Sys::loadDLL(regs*)+0x91>
c00192b4:	53                   	push   ebx
c00192b5:	53                   	push   ebx
c00192b6:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00192bc:	51                   	push   ecx
c00192bd:	e8 6c 22 00 00       	call   c001b52e <Thr::executeDLL(unsigned long, void*)>
c00192c2:	83 c4 10             	add    esp,0x10
c00192c5:	31 c0                	xor    eax,eax
c00192c7:	31 d2                	xor    edx,edx
c00192c9:	59                   	pop    ecx
c00192ca:	5b                   	pop    ebx
c00192cb:	5e                   	pop    esi
c00192cc:	c3                   	ret    

c00192cd <Sys::read(regs*)>:
c00192cd:	57                   	push   edi
c00192ce:	56                   	push   esi
c00192cf:	53                   	push   ebx
c00192d0:	83 ec 10             	sub    esp,0x10
c00192d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00192da:	83 f8 02             	cmp    eax,0x2
c00192dd:	77 10                	ja     c00192ef <Sys::read(regs*)+0x22>
c00192df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00192e7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00192ed:	eb 0e                	jmp    c00192fd <Sys::read(regs*)+0x30>
c00192ef:	83 ec 0c             	sub    esp,0xc
c00192f2:	50                   	push   eax
c00192f3:	e8 27 7e ff ff       	call   c001111f <getFromFileDescriptor(int)>
c00192f8:	83 c4 10             	add    esp,0x10
c00192fb:	89 c1                	mov    ecx,eax
c00192fd:	83 c8 ff             	or     eax,0xffffffff
c0019300:	85 c9                	test   ecx,ecx
c0019302:	89 c2                	mov    edx,eax
c0019304:	74 28                	je     c001932e <Sys::read(regs*)+0x61>
c0019306:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001930e:	31 ff                	xor    edi,edi
c0019310:	83 ec 0c             	sub    esp,0xc
c0019313:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019315:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019319:	52                   	push   edx
c001931a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001931d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019320:	57                   	push   edi
c0019321:	56                   	push   esi
c0019322:	51                   	push   ecx
c0019323:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019326:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001932a:	83 c4 20             	add    esp,0x20
c001932d:	99                   	cdq    
c001932e:	83 c4 10             	add    esp,0x10
c0019331:	5b                   	pop    ebx
c0019332:	5e                   	pop    esi
c0019333:	5f                   	pop    edi
c0019334:	c3                   	ret    

c0019335 <Sys::sbrk(regs*)>:
c0019335:	56                   	push   esi
c0019336:	53                   	push   ebx
c0019337:	50                   	push   eax
c0019338:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001933d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019341:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019344:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019347:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001934d:	85 db                	test   ebx,ebx
c001934f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019352:	74 02                	je     c0019356 <Sys::sbrk(regs*)+0x21>
c0019354:	79 06                	jns    c001935c <Sys::sbrk(regs*)+0x27>
c0019356:	89 f0                	mov    eax,esi
c0019358:	31 d2                	xor    edx,edx
c001935a:	eb 2a                	jmp    c0019386 <Sys::sbrk(regs*)+0x51>
c001935c:	83 c8 ff             	or     eax,0xffffffff
c001935f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019365:	89 c2                	mov    edx,eax
c0019367:	77 1d                	ja     c0019386 <Sys::sbrk(regs*)+0x51>
c0019369:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001936f:	50                   	push   eax
c0019370:	c1 ea 0c             	shr    edx,0xc
c0019373:	68 07 04 00 00       	push   0x407
c0019378:	52                   	push   edx
c0019379:	51                   	push   ecx
c001937a:	e8 c9 86 ff ff       	call   c0011a48 <VAS::allocatePages(int, int)>
c001937f:	89 f0                	mov    eax,esi
c0019381:	31 d2                	xor    edx,edx
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	59                   	pop    ecx
c0019387:	5b                   	pop    ebx
c0019388:	5e                   	pop    esi
c0019389:	c3                   	ret    

c001938a <Sys::write(regs*)>:
c001938a:	57                   	push   edi
c001938b:	56                   	push   esi
c001938c:	53                   	push   ebx
c001938d:	83 ec 10             	sub    esp,0x10
c0019390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019394:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019397:	83 f8 02             	cmp    eax,0x2
c001939a:	77 10                	ja     c00193ac <Sys::write(regs*)+0x22>
c001939c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193a4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00193aa:	eb 0e                	jmp    c00193ba <Sys::write(regs*)+0x30>
c00193ac:	83 ec 0c             	sub    esp,0xc
c00193af:	50                   	push   eax
c00193b0:	e8 6a 7d ff ff       	call   c001111f <getFromFileDescriptor(int)>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	89 c1                	mov    ecx,eax
c00193ba:	83 c8 ff             	or     eax,0xffffffff
c00193bd:	85 c9                	test   ecx,ecx
c00193bf:	89 c2                	mov    edx,eax
c00193c1:	74 28                	je     c00193eb <Sys::write(regs*)+0x61>
c00193c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00193cb:	31 ff                	xor    edi,edi
c00193cd:	83 ec 0c             	sub    esp,0xc
c00193d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00193d2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00193d6:	52                   	push   edx
c00193d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00193da:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00193dd:	57                   	push   edi
c00193de:	56                   	push   esi
c00193df:	51                   	push   ecx
c00193e0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00193e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193e7:	83 c4 20             	add    esp,0x20
c00193ea:	99                   	cdq    
c00193eb:	83 c4 10             	add    esp,0x10
c00193ee:	5b                   	pop    ebx
c00193ef:	5e                   	pop    esi
c00193f0:	5f                   	pop    edi
c00193f1:	c3                   	ret    

c00193f2 <Sys::yield(regs*)>:
c00193f2:	83 ec 0c             	sub    esp,0xc
c00193f5:	e8 3e 25 00 00       	call   c001b938 <lockScheduler()>
c00193fa:	e8 6d 28 00 00       	call   c001bc6c <schedule()>
c00193ff:	e8 36 25 00 00       	call   c001b93a <unlockScheduler()>
c0019404:	31 c0                	xor    eax,eax
c0019406:	31 d2                	xor    edx,edx
c0019408:	83 c4 0c             	add    esp,0xc
c001940b:	c3                   	ret    

c001940c <sysCallGetPID(regs*)>:
c001940c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019411:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019414:	8b 00                	mov    eax,DWORD PTR [eax]
c0019416:	99                   	cdq    
c0019417:	c3                   	ret    

c0019418 <sysCallSeekDir(regs*)>:
c0019418:	31 c0                	xor    eax,eax
c001941a:	31 d2                	xor    edx,edx
c001941c:	c3                   	ret    

c001941d <sysCallTellDir(regs*)>:
c001941d:	31 c0                	xor    eax,eax
c001941f:	31 d2                	xor    edx,edx
c0019421:	c3                   	ret    

c0019422 <sysCallVerify(regs*)>:
c0019422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019426:	31 d2                	xor    edx,edx
c0019428:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001942b:	c3                   	ret    

c001942c <sysCallFork(regs*)>:
c001942c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019431:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019436:	c3                   	ret    

c0019437 <sysCallExecve(regs*)>:
c0019437:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001943c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019441:	c3                   	ret    

c0019442 <sysCallGetArgc(regs*)>:
c0019442:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019447:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001944a:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019450:	99                   	cdq    
c0019451:	c3                   	ret    

c0019452 <sysFormatDisk(regs*)>:
c0019452:	56                   	push   esi
c0019453:	53                   	push   ebx
c0019454:	53                   	push   ebx
c0019455:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019459:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c001945f:	eb 25                	jmp    c0019486 <sysFormatDisk(regs*)+0x34>
c0019461:	83 ec 0c             	sub    esp,0xc
c0019464:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019467:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019469:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001946c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001946f:	50                   	push   eax
c0019470:	ff 34 85 00 aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd5600]
c0019477:	53                   	push   ebx
c0019478:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001947b:	83 c4 20             	add    esp,0x20
c001947e:	83 f8 08             	cmp    eax,0x8
c0019481:	75 12                	jne    c0019495 <sysFormatDisk(regs*)+0x43>
c0019483:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019486:	85 db                	test   ebx,ebx
c0019488:	75 d7                	jne    c0019461 <sysFormatDisk(regs*)+0xf>
c001948a:	59                   	pop    ecx
c001948b:	b8 03 00 00 00       	mov    eax,0x3
c0019490:	31 d2                	xor    edx,edx
c0019492:	5b                   	pop    ebx
c0019493:	5e                   	pop    esi
c0019494:	c3                   	ret    
c0019495:	85 c0                	test   eax,eax
c0019497:	74 1b                	je     c00194b4 <sysFormatDisk(regs*)+0x62>
c0019499:	83 f8 09             	cmp    eax,0x9
c001949c:	74 0b                	je     c00194a9 <sysFormatDisk(regs*)+0x57>
c001949e:	59                   	pop    ecx
c001949f:	b8 02 00 00 00       	mov    eax,0x2
c00194a4:	31 d2                	xor    edx,edx
c00194a6:	5b                   	pop    ebx
c00194a7:	5e                   	pop    esi
c00194a8:	c3                   	ret    
c00194a9:	59                   	pop    ecx
c00194aa:	b8 01 00 00 00       	mov    eax,0x1
c00194af:	31 d2                	xor    edx,edx
c00194b1:	5b                   	pop    ebx
c00194b2:	5e                   	pop    esi
c00194b3:	c3                   	ret    
c00194b4:	59                   	pop    ecx
c00194b5:	31 c0                	xor    eax,eax
c00194b7:	31 d2                	xor    edx,edx
c00194b9:	5b                   	pop    ebx
c00194ba:	5e                   	pop    esi
c00194bb:	c3                   	ret    

c00194bc <sysSetDiskVolumeLabel(regs*)>:
c00194bc:	56                   	push   esi
c00194bd:	53                   	push   ebx
c00194be:	53                   	push   ebx
c00194bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00194c6:	83 f8 19             	cmp    eax,0x19
c00194c9:	77 29                	ja     c00194f4 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194cb:	8b 0c 85 00 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5600]
c00194d2:	85 c9                	test   ecx,ecx
c00194d4:	74 1e                	je     c00194f4 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194d6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00194d9:	85 d2                	test   edx,edx
c00194db:	74 17                	je     c00194f4 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194dd:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00194e3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00194e5:	52                   	push   edx
c00194e6:	50                   	push   eax
c00194e7:	51                   	push   ecx
c00194e8:	53                   	push   ebx
c00194e9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	99                   	cdq    
c00194f0:	59                   	pop    ecx
c00194f1:	5b                   	pop    ebx
c00194f2:	5e                   	pop    esi
c00194f3:	c3                   	ret    
c00194f4:	59                   	pop    ecx
c00194f5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00194fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00194ff:	5b                   	pop    ebx
c0019500:	5e                   	pop    esi
c0019501:	c3                   	ret    

c0019502 <sysGetDiskVolumeLabel(regs*)>:
c0019502:	57                   	push   edi
c0019503:	56                   	push   esi
c0019504:	53                   	push   ebx
c0019505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019509:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001950c:	83 fa 19             	cmp    edx,0x19
c001950f:	77 34                	ja     c0019545 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019511:	8b 0c 95 00 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5600]
c0019518:	85 c9                	test   ecx,ecx
c001951a:	74 29                	je     c0019545 <sysGetDiskVolumeLabel(regs*)+0x43>
c001951c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001951f:	85 db                	test   ebx,ebx
c0019521:	74 22                	je     c0019545 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019523:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019526:	85 c0                	test   eax,eax
c0019528:	74 1b                	je     c0019545 <sysGetDiskVolumeLabel(regs*)+0x43>
c001952a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019530:	83 ec 0c             	sub    esp,0xc
c0019533:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019535:	50                   	push   eax
c0019536:	53                   	push   ebx
c0019537:	52                   	push   edx
c0019538:	51                   	push   ecx
c0019539:	56                   	push   esi
c001953a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001953d:	83 c4 20             	add    esp,0x20
c0019540:	99                   	cdq    
c0019541:	5b                   	pop    ebx
c0019542:	5e                   	pop    esi
c0019543:	5f                   	pop    edi
c0019544:	c3                   	ret    
c0019545:	5b                   	pop    ebx
c0019546:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001954b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019550:	5e                   	pop    esi
c0019551:	5f                   	pop    edi
c0019552:	c3                   	ret    

c0019553 <sysShutdown(regs*)>:
c0019553:	83 ec 0c             	sub    esp,0xc
c0019556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001955a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001955d:	85 c0                	test   eax,eax
c001955f:	74 18                	je     c0019579 <sysShutdown(regs*)+0x26>
c0019561:	83 f8 01             	cmp    eax,0x1
c0019564:	74 38                	je     c001959e <sysShutdown(regs*)+0x4b>
c0019566:	83 f8 02             	cmp    eax,0x2
c0019569:	74 24                	je     c001958f <sysShutdown(regs*)+0x3c>
c001956b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019570:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019575:	83 c4 0c             	add    esp,0xc
c0019578:	c3                   	ret    
c0019579:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001957e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019580:	6a 00                	push   0x0
c0019582:	6a 00                	push   0x0
c0019584:	6a 00                	push   0x0
c0019586:	50                   	push   eax
c0019587:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001958a:	83 c4 10             	add    esp,0x10
c001958d:	eb dc                	jmp    c001956b <sysShutdown(regs*)+0x18>
c001958f:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0019594:	8b 10                	mov    edx,DWORD PTR [eax]
c0019596:	6a 00                	push   0x0
c0019598:	6a 00                	push   0x0
c001959a:	6a 01                	push   0x1
c001959c:	eb e8                	jmp    c0019586 <sysShutdown(regs*)+0x33>
c001959e:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c00195a3:	85 c0                	test   eax,eax
c00195a5:	74 02                	je     c00195a9 <sysShutdown(regs*)+0x56>
c00195a7:	ff d0                	call   eax
c00195a9:	31 c0                	xor    eax,eax
c00195ab:	31 d2                	xor    edx,edx
c00195ad:	83 c4 0c             	add    esp,0xc
c00195b0:	c3                   	ret    

c00195b1 <sysCallGetCwd(regs*)>:
c00195b1:	83 ec 10             	sub    esp,0x10
c00195b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195b8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00195bb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195c6:	e8 1c 95 ff ff       	call   c0012ae7 <getcwd(Process*, char*, int)>
c00195cb:	83 c4 1c             	add    esp,0x1c
c00195ce:	99                   	cdq    
c00195cf:	c3                   	ret    

c00195d0 <sysCallSetCwd(regs*)>:
c00195d0:	83 ec 14             	sub    esp,0x14
c00195d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195d7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195df:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195e2:	e8 2a 95 ff ff       	call   c0012b11 <setcwd(Process*, char*)>
c00195e7:	83 c4 1c             	add    esp,0x1c
c00195ea:	99                   	cdq    
c00195eb:	c3                   	ret    

c00195ec <sysCallRealpath(regs*)>:
c00195ec:	83 ec 0c             	sub    esp,0xc
c00195ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00195f6:	85 d2                	test   edx,edx
c00195f8:	74 07                	je     c0019601 <sysCallRealpath(regs*)+0x15>
c00195fa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00195fd:	85 c0                	test   eax,eax
c00195ff:	75 0b                	jne    c001960c <sysCallRealpath(regs*)+0x20>
c0019601:	b8 01 00 00 00       	mov    eax,0x1
c0019606:	31 d2                	xor    edx,edx
c0019608:	83 c4 0c             	add    esp,0xc
c001960b:	c3                   	ret    
c001960c:	51                   	push   ecx
c001960d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019613:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019616:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001961c:	51                   	push   ecx
c001961d:	52                   	push   edx
c001961e:	50                   	push   eax
c001961f:	e8 a8 8f ff ff       	call   c00125cc <standardiseFiles(char*, char const*, char const*)>
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	31 c0                	xor    eax,eax
c0019629:	31 d2                	xor    edx,edx
c001962b:	83 c4 0c             	add    esp,0xc
c001962e:	c3                   	ret    

c001962f <sysCallReadDir(regs*)>:
c001962f:	53                   	push   ebx
c0019630:	83 ec 18             	sub    esp,0x18
c0019633:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019637:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001963a:	83 f8 02             	cmp    eax,0x2
c001963d:	76 53                	jbe    c0019692 <sysCallReadDir(regs*)+0x63>
c001963f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019642:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019648:	77 4f                	ja     c0019699 <sysCallReadDir(regs*)+0x6a>
c001964a:	83 ec 0c             	sub    esp,0xc
c001964d:	50                   	push   eax
c001964e:	e8 cc 7a ff ff       	call   c001111f <getFromFileDescriptor(int)>
c0019653:	83 c4 10             	add    esp,0x10
c0019656:	85 c0                	test   eax,eax
c0019658:	74 50                	je     c00196aa <sysCallReadDir(regs*)+0x7b>
c001965a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019662:	83 ec 0c             	sub    esp,0xc
c0019665:	8b 10                	mov    edx,DWORD PTR [eax]
c0019667:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001966b:	51                   	push   ecx
c001966c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001966f:	6a 00                	push   0x0
c0019671:	68 10 01 00 00       	push   0x110
c0019676:	50                   	push   eax
c0019677:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001967a:	83 c4 20             	add    esp,0x20
c001967d:	85 c0                	test   eax,eax
c001967f:	74 38                	je     c00196b9 <sysCallReadDir(regs*)+0x8a>
c0019681:	83 f8 07             	cmp    eax,0x7
c0019684:	74 0c                	je     c0019692 <sysCallReadDir(regs*)+0x63>
c0019686:	b8 02 00 00 00       	mov    eax,0x2
c001968b:	31 d2                	xor    edx,edx
c001968d:	83 c4 18             	add    esp,0x18
c0019690:	5b                   	pop    ebx
c0019691:	c3                   	ret    
c0019692:	b8 01 00 00 00       	mov    eax,0x1
c0019697:	eb f2                	jmp    c001968b <sysCallReadDir(regs*)+0x5c>
c0019699:	83 ec 08             	sub    esp,0x8
c001969c:	52                   	push   edx
c001969d:	68 40 82 02 c0       	push   0xc0028240
c00196a2:	e8 a0 8b ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00196a7:	83 c4 10             	add    esp,0x10
c00196aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00196af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00196b4:	83 c4 18             	add    esp,0x18
c00196b7:	5b                   	pop    ebx
c00196b8:	c3                   	ret    
c00196b9:	31 c0                	xor    eax,eax
c00196bb:	eb ce                	jmp    c001968b <sysCallReadDir(regs*)+0x5c>

c00196bd <sysCallIsATTY(regs*)>:
c00196bd:	83 ec 0c             	sub    esp,0xc
c00196c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00196c7:	83 f8 02             	cmp    eax,0x2
c00196ca:	76 07                	jbe    c00196d3 <sysCallIsATTY(regs*)+0x16>
c00196cc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00196d1:	75 26                	jne    c00196f9 <sysCallIsATTY(regs*)+0x3c>
c00196d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196db:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00196e1:	85 c0                	test   eax,eax
c00196e3:	74 24                	je     c0019709 <sysCallIsATTY(regs*)+0x4c>
c00196e5:	83 ec 0c             	sub    esp,0xc
c00196e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00196ea:	50                   	push   eax
c00196eb:	ff 12                	call   DWORD PTR [edx]
c00196ed:	31 d2                	xor    edx,edx
c00196ef:	0f b6 c0             	movzx  eax,al
c00196f2:	83 c4 10             	add    esp,0x10
c00196f5:	83 c4 0c             	add    esp,0xc
c00196f8:	c3                   	ret    
c00196f9:	83 ec 0c             	sub    esp,0xc
c00196fc:	50                   	push   eax
c00196fd:	e8 1d 7a ff ff       	call   c001111f <getFromFileDescriptor(int)>
c0019702:	83 c4 10             	add    esp,0x10
c0019705:	85 c0                	test   eax,eax
c0019707:	75 dc                	jne    c00196e5 <sysCallIsATTY(regs*)+0x28>
c0019709:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001970e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019713:	83 c4 0c             	add    esp,0xc
c0019716:	c3                   	ret    

c0019717 <sysCallSeek(regs*)>:
c0019717:	53                   	push   ebx
c0019718:	83 ec 08             	sub    esp,0x8
c001971b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001971f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019722:	83 f8 02             	cmp    eax,0x2
c0019725:	76 4a                	jbe    c0019771 <sysCallSeek(regs*)+0x5a>
c0019727:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001972c:	77 32                	ja     c0019760 <sysCallSeek(regs*)+0x49>
c001972e:	83 ec 0c             	sub    esp,0xc
c0019731:	50                   	push   eax
c0019732:	e8 e8 79 ff ff       	call   c001111f <getFromFileDescriptor(int)>
c0019737:	83 c4 0c             	add    esp,0xc
c001973a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001973d:	31 db                	xor    ebx,ebx
c001973f:	53                   	push   ebx
c0019740:	51                   	push   ecx
c0019741:	50                   	push   eax
c0019742:	e8 51 91 ff ff       	call   c0012898 <File::seek(unsigned long long)>
c0019747:	83 c4 10             	add    esp,0x10
c001974a:	85 c0                	test   eax,eax
c001974c:	0f 95 c0             	setne  al
c001974f:	31 d2                	xor    edx,edx
c0019751:	0f b6 c0             	movzx  eax,al
c0019754:	f7 d8                	neg    eax
c0019756:	83 d2 00             	adc    edx,0x0
c0019759:	83 c4 08             	add    esp,0x8
c001975c:	f7 da                	neg    edx
c001975e:	5b                   	pop    ebx
c001975f:	c3                   	ret    
c0019760:	83 ec 08             	sub    esp,0x8
c0019763:	50                   	push   eax
c0019764:	68 fc 82 02 c0       	push   0xc00282fc
c0019769:	e8 d9 8a ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001976e:	83 c4 10             	add    esp,0x10
c0019771:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019776:	ba ff ff ff ff       	mov    edx,0xffffffff
c001977b:	83 c4 08             	add    esp,0x8
c001977e:	5b                   	pop    ebx
c001977f:	c3                   	ret    

c0019780 <sysCallTell(regs*)>:
c0019780:	53                   	push   ebx
c0019781:	83 ec 08             	sub    esp,0x8
c0019784:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019788:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001978b:	83 f8 02             	cmp    eax,0x2
c001978e:	76 5e                	jbe    c00197ee <sysCallTell(regs*)+0x6e>
c0019790:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019795:	77 2d                	ja     c00197c4 <sysCallTell(regs*)+0x44>
c0019797:	83 ec 0c             	sub    esp,0xc
c001979a:	50                   	push   eax
c001979b:	e8 7f 79 ff ff       	call   c001111f <getFromFileDescriptor(int)>
c00197a0:	5a                   	pop    edx
c00197a1:	59                   	pop    ecx
c00197a2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00197a5:	50                   	push   eax
c00197a6:	e8 43 91 ff ff       	call   c00128ee <File::tell(unsigned long long*)>
c00197ab:	83 c4 10             	add    esp,0x10
c00197ae:	85 c0                	test   eax,eax
c00197b0:	0f 95 c0             	setne  al
c00197b3:	31 d2                	xor    edx,edx
c00197b5:	0f b6 c0             	movzx  eax,al
c00197b8:	f7 d8                	neg    eax
c00197ba:	83 d2 00             	adc    edx,0x0
c00197bd:	83 c4 08             	add    esp,0x8
c00197c0:	f7 da                	neg    edx
c00197c2:	5b                   	pop    ebx
c00197c3:	c3                   	ret    
c00197c4:	83 ec 08             	sub    esp,0x8
c00197c7:	50                   	push   eax
c00197c8:	68 16 83 02 c0       	push   0xc0028316
c00197cd:	e8 75 8a ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00197d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00197d5:	83 c4 10             	add    esp,0x10
c00197d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00197de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00197e5:	31 d2                	xor    edx,edx
c00197e7:	31 c0                	xor    eax,eax
c00197e9:	83 c4 08             	add    esp,0x8
c00197ec:	5b                   	pop    ebx
c00197ed:	c3                   	ret    
c00197ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00197f8:	83 c4 08             	add    esp,0x8
c00197fb:	5b                   	pop    ebx
c00197fc:	c3                   	ret    

c00197fd <sysCallSizeFromFilename(regs*)>:
c00197fd:	57                   	push   edi
c00197fe:	56                   	push   esi
c00197ff:	53                   	push   ebx
c0019800:	83 ec 10             	sub    esp,0x10
c0019803:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019807:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001980a:	83 fb 02             	cmp    ebx,0x2
c001980d:	0f 86 8a 00 00 00    	jbe    c001989d <sysCallSizeFromFilename(regs*)+0xa0>
c0019813:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019819:	77 56                	ja     c0019871 <sysCallSizeFromFilename(regs*)+0x74>
c001981b:	83 ec 0c             	sub    esp,0xc
c001981e:	68 14 01 00 00       	push   0x114
c0019823:	e8 30 89 ff ff       	call   c0012158 <operator new(unsigned long)>
c0019828:	83 c4 0c             	add    esp,0xc
c001982b:	89 c7                	mov    edi,eax
c001982d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019832:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019835:	53                   	push   ebx
c0019836:	57                   	push   edi
c0019837:	e8 3a 8f ff ff       	call   c0012776 <File::File(char const*, Process*)>
c001983c:	83 c4 0c             	add    esp,0xc
c001983f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019843:	50                   	push   eax
c0019844:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019847:	57                   	push   edi
c0019848:	e8 39 92 ff ff       	call   c0012a86 <File::stat(unsigned long long*, bool*)>
c001984d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019850:	89 c3                	mov    ebx,eax
c0019852:	8b 07                	mov    eax,DWORD PTR [edi]
c0019854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019857:	83 c4 10             	add    esp,0x10
c001985a:	31 c0                	xor    eax,eax
c001985c:	85 db                	test   ebx,ebx
c001985e:	0f 95 c0             	setne  al
c0019861:	31 d2                	xor    edx,edx
c0019863:	f7 d8                	neg    eax
c0019865:	83 d2 00             	adc    edx,0x0
c0019868:	83 c4 10             	add    esp,0x10
c001986b:	f7 da                	neg    edx
c001986d:	5b                   	pop    ebx
c001986e:	5e                   	pop    esi
c001986f:	5f                   	pop    edi
c0019870:	c3                   	ret    
c0019871:	83 ec 08             	sub    esp,0x8
c0019874:	53                   	push   ebx
c0019875:	68 30 83 02 c0       	push   0xc0028330
c001987a:	e8 c8 89 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001987f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019882:	83 c4 10             	add    esp,0x10
c0019885:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001988b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019892:	31 d2                	xor    edx,edx
c0019894:	83 c4 10             	add    esp,0x10
c0019897:	31 c0                	xor    eax,eax
c0019899:	5b                   	pop    ebx
c001989a:	5e                   	pop    esi
c001989b:	5f                   	pop    edi
c001989c:	c3                   	ret    
c001989d:	83 c4 10             	add    esp,0x10
c00198a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00198a5:	5b                   	pop    ebx
c00198a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198ab:	5e                   	pop    esi
c00198ac:	5f                   	pop    edi
c00198ad:	c3                   	ret    

c00198ae <sysCallSize(regs*)>:
c00198ae:	53                   	push   ebx
c00198af:	83 ec 18             	sub    esp,0x18
c00198b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00198b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00198b9:	83 f8 02             	cmp    eax,0x2
c00198bc:	76 64                	jbe    c0019922 <sysCallSize(regs*)+0x74>
c00198be:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00198c3:	77 33                	ja     c00198f8 <sysCallSize(regs*)+0x4a>
c00198c5:	83 ec 0c             	sub    esp,0xc
c00198c8:	50                   	push   eax
c00198c9:	e8 51 78 ff ff       	call   c001111f <getFromFileDescriptor(int)>
c00198ce:	83 c4 0c             	add    esp,0xc
c00198d1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00198d5:	52                   	push   edx
c00198d6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00198d9:	50                   	push   eax
c00198da:	e8 a7 91 ff ff       	call   c0012a86 <File::stat(unsigned long long*, bool*)>
c00198df:	83 c4 10             	add    esp,0x10
c00198e2:	85 c0                	test   eax,eax
c00198e4:	0f 95 c0             	setne  al
c00198e7:	31 d2                	xor    edx,edx
c00198e9:	0f b6 c0             	movzx  eax,al
c00198ec:	f7 d8                	neg    eax
c00198ee:	83 d2 00             	adc    edx,0x0
c00198f1:	83 c4 18             	add    esp,0x18
c00198f4:	f7 da                	neg    edx
c00198f6:	5b                   	pop    ebx
c00198f7:	c3                   	ret    
c00198f8:	83 ec 08             	sub    esp,0x8
c00198fb:	50                   	push   eax
c00198fc:	68 30 83 02 c0       	push   0xc0028330
c0019901:	e8 41 89 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0019906:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019909:	83 c4 10             	add    esp,0x10
c001990c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019912:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019919:	31 d2                	xor    edx,edx
c001991b:	31 c0                	xor    eax,eax
c001991d:	83 c4 18             	add    esp,0x18
c0019920:	5b                   	pop    ebx
c0019921:	c3                   	ret    
c0019922:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019927:	ba ff ff ff ff       	mov    edx,0xffffffff
c001992c:	83 c4 18             	add    esp,0x18
c001992f:	5b                   	pop    ebx
c0019930:	c3                   	ret    

c0019931 <sysCallClose(regs*)>:
c0019931:	53                   	push   ebx
c0019932:	83 ec 08             	sub    esp,0x8
c0019935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019939:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001993c:	83 f8 02             	cmp    eax,0x2
c001993f:	76 50                	jbe    c0019991 <sysCallClose(regs*)+0x60>
c0019941:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019946:	74 58                	je     c00199a0 <sysCallClose(regs*)+0x6f>
c0019948:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001994d:	74 60                	je     c00199af <sysCallClose(regs*)+0x7e>
c001994f:	77 2f                	ja     c0019980 <sysCallClose(regs*)+0x4f>
c0019951:	83 ec 0c             	sub    esp,0xc
c0019954:	50                   	push   eax
c0019955:	e8 c5 77 ff ff       	call   c001111f <getFromFileDescriptor(int)>
c001995a:	89 c3                	mov    ebx,eax
c001995c:	89 04 24             	mov    DWORD PTR [esp],eax
c001995f:	e8 d4 8e ff ff       	call   c0012838 <File::close()>
c0019964:	83 c4 10             	add    esp,0x10
c0019967:	85 db                	test   ebx,ebx
c0019969:	74 0c                	je     c0019977 <sysCallClose(regs*)+0x46>
c001996b:	83 ec 0c             	sub    esp,0xc
c001996e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019970:	53                   	push   ebx
c0019971:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	31 c0                	xor    eax,eax
c0019979:	31 d2                	xor    edx,edx
c001997b:	83 c4 08             	add    esp,0x8
c001997e:	5b                   	pop    ebx
c001997f:	c3                   	ret    
c0019980:	83 ec 08             	sub    esp,0x8
c0019983:	50                   	push   eax
c0019984:	68 64 82 02 c0       	push   0xc0028264
c0019989:	e8 b9 88 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001998e:	83 c4 10             	add    esp,0x10
c0019991:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019996:	ba ff ff ff ff       	mov    edx,0xffffffff
c001999b:	83 c4 08             	add    esp,0x8
c001999e:	5b                   	pop    ebx
c001999f:	c3                   	ret    
c00199a0:	83 ec 0c             	sub    esp,0xc
c00199a3:	68 4b 83 02 c0       	push   0xc002834b
c00199a8:	e8 9a 88 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00199ad:	eb c5                	jmp    c0019974 <sysCallClose(regs*)+0x43>
c00199af:	83 ec 0c             	sub    esp,0xc
c00199b2:	68 59 83 02 c0       	push   0xc0028359
c00199b7:	eb ef                	jmp    c00199a8 <sysCallClose(regs*)+0x77>

c00199b9 <sysCallOpenDir(regs*)>:
c00199b9:	56                   	push   esi
c00199ba:	53                   	push   ebx
c00199bb:	53                   	push   ebx
c00199bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199c0:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00199c3:	85 f6                	test   esi,esi
c00199c5:	74 51                	je     c0019a18 <sysCallOpenDir(regs*)+0x5f>
c00199c7:	83 ec 0c             	sub    esp,0xc
c00199ca:	68 14 01 00 00       	push   0x114
c00199cf:	e8 84 87 ff ff       	call   c0012158 <operator new(unsigned long)>
c00199d4:	83 c4 0c             	add    esp,0xc
c00199d7:	89 c6                	mov    esi,eax
c00199d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199de:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00199e4:	56                   	push   esi
c00199e5:	e8 4e 92 ff ff       	call   c0012c38 <Directory::Directory(char const*, Process*)>
c00199ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00199ed:	e8 aa 92 ff ff       	call   c0012c9c <Directory::open()>
c00199f2:	83 c4 10             	add    esp,0x10
c00199f5:	85 c0                	test   eax,eax
c00199f7:	75 1f                	jne    c0019a18 <sysCallOpenDir(regs*)+0x5f>
c00199f9:	83 ec 0c             	sub    esp,0xc
c00199fc:	56                   	push   esi
c00199fd:	e8 68 74 ff ff       	call   c0010e6a <UnixFile::getFileDescriptor()>
c0019a02:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019a05:	83 c4 10             	add    esp,0x10
c0019a08:	89 02                	mov    DWORD PTR [edx],eax
c0019a0a:	c1 f8 1f             	sar    eax,0x1f
c0019a0d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019a10:	31 c0                	xor    eax,eax
c0019a12:	59                   	pop    ecx
c0019a13:	31 d2                	xor    edx,edx
c0019a15:	5b                   	pop    ebx
c0019a16:	5e                   	pop    esi
c0019a17:	c3                   	ret    
c0019a18:	59                   	pop    ecx
c0019a19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a23:	5b                   	pop    ebx
c0019a24:	5e                   	pop    esi
c0019a25:	c3                   	ret    

c0019a26 <sysCallMakeDir(regs*)>:
c0019a26:	56                   	push   esi
c0019a27:	53                   	push   ebx
c0019a28:	83 ec 10             	sub    esp,0x10
c0019a2b:	68 14 01 00 00       	push   0x114
c0019a30:	e8 23 87 ff ff       	call   c0012158 <operator new(unsigned long)>
c0019a35:	83 c4 0c             	add    esp,0xc
c0019a38:	89 c3                	mov    ebx,eax
c0019a3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a3f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a46:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019a49:	53                   	push   ebx
c0019a4a:	e8 e9 91 ff ff       	call   c0012c38 <Directory::Directory(char const*, Process*)>
c0019a4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a52:	e8 25 94 ff ff       	call   c0012e7c <Directory::create()>
c0019a57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a5a:	89 c6                	mov    esi,eax
c0019a5c:	e8 97 92 ff ff       	call   c0012cf8 <Directory::close()>
c0019a61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a66:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a69:	31 c0                	xor    eax,eax
c0019a6b:	85 f6                	test   esi,esi
c0019a6d:	0f 95 c0             	setne  al
c0019a70:	31 d2                	xor    edx,edx
c0019a72:	f7 d8                	neg    eax
c0019a74:	83 d2 00             	adc    edx,0x0
c0019a77:	83 c4 14             	add    esp,0x14
c0019a7a:	f7 da                	neg    edx
c0019a7c:	5b                   	pop    ebx
c0019a7d:	5e                   	pop    esi
c0019a7e:	c3                   	ret    

c0019a7f <sysCallCloseDir(regs*)>:
c0019a7f:	53                   	push   ebx
c0019a80:	83 ec 08             	sub    esp,0x8
c0019a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a87:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019a8a:	83 f8 02             	cmp    eax,0x2
c0019a8d:	76 47                	jbe    c0019ad6 <sysCallCloseDir(regs*)+0x57>
c0019a8f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019a94:	77 2f                	ja     c0019ac5 <sysCallCloseDir(regs*)+0x46>
c0019a96:	83 ec 0c             	sub    esp,0xc
c0019a99:	50                   	push   eax
c0019a9a:	e8 80 76 ff ff       	call   c001111f <getFromFileDescriptor(int)>
c0019a9f:	89 c3                	mov    ebx,eax
c0019aa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aa4:	e8 4f 92 ff ff       	call   c0012cf8 <Directory::close()>
c0019aa9:	83 c4 10             	add    esp,0x10
c0019aac:	85 db                	test   ebx,ebx
c0019aae:	74 0c                	je     c0019abc <sysCallCloseDir(regs*)+0x3d>
c0019ab0:	83 ec 0c             	sub    esp,0xc
c0019ab3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ab5:	53                   	push   ebx
c0019ab6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ab9:	83 c4 10             	add    esp,0x10
c0019abc:	31 c0                	xor    eax,eax
c0019abe:	31 d2                	xor    edx,edx
c0019ac0:	83 c4 08             	add    esp,0x8
c0019ac3:	5b                   	pop    ebx
c0019ac4:	c3                   	ret    
c0019ac5:	83 ec 08             	sub    esp,0x8
c0019ac8:	50                   	push   eax
c0019ac9:	68 8c 82 02 c0       	push   0xc002828c
c0019ace:	e8 74 87 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0019ad3:	83 c4 10             	add    esp,0x10
c0019ad6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019adb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ae0:	83 c4 08             	add    esp,0x8
c0019ae3:	5b                   	pop    ebx
c0019ae4:	c3                   	ret    

c0019ae5 <sysCallWait(regs*)>:
c0019ae5:	83 ec 10             	sub    esp,0x10
c0019ae8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019aec:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019aef:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019af2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019af5:	e8 ed 22 00 00       	call   c001bde7 <waitTask(int, int*, int)>
c0019afa:	83 c4 1c             	add    esp,0x1c
c0019afd:	99                   	cdq    
c0019afe:	c3                   	ret    

c0019aff <sysCallRmdir(regs*)>:
c0019aff:	56                   	push   esi
c0019b00:	53                   	push   ebx
c0019b01:	83 ec 10             	sub    esp,0x10
c0019b04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b08:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b0b:	68 14 01 00 00       	push   0x114
c0019b10:	e8 43 86 ff ff       	call   c0012158 <operator new(unsigned long)>
c0019b15:	83 c4 0c             	add    esp,0xc
c0019b18:	89 c3                	mov    ebx,eax
c0019b1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b1f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b22:	56                   	push   esi
c0019b23:	53                   	push   ebx
c0019b24:	e8 4d 8c ff ff       	call   c0012776 <File::File(char const*, Process*)>
c0019b29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b2c:	e8 21 8e ff ff       	call   c0012952 <File::unlink()>
c0019b31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b34:	89 c6                	mov    esi,eax
c0019b36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b3b:	31 c0                	xor    eax,eax
c0019b3d:	85 f6                	test   esi,esi
c0019b3f:	0f 95 c0             	setne  al
c0019b42:	31 d2                	xor    edx,edx
c0019b44:	f7 d8                	neg    eax
c0019b46:	83 d2 00             	adc    edx,0x0
c0019b49:	83 c4 14             	add    esp,0x14
c0019b4c:	f7 da                	neg    edx
c0019b4e:	5b                   	pop    ebx
c0019b4f:	5e                   	pop    esi
c0019b50:	c3                   	ret    

c0019b51 <sysCallUnlink(regs*)>:
c0019b51:	56                   	push   esi
c0019b52:	53                   	push   ebx
c0019b53:	83 ec 10             	sub    esp,0x10
c0019b56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b5a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b5d:	68 14 01 00 00       	push   0x114
c0019b62:	e8 f1 85 ff ff       	call   c0012158 <operator new(unsigned long)>
c0019b67:	83 c4 0c             	add    esp,0xc
c0019b6a:	89 c3                	mov    ebx,eax
c0019b6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b71:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b74:	56                   	push   esi
c0019b75:	53                   	push   ebx
c0019b76:	e8 fb 8b ff ff       	call   c0012776 <File::File(char const*, Process*)>
c0019b7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b7e:	e8 cf 8d ff ff       	call   c0012952 <File::unlink()>
c0019b83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b86:	89 c6                	mov    esi,eax
c0019b88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b8d:	31 c0                	xor    eax,eax
c0019b8f:	85 f6                	test   esi,esi
c0019b91:	0f 95 c0             	setne  al
c0019b94:	31 d2                	xor    edx,edx
c0019b96:	f7 d8                	neg    eax
c0019b98:	83 d2 00             	adc    edx,0x0
c0019b9b:	83 c4 14             	add    esp,0x14
c0019b9e:	f7 da                	neg    edx
c0019ba0:	5b                   	pop    ebx
c0019ba1:	5e                   	pop    esi
c0019ba2:	c3                   	ret    

c0019ba3 <sysCallGetArgv(regs*)>:
c0019ba3:	83 ec 0c             	sub    esp,0xc
c0019ba6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019baa:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019bad:	85 c0                	test   eax,eax
c0019baf:	78 2b                	js     c0019bdc <sysCallGetArgv(regs*)+0x39>
c0019bb1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019bb7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019bba:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019bc0:	7d 1a                	jge    c0019bdc <sysCallGetArgv(regs*)+0x39>
c0019bc2:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019bc9:	85 c0                	test   eax,eax
c0019bcb:	74 17                	je     c0019be4 <sysCallGetArgv(regs*)+0x41>
c0019bcd:	83 ec 08             	sub    esp,0x8
c0019bd0:	50                   	push   eax
c0019bd1:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019bd4:	e8 8b 6b fe ff       	call   c0000764 <strcpy>
c0019bd9:	83 c4 10             	add    esp,0x10
c0019bdc:	31 c0                	xor    eax,eax
c0019bde:	31 d2                	xor    edx,edx
c0019be0:	83 c4 0c             	add    esp,0xc
c0019be3:	c3                   	ret    
c0019be4:	b8 01 00 00 00       	mov    eax,0x1
c0019be9:	31 d2                	xor    edx,edx
c0019beb:	83 c4 0c             	add    esp,0xc
c0019bee:	c3                   	ret    

c0019bef <sysCallTTYName(regs*)>:
c0019bef:	56                   	push   esi
c0019bf0:	53                   	push   ebx
c0019bf1:	53                   	push   ebx
c0019bf2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bf6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bf9:	85 c0                	test   eax,eax
c0019bfb:	74 5f                	je     c0019c5c <sysCallTTYName(regs*)+0x6d>
c0019bfd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c00:	83 f8 02             	cmp    eax,0x2
c0019c03:	77 3e                	ja     c0019c43 <sysCallTTYName(regs*)+0x54>
c0019c05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c0a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019c0d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019c13:	85 db                	test   ebx,ebx
c0019c15:	74 45                	je     c0019c5c <sysCallTTYName(regs*)+0x6d>
c0019c17:	83 ec 0c             	sub    esp,0xc
c0019c1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c1c:	53                   	push   ebx
c0019c1d:	ff 10                	call   DWORD PTR [eax]
c0019c1f:	83 c4 10             	add    esp,0x10
c0019c22:	84 c0                	test   al,al
c0019c24:	74 41                	je     c0019c67 <sysCallTTYName(regs*)+0x78>
c0019c26:	83 ec 08             	sub    esp,0x8
c0019c29:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019c2f:	53                   	push   ebx
c0019c30:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c33:	e8 2c 6b fe ff       	call   c0000764 <strcpy>
c0019c38:	83 c4 10             	add    esp,0x10
c0019c3b:	31 c0                	xor    eax,eax
c0019c3d:	59                   	pop    ecx
c0019c3e:	31 d2                	xor    edx,edx
c0019c40:	5b                   	pop    ebx
c0019c41:	5e                   	pop    esi
c0019c42:	c3                   	ret    
c0019c43:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019c48:	74 bb                	je     c0019c05 <sysCallTTYName(regs*)+0x16>
c0019c4a:	83 ec 0c             	sub    esp,0xc
c0019c4d:	50                   	push   eax
c0019c4e:	e8 cc 74 ff ff       	call   c001111f <getFromFileDescriptor(int)>
c0019c53:	83 c4 10             	add    esp,0x10
c0019c56:	89 c3                	mov    ebx,eax
c0019c58:	85 db                	test   ebx,ebx
c0019c5a:	75 bb                	jne    c0019c17 <sysCallTTYName(regs*)+0x28>
c0019c5c:	59                   	pop    ecx
c0019c5d:	b8 01 00 00 00       	mov    eax,0x1
c0019c62:	31 d2                	xor    edx,edx
c0019c64:	5b                   	pop    ebx
c0019c65:	5e                   	pop    esi
c0019c66:	c3                   	ret    
c0019c67:	59                   	pop    ecx
c0019c68:	b8 02 00 00 00       	mov    eax,0x2
c0019c6d:	31 d2                	xor    edx,edx
c0019c6f:	5b                   	pop    ebx
c0019c70:	5e                   	pop    esi
c0019c71:	c3                   	ret    

c0019c72 <sysCallGetEnv(regs*)>:
c0019c72:	83 ec 0c             	sub    esp,0xc
c0019c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c79:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019c7c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019c7f:	85 c9                	test   ecx,ecx
c0019c81:	75 22                	jne    c0019ca5 <sysCallGetEnv(regs*)+0x33>
c0019c83:	85 d2                	test   edx,edx
c0019c85:	74 08                	je     c0019c8f <sysCallGetEnv(regs*)+0x1d>
c0019c87:	31 c0                	xor    eax,eax
c0019c89:	31 d2                	xor    edx,edx
c0019c8b:	83 c4 0c             	add    esp,0xc
c0019c8e:	c3                   	ret    
c0019c8f:	83 ec 0c             	sub    esp,0xc
c0019c92:	68 b0 82 02 c0       	push   0xc00282b0
c0019c97:	e8 46 6a fe ff       	call   c00006e2 <strlen>
c0019c9c:	83 c4 10             	add    esp,0x10
c0019c9f:	31 d2                	xor    edx,edx
c0019ca1:	83 c4 0c             	add    esp,0xc
c0019ca4:	c3                   	ret    
c0019ca5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019ca8:	85 d2                	test   edx,edx
c0019caa:	74 05                	je     c0019cb1 <sysCallGetEnv(regs*)+0x3f>
c0019cac:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019caf:	eb d6                	jmp    c0019c87 <sysCallGetEnv(regs*)+0x15>
c0019cb1:	83 ec 08             	sub    esp,0x8
c0019cb4:	68 b0 82 02 c0       	push   0xc00282b0
c0019cb9:	50                   	push   eax
c0019cba:	e8 a5 6a fe ff       	call   c0000764 <strcpy>
c0019cbf:	83 c4 10             	add    esp,0x10
c0019cc2:	eb c3                	jmp    c0019c87 <sysCallGetEnv(regs*)+0x15>

c0019cc4 <sysCallUSleep(regs*)>:
c0019cc4:	83 ec 14             	sub    esp,0x14
c0019cc7:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019ccc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cd0:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019cd7:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019cda:	01 ca                	add    edx,ecx
c0019cdc:	52                   	push   edx
c0019cdd:	50                   	push   eax
c0019cde:	e8 9d 21 00 00       	call   c001be80 <nanoSleep(unsigned long long)>
c0019ce3:	31 c0                	xor    eax,eax
c0019ce5:	31 d2                	xor    edx,edx
c0019ce7:	83 c4 1c             	add    esp,0x1c
c0019cea:	c3                   	ret    

c0019ceb <sysCallSpawn(regs*)>:
c0019ceb:	56                   	push   esi
c0019cec:	53                   	push   ebx
c0019ced:	53                   	push   ebx
c0019cee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cf2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019cf5:	85 f6                	test   esi,esi
c0019cf7:	75 08                	jne    c0019d01 <sysCallSpawn(regs*)+0x16>
c0019cf9:	59                   	pop    ecx
c0019cfa:	31 c0                	xor    eax,eax
c0019cfc:	31 d2                	xor    edx,edx
c0019cfe:	5b                   	pop    ebx
c0019cff:	5e                   	pop    esi
c0019d00:	c3                   	ret    
c0019d01:	83 ec 0c             	sub    esp,0xc
c0019d04:	68 3b 07 00 00       	push   0x73b
c0019d09:	e8 4a 84 ff ff       	call   c0012158 <operator new(unsigned long)>
c0019d0e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019d11:	89 c6                	mov    esi,eax
c0019d13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d18:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019d1b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019d1e:	56                   	push   esi
c0019d1f:	e8 bc 18 00 00       	call   c001b5e0 <Process::Process(char const*, Process*, char**)>
c0019d24:	83 c4 20             	add    esp,0x20
c0019d27:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019d2e:	75 c9                	jne    c0019cf9 <sysCallSpawn(regs*)+0xe>
c0019d30:	83 ec 0c             	sub    esp,0xc
c0019d33:	56                   	push   esi
c0019d34:	e8 0d 1e 00 00       	call   c001bb46 <Process::createUserThread()>
c0019d39:	8b 06                	mov    eax,DWORD PTR [esi]
c0019d3b:	83 c4 10             	add    esp,0x10
c0019d3e:	99                   	cdq    
c0019d3f:	59                   	pop    ecx
c0019d40:	5b                   	pop    ebx
c0019d41:	5e                   	pop    esi
c0019d42:	c3                   	ret    

c0019d43 <sysAppSettings(regs*)>:
c0019d43:	53                   	push   ebx
c0019d44:	83 ec 08             	sub    esp,0x8
c0019d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d4b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019d4e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019d54:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019d59:	66 3d c0 09          	cmp    ax,0x9c0
c0019d5d:	75 2f                	jne    c0019d8e <sysAppSettings(regs*)+0x4b>
c0019d5f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019d65:	83 e0 1f             	and    eax,0x1f
c0019d68:	3c 01                	cmp    al,0x1
c0019d6a:	74 2e                	je     c0019d9a <sysAppSettings(regs*)+0x57>
c0019d6c:	3c 07                	cmp    al,0x7
c0019d6e:	0f 84 bd 00 00 00    	je     c0019e31 <sysAppSettings(regs*)+0xee>
c0019d74:	84 c0                	test   al,al
c0019d76:	0f 84 dc 00 00 00    	je     c0019e58 <sysAppSettings(regs*)+0x115>
c0019d7c:	3c 08                	cmp    al,0x8
c0019d7e:	74 6d                	je     c0019ded <sysAppSettings(regs*)+0xaa>
c0019d80:	0f b6 c0             	movzx  eax,al
c0019d83:	83 c4 08             	add    esp,0x8
c0019d86:	05 e8 03 00 00       	add    eax,0x3e8
c0019d8b:	5b                   	pop    ebx
c0019d8c:	99                   	cdq    
c0019d8d:	c3                   	ret    
c0019d8e:	b8 01 00 00 00       	mov    eax,0x1
c0019d93:	31 d2                	xor    edx,edx
c0019d95:	83 c4 08             	add    esp,0x8
c0019d98:	5b                   	pop    ebx
c0019d99:	c3                   	ret    
c0019d9a:	51                   	push   ecx
c0019d9b:	68 00 01 00 00       	push   0x100
c0019da0:	6a 00                	push   0x0
c0019da2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019da7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019daa:	83 c0 0c             	add    eax,0xc
c0019dad:	50                   	push   eax
c0019dae:	e8 12 69 fe ff       	call   c00006c5 <memset>
c0019db3:	83 c4 0c             	add    esp,0xc
c0019db6:	68 ff 00 00 00       	push   0xff
c0019dbb:	53                   	push   ebx
c0019dbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dc4:	83 c0 0c             	add    eax,0xc
c0019dc7:	50                   	push   eax
c0019dc8:	e8 c2 68 fe ff       	call   c000068f <memcpy>
c0019dcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dd2:	5b                   	pop    ebx
c0019dd3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dd6:	5a                   	pop    edx
c0019dd7:	8d 50 0c             	lea    edx,[eax+0xc]
c0019dda:	52                   	push   edx
c0019ddb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019de1:	e8 00 65 ff ff       	call   c00102e6 <VgaText::setTitle(char*)>
c0019de6:	83 c4 10             	add    esp,0x10
c0019de9:	31 c0                	xor    eax,eax
c0019deb:	eb a6                	jmp    c0019d93 <sysAppSettings(regs*)+0x50>
c0019ded:	83 ec 08             	sub    esp,0x8
c0019df0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019df6:	83 e0 0f             	and    eax,0xf
c0019df9:	50                   	push   eax
c0019dfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e08:	e8 c9 64 ff ff       	call   c00102d6 <VgaText::setTitleColour(VgaColour)>
c0019e0d:	58                   	pop    eax
c0019e0e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019e14:	5a                   	pop    edx
c0019e15:	c1 e8 04             	shr    eax,0x4
c0019e18:	83 e0 0f             	and    eax,0xf
c0019e1b:	50                   	push   eax
c0019e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e2a:	e8 97 64 ff ff       	call   c00102c6 <VgaText::setTitleTextColour(VgaColour)>
c0019e2f:	eb b5                	jmp    c0019de6 <sysAppSettings(regs*)+0xa3>
c0019e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e39:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019e3f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019e45:	c0 e8 06             	shr    al,0x6
c0019e48:	83 e0 01             	and    eax,0x1
c0019e4b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019e51:	31 c0                	xor    eax,eax
c0019e53:	e9 3b ff ff ff       	jmp    c0019d93 <sysAppSettings(regs*)+0x50>
c0019e58:	b8 02 00 00 00       	mov    eax,0x2
c0019e5d:	e9 31 ff ff ff       	jmp    c0019d93 <sysAppSettings(regs*)+0x50>

c0019e62 <sysSetFatAttrib(regs*)>:
c0019e62:	57                   	push   edi
c0019e63:	56                   	push   esi
c0019e64:	53                   	push   ebx
c0019e65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e69:	83 ec 0c             	sub    esp,0xc
c0019e6c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e6f:	68 14 01 00 00       	push   0x114
c0019e74:	e8 df 82 ff ff       	call   c0012158 <operator new(unsigned long)>
c0019e79:	83 c4 0c             	add    esp,0xc
c0019e7c:	89 c3                	mov    ebx,eax
c0019e7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e83:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e86:	57                   	push   edi
c0019e87:	53                   	push   ebx
c0019e88:	e8 e9 88 ff ff       	call   c0012776 <File::File(char const*, Process*)>
c0019e8d:	83 c4 0c             	add    esp,0xc
c0019e90:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e93:	0f b6 d4             	movzx  edx,ah
c0019e96:	0f b6 c0             	movzx  eax,al
c0019e99:	52                   	push   edx
c0019e9a:	50                   	push   eax
c0019e9b:	53                   	push   ebx
c0019e9c:	e8 4b 8b ff ff       	call   c00129ec <File::chfatattr(unsigned char, unsigned char)>
c0019ea1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ea4:	89 c6                	mov    esi,eax
c0019ea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ea8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019eab:	83 c4 10             	add    esp,0x10
c0019eae:	31 c0                	xor    eax,eax
c0019eb0:	5b                   	pop    ebx
c0019eb1:	85 f6                	test   esi,esi
c0019eb3:	5e                   	pop    esi
c0019eb4:	0f 95 c0             	setne  al
c0019eb7:	5f                   	pop    edi
c0019eb8:	31 d2                	xor    edx,edx
c0019eba:	f7 d8                	neg    eax
c0019ebc:	83 d2 00             	adc    edx,0x0
c0019ebf:	f7 da                	neg    edx
c0019ec1:	c3                   	ret    

c0019ec2 <sysPanic(regs*)>:
c0019ec2:	83 ec 18             	sub    esp,0x18
c0019ec5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ec9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ecc:	e8 14 eb ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0019ed1:	c7 04 24 67 83 02 c0 	mov    DWORD PTR [esp],0xc0028367
c0019ed8:	e8 08 eb ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0019edd:	b8 01 00 00 00       	mov    eax,0x1
c0019ee2:	31 d2                	xor    edx,edx
c0019ee4:	83 c4 1c             	add    esp,0x1c
c0019ee7:	c3                   	ret    

c0019ee8 <sysPipe(regs*)>:
c0019ee8:	57                   	push   edi
c0019ee9:	56                   	push   esi
c0019eea:	53                   	push   ebx
c0019eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eef:	83 ec 0c             	sub    esp,0xc
c0019ef2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019ef5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019ef8:	6a 20                	push   0x20
c0019efa:	e8 59 82 ff ff       	call   c0012158 <operator new(unsigned long)>
c0019eff:	89 c3                	mov    ebx,eax
c0019f01:	58                   	pop    eax
c0019f02:	5a                   	pop    edx
c0019f03:	68 00 50 00 00       	push   0x5000
c0019f08:	53                   	push   ebx
c0019f09:	e8 16 5d ff ff       	call   c000fc24 <Pipe::Pipe(int)>
c0019f0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f11:	e8 54 6f ff ff       	call   c0010e6a <UnixFile::getFileDescriptor()>
c0019f16:	89 07                	mov    DWORD PTR [edi],eax
c0019f18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f1b:	e8 4a 6f ff ff       	call   c0010e6a <UnixFile::getFileDescriptor()>
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	89 06                	mov    DWORD PTR [esi],eax
c0019f25:	31 d2                	xor    edx,edx
c0019f27:	5b                   	pop    ebx
c0019f28:	31 c0                	xor    eax,eax
c0019f2a:	5e                   	pop    esi
c0019f2b:	5f                   	pop    edi
c0019f2c:	c3                   	ret    

c0019f2d <sysGetUnixTime(regs*)>:
c0019f2d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0019f32:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019f38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f3c:	e9 fd 91 ff ff       	jmp    c001313e <Clock::timeInSecondsLocal()>

c0019f41 <string_ends_with(char const*, char const*)>:
c0019f41:	57                   	push   edi
c0019f42:	56                   	push   esi
c0019f43:	53                   	push   ebx
c0019f44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f48:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f4c:	83 ec 0c             	sub    esp,0xc
c0019f4f:	53                   	push   ebx
c0019f50:	e8 8d 67 fe ff       	call   c00006e2 <strlen>
c0019f55:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f58:	89 c6                	mov    esi,eax
c0019f5a:	e8 83 67 fe ff       	call   c00006e2 <strlen>
c0019f5f:	83 c4 10             	add    esp,0x10
c0019f62:	39 c6                	cmp    esi,eax
c0019f64:	7d 06                	jge    c0019f6c <string_ends_with(char const*, char const*)+0x2b>
c0019f66:	5b                   	pop    ebx
c0019f67:	31 c0                	xor    eax,eax
c0019f69:	5e                   	pop    esi
c0019f6a:	5f                   	pop    edi
c0019f6b:	c3                   	ret    
c0019f6c:	83 ec 08             	sub    esp,0x8
c0019f6f:	29 c6                	sub    esi,eax
c0019f71:	57                   	push   edi
c0019f72:	01 f3                	add    ebx,esi
c0019f74:	53                   	push   ebx
c0019f75:	e8 3b 68 fe ff       	call   c00007b5 <strcmp>
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	85 c0                	test   eax,eax
c0019f7f:	5b                   	pop    ebx
c0019f80:	0f 94 c0             	sete   al
c0019f83:	5e                   	pop    esi
c0019f84:	0f b6 c0             	movzx  eax,al
c0019f87:	5f                   	pop    edi
c0019f88:	c3                   	ret    

c0019f89 <sysCallOpen(regs*)>:
c0019f89:	56                   	push   esi
c0019f8a:	53                   	push   ebx
c0019f8b:	81 ec 04 01 00 00    	sub    esp,0x104
c0019f91:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0019f98:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0019f9b:	85 c9                	test   ecx,ecx
c0019f9d:	0f 84 b3 00 00 00    	je     c001a056 <sysCallOpen(regs*)+0xcd>
c0019fa3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0019fa6:	85 c0                	test   eax,eax
c0019fa8:	0f 84 a8 00 00 00    	je     c001a056 <sysCallOpen(regs*)+0xcd>
c0019fae:	52                   	push   edx
c0019faf:	68 76 83 02 c0       	push   0xc0028376
c0019fb4:	50                   	push   eax
c0019fb5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019fb9:	56                   	push   esi
c0019fba:	e8 0d 86 ff ff       	call   c00125cc <standardiseFiles(char*, char const*, char const*)>
c0019fbf:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fc2:	e8 1b 67 fe ff       	call   c00006e2 <strlen>
c0019fc7:	83 c4 10             	add    esp,0x10
c0019fca:	48                   	dec    eax
c0019fcb:	74 1d                	je     c0019fea <sysCallOpen(regs*)+0x61>
c0019fcd:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0019fd0:	eb 0f                	jmp    c0019fe1 <sysCallOpen(regs*)+0x58>
c0019fd2:	80 fa 3a             	cmp    dl,0x3a
c0019fd5:	74 0f                	je     c0019fe6 <sysCallOpen(regs*)+0x5d>
c0019fd7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0019fdb:	48                   	dec    eax
c0019fdc:	74 0c                	je     c0019fea <sysCallOpen(regs*)+0x61>
c0019fde:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0019fe1:	80 fa 2e             	cmp    dl,0x2e
c0019fe4:	75 ec                	jne    c0019fd2 <sysCallOpen(regs*)+0x49>
c0019fe6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0019fea:	83 ec 08             	sub    esp,0x8
c0019fed:	68 7a 83 02 c0       	push   0xc002837a
c0019ff2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019ff5:	e8 47 ff ff ff       	call   c0019f41 <string_ends_with(char const*, char const*)>
c0019ffa:	83 c4 10             	add    esp,0x10
c0019ffd:	85 c0                	test   eax,eax
c0019fff:	75 17                	jne    c001a018 <sysCallOpen(regs*)+0x8f>
c001a001:	83 ec 08             	sub    esp,0x8
c001a004:	68 9b 83 02 c0       	push   0xc002839b
c001a009:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a00c:	e8 30 ff ff ff       	call   c0019f41 <string_ends_with(char const*, char const*)>
c001a011:	83 c4 10             	add    esp,0x10
c001a014:	85 c0                	test   eax,eax
c001a016:	74 51                	je     c001a069 <sysCallOpen(regs*)+0xe0>
c001a018:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a01b:	83 ec 08             	sub    esp,0x8
c001a01e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a024:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a02b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a02e:	ff 30                	push   DWORD PTR [eax]
c001a030:	68 7f 83 02 c0       	push   0xc002837f
c001a035:	e8 0d 82 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001a03a:	c7 04 24 8e 83 02 c0 	mov    DWORD PTR [esp],0xc002838e
c001a041:	e8 01 82 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001a046:	83 c4 10             	add    esp,0x10
c001a049:	81 c4 04 01 00 00    	add    esp,0x104
c001a04f:	31 c0                	xor    eax,eax
c001a051:	31 d2                	xor    edx,edx
c001a053:	5b                   	pop    ebx
c001a054:	5e                   	pop    esi
c001a055:	c3                   	ret    
c001a056:	81 c4 04 01 00 00    	add    esp,0x104
c001a05c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a061:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a066:	5b                   	pop    ebx
c001a067:	5e                   	pop    esi
c001a068:	c3                   	ret    
c001a069:	83 ec 08             	sub    esp,0x8
c001a06c:	68 7b 83 02 c0       	push   0xc002837b
c001a071:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a074:	e8 3c 67 fe ff       	call   c00007b5 <strcmp>
c001a079:	83 c4 10             	add    esp,0x10
c001a07c:	85 c0                	test   eax,eax
c001a07e:	74 98                	je     c001a018 <sysCallOpen(regs*)+0x8f>
c001a080:	83 ec 08             	sub    esp,0x8
c001a083:	68 7a 83 02 c0       	push   0xc002837a
c001a088:	56                   	push   esi
c001a089:	e8 b3 fe ff ff       	call   c0019f41 <string_ends_with(char const*, char const*)>
c001a08e:	83 c4 10             	add    esp,0x10
c001a091:	85 c0                	test   eax,eax
c001a093:	75 83                	jne    c001a018 <sysCallOpen(regs*)+0x8f>
c001a095:	83 ec 08             	sub    esp,0x8
c001a098:	68 a0 83 02 c0       	push   0xc00283a0
c001a09d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0a0:	e8 9c fe ff ff       	call   c0019f41 <string_ends_with(char const*, char const*)>
c001a0a5:	83 c4 10             	add    esp,0x10
c001a0a8:	85 c0                	test   eax,eax
c001a0aa:	0f 85 d1 00 00 00    	jne    c001a181 <sysCallOpen(regs*)+0x1f8>
c001a0b0:	83 ec 08             	sub    esp,0x8
c001a0b3:	68 a5 83 02 c0       	push   0xc00283a5
c001a0b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0bb:	e8 81 fe ff ff       	call   c0019f41 <string_ends_with(char const*, char const*)>
c001a0c0:	83 c4 10             	add    esp,0x10
c001a0c3:	85 c0                	test   eax,eax
c001a0c5:	0f 85 b6 00 00 00    	jne    c001a181 <sysCallOpen(regs*)+0x1f8>
c001a0cb:	83 ec 08             	sub    esp,0x8
c001a0ce:	68 a1 83 02 c0       	push   0xc00283a1
c001a0d3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0d6:	e8 da 66 fe ff       	call   c00007b5 <strcmp>
c001a0db:	83 c4 10             	add    esp,0x10
c001a0de:	85 c0                	test   eax,eax
c001a0e0:	0f 84 9b 00 00 00    	je     c001a181 <sysCallOpen(regs*)+0x1f8>
c001a0e6:	83 ec 08             	sub    esp,0x8
c001a0e9:	68 a0 83 02 c0       	push   0xc00283a0
c001a0ee:	56                   	push   esi
c001a0ef:	e8 4d fe ff ff       	call   c0019f41 <string_ends_with(char const*, char const*)>
c001a0f4:	83 c4 10             	add    esp,0x10
c001a0f7:	85 c0                	test   eax,eax
c001a0f9:	0f 85 82 00 00 00    	jne    c001a181 <sysCallOpen(regs*)+0x1f8>
c001a0ff:	83 ec 0c             	sub    esp,0xc
c001a102:	68 14 01 00 00       	push   0x114
c001a107:	e8 4c 80 ff ff       	call   c0012158 <operator new(unsigned long)>
c001a10c:	83 c4 0c             	add    esp,0xc
c001a10f:	89 c6                	mov    esi,eax
c001a111:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a116:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a119:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a11c:	56                   	push   esi
c001a11d:	e8 54 86 ff ff       	call   c0012776 <File::File(char const*, Process*)>
c001a122:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a125:	83 c4 10             	add    esp,0x10
c001a128:	0f b6 c2             	movzx  eax,dl
c001a12b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a12e:	89 d0                	mov    eax,edx
c001a130:	83 e0 01             	and    eax,0x1
c001a133:	f6 c2 02             	test   dl,0x2
c001a136:	74 03                	je     c001a13b <sysCallOpen(regs*)+0x1b2>
c001a138:	83 c8 02             	or     eax,0x2
c001a13b:	f6 c2 04             	test   dl,0x4
c001a13e:	74 03                	je     c001a143 <sysCallOpen(regs*)+0x1ba>
c001a140:	83 c8 04             	or     eax,0x4
c001a143:	f6 c2 08             	test   dl,0x8
c001a146:	74 03                	je     c001a14b <sysCallOpen(regs*)+0x1c2>
c001a148:	83 c8 0a             	or     eax,0xa
c001a14b:	83 e2 10             	and    edx,0x10
c001a14e:	74 03                	je     c001a153 <sysCallOpen(regs*)+0x1ca>
c001a150:	83 c8 12             	or     eax,0x12
c001a153:	83 ec 08             	sub    esp,0x8
c001a156:	50                   	push   eax
c001a157:	56                   	push   esi
c001a158:	e8 7d 86 ff ff       	call   c00127da <File::open(FileOpenMode)>
c001a15d:	83 c4 10             	add    esp,0x10
c001a160:	85 c0                	test   eax,eax
c001a162:	0f 85 ee fe ff ff    	jne    c001a056 <sysCallOpen(regs*)+0xcd>
c001a168:	83 ec 0c             	sub    esp,0xc
c001a16b:	56                   	push   esi
c001a16c:	e8 f9 6c ff ff       	call   c0010e6a <UnixFile::getFileDescriptor()>
c001a171:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a174:	89 02                	mov    DWORD PTR [edx],eax
c001a176:	c1 f8 1f             	sar    eax,0x1f
c001a179:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a17c:	e9 c5 fe ff ff       	jmp    c001a046 <sysCallOpen(regs*)+0xbd>
c001a181:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a184:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a18a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a191:	e9 b3 fe ff ff       	jmp    c001a049 <sysCallOpen(regs*)+0xc0>

c001a196 <setupSystemCalls()>:
c001a196:	c7 05 60 ae 02 c0 f2 93 01 c0 	mov    DWORD PTR ds:0xc002ae60,0xc00193f2
c001a1a0:	c7 05 64 ae 02 c0 20 92 01 c0 	mov    DWORD PTR ds:0xc002ae64,0xc0019220
c001a1aa:	c7 05 68 ae 02 c0 35 93 01 c0 	mov    DWORD PTR ds:0xc002ae68,0xc0019335
c001a1b4:	c7 05 6c ae 02 c0 8a 93 01 c0 	mov    DWORD PTR ds:0xc002ae6c,0xc001938a
c001a1be:	c7 05 70 ae 02 c0 cd 92 01 c0 	mov    DWORD PTR ds:0xc002ae70,0xc00192cd
c001a1c8:	c7 05 74 ae 02 c0 0c 94 01 c0 	mov    DWORD PTR ds:0xc002ae74,0xc001940c
c001a1d2:	c7 05 78 ae 02 c0 b1 95 01 c0 	mov    DWORD PTR ds:0xc002ae78,0xc00195b1
c001a1dc:	c7 05 7c ae 02 c0 d0 95 01 c0 	mov    DWORD PTR ds:0xc002ae7c,0xc00195d0
c001a1e6:	c7 05 84 ae 02 c0 31 99 01 c0 	mov    DWORD PTR ds:0xc002ae84,0xc0019931
c001a1f0:	c7 05 80 ae 02 c0 89 9f 01 c0 	mov    DWORD PTR ds:0xc002ae80,0xc0019f89
c001a1fa:	c7 05 88 ae 02 c0 b9 99 01 c0 	mov    DWORD PTR ds:0xc002ae88,0xc00199b9
c001a204:	c7 05 8c ae 02 c0 2f 96 01 c0 	mov    DWORD PTR ds:0xc002ae8c,0xc001962f
c001a20e:	c7 05 90 ae 02 c0 18 94 01 c0 	mov    DWORD PTR ds:0xc002ae90,0xc0019418
c001a218:	c7 05 94 ae 02 c0 1d 94 01 c0 	mov    DWORD PTR ds:0xc002ae94,0xc001941d
c001a222:	c7 05 98 ae 02 c0 26 9a 01 c0 	mov    DWORD PTR ds:0xc002ae98,0xc0019a26
c001a22c:	c7 05 9c ae 02 c0 7f 9a 01 c0 	mov    DWORD PTR ds:0xc002ae9c,0xc0019a7f
c001a236:	c7 05 a0 ae 02 c0 17 97 01 c0 	mov    DWORD PTR ds:0xc002aea0,0xc0019717
c001a240:	c7 05 a4 ae 02 c0 80 97 01 c0 	mov    DWORD PTR ds:0xc002aea4,0xc0019780
c001a24a:	c7 05 a8 ae 02 c0 ae 98 01 c0 	mov    DWORD PTR ds:0xc002aea8,0xc00198ae
c001a254:	c7 05 ac ae 02 c0 22 94 01 c0 	mov    DWORD PTR ds:0xc002aeac,0xc0019422
c001a25e:	c7 05 b0 ae 02 c0 e5 9a 01 c0 	mov    DWORD PTR ds:0xc002aeb0,0xc0019ae5
c001a268:	c7 05 b4 ae 02 c0 2c 94 01 c0 	mov    DWORD PTR ds:0xc002aeb4,0xc001942c
c001a272:	c7 05 b8 ae 02 c0 37 94 01 c0 	mov    DWORD PTR ds:0xc002aeb8,0xc0019437
c001a27c:	c7 05 bc ae 02 c0 ff 9a 01 c0 	mov    DWORD PTR ds:0xc002aebc,0xc0019aff
c001a286:	c7 05 c0 ae 02 c0 51 9b 01 c0 	mov    DWORD PTR ds:0xc002aec0,0xc0019b51
c001a290:	c7 05 c4 ae 02 c0 42 94 01 c0 	mov    DWORD PTR ds:0xc002aec4,0xc0019442
c001a29a:	c7 05 c8 ae 02 c0 a3 9b 01 c0 	mov    DWORD PTR ds:0xc002aec8,0xc0019ba3
c001a2a4:	c7 05 cc ae 02 c0 ec 95 01 c0 	mov    DWORD PTR ds:0xc002aecc,0xc00195ec
c001a2ae:	c7 05 d0 ae 02 c0 ef 9b 01 c0 	mov    DWORD PTR ds:0xc002aed0,0xc0019bef
c001a2b8:	c7 05 d4 ae 02 c0 bd 96 01 c0 	mov    DWORD PTR ds:0xc002aed4,0xc00196bd
c001a2c2:	c7 05 d8 ae 02 c0 c4 9c 01 c0 	mov    DWORD PTR ds:0xc002aed8,0xc0019cc4
c001a2cc:	c7 05 dc ae 02 c0 fd 97 01 c0 	mov    DWORD PTR ds:0xc002aedc,0xc00197fd
c001a2d6:	c7 05 e0 ae 02 c0 eb 9c 01 c0 	mov    DWORD PTR ds:0xc002aee0,0xc0019ceb
c001a2e0:	c7 05 e4 ae 02 c0 72 9c 01 c0 	mov    DWORD PTR ds:0xc002aee4,0xc0019c72
c001a2ea:	c7 05 e8 ae 02 c0 43 9d 01 c0 	mov    DWORD PTR ds:0xc002aee8,0xc0019d43
c001a2f4:	c7 05 ec ae 02 c0 52 94 01 c0 	mov    DWORD PTR ds:0xc002aeec,0xc0019452
c001a2fe:	c7 05 f0 ae 02 c0 bc 94 01 c0 	mov    DWORD PTR ds:0xc002aef0,0xc00194bc
c001a308:	c7 05 f4 ae 02 c0 02 95 01 c0 	mov    DWORD PTR ds:0xc002aef4,0xc0019502
c001a312:	c7 05 f8 ae 02 c0 62 9e 01 c0 	mov    DWORD PTR ds:0xc002aef8,0xc0019e62
c001a31c:	c7 05 fc ae 02 c0 c2 9e 01 c0 	mov    DWORD PTR ds:0xc002aefc,0xc0019ec2
c001a326:	c7 05 00 af 02 c0 53 95 01 c0 	mov    DWORD PTR ds:0xc002af00,0xc0019553
c001a330:	c7 05 04 af 02 c0 e8 9e 01 c0 	mov    DWORD PTR ds:0xc002af04,0xc0019ee8
c001a33a:	c7 05 08 af 02 c0 2d 9f 01 c0 	mov    DWORD PTR ds:0xc002af08,0xc0019f2d
c001a344:	c7 05 0c af 02 c0 38 92 01 c0 	mov    DWORD PTR ds:0xc002af0c,0xc0019238
c001a34e:	c3                   	ret    

c001a34f <systemCall(regs*, void*)>:
c001a34f:	53                   	push   ebx
c001a350:	83 ec 08             	sub    esp,0x8
c001a353:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a357:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a35a:	83 f8 7f             	cmp    eax,0x7f
c001a35d:	77 16                	ja     c001a375 <systemCall(regs*, void*)+0x26>
c001a35f:	8b 14 85 60 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd51a0]
c001a366:	85 d2                	test   edx,edx
c001a368:	74 0b                	je     c001a375 <systemCall(regs*, void*)+0x26>
c001a36a:	83 ec 0c             	sub    esp,0xc
c001a36d:	53                   	push   ebx
c001a36e:	ff d2                	call   edx
c001a370:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a373:	eb 0d                	jmp    c001a382 <systemCall(regs*, void*)+0x33>
c001a375:	52                   	push   edx
c001a376:	52                   	push   edx
c001a377:	50                   	push   eax
c001a378:	68 aa 83 02 c0       	push   0xc00283aa
c001a37d:	e8 c5 7e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001a382:	83 c4 10             	add    esp,0x10
c001a385:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a38a:	31 d2                	xor    edx,edx
c001a38c:	83 c4 08             	add    esp,0x8
c001a38f:	5b                   	pop    ebx
c001a390:	c3                   	ret    

c001a391 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a391:	55                   	push   ebp
c001a392:	89 e5                	mov    ebp,esp
c001a394:	57                   	push   edi
c001a395:	56                   	push   esi
c001a396:	53                   	push   ebx
c001a397:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a39d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a3a0:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a3a3:	85 c0                	test   eax,eax
c001a3a5:	0f 95 c1             	setne  cl
c001a3a8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a3ac:	0f 94 c2             	sete   dl
c001a3af:	84 d1                	test   cl,dl
c001a3b1:	74 26                	je     c001a3d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3b3:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a3ba:	74 1d                	je     c001a3d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3bc:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a3bf:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a3c5:	89 d6                	mov    esi,edx
c001a3c7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a3cd:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a3d3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a3d6:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a3d9:	83 ec 0c             	sub    esp,0xc
c001a3dc:	05 ff 0f 00 00       	add    eax,0xfff
c001a3e1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a3e4:	6a 01                	push   0x1
c001a3e6:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a3ec:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a3f2:	e8 7e 6e ff ff       	call   c0011275 <Virt::allocateKernelVirtualPages(int)>
c001a3f7:	83 c4 10             	add    esp,0x10
c001a3fa:	89 c6                	mov    esi,eax
c001a3fc:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a402:	0f 86 21 01 00 00    	jbe    c001a529 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a408:	c1 eb 0c             	shr    ebx,0xc
c001a40b:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a415:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a41b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a41e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a421:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a427:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a42a:	29 d8                	sub    eax,ebx
c001a42c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a432:	0f 83 f4 00 00 00    	jae    c001a52c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a438:	83 ec 0c             	sub    esp,0xc
c001a43b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a441:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a444:	3d 00 10 00 00       	cmp    eax,0x1000
c001a449:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a44b:	52                   	push   edx
c001a44c:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a452:	52                   	push   edx
c001a453:	76 05                	jbe    c001a45a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a455:	b8 00 10 00 00       	mov    eax,0x1000
c001a45a:	31 d2                	xor    edx,edx
c001a45c:	52                   	push   edx
c001a45d:	50                   	push   eax
c001a45e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a461:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a464:	83 c4 20             	add    esp,0x20
c001a467:	85 c0                	test   eax,eax
c001a469:	74 1f                	je     c001a48a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a46b:	51                   	push   ecx
c001a46c:	51                   	push   ecx
c001a46d:	50                   	push   eax
c001a46e:	68 be 83 02 c0       	push   0xc00283be
c001a473:	e8 cf 7d ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001a478:	89 34 24             	mov    DWORD PTR [esp],esi
c001a47b:	e8 4f 71 ff ff       	call   c00115cf <Virt::freeKernelVirtualPages(unsigned long)>
c001a480:	83 c4 10             	add    esp,0x10
c001a483:	31 c0                	xor    eax,eax
c001a485:	e9 7c 01 00 00       	jmp    c001a606 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a48a:	e8 a9 14 00 00       	call   c001b938 <lockScheduler()>
c001a48f:	e8 54 52 ff ff       	call   c000f6e8 <Phys::allocatePage()>
c001a494:	6a 07                	push   0x7
c001a496:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a49c:	56                   	push   esi
c001a49d:	50                   	push   eax
c001a49e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4a4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4a7:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4ad:	e8 96 74 ff ff       	call   c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a4b2:	83 c4 0c             	add    esp,0xc
c001a4b5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4bb:	6a 00                	push   0x0
c001a4bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4c3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4c6:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4cc:	e8 d5 72 ff ff       	call   c00117a6 <VAS::mapOtherVASIn(bool, VAS*)>
c001a4d1:	58                   	pop    eax
c001a4d2:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a4d8:	5a                   	pop    edx
c001a4d9:	68 07 04 00 00       	push   0x407
c001a4de:	53                   	push   ebx
c001a4df:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a4e5:	50                   	push   eax
c001a4e6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4ec:	6a 00                	push   0x0
c001a4ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a4fc:	e8 fd 77 ff ff       	call   c0011cfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a501:	83 c4 1c             	add    esp,0x1c
c001a504:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a50a:	68 00 10 00 00       	push   0x1000
c001a50f:	50                   	push   eax
c001a510:	56                   	push   esi
c001a511:	e8 79 61 fe ff       	call   c000068f <memcpy>
c001a516:	e8 1f 14 00 00       	call   c001b93a <unlockScheduler()>
c001a51b:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a521:	83 c4 10             	add    esp,0x10
c001a524:	e9 f5 fe ff ff       	jmp    c001a41e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a529:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a52c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a536:	0f 86 bc 00 00 00    	jbe    c001a5f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a53c:	e8 f7 13 00 00       	call   c001b938 <lockScheduler()>
c001a541:	51                   	push   ecx
c001a542:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a548:	6a 00                	push   0x0
c001a54a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a54f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a552:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a558:	e8 49 72 ff ff       	call   c00117a6 <VAS::mapOtherVASIn(bool, VAS*)>
c001a55d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a563:	83 c4 10             	add    esp,0x10
c001a566:	c1 e8 0c             	shr    eax,0xc
c001a569:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a573:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a579:	e8 6a 51 ff ff       	call   c000f6e8 <Phys::allocatePage()>
c001a57e:	6a 07                	push   0x7
c001a580:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a586:	56                   	push   esi
c001a587:	50                   	push   eax
c001a588:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a58e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a591:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a597:	e8 ac 73 ff ff       	call   c0011948 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a59c:	58                   	pop    eax
c001a59d:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a5a3:	5a                   	pop    edx
c001a5a4:	68 07 04 00 00       	push   0x407
c001a5a9:	53                   	push   ebx
c001a5aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a5b0:	50                   	push   eax
c001a5b1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5b7:	6a 00                	push   0x0
c001a5b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5c1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a5c7:	e8 32 77 ff ff       	call   c0011cfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a5cc:	83 c4 1c             	add    esp,0x1c
c001a5cf:	68 00 10 00 00       	push   0x1000
c001a5d4:	6a 00                	push   0x0
c001a5d6:	56                   	push   esi
c001a5d7:	e8 e9 60 fe ff       	call   c00006c5 <memset>
c001a5dc:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a5e2:	83 c4 10             	add    esp,0x10
c001a5e5:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a5eb:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a5f1:	77 86                	ja     c001a579 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a5f3:	e8 42 13 00 00       	call   c001b93a <unlockScheduler()>
c001a5f8:	83 ec 0c             	sub    esp,0xc
c001a5fb:	56                   	push   esi
c001a5fc:	e8 ce 6f ff ff       	call   c00115cf <Virt::freeKernelVirtualPages(unsigned long)>
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	b0 01                	mov    al,0x1
c001a606:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a609:	5b                   	pop    ebx
c001a60a:	5e                   	pop    esi
c001a60b:	5f                   	pop    edi
c001a60c:	5d                   	pop    ebp
c001a60d:	c3                   	ret    

c001a60e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a60e:	55                   	push   ebp
c001a60f:	57                   	push   edi
c001a610:	56                   	push   esi
c001a611:	53                   	push   ebx
c001a612:	83 ec 48             	sub    esp,0x48
c001a615:	68 14 01 00 00       	push   0x114
c001a61a:	e8 39 7b ff ff       	call   c0012158 <operator new(unsigned long)>
c001a61f:	83 c4 0c             	add    esp,0xc
c001a622:	89 c6                	mov    esi,eax
c001a624:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a628:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a62c:	50                   	push   eax
c001a62d:	e8 44 81 ff ff       	call   c0012776 <File::File(char const*, Process*)>
c001a632:	58                   	pop    eax
c001a633:	5a                   	pop    edx
c001a634:	6a 01                	push   0x1
c001a636:	56                   	push   esi
c001a637:	e8 9e 81 ff ff       	call   c00127da <File::open(FileOpenMode)>
c001a63c:	83 c4 10             	add    esp,0x10
c001a63f:	85 c0                	test   eax,eax
c001a641:	0f 85 47 01 00 00    	jne    c001a78e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a647:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a64f:	83 ec 0c             	sub    esp,0xc
c001a652:	6a 34                	push   0x34
c001a654:	e8 e5 4a ff ff       	call   c000f13e <malloc>
c001a659:	89 c3                	mov    ebx,eax
c001a65b:	58                   	pop    eax
c001a65c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a65e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a662:	57                   	push   edi
c001a663:	53                   	push   ebx
c001a664:	6a 00                	push   0x0
c001a666:	6a 34                	push   0x34
c001a668:	56                   	push   esi
c001a669:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a66c:	83 c4 20             	add    esp,0x20
c001a66f:	85 c0                	test   eax,eax
c001a671:	0f 85 17 01 00 00    	jne    c001a78e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a677:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a67d:	0f 85 0b 01 00 00    	jne    c001a78e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a683:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a686:	85 c0                	test   eax,eax
c001a688:	0f 84 00 01 00 00    	je     c001a78e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a68e:	31 d2                	xor    edx,edx
c001a690:	55                   	push   ebp
c001a691:	52                   	push   edx
c001a692:	50                   	push   eax
c001a693:	56                   	push   esi
c001a694:	e8 ff 81 ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001a699:	83 c4 10             	add    esp,0x10
c001a69c:	85 c0                	test   eax,eax
c001a69e:	0f 85 ea 00 00 00    	jne    c001a78e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6a4:	83 ec 0c             	sub    esp,0xc
c001a6a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a6aa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6b2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6b6:	0f af c2             	imul   eax,edx
c001a6b9:	50                   	push   eax
c001a6ba:	e8 7f 4a ff ff       	call   c000f13e <malloc>
c001a6bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6c6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6cc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6d0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6d4:	0f af c2             	imul   eax,edx
c001a6d7:	99                   	cdq    
c001a6d8:	52                   	push   edx
c001a6d9:	50                   	push   eax
c001a6da:	56                   	push   esi
c001a6db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a6de:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a6e1:	83 c4 20             	add    esp,0x20
c001a6e4:	85 c0                	test   eax,eax
c001a6e6:	0f 84 a2 00 00 00    	je     c001a78e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6ec:	31 d2                	xor    edx,edx
c001a6ee:	51                   	push   ecx
c001a6ef:	52                   	push   edx
c001a6f0:	50                   	push   eax
c001a6f1:	56                   	push   esi
c001a6f2:	e8 a1 81 ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001a6f7:	83 c4 10             	add    esp,0x10
c001a6fa:	85 c0                	test   eax,eax
c001a6fc:	0f 85 8c 00 00 00    	jne    c001a78e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a702:	83 ec 0c             	sub    esp,0xc
c001a705:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a709:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a70d:	31 ed                	xor    ebp,ebp
c001a70f:	0f af c2             	imul   eax,edx
c001a712:	50                   	push   eax
c001a713:	e8 26 4a ff ff       	call   c000f13e <malloc>
c001a718:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a71b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a71f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a725:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a729:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a72d:	0f af c2             	imul   eax,edx
c001a730:	99                   	cdq    
c001a731:	52                   	push   edx
c001a732:	50                   	push   eax
c001a733:	56                   	push   esi
c001a734:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a737:	83 c4 20             	add    esp,0x20
c001a73a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a742:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a746:	0f 86 80 00 00 00    	jbe    c001a7cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a74c:	0f b7 fd             	movzx  edi,bp
c001a74f:	c1 e7 05             	shl    edi,0x5
c001a752:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a756:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a759:	75 6b                	jne    c001a7c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a75b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a75e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a762:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a765:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a769:	52                   	push   edx
c001a76a:	31 d2                	xor    edx,edx
c001a76c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a76f:	52                   	push   edx
c001a770:	50                   	push   eax
c001a771:	56                   	push   esi
c001a772:	e8 21 81 ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001a777:	83 c4 10             	add    esp,0x10
c001a77a:	85 c0                	test   eax,eax
c001a77c:	74 17                	je     c001a795 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a77e:	83 ec 0c             	sub    esp,0xc
c001a781:	68 e9 83 02 c0       	push   0xc00283e9
c001a786:	e8 bc 7a ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001a78b:	83 c4 10             	add    esp,0x10
c001a78e:	31 c0                	xor    eax,eax
c001a790:	e9 87 00 00 00       	jmp    c001a81c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a795:	83 ec 0c             	sub    esp,0xc
c001a798:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a79b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a79e:	50                   	push   eax
c001a79f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7a7:	56                   	push   esi
c001a7a8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a7ac:	e8 e0 fb ff ff       	call   c001a391 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a7b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7b5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a7b9:	83 c4 20             	add    esp,0x20
c001a7bc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a7c0:	73 04                	jae    c001a7c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a7c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7c6:	45                   	inc    ebp
c001a7c7:	e9 76 ff ff ff       	jmp    c001a742 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a7cc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a7d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7d8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a7de:	83 ec 0c             	sub    esp,0xc
c001a7e1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a7e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a7ec:	05 00 10 00 00       	add    eax,0x1000
c001a7f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a7f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7f8:	e8 51 49 ff ff       	call   c000f14e <free>
c001a7fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a800:	e8 49 49 ff ff       	call   c000f14e <free>
c001a805:	58                   	pop    eax
c001a806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a80a:	e8 3f 49 ff ff       	call   c000f14e <free>
c001a80f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a812:	e8 21 80 ff ff       	call   c0012838 <File::close()>
c001a817:	83 c4 10             	add    esp,0x10
c001a81a:	b0 01                	mov    al,0x1
c001a81c:	83 c4 3c             	add    esp,0x3c
c001a81f:	5b                   	pop    ebx
c001a820:	5e                   	pop    esi
c001a821:	5f                   	pop    edi
c001a822:	5d                   	pop    ebp
c001a823:	c3                   	ret    

c001a824 <Thr::runtimeReferenceHelper()>:
c001a824:	83 ec 18             	sub    esp,0x18
c001a827:	68 f1 83 02 c0       	push   0xc00283f1
c001a82c:	e8 16 7a ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001a831:	fa                   	cli    
c001a832:	83 c4 10             	add    esp,0x10
c001a835:	eb fe                	jmp    c001a835 <Thr::runtimeReferenceHelper()+0x11>

c001a837 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a837:	57                   	push   edi
c001a838:	56                   	push   esi
c001a839:	53                   	push   ebx
c001a83a:	31 db                	xor    ebx,ebx
c001a83c:	39 1d 00 b8 02 c0    	cmp    DWORD PTR ds:0xc002b800,ebx
c001a842:	7e 3c                	jle    c001a880 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a844:	8b 34 9d 80 b7 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4880]
c001a84b:	31 ff                	xor    edi,edi
c001a84d:	39 3c 9d 80 b6 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4980],edi
c001a854:	7e 27                	jle    c001a87d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a856:	50                   	push   eax
c001a857:	50                   	push   eax
c001a858:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a85c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a85e:	03 04 9d 00 b7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd4900]
c001a865:	50                   	push   eax
c001a866:	e8 4a 5f fe ff       	call   c00007b5 <strcmp>
c001a86b:	83 c4 10             	add    esp,0x10
c001a86e:	85 c0                	test   eax,eax
c001a870:	75 05                	jne    c001a877 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a872:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a875:	eb 0b                	jmp    c001a882 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a877:	83 c6 10             	add    esi,0x10
c001a87a:	47                   	inc    edi
c001a87b:	eb d0                	jmp    c001a84d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a87d:	43                   	inc    ebx
c001a87e:	eb bc                	jmp    c001a83c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a880:	31 c0                	xor    eax,eax
c001a882:	5b                   	pop    ebx
c001a883:	5e                   	pop    esi
c001a884:	5f                   	pop    edi
c001a885:	c3                   	ret    

c001a886 <Thr::loadKernelSymbolTable(char const*)>:
c001a886:	55                   	push   ebp
c001a887:	57                   	push   edi
c001a888:	56                   	push   esi
c001a889:	53                   	push   ebx
c001a88a:	83 ec 68             	sub    esp,0x68
c001a88d:	8b 35 54 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b854
c001a893:	68 14 01 00 00       	push   0x114
c001a898:	e8 bb 78 ff ff       	call   c0012158 <operator new(unsigned long)>
c001a89d:	83 c4 0c             	add    esp,0xc
c001a8a0:	89 c3                	mov    ebx,eax
c001a8a2:	56                   	push   esi
c001a8a3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a8a7:	50                   	push   eax
c001a8a8:	e8 c9 7e ff ff       	call   c0012776 <File::File(char const*, Process*)>
c001a8ad:	5e                   	pop    esi
c001a8ae:	5f                   	pop    edi
c001a8af:	6a 01                	push   0x1
c001a8b1:	53                   	push   ebx
c001a8b2:	e8 23 7f ff ff       	call   c00127da <File::open(FileOpenMode)>
c001a8b7:	83 c4 10             	add    esp,0x10
c001a8ba:	31 d2                	xor    edx,edx
c001a8bc:	85 c0                	test   eax,eax
c001a8be:	0f 85 79 02 00 00    	jne    c001ab3d <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a8c4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a8cc:	83 ec 0c             	sub    esp,0xc
c001a8cf:	6a 34                	push   0x34
c001a8d1:	e8 68 48 ff ff       	call   c000f13e <malloc>
c001a8d6:	59                   	pop    ecx
c001a8d7:	89 c7                	mov    edi,eax
c001a8d9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a8dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8df:	56                   	push   esi
c001a8e0:	57                   	push   edi
c001a8e1:	6a 00                	push   0x0
c001a8e3:	6a 34                	push   0x34
c001a8e5:	53                   	push   ebx
c001a8e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8e9:	83 c4 20             	add    esp,0x20
c001a8ec:	85 c0                	test   eax,eax
c001a8ee:	74 17                	je     c001a907 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	68 13 84 02 c0       	push   0xc0028413
c001a8f8:	e8 e8 e0 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001a8fd:	83 c4 10             	add    esp,0x10
c001a900:	31 d2                	xor    edx,edx
c001a902:	e9 36 02 00 00       	jmp    c001ab3d <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a907:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a90d:	75 e1                	jne    c001a8f0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a90f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001a912:	85 c0                	test   eax,eax
c001a914:	74 da                	je     c001a8f0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a916:	52                   	push   edx
c001a917:	31 d2                	xor    edx,edx
c001a919:	52                   	push   edx
c001a91a:	50                   	push   eax
c001a91b:	53                   	push   ebx
c001a91c:	e8 77 7f ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001a921:	83 c4 10             	add    esp,0x10
c001a924:	85 c0                	test   eax,eax
c001a926:	75 c8                	jne    c001a8f0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a928:	83 ec 0c             	sub    esp,0xc
c001a92b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a92f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a933:	31 ed                	xor    ebp,ebp
c001a935:	0f af c2             	imul   eax,edx
c001a938:	50                   	push   eax
c001a939:	e8 00 48 ff ff       	call   c000f13e <malloc>
c001a93e:	89 34 24             	mov    DWORD PTR [esp],esi
c001a941:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a945:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001a947:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a94b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a94f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a953:	0f af c2             	imul   eax,edx
c001a956:	99                   	cdq    
c001a957:	52                   	push   edx
c001a958:	50                   	push   eax
c001a959:	53                   	push   ebx
c001a95a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a95d:	83 c4 20             	add    esp,0x20
c001a960:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a968:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001a970:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a978:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a980:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001a984:	0f 86 aa 00 00 00    	jbe    c001aa34 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001a98a:	0f b7 f5             	movzx  esi,bp
c001a98d:	6b f6 28             	imul   esi,esi,0x28
c001a990:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001a994:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a997:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a99b:	50                   	push   eax
c001a99c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a9a0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001a9a4:	8b 16                	mov    edx,DWORD PTR [esi]
c001a9a6:	6b c0 28             	imul   eax,eax,0x28
c001a9a9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001a9ad:	89 d0                	mov    eax,edx
c001a9af:	31 d2                	xor    edx,edx
c001a9b1:	52                   	push   edx
c001a9b2:	50                   	push   eax
c001a9b3:	53                   	push   ebx
c001a9b4:	e8 df 7e ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001a9b9:	83 c4 0c             	add    esp,0xc
c001a9bc:	6a 20                	push   0x20
c001a9be:	6a 00                	push   0x0
c001a9c0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9c4:	52                   	push   edx
c001a9c5:	e8 fb 5c fe ff       	call   c00006c5 <memset>
c001a9ca:	58                   	pop    eax
c001a9cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9cd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a9d1:	51                   	push   ecx
c001a9d2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001a9d6:	52                   	push   edx
c001a9d7:	6a 00                	push   0x0
c001a9d9:	6a 1f                	push   0x1f
c001a9db:	53                   	push   ebx
c001a9dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9df:	83 c4 18             	add    esp,0x18
c001a9e2:	68 2a 84 02 c0       	push   0xc002842a
c001a9e7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9eb:	52                   	push   edx
c001a9ec:	e8 c4 5d fe ff       	call   c00007b5 <strcmp>
c001a9f1:	83 c4 10             	add    esp,0x10
c001a9f4:	85 c0                	test   eax,eax
c001a9f6:	75 0f                	jne    c001aa07 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001a9f8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a9fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa07:	50                   	push   eax
c001aa08:	50                   	push   eax
c001aa09:	68 32 84 02 c0       	push   0xc0028432
c001aa0e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aa12:	50                   	push   eax
c001aa13:	e8 9d 5d fe ff       	call   c00007b5 <strcmp>
c001aa18:	83 c4 10             	add    esp,0x10
c001aa1b:	85 c0                	test   eax,eax
c001aa1d:	75 0f                	jne    c001aa2e <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aa1f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa2e:	45                   	inc    ebp
c001aa2f:	e9 4c ff ff ff       	jmp    c001a980 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aa34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa39:	75 10                	jne    c001aa4b <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aa3b:	83 ec 0c             	sub    esp,0xc
c001aa3e:	68 3a 84 02 c0       	push   0xc002843a
c001aa43:	e8 9d df ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001aa48:	83 c4 10             	add    esp,0x10
c001aa4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa50:	75 10                	jne    c001aa62 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aa52:	83 ec 0c             	sub    esp,0xc
c001aa55:	68 3a 84 02 c0       	push   0xc002843a
c001aa5a:	e8 86 df ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001aa5f:	83 c4 10             	add    esp,0x10
c001aa62:	31 d2                	xor    edx,edx
c001aa64:	50                   	push   eax
c001aa65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa69:	52                   	push   edx
c001aa6a:	50                   	push   eax
c001aa6b:	53                   	push   ebx
c001aa6c:	e8 27 7e ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001aa71:	5a                   	pop    edx
c001aa72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aa76:	e8 c3 46 ff ff       	call   c000f13e <malloc>
c001aa7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aa83:	89 c1                	mov    ecx,eax
c001aa85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa8d:	5e                   	pop    esi
c001aa8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa90:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001aa94:	55                   	push   ebp
c001aa95:	51                   	push   ecx
c001aa96:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001aa9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaa2:	53                   	push   ebx
c001aaa3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aaa6:	83 c4 14             	add    esp,0x14
c001aaa9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aaad:	e8 8c 46 ff ff       	call   c000f13e <malloc>
c001aab2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aab5:	89 c6                	mov    esi,eax
c001aab7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aab9:	56                   	push   esi
c001aaba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aabe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aac2:	53                   	push   ebx
c001aac3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aac6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aaca:	8b 15 00 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b800
c001aad0:	83 c4 1c             	add    esp,0x1c
c001aad3:	c1 e8 04             	shr    eax,0x4
c001aad6:	89 04 95 80 b6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4980],eax
c001aadd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aae1:	31 d2                	xor    edx,edx
c001aae3:	52                   	push   edx
c001aae4:	50                   	push   eax
c001aae5:	53                   	push   ebx
c001aae6:	e8 ad 7d ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001aaeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aaee:	31 d2                	xor    edx,edx
c001aaf0:	56                   	push   esi
c001aaf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aaf5:	52                   	push   edx
c001aaf6:	50                   	push   eax
c001aaf7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaf9:	53                   	push   ebx
c001aafa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aafd:	83 c4 14             	add    esp,0x14
c001ab00:	53                   	push   ebx
c001ab01:	e8 32 7d ff ff       	call   c0012838 <File::close()>
c001ab06:	5d                   	pop    ebp
c001ab07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab0b:	e8 3e 46 ff ff       	call   c000f14e <free>
c001ab10:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab13:	e8 36 46 ff ff       	call   c000f14e <free>
c001ab18:	a1 00 b8 02 c0       	mov    eax,ds:0xc002b800
c001ab1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ab21:	8d 50 01             	lea    edx,[eax+0x1]
c001ab24:	89 0c 85 80 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4880],ecx
c001ab2b:	89 15 00 b8 02 c0    	mov    DWORD PTR ds:0xc002b800,edx
c001ab31:	89 34 85 00 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4900],esi
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	b2 01                	mov    dl,0x1
c001ab3d:	83 c4 5c             	add    esp,0x5c
c001ab40:	88 d0                	mov    al,dl
c001ab42:	5b                   	pop    ebx
c001ab43:	5e                   	pop    esi
c001ab44:	5f                   	pop    edi
c001ab45:	5d                   	pop    ebp
c001ab46:	c3                   	ret    

c001ab47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ab47:	55                   	push   ebp
c001ab48:	57                   	push   edi
c001ab49:	56                   	push   esi
c001ab4a:	53                   	push   ebx
c001ab4b:	81 ec 68 03 00 00    	sub    esp,0x368
c001ab51:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ab58:	8b 1d 54 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b854
c001ab5e:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab62:	68 14 01 00 00       	push   0x114
c001ab67:	e8 ec 75 ff ff       	call   c0012158 <operator new(unsigned long)>
c001ab6c:	83 c4 0c             	add    esp,0xc
c001ab6f:	89 c7                	mov    edi,eax
c001ab71:	53                   	push   ebx
c001ab72:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ab79:	50                   	push   eax
c001ab7a:	e8 f7 7b ff ff       	call   c0012776 <File::File(char const*, Process*)>
c001ab7f:	5e                   	pop    esi
c001ab80:	5d                   	pop    ebp
c001ab81:	6a 01                	push   0x1
c001ab83:	57                   	push   edi
c001ab84:	e8 51 7c ff ff       	call   c00127da <File::open(FileOpenMode)>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	85 c0                	test   eax,eax
c001ab8e:	0f 85 10 07 00 00    	jne    c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ab94:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	6a 34                	push   0x34
c001aba1:	e8 98 45 ff ff       	call   c000f13e <malloc>
c001aba6:	5b                   	pop    ebx
c001aba7:	89 c5                	mov    ebp,eax
c001aba9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001abad:	8b 07                	mov    eax,DWORD PTR [edi]
c001abaf:	53                   	push   ebx
c001abb0:	55                   	push   ebp
c001abb1:	6a 00                	push   0x0
c001abb3:	6a 34                	push   0x34
c001abb5:	57                   	push   edi
c001abb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abb9:	83 c4 20             	add    esp,0x20
c001abbc:	85 c0                	test   eax,eax
c001abbe:	0f 85 e0 06 00 00    	jne    c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abc4:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001abcb:	0f 85 d3 06 00 00    	jne    c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abd1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abd4:	85 c0                	test   eax,eax
c001abd6:	0f 84 c8 06 00 00    	je     c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abdc:	31 d2                	xor    edx,edx
c001abde:	51                   	push   ecx
c001abdf:	52                   	push   edx
c001abe0:	50                   	push   eax
c001abe1:	57                   	push   edi
c001abe2:	e8 b1 7c ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001abe7:	83 c4 10             	add    esp,0x10
c001abea:	85 c0                	test   eax,eax
c001abec:	0f 85 b2 06 00 00    	jne    c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abf2:	83 ec 0c             	sub    esp,0xc
c001abf5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001abf8:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001abfc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac00:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac04:	0f af c2             	imul   eax,edx
c001ac07:	50                   	push   eax
c001ac08:	e8 31 45 ff ff       	call   c000f13e <malloc>
c001ac0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac14:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac1a:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac1e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac22:	0f af c2             	imul   eax,edx
c001ac25:	99                   	cdq    
c001ac26:	52                   	push   edx
c001ac27:	50                   	push   eax
c001ac28:	57                   	push   edi
c001ac29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac2c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ac2f:	83 c4 20             	add    esp,0x20
c001ac32:	85 c0                	test   eax,eax
c001ac34:	0f 84 6a 06 00 00    	je     c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac3a:	52                   	push   edx
c001ac3b:	31 d2                	xor    edx,edx
c001ac3d:	52                   	push   edx
c001ac3e:	50                   	push   eax
c001ac3f:	57                   	push   edi
c001ac40:	e8 53 7c ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	85 c0                	test   eax,eax
c001ac4a:	0f 85 54 06 00 00    	jne    c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac50:	83 ec 0c             	sub    esp,0xc
c001ac53:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac57:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac5b:	31 f6                	xor    esi,esi
c001ac5d:	0f af c2             	imul   eax,edx
c001ac60:	50                   	push   eax
c001ac61:	e8 d8 44 ff ff       	call   c000f13e <malloc>
c001ac66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac69:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ac6d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac73:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac77:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac7b:	0f af c2             	imul   eax,edx
c001ac7e:	99                   	cdq    
c001ac7f:	52                   	push   edx
c001ac80:	50                   	push   eax
c001ac81:	57                   	push   edi
c001ac82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac85:	83 c4 20             	add    esp,0x20
c001ac88:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001ac8c:	0f 86 af 00 00 00    	jbe    c001ad41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001ac92:	0f b7 de             	movzx  ebx,si
c001ac95:	c1 e3 05             	shl    ebx,0x5
c001ac98:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001ac9c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ac9f:	0f 85 96 00 00 00    	jne    c001ad3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001aca5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001aca8:	31 d2                	xor    edx,edx
c001acaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001acb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acb5:	50                   	push   eax
c001acb6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001acb9:	52                   	push   edx
c001acba:	50                   	push   eax
c001acbb:	57                   	push   edi
c001acbc:	e8 d7 7b ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001acc1:	83 c4 10             	add    esp,0x10
c001acc4:	85 c0                	test   eax,eax
c001acc6:	0f 85 d8 05 00 00    	jne    c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001accc:	52                   	push   edx
c001accd:	52                   	push   edx
c001acce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001acd2:	68 54 84 02 c0       	push   0xc0028454
c001acd7:	e8 6b 75 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001acdc:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001ace3:	31 d2                	xor    edx,edx
c001ace5:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001ace9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aced:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acf1:	59                   	pop    ecx
c001acf2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001acf4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001acfb:	50                   	push   eax
c001acfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad04:	52                   	push   edx
c001ad05:	50                   	push   eax
c001ad06:	57                   	push   edi
c001ad07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad0a:	83 c4 18             	add    esp,0x18
c001ad0d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad10:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad13:	50                   	push   eax
c001ad14:	68 78 84 02 c0       	push   0xc0028478
c001ad19:	e8 29 75 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001ad1e:	83 c4 0c             	add    esp,0xc
c001ad21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad24:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad27:	50                   	push   eax
c001ad28:	6a 00                	push   0x0
c001ad2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad2e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ad32:	50                   	push   eax
c001ad33:	e8 8d 59 fe ff       	call   c00006c5 <memset>
c001ad38:	83 c4 10             	add    esp,0x10
c001ad3b:	46                   	inc    esi
c001ad3c:	e9 47 ff ff ff       	jmp    c001ac88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ad41:	31 db                	xor    ebx,ebx
c001ad43:	50                   	push   eax
c001ad44:	68 00 01 00 00       	push   0x100
c001ad49:	6a 00                	push   0x0
c001ad4b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ad4f:	50                   	push   eax
c001ad50:	e8 70 59 fe ff       	call   c00006c5 <memset>
c001ad55:	83 c4 0c             	add    esp,0xc
c001ad58:	68 00 01 00 00       	push   0x100
c001ad5d:	6a 00                	push   0x0
c001ad5f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ad66:	50                   	push   eax
c001ad67:	e8 59 59 fe ff       	call   c00006c5 <memset>
c001ad6c:	83 c4 10             	add    esp,0x10
c001ad6f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ad77:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad7f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ad87:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ad8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ad97:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ad9b:	0f 86 2f 01 00 00    	jbe    c001aed0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001ada1:	0f b7 f3             	movzx  esi,bx
c001ada4:	6b f6 28             	imul   esi,esi,0x28
c001ada7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001adab:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001adae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adb2:	50                   	push   eax
c001adb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adb7:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001adbb:	8b 06                	mov    eax,DWORD PTR [esi]
c001adbd:	6b d2 28             	imul   edx,edx,0x28
c001adc0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001adc4:	31 d2                	xor    edx,edx
c001adc6:	52                   	push   edx
c001adc7:	50                   	push   eax
c001adc8:	57                   	push   edi
c001adc9:	e8 ca 7a ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001adce:	83 c4 0c             	add    esp,0xc
c001add1:	6a 20                	push   0x20
c001add3:	6a 00                	push   0x0
c001add5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001addc:	51                   	push   ecx
c001addd:	e8 e3 58 fe ff       	call   c00006c5 <memset>
c001ade2:	58                   	pop    eax
c001ade3:	8b 07                	mov    eax,DWORD PTR [edi]
c001ade5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ade9:	52                   	push   edx
c001adea:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001adf1:	51                   	push   ecx
c001adf2:	6a 00                	push   0x0
c001adf4:	6a 1f                	push   0x1f
c001adf6:	57                   	push   edi
c001adf7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adfa:	83 c4 1c             	add    esp,0x1c
c001adfd:	6a 09                	push   0x9
c001adff:	68 95 84 02 c0       	push   0xc0028495
c001ae04:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ae0b:	51                   	push   ecx
c001ae0c:	e8 1b 58 fe ff       	call   c000062c <memcmp>
c001ae11:	83 c4 10             	add    esp,0x10
c001ae14:	85 c0                	test   eax,eax
c001ae16:	75 21                	jne    c001ae39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001ae18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae1c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae24:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae28:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae2b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae32:	89 c8                	mov    eax,ecx
c001ae34:	40                   	inc    eax
c001ae35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae39:	50                   	push   eax
c001ae3a:	6a 09                	push   0x9
c001ae3c:	68 9f 84 02 c0       	push   0xc002849f
c001ae41:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae48:	50                   	push   eax
c001ae49:	e8 de 57 fe ff       	call   c000062c <memcmp>
c001ae4e:	83 c4 10             	add    esp,0x10
c001ae51:	85 c0                	test   eax,eax
c001ae53:	75 21                	jne    c001ae76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001ae55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae5d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae61:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae65:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae68:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae6f:	89 c8                	mov    eax,ecx
c001ae71:	40                   	inc    eax
c001ae72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae76:	50                   	push   eax
c001ae77:	50                   	push   eax
c001ae78:	68 2a 84 02 c0       	push   0xc002842a
c001ae7d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae84:	50                   	push   eax
c001ae85:	e8 2b 59 fe ff       	call   c00007b5 <strcmp>
c001ae8a:	83 c4 10             	add    esp,0x10
c001ae8d:	85 c0                	test   eax,eax
c001ae8f:	75 0f                	jne    c001aea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001ae91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aea0:	50                   	push   eax
c001aea1:	50                   	push   eax
c001aea2:	68 32 84 02 c0       	push   0xc0028432
c001aea7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001aeae:	50                   	push   eax
c001aeaf:	e8 01 59 fe ff       	call   c00007b5 <strcmp>
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	85 c0                	test   eax,eax
c001aeb9:	75 0f                	jne    c001aeca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001aebb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aebe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aec6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeca:	43                   	inc    ebx
c001aecb:	e9 c7 fe ff ff       	jmp    c001ad97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001aed0:	31 d2                	xor    edx,edx
c001aed2:	50                   	push   eax
c001aed3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aed7:	52                   	push   edx
c001aed8:	50                   	push   eax
c001aed9:	57                   	push   edi
c001aeda:	e8 b9 79 ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001aedf:	5a                   	pop    edx
c001aee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aee4:	e8 55 42 ff ff       	call   c000f13e <malloc>
c001aee9:	31 d2                	xor    edx,edx
c001aeeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aeef:	59                   	pop    ecx
c001aef0:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001aef2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001aef6:	53                   	push   ebx
c001aef7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aefb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aeff:	52                   	push   edx
c001af00:	50                   	push   eax
c001af01:	57                   	push   edi
c001af02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af05:	83 c4 14             	add    esp,0x14
c001af08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af0c:	e8 2d 42 ff ff       	call   c000f13e <malloc>
c001af11:	31 d2                	xor    edx,edx
c001af13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af17:	83 c4 0c             	add    esp,0xc
c001af1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af1e:	52                   	push   edx
c001af1f:	50                   	push   eax
c001af20:	57                   	push   edi
c001af21:	e8 72 79 ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001af26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af29:	31 d2                	xor    edx,edx
c001af2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af2f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af35:	52                   	push   edx
c001af36:	50                   	push   eax
c001af37:	57                   	push   edi
c001af38:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af3b:	83 c4 20             	add    esp,0x20
c001af3e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af46:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af4a:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001af4e:	0f 84 54 03 00 00    	je     c001b2a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001af54:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001af5b:	31 d2                	xor    edx,edx
c001af5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af61:	c1 e8 03             	shr    eax,0x3
c001af64:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af68:	50                   	push   eax
c001af69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af6d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001af71:	52                   	push   edx
c001af72:	50                   	push   eax
c001af73:	57                   	push   edi
c001af74:	e8 1f 79 ff ff       	call   c0012898 <File::seek(unsigned long long)>
c001af79:	58                   	pop    eax
c001af7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af7e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001af85:	e8 b4 41 ff ff       	call   c000f13e <malloc>
c001af8a:	31 d2                	xor    edx,edx
c001af8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af90:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af92:	58                   	pop    eax
c001af93:	8d 44 24 58          	lea    eax,[esp+0x58]
c001af97:	50                   	push   eax
c001af98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afa0:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001afa7:	52                   	push   edx
c001afa8:	50                   	push   eax
c001afa9:	57                   	push   edi
c001afaa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001afad:	83 c4 20             	add    esp,0x20
c001afb0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001afb8:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001afbc:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001afc0:	0f 8d c6 02 00 00    	jge    c001b28c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001afc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afce:	31 db                	xor    ebx,ebx
c001afd0:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001afd3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afdb:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001afdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afe3:	c1 e8 08             	shr    eax,0x8
c001afe6:	89 c6                	mov    esi,eax
c001afe8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afec:	c1 e6 04             	shl    esi,0x4
c001afef:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001aff3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001aff6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001affa:	85 c0                	test   eax,eax
c001affc:	0f 85 17 01 00 00    	jne    c001b119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b002:	83 ec 0c             	sub    esp,0xc
c001b005:	b3 01                	mov    bl,0x1
c001b007:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b00b:	03 06                	add    eax,DWORD PTR [esi]
c001b00d:	50                   	push   eax
c001b00e:	e8 24 f8 ff ff       	call   c001a837 <Thr::getAddressOfKernelSymbol(char const*)>
c001b013:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b01f:	0f 85 f4 00 00 00    	jne    c001b119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b025:	50                   	push   eax
c001b026:	50                   	push   eax
c001b027:	68 a9 84 02 c0       	push   0xc00284a9
c001b02c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b030:	03 06                	add    eax,DWORD PTR [esi]
c001b032:	50                   	push   eax
c001b033:	e8 7d 57 fe ff       	call   c00007b5 <strcmp>
c001b038:	83 c4 10             	add    esp,0x10
c001b03b:	85 c0                	test   eax,eax
c001b03d:	75 0a                	jne    c001b049 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b03f:	b8 5c 33 02 c0       	mov    eax,0xc002335c
c001b044:	e9 ca 00 00 00       	jmp    c001b113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b049:	50                   	push   eax
c001b04a:	50                   	push   eax
c001b04b:	68 b3 84 02 c0       	push   0xc00284b3
c001b050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b054:	03 06                	add    eax,DWORD PTR [esi]
c001b056:	50                   	push   eax
c001b057:	e8 59 57 fe ff       	call   c00007b5 <strcmp>
c001b05c:	83 c4 10             	add    esp,0x10
c001b05f:	85 c0                	test   eax,eax
c001b061:	75 0a                	jne    c001b06d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b063:	b8 90 30 02 c0       	mov    eax,0xc0023090
c001b068:	e9 a6 00 00 00       	jmp    c001b113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b06d:	53                   	push   ebx
c001b06e:	53                   	push   ebx
c001b06f:	68 bc 84 02 c0       	push   0xc00284bc
c001b074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b078:	03 06                	add    eax,DWORD PTR [esi]
c001b07a:	50                   	push   eax
c001b07b:	e8 35 57 fe ff       	call   c00007b5 <strcmp>
c001b080:	83 c4 10             	add    esp,0x10
c001b083:	85 c0                	test   eax,eax
c001b085:	75 0a                	jne    c001b091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b087:	b8 5c 34 02 c0       	mov    eax,0xc002345c
c001b08c:	e9 82 00 00 00       	jmp    c001b113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b091:	51                   	push   ecx
c001b092:	51                   	push   ecx
c001b093:	68 c6 84 02 c0       	push   0xc00284c6
c001b098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b09c:	03 06                	add    eax,DWORD PTR [esi]
c001b09e:	50                   	push   eax
c001b09f:	e8 11 57 fe ff       	call   c00007b5 <strcmp>
c001b0a4:	83 c4 10             	add    esp,0x10
c001b0a7:	85 c0                	test   eax,eax
c001b0a9:	74 63                	je     c001b10e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b0ab:	50                   	push   eax
c001b0ac:	50                   	push   eax
c001b0ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0b1:	03 06                	add    eax,DWORD PTR [esi]
c001b0b3:	50                   	push   eax
c001b0b4:	68 cf 84 02 c0       	push   0xc00284cf
c001b0b9:	e8 89 71 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001b0be:	58                   	pop    eax
c001b0bf:	5a                   	pop    edx
c001b0c0:	68 e9 84 02 c0       	push   0xc00284e9
c001b0c5:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b0cc:	53                   	push   ebx
c001b0cd:	e8 92 56 fe ff       	call   c0000764 <strcpy>
c001b0d2:	59                   	pop    ecx
c001b0d3:	58                   	pop    eax
c001b0d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0d8:	03 06                	add    eax,DWORD PTR [esi]
c001b0da:	50                   	push   eax
c001b0db:	53                   	push   ebx
c001b0dc:	e8 3a 57 fe ff       	call   c000081b <strcat>
c001b0e1:	58                   	pop    eax
c001b0e2:	5a                   	pop    edx
c001b0e3:	68 7f 85 02 c0       	push   0xc002857f
c001b0e8:	53                   	push   ebx
c001b0e9:	e8 2d 57 fe ff       	call   c000081b <strcat>
c001b0ee:	83 c4 10             	add    esp,0x10
c001b0f1:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b0f6:	0f 84 4b 01 00 00    	je     c001b247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b0fc:	83 ec 0c             	sub    esp,0xc
c001b0ff:	53                   	push   ebx
c001b100:	e8 e0 d8 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001b105:	83 c4 10             	add    esp,0x10
c001b108:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b10c:	eb 0b                	jmp    c001b119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b10e:	b8 dc 31 02 c0       	mov    eax,0xc00231dc
c001b113:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b117:	b3 01                	mov    bl,0x1
c001b119:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b11e:	0f 85 80 00 00 00    	jne    c001b1a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b124:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b12b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b12f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b133:	01 ce                	add    esi,ecx
c001b135:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b13d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b13f:	0f 94 c2             	sete   dl
c001b142:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b14a:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b14f:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b153:	84 db                	test   bl,bl
c001b155:	74 31                	je     c001b188 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b157:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b15b:	01 c3                	add    ebx,eax
c001b15d:	84 d2                	test   dl,dl
c001b15f:	75 0a                	jne    c001b16b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b161:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b165:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b169:	76 32                	jbe    c001b19d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b16b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b170:	0f 84 d1 00 00 00    	je     c001b247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b176:	83 ec 0c             	sub    esp,0xc
c001b179:	68 00 85 02 c0       	push   0xc0028500
c001b17e:	e8 62 d8 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001b183:	83 c4 10             	add    esp,0x10
c001b186:	eb 15                	jmp    c001b19d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b188:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b18b:	84 d2                	test   dl,dl
c001b18d:	75 0e                	jne    c001b19d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b18f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b193:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b197:	77 04                	ja     c001b19d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b199:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b19d:	89 1e                	mov    DWORD PTR [esi],ebx
c001b19f:	e9 df 00 00 00       	jmp    c001b283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b1a4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b1a9:	75 6e                	jne    c001b219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b1ab:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b1b2:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b1b6:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b1ba:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b1c2:	74 17                	je     c001b1db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1c4:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b1cc:	74 0d                	je     c001b1db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1ce:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1d2:	83 e8 04             	sub    eax,0x4
c001b1d5:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1d9:	76 17                	jbe    c001b1f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b1db:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b1e0:	74 65                	je     c001b247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b1e2:	83 ec 0c             	sub    esp,0xc
c001b1e5:	68 1c 85 02 c0       	push   0xc002851c
c001b1ea:	e8 f6 d7 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001b1ef:	83 c4 10             	add    esp,0x10
c001b1f2:	8b 16                	mov    edx,DWORD PTR [esi]
c001b1f4:	84 db                	test   bl,bl
c001b1f6:	74 13                	je     c001b20b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b1f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b1fc:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b203:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b207:	01 d0                	add    eax,edx
c001b209:	eb 06                	jmp    c001b211 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b20b:	89 d0                	mov    eax,edx
c001b20d:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b211:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b215:	89 06                	mov    DWORD PTR [esi],eax
c001b217:	eb 6a                	jmp    c001b283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b219:	50                   	push   eax
c001b21a:	50                   	push   eax
c001b21b:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b220:	50                   	push   eax
c001b221:	68 38 85 02 c0       	push   0xc0028538
c001b226:	e8 1c 70 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001b22b:	83 c4 10             	add    esp,0x10
c001b22e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b233:	74 12                	je     c001b247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b235:	83 ec 0c             	sub    esp,0xc
c001b238:	68 43 85 02 c0       	push   0xc0028543
c001b23d:	e8 a3 d7 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001b242:	83 c4 10             	add    esp,0x10
c001b245:	eb 3c                	jmp    c001b283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b247:	83 ec 0c             	sub    esp,0xc
c001b24a:	57                   	push   edi
c001b24b:	e8 e8 75 ff ff       	call   c0012838 <File::close()>
c001b250:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b253:	8b 07                	mov    eax,DWORD PTR [edi]
c001b255:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b258:	59                   	pop    ecx
c001b259:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b25d:	e8 ec 3e ff ff       	call   c000f14e <free>
c001b262:	5b                   	pop    ebx
c001b263:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b267:	e8 e2 3e ff ff       	call   c000f14e <free>
c001b26c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b26f:	e8 da 3e ff ff       	call   c000f14e <free>
c001b274:	5e                   	pop    esi
c001b275:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b279:	e8 d0 3e ff ff       	call   c000f14e <free>
c001b27e:	83 c4 10             	add    esp,0x10
c001b281:	eb 21                	jmp    c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b283:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b287:	e9 2c fd ff ff       	jmp    c001afb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b28c:	83 ec 0c             	sub    esp,0xc
c001b28f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b293:	e8 b6 3e ff ff       	call   c000f14e <free>
c001b298:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b29c:	83 c4 10             	add    esp,0x10
c001b29f:	e9 a2 fc ff ff       	jmp    c001af46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b2a4:	31 c0                	xor    eax,eax
c001b2a6:	eb 32                	jmp    c001b2da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b2a8:	83 ec 0c             	sub    esp,0xc
c001b2ab:	57                   	push   edi
c001b2ac:	e8 87 75 ff ff       	call   c0012838 <File::close()>
c001b2b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2b4:	8b 07                	mov    eax,DWORD PTR [edi]
c001b2b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2b9:	58                   	pop    eax
c001b2ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2be:	e8 8b 3e ff ff       	call   c000f14e <free>
c001b2c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2c6:	e8 83 3e ff ff       	call   c000f14e <free>
c001b2cb:	5a                   	pop    edx
c001b2cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2d0:	e8 79 3e ff ff       	call   c000f14e <free>
c001b2d5:	83 c4 10             	add    esp,0x10
c001b2d8:	b0 01                	mov    al,0x1
c001b2da:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b2e0:	5b                   	pop    ebx
c001b2e1:	5e                   	pop    esi
c001b2e2:	5f                   	pop    edi
c001b2e3:	5d                   	pop    ebp
c001b2e4:	c3                   	ret    

c001b2e5 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b2e5:	56                   	push   esi
c001b2e6:	31 d2                	xor    edx,edx
c001b2e8:	53                   	push   ebx
c001b2e9:	8b 1d 60 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b060
c001b2ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2f3:	39 d3                	cmp    ebx,edx
c001b2f5:	7e 1b                	jle    c001b312 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b2f7:	8b 04 95 80 b2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4d80]
c001b2fe:	39 c8                	cmp    eax,ecx
c001b300:	77 0d                	ja     c001b30f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b302:	8b 34 95 80 b0 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4f80]
c001b309:	01 c6                	add    esi,eax
c001b30b:	39 ce                	cmp    esi,ecx
c001b30d:	77 05                	ja     c001b314 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b30f:	42                   	inc    edx
c001b310:	eb e1                	jmp    c001b2f3 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b312:	31 c0                	xor    eax,eax
c001b314:	5b                   	pop    ebx
c001b315:	5e                   	pop    esi
c001b316:	c3                   	ret    

c001b317 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b317:	53                   	push   ebx
c001b318:	31 c0                	xor    eax,eax
c001b31a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b31e:	8b 1d 60 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b060
c001b324:	39 c3                	cmp    ebx,eax
c001b326:	7e 22                	jle    c001b34a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b328:	8b 14 85 80 b2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4d80]
c001b32f:	39 ca                	cmp    edx,ecx
c001b331:	77 14                	ja     c001b347 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b333:	03 14 85 80 b0 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4f80]
c001b33a:	39 ca                	cmp    edx,ecx
c001b33c:	76 09                	jbe    c001b347 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b33e:	8b 04 85 80 b4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4b80]
c001b345:	eb 05                	jmp    c001b34c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b347:	40                   	inc    eax
c001b348:	eb da                	jmp    c001b324 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b34a:	31 c0                	xor    eax,eax
c001b34c:	5b                   	pop    ebx
c001b34d:	c3                   	ret    

c001b34e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b34e:	53                   	push   ebx
c001b34f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b353:	53                   	push   ebx
c001b354:	e8 8c ff ff ff       	call   c001b2e5 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b359:	5a                   	pop    edx
c001b35a:	31 d2                	xor    edx,edx
c001b35c:	85 c0                	test   eax,eax
c001b35e:	74 04                	je     c001b364 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b360:	89 da                	mov    edx,ebx
c001b362:	29 c2                	sub    edx,eax
c001b364:	89 d0                	mov    eax,edx
c001b366:	5b                   	pop    ebx
c001b367:	c3                   	ret    

c001b368 <Thr::loadDLL(char const*, bool)>:
c001b368:	55                   	push   ebp
c001b369:	57                   	push   edi
c001b36a:	56                   	push   esi
c001b36b:	53                   	push   ebx
c001b36c:	81 ec 34 01 00 00    	sub    esp,0x134
c001b372:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b379:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b380:	56                   	push   esi
c001b381:	68 5b 85 02 c0       	push   0xc002855b
c001b386:	e8 bc 6e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001b38b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b392:	e8 c1 6d ff ff       	call   c0012158 <operator new(unsigned long)>
c001b397:	83 c4 0c             	add    esp,0xc
c001b39a:	89 c3                	mov    ebx,eax
c001b39c:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c001b3a2:	56                   	push   esi
c001b3a3:	50                   	push   eax
c001b3a4:	e8 cd 73 ff ff       	call   c0012776 <File::File(char const*, Process*)>
c001b3a9:	83 c4 0c             	add    esp,0xc
c001b3ac:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b3b0:	50                   	push   eax
c001b3b1:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b3b5:	50                   	push   eax
c001b3b6:	53                   	push   ebx
c001b3b7:	e8 ca 76 ff ff       	call   c0012a86 <File::stat(unsigned long long*, bool*)>
c001b3bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3c4:	83 c4 10             	add    esp,0x10
c001b3c7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b3cc:	75 0a                	jne    c001b3d8 <Thr::loadDLL(char const*, bool)+0x70>
c001b3ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3d2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b3d6:	75 3c                	jne    c001b414 <Thr::loadDLL(char const*, bool)+0xac>
c001b3d8:	89 e8                	mov    eax,ebp
c001b3da:	84 c0                	test   al,al
c001b3dc:	0f 84 3d 01 00 00    	je     c001b51f <Thr::loadDLL(char const*, bool)+0x1b7>
c001b3e2:	50                   	push   eax
c001b3e3:	50                   	push   eax
c001b3e4:	68 6c 85 02 c0       	push   0xc002856c
c001b3e9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b3ed:	53                   	push   ebx
c001b3ee:	e8 71 53 fe ff       	call   c0000764 <strcpy>
c001b3f3:	58                   	pop    eax
c001b3f4:	5a                   	pop    edx
c001b3f5:	56                   	push   esi
c001b3f6:	53                   	push   ebx
c001b3f7:	e8 1f 54 fe ff       	call   c000081b <strcat>
c001b3fc:	59                   	pop    ecx
c001b3fd:	5f                   	pop    edi
c001b3fe:	68 7f 85 02 c0       	push   0xc002857f
c001b403:	53                   	push   ebx
c001b404:	e8 12 54 fe ff       	call   c000081b <strcat>
c001b409:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b40c:	e8 d4 d5 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001b411:	83 c4 10             	add    esp,0x10
c001b414:	e8 ec 5f ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c001b419:	51                   	push   ecx
c001b41a:	6a 03                	push   0x3
c001b41c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b420:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b424:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b42a:	83 d3 00             	adc    ebx,0x0
c001b42d:	89 ca                	mov    edx,ecx
c001b42f:	89 d1                	mov    ecx,edx
c001b431:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b435:	51                   	push   ecx
c001b436:	50                   	push   eax
c001b437:	e8 0c 66 ff ff       	call   c0011a48 <VAS::allocatePages(int, int)>
c001b43c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b43f:	89 c3                	mov    ebx,eax
c001b441:	e8 9c 52 fe ff       	call   c00006e2 <strlen>
c001b446:	8b 3d 60 b0 02 c0    	mov    edi,DWORD PTR ds:0xc002b060
c001b44c:	40                   	inc    eax
c001b44d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b450:	e8 e9 3c ff ff       	call   c000f13e <malloc>
c001b455:	89 04 bd 80 b4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4b80],eax
c001b45c:	5f                   	pop    edi
c001b45d:	58                   	pop    eax
c001b45e:	a1 60 b0 02 c0       	mov    eax,ds:0xc002b060
c001b463:	56                   	push   esi
c001b464:	ff 34 85 80 b4 02 c0 	push   DWORD PTR [eax*4-0x3ffd4b80]
c001b46b:	e8 f4 52 fe ff       	call   c0000764 <strcpy>
c001b470:	a1 60 b0 02 c0       	mov    eax,ds:0xc002b060
c001b475:	8d 50 01             	lea    edx,[eax+0x1]
c001b478:	89 1c 85 80 b2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4d80],ebx
c001b47f:	89 15 60 b0 02 c0    	mov    DWORD PTR ds:0xc002b060,edx
c001b485:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b489:	83 c4 0c             	add    esp,0xc
c001b48c:	89 14 85 80 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f80],edx
c001b493:	6a 01                	push   0x1
c001b495:	53                   	push   ebx
c001b496:	56                   	push   esi
c001b497:	e8 ab f6 ff ff       	call   c001ab47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b49c:	83 c4 10             	add    esp,0x10
c001b49f:	89 c7                	mov    edi,eax
c001b4a1:	fe c8                	dec    al
c001b4a3:	74 16                	je     c001b4bb <Thr::loadDLL(char const*, bool)+0x153>
c001b4a5:	89 e8                	mov    eax,ebp
c001b4a7:	84 c0                	test   al,al
c001b4a9:	74 10                	je     c001b4bb <Thr::loadDLL(char const*, bool)+0x153>
c001b4ab:	83 ec 0c             	sub    esp,0xc
c001b4ae:	68 81 85 02 c0       	push   0xc0028581
c001b4b3:	e8 2d d5 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001b4b8:	83 c4 10             	add    esp,0x10
c001b4bb:	31 f6                	xor    esi,esi
c001b4bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4c5:	05 ff 0f 00 00       	add    eax,0xfff
c001b4ca:	83 d2 00             	adc    edx,0x0
c001b4cd:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b4d1:	c1 ea 0c             	shr    edx,0xc
c001b4d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b4dc:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b4e0:	ba 00 00 00 00       	mov    edx,0x0
c001b4e5:	89 d0                	mov    eax,edx
c001b4e7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b4eb:	73 2c                	jae    c001b519 <Thr::loadDLL(char const*, bool)+0x1b1>
c001b4ed:	e8 13 5f ff ff       	call   c0011405 <Virt::getAKernelVAS()>
c001b4f2:	89 f5                	mov    ebp,esi
c001b4f4:	c1 e5 0c             	shl    ebp,0xc
c001b4f7:	52                   	push   edx
c001b4f8:	01 dd                	add    ebp,ebx
c001b4fa:	52                   	push   edx
c001b4fb:	55                   	push   ebp
c001b4fc:	50                   	push   eax
c001b4fd:	e8 ae 60 ff ff       	call   c00115b0 <VAS::getPageTableEntry(unsigned long)>
c001b502:	83 c4 10             	add    esp,0x10
c001b505:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b508:	75 0c                	jne    c001b516 <Thr::loadDLL(char const*, bool)+0x1ae>
c001b50a:	83 ec 0c             	sub    esp,0xc
c001b50d:	55                   	push   ebp
c001b50e:	e8 4b 41 ff ff       	call   c000f65e <Phys::freePage(unsigned long)>
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	46                   	inc    esi
c001b517:	eb a4                	jmp    c001b4bd <Thr::loadDLL(char const*, bool)+0x155>
c001b519:	89 f8                	mov    eax,edi
c001b51b:	84 c0                	test   al,al
c001b51d:	75 02                	jne    c001b521 <Thr::loadDLL(char const*, bool)+0x1b9>
c001b51f:	31 db                	xor    ebx,ebx
c001b521:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b527:	89 d8                	mov    eax,ebx
c001b529:	5b                   	pop    ebx
c001b52a:	5e                   	pop    esi
c001b52b:	5f                   	pop    edi
c001b52c:	5d                   	pop    ebp
c001b52d:	c3                   	ret    

c001b52e <Thr::executeDLL(unsigned long, void*)>:
c001b52e:	56                   	push   esi
c001b52f:	53                   	push   ebx
c001b530:	51                   	push   ecx
c001b531:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b535:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b539:	85 db                	test   ebx,ebx
c001b53b:	75 10                	jne    c001b54d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b53d:	83 ec 0c             	sub    esp,0xc
c001b540:	68 a0 85 02 c0       	push   0xc00285a0
c001b545:	e8 9b d4 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001b54a:	83 c4 10             	add    esp,0x10
c001b54d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b551:	89 d8                	mov    eax,ebx
c001b553:	5a                   	pop    edx
c001b554:	5b                   	pop    ebx
c001b555:	5e                   	pop    esi
c001b556:	ff e0                	jmp    eax

c001b558 <changeTSS>:
c001b558:	83 ec 0c             	sub    esp,0xc
c001b55b:	e8 02 c3 ff ff       	call   c0017862 <CPU::current()>
c001b560:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b566:	83 ec 08             	sub    esp,0x8
c001b569:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001b56c:	05 7c 11 00 00       	add    eax,0x117c
c001b571:	c1 e1 15             	shl    ecx,0x15
c001b574:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001b579:	29 ca                	sub    edx,ecx
c001b57b:	52                   	push   edx
c001b57c:	50                   	push   eax
c001b57d:	e8 7e 56 ff ff       	call   c0010c00 <TSS::setESP(unsigned long)>
c001b582:	83 c4 1c             	add    esp,0x1c
c001b585:	c3                   	ret    

c001b586 <Process::addArgs(char**)>:
c001b586:	57                   	push   edi
c001b587:	56                   	push   esi
c001b588:	53                   	push   ebx
c001b589:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b58d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b591:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b59b:	85 ff                	test   edi,edi
c001b59d:	74 3d                	je     c001b5dc <Process::addArgs(char**)+0x56>
c001b59f:	8b 07                	mov    eax,DWORD PTR [edi]
c001b5a1:	85 c0                	test   eax,eax
c001b5a3:	74 37                	je     c001b5dc <Process::addArgs(char**)+0x56>
c001b5a5:	31 db                	xor    ebx,ebx
c001b5a7:	83 ec 0c             	sub    esp,0xc
c001b5aa:	50                   	push   eax
c001b5ab:	e8 32 51 fe ff       	call   c00006e2 <strlen>
c001b5b0:	40                   	inc    eax
c001b5b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5b4:	e8 85 3b ff ff       	call   c000f13e <malloc>
c001b5b9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b5c0:	5a                   	pop    edx
c001b5c1:	59                   	pop    ecx
c001b5c2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b5c5:	43                   	inc    ebx
c001b5c6:	50                   	push   eax
c001b5c7:	e8 98 51 fe ff       	call   c0000764 <strcpy>
c001b5cc:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b5d8:	85 c0                	test   eax,eax
c001b5da:	75 cb                	jne    c001b5a7 <Process::addArgs(char**)+0x21>
c001b5dc:	5b                   	pop    ebx
c001b5dd:	5e                   	pop    esi
c001b5de:	5f                   	pop    edi
c001b5df:	c3                   	ret    

c001b5e0 <Process::Process(char const*, Process*, char**)>:
c001b5e0:	56                   	push   esi
c001b5e1:	53                   	push   ebx
c001b5e2:	83 ec 14             	sub    esp,0x14
c001b5e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5e9:	05 0c 02 00 00       	add    eax,0x20c
c001b5ee:	bb 07 00 00 00       	mov    ebx,0x7
c001b5f3:	89 c6                	mov    esi,eax
c001b5f5:	85 db                	test   ebx,ebx
c001b5f7:	78 12                	js     c001b60b <Process::Process(char const*, Process*, char**)+0x2b>
c001b5f9:	83 ec 0c             	sub    esp,0xc
c001b5fc:	56                   	push   esi
c001b5fd:	e8 e8 a0 00 00       	call   c00256ea <ThreadControlBlock::ThreadControlBlock()>
c001b602:	83 c4 10             	add    esp,0x10
c001b605:	83 c6 63             	add    esi,0x63
c001b608:	4b                   	dec    ebx
c001b609:	eb ea                	jmp    c001b5f5 <Process::Process(char const*, Process*, char**)+0x15>
c001b60b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b60f:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b61a:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b623:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001b628:	8d 50 01             	lea    edx,[eax+0x1]
c001b62b:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001b631:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b635:	89 02                	mov    DWORD PTR [edx],eax
c001b637:	83 ec 0c             	sub    esp,0xc
c001b63a:	6a 10                	push   0x10
c001b63c:	e8 17 6b ff ff       	call   c0012158 <operator new(unsigned long)>
c001b641:	83 c4 10             	add    esp,0x10
c001b644:	89 c3                	mov    ebx,eax
c001b646:	83 ec 08             	sub    esp,0x8
c001b649:	6a 00                	push   0x0
c001b64b:	53                   	push   ebx
c001b64c:	e8 9b 67 ff ff       	call   c0011dec <VAS::VAS(bool)>
c001b651:	83 c4 10             	add    esp,0x10
c001b654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b658:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b65e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b662:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b670:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b674:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b67e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b684:	85 c0                	test   eax,eax
c001b686:	74 42                	je     c001b6ca <Process::Process(char const*, Process*, char**)+0xea>
c001b688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b68c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b692:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b69c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b6a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6a6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b6ac:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b6:	05 0c 01 00 00       	add    eax,0x10c
c001b6bb:	83 ec 08             	sub    esp,0x8
c001b6be:	52                   	push   edx
c001b6bf:	50                   	push   eax
c001b6c0:	e8 9f 50 fe ff       	call   c0000764 <strcpy>
c001b6c5:	83 c4 10             	add    esp,0x10
c001b6c8:	eb 5c                	jmp    c001b726 <Process::Process(char const*, Process*, char**)+0x146>
c001b6ca:	83 ec 0c             	sub    esp,0xc
c001b6cd:	68 60 12 00 00       	push   0x1260
c001b6d2:	e8 81 6a ff ff       	call   c0012158 <operator new(unsigned long)>
c001b6d7:	83 c4 10             	add    esp,0x10
c001b6da:	89 c3                	mov    ebx,eax
c001b6dc:	83 ec 08             	sub    esp,0x8
c001b6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6e3:	53                   	push   ebx
c001b6e4:	e8 15 52 ff ff       	call   c00108fe <VgaText::VgaText(char const*)>
c001b6e9:	83 c4 10             	add    esp,0x10
c001b6ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6fa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b700:	83 ec 0c             	sub    esp,0xc
c001b703:	50                   	push   eax
c001b704:	e8 f6 45 ff ff       	call   c000fcff <addToTerminalCycle(VgaText*)>
c001b709:	83 c4 10             	add    esp,0x10
c001b70c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b710:	05 0c 01 00 00       	add    eax,0x10c
c001b715:	83 ec 08             	sub    esp,0x8
c001b718:	68 ca 85 02 c0       	push   0xc00285ca
c001b71d:	50                   	push   eax
c001b71e:	e8 41 50 fe ff       	call   c0000764 <strcpy>
c001b723:	83 c4 10             	add    esp,0x10
c001b726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b72a:	83 c0 0c             	add    eax,0xc
c001b72d:	83 ec 08             	sub    esp,0x8
c001b730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b734:	50                   	push   eax
c001b735:	e8 2a 50 fe ff       	call   c0000764 <strcpy>
c001b73a:	83 c4 10             	add    esp,0x10
c001b73d:	83 ec 08             	sub    esp,0x8
c001b740:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b748:	e8 39 fe ff ff       	call   c001b586 <Process::addArgs(char**)>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	83 ec 08             	sub    esp,0x8
c001b753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b75b:	e8 ae ee ff ff       	call   c001a60e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b760:	83 c4 10             	add    esp,0x10
c001b763:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b767:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b76b:	83 f0 01             	xor    eax,0x1
c001b76e:	88 c2                	mov    dl,al
c001b770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b774:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b77a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b77f:	83 ec 08             	sub    esp,0x8
c001b782:	50                   	push   eax
c001b783:	68 c8 86 02 c0       	push   0xc00286c8
c001b788:	e8 ba 6a ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001b78d:	83 c4 10             	add    esp,0x10
c001b790:	90                   	nop
c001b791:	83 c4 14             	add    esp,0x14
c001b794:	5b                   	pop    ebx
c001b795:	5e                   	pop    esi
c001b796:	c3                   	ret    
c001b797:	90                   	nop

c001b798 <Process::Process(bool, char const*, Process*, char**)>:
c001b798:	56                   	push   esi
c001b799:	53                   	push   ebx
c001b79a:	83 ec 14             	sub    esp,0x14
c001b79d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a9:	05 0c 02 00 00       	add    eax,0x20c
c001b7ae:	bb 07 00 00 00       	mov    ebx,0x7
c001b7b3:	89 c6                	mov    esi,eax
c001b7b5:	85 db                	test   ebx,ebx
c001b7b7:	78 12                	js     c001b7cb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b7b9:	83 ec 0c             	sub    esp,0xc
c001b7bc:	56                   	push   esi
c001b7bd:	e8 28 9f 00 00       	call   c00256ea <ThreadControlBlock::ThreadControlBlock()>
c001b7c2:	83 c4 10             	add    esp,0x10
c001b7c5:	83 c6 63             	add    esi,0x63
c001b7c8:	4b                   	dec    ebx
c001b7c9:	eb ea                	jmp    c001b7b5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b7cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7cf:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7da:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b7e3:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001b7e8:	8d 50 01             	lea    edx,[eax+0x1]
c001b7eb:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001b7f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7f5:	89 02                	mov    DWORD PTR [edx],eax
c001b7f7:	83 ec 0c             	sub    esp,0xc
c001b7fa:	6a 10                	push   0x10
c001b7fc:	e8 57 69 ff ff       	call   c0012158 <operator new(unsigned long)>
c001b801:	83 c4 10             	add    esp,0x10
c001b804:	89 c3                	mov    ebx,eax
c001b806:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b80b:	83 ec 08             	sub    esp,0x8
c001b80e:	50                   	push   eax
c001b80f:	53                   	push   ebx
c001b810:	e8 d7 65 ff ff       	call   c0011dec <VAS::VAS(bool)>
c001b815:	83 c4 10             	add    esp,0x10
c001b818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b81c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b826:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b834:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b838:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b83e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b842:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b848:	85 c0                	test   eax,eax
c001b84a:	74 42                	je     c001b88e <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b850:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b856:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b860:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b86a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b870:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b87a:	05 0c 01 00 00       	add    eax,0x10c
c001b87f:	83 ec 08             	sub    esp,0x8
c001b882:	52                   	push   edx
c001b883:	50                   	push   eax
c001b884:	e8 db 4e fe ff       	call   c0000764 <strcpy>
c001b889:	83 c4 10             	add    esp,0x10
c001b88c:	eb 5c                	jmp    c001b8ea <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b88e:	83 ec 0c             	sub    esp,0xc
c001b891:	68 60 12 00 00       	push   0x1260
c001b896:	e8 bd 68 ff ff       	call   c0012158 <operator new(unsigned long)>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	89 c3                	mov    ebx,eax
c001b8a0:	83 ec 08             	sub    esp,0x8
c001b8a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8a7:	53                   	push   ebx
c001b8a8:	e8 51 50 ff ff       	call   c00108fe <VgaText::VgaText(char const*)>
c001b8ad:	83 c4 10             	add    esp,0x10
c001b8b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8b4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8be:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8c4:	83 ec 0c             	sub    esp,0xc
c001b8c7:	50                   	push   eax
c001b8c8:	e8 32 44 ff ff       	call   c000fcff <addToTerminalCycle(VgaText*)>
c001b8cd:	83 c4 10             	add    esp,0x10
c001b8d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8d4:	05 0c 01 00 00       	add    eax,0x10c
c001b8d9:	83 ec 08             	sub    esp,0x8
c001b8dc:	68 ca 85 02 c0       	push   0xc00285ca
c001b8e1:	50                   	push   eax
c001b8e2:	e8 7d 4e fe ff       	call   c0000764 <strcpy>
c001b8e7:	83 c4 10             	add    esp,0x10
c001b8ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8ee:	83 c0 0c             	add    eax,0xc
c001b8f1:	83 ec 08             	sub    esp,0x8
c001b8f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8f8:	50                   	push   eax
c001b8f9:	e8 66 4e fe ff       	call   c0000764 <strcpy>
c001b8fe:	83 c4 10             	add    esp,0x10
c001b901:	83 ec 08             	sub    esp,0x8
c001b904:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b908:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b90c:	e8 75 fc ff ff       	call   c001b586 <Process::addArgs(char**)>
c001b911:	83 c4 10             	add    esp,0x10
c001b914:	90                   	nop
c001b915:	83 c4 14             	add    esp,0x14
c001b918:	5b                   	pop    ebx
c001b919:	5e                   	pop    esi
c001b91a:	c3                   	ret    

c001b91b <disableIRQs()>:
c001b91b:	fa                   	cli    
c001b91c:	ff 05 2c b8 02 c0    	inc    DWORD PTR ds:0xc002b82c
c001b922:	c3                   	ret    

c001b923 <getIRQNestingLevel()>:
c001b923:	a1 2c b8 02 c0       	mov    eax,ds:0xc002b82c
c001b928:	c3                   	ret    

c001b929 <enableIRQs()>:
c001b929:	a1 2c b8 02 c0       	mov    eax,ds:0xc002b82c
c001b92e:	48                   	dec    eax
c001b92f:	a3 2c b8 02 c0       	mov    ds:0xc002b82c,eax
c001b934:	75 01                	jne    c001b937 <enableIRQs()+0xe>
c001b936:	fb                   	sti    
c001b937:	c3                   	ret    

c001b938 <lockScheduler()>:
c001b938:	eb e1                	jmp    c001b91b <disableIRQs()>

c001b93a <unlockScheduler()>:
c001b93a:	eb ed                	jmp    c001b929 <enableIRQs()>

c001b93c <userModeEntryPoint(void*)>:
c001b93c:	83 ec 0c             	sub    esp,0xc
c001b93f:	e8 f6 ff ff ff       	call   c001b93a <unlockScheduler()>
c001b944:	fb                   	sti    
c001b945:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b94d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001b953:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b957:	83 c4 0c             	add    esp,0xc
c001b95a:	e9 6b 49 fe ff       	jmp    c00002ca <goToUsermode>

c001b95f <lockStuff()>:
c001b95f:	e8 b7 ff ff ff       	call   c001b91b <disableIRQs()>
c001b964:	ff 05 28 b8 02 c0    	inc    DWORD PTR ds:0xc002b828
c001b96a:	c3                   	ret    

c001b96b <taskStartupFunction>:
c001b96b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b970:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001b973:	c3                   	ret    

c001b974 <updateTimeUsed()>:
c001b974:	57                   	push   edi
c001b975:	56                   	push   esi
c001b976:	53                   	push   ebx
c001b977:	e8 e6 be ff ff       	call   c0017862 <CPU::current()>
c001b97c:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001b983:	74 49                	je     c001b9ce <updateTimeUsed()+0x5a>
c001b985:	0f 31                	rdtsc  
c001b987:	89 c1                	mov    ecx,eax
c001b989:	a3 68 b8 02 c0       	mov    ds:0xc002b868,eax
c001b98e:	2b 0d 58 b8 02 c0    	sub    ecx,DWORD PTR ds:0xc002b858
c001b994:	89 d3                	mov    ebx,edx
c001b996:	89 0d 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,ecx
c001b99c:	1b 1d 5c b8 02 c0    	sbb    ebx,DWORD PTR ds:0xc002b85c
c001b9a2:	a3 58 b8 02 c0       	mov    ds:0xc002b858,eax
c001b9a7:	89 1d 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,ebx
c001b9ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b2:	89 15 6c b8 02 c0    	mov    DWORD PTR ds:0xc002b86c,edx
c001b9b8:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001b9bb:	89 15 5c b8 02 c0    	mov    DWORD PTR ds:0xc002b85c,edx
c001b9c1:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001b9c4:	01 f1                	add    ecx,esi
c001b9c6:	11 fb                	adc    ebx,edi
c001b9c8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001b9cb:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001b9ce:	5b                   	pop    ebx
c001b9cf:	5e                   	pop    esi
c001b9d0:	5f                   	pop    edi
c001b9d1:	c3                   	ret    

c001b9d2 <switchToThread(ThreadControlBlock*)>:
c001b9d2:	53                   	push   ebx
c001b9d3:	83 ec 08             	sub    esp,0x8
c001b9d6:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001b9db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9df:	85 c0                	test   eax,eax
c001b9e1:	75 30                	jne    c001ba13 <switchToThread(ThreadControlBlock*)+0x41>
c001b9e3:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001b9e6:	3c ff                	cmp    al,0xff
c001b9e8:	74 25                	je     c001ba0f <switchToThread(ThreadControlBlock*)+0x3d>
c001b9ea:	0f b6 d0             	movzx  edx,al
c001b9ed:	b8 84 03 00 00       	mov    eax,0x384
c001b9f2:	29 d0                	sub    eax,edx
c001b9f4:	c1 e0 10             	shl    eax,0x10
c001b9f7:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001b9fa:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001b9fd:	e8 72 ff ff ff       	call   c001b974 <updateTimeUsed()>
c001ba02:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba06:	83 c4 08             	add    esp,0x8
c001ba09:	5b                   	pop    ebx
c001ba0a:	e9 f4 48 fe ff       	jmp    c0000303 <switchToThreadASM>
c001ba0f:	31 c0                	xor    eax,eax
c001ba11:	eb e7                	jmp    c001b9fa <switchToThread(ThreadControlBlock*)+0x28>
c001ba13:	c7 05 24 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x1
c001ba1d:	83 c4 08             	add    esp,0x8
c001ba20:	5b                   	pop    ebx
c001ba21:	c3                   	ret    

c001ba22 <Semaphore::Semaphore(int)>:
c001ba22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba2a:	89 10                	mov    DWORD PTR [eax],edx
c001ba2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba30:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ba37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba3b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba46:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba4d:	90                   	nop
c001ba4e:	c3                   	ret    
c001ba4f:	90                   	nop

c001ba50 <Mutex::Mutex()>:
c001ba50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba54:	6a 01                	push   0x1
c001ba56:	50                   	push   eax
c001ba57:	e8 c6 ff ff ff       	call   c001ba22 <Semaphore::Semaphore(int)>
c001ba5c:	83 c4 08             	add    esp,0x8
c001ba5f:	90                   	nop
c001ba60:	c3                   	ret    
c001ba61:	90                   	nop

c001ba62 <Process::createThread(void (*)(void*), void*, int)>:
c001ba62:	55                   	push   ebp
c001ba63:	31 c9                	xor    ecx,ecx
c001ba65:	57                   	push   edi
c001ba66:	56                   	push   esi
c001ba67:	53                   	push   ebx
c001ba68:	83 ec 1c             	sub    esp,0x1c
c001ba6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba6f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ba76:	89 f2                	mov    edx,esi
c001ba78:	0f b7 c2             	movzx  eax,dx
c001ba7b:	83 e2 01             	and    edx,0x1
c001ba7e:	74 14                	je     c001ba94 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ba80:	d1 f8                	sar    eax,1
c001ba82:	41                   	inc    ecx
c001ba83:	89 c2                	mov    edx,eax
c001ba85:	83 f9 10             	cmp    ecx,0x10
c001ba88:	75 ee                	jne    c001ba78 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ba8a:	83 c4 1c             	add    esp,0x1c
c001ba8d:	31 c0                	xor    eax,eax
c001ba8f:	5b                   	pop    ebx
c001ba90:	5e                   	pop    esi
c001ba91:	5f                   	pop    edi
c001ba92:	5d                   	pop    ebp
c001ba93:	c3                   	ret    
c001ba94:	83 ec 08             	sub    esp,0x8
c001ba97:	b8 01 00 00 00       	mov    eax,0x1
c001ba9c:	d3 e0                	shl    eax,cl
c001ba9e:	09 c6                	or     esi,eax
c001baa0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001baa6:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001baad:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bab0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bab3:	01 ce                	add    esi,ecx
c001bab5:	89 f0                	mov    eax,esi
c001bab7:	c1 e0 05             	shl    eax,0x5
c001baba:	01 c6                	add    esi,eax
c001babc:	8d 04 33             	lea    eax,[ebx+esi*1]
c001babf:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bac5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bacb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bacf:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bad5:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001badb:	89 ca                	mov    edx,ecx
c001badd:	f7 da                	neg    edx
c001badf:	c1 e2 15             	shl    edx,0x15
c001bae2:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bae8:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001baee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001baf2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bafc:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bb02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bb06:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bb0c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bb16:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bb20:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bb27:	50                   	push   eax
c001bb28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb2c:	68 48 b8 02 c0       	push   0xc002b848
c001bb31:	e8 0c 9a 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bb36:	83 c4 10             	add    esp,0x10
c001bb39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb3d:	83 c4 1c             	add    esp,0x1c
c001bb40:	5b                   	pop    ebx
c001bb41:	5e                   	pop    esi
c001bb42:	5f                   	pop    edi
c001bb43:	5d                   	pop    ebp
c001bb44:	c3                   	ret    
c001bb45:	90                   	nop

c001bb46 <Process::createUserThread()>:
c001bb46:	83 ec 0c             	sub    esp,0xc
c001bb49:	68 80 00 00 00       	push   0x80
c001bb4e:	6a 00                	push   0x0
c001bb50:	68 3c b9 01 c0       	push   0xc001b93c
c001bb55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb59:	e8 04 ff ff ff       	call   c001ba62 <Process::createThread(void (*)(void*), void*, int)>
c001bb5e:	83 c4 1c             	add    esp,0x1c
c001bb61:	c3                   	ret    

c001bb62 <setupMultitasking(void (*)())>:
c001bb62:	56                   	push   esi
c001bb63:	53                   	push   ebx
c001bb64:	53                   	push   ebx
c001bb65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb69:	eb 10                	jmp    c001bb7b <setupMultitasking(void (*)())+0x19>
c001bb6b:	83 ec 0c             	sub    esp,0xc
c001bb6e:	68 48 b8 02 c0       	push   0xc002b848
c001bb73:	e8 1c 99 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bb78:	83 c4 10             	add    esp,0x10
c001bb7b:	83 ec 0c             	sub    esp,0xc
c001bb7e:	68 48 b8 02 c0       	push   0xc002b848
c001bb83:	e8 f0 98 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bb88:	83 c4 10             	add    esp,0x10
c001bb8b:	84 c0                	test   al,al
c001bb8d:	74 dc                	je     c001bb6b <setupMultitasking(void (*)())+0x9>
c001bb8f:	83 ec 0c             	sub    esp,0xc
c001bb92:	68 3b 07 00 00       	push   0x73b
c001bb97:	e8 bc 65 ff ff       	call   c0012158 <operator new(unsigned long)>
c001bb9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bba3:	89 c3                	mov    ebx,eax
c001bba5:	6a 00                	push   0x0
c001bba7:	68 ce 85 02 c0       	push   0xc00285ce
c001bbac:	6a 01                	push   0x1
c001bbae:	50                   	push   eax
c001bbaf:	e8 e4 fb ff ff       	call   c001b798 <Process::Process(bool, char const*, Process*, char**)>
c001bbb4:	83 c4 18             	add    esp,0x18
c001bbb7:	89 1d 54 b8 02 c0    	mov    DWORD PTR ds:0xc002b854,ebx
c001bbbd:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbc3:	68 f0 86 02 c0       	push   0xc00286f0
c001bbc8:	e8 7a 66 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001bbcd:	58                   	pop    eax
c001bbce:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbd4:	e8 9a 48 ff ff       	call   c0010473 <setActiveTerminal(VgaText*)>
c001bbd9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bbe1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bbe7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bbea:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bbf4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bbfa:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bc00:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bc0a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bc14:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bc1e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bc24:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bc2a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bc34:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bc3a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bc44:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bc4a:	5a                   	pop    edx
c001bc4b:	59                   	pop    ecx
c001bc4c:	68 ca 85 02 c0       	push   0xc00285ca
c001bc51:	50                   	push   eax
c001bc52:	e8 0d 4b fe ff       	call   c0000764 <strcpy>
c001bc57:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bc5e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bc62:	83 c4 14             	add    esp,0x14
c001bc65:	5b                   	pop    ebx
c001bc66:	5e                   	pop    esi
c001bc67:	e9 89 46 fe ff       	jmp    c00002f5 <switchToThreadASMFirstTime>

c001bc6c <schedule()>:
c001bc6c:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001bc71:	85 c0                	test   eax,eax
c001bc73:	74 0b                	je     c001bc80 <schedule()+0x14>
c001bc75:	c7 05 24 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x1
c001bc7f:	c3                   	ret    
c001bc80:	53                   	push   ebx
c001bc81:	83 ec 14             	sub    esp,0x14
c001bc84:	68 48 b8 02 c0       	push   0xc002b848
c001bc89:	e8 ea 97 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bc8e:	83 c4 10             	add    esp,0x10
c001bc91:	84 c0                	test   al,al
c001bc93:	75 38                	jne    c001bccd <schedule()+0x61>
c001bc95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc9a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc9d:	4a                   	dec    edx
c001bc9e:	74 32                	je     c001bcd2 <schedule()+0x66>
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	68 48 b8 02 c0       	push   0xc002b848
c001bca8:	e8 c3 97 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bcad:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001bcb4:	89 c3                	mov    ebx,eax
c001bcb6:	e8 d9 97 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bcbb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bcc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcc5:	e8 08 fd ff ff       	call   c001b9d2 <switchToThread(ThreadControlBlock*)>
c001bcca:	83 c4 10             	add    esp,0x10
c001bccd:	83 c4 08             	add    esp,0x8
c001bcd0:	5b                   	pop    ebx
c001bcd1:	c3                   	ret    
c001bcd2:	83 ec 08             	sub    esp,0x8
c001bcd5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bcdc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bce2:	68 48 b8 02 c0       	push   0xc002b848
c001bce7:	e8 56 98 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bcec:	83 c4 10             	add    esp,0x10
c001bcef:	eb af                	jmp    c001bca0 <schedule()+0x34>

c001bcf1 <unlockStuff()>:
c001bcf1:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001bcf6:	48                   	dec    eax
c001bcf7:	a3 28 b8 02 c0       	mov    ds:0xc002b828,eax
c001bcfc:	75 09                	jne    c001bd07 <unlockStuff()+0x16>
c001bcfe:	a1 24 b8 02 c0       	mov    eax,ds:0xc002b824
c001bd03:	85 c0                	test   eax,eax
c001bd05:	75 05                	jne    c001bd0c <unlockStuff()+0x1b>
c001bd07:	e9 1d fc ff ff       	jmp    c001b929 <enableIRQs()>
c001bd0c:	83 ec 0c             	sub    esp,0xc
c001bd0f:	c7 05 24 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x0
c001bd19:	e8 4e ff ff ff       	call   c001bc6c <schedule()>
c001bd1e:	83 c4 0c             	add    esp,0xc
c001bd21:	e9 03 fc ff ff       	jmp    c001b929 <enableIRQs()>

c001bd26 <Semaphore::tryAcquire()>:
c001bd26:	83 ec 0c             	sub    esp,0xc
c001bd29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd2d:	e8 2d fc ff ff       	call   c001b95f <lockStuff()>
c001bd32:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bd35:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bd37:	7c 0b                	jl     c001bd44 <Semaphore::tryAcquire()+0x1e>
c001bd39:	e8 b3 ff ff ff       	call   c001bcf1 <unlockStuff()>
c001bd3e:	31 c0                	xor    eax,eax
c001bd40:	83 c4 0c             	add    esp,0xc
c001bd43:	c3                   	ret    
c001bd44:	42                   	inc    edx
c001bd45:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd48:	e8 a4 ff ff ff       	call   c001bcf1 <unlockStuff()>
c001bd4d:	b0 01                	mov    al,0x1
c001bd4f:	83 c4 0c             	add    esp,0xc
c001bd52:	c3                   	ret    
c001bd53:	90                   	nop

c001bd54 <Semaphore::assertLocked(char const*)>:
c001bd54:	83 ec 0c             	sub    esp,0xc
c001bd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd5f:	e8 fb fb ff ff       	call   c001b95f <lockStuff()>
c001bd64:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd66:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001bd69:	7c 05                	jl     c001bd70 <Semaphore::assertLocked(char const*)+0x1c>
c001bd6b:	83 c4 0c             	add    esp,0xc
c001bd6e:	eb 81                	jmp    c001bcf1 <unlockStuff()>
c001bd70:	83 ec 0c             	sub    esp,0xc
c001bd73:	52                   	push   edx
c001bd74:	e8 6c cc ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001bd79:	83 c4 10             	add    esp,0x10
c001bd7c:	83 c4 0c             	add    esp,0xc
c001bd7f:	e9 6d ff ff ff       	jmp    c001bcf1 <unlockStuff()>

c001bd84 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001bd84:	83 ec 0c             	sub    esp,0xc
c001bd87:	e8 97 fb ff ff       	call   c001b923 <getIRQNestingLevel()>
c001bd8c:	83 ec 08             	sub    esp,0x8
c001bd8f:	50                   	push   eax
c001bd90:	68 24 87 02 c0       	push   0xc0028724
c001bd95:	e8 ad 64 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001bd9a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bd9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bda6:	e8 c1 fe ff ff       	call   c001bc6c <schedule()>
c001bdab:	e8 8a fb ff ff       	call   c001b93a <unlockScheduler()>
c001bdb0:	e8 6e fb ff ff       	call   c001b923 <getIRQNestingLevel()>
c001bdb5:	5a                   	pop    edx
c001bdb6:	59                   	pop    ecx
c001bdb7:	50                   	push   eax
c001bdb8:	68 58 87 02 c0       	push   0xc0028758
c001bdbd:	e8 85 64 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001bdc2:	83 c4 1c             	add    esp,0x1c
c001bdc5:	c3                   	ret    

c001bdc6 <blockTask(TaskState)>:
c001bdc6:	83 ec 0c             	sub    esp,0xc
c001bdc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdcd:	e8 66 fb ff ff       	call   c001b938 <lockScheduler()>
c001bdd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdd7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdda:	e8 8d fe ff ff       	call   c001bc6c <schedule()>
c001bddf:	83 c4 0c             	add    esp,0xc
c001bde2:	e9 53 fb ff ff       	jmp    c001b93a <unlockScheduler()>

c001bde7 <waitTask(int, int*, int)>:
c001bde7:	83 ec 18             	sub    esp,0x18
c001bdea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdf3:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001bdf6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bdfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdff:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001be02:	6a 07                	push   0x7
c001be04:	e8 bd ff ff ff       	call   c001bdc6 <blockTask(TaskState)>
c001be09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be0e:	83 c4 10             	add    esp,0x10
c001be11:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001be14:	85 d2                	test   edx,edx
c001be16:	74 0a                	je     c001be22 <waitTask(int, int*, int)+0x3b>
c001be18:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001be1b:	89 02                	mov    DWORD PTR [edx],eax
c001be1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be22:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001be25:	83 c4 0c             	add    esp,0xc
c001be28:	c3                   	ret    

c001be29 <nanoSleepUntil(unsigned long long)>:
c001be29:	83 ec 0c             	sub    esp,0xc
c001be2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be34:	3b 05 70 aa 02 c0    	cmp    eax,DWORD PTR ds:0xc002aa70
c001be3a:	89 d1                	mov    ecx,edx
c001be3c:	1b 0d 74 aa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002aa74
c001be42:	73 04                	jae    c001be48 <nanoSleepUntil(unsigned long long)+0x1f>
c001be44:	83 c4 0c             	add    esp,0xc
c001be47:	c3                   	ret    
c001be48:	e8 12 fb ff ff       	call   c001b95f <lockStuff()>
c001be4d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be53:	83 ec 08             	sub    esp,0x8
c001be56:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001be59:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001be5c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001be62:	68 3c b8 02 c0       	push   0xc002b83c
c001be67:	e8 d6 96 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001be6c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001be73:	e8 4e ff ff ff       	call   c001bdc6 <blockTask(TaskState)>
c001be78:	83 c4 1c             	add    esp,0x1c
c001be7b:	e9 71 fe ff ff       	jmp    c001bcf1 <unlockStuff()>

c001be80 <nanoSleep(unsigned long long)>:
c001be80:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c001be85:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c001be8b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001be8f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001be93:	eb 94                	jmp    c001be29 <nanoSleepUntil(unsigned long long)>

c001be95 <sleep(unsigned long long)>:
c001be95:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001be9d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001bea2:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001bea6:	01 ca                	add    edx,ecx
c001bea8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001beac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001beb0:	eb ce                	jmp    c001be80 <nanoSleep(unsigned long long)>

c001beb2 <Semaphore::acquire()>:
c001beb2:	83 ec 0c             	sub    esp,0xc
c001beb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beb9:	e8 a1 fa ff ff       	call   c001b95f <lockStuff()>
c001bebe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bec1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bec3:	7d 0c                	jge    c001bed1 <Semaphore::acquire()+0x1f>
c001bec5:	42                   	inc    edx
c001bec6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bec9:	83 c4 0c             	add    esp,0xc
c001becc:	e9 20 fe ff ff       	jmp    c001bcf1 <unlockStuff()>
c001bed1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bed7:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001bede:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bee1:	85 d2                	test   edx,edx
c001bee3:	74 2a                	je     c001bf0f <Semaphore::acquire()+0x5d>
c001bee5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bee8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001beee:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001bef1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bef7:	83 ec 0c             	sub    esp,0xc
c001befa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001befd:	6a 05                	push   0x5
c001beff:	e8 c2 fe ff ff       	call   c001bdc6 <blockTask(TaskState)>
c001bf04:	83 c4 10             	add    esp,0x10
c001bf07:	83 c4 0c             	add    esp,0xc
c001bf0a:	e9 e2 fd ff ff       	jmp    c001bcf1 <unlockStuff()>
c001bf0f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf18:	eb d7                	jmp    c001bef1 <Semaphore::acquire()+0x3f>

c001bf1a <taskReturned>:
c001bf1a:	83 ec 18             	sub    esp,0x18
c001bf1d:	68 8c 87 02 c0       	push   0xc002878c
c001bf22:	e8 be ca ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001bf27:	83 c4 10             	add    esp,0x10
c001bf2a:	83 ec 0c             	sub    esp,0xc
c001bf2d:	6a 02                	push   0x2
c001bf2f:	e8 92 fe ff ff       	call   c001bdc6 <blockTask(TaskState)>
c001bf34:	e8 ff f9 ff ff       	call   c001b938 <lockScheduler()>
c001bf39:	e8 2e fd ff ff       	call   c001bc6c <schedule()>
c001bf3e:	e8 f7 f9 ff ff       	call   c001b93a <unlockScheduler()>
c001bf43:	83 c4 10             	add    esp,0x10
c001bf46:	eb e2                	jmp    c001bf2a <taskReturned+0x10>

c001bf48 <unblockTask(ThreadControlBlock*)>:
c001bf48:	53                   	push   ebx
c001bf49:	83 ec 08             	sub    esp,0x8
c001bf4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf50:	e8 e3 f9 ff ff       	call   c001b938 <lockScheduler()>
c001bf55:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf58:	85 c0                	test   eax,eax
c001bf5a:	74 5c                	je     c001bfb8 <unblockTask(ThreadControlBlock*)+0x70>
c001bf5c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf5f:	48                   	dec    eax
c001bf60:	74 31                	je     c001bf93 <unblockTask(ThreadControlBlock*)+0x4b>
c001bf62:	83 ec 0c             	sub    esp,0xc
c001bf65:	68 48 b8 02 c0       	push   0xc002b848
c001bf6a:	e8 01 95 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bf6f:	83 c4 10             	add    esp,0x10
c001bf72:	85 c0                	test   eax,eax
c001bf74:	75 17                	jne    c001bf8d <unblockTask(ThreadControlBlock*)+0x45>
c001bf76:	eb 65                	jmp    c001bfdd <unblockTask(ThreadControlBlock*)+0x95>
c001bf78:	83 ec 08             	sub    esp,0x8
c001bf7b:	50                   	push   eax
c001bf7c:	68 48 b8 02 c0       	push   0xc002b848
c001bf81:	e8 fa 97 00 00       	call   c0025780 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001bf86:	83 c4 10             	add    esp,0x10
c001bf89:	85 c0                	test   eax,eax
c001bf8b:	74 50                	je     c001bfdd <unblockTask(ThreadControlBlock*)+0x95>
c001bf8d:	39 c3                	cmp    ebx,eax
c001bf8f:	75 e7                	jne    c001bf78 <unblockTask(ThreadControlBlock*)+0x30>
c001bf91:	eb 1c                	jmp    c001bfaf <unblockTask(ThreadControlBlock*)+0x67>
c001bf93:	83 ec 0c             	sub    esp,0xc
c001bf96:	68 7c 88 02 c0       	push   0xc002887c
c001bf9b:	e8 a7 62 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001bfa0:	c7 04 24 08 88 02 c0 	mov    DWORD PTR [esp],0xc0028808
c001bfa7:	e8 9b 62 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001bfac:	83 c4 10             	add    esp,0x10
c001bfaf:	83 c4 08             	add    esp,0x8
c001bfb2:	5b                   	pop    ebx
c001bfb3:	e9 82 f9 ff ff       	jmp    c001b93a <unlockScheduler()>
c001bfb8:	83 ec 0c             	sub    esp,0xc
c001bfbb:	68 c0 87 02 c0       	push   0xc00287c0
c001bfc0:	e8 82 62 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001bfc5:	c7 04 24 08 88 02 c0 	mov    DWORD PTR [esp],0xc0028808
c001bfcc:	e8 76 62 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001bfd1:	83 c4 10             	add    esp,0x10
c001bfd4:	83 c4 08             	add    esp,0x8
c001bfd7:	5b                   	pop    ebx
c001bfd8:	e9 5d f9 ff ff       	jmp    c001b93a <unlockScheduler()>
c001bfdd:	83 ec 08             	sub    esp,0x8
c001bfe0:	53                   	push   ebx
c001bfe1:	68 48 b8 02 c0       	push   0xc002b848
c001bfe6:	e8 57 95 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bfeb:	83 c4 10             	add    esp,0x10
c001bfee:	83 c4 08             	add    esp,0x8
c001bff1:	5b                   	pop    ebx
c001bff2:	e9 43 f9 ff ff       	jmp    c001b93a <unlockScheduler()>

c001bff7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001bff7:	55                   	push   ebp
c001bff8:	57                   	push   edi
c001bff9:	56                   	push   esi
c001bffa:	53                   	push   ebx
c001bffb:	83 ec 1c             	sub    esp,0x1c
c001bffe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c002:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c005:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c00b:	85 c9                	test   ecx,ecx
c001c00d:	7e 20                	jle    c001c02f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c00f:	31 f6                	xor    esi,esi
c001c011:	83 ec 0c             	sub    esp,0xc
c001c014:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c01b:	46                   	inc    esi
c001c01c:	e8 2d 31 ff ff       	call   c000f14e <free>
c001c021:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c024:	83 c4 10             	add    esp,0x10
c001c027:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c02d:	7f e2                	jg     c001c011 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c02f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c039:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c03e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c041:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c044:	d3 c0                	rol    eax,cl
c001c046:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c04d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c050:	89 f7                	mov    edi,esi
c001c052:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c05a:	0f 85 4f 01 00 00    	jne    c001c1af <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c060:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c066:	85 c0                	test   eax,eax
c001c068:	0f 84 aa 00 00 00    	je     c001c118 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c06e:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c071:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c075:	31 c9                	xor    ecx,ecx
c001c077:	eb 10                	jmp    c001c089 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c079:	41                   	inc    ecx
c001c07a:	83 f9 10             	cmp    ecx,0x10
c001c07d:	0f 84 95 00 00 00    	je     c001c118 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c083:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c089:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c090:	d3 fa                	sar    edx,cl
c001c092:	83 e2 01             	and    edx,0x1
c001c095:	74 e2                	je     c001c079 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c097:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c09a:	01 ca                	add    edx,ecx
c001c09c:	89 d5                	mov    ebp,edx
c001c09e:	c1 e5 05             	shl    ebp,0x5
c001c0a1:	01 ea                	add    edx,ebp
c001c0a3:	01 d0                	add    eax,edx
c001c0a5:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c0ab:	83 fd 07             	cmp    ebp,0x7
c001c0ae:	75 c9                	jne    c001c079 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0b0:	05 40 02 00 00       	add    eax,0x240
c001c0b5:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c0b8:	83 fd ff             	cmp    ebp,0xffffffff
c001c0bb:	0f 8c 08 01 00 00    	jl     c001c1c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c0c1:	0f 84 b9 01 00 00    	je     c001c280 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c0c7:	85 ed                	test   ebp,ebp
c001c0c9:	0f 84 a0 01 00 00    	je     c001c26f <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c0cf:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c0d1:	75 a6                	jne    c001c079 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0d3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c0d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c0dd:	01 d0                	add    eax,edx
c001c0df:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c0e3:	83 ec 0c             	sub    esp,0xc
c001c0e6:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c0ec:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0ef:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0f5:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c0fc:	50                   	push   eax
c001c0fd:	e8 46 fe ff ff       	call   c001bf48 <unblockTask(ThreadControlBlock*)>
c001c102:	83 c4 10             	add    esp,0x10
c001c105:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c108:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c10c:	89 f7                	mov    edi,esi
c001c10e:	41                   	inc    ecx
c001c10f:	83 f9 10             	cmp    ecx,0x10
c001c112:	0f 85 6b ff ff ff    	jne    c001c083 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c118:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c11e:	85 c0                	test   eax,eax
c001c120:	74 5d                	je     c001c17f <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c122:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c128:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c12e:	74 4f                	je     c001c17f <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c130:	83 ec 0c             	sub    esp,0xc
c001c133:	68 48 b8 02 c0       	push   0xc002b848
c001c138:	e8 33 93 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c13d:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c144:	89 c7                	mov    edi,eax
c001c146:	e8 2d 93 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c14b:	83 c4 10             	add    esp,0x10
c001c14e:	84 c0                	test   al,al
c001c150:	0f 84 e4 00 00 00    	je     c001c23a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c156:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c159:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c15f:	85 d2                	test   edx,edx
c001c161:	74 0f                	je     c001c172 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c163:	83 ec 0c             	sub    esp,0xc
c001c166:	8b 02                	mov    eax,DWORD PTR [edx]
c001c168:	52                   	push   edx
c001c169:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c16c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c16f:	83 c4 10             	add    esp,0x10
c001c172:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c17c:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c17f:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c185:	85 db                	test   ebx,ebx
c001c187:	74 16                	je     c001c19f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c189:	83 ec 0c             	sub    esp,0xc
c001c18c:	53                   	push   ebx
c001c18d:	e8 4a 56 ff ff       	call   c00117dc <VAS::~VAS()>
c001c192:	58                   	pop    eax
c001c193:	5a                   	pop    edx
c001c194:	6a 10                	push   0x10
c001c196:	53                   	push   ebx
c001c197:	e8 cb 5f ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c001c19c:	83 c4 10             	add    esp,0x10
c001c19f:	83 ec 0c             	sub    esp,0xc
c001c1a2:	68 d5 85 02 c0       	push   0xc00285d5
c001c1a7:	e8 9b 60 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c1ac:	83 c4 10             	add    esp,0x10
c001c1af:	83 ec 08             	sub    esp,0x8
c001c1b2:	68 3b 07 00 00       	push   0x73b
c001c1b7:	68 e3 85 02 c0       	push   0xc00285e3
c001c1bc:	e8 86 60 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c1c1:	83 c4 2c             	add    esp,0x2c
c001c1c4:	5b                   	pop    ebx
c001c1c5:	5e                   	pop    esi
c001c1c6:	5f                   	pop    edi
c001c1c7:	5d                   	pop    ebp
c001c1c8:	c3                   	ret    
c001c1c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1cd:	83 ec 0c             	sub    esp,0xc
c001c1d0:	68 c0 88 02 c0       	push   0xc00288c0
c001c1d5:	e8 0b c8 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001c1da:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c1dd:	83 c4 10             	add    esp,0x10
c001c1e0:	89 f7                	mov    edi,esi
c001c1e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1e6:	e9 8e fe ff ff       	jmp    c001c079 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1eb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c1f1:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c1f7:	75 1c                	jne    c001c215 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c1f9:	83 ec 0c             	sub    esp,0xc
c001c1fc:	68 28 89 02 c0       	push   0xc0028928
c001c201:	e8 41 60 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c206:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c20d:	e8 b4 fb ff ff       	call   c001bdc6 <blockTask(TaskState)>
c001c212:	83 c4 10             	add    esp,0x10
c001c215:	83 ec 08             	sub    esp,0x8
c001c218:	56                   	push   esi
c001c219:	68 48 b8 02 c0       	push   0xc002b848
c001c21e:	e8 1f 93 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c223:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c22a:	e8 41 92 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c22f:	83 c4 10             	add    esp,0x10
c001c232:	39 f8                	cmp    eax,edi
c001c234:	0f 84 1c ff ff ff    	je     c001c156 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c23a:	83 ec 0c             	sub    esp,0xc
c001c23d:	68 48 b8 02 c0       	push   0xc002b848
c001c242:	e8 29 92 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c247:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c24e:	89 c6                	mov    esi,eax
c001c250:	e8 3f 92 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c255:	83 c4 10             	add    esp,0x10
c001c258:	39 f3                	cmp    ebx,esi
c001c25a:	74 b9                	je     c001c215 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c25c:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c25f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c262:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c268:	75 ab                	jne    c001c215 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c26a:	e9 7c ff ff ff       	jmp    c001c1eb <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c26f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c273:	83 ec 0c             	sub    esp,0xc
c001c276:	68 f4 88 02 c0       	push   0xc00288f4
c001c27b:	e9 55 ff ff ff       	jmp    c001c1d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c280:	8b 36                	mov    esi,DWORD PTR [esi]
c001c282:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c286:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c289:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c28c:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c292:	01 d7                	add    edi,edx
c001c294:	89 f8                	mov    eax,edi
c001c296:	e9 44 fe ff ff       	jmp    c001c0df <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c29b <cleanerTaskFunction(void*)>:
c001c29b:	53                   	push   ebx
c001c29c:	83 ec 08             	sub    esp,0x8
c001c29f:	e8 96 f6 ff ff       	call   c001b93a <unlockScheduler()>
c001c2a4:	e8 8f f6 ff ff       	call   c001b938 <lockScheduler()>
c001c2a9:	80 3d 0c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b80c,0x0
c001c2b0:	0f 85 8e 00 00 00    	jne    c001c344 <cleanerTaskFunction(void*)+0xa9>
c001c2b6:	83 ec 0c             	sub    esp,0xc
c001c2b9:	6a 02                	push   0x2
c001c2bb:	e8 c4 fa ff ff       	call   c001bd84 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c2c0:	83 c4 10             	add    esp,0x10
c001c2c3:	c6 05 0c b8 02 c0 00 	mov    BYTE PTR ds:0xc002b80c,0x0
c001c2ca:	e8 90 f6 ff ff       	call   c001b95f <lockStuff()>
c001c2cf:	e8 64 f6 ff ff       	call   c001b938 <lockScheduler()>
c001c2d4:	83 ec 0c             	sub    esp,0xc
c001c2d7:	68 30 b8 02 c0       	push   0xc002b830
c001c2dc:	e8 97 91 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c2e1:	83 c4 10             	add    esp,0x10
c001c2e4:	84 c0                	test   al,al
c001c2e6:	75 40                	jne    c001c328 <cleanerTaskFunction(void*)+0x8d>
c001c2e8:	83 ec 0c             	sub    esp,0xc
c001c2eb:	68 30 b8 02 c0       	push   0xc002b830
c001c2f0:	e8 7b 91 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c2f5:	c7 04 24 30 b8 02 c0 	mov    DWORD PTR [esp],0xc002b830
c001c2fc:	89 c3                	mov    ebx,eax
c001c2fe:	e8 91 91 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c303:	c7 04 24 f9 85 02 c0 	mov    DWORD PTR [esp],0xc00285f9
c001c30a:	e8 38 5f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c30f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c312:	e8 e0 fc ff ff       	call   c001bff7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c317:	c7 04 24 12 86 02 c0 	mov    DWORD PTR [esp],0xc0028612
c001c31e:	e8 24 5f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	eb ac                	jmp    c001c2d4 <cleanerTaskFunction(void*)+0x39>
c001c328:	e8 0d f6 ff ff       	call   c001b93a <unlockScheduler()>
c001c32d:	e8 bf f9 ff ff       	call   c001bcf1 <unlockStuff()>
c001c332:	e8 01 f6 ff ff       	call   c001b938 <lockScheduler()>
c001c337:	80 3d 0c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b80c,0x0
c001c33e:	0f 84 72 ff ff ff    	je     c001c2b6 <cleanerTaskFunction(void*)+0x1b>
c001c344:	e8 f1 f5 ff ff       	call   c001b93a <unlockScheduler()>
c001c349:	e9 75 ff ff ff       	jmp    c001c2c3 <cleanerTaskFunction(void*)+0x28>

c001c34e <terminateTask(int)>:
c001c34e:	83 ec 14             	sub    esp,0x14
c001c351:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c356:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c359:	83 c0 0c             	add    eax,0xc
c001c35c:	50                   	push   eax
c001c35d:	68 50 89 02 c0       	push   0xc0028950
c001c362:	e8 e0 5e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c367:	e8 f3 f5 ff ff       	call   c001b95f <lockStuff()>
c001c36c:	e8 c7 f5 ff ff       	call   c001b938 <lockScheduler()>
c001c371:	c7 04 24 25 86 02 c0 	mov    DWORD PTR [esp],0xc0028625
c001c378:	e8 ca 5e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c37d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c386:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c391:	5a                   	pop    edx
c001c392:	59                   	pop    ecx
c001c393:	50                   	push   eax
c001c394:	68 30 b8 02 c0       	push   0xc002b830
c001c399:	e8 a4 91 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c39e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3a3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c3aa:	c7 04 24 3f 86 02 c0 	mov    DWORD PTR [esp],0xc002863f
c001c3b1:	e8 91 5e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c3b6:	83 c4 10             	add    esp,0x10
c001c3b9:	a1 08 b8 02 c0       	mov    eax,ds:0xc002b808
c001c3be:	85 c0                	test   eax,eax
c001c3c0:	74 5a                	je     c001c41c <terminateTask(int)+0xce>
c001c3c2:	83 ec 0c             	sub    esp,0xc
c001c3c5:	68 59 86 02 c0       	push   0xc0028659
c001c3ca:	e8 78 5e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c3cf:	58                   	pop    eax
c001c3d0:	c6 05 0c b8 02 c0 01 	mov    BYTE PTR ds:0xc002b80c,0x1
c001c3d7:	ff 35 08 b8 02 c0    	push   DWORD PTR ds:0xc002b808
c001c3dd:	e8 66 fb ff ff       	call   c001bf48 <unblockTask(ThreadControlBlock*)>
c001c3e2:	c7 04 24 73 86 02 c0 	mov    DWORD PTR [esp],0xc0028673
c001c3e9:	e8 59 5e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c3ee:	83 c4 10             	add    esp,0x10
c001c3f1:	e8 44 f5 ff ff       	call   c001b93a <unlockScheduler()>
c001c3f6:	e8 f6 f8 ff ff       	call   c001bcf1 <unlockStuff()>
c001c3fb:	83 ec 0c             	sub    esp,0xc
c001c3fe:	68 ab 86 02 c0       	push   0xc00286ab
c001c403:	e8 3f 5e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c408:	83 c4 10             	add    esp,0x10
c001c40b:	e8 28 f5 ff ff       	call   c001b938 <lockScheduler()>
c001c410:	e8 57 f8 ff ff       	call   c001bc6c <schedule()>
c001c415:	e8 20 f5 ff ff       	call   c001b93a <unlockScheduler()>
c001c41a:	eb ef                	jmp    c001c40b <terminateTask(int)+0xbd>
c001c41c:	83 ec 0c             	sub    esp,0xc
c001c41f:	68 8d 86 02 c0       	push   0xc002868d
c001c424:	e8 1e 5e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001c429:	83 c4 10             	add    esp,0x10
c001c42c:	eb c3                	jmp    c001c3f1 <terminateTask(int)+0xa3>

c001c42e <Thr::terminateFromIRQ(int)>:
c001c42e:	83 ec 18             	sub    esp,0x18
c001c431:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c435:	e8 14 ff ff ff       	call   c001c34e <terminateTask(int)>

c001c43a <Semaphore::release()>:
c001c43a:	83 ec 0c             	sub    esp,0xc
c001c43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c441:	e8 19 f5 ff ff       	call   c001b95f <lockStuff()>
c001c446:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c449:	85 d2                	test   edx,edx
c001c44b:	74 1a                	je     c001c467 <Semaphore::release()+0x2d>
c001c44d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c456:	52                   	push   edx
c001c457:	e8 ec fa ff ff       	call   c001bf48 <unblockTask(ThreadControlBlock*)>
c001c45c:	83 c4 10             	add    esp,0x10
c001c45f:	83 c4 0c             	add    esp,0xc
c001c462:	e9 8a f8 ff ff       	jmp    c001bcf1 <unlockStuff()>
c001c467:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c46a:	83 c4 0c             	add    esp,0xc
c001c46d:	e9 7f f8 ff ff       	jmp    c001bcf1 <unlockStuff()>

c001c472 <__static_initialization_and_destruction_0(int, int)>:
c001c472:	83 ec 0c             	sub    esp,0xc
c001c475:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c47a:	0f 85 88 00 00 00    	jne    c001c508 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c480:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c488:	75 7e                	jne    c001c508 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c48a:	83 ec 0c             	sub    esp,0xc
c001c48d:	68 48 b8 02 c0       	push   0xc002b848
c001c492:	e8 91 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c497:	83 c4 10             	add    esp,0x10
c001c49a:	83 ec 04             	sub    esp,0x4
c001c49d:	68 9c 93 02 c0       	push   0xc002939c
c001c4a2:	68 48 b8 02 c0       	push   0xc002b848
c001c4a7:	68 e8 56 02 c0       	push   0xc00256e8
c001c4ac:	e8 32 5c ff ff       	call   c00120e3 <__cxa_atexit>
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	83 ec 0c             	sub    esp,0xc
c001c4b7:	68 3c b8 02 c0       	push   0xc002b83c
c001c4bc:	e8 67 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4c1:	83 c4 10             	add    esp,0x10
c001c4c4:	83 ec 04             	sub    esp,0x4
c001c4c7:	68 9c 93 02 c0       	push   0xc002939c
c001c4cc:	68 3c b8 02 c0       	push   0xc002b83c
c001c4d1:	68 e8 56 02 c0       	push   0xc00256e8
c001c4d6:	e8 08 5c ff ff       	call   c00120e3 <__cxa_atexit>
c001c4db:	83 c4 10             	add    esp,0x10
c001c4de:	83 ec 0c             	sub    esp,0xc
c001c4e1:	68 30 b8 02 c0       	push   0xc002b830
c001c4e6:	e8 3d 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4eb:	83 c4 10             	add    esp,0x10
c001c4ee:	83 ec 04             	sub    esp,0x4
c001c4f1:	68 9c 93 02 c0       	push   0xc002939c
c001c4f6:	68 30 b8 02 c0       	push   0xc002b830
c001c4fb:	68 e8 56 02 c0       	push   0xc00256e8
c001c500:	e8 de 5b ff ff       	call   c00120e3 <__cxa_atexit>
c001c505:	83 c4 10             	add    esp,0x10
c001c508:	90                   	nop
c001c509:	83 c4 0c             	add    esp,0xc
c001c50c:	c3                   	ret    

c001c50d <_GLOBAL__sub_I_kernelProcess>:
c001c50d:	83 ec 0c             	sub    esp,0xc
c001c510:	83 ec 08             	sub    esp,0x8
c001c513:	68 ff ff 00 00       	push   0xffff
c001c518:	6a 01                	push   0x1
c001c51a:	e8 53 ff ff ff       	call   c001c472 <__static_initialization_and_destruction_0(int, int)>
c001c51f:	83 c4 10             	add    esp,0x10
c001c522:	83 c4 0c             	add    esp,0xc
c001c525:	c3                   	ret    

c001c526 <Vm::vm8086EntryPoint(void*)>:
c001c526:	83 ec 0c             	sub    esp,0xc
c001c529:	e8 0c f4 ff ff       	call   c001b93a <unlockScheduler()>
c001c52e:	fb                   	sti    
c001c52f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c534:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c538:	52                   	push   edx
c001c539:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c53d:	52                   	push   edx
c001c53e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c542:	52                   	push   edx
c001c543:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c547:	50                   	push   eax
c001c548:	e8 4c 3d fe ff       	call   c0000299 <goToVM86>
c001c54d:	83 c4 1c             	add    esp,0x1c
c001c550:	c3                   	ret    

c001c551 <Vm::inbv(unsigned short)>:
c001c551:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c555:	ec                   	in     al,dx
c001c556:	c3                   	ret    

c001c557 <Vm::outbv(unsigned short, unsigned char)>:
c001c557:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c55b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c55f:	ee                   	out    dx,al
c001c560:	c3                   	ret    

c001c561 <Vm::realToLinear(unsigned short, unsigned short)>:
c001c561:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c566:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c56b:	c1 e0 04             	shl    eax,0x4
c001c56e:	01 d0                	add    eax,edx
c001c570:	c3                   	ret    

c001c571 <Vm::getSegment(unsigned int)>:
c001c571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c575:	c1 e8 10             	shr    eax,0x10
c001c578:	c3                   	ret    

c001c579 <Vm::getOffset(unsigned int)>:
c001c579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57d:	c3                   	ret    

c001c57e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c57e:	55                   	push   ebp
c001c57f:	57                   	push   edi
c001c580:	56                   	push   esi
c001c581:	53                   	push   ebx
c001c582:	83 ec 2c             	sub    esp,0x2c
c001c585:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c589:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c58d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c591:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c595:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c599:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c59d:	e8 96 f3 ff ff       	call   c001b938 <lockScheduler()>
c001c5a2:	68 80 00 00 00       	push   0x80
c001c5a7:	6a 00                	push   0x0
c001c5a9:	68 26 c5 01 c0       	push   0xc001c526
c001c5ae:	55                   	push   ebp
c001c5af:	e8 ae f4 ff ff       	call   c001ba62 <Process::createThread(void (*)(void*), void*, int)>
c001c5b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5b8:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c5bc:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c5c0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c5c4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c5c8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c5cc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5d3:	e8 80 5b ff ff       	call   c0012158 <operator new(unsigned long)>
c001c5d8:	83 c4 0c             	add    esp,0xc
c001c5db:	89 c3                	mov    ebx,eax
c001c5dd:	55                   	push   ebp
c001c5de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5e2:	50                   	push   eax
c001c5e3:	e8 8e 61 ff ff       	call   c0012776 <File::File(char const*, Process*)>
c001c5e8:	83 c4 0c             	add    esp,0xc
c001c5eb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c5ef:	50                   	push   eax
c001c5f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c5f4:	50                   	push   eax
c001c5f5:	53                   	push   ebx
c001c5f6:	e8 8b 64 ff ff       	call   c0012a86 <File::stat(unsigned long long*, bool*)>
c001c5fb:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	84 d2                	test   dl,dl
c001c604:	74 1c                	je     c001c622 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c606:	83 ec 0c             	sub    esp,0xc
c001c609:	68 6f 89 02 c0       	push   0xc002896f
c001c60e:	e8 d2 c3 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001c613:	e8 22 f3 ff ff       	call   c001b93a <unlockScheduler()>
c001c618:	83 c4 10             	add    esp,0x10
c001c61b:	31 d2                	xor    edx,edx
c001c61d:	e9 81 00 00 00       	jmp    c001c6a3 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c622:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c626:	51                   	push   ecx
c001c627:	51                   	push   ecx
c001c628:	6a 01                	push   0x1
c001c62a:	53                   	push   ebx
c001c62b:	e8 aa 61 ff ff       	call   c00127da <File::open(FileOpenMode)>
c001c630:	83 c4 10             	add    esp,0x10
c001c633:	85 c0                	test   eax,eax
c001c635:	74 1b                	je     c001c652 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c637:	83 ec 0c             	sub    esp,0xc
c001c63a:	68 88 89 02 c0       	push   0xc0028988
c001c63f:	e8 a1 c3 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001c644:	e8 f1 f2 ff ff       	call   c001b93a <unlockScheduler()>
c001c649:	83 c4 10             	add    esp,0x10
c001c64c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c650:	eb 51                	jmp    c001c6a3 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c652:	83 ec 0c             	sub    esp,0xc
c001c655:	0f b7 ff             	movzx  edi,di
c001c658:	6a 07                	push   0x7
c001c65a:	0f b7 f6             	movzx  esi,si
c001c65d:	68 00 01 00 00       	push   0x100
c001c662:	6a 00                	push   0x0
c001c664:	6a 00                	push   0x0
c001c666:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c66c:	e8 c3 55 ff ff       	call   c0011c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c671:	83 c4 18             	add    esp,0x18
c001c674:	57                   	push   edi
c001c675:	56                   	push   esi
c001c676:	e8 e6 fe ff ff       	call   c001c561 <Vm::realToLinear(unsigned short, unsigned short)>
c001c67b:	5a                   	pop    edx
c001c67c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c67e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c682:	51                   	push   ecx
c001c683:	50                   	push   eax
c001c684:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c688:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c68c:	53                   	push   ebx
c001c68d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c690:	83 c4 14             	add    esp,0x14
c001c693:	53                   	push   ebx
c001c694:	e8 9f 61 ff ff       	call   c0012838 <File::close()>
c001c699:	e8 9c f2 ff ff       	call   c001b93a <unlockScheduler()>
c001c69e:	83 c4 10             	add    esp,0x10
c001c6a1:	b2 01                	mov    dl,0x1
c001c6a3:	83 c4 2c             	add    esp,0x2c
c001c6a6:	88 d0                	mov    al,dl
c001c6a8:	5b                   	pop    ebx
c001c6a9:	5e                   	pop    esi
c001c6aa:	5f                   	pop    edi
c001c6ab:	5d                   	pop    ebp
c001c6ac:	c3                   	ret    

c001c6ad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c6ad:	57                   	push   edi
c001c6ae:	56                   	push   esi
c001c6af:	53                   	push   ebx
c001c6b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c6b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c6bc:	83 e8 06             	sub    eax,0x6
c001c6bf:	0f b7 c0             	movzx  eax,ax
c001c6c2:	50                   	push   eax
c001c6c3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c6c8:	50                   	push   eax
c001c6c9:	e8 93 fe ff ff       	call   c001c561 <Vm::realToLinear(unsigned short, unsigned short)>
c001c6ce:	5a                   	pop    edx
c001c6cf:	5e                   	pop    esi
c001c6d0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c6d3:	8d 56 fa             	lea    edx,[esi-0x6]
c001c6d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c6dc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c6df:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c6e2:	83 c2 02             	add    edx,0x2
c001c6e5:	66 89 10             	mov    WORD PTR [eax],dx
c001c6e8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c6eb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c6ef:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c6f2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c6f6:	89 d6                	mov    esi,edx
c001c6f8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c6fe:	66 81 e6 ff fd       	and    si,0xfdff
c001c703:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c707:	74 07                	je     c001c710 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c709:	89 d6                	mov    esi,edx
c001c70b:	66 81 ce 00 02       	or     si,0x200
c001c710:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c714:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c719:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c71d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c725:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c728:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c730:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c733:	5b                   	pop    ebx
c001c734:	5e                   	pop    esi
c001c735:	5f                   	pop    edi
c001c736:	c3                   	ret    

c001c737 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c737:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c73c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c741:	c1 e0 04             	shl    eax,0x4
c001c744:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c747:	c3                   	ret    

c001c748 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c748:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c74d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c752:	c1 e0 04             	shl    eax,0x4
c001c755:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c759:	c3                   	ret    

c001c75a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c75a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c75f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c764:	c1 e0 04             	shl    eax,0x4
c001c767:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c76a:	c3                   	ret    

c001c76b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c76b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c770:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c775:	c1 e0 04             	shl    eax,0x4
c001c778:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c77c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c77f:	c3                   	ret    

c001c780 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c780:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c785:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c78a:	c1 e0 04             	shl    eax,0x4
c001c78d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c791:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c795:	c3                   	ret    

c001c796 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c796:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c79b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c7a0:	c1 e0 04             	shl    eax,0x4
c001c7a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7a7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c7aa:	c3                   	ret    

c001c7ab <Vm::faultHandler(regs*)>:
c001c7ab:	55                   	push   ebp
c001c7ac:	57                   	push   edi
c001c7ad:	56                   	push   esi
c001c7ae:	53                   	push   ebx
c001c7af:	83 ec 1c             	sub    esp,0x1c
c001c7b2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c7b6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c7b9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c7bd:	0f b7 f0             	movzx  esi,ax
c001c7c0:	52                   	push   edx
c001c7c1:	0f b7 c0             	movzx  eax,ax
c001c7c4:	50                   	push   eax
c001c7c5:	e8 97 fd ff ff       	call   c001c561 <Vm::realToLinear(unsigned short, unsigned short)>
c001c7ca:	5a                   	pop    edx
c001c7cb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c7ce:	59                   	pop    ecx
c001c7cf:	89 c7                	mov    edi,eax
c001c7d1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c7d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7e1:	0f b7 c5             	movzx  eax,bp
c001c7e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7e8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c7ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7f0:	e8 6c fd ff ff       	call   c001c561 <Vm::realToLinear(unsigned short, unsigned short)>
c001c7f5:	5a                   	pop    edx
c001c7f6:	59                   	pop    ecx
c001c7f7:	b1 06                	mov    cl,0x6
c001c7f9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c7fe:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c803:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c806:	80 fa 9d             	cmp    dl,0x9d
c001c809:	0f 84 1d 02 00 00    	je     c001ca2c <Vm::faultHandler(regs*)+0x281>
c001c80f:	0f 87 8e 00 00 00    	ja     c001c8a3 <Vm::faultHandler(regs*)+0xf8>
c001c815:	80 fa 66             	cmp    dl,0x66
c001c818:	0f 84 89 01 00 00    	je     c001c9a7 <Vm::faultHandler(regs*)+0x1fc>
c001c81e:	77 44                	ja     c001c864 <Vm::faultHandler(regs*)+0xb9>
c001c820:	80 fa 36             	cmp    dl,0x36
c001c823:	0f 84 74 01 00 00    	je     c001c99d <Vm::faultHandler(regs*)+0x1f2>
c001c829:	77 1a                	ja     c001c845 <Vm::faultHandler(regs*)+0x9a>
c001c82b:	80 fa 26             	cmp    dl,0x26
c001c82e:	0f 84 4b 01 00 00    	je     c001c97f <Vm::faultHandler(regs*)+0x1d4>
c001c834:	80 fa 2e             	cmp    dl,0x2e
c001c837:	0f 85 4a 05 00 00    	jne    c001cd87 <Vm::faultHandler(regs*)+0x5dc>
c001c83d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c840:	31 c9                	xor    ecx,ecx
c001c842:	47                   	inc    edi
c001c843:	eb be                	jmp    c001c803 <Vm::faultHandler(regs*)+0x58>
c001c845:	80 fa 64             	cmp    dl,0x64
c001c848:	0f 84 3b 01 00 00    	je     c001c989 <Vm::faultHandler(regs*)+0x1de>
c001c84e:	0f 87 3f 01 00 00    	ja     c001c993 <Vm::faultHandler(regs*)+0x1e8>
c001c854:	80 fa 3e             	cmp    dl,0x3e
c001c857:	0f 85 2a 05 00 00    	jne    c001cd87 <Vm::faultHandler(regs*)+0x5dc>
c001c85d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c860:	b1 01                	mov    cl,0x1
c001c862:	eb de                	jmp    c001c842 <Vm::faultHandler(regs*)+0x97>
c001c864:	80 fa 6d             	cmp    dl,0x6d
c001c867:	0f 84 bf 02 00 00    	je     c001cb2c <Vm::faultHandler(regs*)+0x381>
c001c86d:	77 17                	ja     c001c886 <Vm::faultHandler(regs*)+0xdb>
c001c86f:	80 fa 67             	cmp    dl,0x67
c001c872:	0f 84 3c 01 00 00    	je     c001c9b4 <Vm::faultHandler(regs*)+0x209>
c001c878:	80 fa 6c             	cmp    dl,0x6c
c001c87b:	0f 84 5d 02 00 00    	je     c001cade <Vm::faultHandler(regs*)+0x333>
c001c881:	e9 01 05 00 00       	jmp    c001cd87 <Vm::faultHandler(regs*)+0x5dc>
c001c886:	80 fa 6f             	cmp    dl,0x6f
c001c889:	0f 84 8b 03 00 00    	je     c001cc1a <Vm::faultHandler(regs*)+0x46f>
c001c88f:	0f 82 0f 03 00 00    	jb     c001cba4 <Vm::faultHandler(regs*)+0x3f9>
c001c895:	80 fa 9c             	cmp    dl,0x9c
c001c898:	0f 84 23 01 00 00    	je     c001c9c1 <Vm::faultHandler(regs*)+0x216>
c001c89e:	e9 e4 04 00 00       	jmp    c001cd87 <Vm::faultHandler(regs*)+0x5dc>
c001c8a3:	80 fa ec             	cmp    dl,0xec
c001c8a6:	0f 84 7f 04 00 00    	je     c001cd2b <Vm::faultHandler(regs*)+0x580>
c001c8ac:	77 7b                	ja     c001c929 <Vm::faultHandler(regs*)+0x17e>
c001c8ae:	80 fa e4             	cmp    dl,0xe4
c001c8b1:	0f 84 fe 03 00 00    	je     c001ccb5 <Vm::faultHandler(regs*)+0x50a>
c001c8b7:	77 53                	ja     c001c90c <Vm::faultHandler(regs*)+0x161>
c001c8b9:	80 fa cd             	cmp    dl,0xcd
c001c8bc:	0f 84 cd 01 00 00    	je     c001ca8f <Vm::faultHandler(regs*)+0x2e4>
c001c8c2:	80 fa cf             	cmp    dl,0xcf
c001c8c5:	0f 85 bc 04 00 00    	jne    c001cd87 <Vm::faultHandler(regs*)+0x5dc>
c001c8cb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c8ce:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c8d1:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c8d5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c8d8:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c8dc:	81 ca 00 02 02 00    	or     edx,0x20200
c001c8e2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c8e5:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c8e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c8ef:	66 c1 e8 09          	shr    ax,0x9
c001c8f3:	83 e0 01             	and    eax,0x1
c001c8f6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c8f9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c8fc:	83 c0 06             	add    eax,0x6
c001c8ff:	25 ff ff 00 00       	and    eax,0xffff
c001c904:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c907:	e9 77 04 00 00       	jmp    c001cd83 <Vm::faultHandler(regs*)+0x5d8>
c001c90c:	80 fa e6             	cmp    dl,0xe6
c001c90f:	0f 84 ea 03 00 00    	je     c001ccff <Vm::faultHandler(regs*)+0x554>
c001c915:	0f 82 b6 03 00 00    	jb     c001ccd1 <Vm::faultHandler(regs*)+0x526>
c001c91b:	80 fa e7             	cmp    dl,0xe7
c001c91e:	0f 84 f2 03 00 00    	je     c001cd16 <Vm::faultHandler(regs*)+0x56b>
c001c924:	e9 5e 04 00 00       	jmp    c001cd87 <Vm::faultHandler(regs*)+0x5dc>
c001c929:	80 fa ef             	cmp    dl,0xef
c001c92c:	0f 84 3c 04 00 00    	je     c001cd6e <Vm::faultHandler(regs*)+0x5c3>
c001c932:	77 28                	ja     c001c95c <Vm::faultHandler(regs*)+0x1b1>
c001c934:	80 fa ed             	cmp    dl,0xed
c001c937:	0f 84 0a 04 00 00    	je     c001cd47 <Vm::faultHandler(regs*)+0x59c>
c001c93d:	80 fa ee             	cmp    dl,0xee
c001c940:	0f 85 41 04 00 00    	jne    c001cd87 <Vm::faultHandler(regs*)+0x5dc>
c001c946:	50                   	push   eax
c001c947:	50                   	push   eax
c001c948:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001c94c:	50                   	push   eax
c001c94d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001c951:	50                   	push   eax
c001c952:	e8 00 fc ff ff       	call   c001c557 <Vm::outbv(unsigned short, unsigned char)>
c001c957:	e9 0a 04 00 00       	jmp    c001cd66 <Vm::faultHandler(regs*)+0x5bb>
c001c95c:	80 fa fa             	cmp    dl,0xfa
c001c95f:	0f 84 5d 01 00 00    	je     c001cac2 <Vm::faultHandler(regs*)+0x317>
c001c965:	80 fa fb             	cmp    dl,0xfb
c001c968:	0f 84 62 01 00 00    	je     c001cad0 <Vm::faultHandler(regs*)+0x325>
c001c96e:	80 fa f3             	cmp    dl,0xf3
c001c971:	0f 85 10 04 00 00    	jne    c001cd87 <Vm::faultHandler(regs*)+0x5dc>
c001c977:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c97a:	e9 c3 fe ff ff       	jmp    c001c842 <Vm::faultHandler(regs*)+0x97>
c001c97f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c982:	b1 02                	mov    cl,0x2
c001c984:	e9 b9 fe ff ff       	jmp    c001c842 <Vm::faultHandler(regs*)+0x97>
c001c989:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c98c:	b1 03                	mov    cl,0x3
c001c98e:	e9 af fe ff ff       	jmp    c001c842 <Vm::faultHandler(regs*)+0x97>
c001c993:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c996:	b1 04                	mov    cl,0x4
c001c998:	e9 a5 fe ff ff       	jmp    c001c842 <Vm::faultHandler(regs*)+0x97>
c001c99d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9a0:	b1 05                	mov    cl,0x5
c001c9a2:	e9 9b fe ff ff       	jmp    c001c842 <Vm::faultHandler(regs*)+0x97>
c001c9a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9aa:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001c9af:	e9 8e fe ff ff       	jmp    c001c842 <Vm::faultHandler(regs*)+0x97>
c001c9b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9b7:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001c9bc:	e9 81 fe ff ff       	jmp    c001c842 <Vm::faultHandler(regs*)+0x97>
c001c9c1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c9c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c9c8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001c9cd:	74 30                	je     c001c9ff <Vm::faultHandler(regs*)+0x254>
c001c9cf:	83 e9 04             	sub    ecx,0x4
c001c9d2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001c9d8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001c9de:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001c9e1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9e4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c9ea:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001c9ee:	0f 84 8c 03 00 00    	je     c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001c9f4:	80 ce 02             	or     dh,0x2
c001c9f7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9fa:	e9 81 03 00 00       	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001c9ff:	83 e9 02             	sub    ecx,0x2
c001ca02:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ca08:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ca0b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca0f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ca15:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ca19:	74 05                	je     c001ca20 <Vm::faultHandler(regs*)+0x275>
c001ca1b:	80 ce 02             	or     dh,0x2
c001ca1e:	eb 03                	jmp    c001ca23 <Vm::faultHandler(regs*)+0x278>
c001ca20:	80 e6 fd             	and    dh,0xfd
c001ca23:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca27:	e9 54 03 00 00       	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001ca2c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ca31:	74 2a                	je     c001ca5d <Vm::faultHandler(regs*)+0x2b2>
c001ca33:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca35:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca3b:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca41:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca4c:	c1 e8 09             	shr    eax,0x9
c001ca4f:	83 e0 01             	and    eax,0x1
c001ca52:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca55:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca58:	83 c0 04             	add    eax,0x4
c001ca5b:	eb 25                	jmp    c001ca82 <Vm::faultHandler(regs*)+0x2d7>
c001ca5d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ca60:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca66:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca69:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ca6c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca72:	66 c1 e8 09          	shr    ax,0x9
c001ca76:	83 e0 01             	and    eax,0x1
c001ca79:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca7c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca7f:	83 c0 02             	add    eax,0x2
c001ca82:	25 ff ff 00 00       	and    eax,0xffff
c001ca87:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ca8a:	e9 f1 02 00 00       	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001ca8f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ca93:	3c ff                	cmp    al,0xff
c001ca95:	75 10                	jne    c001caa7 <Vm::faultHandler(regs*)+0x2fc>
c001ca97:	83 ec 0c             	sub    esp,0xc
c001ca9a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ca9d:	e8 8c f9 ff ff       	call   c001c42e <Thr::terminateFromIRQ(int)>
c001caa2:	e9 c2 02 00 00       	jmp    c001cd69 <Vm::faultHandler(regs*)+0x5be>
c001caa7:	83 ec 0c             	sub    esp,0xc
c001caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001caae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cab2:	57                   	push   edi
c001cab3:	50                   	push   eax
c001cab4:	53                   	push   ebx
c001cab5:	e8 f3 fb ff ff       	call   c001c6ad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001caba:	83 c4 20             	add    esp,0x20
c001cabd:	e9 c1 02 00 00       	jmp    c001cd83 <Vm::faultHandler(regs*)+0x5d8>
c001cac2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cac7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cacb:	e9 b0 02 00 00       	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001cad0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cad5:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cad9:	e9 a2 02 00 00       	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001cade:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cae3:	74 0d                	je     c001caf2 <Vm::faultHandler(regs*)+0x347>
c001cae5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001caec:	0f 87 e9 02 00 00    	ja     c001cddb <Vm::faultHandler(regs*)+0x630>
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001caf8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cafc:	50                   	push   eax
c001cafd:	e8 4f fa ff ff       	call   c001c551 <Vm::inbv(unsigned short)>
c001cb02:	83 c4 0c             	add    esp,0xc
c001cb05:	0f b6 c0             	movzx  eax,al
c001cb08:	0f b7 c9             	movzx  ecx,cx
c001cb0b:	50                   	push   eax
c001cb0c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cb10:	50                   	push   eax
c001cb11:	51                   	push   ecx
c001cb12:	e8 54 fc ff ff       	call   c001c76b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cb17:	83 c4 10             	add    esp,0x10
c001cb1a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb1d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb21:	74 03                	je     c001cb26 <Vm::faultHandler(regs*)+0x37b>
c001cb23:	48                   	dec    eax
c001cb24:	eb 01                	jmp    c001cb27 <Vm::faultHandler(regs*)+0x37c>
c001cb26:	40                   	inc    eax
c001cb27:	0f b7 c0             	movzx  eax,ax
c001cb2a:	eb 70                	jmp    c001cb9c <Vm::faultHandler(regs*)+0x3f1>
c001cb2c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cb2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cb32:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cb37:	74 0c                	je     c001cb45 <Vm::faultHandler(regs*)+0x39a>
c001cb39:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cb3f:	0f 87 96 02 00 00    	ja     c001cddb <Vm::faultHandler(regs*)+0x630>
c001cb45:	0f b7 c9             	movzx  ecx,cx
c001cb48:	0f b7 f6             	movzx  esi,si
c001cb4b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cb4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb53:	74 20                	je     c001cb75 <Vm::faultHandler(regs*)+0x3ca>
c001cb55:	ed                   	in     eax,dx
c001cb56:	55                   	push   ebp
c001cb57:	50                   	push   eax
c001cb58:	51                   	push   ecx
c001cb59:	56                   	push   esi
c001cb5a:	e8 37 fc ff ff       	call   c001c796 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb65:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb69:	74 05                	je     c001cb70 <Vm::faultHandler(regs*)+0x3c5>
c001cb6b:	83 e8 04             	sub    eax,0x4
c001cb6e:	eb 27                	jmp    c001cb97 <Vm::faultHandler(regs*)+0x3ec>
c001cb70:	83 c0 04             	add    eax,0x4
c001cb73:	eb 22                	jmp    c001cb97 <Vm::faultHandler(regs*)+0x3ec>
c001cb75:	66 ed                	in     ax,dx
c001cb77:	0f b7 c0             	movzx  eax,ax
c001cb7a:	57                   	push   edi
c001cb7b:	50                   	push   eax
c001cb7c:	51                   	push   ecx
c001cb7d:	56                   	push   esi
c001cb7e:	e8 fd fb ff ff       	call   c001c780 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb89:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb8d:	74 05                	je     c001cb94 <Vm::faultHandler(regs*)+0x3e9>
c001cb8f:	83 e8 02             	sub    eax,0x2
c001cb92:	eb 03                	jmp    c001cb97 <Vm::faultHandler(regs*)+0x3ec>
c001cb94:	83 c0 02             	add    eax,0x2
c001cb97:	25 ff ff 00 00       	and    eax,0xffff
c001cb9c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cb9f:	e9 dc 01 00 00       	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001cba4:	49                   	dec    ecx
c001cba5:	80 f9 05             	cmp    cl,0x5
c001cba8:	77 24                	ja     c001cbce <Vm::faultHandler(regs*)+0x423>
c001cbaa:	0f b6 c9             	movzx  ecx,cl
c001cbad:	ff 24 8d d0 89 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7630]
c001cbb4:	0f b7 f5             	movzx  esi,bp
c001cbb7:	eb 15                	jmp    c001cbce <Vm::faultHandler(regs*)+0x423>
c001cbb9:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001cbbd:	eb 0f                	jmp    c001cbce <Vm::faultHandler(regs*)+0x423>
c001cbbf:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cbc3:	eb 09                	jmp    c001cbce <Vm::faultHandler(regs*)+0x423>
c001cbc5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cbc9:	eb 03                	jmp    c001cbce <Vm::faultHandler(regs*)+0x423>
c001cbcb:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001cbce:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbd1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cbd6:	74 0b                	je     c001cbe3 <Vm::faultHandler(regs*)+0x438>
c001cbd8:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbdd:	0f 87 f8 01 00 00    	ja     c001cddb <Vm::faultHandler(regs*)+0x630>
c001cbe3:	0f b7 c0             	movzx  eax,ax
c001cbe6:	52                   	push   edx
c001cbe7:	52                   	push   edx
c001cbe8:	50                   	push   eax
c001cbe9:	56                   	push   esi
c001cbea:	e8 48 fb ff ff       	call   c001c737 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cbef:	59                   	pop    ecx
c001cbf0:	0f b6 c0             	movzx  eax,al
c001cbf3:	5e                   	pop    esi
c001cbf4:	50                   	push   eax
c001cbf5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cbf9:	50                   	push   eax
c001cbfa:	e8 58 f9 ff ff       	call   c001c557 <Vm::outbv(unsigned short, unsigned char)>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cc05:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc09:	74 03                	je     c001cc0e <Vm::faultHandler(regs*)+0x463>
c001cc0b:	48                   	dec    eax
c001cc0c:	eb 01                	jmp    c001cc0f <Vm::faultHandler(regs*)+0x464>
c001cc0e:	40                   	inc    eax
c001cc0f:	0f b7 c0             	movzx  eax,ax
c001cc12:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cc15:	e9 66 01 00 00       	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001cc1a:	49                   	dec    ecx
c001cc1b:	80 f9 05             	cmp    cl,0x5
c001cc1e:	77 1f                	ja     c001cc3f <Vm::faultHandler(regs*)+0x494>
c001cc20:	0f b6 c9             	movzx  ecx,cl
c001cc23:	ff 24 8d e8 89 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7618]
c001cc2a:	89 ee                	mov    esi,ebp
c001cc2c:	eb 11                	jmp    c001cc3f <Vm::faultHandler(regs*)+0x494>
c001cc2e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cc31:	eb 0c                	jmp    c001cc3f <Vm::faultHandler(regs*)+0x494>
c001cc33:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc36:	eb 07                	jmp    c001cc3f <Vm::faultHandler(regs*)+0x494>
c001cc38:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cc3b:	eb 02                	jmp    c001cc3f <Vm::faultHandler(regs*)+0x494>
c001cc3d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cc3f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cc42:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc47:	74 0c                	je     c001cc55 <Vm::faultHandler(regs*)+0x4aa>
c001cc49:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc4f:	0f 87 86 01 00 00    	ja     c001cddb <Vm::faultHandler(regs*)+0x630>
c001cc55:	0f b7 d6             	movzx  edx,si
c001cc58:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cc5b:	0f b7 c1             	movzx  eax,cx
c001cc5e:	81 e7 00 04 00 00    	and    edi,0x400
c001cc64:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cc67:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc6c:	74 1d                	je     c001cc8b <Vm::faultHandler(regs*)+0x4e0>
c001cc6e:	55                   	push   ebp
c001cc6f:	55                   	push   ebp
c001cc70:	50                   	push   eax
c001cc71:	52                   	push   edx
c001cc72:	e8 e3 fa ff ff       	call   c001c75a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cc77:	83 c4 10             	add    esp,0x10
c001cc7a:	89 f2                	mov    edx,esi
c001cc7c:	ef                   	out    dx,eax
c001cc7d:	85 ff                	test   edi,edi
c001cc7f:	74 05                	je     c001cc86 <Vm::faultHandler(regs*)+0x4db>
c001cc81:	83 e9 04             	sub    ecx,0x4
c001cc84:	eb 21                	jmp    c001cca7 <Vm::faultHandler(regs*)+0x4fc>
c001cc86:	83 c1 04             	add    ecx,0x4
c001cc89:	eb 1c                	jmp    c001cca7 <Vm::faultHandler(regs*)+0x4fc>
c001cc8b:	55                   	push   ebp
c001cc8c:	55                   	push   ebp
c001cc8d:	50                   	push   eax
c001cc8e:	52                   	push   edx
c001cc8f:	e8 b4 fa ff ff       	call   c001c748 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cc94:	83 c4 10             	add    esp,0x10
c001cc97:	89 f2                	mov    edx,esi
c001cc99:	66 ef                	out    dx,ax
c001cc9b:	85 ff                	test   edi,edi
c001cc9d:	74 05                	je     c001cca4 <Vm::faultHandler(regs*)+0x4f9>
c001cc9f:	83 e9 02             	sub    ecx,0x2
c001cca2:	eb 03                	jmp    c001cca7 <Vm::faultHandler(regs*)+0x4fc>
c001cca4:	83 c1 02             	add    ecx,0x2
c001cca7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ccad:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001ccb0:	e9 cb 00 00 00       	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001ccb5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ccbc:	83 ec 0c             	sub    esp,0xc
c001ccbf:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ccc3:	50                   	push   eax
c001ccc4:	e8 88 f8 ff ff       	call   c001c551 <Vm::inbv(unsigned short)>
c001ccc9:	0f b6 c0             	movzx  eax,al
c001cccc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cccf:	eb 3f                	jmp    c001cd10 <Vm::faultHandler(regs*)+0x565>
c001ccd1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ccd6:	74 07                	je     c001ccdf <Vm::faultHandler(regs*)+0x534>
c001ccd8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccdc:	ed                   	in     eax,dx
c001ccdd:	eb 14                	jmp    c001ccf3 <Vm::faultHandler(regs*)+0x548>
c001ccdf:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001cce2:	66 31 c9             	xor    cx,cx
c001cce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001cce8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccec:	66 ed                	in     ax,dx
c001ccee:	0f b7 c0             	movzx  eax,ax
c001ccf1:	09 c8                	or     eax,ecx
c001ccf3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ccf6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ccfa:	e9 84 00 00 00       	jmp    c001cd83 <Vm::faultHandler(regs*)+0x5d8>
c001ccff:	52                   	push   edx
c001cd00:	52                   	push   edx
c001cd01:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cd05:	50                   	push   eax
c001cd06:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd0a:	50                   	push   eax
c001cd0b:	e8 47 f8 ff ff       	call   c001c557 <Vm::outbv(unsigned short, unsigned char)>
c001cd10:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd14:	eb 53                	jmp    c001cd69 <Vm::faultHandler(regs*)+0x5be>
c001cd16:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd19:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd1d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd22:	74 03                	je     c001cd27 <Vm::faultHandler(regs*)+0x57c>
c001cd24:	ef                   	out    dx,eax
c001cd25:	eb cf                	jmp    c001ccf6 <Vm::faultHandler(regs*)+0x54b>
c001cd27:	66 ef                	out    dx,ax
c001cd29:	eb cb                	jmp    c001ccf6 <Vm::faultHandler(regs*)+0x54b>
c001cd2b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cd32:	83 ec 0c             	sub    esp,0xc
c001cd35:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cd39:	50                   	push   eax
c001cd3a:	e8 12 f8 ff ff       	call   c001c551 <Vm::inbv(unsigned short)>
c001cd3f:	0f b6 c0             	movzx  eax,al
c001cd42:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cd45:	eb 1f                	jmp    c001cd66 <Vm::faultHandler(regs*)+0x5bb>
c001cd47:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd4a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd4f:	74 03                	je     c001cd54 <Vm::faultHandler(regs*)+0x5a9>
c001cd51:	ed                   	in     eax,dx
c001cd52:	eb 0d                	jmp    c001cd61 <Vm::faultHandler(regs*)+0x5b6>
c001cd54:	66 ed                	in     ax,dx
c001cd56:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001cd59:	0f b7 c0             	movzx  eax,ax
c001cd5c:	66 31 d2             	xor    dx,dx
c001cd5f:	09 d0                	or     eax,edx
c001cd61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd64:	eb 1a                	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001cd66:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	eb 15                	jmp    c001cd83 <Vm::faultHandler(regs*)+0x5d8>
c001cd6e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd71:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd74:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd79:	74 03                	je     c001cd7e <Vm::faultHandler(regs*)+0x5d3>
c001cd7b:	ef                   	out    dx,eax
c001cd7c:	eb 02                	jmp    c001cd80 <Vm::faultHandler(regs*)+0x5d5>
c001cd7e:	66 ef                	out    dx,ax
c001cd80:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd83:	b0 01                	mov    al,0x1
c001cd85:	eb 56                	jmp    c001cddd <Vm::faultHandler(regs*)+0x632>
c001cd87:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001cd8b:	50                   	push   eax
c001cd8c:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001cd90:	50                   	push   eax
c001cd91:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001cd95:	50                   	push   eax
c001cd96:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001cd9a:	50                   	push   eax
c001cd9b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd9f:	50                   	push   eax
c001cda0:	52                   	push   edx
c001cda1:	52                   	push   edx
c001cda2:	68 a1 89 02 c0       	push   0xc00289a1
c001cda7:	e8 9b 54 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001cdac:	83 c4 20             	add    esp,0x20
c001cdaf:	83 ec 0c             	sub    esp,0xc
c001cdb2:	6a 60                	push   0x60
c001cdb4:	e8 98 f7 ff ff       	call   c001c551 <Vm::inbv(unsigned short)>
c001cdb9:	83 c4 10             	add    esp,0x10
c001cdbc:	3c 1c                	cmp    al,0x1c
c001cdbe:	74 04                	je     c001cdc4 <Vm::faultHandler(regs*)+0x619>
c001cdc0:	3c 5a                	cmp    al,0x5a
c001cdc2:	75 eb                	jne    c001cdaf <Vm::faultHandler(regs*)+0x604>
c001cdc4:	3c 5a                	cmp    al,0x5a
c001cdc6:	74 04                	je     c001cdcc <Vm::faultHandler(regs*)+0x621>
c001cdc8:	3c 1c                	cmp    al,0x1c
c001cdca:	75 0f                	jne    c001cddb <Vm::faultHandler(regs*)+0x630>
c001cdcc:	83 ec 0c             	sub    esp,0xc
c001cdcf:	6a 60                	push   0x60
c001cdd1:	e8 7b f7 ff ff       	call   c001c551 <Vm::inbv(unsigned short)>
c001cdd6:	83 c4 10             	add    esp,0x10
c001cdd9:	eb e9                	jmp    c001cdc4 <Vm::faultHandler(regs*)+0x619>
c001cddb:	31 c0                	xor    eax,eax
c001cddd:	83 c4 1c             	add    esp,0x1c
c001cde0:	5b                   	pop    ebx
c001cde1:	5e                   	pop    esi
c001cde2:	5f                   	pop    edi
c001cde3:	5d                   	pop    ebp
c001cde4:	c3                   	ret    

c001cde5 <Vm::fpuInternalTo32(unsigned long long)>:
c001cde5:	57                   	push   edi
c001cde6:	56                   	push   esi
c001cde7:	53                   	push   ebx
c001cde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf0:	89 d6                	mov    esi,edx
c001cdf2:	89 d7                	mov    edi,edx
c001cdf4:	89 c1                	mov    ecx,eax
c001cdf6:	c1 ef 14             	shr    edi,0x14
c001cdf9:	89 d3                	mov    ebx,edx
c001cdfb:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ce01:	31 d2                	xor    edx,edx
c001ce03:	89 f8                	mov    eax,edi
c001ce05:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ce0b:	bf ff 00 00 00       	mov    edi,0xff
c001ce10:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ce15:	83 d2 ff             	adc    edx,0xffffffff
c001ce18:	39 c7                	cmp    edi,eax
c001ce1a:	bf 00 00 00 00       	mov    edi,0x0
c001ce1f:	19 d7                	sbb    edi,edx
c001ce21:	72 15                	jb     c001ce38 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ce23:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ce27:	c1 e0 17             	shl    eax,0x17
c001ce2a:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ce30:	09 f1                	or     ecx,esi
c001ce32:	09 c1                	or     ecx,eax
c001ce34:	89 cf                	mov    edi,ecx
c001ce36:	eb 02                	jmp    c001ce3a <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ce38:	31 ff                	xor    edi,edi
c001ce3a:	89 f8                	mov    eax,edi
c001ce3c:	5b                   	pop    ebx
c001ce3d:	5e                   	pop    esi
c001ce3e:	5f                   	pop    edi
c001ce3f:	c3                   	ret    

c001ce40 <Vm::fpuInternalTo64(unsigned long long)>:
c001ce40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce48:	c3                   	ret    

c001ce49 <Vm::fpu32ToInternal(unsigned int)>:
c001ce49:	57                   	push   edi
c001ce4a:	31 ff                	xor    edi,edi
c001ce4c:	56                   	push   esi
c001ce4d:	53                   	push   ebx
c001ce4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce52:	89 cb                	mov    ebx,ecx
c001ce54:	89 ce                	mov    esi,ecx
c001ce56:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ce5c:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ce62:	c1 e9 17             	shr    ecx,0x17
c001ce65:	89 f0                	mov    eax,esi
c001ce67:	0f b6 d1             	movzx  edx,cl
c001ce6a:	81 c2 80 03 00 00    	add    edx,0x380
c001ce70:	89 d1                	mov    ecx,edx
c001ce72:	89 fa                	mov    edx,edi
c001ce74:	c1 e1 14             	shl    ecx,0x14
c001ce77:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ce7b:	c1 e0 1d             	shl    eax,0x1d
c001ce7e:	89 d7                	mov    edi,edx
c001ce80:	89 c6                	mov    esi,eax
c001ce82:	89 ca                	mov    edx,ecx
c001ce84:	89 f0                	mov    eax,esi
c001ce86:	09 fa                	or     edx,edi
c001ce88:	09 da                	or     edx,ebx
c001ce8a:	5b                   	pop    ebx
c001ce8b:	5e                   	pop    esi
c001ce8c:	5f                   	pop    edi
c001ce8d:	c3                   	ret    

c001ce8e <Vm::fpu64ToInternal(unsigned long long)>:
c001ce8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce96:	c3                   	ret    

c001ce97 <Vm::fpuFloatToLong(unsigned long long)>:
c001ce97:	57                   	push   edi
c001ce98:	31 c0                	xor    eax,eax
c001ce9a:	56                   	push   esi
c001ce9b:	31 d2                	xor    edx,edx
c001ce9d:	53                   	push   ebx
c001ce9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cea2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cea6:	89 d9                	mov    ecx,ebx
c001cea8:	c1 e9 14             	shr    ecx,0x14
c001ceab:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ceb1:	89 cf                	mov    edi,ecx
c001ceb3:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ceb9:	78 33                	js     c001ceee <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cebb:	89 d9                	mov    ecx,ebx
c001cebd:	89 f0                	mov    eax,esi
c001cebf:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cec5:	81 c9 00 00 10 00    	or     ecx,0x100000
c001cecb:	89 ca                	mov    edx,ecx
c001cecd:	b9 34 00 00 00       	mov    ecx,0x34
c001ced2:	29 f9                	sub    ecx,edi
c001ced4:	0f ad d0             	shrd   eax,edx,cl
c001ced7:	d3 fa                	sar    edx,cl
c001ced9:	f6 c1 20             	test   cl,0x20
c001cedc:	74 05                	je     c001cee3 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001cede:	89 d0                	mov    eax,edx
c001cee0:	c1 fa 1f             	sar    edx,0x1f
c001cee3:	85 db                	test   ebx,ebx
c001cee5:	79 07                	jns    c001ceee <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cee7:	f7 d8                	neg    eax
c001cee9:	83 d2 00             	adc    edx,0x0
c001ceec:	f7 da                	neg    edx
c001ceee:	5b                   	pop    ebx
c001ceef:	5e                   	pop    esi
c001cef0:	5f                   	pop    edi
c001cef1:	c3                   	ret    

c001cef2 <Vm::fpuULongToFloat(unsigned long long)>:
c001cef2:	57                   	push   edi
c001cef3:	31 c9                	xor    ecx,ecx
c001cef5:	56                   	push   esi
c001cef6:	53                   	push   ebx
c001cef7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cefb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ceff:	0f ba e7 14          	bt     edi,0x14
c001cf03:	72 07                	jb     c001cf0c <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001cf05:	01 f6                	add    esi,esi
c001cf07:	11 ff                	adc    edi,edi
c001cf09:	41                   	inc    ecx
c001cf0a:	eb f3                	jmp    c001ceff <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001cf0c:	89 fa                	mov    edx,edi
c001cf0e:	89 f0                	mov    eax,esi
c001cf10:	bb 33 04 00 00       	mov    ebx,0x433
c001cf15:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001cf1b:	29 cb                	sub    ebx,ecx
c001cf1d:	89 d9                	mov    ecx,ebx
c001cf1f:	5b                   	pop    ebx
c001cf20:	c1 e1 14             	shl    ecx,0x14
c001cf23:	5e                   	pop    esi
c001cf24:	09 ca                	or     edx,ecx
c001cf26:	5f                   	pop    edi
c001cf27:	c3                   	ret    

c001cf28 <Vm::fpuLongToFloat(long long)>:
c001cf28:	56                   	push   esi
c001cf29:	31 c0                	xor    eax,eax
c001cf2b:	53                   	push   ebx
c001cf2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf34:	39 c8                	cmp    eax,ecx
c001cf36:	19 d8                	sbb    eax,ebx
c001cf38:	7d 04                	jge    c001cf3e <Vm::fpuLongToFloat(long long)+0x16>
c001cf3a:	31 f6                	xor    esi,esi
c001cf3c:	eb 0c                	jmp    c001cf4a <Vm::fpuLongToFloat(long long)+0x22>
c001cf3e:	f7 d9                	neg    ecx
c001cf40:	be 01 00 00 00       	mov    esi,0x1
c001cf45:	83 d3 00             	adc    ebx,0x0
c001cf48:	f7 db                	neg    ebx
c001cf4a:	31 c0                	xor    eax,eax
c001cf4c:	0f ba e3 14          	bt     ebx,0x14
c001cf50:	72 07                	jb     c001cf59 <Vm::fpuLongToFloat(long long)+0x31>
c001cf52:	01 c9                	add    ecx,ecx
c001cf54:	11 db                	adc    ebx,ebx
c001cf56:	40                   	inc    eax
c001cf57:	eb f3                	jmp    c001cf4c <Vm::fpuLongToFloat(long long)+0x24>
c001cf59:	ba 33 04 00 00       	mov    edx,0x433
c001cf5e:	29 c2                	sub    edx,eax
c001cf60:	89 c8                	mov    eax,ecx
c001cf62:	c1 e2 14             	shl    edx,0x14
c001cf65:	89 d9                	mov    ecx,ebx
c001cf67:	89 f3                	mov    ebx,esi
c001cf69:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cf6f:	09 ca                	or     edx,ecx
c001cf71:	84 db                	test   bl,bl
c001cf73:	74 06                	je     c001cf7b <Vm::fpuLongToFloat(long long)+0x53>
c001cf75:	81 ca 00 00 00 80    	or     edx,0x80000000
c001cf7b:	5b                   	pop    ebx
c001cf7c:	5e                   	pop    esi
c001cf7d:	c3                   	ret    

c001cf7e <Vm::fpuGet0()>:
c001cf7e:	31 c0                	xor    eax,eax
c001cf80:	31 d2                	xor    edx,edx
c001cf82:	c3                   	ret    

c001cf83 <Vm::fpuGet1()>:
c001cf83:	b8 01 00 00 00       	mov    eax,0x1
c001cf88:	31 d2                	xor    edx,edx
c001cf8a:	c3                   	ret    

c001cf8b <Vm::fpuGetPi()>:
c001cf8b:	b8 03 00 00 00       	mov    eax,0x3
c001cf90:	31 d2                	xor    edx,edx
c001cf92:	c3                   	ret    

c001cf93 <Vm::fpuGetLog2E()>:
c001cf93:	83 ec 18             	sub    esp,0x18
c001cf96:	68 00 8a 02 c0       	push   0xc0028a00
c001cf9b:	e8 45 ba ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001cfa0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfa5:	31 d2                	xor    edx,edx
c001cfa7:	83 c4 1c             	add    esp,0x1c
c001cfaa:	c3                   	ret    

c001cfab <Vm::fpuGetLogE2()>:
c001cfab:	83 ec 18             	sub    esp,0x18
c001cfae:	68 0c 8a 02 c0       	push   0xc0028a0c
c001cfb3:	e8 2d ba ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001cfb8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfbd:	31 d2                	xor    edx,edx
c001cfbf:	83 c4 1c             	add    esp,0x1c
c001cfc2:	c3                   	ret    

c001cfc3 <Vm::fpuGetLog210()>:
c001cfc3:	83 ec 18             	sub    esp,0x18
c001cfc6:	68 18 8a 02 c0       	push   0xc0028a18
c001cfcb:	e8 15 ba ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001cfd0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfd5:	31 d2                	xor    edx,edx
c001cfd7:	83 c4 1c             	add    esp,0x1c
c001cfda:	c3                   	ret    

c001cfdb <Vm::fpuGetLog102()>:
c001cfdb:	83 ec 18             	sub    esp,0x18
c001cfde:	68 25 8a 02 c0       	push   0xc0028a25
c001cfe3:	e8 fd b9 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001cfe8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfed:	31 d2                	xor    edx,edx
c001cfef:	83 c4 1c             	add    esp,0x1c
c001cff2:	c3                   	ret    

c001cff3 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001cff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cff7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001cffb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfff:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d003:	0f 92 c0             	setb   al
c001d006:	c3                   	ret    

c001d007 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d007:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00f:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d013:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d017:	09 c2                	or     edx,eax
c001d019:	0f 94 c0             	sete   al
c001d01c:	c3                   	ret    

c001d01d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d01d:	57                   	push   edi
c001d01e:	56                   	push   esi
c001d01f:	53                   	push   ebx
c001d020:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d024:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d028:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d02c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d030:	57                   	push   edi
c001d031:	56                   	push   esi
c001d032:	53                   	push   ebx
c001d033:	51                   	push   ecx
c001d034:	e8 ce ff ff ff       	call   c001d007 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d039:	83 c4 10             	add    esp,0x10
c001d03c:	88 c2                	mov    dl,al
c001d03e:	31 c0                	xor    eax,eax
c001d040:	84 d2                	test   dl,dl
c001d042:	75 0c                	jne    c001d050 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d044:	57                   	push   edi
c001d045:	56                   	push   esi
c001d046:	53                   	push   ebx
c001d047:	51                   	push   ecx
c001d048:	e8 a6 ff ff ff       	call   c001cff3 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d04d:	83 c4 10             	add    esp,0x10
c001d050:	83 e0 01             	and    eax,0x1
c001d053:	5b                   	pop    ebx
c001d054:	88 c1                	mov    cl,al
c001d056:	83 e2 01             	and    edx,0x1
c001d059:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d05e:	c1 e2 06             	shl    edx,0x6
c001d061:	83 e0 ba             	and    eax,0xffffffba
c001d064:	5e                   	pop    esi
c001d065:	09 c8                	or     eax,ecx
c001d067:	5f                   	pop    edi
c001d068:	09 d0                	or     eax,edx
c001d06a:	a2 81 b8 02 c0       	mov    ds:0xc002b881,al
c001d06f:	c3                   	ret    

c001d070 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d074:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d078:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d07c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d080:	c3                   	ret    

c001d081 <Vm::fpuAbs(unsigned long long)>:
c001d081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d085:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d089:	c3                   	ret    

c001d08a <Vm::fpuChs(unsigned long long)>:
c001d08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d08e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d092:	f7 d8                	neg    eax
c001d094:	83 d2 00             	adc    edx,0x0
c001d097:	f7 da                	neg    edx
c001d099:	c3                   	ret    

c001d09a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d09a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d09e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d0a3:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d0a7:	eb c7                	jmp    c001d070 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d0a9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d0a9:	53                   	push   ebx
c001d0aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0b6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0ba:	0f af ca             	imul   ecx,edx
c001d0bd:	0f af d8             	imul   ebx,eax
c001d0c0:	f7 e2                	mul    edx
c001d0c2:	01 d9                	add    ecx,ebx
c001d0c4:	5b                   	pop    ebx
c001d0c5:	01 ca                	add    edx,ecx
c001d0c7:	c3                   	ret    

c001d0c8 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0db:	e8 7c 62 00 00       	call   c002335c <__udivdi3>
c001d0e0:	83 c4 1c             	add    esp,0x1c
c001d0e3:	c3                   	ret    

c001d0e4 <Vm::fpuSquare(unsigned long long)>:
c001d0e4:	50                   	push   eax
c001d0e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0ed:	52                   	push   edx
c001d0ee:	50                   	push   eax
c001d0ef:	52                   	push   edx
c001d0f0:	50                   	push   eax
c001d0f1:	e8 b3 ff ff ff       	call   c001d0a9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d0f6:	83 c4 14             	add    esp,0x14
c001d0f9:	c3                   	ret    

c001d0fa <Vm::fpuGetReg(int)>:
c001d0fa:	83 ec 0c             	sub    esp,0xc
c001d0fd:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d102:	76 10                	jbe    c001d114 <Vm::fpuGetReg(int)+0x1a>
c001d104:	83 ec 0c             	sub    esp,0xc
c001d107:	68 32 8a 02 c0       	push   0xc0028a32
c001d10c:	e8 d4 b8 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001d111:	83 c4 10             	add    esp,0x10
c001d114:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d119:	b9 08 00 00 00       	mov    ecx,0x8
c001d11e:	c0 e8 03             	shr    al,0x3
c001d121:	83 e0 07             	and    eax,0x7
c001d124:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d128:	99                   	cdq    
c001d129:	f7 f9                	idiv   ecx
c001d12b:	8b 04 d5 84 b8 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd477c]
c001d132:	8b 14 d5 88 b8 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4778]
c001d139:	83 c4 0c             	add    esp,0xc
c001d13c:	c3                   	ret    

c001d13d <Vm::fpuSetReg(int, unsigned long long)>:
c001d13d:	57                   	push   edi
c001d13e:	56                   	push   esi
c001d13f:	52                   	push   edx
c001d140:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d144:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d148:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d14d:	76 10                	jbe    c001d15f <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d14f:	83 ec 0c             	sub    esp,0xc
c001d152:	68 45 8a 02 c0       	push   0xc0028a45
c001d157:	e8 89 b8 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001d15c:	83 c4 10             	add    esp,0x10
c001d15f:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d164:	b9 08 00 00 00       	mov    ecx,0x8
c001d169:	c0 e8 03             	shr    al,0x3
c001d16c:	83 e0 07             	and    eax,0x7
c001d16f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d173:	99                   	cdq    
c001d174:	f7 f9                	idiv   ecx
c001d176:	89 34 d5 84 b8 02 c0 	mov    DWORD PTR [edx*8-0x3ffd477c],esi
c001d17d:	89 3c d5 88 b8 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4778],edi
c001d184:	58                   	pop    eax
c001d185:	5e                   	pop    esi
c001d186:	5f                   	pop    edi
c001d187:	c3                   	ret    

c001d188 <Vm::fpuPush(unsigned long long)>:
c001d188:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d18d:	c0 e8 03             	shr    al,0x3
c001d190:	83 e0 07             	and    eax,0x7
c001d193:	83 c0 07             	add    eax,0x7
c001d196:	88 c2                	mov    dl,al
c001d198:	83 e0 07             	and    eax,0x7
c001d19b:	83 e2 07             	and    edx,0x7
c001d19e:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d1a5:	8a 15 81 b8 02 c0    	mov    dl,BYTE PTR ds:0xc002b881
c001d1ab:	83 e2 c7             	and    edx,0xffffffc7
c001d1ae:	09 ca                	or     edx,ecx
c001d1b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d1b4:	88 15 81 b8 02 c0    	mov    BYTE PTR ds:0xc002b881,dl
c001d1ba:	89 0c c5 88 b8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4778],ecx
c001d1c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1c5:	89 14 c5 84 b8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd477c],edx
c001d1cc:	a1 c4 b8 02 c0       	mov    eax,ds:0xc002b8c4
c001d1d1:	83 f8 08             	cmp    eax,0x8
c001d1d4:	75 08                	jne    c001d1de <Vm::fpuPush(unsigned long long)+0x56>
c001d1d6:	80 0d 80 b8 02 c0 40 	or     BYTE PTR ds:0xc002b880,0x40
c001d1dd:	c3                   	ret    
c001d1de:	40                   	inc    eax
c001d1df:	a3 c4 b8 02 c0       	mov    ds:0xc002b8c4,eax
c001d1e4:	c3                   	ret    

c001d1e5 <Vm::fpuPop()>:
c001d1e5:	8a 0d 81 b8 02 c0    	mov    cl,BYTE PTR ds:0xc002b881
c001d1eb:	53                   	push   ebx
c001d1ec:	c0 e9 03             	shr    cl,0x3
c001d1ef:	8a 1d 81 b8 02 c0    	mov    bl,BYTE PTR ds:0xc002b881
c001d1f5:	83 e1 07             	and    ecx,0x7
c001d1f8:	83 e3 c7             	and    ebx,0xffffffc7
c001d1fb:	8b 04 cd 84 b8 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd477c]
c001d202:	8b 14 cd 88 b8 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4778]
c001d209:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d210:	83 e1 38             	and    ecx,0x38
c001d213:	09 d9                	or     ecx,ebx
c001d215:	88 0d 81 b8 02 c0    	mov    BYTE PTR ds:0xc002b881,cl
c001d21b:	8b 0d c4 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8c4
c001d221:	85 c9                	test   ecx,ecx
c001d223:	74 09                	je     c001d22e <Vm::fpuPop()+0x49>
c001d225:	49                   	dec    ecx
c001d226:	89 0d c4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c4,ecx
c001d22c:	eb 07                	jmp    c001d235 <Vm::fpuPop()+0x50>
c001d22e:	80 0d 80 b8 02 c0 40 	or     BYTE PTR ds:0xc002b880,0x40
c001d235:	5b                   	pop    ebx
c001d236:	c3                   	ret    

c001d237 <Vm::x87Handler(regs*)>:
c001d237:	55                   	push   ebp
c001d238:	57                   	push   edi
c001d239:	56                   	push   esi
c001d23a:	53                   	push   ebx
c001d23b:	83 ec 1c             	sub    esp,0x1c
c001d23e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d242:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d247:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d24a:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d252:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d256:	50                   	push   eax
c001d257:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d25b:	50                   	push   eax
c001d25c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d260:	50                   	push   eax
c001d261:	53                   	push   ebx
c001d262:	e8 83 b5 ff ff       	call   c00187ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d267:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d26a:	83 c4 10             	add    esp,0x10
c001d26d:	89 c6                	mov    esi,eax
c001d26f:	80 fa d9             	cmp    dl,0xd9
c001d272:	0f 85 52 01 00 00    	jne    c001d3ca <Vm::x87Handler(regs*)+0x193>
c001d278:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d27c:	8d 50 20             	lea    edx,[eax+0x20]
c001d27f:	80 fa 0e             	cmp    dl,0xe
c001d282:	0f 87 86 00 00 00    	ja     c001d30e <Vm::x87Handler(regs*)+0xd7>
c001d288:	0f b6 d2             	movzx  edx,dl
c001d28b:	ff 24 95 58 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd75a8]
c001d292:	e8 e7 fc ff ff       	call   c001cf7e <Vm::fpuGet0()>
c001d297:	eb 05                	jmp    c001d29e <Vm::x87Handler(regs*)+0x67>
c001d299:	e8 e5 fc ff ff       	call   c001cf83 <Vm::fpuGet1()>
c001d29e:	57                   	push   edi
c001d29f:	57                   	push   edi
c001d2a0:	52                   	push   edx
c001d2a1:	50                   	push   eax
c001d2a2:	e8 e1 fe ff ff       	call   c001d188 <Vm::fpuPush(unsigned long long)>
c001d2a7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d2ab:	83 c4 10             	add    esp,0x10
c001d2ae:	b0 01                	mov    al,0x1
c001d2b0:	e9 e3 09 00 00       	jmp    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001d2b5:	83 ec 0c             	sub    esp,0xc
c001d2b8:	6a 00                	push   0x0
c001d2ba:	e8 3b fe ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d2bf:	59                   	pop    ecx
c001d2c0:	5e                   	pop    esi
c001d2c1:	52                   	push   edx
c001d2c2:	50                   	push   eax
c001d2c3:	e8 c2 fd ff ff       	call   c001d08a <Vm::fpuChs(unsigned long long)>
c001d2c8:	eb 13                	jmp    c001d2dd <Vm::x87Handler(regs*)+0xa6>
c001d2ca:	83 ec 0c             	sub    esp,0xc
c001d2cd:	6a 00                	push   0x0
c001d2cf:	e8 26 fe ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d2d4:	5f                   	pop    edi
c001d2d5:	5d                   	pop    ebp
c001d2d6:	52                   	push   edx
c001d2d7:	50                   	push   eax
c001d2d8:	e8 a4 fd ff ff       	call   c001d081 <Vm::fpuAbs(unsigned long long)>
c001d2dd:	83 c4 0c             	add    esp,0xc
c001d2e0:	52                   	push   edx
c001d2e1:	50                   	push   eax
c001d2e2:	6a 00                	push   0x0
c001d2e4:	e8 54 fe ff ff       	call   c001d13d <Vm::fpuSetReg(int, unsigned long long)>
c001d2e9:	eb bc                	jmp    c001d2a7 <Vm::x87Handler(regs*)+0x70>
c001d2eb:	e8 d3 fc ff ff       	call   c001cfc3 <Vm::fpuGetLog210()>
c001d2f0:	eb ac                	jmp    c001d29e <Vm::x87Handler(regs*)+0x67>
c001d2f2:	e8 9c fc ff ff       	call   c001cf93 <Vm::fpuGetLog2E()>
c001d2f7:	eb a5                	jmp    c001d29e <Vm::x87Handler(regs*)+0x67>
c001d2f9:	e8 8d fc ff ff       	call   c001cf8b <Vm::fpuGetPi()>
c001d2fe:	eb 9e                	jmp    c001d29e <Vm::x87Handler(regs*)+0x67>
c001d300:	e8 d6 fc ff ff       	call   c001cfdb <Vm::fpuGetLog102()>
c001d305:	eb 97                	jmp    c001d29e <Vm::x87Handler(regs*)+0x67>
c001d307:	e8 9f fc ff ff       	call   c001cfab <Vm::fpuGetLogE2()>
c001d30c:	eb 90                	jmp    c001d29e <Vm::x87Handler(regs*)+0x67>
c001d30e:	8d 50 40             	lea    edx,[eax+0x40]
c001d311:	80 fa 07             	cmp    dl,0x7
c001d314:	77 15                	ja     c001d32b <Vm::x87Handler(regs*)+0xf4>
c001d316:	83 ec 0c             	sub    esp,0xc
c001d319:	2d c0 00 00 00       	sub    eax,0xc0
c001d31e:	50                   	push   eax
c001d31f:	e8 d6 fd ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d324:	59                   	pop    ecx
c001d325:	5e                   	pop    esi
c001d326:	e9 75 ff ff ff       	jmp    c001d2a0 <Vm::x87Handler(regs*)+0x69>
c001d32b:	8d 50 38             	lea    edx,[eax+0x38]
c001d32e:	80 fa 07             	cmp    dl,0x7
c001d331:	77 3c                	ja     c001d36f <Vm::x87Handler(regs*)+0x138>
c001d333:	83 ec 0c             	sub    esp,0xc
c001d336:	2d c8 00 00 00       	sub    eax,0xc8
c001d33b:	50                   	push   eax
c001d33c:	e8 b9 fd ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d341:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d348:	89 c6                	mov    esi,eax
c001d34a:	89 d7                	mov    edi,edx
c001d34c:	e8 a9 fd ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d351:	83 c4 0c             	add    esp,0xc
c001d354:	52                   	push   edx
c001d355:	50                   	push   eax
c001d356:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d35a:	2d c8 00 00 00       	sub    eax,0xc8
c001d35f:	50                   	push   eax
c001d360:	e8 d8 fd ff ff       	call   c001d13d <Vm::fpuSetReg(int, unsigned long long)>
c001d365:	83 c4 0c             	add    esp,0xc
c001d368:	57                   	push   edi
c001d369:	56                   	push   esi
c001d36a:	e9 73 ff ff ff       	jmp    c001d2e2 <Vm::x87Handler(regs*)+0xab>
c001d36f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d373:	84 d2                	test   dl,dl
c001d375:	75 0f                	jne    c001d386 <Vm::x87Handler(regs*)+0x14f>
c001d377:	83 ec 0c             	sub    esp,0xc
c001d37a:	ff 36                	push   DWORD PTR [esi]
c001d37c:	e8 c8 fa ff ff       	call   c001ce49 <Vm::fpu32ToInternal(unsigned int)>
c001d381:	e9 bf 00 00 00       	jmp    c001d445 <Vm::x87Handler(regs*)+0x20e>
c001d386:	80 fa 03             	cmp    dl,0x3
c001d389:	75 13                	jne    c001d39e <Vm::x87Handler(regs*)+0x167>
c001d38b:	e8 55 fe ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001d390:	55                   	push   ebp
c001d391:	55                   	push   ebp
c001d392:	52                   	push   edx
c001d393:	50                   	push   eax
c001d394:	e8 4c fa ff ff       	call   c001cde5 <Vm::fpuInternalTo32(unsigned long long)>
c001d399:	e9 88 00 00 00       	jmp    c001d426 <Vm::x87Handler(regs*)+0x1ef>
c001d39e:	80 fa 05             	cmp    dl,0x5
c001d3a1:	75 0e                	jne    c001d3b1 <Vm::x87Handler(regs*)+0x17a>
c001d3a3:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d3a6:	66 a3 82 b8 02 c0    	mov    ds:0xc002b882,ax
c001d3ac:	e9 df 00 00 00       	jmp    c001d490 <Vm::x87Handler(regs*)+0x259>
c001d3b1:	31 c0                	xor    eax,eax
c001d3b3:	80 fa 07             	cmp    dl,0x7
c001d3b6:	0f 85 dc 08 00 00    	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001d3bc:	66 a1 82 b8 02 c0    	mov    ax,ds:0xc002b882
c001d3c2:	66 89 06             	mov    WORD PTR [esi],ax
c001d3c5:	e9 c6 00 00 00       	jmp    c001d490 <Vm::x87Handler(regs*)+0x259>
c001d3ca:	80 fa d8             	cmp    dl,0xd8
c001d3cd:	0f 84 c9 00 00 00    	je     c001d49c <Vm::x87Handler(regs*)+0x265>
c001d3d3:	80 fa dc             	cmp    dl,0xdc
c001d3d6:	0f 84 0d 02 00 00    	je     c001d5e9 <Vm::x87Handler(regs*)+0x3b2>
c001d3dc:	80 fa de             	cmp    dl,0xde
c001d3df:	0f 84 cd 02 00 00    	je     c001d6b2 <Vm::x87Handler(regs*)+0x47b>
c001d3e5:	80 fa dd             	cmp    dl,0xdd
c001d3e8:	0f 84 5f 04 00 00    	je     c001d84d <Vm::x87Handler(regs*)+0x616>
c001d3ee:	80 fa da             	cmp    dl,0xda
c001d3f1:	0f 84 24 05 00 00    	je     c001d91b <Vm::x87Handler(regs*)+0x6e4>
c001d3f7:	80 fa df             	cmp    dl,0xdf
c001d3fa:	0f 84 68 05 00 00    	je     c001d968 <Vm::x87Handler(regs*)+0x731>
c001d400:	31 c0                	xor    eax,eax
c001d402:	80 fa db             	cmp    dl,0xdb
c001d405:	0f 85 8d 08 00 00    	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001d40b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d40f:	80 fa 03             	cmp    dl,0x3
c001d412:	0f 85 70 06 00 00    	jne    c001da88 <Vm::x87Handler(regs*)+0x851>
c001d418:	e8 c8 fd ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001d41d:	55                   	push   ebp
c001d41e:	55                   	push   ebp
c001d41f:	52                   	push   edx
c001d420:	50                   	push   eax
c001d421:	e8 71 fa ff ff       	call   c001ce97 <Vm::fpuFloatToLong(unsigned long long)>
c001d426:	83 c4 10             	add    esp,0x10
c001d429:	89 06                	mov    DWORD PTR [esi],eax
c001d42b:	eb 63                	jmp    c001d490 <Vm::x87Handler(regs*)+0x259>
c001d42d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d431:	84 d2                	test   dl,dl
c001d433:	0f 85 e6 05 00 00    	jne    c001da1f <Vm::x87Handler(regs*)+0x7e8>
c001d439:	57                   	push   edi
c001d43a:	57                   	push   edi
c001d43b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d43e:	ff 36                	push   DWORD PTR [esi]
c001d440:	e8 49 fa ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001d445:	5e                   	pop    esi
c001d446:	5f                   	pop    edi
c001d447:	52                   	push   edx
c001d448:	50                   	push   eax
c001d449:	e8 3a fd ff ff       	call   c001d188 <Vm::fpuPush(unsigned long long)>
c001d44e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d452:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d455:	e9 51 fe ff ff       	jmp    c001d2ab <Vm::x87Handler(regs*)+0x74>
c001d45a:	80 fa 03             	cmp    dl,0x3
c001d45d:	0f 85 d7 06 00 00    	jne    c001db3a <Vm::x87Handler(regs*)+0x903>
c001d463:	57                   	push   edi
c001d464:	57                   	push   edi
c001d465:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d468:	ff 36                	push   DWORD PTR [esi]
c001d46a:	e8 1f fa ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001d46f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d476:	89 c6                	mov    esi,eax
c001d478:	89 d7                	mov    edi,edx
c001d47a:	e8 7b fc ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d47f:	57                   	push   edi
c001d480:	56                   	push   esi
c001d481:	52                   	push   edx
c001d482:	50                   	push   eax
c001d483:	e8 95 fb ff ff       	call   c001d01d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d488:	83 c4 20             	add    esp,0x20
c001d48b:	e8 55 fd ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001d490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d494:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d497:	e9 12 fe ff ff       	jmp    c001d2ae <Vm::x87Handler(regs*)+0x77>
c001d49c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d4a0:	8d 50 40             	lea    edx,[eax+0x40]
c001d4a3:	80 fa 07             	cmp    dl,0x7
c001d4a6:	77 29                	ja     c001d4d1 <Vm::x87Handler(regs*)+0x29a>
c001d4a8:	83 ec 0c             	sub    esp,0xc
c001d4ab:	2d c0 00 00 00       	sub    eax,0xc0
c001d4b0:	50                   	push   eax
c001d4b1:	e8 44 fc ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d4b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4bd:	89 c6                	mov    esi,eax
c001d4bf:	89 d7                	mov    edi,edx
c001d4c1:	e8 34 fc ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d4c6:	57                   	push   edi
c001d4c7:	56                   	push   esi
c001d4c8:	52                   	push   edx
c001d4c9:	50                   	push   eax
c001d4ca:	e8 a1 fb ff ff       	call   c001d070 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d4cf:	eb 2f                	jmp    c001d500 <Vm::x87Handler(regs*)+0x2c9>
c001d4d1:	8d 50 38             	lea    edx,[eax+0x38]
c001d4d4:	80 fa 07             	cmp    dl,0x7
c001d4d7:	77 2f                	ja     c001d508 <Vm::x87Handler(regs*)+0x2d1>
c001d4d9:	83 ec 0c             	sub    esp,0xc
c001d4dc:	2d c8 00 00 00       	sub    eax,0xc8
c001d4e1:	50                   	push   eax
c001d4e2:	e8 13 fc ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d4e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4ee:	89 c6                	mov    esi,eax
c001d4f0:	89 d7                	mov    edi,edx
c001d4f2:	e8 03 fc ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d4f7:	57                   	push   edi
c001d4f8:	56                   	push   esi
c001d4f9:	52                   	push   edx
c001d4fa:	50                   	push   eax
c001d4fb:	e8 a9 fb ff ff       	call   c001d0a9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d500:	83 c4 1c             	add    esp,0x1c
c001d503:	e9 d8 fd ff ff       	jmp    c001d2e0 <Vm::x87Handler(regs*)+0xa9>
c001d508:	8d 50 30             	lea    edx,[eax+0x30]
c001d50b:	80 fa 07             	cmp    dl,0x7
c001d50e:	77 0d                	ja     c001d51d <Vm::x87Handler(regs*)+0x2e6>
c001d510:	83 ec 0c             	sub    esp,0xc
c001d513:	2d d0 00 00 00       	sub    eax,0xd0
c001d518:	e9 99 03 00 00       	jmp    c001d8b6 <Vm::x87Handler(regs*)+0x67f>
c001d51d:	8d 50 28             	lea    edx,[eax+0x28]
c001d520:	80 fa 07             	cmp    dl,0x7
c001d523:	77 0d                	ja     c001d532 <Vm::x87Handler(regs*)+0x2fb>
c001d525:	83 ec 0c             	sub    esp,0xc
c001d528:	2d d8 00 00 00       	sub    eax,0xd8
c001d52d:	e9 c0 03 00 00       	jmp    c001d8f2 <Vm::x87Handler(regs*)+0x6bb>
c001d532:	8d 50 20             	lea    edx,[eax+0x20]
c001d535:	80 fa 07             	cmp    dl,0x7
c001d538:	77 1b                	ja     c001d555 <Vm::x87Handler(regs*)+0x31e>
c001d53a:	83 ec 0c             	sub    esp,0xc
c001d53d:	2d e0 00 00 00       	sub    eax,0xe0
c001d542:	50                   	push   eax
c001d543:	e8 b2 fb ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d548:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d54f:	89 c6                	mov    esi,eax
c001d551:	89 d7                	mov    edi,edx
c001d553:	eb 22                	jmp    c001d577 <Vm::x87Handler(regs*)+0x340>
c001d555:	8d 50 18             	lea    edx,[eax+0x18]
c001d558:	80 fa 07             	cmp    dl,0x7
c001d55b:	77 2d                	ja     c001d58a <Vm::x87Handler(regs*)+0x353>
c001d55d:	83 ec 0c             	sub    esp,0xc
c001d560:	6a 00                	push   0x0
c001d562:	e8 93 fb ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d567:	89 c6                	mov    esi,eax
c001d569:	89 d7                	mov    edi,edx
c001d56b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d56f:	2d e8 00 00 00       	sub    eax,0xe8
c001d574:	89 04 24             	mov    DWORD PTR [esp],eax
c001d577:	e8 7e fb ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d57c:	57                   	push   edi
c001d57d:	56                   	push   esi
c001d57e:	52                   	push   edx
c001d57f:	50                   	push   eax
c001d580:	e8 15 fb ff ff       	call   c001d09a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d585:	e9 76 ff ff ff       	jmp    c001d500 <Vm::x87Handler(regs*)+0x2c9>
c001d58a:	8d 50 10             	lea    edx,[eax+0x10]
c001d58d:	80 fa 07             	cmp    dl,0x7
c001d590:	77 1b                	ja     c001d5ad <Vm::x87Handler(regs*)+0x376>
c001d592:	83 ec 0c             	sub    esp,0xc
c001d595:	2d f0 00 00 00       	sub    eax,0xf0
c001d59a:	50                   	push   eax
c001d59b:	e8 5a fb ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d5a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5a7:	89 c6                	mov    esi,eax
c001d5a9:	89 d7                	mov    edi,edx
c001d5ab:	eb 22                	jmp    c001d5cf <Vm::x87Handler(regs*)+0x398>
c001d5ad:	3c f7                	cmp    al,0xf7
c001d5af:	0f 86 d1 03 00 00    	jbe    c001d986 <Vm::x87Handler(regs*)+0x74f>
c001d5b5:	83 ec 0c             	sub    esp,0xc
c001d5b8:	6a 00                	push   0x0
c001d5ba:	e8 3b fb ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d5bf:	89 c6                	mov    esi,eax
c001d5c1:	89 d7                	mov    edi,edx
c001d5c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5c7:	2d f8 00 00 00       	sub    eax,0xf8
c001d5cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5cf:	e8 26 fb ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d5d4:	57                   	push   edi
c001d5d5:	56                   	push   esi
c001d5d6:	52                   	push   edx
c001d5d7:	50                   	push   eax
c001d5d8:	e8 eb fa ff ff       	call   c001d0c8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d5dd:	83 c4 1c             	add    esp,0x1c
c001d5e0:	52                   	push   edx
c001d5e1:	50                   	push   eax
c001d5e2:	6a 00                	push   0x0
c001d5e4:	e9 51 02 00 00       	jmp    c001d83a <Vm::x87Handler(regs*)+0x603>
c001d5e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5ed:	8d 50 40             	lea    edx,[eax+0x40]
c001d5f0:	80 fa 07             	cmp    dl,0x7
c001d5f3:	77 37                	ja     c001d62c <Vm::x87Handler(regs*)+0x3f5>
c001d5f5:	83 ec 0c             	sub    esp,0xc
c001d5f8:	2d c0 00 00 00       	sub    eax,0xc0
c001d5fd:	50                   	push   eax
c001d5fe:	e8 f7 fa ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d603:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d60a:	89 c6                	mov    esi,eax
c001d60c:	89 d7                	mov    edi,edx
c001d60e:	e8 e7 fa ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d613:	57                   	push   edi
c001d614:	56                   	push   esi
c001d615:	52                   	push   edx
c001d616:	50                   	push   eax
c001d617:	e8 54 fa ff ff       	call   c001d070 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d61c:	83 c4 1c             	add    esp,0x1c
c001d61f:	52                   	push   edx
c001d620:	50                   	push   eax
c001d621:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d625:	2d c0 00 00 00       	sub    eax,0xc0
c001d62a:	eb 3d                	jmp    c001d669 <Vm::x87Handler(regs*)+0x432>
c001d62c:	8d 50 38             	lea    edx,[eax+0x38]
c001d62f:	80 fa 07             	cmp    dl,0x7
c001d632:	77 3b                	ja     c001d66f <Vm::x87Handler(regs*)+0x438>
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	2d c8 00 00 00       	sub    eax,0xc8
c001d63c:	50                   	push   eax
c001d63d:	e8 b8 fa ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d642:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d649:	89 c6                	mov    esi,eax
c001d64b:	89 d7                	mov    edi,edx
c001d64d:	e8 a8 fa ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d652:	57                   	push   edi
c001d653:	56                   	push   esi
c001d654:	52                   	push   edx
c001d655:	50                   	push   eax
c001d656:	e8 4e fa ff ff       	call   c001d0a9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d65b:	83 c4 1c             	add    esp,0x1c
c001d65e:	52                   	push   edx
c001d65f:	50                   	push   eax
c001d660:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d664:	2d c8 00 00 00       	sub    eax,0xc8
c001d669:	50                   	push   eax
c001d66a:	e9 75 fc ff ff       	jmp    c001d2e4 <Vm::x87Handler(regs*)+0xad>
c001d66f:	83 c0 18             	add    eax,0x18
c001d672:	3c 07                	cmp    al,0x7
c001d674:	0f 87 3b 04 00 00    	ja     c001dab5 <Vm::x87Handler(regs*)+0x87e>
c001d67a:	83 ec 0c             	sub    esp,0xc
c001d67d:	6a 00                	push   0x0
c001d67f:	e8 76 fa ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d684:	89 c6                	mov    esi,eax
c001d686:	89 d7                	mov    edi,edx
c001d688:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d68c:	2d e8 00 00 00       	sub    eax,0xe8
c001d691:	89 04 24             	mov    DWORD PTR [esp],eax
c001d694:	e8 61 fa ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d699:	57                   	push   edi
c001d69a:	56                   	push   esi
c001d69b:	52                   	push   edx
c001d69c:	50                   	push   eax
c001d69d:	e8 f8 f9 ff ff       	call   c001d09a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d6a2:	83 c4 1c             	add    esp,0x1c
c001d6a5:	52                   	push   edx
c001d6a6:	50                   	push   eax
c001d6a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6ab:	2d e8 00 00 00       	sub    eax,0xe8
c001d6b0:	eb b7                	jmp    c001d669 <Vm::x87Handler(regs*)+0x432>
c001d6b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6b6:	8d 50 40             	lea    edx,[eax+0x40]
c001d6b9:	80 fa 07             	cmp    dl,0x7
c001d6bc:	77 3a                	ja     c001d6f8 <Vm::x87Handler(regs*)+0x4c1>
c001d6be:	83 ec 0c             	sub    esp,0xc
c001d6c1:	2d c0 00 00 00       	sub    eax,0xc0
c001d6c6:	50                   	push   eax
c001d6c7:	e8 2e fa ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d6cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6d3:	89 c6                	mov    esi,eax
c001d6d5:	89 d7                	mov    edi,edx
c001d6d7:	e8 1e fa ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d6dc:	57                   	push   edi
c001d6dd:	56                   	push   esi
c001d6de:	52                   	push   edx
c001d6df:	50                   	push   eax
c001d6e0:	e8 8b f9 ff ff       	call   c001d070 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d6e5:	83 c4 1c             	add    esp,0x1c
c001d6e8:	52                   	push   edx
c001d6e9:	50                   	push   eax
c001d6ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6ee:	2d c0 00 00 00       	sub    eax,0xc0
c001d6f3:	e9 9e 01 00 00       	jmp    c001d896 <Vm::x87Handler(regs*)+0x65f>
c001d6f8:	8d 50 20             	lea    edx,[eax+0x20]
c001d6fb:	80 fa 07             	cmp    dl,0x7
c001d6fe:	77 3a                	ja     c001d73a <Vm::x87Handler(regs*)+0x503>
c001d700:	83 ec 0c             	sub    esp,0xc
c001d703:	2d e0 00 00 00       	sub    eax,0xe0
c001d708:	50                   	push   eax
c001d709:	e8 ec f9 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d70e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d715:	89 c6                	mov    esi,eax
c001d717:	89 d7                	mov    edi,edx
c001d719:	e8 dc f9 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d71e:	57                   	push   edi
c001d71f:	56                   	push   esi
c001d720:	52                   	push   edx
c001d721:	50                   	push   eax
c001d722:	e8 73 f9 ff ff       	call   c001d09a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d727:	83 c4 1c             	add    esp,0x1c
c001d72a:	52                   	push   edx
c001d72b:	50                   	push   eax
c001d72c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d730:	2d e0 00 00 00       	sub    eax,0xe0
c001d735:	e9 5c 01 00 00       	jmp    c001d896 <Vm::x87Handler(regs*)+0x65f>
c001d73a:	8d 50 18             	lea    edx,[eax+0x18]
c001d73d:	80 fa 07             	cmp    dl,0x7
c001d740:	77 3b                	ja     c001d77d <Vm::x87Handler(regs*)+0x546>
c001d742:	83 ec 0c             	sub    esp,0xc
c001d745:	6a 00                	push   0x0
c001d747:	e8 ae f9 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d74c:	89 c6                	mov    esi,eax
c001d74e:	89 d7                	mov    edi,edx
c001d750:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d754:	2d e8 00 00 00       	sub    eax,0xe8
c001d759:	89 04 24             	mov    DWORD PTR [esp],eax
c001d75c:	e8 99 f9 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d761:	57                   	push   edi
c001d762:	56                   	push   esi
c001d763:	52                   	push   edx
c001d764:	50                   	push   eax
c001d765:	e8 30 f9 ff ff       	call   c001d09a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d76a:	83 c4 1c             	add    esp,0x1c
c001d76d:	52                   	push   edx
c001d76e:	50                   	push   eax
c001d76f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d773:	2d e8 00 00 00       	sub    eax,0xe8
c001d778:	e9 19 01 00 00       	jmp    c001d896 <Vm::x87Handler(regs*)+0x65f>
c001d77d:	8d 50 38             	lea    edx,[eax+0x38]
c001d780:	80 fa 07             	cmp    dl,0x7
c001d783:	77 37                	ja     c001d7bc <Vm::x87Handler(regs*)+0x585>
c001d785:	83 ec 0c             	sub    esp,0xc
c001d788:	2d c8 00 00 00       	sub    eax,0xc8
c001d78d:	50                   	push   eax
c001d78e:	e8 67 f9 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d793:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d79a:	89 c6                	mov    esi,eax
c001d79c:	89 d7                	mov    edi,edx
c001d79e:	e8 57 f9 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d7a3:	57                   	push   edi
c001d7a4:	56                   	push   esi
c001d7a5:	52                   	push   edx
c001d7a6:	50                   	push   eax
c001d7a7:	e8 fd f8 ff ff       	call   c001d0a9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d7ac:	83 c4 1c             	add    esp,0x1c
c001d7af:	52                   	push   edx
c001d7b0:	50                   	push   eax
c001d7b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7b5:	2d c8 00 00 00       	sub    eax,0xc8
c001d7ba:	eb 7d                	jmp    c001d839 <Vm::x87Handler(regs*)+0x602>
c001d7bc:	3c f7                	cmp    al,0xf7
c001d7be:	76 38                	jbe    c001d7f8 <Vm::x87Handler(regs*)+0x5c1>
c001d7c0:	83 ec 0c             	sub    esp,0xc
c001d7c3:	6a 00                	push   0x0
c001d7c5:	e8 30 f9 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d7ca:	89 c6                	mov    esi,eax
c001d7cc:	89 d7                	mov    edi,edx
c001d7ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7d2:	2d f8 00 00 00       	sub    eax,0xf8
c001d7d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7da:	e8 1b f9 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d7df:	57                   	push   edi
c001d7e0:	56                   	push   esi
c001d7e1:	52                   	push   edx
c001d7e2:	50                   	push   eax
c001d7e3:	e8 e0 f8 ff ff       	call   c001d0c8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d7e8:	83 c4 1c             	add    esp,0x1c
c001d7eb:	52                   	push   edx
c001d7ec:	50                   	push   eax
c001d7ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7f1:	2d f8 00 00 00       	sub    eax,0xf8
c001d7f6:	eb 41                	jmp    c001d839 <Vm::x87Handler(regs*)+0x602>
c001d7f8:	8d 50 10             	lea    edx,[eax+0x10]
c001d7fb:	80 fa 07             	cmp    dl,0x7
c001d7fe:	0f 87 5a 01 00 00    	ja     c001d95e <Vm::x87Handler(regs*)+0x727>
c001d804:	83 ec 0c             	sub    esp,0xc
c001d807:	2d f0 00 00 00       	sub    eax,0xf0
c001d80c:	50                   	push   eax
c001d80d:	e8 e8 f8 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d812:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d819:	89 c6                	mov    esi,eax
c001d81b:	89 d7                	mov    edi,edx
c001d81d:	e8 d8 f8 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d822:	57                   	push   edi
c001d823:	56                   	push   esi
c001d824:	52                   	push   edx
c001d825:	50                   	push   eax
c001d826:	e8 9d f8 ff ff       	call   c001d0c8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d82b:	83 c4 1c             	add    esp,0x1c
c001d82e:	52                   	push   edx
c001d82f:	50                   	push   eax
c001d830:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d834:	2d f0 00 00 00       	sub    eax,0xf0
c001d839:	50                   	push   eax
c001d83a:	e8 fe f8 ff ff       	call   c001d13d <Vm::fpuSetReg(int, unsigned long long)>
c001d83f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d843:	e8 9d f9 ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001d848:	e9 5e fa ff ff       	jmp    c001d2ab <Vm::x87Handler(regs*)+0x74>
c001d84d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d851:	8d 50 30             	lea    edx,[eax+0x30]
c001d854:	80 fa 07             	cmp    dl,0x7
c001d857:	77 1d                	ja     c001d876 <Vm::x87Handler(regs*)+0x63f>
c001d859:	83 ec 0c             	sub    esp,0xc
c001d85c:	6a 00                	push   0x0
c001d85e:	e8 97 f8 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d863:	83 c4 0c             	add    esp,0xc
c001d866:	52                   	push   edx
c001d867:	50                   	push   eax
c001d868:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d86c:	2d d0 00 00 00       	sub    eax,0xd0
c001d871:	e9 f3 fd ff ff       	jmp    c001d669 <Vm::x87Handler(regs*)+0x432>
c001d876:	8d 50 28             	lea    edx,[eax+0x28]
c001d879:	80 fa 07             	cmp    dl,0x7
c001d87c:	77 28                	ja     c001d8a6 <Vm::x87Handler(regs*)+0x66f>
c001d87e:	83 ec 0c             	sub    esp,0xc
c001d881:	6a 00                	push   0x0
c001d883:	e8 72 f8 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d888:	83 c4 0c             	add    esp,0xc
c001d88b:	52                   	push   edx
c001d88c:	50                   	push   eax
c001d88d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d891:	2d d8 00 00 00       	sub    eax,0xd8
c001d896:	50                   	push   eax
c001d897:	e8 a1 f8 ff ff       	call   c001d13d <Vm::fpuSetReg(int, unsigned long long)>
c001d89c:	e8 44 f9 ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001d8a1:	e9 01 fa ff ff       	jmp    c001d2a7 <Vm::x87Handler(regs*)+0x70>
c001d8a6:	8d 50 20             	lea    edx,[eax+0x20]
c001d8a9:	80 fa 07             	cmp    dl,0x7
c001d8ac:	77 30                	ja     c001d8de <Vm::x87Handler(regs*)+0x6a7>
c001d8ae:	83 ec 0c             	sub    esp,0xc
c001d8b1:	2d e0 00 00 00       	sub    eax,0xe0
c001d8b6:	50                   	push   eax
c001d8b7:	e8 3e f8 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d8bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8c3:	89 c6                	mov    esi,eax
c001d8c5:	89 d7                	mov    edi,edx
c001d8c7:	e8 2e f8 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d8cc:	57                   	push   edi
c001d8cd:	56                   	push   esi
c001d8ce:	52                   	push   edx
c001d8cf:	50                   	push   eax
c001d8d0:	e8 48 f7 ff ff       	call   c001d01d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d8d5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d8d9:	e9 54 02 00 00       	jmp    c001db32 <Vm::x87Handler(regs*)+0x8fb>
c001d8de:	8d 50 18             	lea    edx,[eax+0x18]
c001d8e1:	80 fa 07             	cmp    dl,0x7
c001d8e4:	0f 87 43 fb ff ff    	ja     c001d42d <Vm::x87Handler(regs*)+0x1f6>
c001d8ea:	83 ec 0c             	sub    esp,0xc
c001d8ed:	2d e8 00 00 00       	sub    eax,0xe8
c001d8f2:	50                   	push   eax
c001d8f3:	e8 02 f8 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d8f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8ff:	89 c6                	mov    esi,eax
c001d901:	89 d7                	mov    edi,edx
c001d903:	e8 f2 f7 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d908:	57                   	push   edi
c001d909:	56                   	push   esi
c001d90a:	52                   	push   edx
c001d90b:	50                   	push   eax
c001d90c:	e8 0c f7 ff ff       	call   c001d01d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d911:	83 c4 20             	add    esp,0x20
c001d914:	e8 cc f8 ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001d919:	eb 62                	jmp    c001d97d <Vm::x87Handler(regs*)+0x746>
c001d91b:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001d91f:	0f 85 0f 01 00 00    	jne    c001da34 <Vm::x87Handler(regs*)+0x7fd>
c001d925:	83 ec 0c             	sub    esp,0xc
c001d928:	6a 01                	push   0x1
c001d92a:	e8 cb f7 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d92f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d936:	89 c6                	mov    esi,eax
c001d938:	89 d7                	mov    edi,edx
c001d93a:	e8 bb f7 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d93f:	57                   	push   edi
c001d940:	56                   	push   esi
c001d941:	52                   	push   edx
c001d942:	50                   	push   eax
c001d943:	e8 d5 f6 ff ff       	call   c001d01d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d948:	83 c4 20             	add    esp,0x20
c001d94b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d94f:	e8 91 f8 ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001d954:	e8 8c f8 ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001d959:	e9 50 f9 ff ff       	jmp    c001d2ae <Vm::x87Handler(regs*)+0x77>
c001d95e:	3c d9                	cmp    al,0xd9
c001d960:	0f 85 b5 02 00 00    	jne    c001dc1b <Vm::x87Handler(regs*)+0x9e4>
c001d966:	eb bd                	jmp    c001d925 <Vm::x87Handler(regs*)+0x6ee>
c001d968:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001d96c:	0f 85 ea 02 00 00    	jne    c001dc5c <Vm::x87Handler(regs*)+0xa25>
c001d972:	0f b7 05 80 b8 02 c0 	movzx  eax,WORD PTR ds:0xc002b880
c001d979:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001d97d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d981:	e9 28 f9 ff ff       	jmp    c001d2ae <Vm::x87Handler(regs*)+0x77>
c001d986:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d98a:	84 d2                	test   dl,dl
c001d98c:	75 0f                	jne    c001d99d <Vm::x87Handler(regs*)+0x766>
c001d98e:	83 ec 0c             	sub    esp,0xc
c001d991:	ff 36                	push   DWORD PTR [esi]
c001d993:	e8 b1 f4 ff ff       	call   c001ce49 <Vm::fpu32ToInternal(unsigned int)>
c001d998:	e9 2c 01 00 00       	jmp    c001dac9 <Vm::x87Handler(regs*)+0x892>
c001d99d:	80 fa 01             	cmp    dl,0x1
c001d9a0:	75 0f                	jne    c001d9b1 <Vm::x87Handler(regs*)+0x77a>
c001d9a2:	83 ec 0c             	sub    esp,0xc
c001d9a5:	ff 36                	push   DWORD PTR [esi]
c001d9a7:	e8 9d f4 ff ff       	call   c001ce49 <Vm::fpu32ToInternal(unsigned int)>
c001d9ac:	e9 81 02 00 00       	jmp    c001dc32 <Vm::x87Handler(regs*)+0x9fb>
c001d9b1:	80 fa 04             	cmp    dl,0x4
c001d9b4:	75 0f                	jne    c001d9c5 <Vm::x87Handler(regs*)+0x78e>
c001d9b6:	83 ec 0c             	sub    esp,0xc
c001d9b9:	ff 36                	push   DWORD PTR [esi]
c001d9bb:	e8 89 f4 ff ff       	call   c001ce49 <Vm::fpu32ToInternal(unsigned int)>
c001d9c0:	e9 86 01 00 00       	jmp    c001db4b <Vm::x87Handler(regs*)+0x914>
c001d9c5:	80 fa 05             	cmp    dl,0x5
c001d9c8:	75 1b                	jne    c001d9e5 <Vm::x87Handler(regs*)+0x7ae>
c001d9ca:	83 ec 0c             	sub    esp,0xc
c001d9cd:	6a 00                	push   0x0
c001d9cf:	e8 26 f7 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001d9d4:	89 c7                	mov    edi,eax
c001d9d6:	89 d5                	mov    ebp,edx
c001d9d8:	58                   	pop    eax
c001d9d9:	ff 36                	push   DWORD PTR [esi]
c001d9db:	e8 69 f4 ff ff       	call   c001ce49 <Vm::fpu32ToInternal(unsigned int)>
c001d9e0:	e9 a3 01 00 00       	jmp    c001db88 <Vm::x87Handler(regs*)+0x951>
c001d9e5:	80 fa 06             	cmp    dl,0x6
c001d9e8:	75 0f                	jne    c001d9f9 <Vm::x87Handler(regs*)+0x7c2>
c001d9ea:	83 ec 0c             	sub    esp,0xc
c001d9ed:	ff 36                	push   DWORD PTR [esi]
c001d9ef:	e8 55 f4 ff ff       	call   c001ce49 <Vm::fpu32ToInternal(unsigned int)>
c001d9f4:	e9 ae 01 00 00       	jmp    c001dba7 <Vm::x87Handler(regs*)+0x970>
c001d9f9:	31 c0                	xor    eax,eax
c001d9fb:	80 fa 07             	cmp    dl,0x7
c001d9fe:	0f 85 94 02 00 00    	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001da04:	83 ec 0c             	sub    esp,0xc
c001da07:	6a 00                	push   0x0
c001da09:	e8 ec f6 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001da0e:	89 c7                	mov    edi,eax
c001da10:	89 d5                	mov    ebp,edx
c001da12:	58                   	pop    eax
c001da13:	ff 36                	push   DWORD PTR [esi]
c001da15:	e8 2f f4 ff ff       	call   c001ce49 <Vm::fpu32ToInternal(unsigned int)>
c001da1a:	e9 cb 01 00 00       	jmp    c001dbea <Vm::x87Handler(regs*)+0x9b3>
c001da1f:	80 fa 03             	cmp    dl,0x3
c001da22:	0f 85 d3 01 00 00    	jne    c001dbfb <Vm::x87Handler(regs*)+0x9c4>
c001da28:	e8 b8 f7 ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001da2d:	51                   	push   ecx
c001da2e:	51                   	push   ecx
c001da2f:	e9 de 01 00 00       	jmp    c001dc12 <Vm::x87Handler(regs*)+0x9db>
c001da34:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da38:	80 fa 01             	cmp    dl,0x1
c001da3b:	75 09                	jne    c001da46 <Vm::x87Handler(regs*)+0x80f>
c001da3d:	57                   	push   edi
c001da3e:	57                   	push   edi
c001da3f:	8b 06                	mov    eax,DWORD PTR [esi]
c001da41:	e9 e3 01 00 00       	jmp    c001dc29 <Vm::x87Handler(regs*)+0x9f2>
c001da46:	80 fa 04             	cmp    dl,0x4
c001da49:	75 12                	jne    c001da5d <Vm::x87Handler(regs*)+0x826>
c001da4b:	31 d2                	xor    edx,edx
c001da4d:	51                   	push   ecx
c001da4e:	51                   	push   ecx
c001da4f:	8b 06                	mov    eax,DWORD PTR [esi]
c001da51:	52                   	push   edx
c001da52:	50                   	push   eax
c001da53:	e8 d0 f4 ff ff       	call   c001cf28 <Vm::fpuLongToFloat(long long)>
c001da58:	e9 ee 00 00 00       	jmp    c001db4b <Vm::x87Handler(regs*)+0x914>
c001da5d:	31 c0                	xor    eax,eax
c001da5f:	80 fa 07             	cmp    dl,0x7
c001da62:	0f 85 30 02 00 00    	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001da68:	83 ec 0c             	sub    esp,0xc
c001da6b:	6a 00                	push   0x0
c001da6d:	e8 88 f6 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001da72:	89 c7                	mov    edi,eax
c001da74:	89 d5                	mov    ebp,edx
c001da76:	58                   	pop    eax
c001da77:	8b 06                	mov    eax,DWORD PTR [esi]
c001da79:	5a                   	pop    edx
c001da7a:	31 d2                	xor    edx,edx
c001da7c:	52                   	push   edx
c001da7d:	50                   	push   eax
c001da7e:	e8 a5 f4 ff ff       	call   c001cf28 <Vm::fpuLongToFloat(long long)>
c001da83:	e9 62 01 00 00       	jmp    c001dbea <Vm::x87Handler(regs*)+0x9b3>
c001da88:	84 d2                	test   dl,dl
c001da8a:	75 0d                	jne    c001da99 <Vm::x87Handler(regs*)+0x862>
c001da8c:	31 d2                	xor    edx,edx
c001da8e:	55                   	push   ebp
c001da8f:	55                   	push   ebp
c001da90:	8b 06                	mov    eax,DWORD PTR [esi]
c001da92:	52                   	push   edx
c001da93:	50                   	push   eax
c001da94:	e9 d3 01 00 00       	jmp    c001dc6c <Vm::x87Handler(regs*)+0xa35>
c001da99:	31 c0                	xor    eax,eax
c001da9b:	80 fa 02             	cmp    dl,0x2
c001da9e:	0f 85 f4 01 00 00    	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001daa4:	83 ec 0c             	sub    esp,0xc
c001daa7:	6a 00                	push   0x0
c001daa9:	e8 4c f6 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001daae:	59                   	pop    ecx
c001daaf:	5f                   	pop    edi
c001dab0:	e9 6a f9 ff ff       	jmp    c001d41f <Vm::x87Handler(regs*)+0x1e8>
c001dab5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dab9:	84 d2                	test   dl,dl
c001dabb:	75 2a                	jne    c001dae7 <Vm::x87Handler(regs*)+0x8b0>
c001dabd:	50                   	push   eax
c001dabe:	50                   	push   eax
c001dabf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dac2:	ff 36                	push   DWORD PTR [esi]
c001dac4:	e8 c5 f3 ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001dac9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dad0:	89 c6                	mov    esi,eax
c001dad2:	89 d7                	mov    edi,edx
c001dad4:	e8 21 f6 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001dad9:	57                   	push   edi
c001dada:	56                   	push   esi
c001dadb:	52                   	push   edx
c001dadc:	50                   	push   eax
c001dadd:	e8 8e f5 ff ff       	call   c001d070 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dae2:	e9 64 01 00 00       	jmp    c001dc4b <Vm::x87Handler(regs*)+0xa14>
c001dae7:	80 fa 01             	cmp    dl,0x1
c001daea:	75 11                	jne    c001dafd <Vm::x87Handler(regs*)+0x8c6>
c001daec:	50                   	push   eax
c001daed:	50                   	push   eax
c001daee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001daf1:	ff 36                	push   DWORD PTR [esi]
c001daf3:	e8 96 f3 ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001daf8:	e9 35 01 00 00       	jmp    c001dc32 <Vm::x87Handler(regs*)+0x9fb>
c001dafd:	80 fa 02             	cmp    dl,0x2
c001db00:	0f 85 54 f9 ff ff    	jne    c001d45a <Vm::x87Handler(regs*)+0x223>
c001db06:	55                   	push   ebp
c001db07:	55                   	push   ebp
c001db08:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db0b:	ff 36                	push   DWORD PTR [esi]
c001db0d:	e8 7c f3 ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001db12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db19:	89 c6                	mov    esi,eax
c001db1b:	89 d7                	mov    edi,edx
c001db1d:	e8 d8 f5 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001db22:	57                   	push   edi
c001db23:	56                   	push   esi
c001db24:	52                   	push   edx
c001db25:	50                   	push   eax
c001db26:	e8 f2 f4 ff ff       	call   c001d01d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001db2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db2f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001db32:	83 c4 20             	add    esp,0x20
c001db35:	e9 74 f7 ff ff       	jmp    c001d2ae <Vm::x87Handler(regs*)+0x77>
c001db3a:	80 fa 04             	cmp    dl,0x4
c001db3d:	75 2a                	jne    c001db69 <Vm::x87Handler(regs*)+0x932>
c001db3f:	51                   	push   ecx
c001db40:	51                   	push   ecx
c001db41:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db44:	ff 36                	push   DWORD PTR [esi]
c001db46:	e8 43 f3 ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001db4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db52:	89 c6                	mov    esi,eax
c001db54:	89 d7                	mov    edi,edx
c001db56:	e8 9f f5 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001db5b:	57                   	push   edi
c001db5c:	56                   	push   esi
c001db5d:	52                   	push   edx
c001db5e:	50                   	push   eax
c001db5f:	e8 36 f5 ff ff       	call   c001d09a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db64:	e9 e2 00 00 00       	jmp    c001dc4b <Vm::x87Handler(regs*)+0xa14>
c001db69:	80 fa 05             	cmp    dl,0x5
c001db6c:	75 28                	jne    c001db96 <Vm::x87Handler(regs*)+0x95f>
c001db6e:	83 ec 0c             	sub    esp,0xc
c001db71:	6a 00                	push   0x0
c001db73:	e8 82 f5 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001db78:	89 c7                	mov    edi,eax
c001db7a:	89 d5                	mov    ebp,edx
c001db7c:	58                   	pop    eax
c001db7d:	5a                   	pop    edx
c001db7e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db81:	ff 36                	push   DWORD PTR [esi]
c001db83:	e8 06 f3 ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001db88:	83 c4 10             	add    esp,0x10
c001db8b:	55                   	push   ebp
c001db8c:	57                   	push   edi
c001db8d:	52                   	push   edx
c001db8e:	50                   	push   eax
c001db8f:	e8 06 f5 ff ff       	call   c001d09a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db94:	eb 60                	jmp    c001dbf6 <Vm::x87Handler(regs*)+0x9bf>
c001db96:	80 fa 06             	cmp    dl,0x6
c001db99:	75 2a                	jne    c001dbc5 <Vm::x87Handler(regs*)+0x98e>
c001db9b:	51                   	push   ecx
c001db9c:	51                   	push   ecx
c001db9d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dba0:	ff 36                	push   DWORD PTR [esi]
c001dba2:	e8 e7 f2 ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001dba7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbae:	89 c6                	mov    esi,eax
c001dbb0:	89 d7                	mov    edi,edx
c001dbb2:	e8 43 f5 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001dbb7:	57                   	push   edi
c001dbb8:	56                   	push   esi
c001dbb9:	52                   	push   edx
c001dbba:	50                   	push   eax
c001dbbb:	e8 08 f5 ff ff       	call   c001d0c8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbc0:	e9 86 00 00 00       	jmp    c001dc4b <Vm::x87Handler(regs*)+0xa14>
c001dbc5:	31 c0                	xor    eax,eax
c001dbc7:	80 fa 07             	cmp    dl,0x7
c001dbca:	0f 85 c8 00 00 00    	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001dbd0:	83 ec 0c             	sub    esp,0xc
c001dbd3:	6a 00                	push   0x0
c001dbd5:	e8 20 f5 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001dbda:	89 c7                	mov    edi,eax
c001dbdc:	89 d5                	mov    ebp,edx
c001dbde:	58                   	pop    eax
c001dbdf:	5a                   	pop    edx
c001dbe0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbe3:	ff 36                	push   DWORD PTR [esi]
c001dbe5:	e8 a4 f2 ff ff       	call   c001ce8e <Vm::fpu64ToInternal(unsigned long long)>
c001dbea:	83 c4 10             	add    esp,0x10
c001dbed:	55                   	push   ebp
c001dbee:	57                   	push   edi
c001dbef:	52                   	push   edx
c001dbf0:	50                   	push   eax
c001dbf1:	e8 d2 f4 ff ff       	call   c001d0c8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbf6:	83 c4 0c             	add    esp,0xc
c001dbf9:	eb 53                	jmp    c001dc4e <Vm::x87Handler(regs*)+0xa17>
c001dbfb:	31 c0                	xor    eax,eax
c001dbfd:	80 fa 02             	cmp    dl,0x2
c001dc00:	0f 85 92 00 00 00    	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001dc06:	83 ec 0c             	sub    esp,0xc
c001dc09:	6a 00                	push   0x0
c001dc0b:	e8 ea f4 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001dc10:	59                   	pop    ecx
c001dc11:	5f                   	pop    edi
c001dc12:	52                   	push   edx
c001dc13:	50                   	push   eax
c001dc14:	e8 27 f2 ff ff       	call   c001ce40 <Vm::fpuInternalTo64(unsigned long long)>
c001dc19:	eb 70                	jmp    c001dc8b <Vm::x87Handler(regs*)+0xa54>
c001dc1b:	31 c0                	xor    eax,eax
c001dc1d:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dc22:	75 74                	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001dc24:	50                   	push   eax
c001dc25:	50                   	push   eax
c001dc26:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dc29:	31 d2                	xor    edx,edx
c001dc2b:	52                   	push   edx
c001dc2c:	50                   	push   eax
c001dc2d:	e8 f6 f2 ff ff       	call   c001cf28 <Vm::fpuLongToFloat(long long)>
c001dc32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc39:	89 c6                	mov    esi,eax
c001dc3b:	89 d7                	mov    edi,edx
c001dc3d:	e8 b8 f4 ff ff       	call   c001d0fa <Vm::fpuGetReg(int)>
c001dc42:	57                   	push   edi
c001dc43:	56                   	push   esi
c001dc44:	52                   	push   edx
c001dc45:	50                   	push   eax
c001dc46:	e8 5e f4 ff ff       	call   c001d0a9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc4b:	83 c4 1c             	add    esp,0x1c
c001dc4e:	52                   	push   edx
c001dc4f:	50                   	push   eax
c001dc50:	6a 00                	push   0x0
c001dc52:	e8 e6 f4 ff ff       	call   c001d13d <Vm::fpuSetReg(int, unsigned long long)>
c001dc57:	e9 f2 f7 ff ff       	jmp    c001d44e <Vm::x87Handler(regs*)+0x217>
c001dc5c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dc60:	80 fa 05             	cmp    dl,0x5
c001dc63:	75 11                	jne    c001dc76 <Vm::x87Handler(regs*)+0xa3f>
c001dc65:	55                   	push   ebp
c001dc66:	55                   	push   ebp
c001dc67:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc6a:	ff 36                	push   DWORD PTR [esi]
c001dc6c:	e8 81 f2 ff ff       	call   c001cef2 <Vm::fpuULongToFloat(unsigned long long)>
c001dc71:	e9 cf f7 ff ff       	jmp    c001d445 <Vm::x87Handler(regs*)+0x20e>
c001dc76:	31 c0                	xor    eax,eax
c001dc78:	80 fa 07             	cmp    dl,0x7
c001dc7b:	75 1b                	jne    c001dc98 <Vm::x87Handler(regs*)+0xa61>
c001dc7d:	e8 63 f5 ff ff       	call   c001d1e5 <Vm::fpuPop()>
c001dc82:	51                   	push   ecx
c001dc83:	51                   	push   ecx
c001dc84:	52                   	push   edx
c001dc85:	50                   	push   eax
c001dc86:	e8 0c f2 ff ff       	call   c001ce97 <Vm::fpuFloatToLong(unsigned long long)>
c001dc8b:	83 c4 10             	add    esp,0x10
c001dc8e:	89 06                	mov    DWORD PTR [esi],eax
c001dc90:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001dc93:	e9 f8 f7 ff ff       	jmp    c001d490 <Vm::x87Handler(regs*)+0x259>
c001dc98:	83 c4 1c             	add    esp,0x1c
c001dc9b:	5b                   	pop    ebx
c001dc9c:	5e                   	pop    esi
c001dc9d:	5f                   	pop    edi
c001dc9e:	5d                   	pop    ebp
c001dc9f:	c3                   	ret    

c001dca0 <__static_initialization_and_destruction_0(int, int)>:
c001dca0:	83 ec 0c             	sub    esp,0xc
c001dca3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dca8:	75 1a                	jne    c001dcc4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dcaa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dcb2:	75 10                	jne    c001dcc4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	68 80 b8 02 c0       	push   0xc002b880
c001dcbc:	e8 c7 7a 00 00       	call   c0025788 <Vm::_FPUState::_FPUState()>
c001dcc1:	83 c4 10             	add    esp,0x10
c001dcc4:	90                   	nop
c001dcc5:	83 c4 0c             	add    esp,0xc
c001dcc8:	c3                   	ret    

c001dcc9 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001dcc9:	83 ec 0c             	sub    esp,0xc
c001dccc:	83 ec 08             	sub    esp,0x8
c001dccf:	68 ff ff 00 00       	push   0xffff
c001dcd4:	6a 01                	push   0x1
c001dcd6:	e8 c5 ff ff ff       	call   c001dca0 <__static_initialization_and_destruction_0(int, int)>
c001dcdb:	83 c4 10             	add    esp,0x10
c001dcde:	83 c4 0c             	add    esp,0xc
c001dce1:	c3                   	ret    

c001dce2 <FAT::getName()>:
c001dce2:	b8 94 8a 02 c0       	mov    eax,0xc0028a94
c001dce7:	c3                   	ret    

c001dce8 <FAT::tell(void*, unsigned long long*)>:
c001dce8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dced:	75 06                	jne    c001dcf5 <FAT::tell(void*, unsigned long long*)+0xd>
c001dcef:	b8 04 00 00 00       	mov    eax,0x4
c001dcf4:	c3                   	ret    
c001dcf5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dcfa:	75 06                	jne    c001dd02 <FAT::tell(void*, unsigned long long*)+0x1a>
c001dcfc:	b8 04 00 00 00       	mov    eax,0x4
c001dd01:	c3                   	ret    
c001dd02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd06:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001dd09:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001dd0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd10:	89 01                	mov    DWORD PTR [ecx],eax
c001dd12:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd15:	b8 00 00 00 00       	mov    eax,0x0
c001dd1a:	c3                   	ret    
c001dd1b:	90                   	nop

c001dd1c <FAT::stat(void*, unsigned long long*)>:
c001dd1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dd21:	75 06                	jne    c001dd29 <FAT::stat(void*, unsigned long long*)+0xd>
c001dd23:	b8 04 00 00 00       	mov    eax,0x4
c001dd28:	c3                   	ret    
c001dd29:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd2e:	75 06                	jne    c001dd36 <FAT::stat(void*, unsigned long long*)+0x1a>
c001dd30:	b8 04 00 00 00       	mov    eax,0x4
c001dd35:	c3                   	ret    
c001dd36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd3a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001dd3d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd44:	89 01                	mov    DWORD PTR [ecx],eax
c001dd46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd49:	b8 00 00 00 00       	mov    eax,0x0
c001dd4e:	c3                   	ret    
c001dd4f:	90                   	nop

c001dd50 <FAT::~FAT()>:
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	ba 18 8b 02 c0       	mov    edx,0xc0028b18
c001dd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd5c:	89 10                	mov    DWORD PTR [eax],edx
c001dd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd62:	83 ec 0c             	sub    esp,0xc
c001dd65:	50                   	push   eax
c001dd66:	e8 05 48 ff ff       	call   c0012570 <Filesystem::~Filesystem()>
c001dd6b:	83 c4 10             	add    esp,0x10
c001dd6e:	90                   	nop
c001dd6f:	83 c4 0c             	add    esp,0xc
c001dd72:	c3                   	ret    
c001dd73:	90                   	nop

c001dd74 <FAT::~FAT()>:
c001dd74:	83 ec 0c             	sub    esp,0xc
c001dd77:	83 ec 0c             	sub    esp,0xc
c001dd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd7e:	e8 cd ff ff ff       	call   c001dd50 <FAT::~FAT()>
c001dd83:	83 c4 10             	add    esp,0x10
c001dd86:	83 ec 08             	sub    esp,0x8
c001dd89:	6a 08                	push   0x8
c001dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd8f:	e8 d3 43 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c001dd94:	83 c4 10             	add    esp,0x10
c001dd97:	83 c4 0c             	add    esp,0xc
c001dd9a:	c3                   	ret    
c001dd9b:	90                   	nop

c001dd9c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001dd9c:	83 ec 1c             	sub    esp,0x1c
c001dd9f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001dda6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ddab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddaf:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001ddb6:	83 f8 ff             	cmp    eax,0xffffffff
c001ddb9:	75 34                	jne    c001ddef <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ddbb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddbf:	88 c2                	mov    dl,al
c001ddc1:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001ddc6:	01 d0                	add    eax,edx
c001ddc8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddcc:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001ddd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddd6:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001dddd:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001dde2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dde6:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001dded:	eb 17                	jmp    c001de06 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ddef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddf3:	88 c2                	mov    dl,al
c001ddf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddf9:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de00:	01 d0                	add    eax,edx
c001de02:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de06:	83 ec 04             	sub    esp,0x4
c001de09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de11:	8d 44 24 15          	lea    eax,[esp+0x15]
c001de15:	50                   	push   eax
c001de16:	e8 07 8d fe ff       	call   c0006b22 <f_getlabel>
c001de1b:	83 c4 10             	add    esp,0x10
c001de1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de27:	75 07                	jne    c001de30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001de29:	b8 00 00 00 00       	mov    eax,0x0
c001de2e:	eb 05                	jmp    c001de35 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001de30:	b8 01 00 00 00       	mov    eax,0x1
c001de35:	83 c4 1c             	add    esp,0x1c
c001de38:	c3                   	ret    
c001de39:	90                   	nop

c001de3a <FAT::setlabel(LogicalDisk*, int, char*)>:
c001de3a:	57                   	push   edi
c001de3b:	83 ec 58             	sub    esp,0x58
c001de3e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001de46:	8d 54 24 10          	lea    edx,[esp+0x10]
c001de4a:	b9 0f 00 00 00       	mov    ecx,0xf
c001de4f:	b8 00 00 00 00       	mov    eax,0x0
c001de54:	fc                   	cld    
c001de55:	89 d7                	mov    edi,edx
c001de57:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de59:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de5d:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de64:	83 f8 ff             	cmp    eax,0xffffffff
c001de67:	75 34                	jne    c001de9d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001de69:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de6d:	88 c2                	mov    dl,al
c001de6f:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de74:	01 d0                	add    eax,edx
c001de76:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de7a:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001de80:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de84:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001de8b:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de90:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001de94:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001de9b:	eb 17                	jmp    c001deb4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001de9d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dea1:	88 c2                	mov    dl,al
c001dea3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001dea7:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001deae:	01 d0                	add    eax,edx
c001deb0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001deb4:	83 ec 08             	sub    esp,0x8
c001deb7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001debb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001debf:	50                   	push   eax
c001dec0:	e8 56 29 fe ff       	call   c000081b <strcat>
c001dec5:	83 c4 10             	add    esp,0x10
c001dec8:	83 ec 0c             	sub    esp,0xc
c001decb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001decf:	50                   	push   eax
c001ded0:	e8 3b 8e fe ff       	call   c0006d10 <f_setlabel>
c001ded5:	83 c4 10             	add    esp,0x10
c001ded8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dedc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001dee1:	75 07                	jne    c001deea <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001dee3:	b8 00 00 00 00       	mov    eax,0x0
c001dee8:	eb 05                	jmp    c001deef <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001deea:	b8 01 00 00 00       	mov    eax,0x1
c001deef:	83 c4 58             	add    esp,0x58
c001def2:	5f                   	pop    edi
c001def3:	c3                   	ret    

c001def4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001def4:	83 ec 2c             	sub    esp,0x2c
c001def7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001deff:	83 ec 08             	sub    esp,0x8
c001df02:	68 b8 8a 02 c0       	push   0xc0028ab8
c001df07:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df0b:	e8 a5 28 fe ff       	call   c00007b5 <strcmp>
c001df10:	83 c4 10             	add    esp,0x10
c001df13:	85 c0                	test   eax,eax
c001df15:	0f 94 c0             	sete   al
c001df18:	84 c0                	test   al,al
c001df1a:	74 0d                	je     c001df29 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001df1c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df24:	e9 a6 00 00 00       	jmp    c001dfcf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df29:	83 ec 08             	sub    esp,0x8
c001df2c:	68 aa 8a 02 c0       	push   0xc0028aaa
c001df31:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df35:	e8 7b 28 fe ff       	call   c00007b5 <strcmp>
c001df3a:	83 c4 10             	add    esp,0x10
c001df3d:	85 c0                	test   eax,eax
c001df3f:	0f 94 c0             	sete   al
c001df42:	84 c0                	test   al,al
c001df44:	74 0a                	je     c001df50 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001df46:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df4e:	eb 7f                	jmp    c001dfcf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df50:	83 ec 08             	sub    esp,0x8
c001df53:	68 b0 8a 02 c0       	push   0xc0028ab0
c001df58:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df5c:	e8 54 28 fe ff       	call   c00007b5 <strcmp>
c001df61:	83 c4 10             	add    esp,0x10
c001df64:	85 c0                	test   eax,eax
c001df66:	0f 94 c0             	sete   al
c001df69:	84 c0                	test   al,al
c001df6b:	74 0a                	je     c001df77 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001df6d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df75:	eb 58                	jmp    c001dfcf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df77:	83 ec 08             	sub    esp,0x8
c001df7a:	68 0c 5e 02 c0       	push   0xc0025e0c
c001df7f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df83:	e8 2d 28 fe ff       	call   c00007b5 <strcmp>
c001df88:	83 c4 10             	add    esp,0x10
c001df8b:	85 c0                	test   eax,eax
c001df8d:	0f 94 c0             	sete   al
c001df90:	84 c0                	test   al,al
c001df92:	74 0a                	je     c001df9e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001df94:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001df9c:	eb 31                	jmp    c001dfcf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df9e:	83 ec 08             	sub    esp,0x8
c001dfa1:	68 b6 8a 02 c0       	push   0xc0028ab6
c001dfa6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfaa:	e8 06 28 fe ff       	call   c00007b5 <strcmp>
c001dfaf:	83 c4 10             	add    esp,0x10
c001dfb2:	85 c0                	test   eax,eax
c001dfb4:	0f 94 c0             	sete   al
c001dfb7:	84 c0                	test   al,al
c001dfb9:	74 0a                	je     c001dfc5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001dfbb:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001dfc3:	eb 0a                	jmp    c001dfcf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfc5:	b8 08 00 00 00       	mov    eax,0x8
c001dfca:	e9 04 01 00 00       	jmp    c001e0d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001dfcf:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001dfd6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001dfdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfdf:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001dfe6:	83 f8 ff             	cmp    eax,0xffffffff
c001dfe9:	75 34                	jne    c001e01f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001dfeb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dfef:	88 c2                	mov    dl,al
c001dff1:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001dff6:	01 d0                	add    eax,edx
c001dff8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001dffc:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e002:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e006:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e00d:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e012:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e016:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e01d:	eb 17                	jmp    c001e036 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e01f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e023:	88 c2                	mov    dl,al
c001e025:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e029:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e030:	01 d0                	add    eax,edx
c001e032:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e036:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e03a:	88 04 24             	mov    BYTE PTR [esp],al
c001e03d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e045:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e04d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e052:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e05a:	83 ec 0c             	sub    esp,0xc
c001e05d:	68 00 20 00 00       	push   0x2000
c001e062:	e8 d7 10 ff ff       	call   c000f13e <malloc>
c001e067:	83 c4 10             	add    esp,0x10
c001e06a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e06e:	68 00 20 00 00       	push   0x2000
c001e073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e077:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e07b:	50                   	push   eax
c001e07c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e080:	50                   	push   eax
c001e081:	e8 d5 90 fe ff       	call   c000715b <f_mkfs>
c001e086:	83 c4 10             	add    esp,0x10
c001e089:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e08d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e092:	75 07                	jne    c001e09b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e094:	b8 00 00 00 00       	mov    eax,0x0
c001e099:	eb 38                	jmp    c001e0d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e09b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e0a0:	75 17                	jne    c001e0b9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e0a2:	83 ec 0c             	sub    esp,0xc
c001e0a5:	68 e8 8a 02 c0       	push   0xc0028ae8
c001e0aa:	e8 98 41 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001e0af:	83 c4 10             	add    esp,0x10
c001e0b2:	b8 09 00 00 00       	mov    eax,0x9
c001e0b7:	eb 1a                	jmp    c001e0d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0bd:	83 ec 08             	sub    esp,0x8
c001e0c0:	50                   	push   eax
c001e0c1:	68 bc 8a 02 c0       	push   0xc0028abc
c001e0c6:	e8 7c 41 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001e0cb:	83 c4 10             	add    esp,0x10
c001e0ce:	b8 01 00 00 00       	mov    eax,0x1
c001e0d3:	83 c4 2c             	add    esp,0x2c
c001e0d6:	c3                   	ret    
c001e0d7:	90                   	nop

c001e0d8 <FAT::tryMount(LogicalDisk*, int)>:
c001e0d8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e0de:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e0e3:	83 f8 14             	cmp    eax,0x14
c001e0e6:	75 17                	jne    c001e0ff <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	68 ce 8a 02 c0       	push   0xc0028ace
c001e0f0:	e8 f0 a8 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001e0f5:	83 c4 10             	add    esp,0x10
c001e0f8:	b0 00                	mov    al,0x0
c001e0fa:	e9 d7 01 00 00       	jmp    c001e2d6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e0ff:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e106:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e10c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e112:	3d 00 02 00 00       	cmp    eax,0x200
c001e117:	74 07                	je     c001e120 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e119:	b0 00                	mov    al,0x0
c001e11b:	e9 b6 01 00 00       	jmp    c001e2d6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e120:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e128:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e12f:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e136:	83 f8 ff             	cmp    eax,0xffffffff
c001e139:	74 07                	je     c001e142 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e13b:	b0 01                	mov    al,0x1
c001e13d:	e9 94 01 00 00       	jmp    c001e2d6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e142:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e14c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e154:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e15b:	88 c2                	mov    dl,al
c001e15d:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e162:	01 d0                	add    eax,edx
c001e164:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e16b:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e171:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e178:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e17f:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e184:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e18b:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e192:	83 ec 0c             	sub    esp,0xc
c001e195:	68 54 02 00 00       	push   0x254
c001e19a:	e8 9f 0f ff ff       	call   c000f13e <malloc>
c001e19f:	83 c4 10             	add    esp,0x10
c001e1a2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e1a9:	83 ec 04             	sub    esp,0x4
c001e1ac:	6a 00                	push   0x0
c001e1ae:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e1b5:	50                   	push   eax
c001e1b6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1bd:	e8 57 6b fe ff       	call   c0004d19 <f_mount>
c001e1c2:	83 c4 10             	add    esp,0x10
c001e1c5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e1cc:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e1d4:	74 19                	je     c001e1ef <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1e0:	e8 79 0f ff ff       	call   c000f15e <rfree>
c001e1e5:	83 c4 10             	add    esp,0x10
c001e1e8:	b0 00                	mov    al,0x0
c001e1ea:	e9 e7 00 00 00       	jmp    c001e2d6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1ef:	83 ec 04             	sub    esp,0x4
c001e1f2:	68 00 01 00 00       	push   0x100
c001e1f7:	6a 00                	push   0x0
c001e1f9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e200:	50                   	push   eax
c001e201:	e8 bf 24 fe ff       	call   c00006c5 <memset>
c001e206:	83 c4 10             	add    esp,0x10
c001e209:	83 ec 08             	sub    esp,0x8
c001e20c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e213:	50                   	push   eax
c001e214:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e21b:	50                   	push   eax
c001e21c:	e8 fa 25 fe ff       	call   c000081b <strcat>
c001e221:	83 c4 10             	add    esp,0x10
c001e224:	83 ec 08             	sub    esp,0x8
c001e227:	68 dc 8a 02 c0       	push   0xc0028adc
c001e22c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e233:	50                   	push   eax
c001e234:	e8 e2 25 fe ff       	call   c000081b <strcat>
c001e239:	83 c4 10             	add    esp,0x10
c001e23c:	83 ec 04             	sub    esp,0x4
c001e23f:	6a 01                	push   0x1
c001e241:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e248:	50                   	push   eax
c001e249:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e24d:	50                   	push   eax
c001e24e:	e8 28 6b fe ff       	call   c0004d7b <f_open>
c001e253:	83 c4 10             	add    esp,0x10
c001e256:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e25d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e264:	85 c0                	test   eax,eax
c001e266:	74 0a                	je     c001e272 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e268:	78 2d                	js     c001e297 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e26a:	83 e8 04             	sub    eax,0x4
c001e26d:	83 f8 01             	cmp    eax,0x1
c001e270:	77 25                	ja     c001e297 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e272:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e27a:	83 ec 0c             	sub    esp,0xc
c001e27d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e281:	50                   	push   eax
c001e282:	e8 46 76 fe ff       	call   c00058cd <f_close>
c001e287:	83 c4 10             	add    esp,0x10
c001e28a:	90                   	nop
c001e28b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e293:	74 3a                	je     c001e2cf <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e295:	eb 2d                	jmp    c001e2c4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e297:	83 ec 0c             	sub    esp,0xc
c001e29a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2a1:	e8 b8 0e ff ff       	call   c000f15e <rfree>
c001e2a6:	83 c4 10             	add    esp,0x10
c001e2a9:	83 ec 04             	sub    esp,0x4
c001e2ac:	6a 00                	push   0x0
c001e2ae:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e2b5:	50                   	push   eax
c001e2b6:	6a 00                	push   0x0
c001e2b8:	e8 5c 6a fe ff       	call   c0004d19 <f_mount>
c001e2bd:	83 c4 10             	add    esp,0x10
c001e2c0:	b0 00                	mov    al,0x0
c001e2c2:	eb 12                	jmp    c001e2d6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2c4:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e2c9:	40                   	inc    eax
c001e2ca:	a3 e0 b8 02 c0       	mov    ds:0xc002b8e0,eax
c001e2cf:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e2d6:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e2dc:	c3                   	ret    
c001e2dd:	90                   	nop

c001e2de <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e2de:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e2e4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e2ec:	74 0a                	je     c001e2f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e2ee:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e2f6:	75 0a                	jne    c001e302 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e2f8:	b8 04 00 00 00       	mov    eax,0x4
c001e2fd:	e9 db 00 00 00       	jmp    c001e3dd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e302:	83 ec 08             	sub    esp,0x8
c001e305:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e30c:	50                   	push   eax
c001e30d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e314:	e8 be 7b fe ff       	call   c0005ed7 <f_readdir>
c001e319:	83 c4 10             	add    esp,0x10
c001e31c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e323:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e329:	83 ec 0c             	sub    esp,0xc
c001e32c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e333:	83 c0 1a             	add    eax,0x1a
c001e336:	50                   	push   eax
c001e337:	e8 a6 23 fe ff       	call   c00006e2 <strlen>
c001e33c:	83 c4 10             	add    esp,0x10
c001e33f:	ba 00 00 00 00       	mov    edx,0x0
c001e344:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e348:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e34c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e353:	0f b6 c0             	movzx  eax,al
c001e356:	83 e0 10             	and    eax,0x10
c001e359:	74 07                	je     c001e362 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e35b:	b8 02 00 00 00       	mov    eax,0x2
c001e360:	eb 05                	jmp    c001e367 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e362:	b8 01 00 00 00       	mov    eax,0x1
c001e367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e36b:	83 ec 08             	sub    esp,0x8
c001e36e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e375:	83 c0 1a             	add    eax,0x1a
c001e378:	50                   	push   eax
c001e379:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e37d:	83 c0 10             	add    eax,0x10
c001e380:	50                   	push   eax
c001e381:	e8 de 23 fe ff       	call   c0000764 <strcpy>
c001e386:	83 c4 10             	add    esp,0x10
c001e389:	83 ec 04             	sub    esp,0x4
c001e38c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e393:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e397:	50                   	push   eax
c001e398:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e39f:	e8 eb 22 fe ff       	call   c000068f <memcpy>
c001e3a4:	83 c4 10             	add    esp,0x10
c001e3a7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e3ae:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e3b4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e3bb:	84 c0                	test   al,al
c001e3bd:	75 07                	jne    c001e3c6 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e3bf:	b8 07 00 00 00       	mov    eax,0x7
c001e3c4:	eb 17                	jmp    c001e3dd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3c6:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e3cd:	85 c0                	test   eax,eax
c001e3cf:	75 07                	jne    c001e3d8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e3d1:	b8 00 00 00 00       	mov    eax,0x0
c001e3d6:	eb 05                	jmp    c001e3dd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3d8:	b8 01 00 00 00       	mov    eax,0x1
c001e3dd:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e3e3:	c3                   	ret    

c001e3e4 <FAT::read(void*, unsigned long, void*, int*)>:
c001e3e4:	83 ec 1c             	sub    esp,0x1c
c001e3e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e3ec:	74 07                	je     c001e3f5 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e3ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e3f3:	75 07                	jne    c001e3fc <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e3f5:	b8 04 00 00 00       	mov    eax,0x4
c001e3fa:	eb 3d                	jmp    c001e439 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e3fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e400:	50                   	push   eax
c001e401:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e405:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e409:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e40d:	e8 a5 6d fe ff       	call   c00051b7 <f_read>
c001e412:	83 c4 10             	add    esp,0x10
c001e415:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e419:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e41d:	89 c2                	mov    edx,eax
c001e41f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e423:	89 10                	mov    DWORD PTR [eax],edx
c001e425:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e429:	85 c0                	test   eax,eax
c001e42b:	75 07                	jne    c001e434 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e42d:	b8 00 00 00 00       	mov    eax,0x0
c001e432:	eb 05                	jmp    c001e439 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e434:	b8 01 00 00 00       	mov    eax,0x1
c001e439:	83 c4 1c             	add    esp,0x1c
c001e43c:	c3                   	ret    
c001e43d:	90                   	nop

c001e43e <FAT::write(void*, unsigned long, void*, int*)>:
c001e43e:	83 ec 1c             	sub    esp,0x1c
c001e441:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e446:	74 07                	je     c001e44f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e448:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e44d:	75 07                	jne    c001e456 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e44f:	b8 04 00 00 00       	mov    eax,0x4
c001e454:	eb 3d                	jmp    c001e493 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e456:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e45a:	50                   	push   eax
c001e45b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e463:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e467:	e8 cb 6f fe ff       	call   c0005437 <f_write>
c001e46c:	83 c4 10             	add    esp,0x10
c001e46f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e473:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e477:	89 c2                	mov    edx,eax
c001e479:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e47d:	89 10                	mov    DWORD PTR [eax],edx
c001e47f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e483:	85 c0                	test   eax,eax
c001e485:	75 07                	jne    c001e48e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e487:	b8 00 00 00 00       	mov    eax,0x0
c001e48c:	eb 05                	jmp    c001e493 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e48e:	b8 01 00 00 00       	mov    eax,0x1
c001e493:	83 c4 1c             	add    esp,0x1c
c001e496:	c3                   	ret    
c001e497:	90                   	nop

c001e498 <FAT::close(void*)>:
c001e498:	83 ec 1c             	sub    esp,0x1c
c001e49b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4a0:	75 07                	jne    c001e4a9 <FAT::close(void*)+0x11>
c001e4a2:	b8 04 00 00 00       	mov    eax,0x4
c001e4a7:	eb 36                	jmp    c001e4df <FAT::close(void*)+0x47>
c001e4a9:	83 ec 0c             	sub    esp,0xc
c001e4ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4b0:	e8 18 74 fe ff       	call   c00058cd <f_close>
c001e4b5:	83 c4 10             	add    esp,0x10
c001e4b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4bc:	83 ec 0c             	sub    esp,0xc
c001e4bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4c3:	e8 86 0c ff ff       	call   c000f14e <free>
c001e4c8:	83 c4 10             	add    esp,0x10
c001e4cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4cf:	85 c0                	test   eax,eax
c001e4d1:	75 07                	jne    c001e4da <FAT::close(void*)+0x42>
c001e4d3:	b8 00 00 00 00       	mov    eax,0x0
c001e4d8:	eb 05                	jmp    c001e4df <FAT::close(void*)+0x47>
c001e4da:	b8 01 00 00 00       	mov    eax,0x1
c001e4df:	83 c4 1c             	add    esp,0x1c
c001e4e2:	c3                   	ret    
c001e4e3:	90                   	nop

c001e4e4 <FAT::closeDir(void*)>:
c001e4e4:	83 ec 1c             	sub    esp,0x1c
c001e4e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4ec:	75 07                	jne    c001e4f5 <FAT::closeDir(void*)+0x11>
c001e4ee:	b8 04 00 00 00       	mov    eax,0x4
c001e4f3:	eb 36                	jmp    c001e52b <FAT::closeDir(void*)+0x47>
c001e4f5:	83 ec 0c             	sub    esp,0xc
c001e4f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4fc:	e8 b4 79 fe ff       	call   c0005eb5 <f_closedir>
c001e501:	83 c4 10             	add    esp,0x10
c001e504:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e508:	83 ec 0c             	sub    esp,0xc
c001e50b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e50f:	e8 3a 0c ff ff       	call   c000f14e <free>
c001e514:	83 c4 10             	add    esp,0x10
c001e517:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e51b:	85 c0                	test   eax,eax
c001e51d:	75 07                	jne    c001e526 <FAT::closeDir(void*)+0x42>
c001e51f:	b8 00 00 00 00       	mov    eax,0x0
c001e524:	eb 05                	jmp    c001e52b <FAT::closeDir(void*)+0x47>
c001e526:	b8 01 00 00 00       	mov    eax,0x1
c001e52b:	83 c4 1c             	add    esp,0x1c
c001e52e:	c3                   	ret    
c001e52f:	90                   	nop

c001e530 <FAT::seek(void*, unsigned long long)>:
c001e530:	83 ec 2c             	sub    esp,0x2c
c001e533:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e537:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e53b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e53f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e543:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e548:	75 07                	jne    c001e551 <FAT::seek(void*, unsigned long long)+0x21>
c001e54a:	b8 04 00 00 00       	mov    eax,0x4
c001e54f:	eb 2f                	jmp    c001e580 <FAT::seek(void*, unsigned long long)+0x50>
c001e551:	83 ec 04             	sub    esp,0x4
c001e554:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e558:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e55c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e560:	e8 97 73 fe ff       	call   c00058fc <f_lseek>
c001e565:	83 c4 10             	add    esp,0x10
c001e568:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e56c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e570:	85 c0                	test   eax,eax
c001e572:	75 07                	jne    c001e57b <FAT::seek(void*, unsigned long long)+0x4b>
c001e574:	b8 00 00 00 00       	mov    eax,0x0
c001e579:	eb 05                	jmp    c001e580 <FAT::seek(void*, unsigned long long)+0x50>
c001e57b:	b8 01 00 00 00       	mov    eax,0x1
c001e580:	83 c4 2c             	add    esp,0x2c
c001e583:	c3                   	ret    

c001e584 <fatWrapperReadDisk>:
c001e584:	83 ec 1c             	sub    esp,0x1c
c001e587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e58b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e58f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e593:	89 04 24             	mov    DWORD PTR [esp],eax
c001e596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e59a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e59e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5a3:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5ae:	83 ec 0c             	sub    esp,0xc
c001e5b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5b5:	52                   	push   edx
c001e5b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5be:	50                   	push   eax
c001e5bf:	e8 ae 72 ff ff       	call   c0015872 <LogicalDisk::read(unsigned long long, int, void*)>
c001e5c4:	83 c4 20             	add    esp,0x20
c001e5c7:	83 c4 1c             	add    esp,0x1c
c001e5ca:	c3                   	ret    

c001e5cb <fatWrapperWriteDisk>:
c001e5cb:	83 ec 1c             	sub    esp,0x1c
c001e5ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5d2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e5d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5da:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5e5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5ea:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5f5:	83 ec 0c             	sub    esp,0xc
c001e5f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5fc:	52                   	push   edx
c001e5fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e601:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e605:	50                   	push   eax
c001e606:	e8 d3 72 ff ff       	call   c00158de <LogicalDisk::write(unsigned long long, int, void*)>
c001e60b:	83 c4 20             	add    esp,0x20
c001e60e:	83 c4 1c             	add    esp,0x1c
c001e611:	c3                   	ret    

c001e612 <fatWrapperIoctl>:
c001e612:	53                   	push   ebx
c001e613:	83 ec 28             	sub    esp,0x28
c001e616:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e61a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e61e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e622:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e626:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e62b:	75 31                	jne    c001e65e <fatWrapperIoctl+0x4c>
c001e62d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e631:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e635:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e63a:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e641:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e647:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e64d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e651:	66 89 02             	mov    WORD PTR [edx],ax
c001e654:	b8 00 00 00 00       	mov    eax,0x0
c001e659:	e9 b2 00 00 00       	jmp    c001e710 <fatWrapperIoctl+0xfe>
c001e65e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e663:	75 6a                	jne    c001e6cf <fatWrapperIoctl+0xbd>
c001e665:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e669:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e66d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e672:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e679:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e67f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e685:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e68b:	89 c8                	mov    eax,ecx
c001e68d:	89 da                	mov    edx,ebx
c001e68f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e693:	c1 e0 0a             	shl    eax,0xa
c001e696:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e69b:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c001e6a2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e6a8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e6ae:	89 cb                	mov    ebx,ecx
c001e6b0:	c1 fb 1f             	sar    ebx,0x1f
c001e6b3:	53                   	push   ebx
c001e6b4:	51                   	push   ecx
c001e6b5:	52                   	push   edx
c001e6b6:	50                   	push   eax
c001e6b7:	e8 a0 4c 00 00       	call   c002335c <__udivdi3>
c001e6bc:	83 c4 10             	add    esp,0x10
c001e6bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e6c3:	89 01                	mov    DWORD PTR [ecx],eax
c001e6c5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6c8:	b8 00 00 00 00       	mov    eax,0x0
c001e6cd:	eb 41                	jmp    c001e710 <fatWrapperIoctl+0xfe>
c001e6cf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e6d4:	75 07                	jne    c001e6dd <fatWrapperIoctl+0xcb>
c001e6d6:	b8 00 00 00 00       	mov    eax,0x0
c001e6db:	eb 33                	jmp    c001e710 <fatWrapperIoctl+0xfe>
c001e6dd:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e6e2:	75 19                	jne    c001e6fd <fatWrapperIoctl+0xeb>
c001e6e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e6ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6f0:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e6f6:	b8 00 00 00 00       	mov    eax,0x0
c001e6fb:	eb 13                	jmp    c001e710 <fatWrapperIoctl+0xfe>
c001e6fd:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e702:	75 07                	jne    c001e70b <fatWrapperIoctl+0xf9>
c001e704:	b8 00 00 00 00       	mov    eax,0x0
c001e709:	eb 05                	jmp    c001e710 <fatWrapperIoctl+0xfe>
c001e70b:	b8 04 00 00 00       	mov    eax,0x4
c001e710:	83 c4 28             	add    esp,0x28
c001e713:	5b                   	pop    ebx
c001e714:	c3                   	ret    
c001e715:	90                   	nop

c001e716 <FAT::FAT()>:
c001e716:	83 ec 1c             	sub    esp,0x1c
c001e719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e71d:	83 ec 0c             	sub    esp,0xc
c001e720:	50                   	push   eax
c001e721:	e8 26 3e ff ff       	call   c001254c <Filesystem::Filesystem()>
c001e726:	83 c4 10             	add    esp,0x10
c001e729:	ba 18 8b 02 c0       	mov    edx,0xc0028b18
c001e72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e732:	89 10                	mov    DWORD PTR [eax],edx
c001e734:	c7 05 e0 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b8e0,0x0
c001e73e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e746:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e74b:	7f 15                	jg     c001e762 <FAT::FAT()+0x4c>
c001e74d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e751:	c7 04 85 00 b9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd4700],0xffffffff
c001e75c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e760:	eb e4                	jmp    c001e746 <FAT::FAT()+0x30>
c001e762:	90                   	nop
c001e763:	83 c4 1c             	add    esp,0x1c
c001e766:	c3                   	ret    
c001e767:	90                   	nop

c001e768 <FAT::fixFilepath(char*)>:
c001e768:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e76c:	8a 00                	mov    al,BYTE PTR [eax]
c001e76e:	3c 40                	cmp    al,0x40
c001e770:	7e 2c                	jle    c001e79e <FAT::fixFilepath(char*)+0x36>
c001e772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e776:	8a 00                	mov    al,BYTE PTR [eax]
c001e778:	83 e8 41             	sub    eax,0x41
c001e77b:	88 c2                	mov    dl,al
c001e77d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e781:	88 10                	mov    BYTE PTR [eax],dl
c001e783:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e787:	8a 00                	mov    al,BYTE PTR [eax]
c001e789:	0f be c0             	movsx  eax,al
c001e78c:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e793:	83 c0 30             	add    eax,0x30
c001e796:	88 c2                	mov    dl,al
c001e798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e79c:	88 10                	mov    BYTE PTR [eax],dl
c001e79e:	90                   	nop
c001e79f:	c3                   	ret    

c001e7a0 <FAT::open(char const*, void**, FileOpenMode)>:
c001e7a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e7a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e7ae:	74 0a                	je     c001e7ba <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e7b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e7b8:	75 0a                	jne    c001e7c4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e7ba:	b8 04 00 00 00       	mov    eax,0x4
c001e7bf:	e9 fd 00 00 00       	jmp    c001e8c1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e7c4:	83 ec 08             	sub    esp,0x8
c001e7c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e7d2:	50                   	push   eax
c001e7d3:	e8 8c 1f fe ff       	call   c0000764 <strcpy>
c001e7d8:	83 c4 10             	add    esp,0x10
c001e7db:	83 ec 08             	sub    esp,0x8
c001e7de:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e7e2:	50                   	push   eax
c001e7e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7ea:	e8 79 ff ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001e7ef:	83 c4 10             	add    esp,0x10
c001e7f2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e7fa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e801:	83 e0 01             	and    eax,0x1
c001e804:	74 08                	je     c001e80e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e806:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e80e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e815:	83 e0 04             	and    eax,0x4
c001e818:	74 10                	je     c001e82a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e81a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e822:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e82a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e831:	83 e0 02             	and    eax,0x2
c001e834:	74 08                	je     c001e83e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e836:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e83e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e845:	83 e0 08             	and    eax,0x8
c001e848:	74 08                	je     c001e852 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e84a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e852:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e859:	83 e0 10             	and    eax,0x10
c001e85c:	74 08                	je     c001e866 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e85e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e866:	83 ec 0c             	sub    esp,0xc
c001e869:	68 50 02 00 00       	push   0x250
c001e86e:	e8 cb 08 ff ff       	call   c000f13e <malloc>
c001e873:	83 c4 10             	add    esp,0x10
c001e876:	89 c2                	mov    edx,eax
c001e878:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e87f:	89 10                	mov    DWORD PTR [eax],edx
c001e881:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e889:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e890:	8b 00                	mov    eax,DWORD PTR [eax]
c001e892:	83 ec 04             	sub    esp,0x4
c001e895:	52                   	push   edx
c001e896:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e89a:	52                   	push   edx
c001e89b:	50                   	push   eax
c001e89c:	e8 da 64 fe ff       	call   c0004d7b <f_open>
c001e8a1:	83 c4 10             	add    esp,0x10
c001e8a4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e8ab:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e8b3:	74 07                	je     c001e8bc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e8b5:	b8 01 00 00 00       	mov    eax,0x1
c001e8ba:	eb 05                	jmp    c001e8c1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e8bc:	b8 00 00 00 00       	mov    eax,0x0
c001e8c1:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e8c7:	c3                   	ret    

c001e8c8 <FAT::openDir(char const*, void**)>:
c001e8c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e8ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8d6:	74 0a                	je     c001e8e2 <FAT::openDir(char const*, void**)+0x1a>
c001e8d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e8e0:	75 07                	jne    c001e8e9 <FAT::openDir(char const*, void**)+0x21>
c001e8e2:	b8 04 00 00 00       	mov    eax,0x4
c001e8e7:	eb 7d                	jmp    c001e966 <FAT::openDir(char const*, void**)+0x9e>
c001e8e9:	83 ec 08             	sub    esp,0x8
c001e8ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e8f7:	50                   	push   eax
c001e8f8:	e8 67 1e fe ff       	call   c0000764 <strcpy>
c001e8fd:	83 c4 10             	add    esp,0x10
c001e900:	83 ec 08             	sub    esp,0x8
c001e903:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e907:	50                   	push   eax
c001e908:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e90f:	e8 54 fe ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001e914:	83 c4 10             	add    esp,0x10
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	6a 4c                	push   0x4c
c001e91c:	e8 1d 08 ff ff       	call   c000f13e <malloc>
c001e921:	83 c4 10             	add    esp,0x10
c001e924:	89 c2                	mov    edx,eax
c001e926:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e92d:	89 10                	mov    DWORD PTR [eax],edx
c001e92f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e936:	8b 00                	mov    eax,DWORD PTR [eax]
c001e938:	83 ec 08             	sub    esp,0x8
c001e93b:	8d 54 24 14          	lea    edx,[esp+0x14]
c001e93f:	52                   	push   edx
c001e940:	50                   	push   eax
c001e941:	e8 6d 74 fe ff       	call   c0005db3 <f_opendir>
c001e946:	83 c4 10             	add    esp,0x10
c001e949:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e950:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001e958:	74 07                	je     c001e961 <FAT::openDir(char const*, void**)+0x99>
c001e95a:	b8 01 00 00 00       	mov    eax,0x1
c001e95f:	eb 05                	jmp    c001e966 <FAT::openDir(char const*, void**)+0x9e>
c001e961:	b8 00 00 00 00       	mov    eax,0x0
c001e966:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e96c:	c3                   	ret    
c001e96d:	90                   	nop

c001e96e <FAT::stat(char const*, unsigned long long*, bool*)>:
c001e96e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e974:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001e97c:	75 0a                	jne    c001e988 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001e97e:	b8 04 00 00 00       	mov    eax,0x4
c001e983:	e9 c9 00 00 00       	jmp    c001ea51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e988:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001e990:	75 0a                	jne    c001e99c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001e992:	b8 04 00 00 00       	mov    eax,0x4
c001e997:	e9 b5 00 00 00       	jmp    c001ea51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e99c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001e9a4:	75 0a                	jne    c001e9b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001e9a6:	b8 04 00 00 00       	mov    eax,0x4
c001e9ab:	e9 a1 00 00 00       	jmp    c001ea51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9b0:	83 ec 08             	sub    esp,0x8
c001e9b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9ba:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9c1:	50                   	push   eax
c001e9c2:	e8 9d 1d fe ff       	call   c0000764 <strcpy>
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	83 ec 08             	sub    esp,0x8
c001e9cd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e9d4:	50                   	push   eax
c001e9d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9dc:	e8 87 fd ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001e9e1:	83 c4 10             	add    esp,0x10
c001e9e4:	83 ec 08             	sub    esp,0x8
c001e9e7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9eb:	50                   	push   eax
c001e9ec:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9f3:	50                   	push   eax
c001e9f4:	e8 79 75 fe ff       	call   c0005f72 <f_stat>
c001e9f9:	83 c4 10             	add    esp,0x10
c001e9fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ea03:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ea0a:	85 c0                	test   eax,eax
c001ea0c:	74 07                	je     c001ea15 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ea0e:	83 f8 04             	cmp    eax,0x4
c001ea11:	74 32                	je     c001ea45 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001ea13:	eb 37                	jmp    c001ea4c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001ea15:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ea19:	0f b6 c0             	movzx  eax,al
c001ea1c:	83 e0 10             	and    eax,0x10
c001ea1f:	0f 95 c2             	setne  dl
c001ea22:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ea29:	88 10                	mov    BYTE PTR [eax],dl
c001ea2b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ea2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea32:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ea39:	89 01                	mov    DWORD PTR [ecx],eax
c001ea3b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ea3e:	b8 00 00 00 00       	mov    eax,0x0
c001ea43:	eb 0c                	jmp    c001ea51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea45:	b8 02 00 00 00       	mov    eax,0x2
c001ea4a:	eb 05                	jmp    c001ea51 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea4c:	b8 01 00 00 00       	mov    eax,0x1
c001ea51:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ea57:	c3                   	ret    

c001ea58 <FAT::unlink(char const*)>:
c001ea58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ea5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ea66:	75 07                	jne    c001ea6f <FAT::unlink(char const*)+0x17>
c001ea68:	b8 04 00 00 00       	mov    eax,0x4
c001ea6d:	eb 5c                	jmp    c001eacb <FAT::unlink(char const*)+0x73>
c001ea6f:	83 ec 08             	sub    esp,0x8
c001ea72:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea79:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea7d:	50                   	push   eax
c001ea7e:	e8 e1 1c fe ff       	call   c0000764 <strcpy>
c001ea83:	83 c4 10             	add    esp,0x10
c001ea86:	83 ec 08             	sub    esp,0x8
c001ea89:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea8d:	50                   	push   eax
c001ea8e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea95:	e8 ce fc ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001ea9a:	83 c4 10             	add    esp,0x10
c001ea9d:	83 ec 0c             	sub    esp,0xc
c001eaa0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eaa4:	50                   	push   eax
c001eaa5:	e8 1a 78 fe ff       	call   c00062c4 <f_unlink>
c001eaaa:	83 c4 10             	add    esp,0x10
c001eaad:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001eab4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001eabb:	85 c0                	test   eax,eax
c001eabd:	75 07                	jne    c001eac6 <FAT::unlink(char const*)+0x6e>
c001eabf:	b8 00 00 00 00       	mov    eax,0x0
c001eac4:	eb 05                	jmp    c001eacb <FAT::unlink(char const*)+0x73>
c001eac6:	b8 01 00 00 00       	mov    eax,0x1
c001eacb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ead1:	c3                   	ret    

c001ead2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ead2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ead8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001eadf:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001eae6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001eaea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eaee:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001eaf6:	75 0a                	jne    c001eb02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001eaf8:	b8 04 00 00 00       	mov    eax,0x4
c001eafd:	e9 1c 01 00 00       	jmp    c001ec1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001eb02:	83 ec 08             	sub    esp,0x8
c001eb05:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb0c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001eb10:	50                   	push   eax
c001eb11:	e8 4e 1c fe ff       	call   c0000764 <strcpy>
c001eb16:	83 c4 10             	add    esp,0x10
c001eb19:	83 ec 08             	sub    esp,0x8
c001eb1c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb20:	50                   	push   eax
c001eb21:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb28:	e8 3b fc ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001eb2d:	83 c4 10             	add    esp,0x10
c001eb30:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001eb38:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001eb40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb45:	83 e0 01             	and    eax,0x1
c001eb48:	74 08                	je     c001eb52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001eb4a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001eb52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb57:	83 e0 02             	and    eax,0x2
c001eb5a:	74 08                	je     c001eb64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001eb5c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001eb64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb69:	83 e0 04             	and    eax,0x4
c001eb6c:	74 08                	je     c001eb76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001eb6e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001eb76:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb7b:	83 e0 08             	and    eax,0x8
c001eb7e:	74 08                	je     c001eb88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001eb80:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001eb88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb8d:	83 e0 01             	and    eax,0x1
c001eb90:	74 08                	je     c001eb9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001eb92:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001eb9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb9f:	83 e0 02             	and    eax,0x2
c001eba2:	74 08                	je     c001ebac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001eba4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ebac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebb1:	83 e0 04             	and    eax,0x4
c001ebb4:	74 08                	je     c001ebbe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001ebb6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ebbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebc3:	83 e0 08             	and    eax,0x8
c001ebc6:	74 08                	je     c001ebd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ebc8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ebd0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ebd7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ebde:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ebe6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ebee:	83 ec 04             	sub    esp,0x4
c001ebf1:	52                   	push   edx
c001ebf2:	50                   	push   eax
c001ebf3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ebf7:	50                   	push   eax
c001ebf8:	e8 69 7d fe ff       	call   c0006966 <f_chmod>
c001ebfd:	83 c4 10             	add    esp,0x10
c001ec00:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ec07:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ec0e:	85 c0                	test   eax,eax
c001ec10:	75 07                	jne    c001ec19 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ec12:	b8 00 00 00 00       	mov    eax,0x0
c001ec17:	eb 05                	jmp    c001ec1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ec19:	b8 01 00 00 00       	mov    eax,0x1
c001ec1e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ec24:	c3                   	ret    
c001ec25:	90                   	nop

c001ec26 <FAT::rename(char const*, char const*)>:
c001ec26:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec2c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ec34:	74 0a                	je     c001ec40 <FAT::rename(char const*, char const*)+0x1a>
c001ec36:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ec3e:	75 0a                	jne    c001ec4a <FAT::rename(char const*, char const*)+0x24>
c001ec40:	b8 04 00 00 00       	mov    eax,0x4
c001ec45:	e9 98 00 00 00       	jmp    c001ece2 <FAT::rename(char const*, char const*)+0xbc>
c001ec4a:	83 ec 08             	sub    esp,0x8
c001ec4d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec54:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec5b:	50                   	push   eax
c001ec5c:	e8 03 1b fe ff       	call   c0000764 <strcpy>
c001ec61:	83 c4 10             	add    esp,0x10
c001ec64:	83 ec 08             	sub    esp,0x8
c001ec67:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ec6e:	50                   	push   eax
c001ec6f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec76:	e8 ed fa ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001ec7b:	83 c4 10             	add    esp,0x10
c001ec7e:	83 ec 08             	sub    esp,0x8
c001ec81:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ec88:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ec8c:	50                   	push   eax
c001ec8d:	e8 d2 1a fe ff       	call   c0000764 <strcpy>
c001ec92:	83 c4 10             	add    esp,0x10
c001ec95:	83 ec 08             	sub    esp,0x8
c001ec98:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ec9c:	50                   	push   eax
c001ec9d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001eca4:	e8 bf fa ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	83 ec 08             	sub    esp,0x8
c001ecaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecb3:	50                   	push   eax
c001ecb4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ecbb:	50                   	push   eax
c001ecbc:	e8 b2 79 fe ff       	call   c0006673 <f_rename>
c001ecc1:	83 c4 10             	add    esp,0x10
c001ecc4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001eccb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ecd2:	85 c0                	test   eax,eax
c001ecd4:	75 07                	jne    c001ecdd <FAT::rename(char const*, char const*)+0xb7>
c001ecd6:	b8 00 00 00 00       	mov    eax,0x0
c001ecdb:	eb 05                	jmp    c001ece2 <FAT::rename(char const*, char const*)+0xbc>
c001ecdd:	b8 01 00 00 00       	mov    eax,0x1
c001ece2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ece8:	c3                   	ret    
c001ece9:	90                   	nop

c001ecea <FAT::mkdir(char const*)>:
c001ecea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ecf0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ecf8:	75 07                	jne    c001ed01 <FAT::mkdir(char const*)+0x17>
c001ecfa:	b8 04 00 00 00       	mov    eax,0x4
c001ecff:	eb 5c                	jmp    c001ed5d <FAT::mkdir(char const*)+0x73>
c001ed01:	83 ec 08             	sub    esp,0x8
c001ed04:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed0f:	50                   	push   eax
c001ed10:	e8 4f 1a fe ff       	call   c0000764 <strcpy>
c001ed15:	83 c4 10             	add    esp,0x10
c001ed18:	83 ec 08             	sub    esp,0x8
c001ed1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed1f:	50                   	push   eax
c001ed20:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed27:	e8 3c fa ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	83 ec 0c             	sub    esp,0xc
c001ed32:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed36:	50                   	push   eax
c001ed37:	e8 0b 77 fe ff       	call   c0006447 <f_mkdir>
c001ed3c:	83 c4 10             	add    esp,0x10
c001ed3f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ed46:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ed4d:	85 c0                	test   eax,eax
c001ed4f:	75 07                	jne    c001ed58 <FAT::mkdir(char const*)+0x6e>
c001ed51:	b8 00 00 00 00       	mov    eax,0x0
c001ed56:	eb 05                	jmp    c001ed5d <FAT::mkdir(char const*)+0x73>
c001ed58:	b8 01 00 00 00       	mov    eax,0x1
c001ed5d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ed63:	c3                   	ret    

c001ed64 <FAT::exists(char const*)>:
c001ed64:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ed6a:	83 ec 08             	sub    esp,0x8
c001ed6d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed74:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed78:	50                   	push   eax
c001ed79:	e8 e6 19 fe ff       	call   c0000764 <strcpy>
c001ed7e:	83 c4 10             	add    esp,0x10
c001ed81:	83 ec 08             	sub    esp,0x8
c001ed84:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed88:	50                   	push   eax
c001ed89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed90:	e8 d3 f9 ff ff       	call   c001e768 <FAT::fixFilepath(char*)>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	83 ec 08             	sub    esp,0x8
c001ed9b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001eda2:	50                   	push   eax
c001eda3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eda7:	50                   	push   eax
c001eda8:	e8 c5 71 fe ff       	call   c0005f72 <f_stat>
c001edad:	83 c4 10             	add    esp,0x10
c001edb0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001edb7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001edbe:	85 c0                	test   eax,eax
c001edc0:	75 04                	jne    c001edc6 <FAT::exists(char const*)+0x62>
c001edc2:	b0 01                	mov    al,0x1
c001edc4:	eb 02                	jmp    c001edc8 <FAT::exists(char const*)+0x64>
c001edc6:	b0 00                	mov    al,0x0
c001edc8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001edce:	c3                   	ret    
c001edcf:	90                   	nop

c001edd0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001edd0:	b8 08 00 00 00       	mov    eax,0x8
c001edd5:	c3                   	ret    

c001edd6 <ISO9660::seek(void*, unsigned long long)>:
c001edd6:	53                   	push   ebx
c001edd7:	b8 04 00 00 00       	mov    eax,0x4
c001eddc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ede0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ede4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ede8:	85 d2                	test   edx,edx
c001edea:	74 17                	je     c001ee03 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001edec:	89 c8                	mov    eax,ecx
c001edee:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001edf1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001edf4:	b8 01 00 00 00       	mov    eax,0x1
c001edf9:	73 08                	jae    c001ee03 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001edfb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001edfe:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ee01:	31 c0                	xor    eax,eax
c001ee03:	5b                   	pop    ebx
c001ee04:	c3                   	ret    
c001ee05:	90                   	nop

c001ee06 <ISO9660::tell(void*, unsigned long long*)>:
c001ee06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee0e:	85 d2                	test   edx,edx
c001ee10:	74 12                	je     c001ee24 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee12:	85 c0                	test   eax,eax
c001ee14:	74 0e                	je     c001ee24 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee16:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ee19:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ee1c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee1f:	89 10                	mov    DWORD PTR [eax],edx
c001ee21:	31 c0                	xor    eax,eax
c001ee23:	c3                   	ret    
c001ee24:	b8 04 00 00 00       	mov    eax,0x4
c001ee29:	c3                   	ret    

c001ee2a <ISO9660::getName()>:
c001ee2a:	b8 74 8b 02 c0       	mov    eax,0xc0028b74
c001ee2f:	c3                   	ret    

c001ee30 <ISO9660::stat(void*, unsigned long long*)>:
c001ee30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee38:	85 d2                	test   edx,edx
c001ee3a:	74 12                	je     c001ee4e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee3c:	85 c0                	test   eax,eax
c001ee3e:	74 0e                	je     c001ee4e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee40:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ee43:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ee46:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee49:	89 10                	mov    DWORD PTR [eax],edx
c001ee4b:	31 c0                	xor    eax,eax
c001ee4d:	c3                   	ret    
c001ee4e:	b8 04 00 00 00       	mov    eax,0x4
c001ee53:	c3                   	ret    

c001ee54 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ee54:	b8 01 00 00 00       	mov    eax,0x1
c001ee59:	c3                   	ret    

c001ee5a <ISO9660::unlink(char const*)>:
c001ee5a:	b8 01 00 00 00       	mov    eax,0x1
c001ee5f:	c3                   	ret    

c001ee60 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ee60:	b8 01 00 00 00       	mov    eax,0x1
c001ee65:	c3                   	ret    

c001ee66 <ISO9660::rename(char const*, char const*)>:
c001ee66:	b8 01 00 00 00       	mov    eax,0x1
c001ee6b:	c3                   	ret    

c001ee6c <ISO9660::mkdir(char const*)>:
c001ee6c:	b8 01 00 00 00       	mov    eax,0x1
c001ee71:	c3                   	ret    

c001ee72 <ISO9660::close(void*)>:
c001ee72:	83 ec 0c             	sub    esp,0xc
c001ee75:	b8 04 00 00 00       	mov    eax,0x4
c001ee7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee7e:	85 d2                	test   edx,edx
c001ee80:	74 0e                	je     c001ee90 <ISO9660::close(void*)+0x1e>
c001ee82:	83 ec 0c             	sub    esp,0xc
c001ee85:	52                   	push   edx
c001ee86:	e8 c3 02 ff ff       	call   c000f14e <free>
c001ee8b:	83 c4 10             	add    esp,0x10
c001ee8e:	31 c0                	xor    eax,eax
c001ee90:	83 c4 0c             	add    esp,0xc
c001ee93:	c3                   	ret    

c001ee94 <ISO9660::closeDir(void*)>:
c001ee94:	83 ec 0c             	sub    esp,0xc
c001ee97:	b8 04 00 00 00       	mov    eax,0x4
c001ee9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eea0:	85 d2                	test   edx,edx
c001eea2:	74 0e                	je     c001eeb2 <ISO9660::closeDir(void*)+0x1e>
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	52                   	push   edx
c001eea8:	e8 a1 02 ff ff       	call   c000f14e <free>
c001eead:	83 c4 10             	add    esp,0x10
c001eeb0:	31 c0                	xor    eax,eax
c001eeb2:	83 c4 0c             	add    esp,0xc
c001eeb5:	c3                   	ret    

c001eeb6 <ISO9660::~ISO9660()>:
c001eeb6:	83 ec 0c             	sub    esp,0xc
c001eeb9:	ba c8 8b 02 c0       	mov    edx,0xc0028bc8
c001eebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec2:	89 10                	mov    DWORD PTR [eax],edx
c001eec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	50                   	push   eax
c001eecc:	e8 9f 36 ff ff       	call   c0012570 <Filesystem::~Filesystem()>
c001eed1:	83 c4 10             	add    esp,0x10
c001eed4:	90                   	nop
c001eed5:	83 c4 0c             	add    esp,0xc
c001eed8:	c3                   	ret    
c001eed9:	90                   	nop

c001eeda <ISO9660::~ISO9660()>:
c001eeda:	83 ec 0c             	sub    esp,0xc
c001eedd:	83 ec 0c             	sub    esp,0xc
c001eee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eee4:	e8 cd ff ff ff       	call   c001eeb6 <ISO9660::~ISO9660()>
c001eee9:	83 c4 10             	add    esp,0x10
c001eeec:	83 ec 08             	sub    esp,0x8
c001eeef:	6a 08                	push   0x8
c001eef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef5:	e8 6d 32 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c001eefa:	83 c4 10             	add    esp,0x10
c001eefd:	83 c4 0c             	add    esp,0xc
c001ef00:	c3                   	ret    

c001ef01 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ef01:	55                   	push   ebp
c001ef02:	31 c9                	xor    ecx,ecx
c001ef04:	57                   	push   edi
c001ef05:	56                   	push   esi
c001ef06:	53                   	push   ebx
c001ef07:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ef0b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef0f:	89 eb                	mov    ebx,ebp
c001ef11:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ef15:	39 ce                	cmp    esi,ecx
c001ef17:	7e 17                	jle    c001ef30 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ef19:	31 d2                	xor    edx,edx
c001ef1b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ef1f:	7d 13                	jge    c001ef34 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ef21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef25:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ef28:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ef2b:	75 0d                	jne    c001ef3a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ef2d:	42                   	inc    edx
c001ef2e:	eb eb                	jmp    c001ef1b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ef30:	31 c0                	xor    eax,eax
c001ef32:	eb 0a                	jmp    c001ef3e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef34:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ef38:	eb 04                	jmp    c001ef3e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef3a:	41                   	inc    ecx
c001ef3b:	43                   	inc    ebx
c001ef3c:	eb d7                	jmp    c001ef15 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ef3e:	5b                   	pop    ebx
c001ef3f:	5e                   	pop    esi
c001ef40:	5f                   	pop    edi
c001ef41:	5d                   	pop    ebp
c001ef42:	c3                   	ret    

c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ef43:	56                   	push   esi
c001ef44:	53                   	push   ebx
c001ef45:	52                   	push   edx
c001ef46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef4a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ef4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef52:	39 0d e0 b9 02 c0    	cmp    DWORD PTR ds:0xc002b9e0,ecx
c001ef58:	75 08                	jne    c001ef62 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ef5a:	38 05 a8 99 02 c0    	cmp    BYTE PTR ds:0xc00299a8,al
c001ef60:	74 2b                	je     c001ef8d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ef62:	83 ec 0c             	sub    esp,0xc
c001ef65:	a2 a8 99 02 c0       	mov    ds:0xc00299a8,al
c001ef6a:	68 00 ba 02 c0       	push   0xc002ba00
c001ef6f:	0f be c0             	movsx  eax,al
c001ef72:	6a 01                	push   0x1
c001ef74:	89 0d e0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9e0,ecx
c001ef7a:	31 db                	xor    ebx,ebx
c001ef7c:	53                   	push   ebx
c001ef7d:	51                   	push   ecx
c001ef7e:	ff 34 85 fc a8 02 c0 	push   DWORD PTR [eax*4-0x3ffd5704]
c001ef85:	e8 e8 68 ff ff       	call   c0015872 <LogicalDisk::read(unsigned long long, int, void*)>
c001ef8a:	83 c4 20             	add    esp,0x20
c001ef8d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001ef95:	c7 44 24 14 00 ba 02 c0 	mov    DWORD PTR [esp+0x14],0xc002ba00
c001ef9d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001efa1:	58                   	pop    eax
c001efa2:	5b                   	pop    ebx
c001efa3:	5e                   	pop    esi
c001efa4:	e9 e6 16 fe ff       	jmp    c000068f <memcpy>
c001efa9:	90                   	nop

c001efaa <ISO9660::tryMount(LogicalDisk*, int)>:
c001efaa:	81 ec 10 08 00 00    	sub    esp,0x810
c001efb0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001efb7:	83 c0 41             	add    eax,0x41
c001efba:	0f be c0             	movsx  eax,al
c001efbd:	50                   	push   eax
c001efbe:	8d 44 24 08          	lea    eax,[esp+0x8]
c001efc2:	50                   	push   eax
c001efc3:	6a 10                	push   0x10
c001efc5:	e8 79 ff ff ff       	call   c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001efca:	83 c4 10             	add    esp,0x10
c001efcd:	31 c0                	xor    eax,eax
c001efcf:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001efd4:	75 1d                	jne    c001eff3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efd6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001efdb:	75 16                	jne    c001eff3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efdd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001efe2:	75 0f                	jne    c001eff3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efe4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001efe9:	75 08                	jne    c001eff3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efeb:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001eff0:	0f 94 c0             	sete   al
c001eff3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001eff9:	c3                   	ret    

c001effa <ISO9660::read(void*, unsigned long, void*, int*)>:
c001effa:	55                   	push   ebp
c001effb:	57                   	push   edi
c001effc:	56                   	push   esi
c001effd:	53                   	push   ebx
c001effe:	81 ec 34 08 00 00    	sub    esp,0x834
c001f004:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f00b:	55                   	push   ebp
c001f00c:	68 8f 8b 02 c0       	push   0xc0028b8f
c001f011:	e8 31 32 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001f016:	83 c4 10             	add    esp,0x10
c001f019:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f021:	0f 84 06 02 00 00    	je     c001f22d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f027:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f02f:	0f 84 f8 01 00 00    	je     c001f22d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f035:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f03c:	b8 01 00 00 00       	mov    eax,0x1
c001f041:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f045:	0f 85 e7 01 00 00    	jne    c001f232 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f04b:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f04e:	31 d2                	xor    edx,edx
c001f050:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f053:	89 e9                	mov    ecx,ebp
c001f055:	89 d3                	mov    ebx,edx
c001f057:	01 f1                	add    ecx,esi
c001f059:	11 fb                	adc    ebx,edi
c001f05b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f05f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f063:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f06a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f06d:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f070:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f074:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f078:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f07c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f080:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f084:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f088:	72 19                	jb     c001f0a3 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f08a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f092:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f096:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f099:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f09d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0a1:	eb 13                	jmp    c001f0b6 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f0a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0ab:	29 f0                	sub    eax,esi
c001f0ad:	19 fa                	sbb    edx,edi
c001f0af:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0b2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f0b6:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f0bd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f0c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0c2:	53                   	push   ebx
c001f0c3:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f0c7:	c1 e0 0b             	shl    eax,0xb
c001f0ca:	01 c6                	add    esi,eax
c001f0cc:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f0d3:	11 d7                	adc    edi,edx
c001f0d5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f0d9:	89 fa                	mov    edx,edi
c001f0db:	50                   	push   eax
c001f0dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f0e0:	50                   	push   eax
c001f0e1:	89 f0                	mov    eax,esi
c001f0e3:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f0e7:	50                   	push   eax
c001f0e8:	e8 56 fe ff ff       	call   c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f0ed:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f0f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0f8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f0fb:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f0ff:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f105:	83 c4 10             	add    esp,0x10
c001f108:	b8 00 08 00 00       	mov    eax,0x800
c001f10d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f111:	29 d0                	sub    eax,edx
c001f113:	39 c1                	cmp    ecx,eax
c001f115:	83 db 00             	sbb    ebx,0x0
c001f118:	7d 19                	jge    c001f133 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f11a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f11f:	75 16                	jne    c001f137 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f121:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f12e:	e9 f6 00 00 00       	jmp    c001f229 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f133:	89 c5                	mov    ebp,eax
c001f135:	eb 03                	jmp    c001f13a <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f137:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f13a:	51                   	push   ecx
c001f13b:	55                   	push   ebp
c001f13c:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f140:	50                   	push   eax
c001f141:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f148:	e8 42 15 fe ff       	call   c000068f <memcpy>
c001f14d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f151:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f155:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f15c:	01 e8                	add    eax,ebp
c001f15e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f162:	89 e8                	mov    eax,ebp
c001f164:	99                   	cdq    
c001f165:	01 ee                	add    esi,ebp
c001f167:	11 d7                	adc    edi,edx
c001f169:	29 e9                	sub    ecx,ebp
c001f16b:	19 d3                	sbb    ebx,edx
c001f16d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f171:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f175:	83 c4 10             	add    esp,0x10
c001f178:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f17d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f180:	b8 00 00 00 00       	mov    eax,0x0
c001f185:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f189:	7d 3f                	jge    c001f1ca <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f18b:	52                   	push   edx
c001f18c:	89 fa                	mov    edx,edi
c001f18e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f195:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f199:	50                   	push   eax
c001f19a:	89 f0                	mov    eax,esi
c001f19c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1a0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1a4:	50                   	push   eax
c001f1a5:	e8 99 fd ff ff       	call   c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1aa:	81 c6 00 08 00 00    	add    esi,0x800
c001f1b0:	83 d7 00             	adc    edi,0x0
c001f1b3:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f1bb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f1c3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f1c8:	eb ab                	jmp    c001f175 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f1ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1ce:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f1d1:	74 34                	je     c001f207 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f1d3:	89 fa                	mov    edx,edi
c001f1d5:	50                   	push   eax
c001f1d6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1dd:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1e1:	50                   	push   eax
c001f1e2:	89 f0                	mov    eax,esi
c001f1e4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f1e8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1ec:	55                   	push   ebp
c001f1ed:	50                   	push   eax
c001f1ee:	e8 50 fd ff ff       	call   c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1f3:	83 c4 0c             	add    esp,0xc
c001f1f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f1fa:	55                   	push   ebp
c001f1fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ff:	e8 8b 14 fe ff       	call   c000068f <memcpy>
c001f204:	83 c4 10             	add    esp,0x10
c001f207:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f20e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f212:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f216:	89 38                	mov    DWORD PTR [eax],edi
c001f218:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f21f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f223:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f226:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f229:	31 c0                	xor    eax,eax
c001f22b:	eb 05                	jmp    c001f232 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f22d:	b8 04 00 00 00       	mov    eax,0x4
c001f232:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f238:	5b                   	pop    ebx
c001f239:	5e                   	pop    esi
c001f23a:	5f                   	pop    edi
c001f23b:	5d                   	pop    ebp
c001f23c:	c3                   	ret    
c001f23d:	90                   	nop

c001f23e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f23e:	55                   	push   ebp
c001f23f:	57                   	push   edi
c001f240:	56                   	push   esi
c001f241:	53                   	push   ebx
c001f242:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f248:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f24f:	85 f6                	test   esi,esi
c001f251:	0f 84 64 02 00 00    	je     c001f4bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f257:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f25f:	0f 84 56 02 00 00    	je     c001f4bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f265:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f268:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f26b:	75 0a                	jne    c001f277 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f26d:	b8 07 00 00 00       	mov    eax,0x7
c001f272:	e9 49 02 00 00       	jmp    c001f4c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f277:	50                   	push   eax
c001f278:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f27c:	50                   	push   eax
c001f27d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f284:	53                   	push   ebx
c001f285:	8b 06                	mov    eax,DWORD PTR [esi]
c001f287:	c1 e0 0b             	shl    eax,0xb
c001f28a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f28d:	c1 e8 0b             	shr    eax,0xb
c001f290:	50                   	push   eax
c001f291:	e8 ad fc ff ff       	call   c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f296:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f299:	83 c4 10             	add    esp,0x10
c001f29c:	89 c1                	mov    ecx,eax
c001f29e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f2a1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f2a7:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f2aa:	84 db                	test   bl,bl
c001f2ac:	0f 85 90 00 00 00    	jne    c001f342 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f2b2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f2b8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f2be:	29 c7                	sub    edi,eax
c001f2c0:	89 fb                	mov    ebx,edi
c001f2c2:	c1 fb 1f             	sar    ebx,0x1f
c001f2c5:	01 f8                	add    eax,edi
c001f2c7:	11 da                	adc    edx,ebx
c001f2c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2d1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f2d4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f2d7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f2da:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f2dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2e4:	89 d8                	mov    eax,ebx
c001f2e6:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2e9:	ba 00 00 00 00       	mov    edx,0x0
c001f2ee:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f2f2:	b8 00 00 00 00       	mov    eax,0x0
c001f2f7:	73 0b                	jae    c001f304 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f2f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f300:	29 f8                	sub    eax,edi
c001f302:	19 da                	sbb    edx,ebx
c001f304:	89 d3                	mov    ebx,edx
c001f306:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f309:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f30c:	09 c3                	or     ebx,eax
c001f30e:	0f 84 59 ff ff ff    	je     c001f26d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f314:	55                   	push   ebp
c001f315:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f319:	50                   	push   eax
c001f31a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f321:	53                   	push   ebx
c001f322:	8b 06                	mov    eax,DWORD PTR [esi]
c001f324:	c1 e0 0b             	shl    eax,0xb
c001f327:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f32b:	c1 e8 0b             	shr    eax,0xb
c001f32e:	50                   	push   eax
c001f32f:	e8 0f fc ff ff       	call   c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f334:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f337:	83 c4 10             	add    esp,0x10
c001f33a:	25 ff 07 00 00       	and    eax,0x7ff
c001f33f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f342:	57                   	push   edi
c001f343:	6a 28                	push   0x28
c001f345:	6a 00                	push   0x0
c001f347:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f34b:	50                   	push   eax
c001f34c:	e8 74 13 fe ff       	call   c00006c5 <memset>
c001f351:	31 d2                	xor    edx,edx
c001f353:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f356:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f35c:	89 f8                	mov    eax,edi
c001f35e:	83 c0 21             	add    eax,0x21
c001f361:	83 d2 00             	adc    edx,0x0
c001f364:	89 c7                	mov    edi,eax
c001f366:	89 d5                	mov    ebp,edx
c001f368:	83 c4 10             	add    esp,0x10
c001f36b:	31 c9                	xor    ecx,ecx
c001f36d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f374:	83 f9 28             	cmp    ecx,0x28
c001f377:	88 04 24             	mov    BYTE PTR [esp],al
c001f37a:	0f 94 c2             	sete   dl
c001f37d:	88 d0                	mov    al,dl
c001f37f:	ba ff 07 00 00       	mov    edx,0x7ff
c001f384:	39 fa                	cmp    edx,edi
c001f386:	ba 00 00 00 00       	mov    edx,0x0
c001f38b:	19 ea                	sbb    edx,ebp
c001f38d:	0f 92 c2             	setb   dl
c001f390:	09 c2                	or     edx,eax
c001f392:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f396:	0f 94 c0             	sete   al
c001f399:	08 d0                	or     al,dl
c001f39b:	75 16                	jne    c001f3b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f39d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f3a1:	74 10                	je     c001f3b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3a3:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f3a6:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f3aa:	41                   	inc    ecx
c001f3ab:	83 c7 01             	add    edi,0x1
c001f3ae:	83 d5 00             	adc    ebp,0x0
c001f3b1:	eb ba                	jmp    c001f36d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f3b3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f3ba:	83 ec 0c             	sub    esp,0xc
c001f3bd:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f3c1:	57                   	push   edi
c001f3c2:	e8 1b 13 fe ff       	call   c00006e2 <strlen>
c001f3c7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f3cf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3d3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f3da:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f3dd:	5a                   	pop    edx
c001f3de:	25 ff 07 00 00       	and    eax,0x7ff
c001f3e3:	01 c8                	add    eax,ecx
c001f3e5:	59                   	pop    ecx
c001f3e6:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f3ec:	83 e0 02             	and    eax,0x2
c001f3ef:	3c 01                	cmp    al,0x1
c001f3f1:	19 c0                	sbb    eax,eax
c001f3f3:	83 c0 02             	add    eax,0x2
c001f3f6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3fa:	57                   	push   edi
c001f3fb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f3ff:	50                   	push   eax
c001f400:	e8 5f 13 fe ff       	call   c0000764 <strcpy>
c001f405:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f409:	83 c4 10             	add    esp,0x10
c001f40c:	84 c0                	test   al,al
c001f40e:	75 21                	jne    c001f431 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f410:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f418:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f420:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f428:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f42f:	eb 28                	jmp    c001f459 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f431:	fe c8                	dec    al
c001f433:	75 24                	jne    c001f459 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f435:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f43d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f445:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f44d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f454:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f459:	0f b6 fb             	movzx  edi,bl
c001f45c:	31 db                	xor    ebx,ebx
c001f45e:	50                   	push   eax
c001f45f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f466:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f46a:	50                   	push   eax
c001f46b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f472:	e8 18 12 fe ff       	call   c000068f <memcpy>
c001f477:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f47e:	89 f9                	mov    ecx,edi
c001f480:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f486:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f489:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f48c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f48f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f492:	83 c4 10             	add    esp,0x10
c001f495:	39 c7                	cmp    edi,eax
c001f497:	89 df                	mov    edi,ebx
c001f499:	19 d7                	sbb    edi,edx
c001f49b:	72 10                	jb     c001f4ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f49d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f4a4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f4ab:	eb 0a                	jmp    c001f4b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f4ad:	29 c8                	sub    eax,ecx
c001f4af:	19 da                	sbb    edx,ebx
c001f4b1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f4b4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f4b7:	31 c0                	xor    eax,eax
c001f4b9:	eb 05                	jmp    c001f4c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f4bb:	b8 04 00 00 00       	mov    eax,0x4
c001f4c0:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f4c6:	5b                   	pop    ebx
c001f4c7:	5e                   	pop    esi
c001f4c8:	5f                   	pop    edi
c001f4c9:	5d                   	pop    ebp
c001f4ca:	c3                   	ret    

c001f4cb <readRoot(unsigned int*, unsigned int*, char)>:
c001f4cb:	81 ec 40 08 00 00    	sub    esp,0x840
c001f4d1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f4d9:	50                   	push   eax
c001f4da:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f4de:	50                   	push   eax
c001f4df:	6a 10                	push   0x10
c001f4e1:	e8 5d fa ff ff       	call   c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f4e6:	83 c4 0c             	add    esp,0xc
c001f4e9:	6a 22                	push   0x22
c001f4eb:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f4f2:	50                   	push   eax
c001f4f3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f4f7:	50                   	push   eax
c001f4f8:	e8 92 11 fe ff       	call   c000068f <memcpy>
c001f4fd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f504:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f508:	89 10                	mov    DWORD PTR [eax],edx
c001f50a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f511:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f515:	89 10                	mov    DWORD PTR [eax],edx
c001f517:	b0 01                	mov    al,0x1
c001f519:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f51f:	c3                   	ret    

c001f520 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f520:	55                   	push   ebp
c001f521:	57                   	push   edi
c001f522:	56                   	push   esi
c001f523:	53                   	push   ebx
c001f524:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f52a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f531:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f538:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f53c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f540:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f544:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f548:	75 03                	jne    c001f54d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f54a:	83 c3 02             	add    ebx,0x2
c001f54d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f550:	75 03                	jne    c001f555 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f552:	43                   	inc    ebx
c001f553:	eb f8                	jmp    c001f54d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f555:	51                   	push   ecx
c001f556:	68 00 01 00 00       	push   0x100
c001f55b:	6a 00                	push   0x0
c001f55d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f561:	50                   	push   eax
c001f562:	e8 5e 11 fe ff       	call   c00006c5 <memset>
c001f567:	83 c4 10             	add    esp,0x10
c001f56a:	31 d2                	xor    edx,edx
c001f56c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f56f:	84 c0                	test   al,al
c001f571:	74 21                	je     c001f594 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f573:	3c 2f                	cmp    al,0x2f
c001f575:	75 0b                	jne    c001f582 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f577:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f57b:	bd 01 00 00 00       	mov    ebp,0x1
c001f580:	eb 14                	jmp    c001f596 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f582:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f585:	80 f9 19             	cmp    cl,0x19
c001f588:	77 03                	ja     c001f58d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f58a:	83 e8 20             	sub    eax,0x20
c001f58d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f591:	42                   	inc    edx
c001f592:	eb d8                	jmp    c001f56c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f594:	31 ed                	xor    ebp,ebp
c001f596:	83 ec 0c             	sub    esp,0xc
c001f599:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f5a0:	e8 99 fb fe ff       	call   c000f13e <malloc>
c001f5a5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f5ac:	89 c6                	mov    esi,eax
c001f5ae:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f5b4:	c1 ef 0b             	shr    edi,0xb
c001f5b7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f5be:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f5c2:	83 c4 10             	add    esp,0x10
c001f5c5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f5ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5ce:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f5d5:	74 28                	je     c001f5ff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f5d7:	52                   	push   edx
c001f5d8:	57                   	push   edi
c001f5d9:	50                   	push   eax
c001f5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5de:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f5e5:	e8 59 f9 ff ff       	call   c001ef43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5ee:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f5f5:	05 00 08 00 00       	add    eax,0x800
c001f5fa:	83 c4 10             	add    esp,0x10
c001f5fd:	eb cb                	jmp    c001f5ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f5ff:	83 ec 0c             	sub    esp,0xc
c001f602:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f606:	57                   	push   edi
c001f607:	e8 d6 10 fe ff       	call   c00006e2 <strlen>
c001f60c:	50                   	push   eax
c001f60d:	57                   	push   edi
c001f60e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f615:	56                   	push   esi
c001f616:	e8 e6 f8 ff ff       	call   c001ef01 <__memmem(unsigned char*, int, unsigned char*, int)>
c001f61b:	83 c4 20             	add    esp,0x20
c001f61e:	85 c0                	test   eax,eax
c001f620:	75 13                	jne    c001f635 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f622:	83 ec 0c             	sub    esp,0xc
c001f625:	56                   	push   esi
c001f626:	e8 23 fb fe ff       	call   c000f14e <free>
c001f62b:	83 c4 10             	add    esp,0x10
c001f62e:	31 c0                	xor    eax,eax
c001f630:	e9 b3 00 00 00       	jmp    c001f6e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f635:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f639:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f63d:	c1 e7 08             	shl    edi,0x8
c001f640:	c1 e2 10             	shl    edx,0x10
c001f643:	09 d7                	or     edi,edx
c001f645:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f649:	09 d7                	or     edi,edx
c001f64b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f64f:	c1 e2 18             	shl    edx,0x18
c001f652:	09 d7                	or     edi,edx
c001f654:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f658:	89 d1                	mov    ecx,edx
c001f65a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f65e:	c1 e1 08             	shl    ecx,0x8
c001f661:	c1 e2 10             	shl    edx,0x10
c001f664:	09 ca                	or     edx,ecx
c001f666:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f66a:	09 ca                	or     edx,ecx
c001f66c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f670:	c1 e1 18             	shl    ecx,0x18
c001f673:	09 ca                	or     edx,ecx
c001f675:	89 e9                	mov    ecx,ebp
c001f677:	84 c9                	test   cl,cl
c001f679:	74 3c                	je     c001f6b7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f67b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f67f:	83 ec 0c             	sub    esp,0xc
c001f682:	56                   	push   esi
c001f683:	e8 c6 fa fe ff       	call   c000f14e <free>
c001f688:	83 c4 0c             	add    esp,0xc
c001f68b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f692:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f697:	50                   	push   eax
c001f698:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f69f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6aa:	52                   	push   edx
c001f6ab:	57                   	push   edi
c001f6ac:	53                   	push   ebx
c001f6ad:	e8 6e fe ff ff       	call   c001f520 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f6b2:	83 c4 20             	add    esp,0x20
c001f6b5:	eb 31                	jmp    c001f6e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f6b7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f6ba:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f6c1:	d0 e8                	shr    al,1
c001f6c3:	89 3b                	mov    DWORD PTR [ebx],edi
c001f6c5:	83 e0 01             	and    eax,0x1
c001f6c8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f6cf:	83 ec 0c             	sub    esp,0xc
c001f6d2:	89 13                	mov    DWORD PTR [ebx],edx
c001f6d4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f6db:	89 03                	mov    DWORD PTR [ebx],eax
c001f6dd:	56                   	push   esi
c001f6de:	e8 6b fa fe ff       	call   c000f14e <free>
c001f6e3:	83 c4 10             	add    esp,0x10
c001f6e6:	b0 01                	mov    al,0x1
c001f6e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6ee:	5b                   	pop    ebx
c001f6ef:	5e                   	pop    esi
c001f6f0:	5f                   	pop    edi
c001f6f1:	5d                   	pop    ebp
c001f6f2:	c3                   	ret    

c001f6f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f6f3:	55                   	push   ebp
c001f6f4:	57                   	push   edi
c001f6f5:	56                   	push   esi
c001f6f6:	53                   	push   ebx
c001f6f7:	83 ec 20             	sub    esp,0x20
c001f6fa:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f6fe:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f702:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f706:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f70e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f716:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f71b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f721:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f727:	57                   	push   edi
c001f728:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f72c:	50                   	push   eax
c001f72d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f731:	50                   	push   eax
c001f732:	e8 94 fd ff ff       	call   c001f4cb <readRoot(unsigned int*, unsigned int*, char)>
c001f737:	5a                   	pop    edx
c001f738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f73c:	e8 a1 0f fe ff       	call   c00006e2 <strlen>
c001f741:	83 c4 10             	add    esp,0x10
c001f744:	83 f8 03             	cmp    eax,0x3
c001f747:	77 17                	ja     c001f760 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f749:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f74d:	89 03                	mov    DWORD PTR [ebx],eax
c001f74f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f753:	89 06                	mov    DWORD PTR [esi],eax
c001f755:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f75c:	b0 01                	mov    al,0x1
c001f75e:	eb 19                	jmp    c001f779 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f760:	50                   	push   eax
c001f761:	55                   	push   ebp
c001f762:	57                   	push   edi
c001f763:	56                   	push   esi
c001f764:	53                   	push   ebx
c001f765:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f769:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f76d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f771:	e8 aa fd ff ff       	call   c001f520 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f776:	83 c4 20             	add    esp,0x20
c001f779:	83 c4 1c             	add    esp,0x1c
c001f77c:	5b                   	pop    ebx
c001f77d:	5e                   	pop    esi
c001f77e:	5f                   	pop    edi
c001f77f:	5d                   	pop    ebp
c001f780:	c3                   	ret    
c001f781:	90                   	nop

c001f782 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f782:	57                   	push   edi
c001f783:	56                   	push   esi
c001f784:	53                   	push   ebx
c001f785:	83 ec 10             	sub    esp,0x10
c001f788:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f78c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f790:	85 ff                	test   edi,edi
c001f792:	74 7b                	je     c001f80f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f794:	85 f6                	test   esi,esi
c001f796:	74 77                	je     c001f80f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f798:	83 ec 0c             	sub    esp,0xc
c001f79b:	6a 1c                	push   0x1c
c001f79d:	e8 9c f9 fe ff       	call   c000f13e <malloc>
c001f7a2:	89 07                	mov    DWORD PTR [edi],eax
c001f7a4:	89 c3                	mov    ebx,eax
c001f7a6:	58                   	pop    eax
c001f7a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f7ab:	50                   	push   eax
c001f7ac:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f7af:	50                   	push   eax
c001f7b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7b4:	50                   	push   eax
c001f7b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7b9:	50                   	push   eax
c001f7ba:	56                   	push   esi
c001f7bb:	e8 33 ff ff ff       	call   c001f6f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f7c0:	83 c4 20             	add    esp,0x20
c001f7c3:	84 c0                	test   al,al
c001f7c5:	74 07                	je     c001f7ce <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f7c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7cc:	74 0b                	je     c001f7d9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f7ce:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f7d2:	b8 01 00 00 00       	mov    eax,0x1
c001f7d7:	eb 3b                	jmp    c001f814 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7dd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f7e1:	89 03                	mov    DWORD PTR [ebx],eax
c001f7e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f7ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f7f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f7fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f7ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f806:	8a 06                	mov    al,BYTE PTR [esi]
c001f808:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f80b:	31 c0                	xor    eax,eax
c001f80d:	eb 05                	jmp    c001f814 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f80f:	b8 04 00 00 00       	mov    eax,0x4
c001f814:	83 c4 10             	add    esp,0x10
c001f817:	5b                   	pop    ebx
c001f818:	5e                   	pop    esi
c001f819:	5f                   	pop    edi
c001f81a:	c3                   	ret    
c001f81b:	90                   	nop

c001f81c <ISO9660::exists(char const*)>:
c001f81c:	83 ec 28             	sub    esp,0x28
c001f81f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f823:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f827:	52                   	push   edx
c001f828:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f82b:	52                   	push   edx
c001f82c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f830:	52                   	push   edx
c001f831:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f835:	52                   	push   edx
c001f836:	50                   	push   eax
c001f837:	e8 b7 fe ff ff       	call   c001f6f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f83c:	83 c4 3c             	add    esp,0x3c
c001f83f:	c3                   	ret    

c001f840 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f840:	56                   	push   esi
c001f841:	53                   	push   ebx
c001f842:	83 ec 14             	sub    esp,0x14
c001f845:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f849:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f84d:	85 db                	test   ebx,ebx
c001f84f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f853:	0f 94 c2             	sete   dl
c001f856:	85 f6                	test   esi,esi
c001f858:	0f 94 c0             	sete   al
c001f85b:	08 c2                	or     dl,al
c001f85d:	75 68                	jne    c001f8c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f85f:	85 c9                	test   ecx,ecx
c001f861:	74 64                	je     c001f8c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f863:	83 ec 0c             	sub    esp,0xc
c001f866:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f869:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f86d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f873:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f87a:	50                   	push   eax
c001f87b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f87e:	50                   	push   eax
c001f87f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f883:	50                   	push   eax
c001f884:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f888:	50                   	push   eax
c001f889:	51                   	push   ecx
c001f88a:	e8 64 fe ff ff       	call   c001f6f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f88f:	83 c4 20             	add    esp,0x20
c001f892:	ba 01 00 00 00       	mov    edx,0x1
c001f897:	84 c0                	test   al,al
c001f899:	74 31                	je     c001f8cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f89b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f89f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8a6:	89 03                	mov    DWORD PTR [ebx],eax
c001f8a8:	ba 00 00 00 00       	mov    edx,0x0
c001f8ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8b1:	85 c0                	test   eax,eax
c001f8b3:	0f 95 06             	setne  BYTE PTR [esi]
c001f8b6:	74 14                	je     c001f8cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f8be:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8c5:	eb 05                	jmp    c001f8cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8c7:	ba 04 00 00 00       	mov    edx,0x4
c001f8cc:	83 c4 14             	add    esp,0x14
c001f8cf:	89 d0                	mov    eax,edx
c001f8d1:	5b                   	pop    ebx
c001f8d2:	5e                   	pop    esi
c001f8d3:	c3                   	ret    

c001f8d4 <ISO9660::openDir(char const*, void**)>:
c001f8d4:	57                   	push   edi
c001f8d5:	56                   	push   esi
c001f8d6:	53                   	push   ebx
c001f8d7:	83 ec 10             	sub    esp,0x10
c001f8da:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f8de:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f8e2:	85 ff                	test   edi,edi
c001f8e4:	0f 84 95 00 00 00    	je     c001f97f <ISO9660::openDir(char const*, void**)+0xab>
c001f8ea:	85 f6                	test   esi,esi
c001f8ec:	0f 84 8d 00 00 00    	je     c001f97f <ISO9660::openDir(char const*, void**)+0xab>
c001f8f2:	83 ec 0c             	sub    esp,0xc
c001f8f5:	6a 1c                	push   0x1c
c001f8f7:	e8 42 f8 fe ff       	call   c000f13e <malloc>
c001f8fc:	89 07                	mov    DWORD PTR [edi],eax
c001f8fe:	89 c3                	mov    ebx,eax
c001f900:	59                   	pop    ecx
c001f901:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f905:	50                   	push   eax
c001f906:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f909:	50                   	push   eax
c001f90a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f90e:	50                   	push   eax
c001f90f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f913:	50                   	push   eax
c001f914:	56                   	push   esi
c001f915:	e8 d9 fd ff ff       	call   c001f6f3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f91a:	83 c4 20             	add    esp,0x20
c001f91d:	84 c0                	test   al,al
c001f91f:	74 07                	je     c001f928 <ISO9660::openDir(char const*, void**)+0x54>
c001f921:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f926:	75 21                	jne    c001f949 <ISO9660::openDir(char const*, void**)+0x75>
c001f928:	0f b6 c0             	movzx  eax,al
c001f92b:	52                   	push   edx
c001f92c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f930:	50                   	push   eax
c001f931:	68 a2 8b 02 c0       	push   0xc0028ba2
c001f936:	e8 0c 29 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c001f93b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f93f:	83 c4 10             	add    esp,0x10
c001f942:	b8 01 00 00 00       	mov    eax,0x1
c001f947:	eb 3b                	jmp    c001f984 <ISO9660::openDir(char const*, void**)+0xb0>
c001f949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f94d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f951:	89 03                	mov    DWORD PTR [ebx],eax
c001f953:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f95a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f95e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f965:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f96c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f96f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f976:	8a 06                	mov    al,BYTE PTR [esi]
c001f978:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f97b:	31 c0                	xor    eax,eax
c001f97d:	eb 05                	jmp    c001f984 <ISO9660::openDir(char const*, void**)+0xb0>
c001f97f:	b8 04 00 00 00       	mov    eax,0x4
c001f984:	83 c4 10             	add    esp,0x10
c001f987:	5b                   	pop    ebx
c001f988:	5e                   	pop    esi
c001f989:	5f                   	pop    edi
c001f98a:	c3                   	ret    
c001f98b:	90                   	nop

c001f98c <ISO9660::ISO9660()>:
c001f98c:	83 ec 0c             	sub    esp,0xc
c001f98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f993:	83 ec 0c             	sub    esp,0xc
c001f996:	50                   	push   eax
c001f997:	e8 b0 2b ff ff       	call   c001254c <Filesystem::Filesystem()>
c001f99c:	83 c4 10             	add    esp,0x10
c001f99f:	ba c8 8b 02 c0       	mov    edx,0xc0028bc8
c001f9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a8:	89 10                	mov    DWORD PTR [eax],edx
c001f9aa:	90                   	nop
c001f9ab:	83 c4 0c             	add    esp,0xc
c001f9ae:	c3                   	ret    
c001f9af:	90                   	nop

c001f9b0 <SoundChannel::~SoundChannel()>:
c001f9b0:	83 ec 0c             	sub    esp,0xc
c001f9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001f9ba:	83 ec 0c             	sub    esp,0xc
c001f9bd:	50                   	push   eax
c001f9be:	e8 8b f7 fe ff       	call   c000f14e <free>
c001f9c3:	83 c4 10             	add    esp,0x10
c001f9c6:	90                   	nop
c001f9c7:	83 c4 0c             	add    esp,0xc
c001f9ca:	c3                   	ret    
c001f9cb:	90                   	nop

c001f9cc <SoundChannel::setSpeed(float)>:
c001f9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9d4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f9d7:	c3                   	ret    

c001f9d8 <SoundChannel::getSpeed()>:
c001f9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9dc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001f9df:	c3                   	ret    

c001f9e0 <SoundChannel::setVolume(int)>:
c001f9e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9e4:	83 f8 64             	cmp    eax,0x64
c001f9e7:	7e 05                	jle    c001f9ee <SoundChannel::setVolume(int)+0xe>
c001f9e9:	b8 64 00 00 00       	mov    eax,0x64
c001f9ee:	85 c0                	test   eax,eax
c001f9f0:	79 02                	jns    c001f9f4 <SoundChannel::setVolume(int)+0x14>
c001f9f2:	31 c0                	xor    eax,eax
c001f9f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9f8:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001f9fb:	c3                   	ret    

c001f9fc <SoundChannel::getVolume()>:
c001f9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa00:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001fa03:	c3                   	ret    

c001fa04 <SoundChannel::pause()>:
c001fa04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa08:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001fa0c:	c3                   	ret    
c001fa0d:	90                   	nop

c001fa0e <SoundChannel::SoundChannel(int, int, int, int)>:
c001fa0e:	83 ec 1c             	sub    esp,0x1c
c001fa11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fa15:	e8 ea ff ff ff       	call   c001fa04 <SoundChannel::pause()>
c001fa1a:	83 c4 04             	add    esp,0x4
c001fa1d:	6a 50                	push   0x50
c001fa1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa23:	e8 b8 ff ff ff       	call   c001f9e0 <SoundChannel::setVolume(int)>
c001fa28:	83 c4 08             	add    esp,0x8
c001fa2b:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c001fa30:	50                   	push   eax
c001fa31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa35:	e8 92 ff ff ff       	call   c001f9cc <SoundChannel::setSpeed(float)>
c001fa3a:	83 c4 08             	add    esp,0x8
c001fa3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fa45:	89 10                	mov    DWORD PTR [eax],edx
c001fa47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa56:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fa5a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa5d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fa62:	75 23                	jne    c001fa87 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fa64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa68:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa71:	0f af c2             	imul   eax,edx
c001fa74:	85 c0                	test   eax,eax
c001fa76:	79 03                	jns    c001fa7b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fa78:	83 c0 03             	add    eax,0x3
c001fa7b:	c1 f8 02             	sar    eax,0x2
c001fa7e:	05 a0 0f 00 00       	add    eax,0xfa0
c001fa83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fa87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa8b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fa8f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fa92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa96:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001fa9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faa1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001faa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001faaf:	c1 e0 02             	shl    eax,0x2
c001fab2:	83 ec 0c             	sub    esp,0xc
c001fab5:	50                   	push   eax
c001fab6:	e8 83 f6 fe ff       	call   c000f13e <malloc>
c001fabb:	83 c4 10             	add    esp,0x10
c001fabe:	89 c2                	mov    edx,eax
c001fac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fac4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001fac7:	83 ec 04             	sub    esp,0x4
c001faca:	8d 44 24 08          	lea    eax,[esp+0x8]
c001face:	50                   	push   eax
c001facf:	6a 01                	push   0x1
c001fad1:	6a 04                	push   0x4
c001fad3:	e8 8f 8e fe ff       	call   c0008967 <src_new>
c001fad8:	83 c4 10             	add    esp,0x10
c001fadb:	89 c2                	mov    edx,eax
c001fadd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fae1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001fae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae8:	85 c0                	test   eax,eax
c001faea:	74 10                	je     c001fafc <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001faec:	83 ec 0c             	sub    esp,0xc
c001faef:	68 24 8c 02 c0       	push   0xc0028c24
c001faf4:	e8 ec 8e ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c001faf9:	83 c4 10             	add    esp,0x10
c001fafc:	a0 00 c6 02 c0       	mov    al,ds:0xc002c600
c001fb01:	83 f0 01             	xor    eax,0x1
c001fb04:	84 c0                	test   al,al
c001fb06:	74 57                	je     c001fb5f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fb08:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c001fb0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fb11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fb19:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fb21:	7f 35                	jg     c001fb58 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fb23:	83 ec 0c             	sub    esp,0xc
c001fb26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb2a:	e8 58 41 00 00       	call   c0023c87 <__floatsisf>
c001fb2f:	83 c4 10             	add    esp,0x10
c001fb32:	8b 15 44 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c44
c001fb38:	83 ec 08             	sub    esp,0x8
c001fb3b:	52                   	push   edx
c001fb3c:	50                   	push   eax
c001fb3d:	e8 57 3d 00 00       	call   c0023899 <__mulsf3>
c001fb42:	83 c4 10             	add    esp,0x10
c001fb45:	89 c2                	mov    edx,eax
c001fb47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb4b:	89 14 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],edx
c001fb52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb56:	eb c1                	jmp    c001fb19 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fb58:	c6 05 00 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c600,0x1
c001fb5f:	90                   	nop
c001fb60:	83 c4 1c             	add    esp,0x1c
c001fb63:	c3                   	ret    

c001fb64 <SoundChannel::play()>:
c001fb64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb68:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fb6c:	c3                   	ret    
c001fb6d:	90                   	nop

c001fb6e <SoundChannel::paused()>:
c001fb6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb72:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fb75:	c3                   	ret    

c001fb76 <SoundChannel::getSampleRate()>:
c001fb76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb7c:	c3                   	ret    
c001fb7d:	90                   	nop

c001fb7e <SoundChannel::getBits()>:
c001fb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb85:	c3                   	ret    

c001fb86 <SoundChannel::getBufferUsed()>:
c001fb86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb8a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fb8d:	c3                   	ret    

c001fb8e <SoundChannel::getBufferSize()>:
c001fb8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb92:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fb95:	c3                   	ret    

c001fb96 <SoundChannel::unbuffer(float*, int, int)>:
c001fb96:	56                   	push   esi
c001fb97:	53                   	push   ebx
c001fb98:	83 ec 40             	sub    esp,0x40
c001fb9b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fb9f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fba2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fba6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fba9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fbad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fbb1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fbb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fbb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbbd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fbc1:	e8 c1 40 00 00       	call   c0023c87 <__floatsisf>
c001fbc6:	5a                   	pop    edx
c001fbc7:	89 c6                	mov    esi,eax
c001fbc9:	ff 33                	push   DWORD PTR [ebx]
c001fbcb:	e8 b7 40 00 00       	call   c0023c87 <__floatsisf>
c001fbd0:	59                   	pop    ecx
c001fbd1:	5a                   	pop    edx
c001fbd2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fbd5:	50                   	push   eax
c001fbd6:	e8 be 3c 00 00       	call   c0023899 <__mulsf3>
c001fbdb:	59                   	pop    ecx
c001fbdc:	5a                   	pop    edx
c001fbdd:	50                   	push   eax
c001fbde:	56                   	push   esi
c001fbdf:	e8 78 3e 00 00       	call   c0023a5c <__divsf3>
c001fbe4:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbe7:	e8 6b 53 00 00       	call   c0024f57 <__extendsfdf2>
c001fbec:	59                   	pop    ecx
c001fbed:	5e                   	pop    esi
c001fbee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fbf2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fbf6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fbfe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc02:	50                   	push   eax
c001fc03:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fc06:	e8 d6 89 fe ff       	call   c00085e1 <src_process>
c001fc0b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fc0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fc12:	83 c4 0c             	add    esp,0xc
c001fc15:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fc18:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fc1b:	29 d0                	sub    eax,edx
c001fc1d:	c1 e0 02             	shl    eax,0x2
c001fc20:	50                   	push   eax
c001fc21:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fc24:	50                   	push   eax
c001fc25:	51                   	push   ecx
c001fc26:	e8 2c 0a fe ff       	call   c0000657 <memmove>
c001fc2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc2f:	83 c4 44             	add    esp,0x44
c001fc32:	5b                   	pop    ebx
c001fc33:	5e                   	pop    esi
c001fc34:	c3                   	ret    
c001fc35:	90                   	nop

c001fc36 <SoundChannel::buffer8(unsigned char*, int)>:
c001fc36:	55                   	push   ebp
c001fc37:	57                   	push   edi
c001fc38:	56                   	push   esi
c001fc39:	53                   	push   ebx
c001fc3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc3e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fc42:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc45:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc49:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc4c:	74 7a                	je     c001fcc8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc4e:	85 ff                	test   edi,edi
c001fc50:	7e 76                	jle    c001fcc8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc52:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fc56:	8d 70 01             	lea    esi,[eax+0x1]
c001fc59:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc5c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc5f:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc66:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc69:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc6c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc6f:	74 5e                	je     c001fccf <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fc71:	83 ff 01             	cmp    edi,0x1
c001fc74:	74 4b                	je     c001fcc1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fc76:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fc7a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc7d:	8d 70 01             	lea    esi,[eax+0x1]
c001fc80:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc83:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc8a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc8d:	b8 02 00 00 00       	mov    eax,0x2
c001fc92:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fc95:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fc98:	75 23                	jne    c001fcbd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fc9a:	eb 27                	jmp    c001fcc3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fc9c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fca1:	8d 71 01             	lea    esi,[ecx+0x1]
c001fca4:	40                   	inc    eax
c001fca5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fca8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fcab:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fcb2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fcb5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fcb8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fcbb:	74 06                	je     c001fcc3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fcbd:	39 c7                	cmp    edi,eax
c001fcbf:	75 db                	jne    c001fc9c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fcc1:	89 f8                	mov    eax,edi
c001fcc3:	5b                   	pop    ebx
c001fcc4:	5e                   	pop    esi
c001fcc5:	5f                   	pop    edi
c001fcc6:	5d                   	pop    ebp
c001fcc7:	c3                   	ret    
c001fcc8:	5b                   	pop    ebx
c001fcc9:	31 c0                	xor    eax,eax
c001fccb:	5e                   	pop    esi
c001fccc:	5f                   	pop    edi
c001fccd:	5d                   	pop    ebp
c001fcce:	c3                   	ret    
c001fccf:	b8 01 00 00 00       	mov    eax,0x1
c001fcd4:	eb ed                	jmp    c001fcc3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fcd6 <SoundDevice::SoundDevice(char const*)>:
c001fcd6:	83 ec 1c             	sub    esp,0x1c
c001fcd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcdd:	83 ec 08             	sub    esp,0x8
c001fce0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fce4:	50                   	push   eax
c001fce5:	e8 58 3b ff ff       	call   c0013842 <Device::Device(char const*)>
c001fcea:	83 c4 10             	add    esp,0x10
c001fced:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c001fcf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcf6:	89 10                	mov    DWORD PTR [eax],edx
c001fcf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcfc:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fd06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd0a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fd14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd1c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd21:	7f 19                	jg     c001fd3c <SoundDevice::SoundDevice(char const*)+0x66>
c001fd23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd2b:	83 c2 54             	add    edx,0x54
c001fd2e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fd36:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd3a:	eb e0                	jmp    c001fd1c <SoundDevice::SoundDevice(char const*)+0x46>
c001fd3c:	90                   	nop
c001fd3d:	83 c4 1c             	add    esp,0x1c
c001fd40:	c3                   	ret    
c001fd41:	90                   	nop

c001fd42 <SoundDevice::~SoundDevice()>:
c001fd42:	53                   	push   ebx
c001fd43:	83 ec 18             	sub    esp,0x18
c001fd46:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c001fd4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd4f:	89 10                	mov    DWORD PTR [eax],edx
c001fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd59:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd5e:	7f 46                	jg     c001fda6 <SoundDevice::~SoundDevice()+0x64>
c001fd60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd68:	83 c2 54             	add    edx,0x54
c001fd6b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fd6f:	85 c0                	test   eax,eax
c001fd71:	74 2d                	je     c001fda0 <SoundDevice::~SoundDevice()+0x5e>
c001fd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd7b:	83 c2 54             	add    edx,0x54
c001fd7e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fd82:	85 db                	test   ebx,ebx
c001fd84:	74 1a                	je     c001fda0 <SoundDevice::~SoundDevice()+0x5e>
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	53                   	push   ebx
c001fd8a:	e8 21 fc ff ff       	call   c001f9b0 <SoundChannel::~SoundChannel()>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	83 ec 08             	sub    esp,0x8
c001fd95:	6a 2c                	push   0x2c
c001fd97:	53                   	push   ebx
c001fd98:	e8 ca 23 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c001fd9d:	83 c4 10             	add    esp,0x10
c001fda0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fda4:	eb b3                	jmp    c001fd59 <SoundDevice::~SoundDevice()+0x17>
c001fda6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	50                   	push   eax
c001fdae:	e8 41 37 ff ff       	call   c00134f4 <Device::~Device()>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	90                   	nop
c001fdb7:	83 c4 18             	add    esp,0x18
c001fdba:	5b                   	pop    ebx
c001fdbb:	c3                   	ret    

c001fdbc <SoundDevice::~SoundDevice()>:
c001fdbc:	83 ec 0c             	sub    esp,0xc
c001fdbf:	83 ec 0c             	sub    esp,0xc
c001fdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc6:	e8 77 ff ff ff       	call   c001fd42 <SoundDevice::~SoundDevice()>
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	83 ec 08             	sub    esp,0x8
c001fdd1:	68 e4 01 00 00       	push   0x1e4
c001fdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdda:	e8 88 23 ff ff       	call   c0012167 <operator delete(void*, unsigned long)>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	83 c4 0c             	add    esp,0xc
c001fde5:	c3                   	ret    

c001fde6 <SoundDevice::getFreeChannelNum()>:
c001fde6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fdea:	31 c0                	xor    eax,eax
c001fdec:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fdf4:	74 09                	je     c001fdff <SoundDevice::getFreeChannelNum()+0x19>
c001fdf6:	40                   	inc    eax
c001fdf7:	83 f8 20             	cmp    eax,0x20
c001fdfa:	75 f0                	jne    c001fdec <SoundDevice::getFreeChannelNum()+0x6>
c001fdfc:	83 c8 ff             	or     eax,0xffffffff
c001fdff:	c3                   	ret    

c001fe00 <SoundDevice::addChannel(SoundChannel*)>:
c001fe00:	56                   	push   esi
c001fe01:	53                   	push   ebx
c001fe02:	51                   	push   ecx
c001fe03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fe0b:	53                   	push   ebx
c001fe0c:	e8 d5 ff ff ff       	call   c001fde6 <SoundDevice::getFreeChannelNum()>
c001fe11:	5a                   	pop    edx
c001fe12:	83 f8 ff             	cmp    eax,0xffffffff
c001fe15:	74 51                	je     c001fe68 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe17:	85 f6                	test   esi,esi
c001fe19:	74 4d                	je     c001fe68 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe1b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fe22:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001fe29:	75 30                	jne    c001fe5b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001fe2b:	83 ec 0c             	sub    esp,0xc
c001fe2e:	56                   	push   esi
c001fe2f:	e8 42 fd ff ff       	call   c001fb76 <SoundChannel::getSampleRate()>
c001fe34:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fe3a:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe3d:	e8 3c fd ff ff       	call   c001fb7e <SoundChannel::getBits()>
c001fe42:	83 c4 0c             	add    esp,0xc
c001fe45:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001fe4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001fe4d:	50                   	push   eax
c001fe4e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001fe54:	53                   	push   ebx
c001fe55:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001fe58:	83 c4 10             	add    esp,0x10
c001fe5b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001fe61:	b8 01 00 00 00       	mov    eax,0x1
c001fe66:	eb 03                	jmp    c001fe6b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001fe68:	83 c8 ff             	or     eax,0xffffffff
c001fe6b:	5a                   	pop    edx
c001fe6c:	5b                   	pop    ebx
c001fe6d:	5e                   	pop    esi
c001fe6e:	c3                   	ret    
c001fe6f:	90                   	nop

c001fe70 <SoundDevice::removeChannel(int)>:
c001fe70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe78:	83 fa 1f             	cmp    edx,0x1f
c001fe7b:	77 23                	ja     c001fea0 <SoundDevice::removeChannel(int)+0x30>
c001fe7d:	8d 14 90             	lea    edx,[eax+edx*4]
c001fe80:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001fe87:	74 17                	je     c001fea0 <SoundDevice::removeChannel(int)+0x30>
c001fe89:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001fe93:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001fe99:	75 05                	jne    c001fea0 <SoundDevice::removeChannel(int)+0x30>
c001fe9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe9d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001fea0:	c3                   	ret    
c001fea1:	90                   	nop

c001fea2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001fea2:	57                   	push   edi
c001fea3:	56                   	push   esi
c001fea4:	53                   	push   ebx
c001fea5:	31 db                	xor    ebx,ebx
c001fea7:	83 ec 10             	sub    esp,0x10
c001feaa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001feae:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001feb2:	0f 8d cb 00 00 00    	jge    c001ff83 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001febf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001fec2:	e8 90 50 00 00       	call   c0024f57 <__extendsfdf2>
c001fec7:	83 c4 10             	add    esp,0x10
c001feca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fece:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fed2:	68 00 00 f0 3f       	push   0x3ff00000
c001fed7:	6a 00                	push   0x0
c001fed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fedd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fee1:	e8 fd 3f 00 00       	call   c0023ee3 <__adddf3>
c001fee6:	83 c4 10             	add    esp,0x10
c001fee9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001feed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fef1:	68 00 00 e0 3f       	push   0x3fe00000
c001fef6:	6a 00                	push   0x0
c001fef8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fefc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff00:	e8 5b 46 00 00       	call   c0024560 <__muldf3>
c001ff05:	83 c4 10             	add    esp,0x10
c001ff08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff10:	68 00 00 60 40       	push   0x40600000
c001ff15:	6a 00                	push   0x0
c001ff17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff1f:	e8 3c 46 00 00       	call   c0024560 <__muldf3>
c001ff24:	59                   	pop    ecx
c001ff25:	5f                   	pop    edi
c001ff26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ff2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff36:	e8 f8 4e 00 00       	call   c0024e33 <__truncdfsf2>
c001ff3b:	5a                   	pop    edx
c001ff3c:	89 c7                	mov    edi,eax
c001ff3e:	59                   	pop    ecx
c001ff3f:	68 00 00 fe 42       	push   0x42fe0000
c001ff44:	50                   	push   eax
c001ff45:	e8 93 3f 00 00       	call   c0023edd <__gesf2>
c001ff4a:	83 c4 10             	add    esp,0x10
c001ff4d:	85 c0                	test   eax,eax
c001ff4f:	78 06                	js     c001ff57 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001ff51:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ff55:	eb 26                	jmp    c001ff7d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff57:	50                   	push   eax
c001ff58:	50                   	push   eax
c001ff59:	6a 00                	push   0x0
c001ff5b:	57                   	push   edi
c001ff5c:	e8 80 3f 00 00       	call   c0023ee1 <__lesf2>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	85 c0                	test   eax,eax
c001ff66:	7f 06                	jg     c001ff6e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001ff68:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ff6c:	eb 0f                	jmp    c001ff7d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff6e:	83 ec 0c             	sub    esp,0xc
c001ff71:	57                   	push   edi
c001ff72:	e8 75 50 00 00       	call   c0024fec <lrintf>
c001ff77:	83 c4 10             	add    esp,0x10
c001ff7a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ff7d:	43                   	inc    ebx
c001ff7e:	e9 2b ff ff ff       	jmp    c001feae <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001ff83:	83 c4 10             	add    esp,0x10
c001ff86:	5b                   	pop    ebx
c001ff87:	5e                   	pop    esi
c001ff88:	5f                   	pop    edi
c001ff89:	c3                   	ret    

c001ff8a <SoundDevice::getAudio(int, float*, float*)>:
c001ff8a:	55                   	push   ebp
c001ff8b:	57                   	push   edi
c001ff8c:	56                   	push   esi
c001ff8d:	53                   	push   ebx
c001ff8e:	31 db                	xor    ebx,ebx
c001ff90:	83 ec 20             	sub    esp,0x20
c001ff93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ff9b:	c1 e0 02             	shl    eax,0x2
c001ff9e:	50                   	push   eax
c001ff9f:	6a 00                	push   0x0
c001ffa1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffa5:	e8 1b 07 fe ff       	call   c00006c5 <memset>
c001ffaa:	83 c4 10             	add    esp,0x10
c001ffad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ffb1:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ffb8:	85 c0                	test   eax,eax
c001ffba:	0f 84 d7 00 00 00    	je     c0020097 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffc0:	83 ec 0c             	sub    esp,0xc
c001ffc3:	50                   	push   eax
c001ffc4:	e8 a5 fb ff ff       	call   c001fb6e <SoundChannel::paused()>
c001ffc9:	83 c4 10             	add    esp,0x10
c001ffcc:	84 c0                	test   al,al
c001ffce:	0f 85 c3 00 00 00    	jne    c0020097 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffd4:	83 ec 0c             	sub    esp,0xc
c001ffd7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ffde:	e8 19 fa ff ff       	call   c001f9fc <SoundChannel::getVolume()>
c001ffe3:	83 c4 10             	add    esp,0x10
c001ffe6:	85 c0                	test   eax,eax
c001ffe8:	0f 84 a9 00 00 00    	je     c0020097 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffee:	83 ec 0c             	sub    esp,0xc
c001fff1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001fff8:	e8 ff f9 ff ff       	call   c001f9fc <SoundChannel::getVolume()>
c001fffd:	83 ec 0c             	sub    esp,0xc
c0020000:	50                   	push   eax
c0020001:	e8 81 3c 00 00       	call   c0023c87 <__floatsisf>
c0020006:	59                   	pop    ecx
c0020007:	5d                   	pop    ebp
c0020008:	31 ed                	xor    ebp,ebp
c002000a:	68 00 00 c8 42       	push   0x42c80000
c002000f:	50                   	push   eax
c0020010:	e8 47 3a 00 00       	call   c0023a5c <__divsf3>
c0020015:	83 c4 10             	add    esp,0x10
c0020018:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002001c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0020020:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020026:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002002a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020031:	e8 60 fb ff ff       	call   c001fb96 <SoundChannel::unbuffer(float*, int, int)>
c0020036:	83 c4 20             	add    esp,0x20
c0020039:	89 c1                	mov    ecx,eax
c002003b:	39 cd                	cmp    ebp,ecx
c002003d:	7d 52                	jge    c0020091 <SoundDevice::getAudio(int, float*, float*)+0x107>
c002003f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020043:	50                   	push   eax
c0020044:	50                   	push   eax
c0020045:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020049:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002004c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020050:	e8 44 38 00 00       	call   c0023899 <__mulsf3>
c0020055:	5a                   	pop    edx
c0020056:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002005a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020060:	e8 22 3c 00 00       	call   c0023c87 <__floatsisf>
c0020065:	59                   	pop    ecx
c0020066:	5a                   	pop    edx
c0020067:	50                   	push   eax
c0020068:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002006c:	e8 eb 39 00 00       	call   c0023a5c <__divsf3>
c0020071:	59                   	pop    ecx
c0020072:	5a                   	pop    edx
c0020073:	50                   	push   eax
c0020074:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020078:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002007b:	e8 f6 34 00 00       	call   c0023576 <__addsf3>
c0020080:	83 c4 10             	add    esp,0x10
c0020083:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020087:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002008b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002008e:	45                   	inc    ebp
c002008f:	eb aa                	jmp    c002003b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0020091:	39 cf                	cmp    edi,ecx
c0020093:	7e 02                	jle    c0020097 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020095:	89 cf                	mov    edi,ecx
c0020097:	43                   	inc    ebx
c0020098:	83 fb 20             	cmp    ebx,0x20
c002009b:	0f 85 10 ff ff ff    	jne    c001ffb1 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00200a1:	83 c4 1c             	add    esp,0x1c
c00200a4:	89 f8                	mov    eax,edi
c00200a6:	5b                   	pop    ebx
c00200a7:	5e                   	pop    esi
c00200a8:	5f                   	pop    edi
c00200a9:	5d                   	pop    ebp
c00200aa:	c3                   	ret    
c00200ab:	90                   	nop

c00200ac <PCI::open(int, int, void*)>:
c00200ac:	83 ec 18             	sub    esp,0x18
c00200af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00200b5:	50                   	push   eax
c00200b6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00200b9:	31 c0                	xor    eax,eax
c00200bb:	83 c4 1c             	add    esp,0x1c
c00200be:	c3                   	ret    
c00200bf:	90                   	nop

c00200c0 <PCI::close(int, int, void*)>:
c00200c0:	31 c0                	xor    eax,eax
c00200c2:	c3                   	ret    
c00200c3:	90                   	nop

c00200c4 <PCI::PCI()>:
c00200c4:	83 ec 0c             	sub    esp,0xc
c00200c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200cb:	83 ec 08             	sub    esp,0x8
c00200ce:	68 80 8c 02 c0       	push   0xc0028c80
c00200d3:	50                   	push   eax
c00200d4:	e8 f5 2d ff ff       	call   c0012ece <Bus::Bus(char const*)>
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c00200e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e5:	89 10                	mov    DWORD PTR [eax],edx
c00200e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200f1:	0f b6 d0             	movzx  edx,al
c00200f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00200ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020103:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020109:	0f b6 d0             	movzx  edx,al
c002010c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020110:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020119:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002011f:	8d 50 01             	lea    edx,[eax+0x1]
c0020122:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020126:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002012c:	0f b6 d0             	movzx  edx,al
c002012f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020133:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020137:	83 c9 c0             	or     ecx,0xffffffc0
c002013a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002013e:	90                   	nop
c002013f:	83 c4 0c             	add    esp,0xc
c0020142:	c3                   	ret    
c0020143:	90                   	nop

c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020144:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020148:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002014d:	89 ca                	mov    edx,ecx
c002014f:	c1 e0 10             	shl    eax,0x10
c0020152:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020158:	09 d0                	or     eax,edx
c002015a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002015f:	c1 e2 08             	shl    edx,0x8
c0020162:	09 d0                	or     eax,edx
c0020164:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020169:	c1 e2 0b             	shl    edx,0xb
c002016c:	09 d0                	or     eax,edx
c002016e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020173:	0d 00 00 00 80       	or     eax,0x80000000
c0020178:	ef                   	out    dx,eax
c0020179:	ba fc 0c 00 00       	mov    edx,0xcfc
c002017e:	ed                   	in     eax,dx
c002017f:	83 e1 02             	and    ecx,0x2
c0020182:	0f b6 c9             	movzx  ecx,cl
c0020185:	c1 e1 03             	shl    ecx,0x3
c0020188:	d3 e8                	shr    eax,cl
c002018a:	c3                   	ret    
c002018b:	90                   	nop

c002018c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002018c:	6a 00                	push   0x0
c002018e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020193:	50                   	push   eax
c0020194:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020199:	50                   	push   eax
c002019a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002019f:	50                   	push   eax
c00201a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201a4:	e8 9b ff ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201a9:	83 c4 14             	add    esp,0x14
c00201ac:	c3                   	ret    
c00201ad:	90                   	nop

c00201ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00201ae:	6a 0e                	push   0xe
c00201b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201b5:	50                   	push   eax
c00201b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201bb:	50                   	push   eax
c00201bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201c1:	50                   	push   eax
c00201c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201c6:	e8 79 ff ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201cb:	83 c4 14             	add    esp,0x14
c00201ce:	0f b6 c0             	movzx  eax,al
c00201d1:	c3                   	ret    

c00201d2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00201d2:	55                   	push   ebp
c00201d3:	57                   	push   edi
c00201d4:	56                   	push   esi
c00201d5:	53                   	push   ebx
c00201d6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00201db:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00201e0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00201e5:	6a 0a                	push   0xa
c00201e7:	56                   	push   esi
c00201e8:	55                   	push   ebp
c00201e9:	57                   	push   edi
c00201ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00201ee:	e8 51 ff ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201f3:	6a 0a                	push   0xa
c00201f5:	89 c3                	mov    ebx,eax
c00201f7:	56                   	push   esi
c00201f8:	0f b6 db             	movzx  ebx,bl
c00201fb:	55                   	push   ebp
c00201fc:	57                   	push   edi
c00201fd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020201:	e8 3e ff ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020206:	83 c4 28             	add    esp,0x28
c0020209:	25 00 ff 00 00       	and    eax,0xff00
c002020e:	09 d8                	or     eax,ebx
c0020210:	5b                   	pop    ebx
c0020211:	5e                   	pop    esi
c0020212:	5f                   	pop    edi
c0020213:	5d                   	pop    ebp
c0020214:	c3                   	ret    
c0020215:	90                   	nop

c0020216 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020216:	6a 08                	push   0x8
c0020218:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002021d:	50                   	push   eax
c002021e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020223:	50                   	push   eax
c0020224:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020229:	50                   	push   eax
c002022a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002022e:	e8 11 ff ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020233:	83 c4 14             	add    esp,0x14
c0020236:	0f b6 c4             	movzx  eax,ah
c0020239:	c3                   	ret    

c002023a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002023a:	6a 08                	push   0x8
c002023c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020241:	50                   	push   eax
c0020242:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020247:	50                   	push   eax
c0020248:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002024d:	50                   	push   eax
c002024e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020252:	e8 ed fe ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020257:	83 c4 14             	add    esp,0x14
c002025a:	c3                   	ret    
c002025b:	90                   	nop

c002025c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002025c:	6a 3c                	push   0x3c
c002025e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020263:	50                   	push   eax
c0020264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020269:	50                   	push   eax
c002026a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002026f:	50                   	push   eax
c0020270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020274:	e8 cb fe ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020279:	83 c4 14             	add    esp,0x14
c002027c:	c3                   	ret    
c002027d:	90                   	nop

c002027e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002027e:	6a 18                	push   0x18
c0020280:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020285:	50                   	push   eax
c0020286:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002028b:	50                   	push   eax
c002028c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020291:	50                   	push   eax
c0020292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020296:	e8 a9 fe ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002029b:	83 c4 14             	add    esp,0x14
c002029e:	0f b6 c4             	movzx  eax,ah
c00202a1:	c3                   	ret    

c00202a2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00202a2:	55                   	push   ebp
c00202a3:	57                   	push   edi
c00202a4:	56                   	push   esi
c00202a5:	53                   	push   ebx
c00202a6:	50                   	push   eax
c00202a7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00202ab:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00202b0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00202b5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00202ba:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00202c1:	8d 43 12             	lea    eax,[ebx+0x12]
c00202c4:	83 c3 10             	add    ebx,0x10
c00202c7:	0f b6 c0             	movzx  eax,al
c00202ca:	0f b6 db             	movzx  ebx,bl
c00202cd:	50                   	push   eax
c00202ce:	51                   	push   ecx
c00202cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202d3:	57                   	push   edi
c00202d4:	55                   	push   ebp
c00202d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202d9:	e8 66 fe ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202de:	53                   	push   ebx
c00202df:	89 c6                	mov    esi,eax
c00202e1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00202e5:	c1 e6 10             	shl    esi,0x10
c00202e8:	51                   	push   ecx
c00202e9:	57                   	push   edi
c00202ea:	55                   	push   ebp
c00202eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202ef:	e8 50 fe ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202f4:	83 c4 2c             	add    esp,0x2c
c00202f7:	0f b7 c0             	movzx  eax,ax
c00202fa:	5b                   	pop    ebx
c00202fb:	09 f0                	or     eax,esi
c00202fd:	5e                   	pop    esi
c00202fe:	5f                   	pop    edi
c00202ff:	5d                   	pop    ebp
c0020300:	c3                   	ret    
c0020301:	90                   	nop

c0020302 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0020302:	53                   	push   ebx
c0020303:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020308:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002030d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020311:	c1 e1 10             	shl    ecx,0x10
c0020314:	25 fc 00 00 00       	and    eax,0xfc
c0020319:	09 c1                	or     ecx,eax
c002031b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020320:	c1 e0 08             	shl    eax,0x8
c0020323:	09 c1                	or     ecx,eax
c0020325:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002032a:	c1 e0 0b             	shl    eax,0xb
c002032d:	09 c1                	or     ecx,eax
c002032f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020335:	89 c8                	mov    eax,ecx
c0020337:	ef                   	out    dx,eax
c0020338:	ba fc 0c 00 00       	mov    edx,0xcfc
c002033d:	ed                   	in     eax,dx
c002033e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020343:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020348:	74 0a                	je     c0020354 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002034a:	0f b7 d8             	movzx  ebx,ax
c002034d:	89 d0                	mov    eax,edx
c002034f:	c1 e0 10             	shl    eax,0x10
c0020352:	eb 05                	jmp    c0020359 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020354:	66 31 c0             	xor    ax,ax
c0020357:	89 d3                	mov    ebx,edx
c0020359:	09 c3                	or     ebx,eax
c002035b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020360:	89 c8                	mov    eax,ecx
c0020362:	ef                   	out    dx,eax
c0020363:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020368:	89 d8                	mov    eax,ebx
c002036a:	ef                   	out    dx,eax
c002036b:	5b                   	pop    ebx
c002036c:	c3                   	ret    
c002036d:	90                   	nop

c002036e <PCI::checkBus(unsigned char)>:
c002036e:	56                   	push   esi
c002036f:	53                   	push   ebx
c0020370:	31 db                	xor    ebx,ebx
c0020372:	51                   	push   ecx
c0020373:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020378:	52                   	push   edx
c0020379:	53                   	push   ebx
c002037a:	43                   	inc    ebx
c002037b:	56                   	push   esi
c002037c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020380:	e8 29 03 00 00       	call   c00206ae <PCI::checkDevice(unsigned char, unsigned char)>
c0020385:	83 c4 10             	add    esp,0x10
c0020388:	83 fb 20             	cmp    ebx,0x20
c002038b:	75 eb                	jne    c0020378 <PCI::checkBus(unsigned char)+0xa>
c002038d:	58                   	pop    eax
c002038e:	5b                   	pop    ebx
c002038f:	5e                   	pop    esi
c0020390:	c3                   	ret    
c0020391:	90                   	nop

c0020392 <PCI::foundDevice(PCIDeviceInfo)>:
c0020392:	55                   	push   ebp
c0020393:	57                   	push   edi
c0020394:	56                   	push   esi
c0020395:	53                   	push   ebx
c0020396:	83 ec 1c             	sub    esp,0x1c
c0020399:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002039d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00203a3:	0f 84 51 01 00 00    	je     c00204fa <PCI::foundDevice(PCIDeviceInfo)+0x168>
c00203a9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00203ad:	66 81 f9 06 04       	cmp    cx,0x406
c00203b2:	75 2c                	jne    c00203e0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00203b4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00203b9:	50                   	push   eax
c00203ba:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00203bf:	50                   	push   eax
c00203c0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00203c5:	50                   	push   eax
c00203c6:	56                   	push   esi
c00203c7:	e8 b2 fe ff ff       	call   c002027e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00203cc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00203d0:	0f b6 c0             	movzx  eax,al
c00203d3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00203d7:	83 c4 2c             	add    esp,0x2c
c00203da:	5b                   	pop    ebx
c00203db:	5e                   	pop    esi
c00203dc:	5f                   	pop    edi
c00203dd:	5d                   	pop    ebp
c00203de:	eb 8e                	jmp    c002036e <PCI::checkBus(unsigned char)>
c00203e0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00203e4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00203ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203ee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00203f2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00203f6:	88 d3                	mov    bl,dl
c00203f8:	85 c0                	test   eax,eax
c00203fa:	74 33                	je     c002042f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00203fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00203ff:	85 d2                	test   edx,edx
c0020401:	74 28                	je     c002042b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020403:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020409:	31 ef                	xor    edi,ebp
c002040b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020411:	75 18                	jne    c002042b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020413:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020417:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002041d:	75 0c                	jne    c002042b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002041f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020425:	0f 84 cf 00 00 00    	je     c00204fa <PCI::foundDevice(PCIDeviceInfo)+0x168>
c002042b:	8b 00                	mov    eax,DWORD PTR [eax]
c002042d:	eb c9                	jmp    c00203f8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002042f:	66 81 f9 01 06       	cmp    cx,0x601
c0020434:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020438:	75 18                	jne    c0020452 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c002043a:	83 ec 0c             	sub    esp,0xc
c002043d:	68 58 01 00 00       	push   0x158
c0020442:	e8 11 1d ff ff       	call   c0012158 <operator new(unsigned long)>
c0020447:	59                   	pop    ecx
c0020448:	89 c5                	mov    ebp,eax
c002044a:	5f                   	pop    edi
c002044b:	68 88 8c 02 c0       	push   0xc0028c88
c0020450:	eb 7d                	jmp    c00204cf <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020452:	66 81 f9 01 01       	cmp    cx,0x101
c0020457:	75 60                	jne    c00204b9 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020459:	83 ec 0c             	sub    esp,0xc
c002045c:	68 70 02 00 00       	push   0x270
c0020461:	e8 f2 1c ff ff       	call   c0012158 <operator new(unsigned long)>
c0020466:	89 04 24             	mov    DWORD PTR [esp],eax
c0020469:	89 c5                	mov    ebp,eax
c002046b:	e8 02 03 00 00       	call   c0020772 <IDE::IDE()>
c0020470:	58                   	pop    eax
c0020471:	5a                   	pop    edx
c0020472:	55                   	push   ebp
c0020473:	56                   	push   esi
c0020474:	e8 d9 31 ff ff       	call   c0013652 <Device::addChild(Device*)>
c0020479:	83 ec 1c             	sub    esp,0x1c
c002047c:	b9 09 00 00 00       	mov    ecx,0x9
c0020481:	fc                   	cld    
c0020482:	89 e7                	mov    edi,esp
c0020484:	89 de                	mov    esi,ebx
c0020486:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020488:	55                   	push   ebp
c0020489:	e8 9e 30 ff ff       	call   c001352c <Device::preOpenPCI(PCIDeviceInfo)>
c002048e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020491:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020495:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002049d:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00204a5:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00204ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204b0:	83 c4 4c             	add    esp,0x4c
c00204b3:	5b                   	pop    ebx
c00204b4:	5e                   	pop    esi
c00204b5:	5f                   	pop    edi
c00204b6:	5d                   	pop    ebp
c00204b7:	ff e0                	jmp    eax
c00204b9:	83 ec 0c             	sub    esp,0xc
c00204bc:	68 58 01 00 00       	push   0x158
c00204c1:	e8 92 1c ff ff       	call   c0012158 <operator new(unsigned long)>
c00204c6:	59                   	pop    ecx
c00204c7:	89 c5                	mov    ebp,eax
c00204c9:	5f                   	pop    edi
c00204ca:	68 a7 8c 02 c0       	push   0xc0028ca7
c00204cf:	55                   	push   ebp
c00204d0:	e8 69 34 ff ff       	call   c001393e <DriverlessDevice::DriverlessDevice(char const*)>
c00204d5:	58                   	pop    eax
c00204d6:	5a                   	pop    edx
c00204d7:	55                   	push   ebp
c00204d8:	56                   	push   esi
c00204d9:	e8 74 31 ff ff       	call   c0013652 <Device::addChild(Device*)>
c00204de:	b9 09 00 00 00       	mov    ecx,0x9
c00204e3:	fc                   	cld    
c00204e4:	89 df                	mov    edi,ebx
c00204e6:	89 de                	mov    esi,ebx
c00204e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204ea:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00204ee:	83 c4 2c             	add    esp,0x2c
c00204f1:	5b                   	pop    ebx
c00204f2:	5e                   	pop    esi
c00204f3:	5f                   	pop    edi
c00204f4:	5d                   	pop    ebp
c00204f5:	e9 32 30 ff ff       	jmp    c001352c <Device::preOpenPCI(PCIDeviceInfo)>
c00204fa:	83 c4 1c             	add    esp,0x1c
c00204fd:	5b                   	pop    ebx
c00204fe:	5e                   	pop    esi
c00204ff:	5f                   	pop    edi
c0020500:	5d                   	pop    ebp
c0020501:	c3                   	ret    

c0020502 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020502:	55                   	push   ebp
c0020503:	57                   	push   edi
c0020504:	56                   	push   esi
c0020505:	53                   	push   ebx
c0020506:	83 ec 5c             	sub    esp,0x5c
c0020509:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002050d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020511:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020515:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002051a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002051e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020522:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020527:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002052b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020530:	6a 0c                	push   0xc
c0020532:	55                   	push   ebp
c0020533:	53                   	push   ebx
c0020534:	57                   	push   edi
c0020535:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002053c:	e8 03 fc ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020541:	55                   	push   ebp
c0020542:	53                   	push   ebx
c0020543:	57                   	push   edi
c0020544:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002054b:	e8 82 fc ff ff       	call   c00201d2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020550:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020555:	83 c4 24             	add    esp,0x24
c0020558:	55                   	push   ebp
c0020559:	53                   	push   ebx
c002055a:	57                   	push   edi
c002055b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002055f:	e8 f8 fc ff ff       	call   c002025c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020564:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020568:	6a 3c                	push   0x3c
c002056a:	55                   	push   ebp
c002056b:	53                   	push   ebx
c002056c:	57                   	push   edi
c002056d:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020574:	e8 cb fb ff ff       	call   c0020144 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020579:	0f b6 c4             	movzx  eax,ah
c002057c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020580:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020584:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020588:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002058d:	83 c4 24             	add    esp,0x24
c0020590:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020596:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c002059d:	74 6c                	je     c002060b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002059f:	31 f6                	xor    esi,esi
c00205a1:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205a7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205ad:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00205b3:	7e 56                	jle    c002060b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205b5:	8d 14 f2             	lea    edx,[edx+esi*8]
c00205b8:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00205bf:	39 cb                	cmp    ebx,ecx
c00205c1:	75 45                	jne    c0020608 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205c3:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00205ca:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00205ce:	75 38                	jne    c0020608 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205d0:	83 ec 0c             	sub    esp,0xc
c00205d3:	68 c1 8c 02 c0       	push   0xc0028cc1
c00205d8:	e8 6a 1c ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00205dd:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205e3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205e9:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00205f1:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00205f5:	52                   	push   edx
c00205f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00205fa:	53                   	push   ebx
c00205fb:	68 e6 8c 02 c0       	push   0xc0028ce6
c0020600:	e8 42 1c ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0020605:	83 c4 20             	add    esp,0x20
c0020608:	46                   	inc    esi
c0020609:	eb 96                	jmp    c00205a1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002060b:	31 d2                	xor    edx,edx
c002060d:	83 ec 0c             	sub    esp,0xc
c0020610:	55                   	push   ebp
c0020611:	53                   	push   ebx
c0020612:	57                   	push   edi
c0020613:	52                   	push   edx
c0020614:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020618:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002061f:	e8 7e fc ff ff       	call   c00202a2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020624:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020628:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002062c:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020630:	42                   	inc    edx
c0020631:	83 c4 20             	add    esp,0x20
c0020634:	83 fa 06             	cmp    edx,0x6
c0020637:	75 d4                	jne    c002060d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020639:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002063d:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020641:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020645:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020649:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002064d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020651:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020656:	86 e0                	xchg   al,ah
c0020658:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002065d:	55                   	push   ebp
c002065e:	53                   	push   ebx
c002065f:	57                   	push   edi
c0020660:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020664:	e8 ad fb ff ff       	call   c0020216 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020669:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002066d:	55                   	push   ebp
c002066e:	53                   	push   ebx
c002066f:	57                   	push   edi
c0020670:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020677:	e8 10 fb ff ff       	call   c002018c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002067c:	83 ec 0c             	sub    esp,0xc
c002067f:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020684:	b9 09 00 00 00       	mov    ecx,0x9
c0020689:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002068d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020691:	fc                   	cld    
c0020692:	89 e7                	mov    edi,esp
c0020694:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020696:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002069d:	e8 f0 fc ff ff       	call   c0020392 <PCI::foundDevice(PCIDeviceInfo)>
c00206a2:	81 c4 8c 00 00 00    	add    esp,0x8c
c00206a8:	5b                   	pop    ebx
c00206a9:	5e                   	pop    esi
c00206aa:	5f                   	pop    edi
c00206ab:	5d                   	pop    ebp
c00206ac:	c3                   	ret    
c00206ad:	90                   	nop

c00206ae <PCI::checkDevice(unsigned char, unsigned char)>:
c00206ae:	55                   	push   ebp
c00206af:	57                   	push   edi
c00206b0:	56                   	push   esi
c00206b1:	53                   	push   ebx
c00206b2:	83 ec 0c             	sub    esp,0xc
c00206b5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00206b9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00206be:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00206c3:	6a 00                	push   0x0
c00206c5:	56                   	push   esi
c00206c6:	57                   	push   edi
c00206c7:	55                   	push   ebp
c00206c8:	e8 bf fa ff ff       	call   c002018c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206cd:	6a 00                	push   0x0
c00206cf:	56                   	push   esi
c00206d0:	57                   	push   edi
c00206d1:	55                   	push   ebp
c00206d2:	e8 2b fe ff ff       	call   c0020502 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206d7:	83 c4 20             	add    esp,0x20
c00206da:	6a 00                	push   0x0
c00206dc:	56                   	push   esi
c00206dd:	57                   	push   edi
c00206de:	55                   	push   ebp
c00206df:	e8 ca fa ff ff       	call   c00201ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00206e4:	83 c4 10             	add    esp,0x10
c00206e7:	84 c0                	test   al,al
c00206e9:	79 27                	jns    c0020712 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00206eb:	bb 01 00 00 00       	mov    ebx,0x1
c00206f0:	53                   	push   ebx
c00206f1:	56                   	push   esi
c00206f2:	57                   	push   edi
c00206f3:	55                   	push   ebp
c00206f4:	e8 93 fa ff ff       	call   c002018c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206f9:	83 c4 10             	add    esp,0x10
c00206fc:	66 40                	inc    ax
c00206fe:	74 0c                	je     c002070c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0020700:	53                   	push   ebx
c0020701:	56                   	push   esi
c0020702:	57                   	push   edi
c0020703:	55                   	push   ebp
c0020704:	e8 f9 fd ff ff       	call   c0020502 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020709:	83 c4 10             	add    esp,0x10
c002070c:	43                   	inc    ebx
c002070d:	83 fb 08             	cmp    ebx,0x8
c0020710:	75 de                	jne    c00206f0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020712:	83 c4 0c             	add    esp,0xc
c0020715:	5b                   	pop    ebx
c0020716:	5e                   	pop    esi
c0020717:	5f                   	pop    edi
c0020718:	5d                   	pop    ebp
c0020719:	c3                   	ret    

c002071a <PCI::detect()>:
c002071a:	56                   	push   esi
c002071b:	53                   	push   ebx
c002071c:	53                   	push   ebx
c002071d:	31 db                	xor    ebx,ebx
c002071f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020723:	6a 00                	push   0x0
c0020725:	6a 00                	push   0x0
c0020727:	6a 00                	push   0x0
c0020729:	56                   	push   esi
c002072a:	e8 7f fa ff ff       	call   c00201ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002072f:	83 c4 10             	add    esp,0x10
c0020732:	a8 80                	test   al,0x80
c0020734:	75 21                	jne    c0020757 <PCI::detect()+0x3d>
c0020736:	51                   	push   ecx
c0020737:	51                   	push   ecx
c0020738:	6a 00                	push   0x0
c002073a:	56                   	push   esi
c002073b:	e8 2e fc ff ff       	call   c002036e <PCI::checkBus(unsigned char)>
c0020740:	83 c4 10             	add    esp,0x10
c0020743:	eb 24                	jmp    c0020769 <PCI::detect()+0x4f>
c0020745:	52                   	push   edx
c0020746:	52                   	push   edx
c0020747:	53                   	push   ebx
c0020748:	43                   	inc    ebx
c0020749:	56                   	push   esi
c002074a:	e8 1f fc ff ff       	call   c002036e <PCI::checkBus(unsigned char)>
c002074f:	83 c4 10             	add    esp,0x10
c0020752:	83 fb 08             	cmp    ebx,0x8
c0020755:	74 12                	je     c0020769 <PCI::detect()+0x4f>
c0020757:	53                   	push   ebx
c0020758:	6a 00                	push   0x0
c002075a:	6a 00                	push   0x0
c002075c:	56                   	push   esi
c002075d:	e8 2a fa ff ff       	call   c002018c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020762:	83 c4 10             	add    esp,0x10
c0020765:	66 40                	inc    ax
c0020767:	74 dc                	je     c0020745 <PCI::detect()+0x2b>
c0020769:	58                   	pop    eax
c002076a:	5b                   	pop    ebx
c002076b:	5e                   	pop    esi
c002076c:	c3                   	ret    
c002076d:	90                   	nop

c002076e <IDE::close(int, int, void*)>:
c002076e:	83 c8 ff             	or     eax,0xffffffff
c0020771:	c3                   	ret    

c0020772 <IDE::IDE()>:
c0020772:	83 ec 0c             	sub    esp,0xc
c0020775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020779:	83 ec 08             	sub    esp,0x8
c002077c:	68 30 8d 02 c0       	push   0xc0028d30
c0020781:	50                   	push   eax
c0020782:	e8 4d 32 ff ff       	call   c00139d4 <HardDiskController::HardDiskController(char const*)>
c0020787:	83 c4 10             	add    esp,0x10
c002078a:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c002078f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020793:	89 10                	mov    DWORD PTR [eax],edx
c0020795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020799:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00207a0:	90                   	nop
c00207a1:	83 c4 0c             	add    esp,0xc
c00207a4:	c3                   	ret    
c00207a5:	90                   	nop

c00207a6 <IDE::prepareInterrupt(unsigned char)>:
c00207a6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00207af:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00207b7:	c3                   	ret    

c00207b8 <selectDrive(unsigned char, unsigned char)>:
c00207b8:	c3                   	ret    
c00207b9:	90                   	nop

c00207ba <IDE::getBase(unsigned char)>:
c00207ba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00207bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207c3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00207cb:	c3                   	ret    

c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00207cc:	55                   	push   ebp
c00207cd:	57                   	push   edi
c00207ce:	56                   	push   esi
c00207cf:	53                   	push   ebx
c00207d0:	83 ec 1c             	sub    esp,0x1c
c00207d3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00207d7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00207db:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00207de:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00207e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207e6:	80 f9 03             	cmp    cl,0x3
c00207e9:	77 51                	ja     c002083c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00207eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207ef:	0f b6 f2             	movzx  esi,dl
c00207f2:	0f b6 db             	movzx  ebx,bl
c00207f5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00207f8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00207fc:	83 ca 80             	or     edx,0xffffff80
c00207ff:	0f b6 d2             	movzx  edx,dl
c0020802:	52                   	push   edx
c0020803:	6a 0c                	push   0xc
c0020805:	56                   	push   esi
c0020806:	57                   	push   edi
c0020807:	e8 c0 ff ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002080c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020811:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020815:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0020819:	ee                   	out    dx,al
c002081a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002081f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020823:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020827:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002082b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020833:	83 c4 2c             	add    esp,0x2c
c0020836:	5b                   	pop    ebx
c0020837:	5e                   	pop    esi
c0020838:	5f                   	pop    edi
c0020839:	5d                   	pop    ebp
c002083a:	eb 90                	jmp    c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002083c:	80 fb 07             	cmp    bl,0x7
c002083f:	77 12                	ja     c0020853 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020841:	0f b6 d2             	movzx  edx,dl
c0020844:	0f b6 db             	movzx  ebx,bl
c0020847:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002084f:	89 da                	mov    edx,ebx
c0020851:	eb 2f                	jmp    c0020882 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020853:	80 fb 0d             	cmp    bl,0xd
c0020856:	77 13                	ja     c002086b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020858:	0f b6 d2             	movzx  edx,dl
c002085b:	0f b6 db             	movzx  ebx,bl
c002085e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020865:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020869:	eb 17                	jmp    c0020882 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002086b:	80 fb 15             	cmp    bl,0x15
c002086e:	77 13                	ja     c0020883 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020870:	0f b6 d2             	movzx  edx,dl
c0020873:	0f b6 db             	movzx  ebx,bl
c0020876:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002087e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0020882:	ee                   	out    dx,al
c0020883:	83 c4 1c             	add    esp,0x1c
c0020886:	5b                   	pop    ebx
c0020887:	5e                   	pop    esi
c0020888:	5f                   	pop    edi
c0020889:	5d                   	pop    ebp
c002088a:	c3                   	ret    
c002088b:	90                   	nop

c002088c <IDE::read(unsigned char, unsigned char)>:
c002088c:	55                   	push   ebp
c002088d:	57                   	push   edi
c002088e:	56                   	push   esi
c002088f:	53                   	push   ebx
c0020890:	83 ec 1c             	sub    esp,0x1c
c0020893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020897:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002089b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002089e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00208a2:	3c 03                	cmp    al,0x3
c00208a4:	77 43                	ja     c00208e9 <IDE::read(unsigned char, unsigned char)+0x5d>
c00208a6:	0f b6 f2             	movzx  esi,dl
c00208a9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00208ac:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00208b0:	83 c8 80             	or     eax,0xffffff80
c00208b3:	0f b6 c0             	movzx  eax,al
c00208b6:	50                   	push   eax
c00208b7:	6a 0c                	push   0xc
c00208b9:	56                   	push   esi
c00208ba:	57                   	push   edi
c00208bb:	e8 0c ff ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208c0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00208c5:	0f b6 c3             	movzx  eax,bl
c00208c8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00208cc:	ec                   	in     al,dx
c00208cd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00208d1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00208d6:	52                   	push   edx
c00208d7:	6a 0c                	push   0xc
c00208d9:	56                   	push   esi
c00208da:	57                   	push   edi
c00208db:	e8 ec fe ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208e0:	83 c4 20             	add    esp,0x20
c00208e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00208e7:	eb 49                	jmp    c0020932 <IDE::read(unsigned char, unsigned char)+0xa6>
c00208e9:	80 fb 07             	cmp    bl,0x7
c00208ec:	77 12                	ja     c0020900 <IDE::read(unsigned char, unsigned char)+0x74>
c00208ee:	0f b6 d2             	movzx  edx,dl
c00208f1:	0f b6 c3             	movzx  eax,bl
c00208f4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00208fc:	89 c2                	mov    edx,eax
c00208fe:	eb 31                	jmp    c0020931 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020900:	80 fb 0d             	cmp    bl,0xd
c0020903:	77 13                	ja     c0020918 <IDE::read(unsigned char, unsigned char)+0x8c>
c0020905:	0f b6 d2             	movzx  edx,dl
c0020908:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002090f:	0f b6 d3             	movzx  edx,bl
c0020912:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020916:	eb 19                	jmp    c0020931 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020918:	31 c0                	xor    eax,eax
c002091a:	80 fb 15             	cmp    bl,0x15
c002091d:	77 13                	ja     c0020932 <IDE::read(unsigned char, unsigned char)+0xa6>
c002091f:	0f b6 d2             	movzx  edx,dl
c0020922:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002092a:	0f b6 d3             	movzx  edx,bl
c002092d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020931:	ec                   	in     al,dx
c0020932:	83 c4 1c             	add    esp,0x1c
c0020935:	5b                   	pop    ebx
c0020936:	5e                   	pop    esi
c0020937:	5f                   	pop    edi
c0020938:	5d                   	pop    ebp
c0020939:	c3                   	ret    

c002093a <IDE::waitInterrupt(unsigned char)>:
c002093a:	55                   	push   ebp
c002093b:	57                   	push   edi
c002093c:	56                   	push   esi
c002093d:	53                   	push   ebx
c002093e:	31 db                	xor    ebx,ebx
c0020940:	83 ec 0c             	sub    esp,0xc
c0020943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020947:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002094c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020954:	89 e8                	mov    eax,ebp
c0020956:	84 c0                	test   al,al
c0020958:	75 34                	jne    c002098e <IDE::waitInterrupt(unsigned char)+0x54>
c002095a:	52                   	push   edx
c002095b:	6a 0c                	push   0xc
c002095d:	56                   	push   esi
c002095e:	57                   	push   edi
c002095f:	e8 28 ff ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020964:	83 c4 10             	add    esp,0x10
c0020967:	a8 01                	test   al,0x1
c0020969:	75 2b                	jne    c0020996 <IDE::waitInterrupt(unsigned char)+0x5c>
c002096b:	f6 c3 04             	test   bl,0x4
c002096e:	75 16                	jne    c0020986 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020970:	83 fb 32             	cmp    ebx,0x32
c0020973:	7e 11                	jle    c0020986 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020975:	50                   	push   eax
c0020976:	50                   	push   eax
c0020977:	6a 00                	push   0x0
c0020979:	68 80 96 98 00       	push   0x989680
c002097e:	e8 fd b4 ff ff       	call   c001be80 <nanoSleep(unsigned long long)>
c0020983:	83 c4 10             	add    esp,0x10
c0020986:	83 fb 3c             	cmp    ebx,0x3c
c0020989:	74 0b                	je     c0020996 <IDE::waitInterrupt(unsigned char)+0x5c>
c002098b:	43                   	inc    ebx
c002098c:	eb be                	jmp    c002094c <IDE::waitInterrupt(unsigned char)+0x12>
c002098e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020996:	83 c4 0c             	add    esp,0xc
c0020999:	89 e8                	mov    eax,ebp
c002099b:	5b                   	pop    ebx
c002099c:	5e                   	pop    esi
c002099d:	5f                   	pop    edi
c002099e:	5d                   	pop    ebp
c002099f:	c3                   	ret    

c00209a0 <ideChannel0IRQHandler(regs*, void*)>:
c00209a0:	83 ec 10             	sub    esp,0x10
c00209a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209a7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00209ae:	6a 07                	push   0x7
c00209b0:	6a 00                	push   0x0
c00209b2:	50                   	push   eax
c00209b3:	e8 d4 fe ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c00209b8:	83 c4 1c             	add    esp,0x1c
c00209bb:	c3                   	ret    

c00209bc <ideChannel1IRQHandler(regs*, void*)>:
c00209bc:	83 ec 10             	sub    esp,0x10
c00209bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209c3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00209ca:	6a 07                	push   0x7
c00209cc:	6a 01                	push   0x1
c00209ce:	50                   	push   eax
c00209cf:	e8 b8 fe ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c00209d4:	83 c4 1c             	add    esp,0x1c
c00209d7:	c3                   	ret    

c00209d8 <IDE::enableIRQs(unsigned char, bool)>:
c00209d8:	57                   	push   edi
c00209d9:	56                   	push   esi
c00209da:	be 04 00 00 00       	mov    esi,0x4
c00209df:	53                   	push   ebx
c00209e0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00209e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209e9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00209ee:	0f 94 c0             	sete   al
c00209f1:	d1 e0                	shl    eax,1
c00209f3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00209fa:	0f b6 c0             	movzx  eax,al
c00209fd:	50                   	push   eax
c00209fe:	6a 0c                	push   0xc
c0020a00:	57                   	push   edi
c0020a01:	53                   	push   ebx
c0020a02:	e8 c5 fd ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020a07:	83 c4 10             	add    esp,0x10
c0020a0a:	50                   	push   eax
c0020a0b:	6a 0c                	push   0xc
c0020a0d:	57                   	push   edi
c0020a0e:	53                   	push   ebx
c0020a0f:	e8 78 fe ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020a14:	83 c4 10             	add    esp,0x10
c0020a17:	4e                   	dec    esi
c0020a18:	75 f0                	jne    c0020a0a <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020a1a:	5b                   	pop    ebx
c0020a1b:	5e                   	pop    esi
c0020a1c:	5f                   	pop    edi
c0020a1d:	c3                   	ret    

c0020a1e <IDE::open(int, int, void*)>:
c0020a1e:	55                   	push   ebp
c0020a1f:	57                   	push   edi
c0020a20:	56                   	push   esi
c0020a21:	53                   	push   ebx
c0020a22:	83 ec 1c             	sub    esp,0x1c
c0020a25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a29:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020a32:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020a3b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020a42:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020a49:	0f 85 b0 02 00 00    	jne    c0020cff <IDE::open(int, int, void*)+0x2e1>
c0020a4f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020a55:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020a59:	83 e0 7f             	and    eax,0x7f
c0020a5c:	3c 05                	cmp    al,0x5
c0020a5e:	74 04                	je     c0020a64 <IDE::open(int, int, void*)+0x46>
c0020a60:	3c 0f                	cmp    al,0xf
c0020a62:	75 32                	jne    c0020a96 <IDE::open(int, int, void*)+0x78>
c0020a64:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020a6a:	83 e0 fc             	and    eax,0xfffffffc
c0020a6d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020a74:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020a7a:	83 e0 fc             	and    eax,0xfffffffc
c0020a7d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020a84:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020a8a:	83 e0 fc             	and    eax,0xfffffffc
c0020a8d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020a94:	eb 14                	jmp    c0020aaa <IDE::open(int, int, void*)+0x8c>
c0020a96:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020aa0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020aaa:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020ab1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020ab8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020abc:	89 c6                	mov    esi,eax
c0020abe:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020ac3:	c1 e6 10             	shl    esi,0x10
c0020ac6:	89 e8                	mov    eax,ebp
c0020ac8:	89 fa                	mov    edx,edi
c0020aca:	c1 e0 0b             	shl    eax,0xb
c0020acd:	09 f0                	or     eax,esi
c0020acf:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020ad6:	c1 e6 08             	shl    esi,0x8
c0020ad9:	09 c6                	or     esi,eax
c0020adb:	89 f0                	mov    eax,esi
c0020add:	0d 08 00 00 80       	or     eax,0x80000008
c0020ae2:	ef                   	out    dx,eax
c0020ae3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020ae8:	89 ca                	mov    edx,ecx
c0020aea:	ed                   	in     eax,dx
c0020aeb:	c1 e8 10             	shr    eax,0x10
c0020aee:	3d ff ff 00 00       	cmp    eax,0xffff
c0020af3:	0f 84 f5 00 00 00    	je     c0020bee <IDE::open(int, int, void*)+0x1d0>
c0020af9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020aff:	89 fa                	mov    edx,edi
c0020b01:	89 f0                	mov    eax,esi
c0020b03:	ef                   	out    dx,eax
c0020b04:	b0 fe                	mov    al,0xfe
c0020b06:	89 ca                	mov    edx,ecx
c0020b08:	ee                   	out    dx,al
c0020b09:	89 f0                	mov    eax,esi
c0020b0b:	89 fa                	mov    edx,edi
c0020b0d:	ef                   	out    dx,eax
c0020b0e:	89 ca                	mov    edx,ecx
c0020b10:	ed                   	in     eax,dx
c0020b11:	3c fe                	cmp    al,0xfe
c0020b13:	0f 85 a9 00 00 00    	jne    c0020bc2 <IDE::open(int, int, void*)+0x1a4>
c0020b19:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0020b1f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020b26:	74 33                	je     c0020b5b <IDE::open(int, int, void*)+0x13d>
c0020b28:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020b2e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020b32:	40                   	inc    eax
c0020b33:	83 ec 0c             	sub    esp,0xc
c0020b36:	0f b6 c0             	movzx  eax,al
c0020b39:	50                   	push   eax
c0020b3a:	55                   	push   ebp
c0020b3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b3f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020b45:	51                   	push   ecx
c0020b46:	e8 f9 62 ff ff       	call   c0016e44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020b4b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020b50:	83 c4 1c             	add    esp,0x1c
c0020b53:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020b59:	eb 0a                	jmp    c0020b65 <IDE::open(int, int, void*)+0x147>
c0020b5b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020b65:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020b6c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020b73:	c1 e1 10             	shl    ecx,0x10
c0020b76:	c1 e0 08             	shl    eax,0x8
c0020b79:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020b7e:	09 c1                	or     ecx,eax
c0020b80:	89 fa                	mov    edx,edi
c0020b82:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020b89:	c1 e0 0b             	shl    eax,0xb
c0020b8c:	09 c1                	or     ecx,eax
c0020b8e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020b94:	89 c8                	mov    eax,ecx
c0020b96:	ef                   	out    dx,eax
c0020b97:	be fc 0c 00 00       	mov    esi,0xcfc
c0020b9c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020ba2:	89 f2                	mov    edx,esi
c0020ba4:	ee                   	out    dx,al
c0020ba5:	89 c8                	mov    eax,ecx
c0020ba7:	89 fa                	mov    edx,edi
c0020ba9:	ef                   	out    dx,eax
c0020baa:	89 f2                	mov    edx,esi
c0020bac:	ed                   	in     eax,dx
c0020bad:	0f b6 c0             	movzx  eax,al
c0020bb0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020bb6:	74 46                	je     c0020bfe <IDE::open(int, int, void*)+0x1e0>
c0020bb8:	83 ec 0c             	sub    esp,0xc
c0020bbb:	68 48 8d 02 c0       	push   0xc0028d48
c0020bc0:	eb 34                	jmp    c0020bf6 <IDE::open(int, int, void*)+0x1d8>
c0020bc2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020bcb:	75 17                	jne    c0020be4 <IDE::open(int, int, void*)+0x1c6>
c0020bcd:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020bd2:	74 07                	je     c0020bdb <IDE::open(int, int, void*)+0x1bd>
c0020bd4:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020bd9:	75 09                	jne    c0020be4 <IDE::open(int, int, void*)+0x1c6>
c0020bdb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020be2:	eb 1a                	jmp    c0020bfe <IDE::open(int, int, void*)+0x1e0>
c0020be4:	83 ec 0c             	sub    esp,0xc
c0020be7:	68 50 8d 02 c0       	push   0xc0028d50
c0020bec:	eb 08                	jmp    c0020bf6 <IDE::open(int, int, void*)+0x1d8>
c0020bee:	83 ec 0c             	sub    esp,0xc
c0020bf1:	68 81 8d 02 c0       	push   0xc0028d81
c0020bf6:	e8 ea 7d ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0020bfb:	83 c4 10             	add    esp,0x10
c0020bfe:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020c05:	79 1a                	jns    c0020c21 <IDE::open(int, int, void*)+0x203>
c0020c07:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020c0d:	83 e0 fc             	and    eax,0xfffffffc
c0020c10:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020c17:	83 c0 08             	add    eax,0x8
c0020c1a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020c21:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020c27:	89 c2                	mov    edx,eax
c0020c29:	83 e2 0f             	and    edx,0xf
c0020c2c:	66 83 fa 08          	cmp    dx,0x8
c0020c30:	75 0a                	jne    c0020c3c <IDE::open(int, int, void*)+0x21e>
c0020c32:	83 e8 02             	sub    eax,0x2
c0020c35:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020c3c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020c42:	89 c2                	mov    edx,eax
c0020c44:	83 e2 0f             	and    edx,0xf
c0020c47:	66 83 fa 08          	cmp    dx,0x8
c0020c4b:	75 0a                	jne    c0020c57 <IDE::open(int, int, void*)+0x239>
c0020c4d:	83 e8 02             	sub    eax,0x2
c0020c50:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020c57:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020c5e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020c65:	89 d0                	mov    eax,edx
c0020c67:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c6a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c6e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020c72:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020c75:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c7a:	0f b6 c9             	movzx  ecx,cl
c0020c7d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020c84:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020c87:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020c8b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020c8f:	8d 50 02             	lea    edx,[eax+0x2]
c0020c92:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020c97:	0f b6 d2             	movzx  edx,dl
c0020c9a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020ca0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020ca3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020ca7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020cab:	8d 48 03             	lea    ecx,[eax+0x3]
c0020cae:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020cb3:	0f b6 c9             	movzx  ecx,cl
c0020cb6:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020cbc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020cbf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020cc3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020cc7:	8d 50 04             	lea    edx,[eax+0x4]
c0020cca:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020cd0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020cd5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020cdc:	66 85 f6             	test   si,si
c0020cdf:	74 3e                	je     c0020d1f <IDE::open(int, int, void*)+0x301>
c0020ce1:	0f b6 d2             	movzx  edx,dl
c0020ce4:	83 c0 05             	add    eax,0x5
c0020ce7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cea:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020cee:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020cf2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020cf8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020cfd:	eb 20                	jmp    c0020d1f <IDE::open(int, int, void*)+0x301>
c0020cff:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020d09:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020d13:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020d1a:	e9 02 ff ff ff       	jmp    c0020c21 <IDE::open(int, int, void*)+0x203>
c0020d1f:	52                   	push   edx
c0020d20:	52                   	push   edx
c0020d21:	6a 00                	push   0x0
c0020d23:	53                   	push   ebx
c0020d24:	e8 7d fa ff ff       	call   c00207a6 <IDE::prepareInterrupt(unsigned char)>
c0020d29:	59                   	pop    ecx
c0020d2a:	5e                   	pop    esi
c0020d2b:	6a 01                	push   0x1
c0020d2d:	53                   	push   ebx
c0020d2e:	e8 73 fa ff ff       	call   c00207a6 <IDE::prepareInterrupt(unsigned char)>
c0020d33:	83 c4 0c             	add    esp,0xc
c0020d36:	6a 00                	push   0x0
c0020d38:	6a 00                	push   0x0
c0020d3a:	53                   	push   ebx
c0020d3b:	e8 98 fc ff ff       	call   c00209d8 <IDE::enableIRQs(unsigned char, bool)>
c0020d40:	83 c4 0c             	add    esp,0xc
c0020d43:	6a 00                	push   0x0
c0020d45:	6a 01                	push   0x1
c0020d47:	53                   	push   ebx
c0020d48:	e8 8b fc ff ff       	call   c00209d8 <IDE::enableIRQs(unsigned char, bool)>
c0020d4d:	83 c4 10             	add    esp,0x10
c0020d50:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020d57:	74 40                	je     c0020d99 <IDE::open(int, int, void*)+0x37b>
c0020d59:	83 ec 0c             	sub    esp,0xc
c0020d5c:	68 ab 8d 02 c0       	push   0xc0028dab
c0020d61:	e8 e1 14 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0020d66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d69:	6a 01                	push   0x1
c0020d6b:	68 a0 09 02 c0       	push   0xc00209a0
c0020d70:	6a 0e                	push   0xe
c0020d72:	53                   	push   ebx
c0020d73:	e8 2e 28 ff ff       	call   c00135a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d78:	83 c4 14             	add    esp,0x14
c0020d7b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020d81:	53                   	push   ebx
c0020d82:	6a 01                	push   0x1
c0020d84:	68 bc 09 02 c0       	push   0xc00209bc
c0020d89:	6a 0f                	push   0xf
c0020d8b:	53                   	push   ebx
c0020d8c:	e8 15 28 ff ff       	call   c00135a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d91:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020d97:	eb 4a                	jmp    c0020de3 <IDE::open(int, int, void*)+0x3c5>
c0020d99:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020da3:	50                   	push   eax
c0020da4:	6a 0f                	push   0xf
c0020da6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020dac:	68 c7 8d 02 c0       	push   0xc0028dc7
c0020db1:	e8 91 14 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0020db6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020db9:	6a 00                	push   0x0
c0020dbb:	68 a0 09 02 c0       	push   0xc00209a0
c0020dc0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020dc6:	53                   	push   ebx
c0020dc7:	e8 da 27 ff ff       	call   c00135a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020dcc:	83 c4 14             	add    esp,0x14
c0020dcf:	53                   	push   ebx
c0020dd0:	6a 00                	push   0x0
c0020dd2:	68 bc 09 02 c0       	push   0xc00209bc
c0020dd7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020ddd:	53                   	push   ebx
c0020dde:	e8 c3 27 ff ff       	call   c00135a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020de3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020de5:	83 c4 20             	add    esp,0x20
c0020de8:	83 ec 0c             	sub    esp,0xc
c0020deb:	53                   	push   ebx
c0020dec:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020def:	83 c4 0c             	add    esp,0xc
c0020df2:	6a 07                	push   0x7
c0020df4:	6a 00                	push   0x0
c0020df6:	53                   	push   ebx
c0020df7:	e8 90 fa ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020dfc:	83 c4 0c             	add    esp,0xc
c0020dff:	6a 07                	push   0x7
c0020e01:	6a 01                	push   0x1
c0020e03:	53                   	push   ebx
c0020e04:	e8 83 fa ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020e09:	83 c4 0c             	add    esp,0xc
c0020e0c:	6a 01                	push   0x1
c0020e0e:	6a 00                	push   0x0
c0020e10:	53                   	push   ebx
c0020e11:	e8 c2 fb ff ff       	call   c00209d8 <IDE::enableIRQs(unsigned char, bool)>
c0020e16:	83 c4 0c             	add    esp,0xc
c0020e19:	6a 01                	push   0x1
c0020e1b:	6a 01                	push   0x1
c0020e1d:	53                   	push   ebx
c0020e1e:	e8 b5 fb ff ff       	call   c00209d8 <IDE::enableIRQs(unsigned char, bool)>
c0020e23:	83 c4 2c             	add    esp,0x2c
c0020e26:	31 c0                	xor    eax,eax
c0020e28:	5b                   	pop    ebx
c0020e29:	5e                   	pop    esi
c0020e2a:	5f                   	pop    edi
c0020e2b:	5d                   	pop    ebp
c0020e2c:	c3                   	ret    
c0020e2d:	90                   	nop

c0020e2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020e2e:	55                   	push   ebp
c0020e2f:	57                   	push   edi
c0020e30:	56                   	push   esi
c0020e31:	53                   	push   ebx
c0020e32:	83 ec 1c             	sub    esp,0x1c
c0020e35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020e3d:	8d 50 f8             	lea    edx,[eax-0x8]
c0020e40:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e44:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020e48:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e4c:	80 fa 03             	cmp    dl,0x3
c0020e4f:	77 5d                	ja     c0020eae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020e51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020e55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e59:	0f b6 db             	movzx  ebx,bl
c0020e5c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020e5f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020e63:	83 ca 80             	or     edx,0xffffff80
c0020e66:	0f b6 d2             	movzx  edx,dl
c0020e69:	52                   	push   edx
c0020e6a:	6a 0c                	push   0xc
c0020e6c:	53                   	push   ebx
c0020e6d:	56                   	push   esi
c0020e6e:	e8 59 f9 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e73:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020e78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020e80:	0f b6 c0             	movzx  eax,al
c0020e83:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020e87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020e89:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020e8e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020e92:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020e96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020e9a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020ea2:	83 c4 2c             	add    esp,0x2c
c0020ea5:	5b                   	pop    ebx
c0020ea6:	5e                   	pop    esi
c0020ea7:	5f                   	pop    edi
c0020ea8:	5d                   	pop    ebp
c0020ea9:	e9 1e f9 ff ff       	jmp    c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020eae:	3c 07                	cmp    al,0x7
c0020eb0:	77 10                	ja     c0020ec2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020eb2:	0f b6 db             	movzx  ebx,bl
c0020eb5:	0f b6 d0             	movzx  edx,al
c0020eb8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020ec0:	eb 2d                	jmp    c0020eef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ec2:	3c 0d                	cmp    al,0xd
c0020ec4:	77 13                	ja     c0020ed9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020ec6:	0f b6 db             	movzx  ebx,bl
c0020ec9:	0f b6 c0             	movzx  eax,al
c0020ecc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020ed3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020ed7:	eb 16                	jmp    c0020eef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ed9:	3c 15                	cmp    al,0x15
c0020edb:	77 14                	ja     c0020ef1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020edd:	0f b6 db             	movzx  ebx,bl
c0020ee0:	0f b6 c0             	movzx  eax,al
c0020ee3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020eeb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020eef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020ef1:	83 c4 1c             	add    esp,0x1c
c0020ef4:	5b                   	pop    ebx
c0020ef5:	5e                   	pop    esi
c0020ef6:	5f                   	pop    edi
c0020ef7:	5d                   	pop    ebp
c0020ef8:	c3                   	ret    
c0020ef9:	90                   	nop

c0020efa <IDE::detect()>:
c0020efa:	55                   	push   ebp
c0020efb:	57                   	push   edi
c0020efc:	56                   	push   esi
c0020efd:	53                   	push   ebx
c0020efe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020f04:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020f0b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020f12:	0f 85 be 02 00 00    	jne    c00211d6 <IDE::detect()+0x2dc>
c0020f18:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020f1f:	31 f6                	xor    esi,esi
c0020f21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f29:	31 ed                	xor    ebp,ebp
c0020f2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f2f:	c1 e0 06             	shl    eax,0x6
c0020f32:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020f3a:	89 e8                	mov    eax,ebp
c0020f3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f40:	c1 e0 04             	shl    eax,0x4
c0020f43:	83 c8 a0             	or     eax,0xffffffa0
c0020f46:	0f b6 c0             	movzx  eax,al
c0020f49:	50                   	push   eax
c0020f4a:	6a 06                	push   0x6
c0020f4c:	56                   	push   esi
c0020f4d:	53                   	push   ebx
c0020f4e:	e8 79 f8 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f53:	83 c4 0c             	add    esp,0xc
c0020f56:	6a 0c                	push   0xc
c0020f58:	56                   	push   esi
c0020f59:	53                   	push   ebx
c0020f5a:	e8 2d f9 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020f5f:	83 c4 0c             	add    esp,0xc
c0020f62:	6a 0c                	push   0xc
c0020f64:	56                   	push   esi
c0020f65:	53                   	push   ebx
c0020f66:	e8 21 f9 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020f6b:	83 c4 0c             	add    esp,0xc
c0020f6e:	6a 0c                	push   0xc
c0020f70:	56                   	push   esi
c0020f71:	53                   	push   ebx
c0020f72:	e8 15 f9 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020f77:	83 c4 0c             	add    esp,0xc
c0020f7a:	6a 0c                	push   0xc
c0020f7c:	56                   	push   esi
c0020f7d:	53                   	push   ebx
c0020f7e:	e8 09 f9 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020f83:	68 ec 00 00 00       	push   0xec
c0020f88:	6a 07                	push   0x7
c0020f8a:	56                   	push   esi
c0020f8b:	53                   	push   ebx
c0020f8c:	e8 3b f8 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f91:	83 c4 1c             	add    esp,0x1c
c0020f94:	6a 0c                	push   0xc
c0020f96:	56                   	push   esi
c0020f97:	53                   	push   ebx
c0020f98:	e8 ef f8 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020f9d:	83 c4 0c             	add    esp,0xc
c0020fa0:	6a 0c                	push   0xc
c0020fa2:	56                   	push   esi
c0020fa3:	53                   	push   ebx
c0020fa4:	e8 e3 f8 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020fa9:	83 c4 0c             	add    esp,0xc
c0020fac:	6a 0c                	push   0xc
c0020fae:	56                   	push   esi
c0020faf:	53                   	push   ebx
c0020fb0:	e8 d7 f8 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020fb5:	83 c4 0c             	add    esp,0xc
c0020fb8:	6a 0c                	push   0xc
c0020fba:	56                   	push   esi
c0020fbb:	53                   	push   ebx
c0020fbc:	e8 cb f8 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020fc1:	83 c4 0c             	add    esp,0xc
c0020fc4:	6a 0c                	push   0xc
c0020fc6:	56                   	push   esi
c0020fc7:	53                   	push   ebx
c0020fc8:	e8 bf f8 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020fcd:	83 c4 10             	add    esp,0x10
c0020fd0:	84 c0                	test   al,al
c0020fd2:	0f 84 8b 01 00 00    	je     c0021163 <IDE::detect()+0x269>
c0020fd8:	31 ff                	xor    edi,edi
c0020fda:	50                   	push   eax
c0020fdb:	6a 0c                	push   0xc
c0020fdd:	56                   	push   esi
c0020fde:	53                   	push   ebx
c0020fdf:	e8 a8 f8 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0020fe4:	83 c4 10             	add    esp,0x10
c0020fe7:	a8 01                	test   al,0x1
c0020fe9:	0f 85 8e 01 00 00    	jne    c002117d <IDE::detect()+0x283>
c0020fef:	84 c0                	test   al,al
c0020ff1:	78 04                	js     c0020ff7 <IDE::detect()+0xfd>
c0020ff3:	a8 08                	test   al,0x8
c0020ff5:	75 27                	jne    c002101e <IDE::detect()+0x124>
c0020ff7:	47                   	inc    edi
c0020ff8:	81 ff 17 01 00 00    	cmp    edi,0x117
c0020ffe:	7e da                	jle    c0020fda <IDE::detect()+0xe0>
c0021000:	50                   	push   eax
c0021001:	50                   	push   eax
c0021002:	6a 00                	push   0x0
c0021004:	68 40 4b 4c 00       	push   0x4c4b40
c0021009:	e8 72 ae ff ff       	call   c001be80 <nanoSleep(unsigned long long)>
c002100e:	83 c4 10             	add    esp,0x10
c0021011:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021017:	75 c1                	jne    c0020fda <IDE::detect()+0xe0>
c0021019:	e9 5f 01 00 00       	jmp    c002117d <IDE::detect()+0x283>
c002101e:	31 c9                	xor    ecx,ecx
c0021020:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021024:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021028:	83 ec 0c             	sub    esp,0xc
c002102b:	68 80 00 00 00       	push   0x80
c0021030:	57                   	push   edi
c0021031:	6a 00                	push   0x0
c0021033:	56                   	push   esi
c0021034:	53                   	push   ebx
c0021035:	e8 f4 fd ff ff       	call   c0020e2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002103a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002103f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021043:	89 d1                	mov    ecx,edx
c0021045:	c1 e0 06             	shl    eax,0x6
c0021048:	01 d8                	add    eax,ebx
c002104a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021051:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021058:	89 f2                	mov    edx,esi
c002105a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021060:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021064:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002106a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002106e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021075:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002107d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021084:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002108c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0021092:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0021099:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002109f:	8d 54 24 58          	lea    edx,[esp+0x58]
c00210a3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00210a7:	83 c4 20             	add    esp,0x20
c00210aa:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00210ad:	83 c0 02             	add    eax,0x2
c00210b0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00210b6:	83 c7 02             	add    edi,0x2
c00210b9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00210bc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00210c2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00210c6:	75 e2                	jne    c00210aa <IDE::detect()+0x1b0>
c00210c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210cc:	c1 e0 06             	shl    eax,0x6
c00210cf:	01 d8                	add    eax,ebx
c00210d1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00210d7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00210de:	66 c1 ea 09          	shr    dx,0x9
c00210e2:	83 e2 01             	and    edx,0x1
c00210e5:	84 c9                	test   cl,cl
c00210e7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00210ed:	75 2f                	jne    c002111e <IDE::detect()+0x224>
c00210ef:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00210f5:	85 c0                	test   eax,eax
c00210f7:	74 66                	je     c002115f <IDE::detect()+0x265>
c00210f9:	50                   	push   eax
c00210fa:	55                   	push   ebp
c00210fb:	56                   	push   esi
c00210fc:	68 e3 8d 02 c0       	push   0xc0028de3
c0021101:	e8 41 11 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021106:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002110d:	e8 46 10 ff ff       	call   c0012158 <operator new(unsigned long)>
c0021112:	89 c7                	mov    edi,eax
c0021114:	89 04 24             	mov    DWORD PTR [esp],eax
c0021117:	e8 e8 02 00 00       	call   c0021404 <ATA::ATA()>
c002111c:	eb 28                	jmp    c0021146 <IDE::detect()+0x24c>
c002111e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021124:	55                   	push   ebp
c0021125:	56                   	push   esi
c0021126:	68 12 8e 02 c0       	push   0xc0028e12
c002112b:	e8 17 11 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021130:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021137:	e8 1c 10 ff ff       	call   c0012158 <operator new(unsigned long)>
c002113c:	89 c7                	mov    edi,eax
c002113e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021141:	e8 ee 08 00 00       	call   c0021a34 <ATAPI::ATAPI()>
c0021146:	5a                   	pop    edx
c0021147:	59                   	pop    ecx
c0021148:	57                   	push   edi
c0021149:	53                   	push   ebx
c002114a:	e8 03 25 ff ff       	call   c0013652 <Device::addChild(Device*)>
c002114f:	8b 07                	mov    eax,DWORD PTR [edi]
c0021151:	53                   	push   ebx
c0021152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021156:	6a 00                	push   0x0
c0021158:	57                   	push   edi
c0021159:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002115c:	83 c4 20             	add    esp,0x20
c002115f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021163:	4d                   	dec    ebp
c0021164:	74 0a                	je     c0021170 <IDE::detect()+0x276>
c0021166:	bd 01 00 00 00       	mov    ebp,0x1
c002116b:	e9 bb fd ff ff       	jmp    c0020f2b <IDE::detect()+0x31>
c0021170:	4e                   	dec    esi
c0021171:	74 63                	je     c00211d6 <IDE::detect()+0x2dc>
c0021173:	be 01 00 00 00       	mov    esi,0x1
c0021178:	e9 ac fd ff ff       	jmp    c0020f29 <IDE::detect()+0x2f>
c002117d:	50                   	push   eax
c002117e:	6a 04                	push   0x4
c0021180:	56                   	push   esi
c0021181:	53                   	push   ebx
c0021182:	e8 05 f7 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0021187:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002118b:	83 c4 0c             	add    esp,0xc
c002118e:	6a 05                	push   0x5
c0021190:	56                   	push   esi
c0021191:	53                   	push   ebx
c0021192:	e8 f5 f6 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0021197:	83 c4 10             	add    esp,0x10
c002119a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002119e:	80 fa 14             	cmp    dl,0x14
c00211a1:	75 04                	jne    c00211a7 <IDE::detect()+0x2ad>
c00211a3:	3c eb                	cmp    al,0xeb
c00211a5:	eb 07                	jmp    c00211ae <IDE::detect()+0x2b4>
c00211a7:	3c 96                	cmp    al,0x96
c00211a9:	75 b8                	jne    c0021163 <IDE::detect()+0x269>
c00211ab:	80 fa 69             	cmp    dl,0x69
c00211ae:	75 b3                	jne    c0021163 <IDE::detect()+0x269>
c00211b0:	68 a1 00 00 00       	push   0xa1
c00211b5:	6a 07                	push   0x7
c00211b7:	56                   	push   esi
c00211b8:	53                   	push   ebx
c00211b9:	e8 0e f6 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00211be:	5f                   	pop    edi
c00211bf:	58                   	pop    eax
c00211c0:	6a 00                	push   0x0
c00211c2:	68 40 42 0f 00       	push   0xf4240
c00211c7:	e8 b4 ac ff ff       	call   c001be80 <nanoSleep(unsigned long long)>
c00211cc:	83 c4 10             	add    esp,0x10
c00211cf:	b1 01                	mov    cl,0x1
c00211d1:	e9 4a fe ff ff       	jmp    c0021020 <IDE::detect()+0x126>
c00211d6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00211dc:	5b                   	pop    ebx
c00211dd:	5e                   	pop    esi
c00211de:	5f                   	pop    edi
c00211df:	5d                   	pop    ebp
c00211e0:	c3                   	ret    
c00211e1:	90                   	nop

c00211e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00211e2:	55                   	push   ebp
c00211e3:	57                   	push   edi
c00211e4:	56                   	push   esi
c00211e5:	53                   	push   ebx
c00211e6:	83 ec 1c             	sub    esp,0x1c
c00211e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00211ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00211f1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00211f5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00211f9:	88 c3                	mov    bl,al
c00211fb:	84 c0                	test   al,al
c00211fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021201:	0f 84 67 01 00 00    	je     c002136e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021207:	83 ec 0c             	sub    esp,0xc
c002120a:	68 43 8e 02 c0       	push   0xc0028e43
c002120f:	e8 33 10 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021214:	83 c4 10             	add    esp,0x10
c0021217:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002121b:	3c 01                	cmp    al,0x1
c002121d:	75 17                	jne    c0021236 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002121f:	83 ec 0c             	sub    esp,0xc
c0021222:	b3 13                	mov    bl,0x13
c0021224:	68 4f 8e 02 c0       	push   0xc0028e4f
c0021229:	e8 19 10 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c002122e:	83 c4 10             	add    esp,0x10
c0021231:	e9 25 01 00 00       	jmp    c002135b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021236:	3c 02                	cmp    al,0x2
c0021238:	0f 85 ef 00 00 00    	jne    c002132d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002123e:	d1 e6                	shl    esi,1
c0021240:	09 ee                	or     esi,ebp
c0021242:	52                   	push   edx
c0021243:	89 f0                	mov    eax,esi
c0021245:	6a 01                	push   0x1
c0021247:	0f b6 f0             	movzx  esi,al
c002124a:	c1 e6 06             	shl    esi,0x6
c002124d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021255:	50                   	push   eax
c0021256:	57                   	push   edi
c0021257:	e8 30 f6 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c002125c:	83 c4 10             	add    esp,0x10
c002125f:	89 c6                	mov    esi,eax
c0021261:	a8 01                	test   al,0x1
c0021263:	74 12                	je     c0021277 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021265:	83 ec 0c             	sub    esp,0xc
c0021268:	b3 07                	mov    bl,0x7
c002126a:	68 64 8e 02 c0       	push   0xc0028e64
c002126f:	e8 d3 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021274:	83 c4 10             	add    esp,0x10
c0021277:	f7 c6 02 00 00 00    	test   esi,0x2
c002127d:	74 12                	je     c0021291 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002127f:	83 ec 0c             	sub    esp,0xc
c0021282:	b3 03                	mov    bl,0x3
c0021284:	68 82 8e 02 c0       	push   0xc0028e82
c0021289:	e8 b9 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c002128e:	83 c4 10             	add    esp,0x10
c0021291:	f7 c6 04 00 00 00    	test   esi,0x4
c0021297:	74 12                	je     c00212ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021299:	83 ec 0c             	sub    esp,0xc
c002129c:	b3 14                	mov    bl,0x14
c002129e:	68 a2 8e 02 c0       	push   0xc0028ea2
c00212a3:	e8 9f 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00212a8:	83 c4 10             	add    esp,0x10
c00212ab:	f7 c6 08 00 00 00    	test   esi,0x8
c00212b1:	74 12                	je     c00212c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00212b3:	83 ec 0c             	sub    esp,0xc
c00212b6:	b3 03                	mov    bl,0x3
c00212b8:	68 82 8e 02 c0       	push   0xc0028e82
c00212bd:	e8 85 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00212c2:	83 c4 10             	add    esp,0x10
c00212c5:	f7 c6 10 00 00 00    	test   esi,0x10
c00212cb:	74 12                	je     c00212df <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00212cd:	83 ec 0c             	sub    esp,0xc
c00212d0:	b3 15                	mov    bl,0x15
c00212d2:	68 ba 8e 02 c0       	push   0xc0028eba
c00212d7:	e8 6b 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00212dc:	83 c4 10             	add    esp,0x10
c00212df:	f7 c6 20 00 00 00    	test   esi,0x20
c00212e5:	74 12                	je     c00212f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00212e7:	83 ec 0c             	sub    esp,0xc
c00212ea:	b3 03                	mov    bl,0x3
c00212ec:	68 82 8e 02 c0       	push   0xc0028e82
c00212f1:	e8 51 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00212f6:	83 c4 10             	add    esp,0x10
c00212f9:	f7 c6 40 00 00 00    	test   esi,0x40
c00212ff:	74 12                	je     c0021313 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0021301:	83 ec 0c             	sub    esp,0xc
c0021304:	b3 16                	mov    bl,0x16
c0021306:	68 d4 8e 02 c0       	push   0xc0028ed4
c002130b:	e8 37 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021310:	83 c4 10             	add    esp,0x10
c0021313:	89 f0                	mov    eax,esi
c0021315:	84 c0                	test   al,al
c0021317:	79 42                	jns    c002135b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021319:	83 ec 0c             	sub    esp,0xc
c002131c:	b3 0d                	mov    bl,0xd
c002131e:	68 f5 8e 02 c0       	push   0xc0028ef5
c0021323:	e8 1f 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021328:	83 c4 10             	add    esp,0x10
c002132b:	eb 2e                	jmp    c002135b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002132d:	3c 03                	cmp    al,0x3
c002132f:	75 14                	jne    c0021345 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021331:	83 ec 0c             	sub    esp,0xc
c0021334:	b3 17                	mov    bl,0x17
c0021336:	68 09 8f 02 c0       	push   0xc0028f09
c002133b:	e8 07 0f ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021340:	83 c4 10             	add    esp,0x10
c0021343:	eb 16                	jmp    c002135b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021345:	3c 04                	cmp    al,0x4
c0021347:	75 12                	jne    c002135b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021349:	83 ec 0c             	sub    esp,0xc
c002134c:	b3 08                	mov    bl,0x8
c002134e:	68 1f 8f 02 c0       	push   0xc0028f1f
c0021353:	e8 ef 0e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021358:	83 c4 10             	add    esp,0x10
c002135b:	50                   	push   eax
c002135c:	50                   	push   eax
c002135d:	0f b6 c3             	movzx  eax,bl
c0021360:	50                   	push   eax
c0021361:	68 37 8f 02 c0       	push   0xc0028f37
c0021366:	e8 dc 0e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c002136b:	83 c4 10             	add    esp,0x10
c002136e:	83 c4 1c             	add    esp,0x1c
c0021371:	88 d8                	mov    al,bl
c0021373:	5b                   	pop    ebx
c0021374:	5e                   	pop    esi
c0021375:	5f                   	pop    edi
c0021376:	5d                   	pop    ebp
c0021377:	c3                   	ret    

c0021378 <IDE::polling(unsigned char, unsigned int)>:
c0021378:	57                   	push   edi
c0021379:	56                   	push   esi
c002137a:	53                   	push   ebx
c002137b:	bb 04 00 00 00       	mov    ebx,0x4
c0021380:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021384:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021389:	52                   	push   edx
c002138a:	6a 0c                	push   0xc
c002138c:	56                   	push   esi
c002138d:	57                   	push   edi
c002138e:	e8 f9 f4 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0021393:	83 c4 10             	add    esp,0x10
c0021396:	4b                   	dec    ebx
c0021397:	75 f0                	jne    c0021389 <IDE::polling(unsigned char, unsigned int)+0x11>
c0021399:	bb a0 86 01 00       	mov    ebx,0x186a0
c002139e:	50                   	push   eax
c002139f:	6a 0c                	push   0xc
c00213a1:	56                   	push   esi
c00213a2:	57                   	push   edi
c00213a3:	e8 e4 f4 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c00213a8:	83 c4 10             	add    esp,0x10
c00213ab:	a8 01                	test   al,0x1
c00213ad:	74 12                	je     c00213c1 <IDE::polling(unsigned char, unsigned int)+0x49>
c00213af:	83 ec 0c             	sub    esp,0xc
c00213b2:	68 51 8f 02 c0       	push   0xc0028f51
c00213b7:	e8 8b 0e ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00213bc:	83 c4 10             	add    esp,0x10
c00213bf:	eb 17                	jmp    c00213d8 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213c1:	a8 20                	test   al,0x20
c00213c3:	75 0f                	jne    c00213d4 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00213c5:	4b                   	dec    ebx
c00213c6:	74 10                	je     c00213d8 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213c8:	84 c0                	test   al,al
c00213ca:	78 d2                	js     c002139e <IDE::polling(unsigned char, unsigned int)+0x26>
c00213cc:	a8 08                	test   al,0x8
c00213ce:	74 ce                	je     c002139e <IDE::polling(unsigned char, unsigned int)+0x26>
c00213d0:	31 c0                	xor    eax,eax
c00213d2:	eb 06                	jmp    c00213da <IDE::polling(unsigned char, unsigned int)+0x62>
c00213d4:	b0 01                	mov    al,0x1
c00213d6:	eb 02                	jmp    c00213da <IDE::polling(unsigned char, unsigned int)+0x62>
c00213d8:	b0 02                	mov    al,0x2
c00213da:	5b                   	pop    ebx
c00213db:	5e                   	pop    esi
c00213dc:	5f                   	pop    edi
c00213dd:	c3                   	ret    

c00213de <ATA::close(int, int, void*)>:
c00213de:	83 ec 0c             	sub    esp,0xc
c00213e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00213eb:	85 c0                	test   eax,eax
c00213ed:	74 0c                	je     c00213fb <ATA::close(int, int, void*)+0x1d>
c00213ef:	83 ec 0c             	sub    esp,0xc
c00213f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00213f4:	50                   	push   eax
c00213f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00213f8:	83 c4 10             	add    esp,0x10
c00213fb:	31 c0                	xor    eax,eax
c00213fd:	83 c4 0c             	add    esp,0xc
c0021400:	c3                   	ret    
c0021401:	90                   	nop

c0021402 <ATA::powerSaving(PowerSavingLevel)>:
c0021402:	c3                   	ret    
c0021403:	90                   	nop

c0021404 <ATA::ATA()>:
c0021404:	83 ec 0c             	sub    esp,0xc
c0021407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002140b:	83 ec 04             	sub    esp,0x4
c002140e:	68 00 02 00 00       	push   0x200
c0021413:	68 94 8f 02 c0       	push   0xc0028f94
c0021418:	50                   	push   eax
c0021419:	e8 3a 26 ff ff       	call   c0013a58 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002141e:	83 c4 10             	add    esp,0x10
c0021421:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c0021426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142a:	89 10                	mov    DWORD PTR [eax],edx
c002142c:	90                   	nop
c002142d:	83 c4 0c             	add    esp,0xc
c0021430:	c3                   	ret    
c0021431:	90                   	nop

c0021432 <ATA::flush(bool)>:
c0021432:	53                   	push   ebx
c0021433:	83 ec 08             	sub    esp,0x8
c0021436:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002143b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002143f:	19 c0                	sbb    eax,eax
c0021441:	83 e0 fd             	and    eax,0xfffffffd
c0021444:	05 ea 00 00 00       	add    eax,0xea
c0021449:	50                   	push   eax
c002144a:	6a 07                	push   0x7
c002144c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021453:	50                   	push   eax
c0021454:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002145a:	e8 6d f3 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002145f:	83 c4 0c             	add    esp,0xc
c0021462:	6a 00                	push   0x0
c0021464:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002146b:	50                   	push   eax
c002146c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021472:	e8 01 ff ff ff       	call   c0021378 <IDE::polling(unsigned char, unsigned int)>
c0021477:	83 c4 18             	add    esp,0x18
c002147a:	5b                   	pop    ebx
c002147b:	c3                   	ret    

c002147c <ATA::readyForCommand()>:
c002147c:	56                   	push   esi
c002147d:	53                   	push   ebx
c002147e:	31 db                	xor    ebx,ebx
c0021480:	50                   	push   eax
c0021481:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021485:	50                   	push   eax
c0021486:	6a 0c                	push   0xc
c0021488:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002148f:	50                   	push   eax
c0021490:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021496:	e8 f1 f3 ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c002149b:	83 c4 10             	add    esp,0x10
c002149e:	a8 88                	test   al,0x88
c00214a0:	74 23                	je     c00214c5 <ATA::readyForCommand()+0x49>
c00214a2:	43                   	inc    ebx
c00214a3:	83 fb 63             	cmp    ebx,0x63
c00214a6:	7e dd                	jle    c0021485 <ATA::readyForCommand()+0x9>
c00214a8:	51                   	push   ecx
c00214a9:	51                   	push   ecx
c00214aa:	6a 00                	push   0x0
c00214ac:	68 40 42 0f 00       	push   0xf4240
c00214b1:	e8 ca a9 ff ff       	call   c001be80 <nanoSleep(unsigned long long)>
c00214b6:	83 c4 10             	add    esp,0x10
c00214b9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00214bf:	75 c4                	jne    c0021485 <ATA::readyForCommand()+0x9>
c00214c1:	31 c0                	xor    eax,eax
c00214c3:	eb 02                	jmp    c00214c7 <ATA::readyForCommand()+0x4b>
c00214c5:	b0 01                	mov    al,0x1
c00214c7:	5a                   	pop    edx
c00214c8:	5b                   	pop    ebx
c00214c9:	5e                   	pop    esi
c00214ca:	c3                   	ret    
c00214cb:	90                   	nop

c00214cc <ATA::access(unsigned long long, int, void*, bool)>:
c00214cc:	55                   	push   ebp
c00214cd:	57                   	push   edi
c00214ce:	56                   	push   esi
c00214cf:	53                   	push   ebx
c00214d0:	83 ec 2c             	sub    esp,0x2c
c00214d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00214d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00214db:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00214df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214e3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00214e7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00214eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00214ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00214f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214f9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00214ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021503:	c1 e0 06             	shl    eax,0x6
c0021506:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002150e:	74 5d                	je     c002156d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021510:	89 fa                	mov    edx,edi
c0021512:	89 f0                	mov    eax,esi
c0021514:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021518:	c1 ea 1c             	shr    edx,0x1c
c002151b:	89 d1                	mov    ecx,edx
c002151d:	09 c1                	or     ecx,eax
c002151f:	74 25                	je     c0021546 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021521:	31 ed                	xor    ebp,ebp
c0021523:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002152a:	89 fa                	mov    edx,edi
c002152c:	89 f0                	mov    eax,esi
c002152e:	0f ad d0             	shrd   eax,edx,cl
c0021531:	d3 ea                	shr    edx,cl
c0021533:	f6 c1 20             	test   cl,0x20
c0021536:	74 02                	je     c002153a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021538:	89 d0                	mov    eax,edx
c002153a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002153e:	45                   	inc    ebp
c002153f:	83 fd 06             	cmp    ebp,0x6
c0021542:	75 df                	jne    c0021523 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021544:	eb 76                	jmp    c00215bc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021546:	89 f0                	mov    eax,esi
c0021548:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002154d:	89 fa                	mov    edx,edi
c002154f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021556:	0f ac d0 10          	shrd   eax,edx,0x10
c002155a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002155f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021563:	c1 ee 18             	shr    esi,0x18
c0021566:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002156b:	eb 56                	jmp    c00215c3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002156d:	6a 00                	push   0x0
c002156f:	6a 3f                	push   0x3f
c0021571:	57                   	push   edi
c0021572:	56                   	push   esi
c0021573:	e8 e4 1e 00 00       	call   c002345c <__umoddi3>
c0021578:	83 c4 10             	add    esp,0x10
c002157b:	40                   	inc    eax
c002157c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0021580:	6a 00                	push   0x0
c0021582:	68 f0 03 00 00       	push   0x3f0
c0021587:	57                   	push   edi
c0021588:	56                   	push   esi
c0021589:	e8 ce 1d 00 00       	call   c002335c <__udivdi3>
c002158e:	83 c4 10             	add    esp,0x10
c0021591:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021596:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002159d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00215a2:	6a 00                	push   0x0
c00215a4:	6a 3f                	push   0x3f
c00215a6:	57                   	push   edi
c00215a7:	56                   	push   esi
c00215a8:	e8 af 1d 00 00       	call   c002335c <__udivdi3>
c00215ad:	83 c4 10             	add    esp,0x10
c00215b0:	89 c6                	mov    esi,eax
c00215b2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00215b7:	83 e6 0f             	and    esi,0xf
c00215ba:	eb 07                	jmp    c00215c3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00215bc:	31 f6                	xor    esi,esi
c00215be:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00215c3:	bf 01 00 00 00       	mov    edi,0x1
c00215c8:	50                   	push   eax
c00215c9:	6a 00                	push   0x0
c00215cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00215d2:	50                   	push   eax
c00215d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215d7:	e8 fc f3 ff ff       	call   c00209d8 <IDE::enableIRQs(unsigned char, bool)>
c00215dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00215df:	e8 98 fe ff ff       	call   c002147c <ATA::readyForCommand()>
c00215e4:	83 c4 10             	add    esp,0x10
c00215e7:	84 c0                	test   al,al
c00215e9:	0f 84 50 02 00 00    	je     c002183f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00215ef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00215f5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00215fb:	c1 e0 04             	shl    eax,0x4
c00215fe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0021605:	09 c6                	or     esi,eax
c0021607:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002160c:	75 05                	jne    c0021613 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002160e:	83 ce a0             	or     esi,0xffffffa0
c0021611:	eb 03                	jmp    c0021616 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021613:	83 ce e0             	or     esi,0xffffffe0
c0021616:	89 f0                	mov    eax,esi
c0021618:	0f b6 f0             	movzx  esi,al
c002161b:	56                   	push   esi
c002161c:	6a 06                	push   0x6
c002161e:	51                   	push   ecx
c002161f:	52                   	push   edx
c0021620:	e8 a7 f1 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021625:	83 c4 10             	add    esp,0x10
c0021628:	6a 00                	push   0x0
c002162a:	6a 01                	push   0x1
c002162c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021633:	50                   	push   eax
c0021634:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002163a:	e8 8d f1 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002163f:	83 c4 10             	add    esp,0x10
c0021642:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021647:	75 6e                	jne    c00216b7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021649:	6a 00                	push   0x0
c002164b:	6a 08                	push   0x8
c002164d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021654:	50                   	push   eax
c0021655:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002165b:	e8 6c f1 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021660:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021665:	50                   	push   eax
c0021666:	6a 09                	push   0x9
c0021668:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002166f:	50                   	push   eax
c0021670:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021676:	e8 51 f1 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002167b:	83 c4 20             	add    esp,0x20
c002167e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0021683:	50                   	push   eax
c0021684:	6a 0a                	push   0xa
c0021686:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002168d:	50                   	push   eax
c002168e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021694:	e8 33 f1 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021699:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002169e:	50                   	push   eax
c002169f:	6a 0b                	push   0xb
c00216a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216a8:	50                   	push   eax
c00216a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216af:	e8 18 f1 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216b4:	83 c4 20             	add    esp,0x20
c00216b7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00216bc:	50                   	push   eax
c00216bd:	6a 02                	push   0x2
c00216bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216c6:	50                   	push   eax
c00216c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216cd:	e8 fa f0 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216d2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00216d7:	50                   	push   eax
c00216d8:	6a 03                	push   0x3
c00216da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216e1:	50                   	push   eax
c00216e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216e8:	e8 df f0 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216ed:	83 c4 20             	add    esp,0x20
c00216f0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00216f5:	50                   	push   eax
c00216f6:	6a 04                	push   0x4
c00216f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216ff:	50                   	push   eax
c0021700:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021706:	e8 c1 f0 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002170b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021710:	50                   	push   eax
c0021711:	6a 05                	push   0x5
c0021713:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002171a:	50                   	push   eax
c002171b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021721:	e8 a6 f0 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021726:	83 c4 20             	add    esp,0x20
c0021729:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002172e:	0f 94 c0             	sete   al
c0021731:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021736:	74 09                	je     c0021741 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021738:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002173f:	eb 07                	jmp    c0021748 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021741:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021748:	0f b6 c0             	movzx  eax,al
c002174b:	50                   	push   eax
c002174c:	6a 07                	push   0x7
c002174e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021755:	50                   	push   eax
c0021756:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002175c:	e8 6b f0 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021761:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021765:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021769:	83 c4 10             	add    esp,0x10
c002176c:	85 f6                	test   esi,esi
c002176e:	0f 84 ac 00 00 00    	je     c0021820 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021774:	50                   	push   eax
c0021775:	6a 01                	push   0x1
c0021777:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002177e:	50                   	push   eax
c002177f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021785:	e8 ee fb ff ff       	call   c0021378 <IDE::polling(unsigned char, unsigned int)>
c002178a:	83 c4 10             	add    esp,0x10
c002178d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021793:	84 c0                	test   al,al
c0021795:	74 20                	je     c00217b7 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021797:	0f b6 f8             	movzx  edi,al
c002179a:	0f b6 d2             	movzx  edx,dl
c002179d:	57                   	push   edi
c002179e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00217a5:	50                   	push   eax
c00217a6:	52                   	push   edx
c00217a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217ad:	e8 30 fa ff ff       	call   c00211e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00217b2:	e9 85 00 00 00       	jmp    c002183c <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00217b7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00217bc:	74 41                	je     c00217ff <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00217be:	31 c9                	xor    ecx,ecx
c00217c0:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00217c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217c8:	50                   	push   eax
c00217c9:	50                   	push   eax
c00217ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217d1:	50                   	push   eax
c00217d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217d8:	e8 dd ef ff ff       	call   c00207ba <IDE::getBase(unsigned char)>
c00217dd:	89 c2                	mov    edx,eax
c00217df:	89 e8                	mov    eax,ebp
c00217e1:	66 ef                	out    dx,ax
c00217e3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00217e7:	83 c4 10             	add    esp,0x10
c00217ea:	41                   	inc    ecx
c00217eb:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00217f1:	75 cd                	jne    c00217c0 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00217f3:	4e                   	dec    esi
c00217f4:	81 c7 00 02 00 00    	add    edi,0x200
c00217fa:	e9 6d ff ff ff       	jmp    c002176c <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00217ff:	0f b6 d2             	movzx  edx,dl
c0021802:	51                   	push   ecx
c0021803:	51                   	push   ecx
c0021804:	52                   	push   edx
c0021805:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002180b:	e8 aa ef ff ff       	call   c00207ba <IDE::getBase(unsigned char)>
c0021810:	b9 00 01 00 00       	mov    ecx,0x100
c0021815:	89 c2                	mov    edx,eax
c0021817:	fc                   	cld    
c0021818:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002181b:	83 c4 10             	add    esp,0x10
c002181e:	eb d3                	jmp    c00217f3 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021820:	31 ff                	xor    edi,edi
c0021822:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021827:	74 16                	je     c002183f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021829:	50                   	push   eax
c002182a:	50                   	push   eax
c002182b:	31 c0                	xor    eax,eax
c002182d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021832:	0f 94 c0             	sete   al
c0021835:	50                   	push   eax
c0021836:	53                   	push   ebx
c0021837:	e8 f6 fb ff ff       	call   c0021432 <ATA::flush(bool)>
c002183c:	83 c4 10             	add    esp,0x10
c002183f:	83 c4 2c             	add    esp,0x2c
c0021842:	89 f8                	mov    eax,edi
c0021844:	5b                   	pop    ebx
c0021845:	5e                   	pop    esi
c0021846:	5f                   	pop    edi
c0021847:	5d                   	pop    ebp
c0021848:	c3                   	ret    
c0021849:	90                   	nop

c002184a <ATA::read(unsigned long long, int, void*)>:
c002184a:	57                   	push   edi
c002184b:	b8 04 00 00 00       	mov    eax,0x4
c0021850:	56                   	push   esi
c0021851:	53                   	push   ebx
c0021852:	83 ec 10             	sub    esp,0x10
c0021855:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021859:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002185d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021860:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021864:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021868:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002186e:	77 3b                	ja     c00218ab <ATA::read(unsigned long long, int, void*)+0x61>
c0021870:	b8 06 00 00 00       	mov    eax,0x6
c0021875:	85 d2                	test   edx,edx
c0021877:	74 32                	je     c00218ab <ATA::read(unsigned long long, int, void*)+0x61>
c0021879:	50                   	push   eax
c002187a:	50                   	push   eax
c002187b:	6a 00                	push   0x0
c002187d:	52                   	push   edx
c002187e:	53                   	push   ebx
c002187f:	57                   	push   edi
c0021880:	56                   	push   esi
c0021881:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021885:	e8 42 fc ff ff       	call   c00214cc <ATA::access(unsigned long long, int, void*, bool)>
c002188a:	83 c4 20             	add    esp,0x20
c002188d:	85 c0                	test   eax,eax
c002188f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021893:	75 11                	jne    c00218a6 <ATA::read(unsigned long long, int, void*)+0x5c>
c0021895:	01 1d 08 c6 02 c0    	add    DWORD PTR ds:0xc002c608,ebx
c002189b:	e8 7a e8 fe ff       	call   c001011a <VgaText::updateDiskUsage()>
c00218a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218a4:	eb 05                	jmp    c00218ab <ATA::read(unsigned long long, int, void*)+0x61>
c00218a6:	b8 01 00 00 00       	mov    eax,0x1
c00218ab:	83 c4 10             	add    esp,0x10
c00218ae:	5b                   	pop    ebx
c00218af:	5e                   	pop    esi
c00218b0:	5f                   	pop    edi
c00218b1:	c3                   	ret    

c00218b2 <ATA::write(unsigned long long, int, void*)>:
c00218b2:	57                   	push   edi
c00218b3:	b8 04 00 00 00       	mov    eax,0x4
c00218b8:	56                   	push   esi
c00218b9:	53                   	push   ebx
c00218ba:	83 ec 10             	sub    esp,0x10
c00218bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00218c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218c5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00218c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00218d0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00218d6:	77 3b                	ja     c0021913 <ATA::write(unsigned long long, int, void*)+0x61>
c00218d8:	b8 06 00 00 00       	mov    eax,0x6
c00218dd:	85 d2                	test   edx,edx
c00218df:	74 32                	je     c0021913 <ATA::write(unsigned long long, int, void*)+0x61>
c00218e1:	50                   	push   eax
c00218e2:	50                   	push   eax
c00218e3:	6a 01                	push   0x1
c00218e5:	52                   	push   edx
c00218e6:	53                   	push   ebx
c00218e7:	57                   	push   edi
c00218e8:	56                   	push   esi
c00218e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218ed:	e8 da fb ff ff       	call   c00214cc <ATA::access(unsigned long long, int, void*, bool)>
c00218f2:	83 c4 20             	add    esp,0x20
c00218f5:	85 c0                	test   eax,eax
c00218f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218fb:	75 11                	jne    c002190e <ATA::write(unsigned long long, int, void*)+0x5c>
c00218fd:	01 1d 04 c6 02 c0    	add    DWORD PTR ds:0xc002c604,ebx
c0021903:	e8 12 e8 fe ff       	call   c001011a <VgaText::updateDiskUsage()>
c0021908:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002190c:	eb 05                	jmp    c0021913 <ATA::write(unsigned long long, int, void*)+0x61>
c002190e:	b8 01 00 00 00       	mov    eax,0x1
c0021913:	83 c4 10             	add    esp,0x10
c0021916:	5b                   	pop    ebx
c0021917:	5e                   	pop    esi
c0021918:	5f                   	pop    edi
c0021919:	c3                   	ret    

c002191a <ATA::detectCHS()>:
c002191a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002191e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021924:	c1 e0 06             	shl    eax,0x6
c0021927:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002192d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021937:	c7 44 24 04 a3 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028fa3
c002193f:	e9 a1 70 ff ff       	jmp    c00189e5 <Krnl::panic(char const*)>

c0021944 <ATA::open(int, int, void*)>:
c0021944:	53                   	push   ebx
c0021945:	83 ec 08             	sub    esp,0x8
c0021948:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002194c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021950:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021954:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002195a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021960:	c1 e0 06             	shl    eax,0x6
c0021963:	01 d0                	add    eax,edx
c0021965:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002196c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021972:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021979:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021983:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021989:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021990:	75 0c                	jne    c002199e <ATA::open(int, int, void*)+0x5a>
c0021992:	83 ec 0c             	sub    esp,0xc
c0021995:	53                   	push   ebx
c0021996:	e8 7f ff ff ff       	call   c002191a <ATA::detectCHS()>
c002199b:	83 c4 10             	add    esp,0x10
c002199e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00219a4:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00219aa:	c1 e0 06             	shl    eax,0x6
c00219ad:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00219b4:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00219be:	d1 e8                	shr    eax,1
c00219c0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00219c6:	6a 04                	push   0x4
c00219c8:	6a 0c                	push   0xc
c00219ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219d1:	50                   	push   eax
c00219d2:	52                   	push   edx
c00219d3:	e8 f4 ed ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219d8:	90                   	nop
c00219d9:	90                   	nop
c00219da:	6a 00                	push   0x0
c00219dc:	6a 0c                	push   0xc
c00219de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219e5:	50                   	push   eax
c00219e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00219ec:	e8 db ed ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219f1:	83 c4 14             	add    esp,0x14
c00219f4:	53                   	push   ebx
c00219f5:	e8 c6 20 ff ff       	call   c0013ac0 <PhysicalDisk::startCache()>
c00219fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219fd:	e8 74 40 ff ff       	call   c0015a76 <createPartitionsForDisk(PhysicalDisk*)>
c0021a02:	31 c0                	xor    eax,eax
c0021a04:	83 c4 18             	add    esp,0x18
c0021a07:	5b                   	pop    ebx
c0021a08:	c3                   	ret    
c0021a09:	90                   	nop

c0021a0a <ATAPI::write(unsigned long long, int, void*)>:
c0021a0a:	b8 03 00 00 00       	mov    eax,0x3
c0021a0f:	c3                   	ret    

c0021a10 <ATAPI::close(int, int, void*)>:
c0021a10:	83 ec 0c             	sub    esp,0xc
c0021a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a17:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021a1d:	85 c0                	test   eax,eax
c0021a1f:	74 0c                	je     c0021a2d <ATAPI::close(int, int, void*)+0x1d>
c0021a21:	83 ec 0c             	sub    esp,0xc
c0021a24:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a26:	50                   	push   eax
c0021a27:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021a2a:	83 c4 10             	add    esp,0x10
c0021a2d:	31 c0                	xor    eax,eax
c0021a2f:	83 c4 0c             	add    esp,0xc
c0021a32:	c3                   	ret    
c0021a33:	90                   	nop

c0021a34 <ATAPI::ATAPI()>:
c0021a34:	83 ec 0c             	sub    esp,0xc
c0021a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3b:	83 ec 04             	sub    esp,0x4
c0021a3e:	68 00 08 00 00       	push   0x800
c0021a43:	68 ec 8f 02 c0       	push   0xc0028fec
c0021a48:	50                   	push   eax
c0021a49:	e8 0a 20 ff ff       	call   c0013a58 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a4e:	83 c4 10             	add    esp,0x10
c0021a51:	ba 2c 90 02 c0       	mov    edx,0xc002902c
c0021a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a5a:	89 10                	mov    DWORD PTR [eax],edx
c0021a5c:	90                   	nop
c0021a5d:	83 c4 0c             	add    esp,0xc
c0021a60:	c3                   	ret    
c0021a61:	90                   	nop

c0021a62 <ATAPI::readyForCommand()>:
c0021a62:	56                   	push   esi
c0021a63:	53                   	push   ebx
c0021a64:	31 db                	xor    ebx,ebx
c0021a66:	50                   	push   eax
c0021a67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a6b:	50                   	push   eax
c0021a6c:	6a 0c                	push   0xc
c0021a6e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021a75:	50                   	push   eax
c0021a76:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021a7c:	e8 0b ee ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0021a81:	83 c4 10             	add    esp,0x10
c0021a84:	a8 88                	test   al,0x88
c0021a86:	74 23                	je     c0021aab <ATAPI::readyForCommand()+0x49>
c0021a88:	43                   	inc    ebx
c0021a89:	83 fb 63             	cmp    ebx,0x63
c0021a8c:	7e dd                	jle    c0021a6b <ATAPI::readyForCommand()+0x9>
c0021a8e:	51                   	push   ecx
c0021a8f:	51                   	push   ecx
c0021a90:	6a 00                	push   0x0
c0021a92:	68 40 42 0f 00       	push   0xf4240
c0021a97:	e8 e4 a3 ff ff       	call   c001be80 <nanoSleep(unsigned long long)>
c0021a9c:	83 c4 10             	add    esp,0x10
c0021a9f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021aa5:	75 c4                	jne    c0021a6b <ATAPI::readyForCommand()+0x9>
c0021aa7:	31 c0                	xor    eax,eax
c0021aa9:	eb 02                	jmp    c0021aad <ATAPI::readyForCommand()+0x4b>
c0021aab:	b0 01                	mov    al,0x1
c0021aad:	5a                   	pop    edx
c0021aae:	5b                   	pop    ebx
c0021aaf:	5e                   	pop    esi
c0021ab0:	c3                   	ret    
c0021ab1:	90                   	nop

c0021ab2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021ab2:	55                   	push   ebp
c0021ab3:	57                   	push   edi
c0021ab4:	56                   	push   esi
c0021ab5:	53                   	push   ebx
c0021ab6:	83 ec 20             	sub    esp,0x20
c0021ab9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021abd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021ac1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021ac5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021ac9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021acd:	6a 01                	push   0x1
c0021acf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ad6:	50                   	push   eax
c0021ad7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021add:	e8 f6 ee ff ff       	call   c00209d8 <IDE::enableIRQs(unsigned char, bool)>
c0021ae2:	5e                   	pop    esi
c0021ae3:	58                   	pop    eax
c0021ae4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021aeb:	50                   	push   eax
c0021aec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021af2:	e8 af ec ff ff       	call   c00207a6 <IDE::prepareInterrupt(unsigned char)>
c0021af7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021afa:	e8 63 ff ff ff       	call   c0021a62 <ATAPI::readyForCommand()>
c0021aff:	83 c4 10             	add    esp,0x10
c0021b02:	84 c0                	test   al,al
c0021b04:	75 0a                	jne    c0021b10 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021b06:	bb 01 00 00 00       	mov    ebx,0x1
c0021b0b:	e9 57 02 00 00       	jmp    c0021d67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021b10:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021b16:	c1 e0 04             	shl    eax,0x4
c0021b19:	0f b6 c0             	movzx  eax,al
c0021b1c:	50                   	push   eax
c0021b1d:	6a 06                	push   0x6
c0021b1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b26:	50                   	push   eax
c0021b27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b2d:	e8 9a ec ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b32:	6a 00                	push   0x0
c0021b34:	6a 01                	push   0x1
c0021b36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b3d:	50                   	push   eax
c0021b3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b44:	e8 83 ec ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b49:	83 c4 20             	add    esp,0x20
c0021b4c:	0f b6 c3             	movzx  eax,bl
c0021b4f:	0f b6 df             	movzx  ebx,bh
c0021b52:	50                   	push   eax
c0021b53:	6a 04                	push   0x4
c0021b55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b5c:	50                   	push   eax
c0021b5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b63:	e8 64 ec ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b68:	53                   	push   ebx
c0021b69:	6a 05                	push   0x5
c0021b6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b72:	50                   	push   eax
c0021b73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b79:	e8 4e ec ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b7e:	83 c4 20             	add    esp,0x20
c0021b81:	68 a0 00 00 00       	push   0xa0
c0021b86:	6a 07                	push   0x7
c0021b88:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b8f:	50                   	push   eax
c0021b90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b96:	e8 31 ec ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b9b:	83 c4 0c             	add    esp,0xc
c0021b9e:	6a 01                	push   0x1
c0021ba0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ba7:	50                   	push   eax
c0021ba8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bae:	e8 c5 f7 ff ff       	call   c0021378 <IDE::polling(unsigned char, unsigned int)>
c0021bb3:	83 c4 10             	add    esp,0x10
c0021bb6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021bbc:	84 c0                	test   al,al
c0021bbe:	74 23                	je     c0021be3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021bc0:	0f b6 d8             	movzx  ebx,al
c0021bc3:	0f b6 d2             	movzx  edx,dl
c0021bc6:	53                   	push   ebx
c0021bc7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021bce:	50                   	push   eax
c0021bcf:	52                   	push   edx
c0021bd0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bd6:	e8 07 f6 ff ff       	call   c00211e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021bdb:	83 c4 10             	add    esp,0x10
c0021bde:	e9 84 01 00 00       	jmp    c0021d67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021be3:	0f b6 d2             	movzx  edx,dl
c0021be6:	53                   	push   ebx
c0021be7:	53                   	push   ebx
c0021be8:	52                   	push   edx
c0021be9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bef:	e8 c6 eb ff ff       	call   c00207ba <IDE::getBase(unsigned char)>
c0021bf4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021bf8:	b9 06 00 00 00       	mov    ecx,0x6
c0021bfd:	89 c2                	mov    edx,eax
c0021bff:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021c02:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021c06:	83 c4 10             	add    esp,0x10
c0021c09:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021c0f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021c16:	85 db                	test   ebx,ebx
c0021c18:	0f 84 ec 00 00 00    	je     c0021d0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021c1e:	51                   	push   ecx
c0021c1f:	51                   	push   ecx
c0021c20:	52                   	push   edx
c0021c21:	50                   	push   eax
c0021c22:	e8 13 ed ff ff       	call   c002093a <IDE::waitInterrupt(unsigned char)>
c0021c27:	83 c4 10             	add    esp,0x10
c0021c2a:	84 c0                	test   al,al
c0021c2c:	0f 84 d4 fe ff ff    	je     c0021b06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021c32:	56                   	push   esi
c0021c33:	56                   	push   esi
c0021c34:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c3b:	50                   	push   eax
c0021c3c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c42:	e8 5f eb ff ff       	call   c00207a6 <IDE::prepareInterrupt(unsigned char)>
c0021c47:	83 c4 0c             	add    esp,0xc
c0021c4a:	6a 04                	push   0x4
c0021c4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c53:	50                   	push   eax
c0021c54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c5a:	e8 2d ec ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0021c5f:	83 c4 0c             	add    esp,0xc
c0021c62:	89 c6                	mov    esi,eax
c0021c64:	6a 05                	push   0x5
c0021c66:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c6d:	50                   	push   eax
c0021c6e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c74:	e8 13 ec ff ff       	call   c002088c <IDE::read(unsigned char, unsigned char)>
c0021c79:	89 f1                	mov    ecx,esi
c0021c7b:	0f b6 c0             	movzx  eax,al
c0021c7e:	0f b6 f1             	movzx  esi,cl
c0021c81:	c1 e0 08             	shl    eax,0x8
c0021c84:	09 c6                	or     esi,eax
c0021c86:	d1 fe                	sar    esi,1
c0021c88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021c8c:	83 c4 10             	add    esp,0x10
c0021c8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021c94:	74 41                	je     c0021cd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021c96:	31 c9                	xor    ecx,ecx
c0021c98:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021c9e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021ca5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021ca9:	75 0a                	jne    c0021cb5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021cab:	01 c9                	add    ecx,ecx
c0021cad:	01 cd                	add    ebp,ecx
c0021caf:	4b                   	dec    ebx
c0021cb0:	e9 54 ff ff ff       	jmp    c0021c09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021cb5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021cba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021cbe:	51                   	push   ecx
c0021cbf:	51                   	push   ecx
c0021cc0:	52                   	push   edx
c0021cc1:	50                   	push   eax
c0021cc2:	e8 f3 ea ff ff       	call   c00207ba <IDE::getBase(unsigned char)>
c0021cc7:	89 c2                	mov    edx,eax
c0021cc9:	89 f0                	mov    eax,esi
c0021ccb:	66 ef                	out    dx,ax
c0021ccd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021cd1:	83 c4 10             	add    esp,0x10
c0021cd4:	41                   	inc    ecx
c0021cd5:	eb c1                	jmp    c0021c98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021cd7:	31 f6                	xor    esi,esi
c0021cd9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021cdf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021ce6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021cea:	75 06                	jne    c0021cf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021cec:	01 f6                	add    esi,esi
c0021cee:	01 f5                	add    ebp,esi
c0021cf0:	eb bd                	jmp    c0021caf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021cf2:	51                   	push   ecx
c0021cf3:	51                   	push   ecx
c0021cf4:	52                   	push   edx
c0021cf5:	50                   	push   eax
c0021cf6:	e8 bf ea ff ff       	call   c00207ba <IDE::getBase(unsigned char)>
c0021cfb:	89 c2                	mov    edx,eax
c0021cfd:	66 ed                	in     ax,dx
c0021cff:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021d04:	83 c4 10             	add    esp,0x10
c0021d07:	46                   	inc    esi
c0021d08:	eb cf                	jmp    c0021cd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021d0a:	51                   	push   ecx
c0021d0b:	51                   	push   ecx
c0021d0c:	52                   	push   edx
c0021d0d:	50                   	push   eax
c0021d0e:	e8 27 ec ff ff       	call   c002093a <IDE::waitInterrupt(unsigned char)>
c0021d13:	83 c4 10             	add    esp,0x10
c0021d16:	84 c0                	test   al,al
c0021d18:	0f 84 e8 fd ff ff    	je     c0021b06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021d1e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021d23:	52                   	push   edx
c0021d24:	52                   	push   edx
c0021d25:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d2c:	50                   	push   eax
c0021d2d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d33:	e8 6e ea ff ff       	call   c00207a6 <IDE::prepareInterrupt(unsigned char)>
c0021d38:	83 c4 10             	add    esp,0x10
c0021d3b:	50                   	push   eax
c0021d3c:	50                   	push   eax
c0021d3d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d44:	50                   	push   eax
c0021d45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d4b:	e8 6a ea ff ff       	call   c00207ba <IDE::getBase(unsigned char)>
c0021d50:	8d 50 07             	lea    edx,[eax+0x7]
c0021d53:	ec                   	in     al,dx
c0021d54:	83 c4 10             	add    esp,0x10
c0021d57:	a8 88                	test   al,0x88
c0021d59:	74 0a                	je     c0021d65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021d5b:	4b                   	dec    ebx
c0021d5c:	75 dd                	jne    c0021d3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021d5e:	bb 02 00 00 00       	mov    ebx,0x2
c0021d63:	eb 02                	jmp    c0021d67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021d65:	31 db                	xor    ebx,ebx
c0021d67:	83 c4 1c             	add    esp,0x1c
c0021d6a:	89 d8                	mov    eax,ebx
c0021d6c:	5b                   	pop    ebx
c0021d6d:	5e                   	pop    esi
c0021d6e:	5f                   	pop    edi
c0021d6f:	5d                   	pop    ebp
c0021d70:	c3                   	ret    
c0021d71:	90                   	nop

c0021d72 <ATAPI::diskRemoved()>:
c0021d72:	83 ec 18             	sub    esp,0x18
c0021d75:	68 f7 8f 02 c0       	push   0xc0028ff7
c0021d7a:	e8 c8 04 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021d7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d83:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021d8a:	83 c4 1c             	add    esp,0x1c
c0021d8d:	c3                   	ret    

c0021d8e <ATAPI::eject()>:
c0021d8e:	57                   	push   edi
c0021d8f:	b9 03 00 00 00       	mov    ecx,0x3
c0021d94:	53                   	push   ebx
c0021d95:	83 ec 14             	sub    esp,0x14
c0021d98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021d9c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021da0:	fc                   	cld    
c0021da1:	31 c0                	xor    eax,eax
c0021da3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021da5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021daa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021daf:	50                   	push   eax
c0021db0:	50                   	push   eax
c0021db1:	6a 00                	push   0x0
c0021db3:	6a 00                	push   0x0
c0021db5:	6a 00                	push   0x0
c0021db7:	6a 02                	push   0x2
c0021db9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021dbd:	50                   	push   eax
c0021dbe:	53                   	push   ebx
c0021dbf:	e8 ee fc ff ff       	call   c0021ab2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021dc4:	83 c4 14             	add    esp,0x14
c0021dc7:	53                   	push   ebx
c0021dc8:	e8 a5 ff ff ff       	call   c0021d72 <ATAPI::diskRemoved()>
c0021dcd:	83 c4 24             	add    esp,0x24
c0021dd0:	5b                   	pop    ebx
c0021dd1:	5f                   	pop    edi
c0021dd2:	c3                   	ret    
c0021dd3:	90                   	nop

c0021dd4 <ATAPI::diskInserted()>:
c0021dd4:	53                   	push   ebx
c0021dd5:	83 ec 14             	sub    esp,0x14
c0021dd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021ddc:	68 0d 90 02 c0       	push   0xc002900d
c0021de1:	e8 61 04 ff ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0021de6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021ded:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021df0:	e8 cb 1c ff ff       	call   c0013ac0 <PhysicalDisk::startCache()>
c0021df5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021df9:	83 c4 18             	add    esp,0x18
c0021dfc:	5b                   	pop    ebx
c0021dfd:	e9 74 3c ff ff       	jmp    c0015a76 <createPartitionsForDisk(PhysicalDisk*)>

c0021e02 <ATAPI::detectMedia()>:
c0021e02:	56                   	push   esi
c0021e03:	53                   	push   ebx
c0021e04:	83 ec 28             	sub    esp,0x28
c0021e07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021e0b:	6a 0c                	push   0xc
c0021e0d:	6a 00                	push   0x0
c0021e0f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021e13:	56                   	push   esi
c0021e14:	e8 ac e8 fd ff       	call   c00006c5 <memset>
c0021e19:	58                   	pop    eax
c0021e1a:	5a                   	pop    edx
c0021e1b:	6a 00                	push   0x0
c0021e1d:	6a 00                	push   0x0
c0021e1f:	6a 00                	push   0x0
c0021e21:	6a 00                	push   0x0
c0021e23:	56                   	push   esi
c0021e24:	53                   	push   ebx
c0021e25:	e8 88 fc ff ff       	call   c0021ab2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e2a:	83 c4 1c             	add    esp,0x1c
c0021e2d:	6a 0c                	push   0xc
c0021e2f:	6a 00                	push   0x0
c0021e31:	56                   	push   esi
c0021e32:	e8 8e e8 fd ff       	call   c00006c5 <memset>
c0021e37:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021e3c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021e41:	59                   	pop    ecx
c0021e42:	58                   	pop    eax
c0021e43:	6a 01                	push   0x1
c0021e45:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e49:	50                   	push   eax
c0021e4a:	6a 00                	push   0x0
c0021e4c:	6a 12                	push   0x12
c0021e4e:	56                   	push   esi
c0021e4f:	53                   	push   ebx
c0021e50:	e8 5d fc ff ff       	call   c0021ab2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e55:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021e59:	83 c4 20             	add    esp,0x20
c0021e5c:	83 e0 7f             	and    eax,0x7f
c0021e5f:	3c 70                	cmp    al,0x70
c0021e61:	74 15                	je     c0021e78 <ATAPI::detectMedia()+0x76>
c0021e63:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e6a:	75 0c                	jne    c0021e78 <ATAPI::detectMedia()+0x76>
c0021e6c:	83 ec 0c             	sub    esp,0xc
c0021e6f:	53                   	push   ebx
c0021e70:	e8 5f ff ff ff       	call   c0021dd4 <ATAPI::diskInserted()>
c0021e75:	83 c4 10             	add    esp,0x10
c0021e78:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e7c:	83 e0 0f             	and    eax,0xf
c0021e7f:	3c 02                	cmp    al,0x2
c0021e81:	75 1b                	jne    c0021e9e <ATAPI::detectMedia()+0x9c>
c0021e83:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021e88:	75 2d                	jne    c0021eb7 <ATAPI::detectMedia()+0xb5>
c0021e8a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e91:	74 24                	je     c0021eb7 <ATAPI::detectMedia()+0xb5>
c0021e93:	83 ec 0c             	sub    esp,0xc
c0021e96:	53                   	push   ebx
c0021e97:	e8 d6 fe ff ff       	call   c0021d72 <ATAPI::diskRemoved()>
c0021e9c:	eb 16                	jmp    c0021eb4 <ATAPI::detectMedia()+0xb2>
c0021e9e:	84 c0                	test   al,al
c0021ea0:	75 15                	jne    c0021eb7 <ATAPI::detectMedia()+0xb5>
c0021ea2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021ea9:	75 0c                	jne    c0021eb7 <ATAPI::detectMedia()+0xb5>
c0021eab:	83 ec 0c             	sub    esp,0xc
c0021eae:	53                   	push   ebx
c0021eaf:	e8 20 ff ff ff       	call   c0021dd4 <ATAPI::diskInserted()>
c0021eb4:	83 c4 10             	add    esp,0x10
c0021eb7:	83 c4 24             	add    esp,0x24
c0021eba:	5b                   	pop    ebx
c0021ebb:	5e                   	pop    esi
c0021ebc:	c3                   	ret    
c0021ebd:	90                   	nop

c0021ebe <ATAPI::open(int, int, void*)>:
c0021ebe:	53                   	push   ebx
c0021ebf:	83 ec 08             	sub    esp,0x8
c0021ec2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ec6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021eca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ece:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021ed4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021eda:	c1 e0 06             	shl    eax,0x6
c0021edd:	01 d0                	add    eax,edx
c0021edf:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021ee6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021eec:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021ef3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021efd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021f03:	6a 04                	push   0x4
c0021f05:	6a 0c                	push   0xc
c0021f07:	51                   	push   ecx
c0021f08:	52                   	push   edx
c0021f09:	e8 be e8 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f0e:	90                   	nop
c0021f0f:	90                   	nop
c0021f10:	6a 00                	push   0x0
c0021f12:	6a 0c                	push   0xc
c0021f14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021f1b:	50                   	push   eax
c0021f1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021f22:	e8 a5 e8 ff ff       	call   c00207cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f27:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021f2e:	83 c4 14             	add    esp,0x14
c0021f31:	53                   	push   ebx
c0021f32:	e8 cb fe ff ff       	call   c0021e02 <ATAPI::detectMedia()>
c0021f37:	31 c0                	xor    eax,eax
c0021f39:	83 c4 18             	add    esp,0x18
c0021f3c:	5b                   	pop    ebx
c0021f3d:	c3                   	ret    

c0021f3e <ATAPI::read(unsigned long long, int, void*)>:
c0021f3e:	55                   	push   ebp
c0021f3f:	57                   	push   edi
c0021f40:	56                   	push   esi
c0021f41:	53                   	push   ebx
c0021f42:	83 ec 1c             	sub    esp,0x1c
c0021f45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f49:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f4d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021f51:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f58:	74 41                	je     c0021f9b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021f5a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021f5e:	b9 03 00 00 00       	mov    ecx,0x3
c0021f63:	fc                   	cld    
c0021f64:	31 c0                	xor    eax,eax
c0021f66:	86 fb                	xchg   bl,bh
c0021f68:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021f6a:	c1 c3 10             	rol    ebx,0x10
c0021f6d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021f72:	89 e8                	mov    eax,ebp
c0021f74:	86 fb                	xchg   bl,bh
c0021f76:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021f7a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0021f7e:	50                   	push   eax
c0021f7f:	50                   	push   eax
c0021f80:	55                   	push   ebp
c0021f81:	c1 e5 0b             	shl    ebp,0xb
c0021f84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f88:	6a 00                	push   0x0
c0021f8a:	55                   	push   ebp
c0021f8b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f8f:	50                   	push   eax
c0021f90:	56                   	push   esi
c0021f91:	e8 1c fb ff ff       	call   c0021ab2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f96:	83 c4 20             	add    esp,0x20
c0021f99:	eb 1a                	jmp    c0021fb5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0021f9b:	83 ec 0c             	sub    esp,0xc
c0021f9e:	56                   	push   esi
c0021f9f:	e8 5e fe ff ff       	call   c0021e02 <ATAPI::detectMedia()>
c0021fa4:	83 c4 10             	add    esp,0x10
c0021fa7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021fae:	75 aa                	jne    c0021f5a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021fb0:	b8 02 00 00 00       	mov    eax,0x2
c0021fb5:	83 c4 1c             	add    esp,0x1c
c0021fb8:	5b                   	pop    ebx
c0021fb9:	5e                   	pop    esi
c0021fba:	5f                   	pop    edi
c0021fbb:	5d                   	pop    ebp
c0021fbc:	c3                   	ret    
c0021fbd:	90                   	nop

c0021fbe <AVX::open(int, int, void*)>:
c0021fbe:	83 ec 0c             	sub    esp,0xc
c0021fc1:	e8 12 10 00 00       	call   c0022fd8 <avxInit>
c0021fc6:	b8 00 00 00 00       	mov    eax,0x0
c0021fcb:	83 c4 0c             	add    esp,0xc
c0021fce:	c3                   	ret    
c0021fcf:	90                   	nop

c0021fd0 <AVX::close(int, int, void*)>:
c0021fd0:	83 ec 0c             	sub    esp,0xc
c0021fd3:	e8 01 10 00 00       	call   c0022fd9 <avxClose>
c0021fd8:	b8 00 00 00 00       	mov    eax,0x0
c0021fdd:	83 c4 0c             	add    esp,0xc
c0021fe0:	c3                   	ret    
c0021fe1:	90                   	nop

c0021fe2 <AVX::available()>:
c0021fe2:	83 ec 0c             	sub    esp,0xc
c0021fe5:	e8 e6 0f 00 00       	call   c0022fd0 <avxDetect>
c0021fea:	85 c0                	test   eax,eax
c0021fec:	0f 95 c0             	setne  al
c0021fef:	83 c4 0c             	add    esp,0xc
c0021ff2:	c3                   	ret    
c0021ff3:	90                   	nop

c0021ff4 <AVX::save(void*)>:
c0021ff4:	83 ec 0c             	sub    esp,0xc
c0021ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021ffb:	83 ec 0c             	sub    esp,0xc
c0021ffe:	50                   	push   eax
c0021fff:	e8 d2 0f 00 00       	call   c0022fd6 <avxSave>
c0022004:	83 c4 10             	add    esp,0x10
c0022007:	90                   	nop
c0022008:	83 c4 0c             	add    esp,0xc
c002200b:	c3                   	ret    

c002200c <AVX::load(void*)>:
c002200c:	83 ec 0c             	sub    esp,0xc
c002200f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022013:	83 ec 0c             	sub    esp,0xc
c0022016:	50                   	push   eax
c0022017:	e8 bb 0f 00 00       	call   c0022fd7 <avxLoad>
c002201c:	83 c4 10             	add    esp,0x10
c002201f:	90                   	nop
c0022020:	83 c4 0c             	add    esp,0xc
c0022023:	c3                   	ret    

c0022024 <AVX::AVX()>:
c0022024:	83 ec 0c             	sub    esp,0xc
c0022027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202b:	83 ec 08             	sub    esp,0x8
c002202e:	68 58 90 02 c0       	push   0xc0029058
c0022033:	50                   	push   eax
c0022034:	e8 fd 1a ff ff       	call   c0013b36 <FPU::FPU(char const*)>
c0022039:	83 c4 10             	add    esp,0x10
c002203c:	ba 68 90 02 c0       	mov    edx,0xc0029068
c0022041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022045:	89 10                	mov    DWORD PTR [eax],edx
c0022047:	90                   	nop
c0022048:	83 c4 0c             	add    esp,0xc
c002204b:	c3                   	ret    

c002204c <MMX::available()>:
c002204c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022051:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022057:	83 e0 20             	and    eax,0x20
c002205a:	84 c0                	test   al,al
c002205c:	0f 95 c0             	setne  al
c002205f:	c3                   	ret    

c0022060 <MMX::open(int, int, void*)>:
c0022060:	83 ec 0c             	sub    esp,0xc
c0022063:	e8 e4 0f 00 00       	call   c002304c <x87Init>
c0022068:	b8 00 00 00 00       	mov    eax,0x0
c002206d:	83 c4 0c             	add    esp,0xc
c0022070:	c3                   	ret    
c0022071:	90                   	nop

c0022072 <MMX::close(int, int, void*)>:
c0022072:	83 ec 0c             	sub    esp,0xc
c0022075:	e8 ec 0f 00 00       	call   c0023066 <x87Close>
c002207a:	b8 00 00 00 00       	mov    eax,0x0
c002207f:	83 c4 0c             	add    esp,0xc
c0022082:	c3                   	ret    
c0022083:	90                   	nop

c0022084 <MMX::save(void*)>:
c0022084:	83 ec 0c             	sub    esp,0xc
c0022087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002208b:	83 ec 0c             	sub    esp,0xc
c002208e:	50                   	push   eax
c002208f:	e8 ad 0f 00 00       	call   c0023041 <x87Save>
c0022094:	83 c4 10             	add    esp,0x10
c0022097:	90                   	nop
c0022098:	83 c4 0c             	add    esp,0xc
c002209b:	c3                   	ret    

c002209c <MMX::load(void*)>:
c002209c:	83 ec 0c             	sub    esp,0xc
c002209f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220a3:	83 ec 0c             	sub    esp,0xc
c00220a6:	50                   	push   eax
c00220a7:	e8 9b 0f 00 00       	call   c0023047 <x87Load>
c00220ac:	83 c4 10             	add    esp,0x10
c00220af:	90                   	nop
c00220b0:	83 c4 0c             	add    esp,0xc
c00220b3:	c3                   	ret    

c00220b4 <MMX::MMX()>:
c00220b4:	83 ec 0c             	sub    esp,0xc
c00220b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220bb:	83 ec 08             	sub    esp,0x8
c00220be:	68 98 90 02 c0       	push   0xc0029098
c00220c3:	50                   	push   eax
c00220c4:	e8 6d 1a ff ff       	call   c0013b36 <FPU::FPU(char const*)>
c00220c9:	83 c4 10             	add    esp,0x10
c00220cc:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c00220d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d5:	89 10                	mov    DWORD PTR [eax],edx
c00220d7:	90                   	nop
c00220d8:	83 c4 0c             	add    esp,0xc
c00220db:	c3                   	ret    

c00220dc <SSE::open(int, int, void*)>:
c00220dc:	83 ec 0c             	sub    esp,0xc
c00220df:	e8 23 0f 00 00       	call   c0023007 <sseInit>
c00220e4:	b8 00 00 00 00       	mov    eax,0x0
c00220e9:	83 c4 0c             	add    esp,0xc
c00220ec:	c3                   	ret    
c00220ed:	90                   	nop

c00220ee <SSE::close(int, int, void*)>:
c00220ee:	83 ec 0c             	sub    esp,0xc
c00220f1:	e8 21 0f 00 00       	call   c0023017 <sseClose>
c00220f6:	b8 00 00 00 00       	mov    eax,0x0
c00220fb:	83 c4 0c             	add    esp,0xc
c00220fe:	c3                   	ret    
c00220ff:	90                   	nop

c0022100 <SSE::available()>:
c0022100:	83 ec 1c             	sub    esp,0x1c
c0022103:	e8 d8 0e 00 00       	call   c0022fe0 <sseDetect>
c0022108:	85 c0                	test   eax,eax
c002210a:	0f 95 c0             	setne  al
c002210d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022111:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022115:	83 c4 1c             	add    esp,0x1c
c0022118:	c3                   	ret    
c0022119:	90                   	nop

c002211a <SSE::save(void*)>:
c002211a:	83 ec 0c             	sub    esp,0xc
c002211d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022121:	83 ec 0c             	sub    esp,0xc
c0022124:	50                   	push   eax
c0022125:	e8 d1 0e 00 00       	call   c0022ffb <sseSave>
c002212a:	83 c4 10             	add    esp,0x10
c002212d:	90                   	nop
c002212e:	83 c4 0c             	add    esp,0xc
c0022131:	c3                   	ret    

c0022132 <SSE::load(void*)>:
c0022132:	83 ec 0c             	sub    esp,0xc
c0022135:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022139:	83 ec 0c             	sub    esp,0xc
c002213c:	50                   	push   eax
c002213d:	e8 bf 0e 00 00       	call   c0023001 <sseLoad>
c0022142:	83 c4 10             	add    esp,0x10
c0022145:	90                   	nop
c0022146:	83 c4 0c             	add    esp,0xc
c0022149:	c3                   	ret    

c002214a <SSE::SSE()>:
c002214a:	83 ec 0c             	sub    esp,0xc
c002214d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022151:	83 ec 08             	sub    esp,0x8
c0022154:	68 d8 90 02 c0       	push   0xc00290d8
c0022159:	50                   	push   eax
c002215a:	e8 d7 19 ff ff       	call   c0013b36 <FPU::FPU(char const*)>
c002215f:	83 c4 10             	add    esp,0x10
c0022162:	ba e8 90 02 c0       	mov    edx,0xc00290e8
c0022167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216b:	89 10                	mov    DWORD PTR [eax],edx
c002216d:	90                   	nop
c002216e:	83 c4 0c             	add    esp,0xc
c0022171:	c3                   	ret    

c0022172 <x87::open(int, int, void*)>:
c0022172:	83 ec 0c             	sub    esp,0xc
c0022175:	e8 d2 0e 00 00       	call   c002304c <x87Init>
c002217a:	b8 00 00 00 00       	mov    eax,0x0
c002217f:	83 c4 0c             	add    esp,0xc
c0022182:	c3                   	ret    
c0022183:	90                   	nop

c0022184 <x87::close(int, int, void*)>:
c0022184:	83 ec 0c             	sub    esp,0xc
c0022187:	e8 da 0e 00 00       	call   c0023066 <x87Close>
c002218c:	b8 00 00 00 00       	mov    eax,0x0
c0022191:	83 c4 0c             	add    esp,0xc
c0022194:	c3                   	ret    
c0022195:	90                   	nop

c0022196 <x87::available()>:
c0022196:	83 ec 0c             	sub    esp,0xc
c0022199:	e8 88 0e 00 00       	call   c0023026 <x87Detect>
c002219e:	85 c0                	test   eax,eax
c00221a0:	0f 95 c0             	setne  al
c00221a3:	83 c4 0c             	add    esp,0xc
c00221a6:	c3                   	ret    
c00221a7:	90                   	nop

c00221a8 <x87::save(void*)>:
c00221a8:	83 ec 0c             	sub    esp,0xc
c00221ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221af:	83 ec 0c             	sub    esp,0xc
c00221b2:	50                   	push   eax
c00221b3:	e8 89 0e 00 00       	call   c0023041 <x87Save>
c00221b8:	83 c4 10             	add    esp,0x10
c00221bb:	90                   	nop
c00221bc:	83 c4 0c             	add    esp,0xc
c00221bf:	c3                   	ret    

c00221c0 <x87::load(void*)>:
c00221c0:	83 ec 0c             	sub    esp,0xc
c00221c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221c7:	83 ec 0c             	sub    esp,0xc
c00221ca:	50                   	push   eax
c00221cb:	e8 77 0e 00 00       	call   c0023047 <x87Load>
c00221d0:	83 c4 10             	add    esp,0x10
c00221d3:	90                   	nop
c00221d4:	83 c4 0c             	add    esp,0xc
c00221d7:	c3                   	ret    

c00221d8 <x87::x87()>:
c00221d8:	83 ec 0c             	sub    esp,0xc
c00221db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221df:	83 ec 08             	sub    esp,0x8
c00221e2:	68 18 91 02 c0       	push   0xc0029118
c00221e7:	50                   	push   eax
c00221e8:	e8 49 19 ff ff       	call   c0013b36 <FPU::FPU(char const*)>
c00221ed:	83 c4 10             	add    esp,0x10
c00221f0:	ba 28 91 02 c0       	mov    edx,0xc0029128
c00221f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f9:	89 10                	mov    DWORD PTR [eax],edx
c00221fb:	90                   	nop
c00221fc:	83 c4 0c             	add    esp,0xc
c00221ff:	c3                   	ret    

c0022200 <APIC::disable()>:
c0022200:	90                   	nop
c0022201:	c3                   	ret    

c0022202 <APIC::close(int, int, void*)>:
c0022202:	55                   	push   ebp
c0022203:	89 e5                	mov    ebp,esp
c0022205:	83 ec 08             	sub    esp,0x8
c0022208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002220b:	8b 00                	mov    eax,DWORD PTR [eax]
c002220d:	83 c0 3c             	add    eax,0x3c
c0022210:	8b 00                	mov    eax,DWORD PTR [eax]
c0022212:	83 ec 0c             	sub    esp,0xc
c0022215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022218:	ff d0                	call   eax
c002221a:	83 c4 10             	add    esp,0x10
c002221d:	b8 00 00 00 00       	mov    eax,0x0
c0022222:	c9                   	leave  
c0022223:	c3                   	ret    

c0022224 <IOAPIC::close(int, int, void*)>:
c0022224:	b8 00 00 00 00       	mov    eax,0x0
c0022229:	c3                   	ret    

c002222a <APIC::io_wait()>:
c002222a:	eb 00                	jmp    c002222c <APIC::io_wait()+0x2>
c002222c:	eb 00                	jmp    c002222e <APIC::io_wait()+0x4>
c002222e:	90                   	nop
c002222f:	c3                   	ret    

c0022230 <APIC::getBase()>:
c0022230:	55                   	push   ebp
c0022231:	89 e5                	mov    ebp,esp
c0022233:	83 ec 18             	sub    esp,0x18
c0022236:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002223b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022241:	83 e0 08             	and    eax,0x8
c0022244:	84 c0                	test   al,al
c0022246:	75 07                	jne    c002224f <APIC::getBase()+0x1f>
c0022248:	b8 00 00 00 00       	mov    eax,0x0
c002224d:	eb 21                	jmp    c0022270 <APIC::getBase()+0x40>
c002224f:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022254:	83 ec 08             	sub    esp,0x8
c0022257:	6a 1b                	push   0x1b
c0022259:	50                   	push   eax
c002225a:	e8 7f c4 fe ff       	call   c000e6de <Computer::rdmsr(unsigned int)>
c002225f:	83 c4 10             	add    esp,0x10
c0022262:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022265:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022268:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002226b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022270:	c9                   	leave  
c0022271:	c3                   	ret    

c0022272 <APIC::eoi(unsigned char)>:
c0022272:	55                   	push   ebp
c0022273:	89 e5                	mov    ebp,esp
c0022275:	83 ec 28             	sub    esp,0x28
c0022278:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002227b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002227e:	83 ec 0c             	sub    esp,0xc
c0022281:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022284:	e8 a7 ff ff ff       	call   c0022230 <APIC::getBase()>
c0022289:	83 c4 10             	add    esp,0x10
c002228c:	05 b0 00 00 00       	add    eax,0xb0
c0022291:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022294:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022297:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002229d:	90                   	nop
c002229e:	c9                   	leave  
c002229f:	c3                   	ret    

c00222a0 <APIC::open(int, int, void*)>:
c00222a0:	55                   	push   ebp
c00222a1:	89 e5                	mov    ebp,esp
c00222a3:	57                   	push   edi
c00222a4:	56                   	push   esi
c00222a5:	53                   	push   ebx
c00222a6:	83 ec 1c             	sub    esp,0x1c
c00222a9:	83 ec 0c             	sub    esp,0xc
c00222ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222af:	e8 7c ff ff ff       	call   c0022230 <APIC::getBase()>
c00222b4:	83 c4 10             	add    esp,0x10
c00222b7:	05 f0 00 00 00       	add    eax,0xf0
c00222bc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00222bf:	83 ec 0c             	sub    esp,0xc
c00222c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222c5:	e8 66 ff ff ff       	call   c0022230 <APIC::getBase()>
c00222ca:	83 c4 10             	add    esp,0x10
c00222cd:	89 c2                	mov    edx,eax
c00222cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222d2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00222d8:	0f b6 f8             	movzx  edi,al
c00222db:	89 d0                	mov    eax,edx
c00222dd:	ba 00 00 00 00       	mov    edx,0x0
c00222e2:	89 c1                	mov    ecx,eax
c00222e4:	80 e5 ff             	and    ch,0xff
c00222e7:	89 cb                	mov    ebx,ecx
c00222e9:	0f b6 f2             	movzx  esi,dl
c00222ec:	89 d8                	mov    eax,ebx
c00222ee:	89 f2                	mov    edx,esi
c00222f0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00222f3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00222f6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00222fa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00222fe:	83 e0 00             	and    eax,0x0
c0022301:	09 d0                	or     eax,edx
c0022303:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002230a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022310:	8d 50 01             	lea    edx,[eax+0x1]
c0022313:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022316:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002231c:	0f b6 d0             	movzx  edx,al
c002231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022322:	83 c2 08             	add    edx,0x8
c0022325:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022329:	0f b6 c9             	movzx  ecx,cl
c002232c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022332:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022336:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022339:	8b 00                	mov    eax,DWORD PTR [eax]
c002233b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002233e:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c0022345:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022348:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002234b:	89 10                	mov    DWORD PTR [eax],edx
c002234d:	b8 00 00 00 00       	mov    eax,0x0
c0022352:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022355:	5b                   	pop    ebx
c0022356:	5e                   	pop    esi
c0022357:	5f                   	pop    edi
c0022358:	5d                   	pop    ebp
c0022359:	c3                   	ret    

c002235a <IOAPIC::IOAPIC()>:
c002235a:	83 ec 0c             	sub    esp,0xc
c002235d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022361:	83 ec 08             	sub    esp,0x8
c0022364:	68 58 91 02 c0       	push   0xc0029158
c0022369:	50                   	push   eax
c002236a:	e8 d3 14 ff ff       	call   c0013842 <Device::Device(char const*)>
c002236f:	83 c4 10             	add    esp,0x10
c0022372:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0022377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237b:	89 10                	mov    DWORD PTR [eax],edx
c002237d:	90                   	nop
c002237e:	83 c4 0c             	add    esp,0xc
c0022381:	c3                   	ret    

c0022382 <APIC::APIC()>:
c0022382:	53                   	push   ebx
c0022383:	83 ec 18             	sub    esp,0x18
c0022386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002238a:	83 ec 08             	sub    esp,0x8
c002238d:	68 60 91 02 c0       	push   0xc0029160
c0022392:	50                   	push   eax
c0022393:	e8 02 1c ff ff       	call   c0013f9a <InterruptController::InterruptController(char const*)>
c0022398:	83 c4 10             	add    esp,0x10
c002239b:	ba 38 92 02 c0       	mov    edx,0xc0029238
c00223a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a4:	89 10                	mov    DWORD PTR [eax],edx
c00223a6:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00223ab:	83 f0 01             	xor    eax,0x1
c00223ae:	84 c0                	test   al,al
c00223b0:	0f 84 96 00 00 00    	je     c002244c <APIC::APIC()+0xca>
c00223b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00223bb:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c00223c0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00223c4:	73 7f                	jae    c0022445 <APIC::APIC()+0xc3>
c00223c6:	83 ec 0c             	sub    esp,0xc
c00223c9:	68 68 01 00 00       	push   0x168
c00223ce:	e8 85 fd fe ff       	call   c0012158 <operator new(unsigned long)>
c00223d3:	83 c4 10             	add    esp,0x10
c00223d6:	89 c3                	mov    ebx,eax
c00223d8:	83 ec 0c             	sub    esp,0xc
c00223db:	53                   	push   ebx
c00223dc:	e8 79 ff ff ff       	call   c002235a <IOAPIC::IOAPIC()>
c00223e1:	83 c4 10             	add    esp,0x10
c00223e4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00223e8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00223ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223f1:	89 14 85 40 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39c0],edx
c00223f8:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00223fd:	40                   	inc    eax
c00223fe:	a3 20 c6 02 c0       	mov    ds:0xc002c620,eax
c0022403:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022408:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002240e:	83 ec 08             	sub    esp,0x8
c0022411:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022415:	50                   	push   eax
c0022416:	e8 37 12 ff ff       	call   c0013652 <Device::addChild(Device*)>
c002241b:	83 c4 10             	add    esp,0x10
c002241e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022422:	8b 00                	mov    eax,DWORD PTR [eax]
c0022424:	83 c0 08             	add    eax,0x8
c0022427:	8b 00                	mov    eax,DWORD PTR [eax]
c0022429:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002242e:	6a 00                	push   0x0
c0022430:	6a 00                	push   0x0
c0022432:	52                   	push   edx
c0022433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022437:	ff d0                	call   eax
c0022439:	83 c4 10             	add    esp,0x10
c002243c:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022440:	e9 76 ff ff ff       	jmp    c00223bb <APIC::APIC()+0x39>
c0022445:	c6 05 60 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c660,0x1
c002244c:	90                   	nop
c002244d:	83 c4 18             	add    esp,0x18
c0022450:	5b                   	pop    ebx
c0022451:	c3                   	ret    

c0022452 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022452:	55                   	push   ebp
c0022453:	89 e5                	mov    ebp,esp
c0022455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022458:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002245e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022461:	72 1d                	jb     c0022480 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022466:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002246c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002246f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0022475:	01 d0                	add    eax,edx
c0022477:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002247a:	73 04                	jae    c0022480 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002247c:	b0 01                	mov    al,0x1
c002247e:	eb 02                	jmp    c0022482 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022480:	b0 00                	mov    al,0x0
c0022482:	5d                   	pop    ebp
c0022483:	c3                   	ret    

c0022484 <IOAPIC::read(int)>:
c0022484:	55                   	push   ebp
c0022485:	89 e5                	mov    ebp,esp
c0022487:	83 ec 10             	sub    esp,0x10
c002248a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002248d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022493:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022496:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022499:	0f b6 d0             	movzx  edx,al
c002249c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002249f:	89 10                	mov    DWORD PTR [eax],edx
c00224a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224a4:	83 c0 10             	add    eax,0x10
c00224a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00224a9:	c9                   	leave  
c00224aa:	c3                   	ret    
c00224ab:	90                   	nop

c00224ac <IOAPIC::open(int, int, void*)>:
c00224ac:	55                   	push   ebp
c00224ad:	89 e5                	mov    ebp,esp
c00224af:	57                   	push   edi
c00224b0:	56                   	push   esi
c00224b1:	53                   	push   ebx
c00224b2:	83 ec 0c             	sub    esp,0xc
c00224b5:	83 ec 0c             	sub    esp,0xc
c00224b8:	68 8b 91 02 c0       	push   0xc002918b
c00224bd:	e8 85 fd fe ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00224c2:	83 c4 10             	add    esp,0x10
c00224c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00224cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224da:	8b 14 85 e0 ac 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5320]
c00224e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224e4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00224ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224f3:	8b 14 85 60 ad 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd52a0]
c00224fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224fd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022506:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002250c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002250f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022515:	0f b6 f8             	movzx  edi,al
c0022518:	89 d0                	mov    eax,edx
c002251a:	ba 00 00 00 00       	mov    edx,0x0
c002251f:	89 c1                	mov    ecx,eax
c0022521:	80 e5 ff             	and    ch,0xff
c0022524:	89 cb                	mov    ebx,ecx
c0022526:	0f b6 f2             	movzx  esi,dl
c0022529:	89 d8                	mov    eax,ebx
c002252b:	89 f2                	mov    edx,esi
c002252d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022530:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022533:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022537:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002253b:	83 e0 00             	and    eax,0x0
c002253e:	09 d0                	or     eax,edx
c0022540:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022547:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002254d:	8d 50 01             	lea    edx,[eax+0x1]
c0022550:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022553:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022559:	0f b6 d0             	movzx  edx,al
c002255c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002255f:	83 c2 08             	add    edx,0x8
c0022562:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022566:	0f b6 c9             	movzx  ecx,cl
c0022569:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002256f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022573:	83 ec 08             	sub    esp,0x8
c0022576:	6a 01                	push   0x1
c0022578:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002257b:	e8 04 ff ff ff       	call   c0022484 <IOAPIC::read(int)>
c0022580:	83 c4 10             	add    esp,0x10
c0022583:	c1 f8 10             	sar    eax,0x10
c0022586:	0f b6 c0             	movzx  eax,al
c0022589:	8d 50 01             	lea    edx,[eax+0x1]
c002258c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002258f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0022595:	b8 00 00 00 00       	mov    eax,0x0
c002259a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002259d:	5b                   	pop    ebx
c002259e:	5e                   	pop    esi
c002259f:	5f                   	pop    edi
c00225a0:	5d                   	pop    ebp
c00225a1:	c3                   	ret    

c00225a2 <IOAPIC::write(int, int)>:
c00225a2:	55                   	push   ebp
c00225a3:	89 e5                	mov    ebp,esp
c00225a5:	83 ec 10             	sub    esp,0x10
c00225a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00225b1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00225b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225b7:	0f b6 d0             	movzx  edx,al
c00225ba:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225bd:	89 10                	mov    DWORD PTR [eax],edx
c00225bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225c2:	8d 50 10             	lea    edx,[eax+0x10]
c00225c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225c8:	89 02                	mov    DWORD PTR [edx],eax
c00225ca:	90                   	nop
c00225cb:	c9                   	leave  
c00225cc:	c3                   	ret    
c00225cd:	90                   	nop

c00225ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c00225ce:	55                   	push   ebp
c00225cf:	89 e5                	mov    ebp,esp
c00225d1:	83 ec 20             	sub    esp,0x20
c00225d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225d7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00225da:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00225dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225e0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00225e3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00225e6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00225e9:	88 d0                	mov    al,dl
c00225eb:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c00225ee:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c00225f2:	83 c0 08             	add    eax,0x8
c00225f5:	01 c0                	add    eax,eax
c00225f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00225fa:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c00225fe:	83 c0 08             	add    eax,0x8
c0022601:	01 c0                	add    eax,eax
c0022603:	40                   	inc    eax
c0022604:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0022607:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c002260a:	50                   	push   eax
c002260b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002260e:	e8 71 fe ff ff       	call   c0022484 <IOAPIC::read(int)>
c0022613:	83 c4 08             	add    esp,0x8
c0022616:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022619:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c0022620:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022623:	c1 e0 18             	shl    eax,0x18
c0022626:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022629:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002262c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c002262f:	52                   	push   edx
c0022630:	50                   	push   eax
c0022631:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022634:	e8 69 ff ff ff       	call   c00225a2 <IOAPIC::write(int, int)>
c0022639:	83 c4 0c             	add    esp,0xc
c002263c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002263f:	50                   	push   eax
c0022640:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022643:	e8 3c fe ff ff       	call   c0022484 <IOAPIC::read(int)>
c0022648:	83 c4 08             	add    esp,0x8
c002264b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002264e:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c0022655:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c002265c:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c0022663:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c002266a:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c002266e:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c0022671:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0022674:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022677:	52                   	push   edx
c0022678:	50                   	push   eax
c0022679:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002267c:	e8 21 ff ff ff       	call   c00225a2 <IOAPIC::write(int, int)>
c0022681:	83 c4 0c             	add    esp,0xc
c0022684:	90                   	nop
c0022685:	c9                   	leave  
c0022686:	c3                   	ret    
c0022687:	90                   	nop

c0022688 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022688:	55                   	push   ebp
c0022689:	89 e5                	mov    ebp,esp
c002268b:	56                   	push   esi
c002268c:	53                   	push   ebx
c002268d:	83 ec 20             	sub    esp,0x20
c0022690:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022693:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022696:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c002269a:	74 28                	je     c00226c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c002269c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00226a0:	7f 12                	jg     c00226b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c00226a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00226a5:	05 e0 96 02 c0       	add    eax,0xc00296e0
c00226aa:	8a 00                	mov    al,BYTE PTR [eax]
c00226ac:	0f b6 c0             	movzx  eax,al
c00226af:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00226b2:	eb 10                	jmp    c00226c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226b4:	83 ec 0c             	sub    esp,0xc
c00226b7:	68 9c 91 02 c0       	push   0xc002919c
c00226bc:	e8 24 63 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00226c1:	83 c4 10             	add    esp,0x10
c00226c4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00226c8:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226cd:	83 ec 08             	sub    esp,0x8
c00226d0:	50                   	push   eax
c00226d1:	68 d4 91 02 c0       	push   0xc00291d4
c00226d6:	e8 6c fb fe ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00226db:	83 c4 10             	add    esp,0x10
c00226de:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00226e5:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226ea:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00226ed:	7d 58                	jge    c0022747 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c00226ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00226f2:	8b 04 85 40 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd39c0]
c00226f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00226fc:	83 ec 08             	sub    esp,0x8
c00226ff:	52                   	push   edx
c0022700:	50                   	push   eax
c0022701:	e8 4c fd ff ff       	call   c0022452 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0022706:	83 c4 10             	add    esp,0x10
c0022709:	84 c0                	test   al,al
c002270b:	74 35                	je     c0022742 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c002270d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022710:	8b 1c 85 40 c6 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd39c0]
c0022717:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002271a:	83 c0 20             	add    eax,0x20
c002271d:	0f b6 f0             	movzx  esi,al
c0022720:	e8 39 51 ff ff       	call   c001785e <CPU::getNumber()>
c0022725:	99                   	cdq    
c0022726:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022729:	0f b6 c9             	movzx  ecx,cl
c002272c:	83 ec 0c             	sub    esp,0xc
c002272f:	56                   	push   esi
c0022730:	52                   	push   edx
c0022731:	50                   	push   eax
c0022732:	51                   	push   ecx
c0022733:	53                   	push   ebx
c0022734:	e8 95 fe ff ff       	call   c00225ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c0022739:	83 c4 20             	add    esp,0x20
c002273c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0022740:	eb 05                	jmp    c0022747 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c0022742:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0022745:	eb 9e                	jmp    c00226e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c0022747:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002274a:	83 f0 01             	xor    eax,0x1
c002274d:	84 c0                	test   al,al
c002274f:	74 10                	je     c0022761 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c0022751:	83 ec 0c             	sub    esp,0xc
c0022754:	68 eb 91 02 c0       	push   0xc00291eb
c0022759:	e8 87 62 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c002275e:	83 c4 10             	add    esp,0x10
c0022761:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022765:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002276c:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c0022770:	7f 65                	jg     c00227d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c0022772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022775:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022778:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002277f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022782:	01 ca                	add    edx,ecx
c0022784:	83 c2 54             	add    edx,0x54
c0022787:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002278b:	85 c0                	test   eax,eax
c002278d:	75 43                	jne    c00227d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c002278f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022792:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022795:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002279c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002279f:	01 ca                	add    edx,ecx
c00227a1:	8d 4a 54             	lea    ecx,[edx+0x54]
c00227a4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00227a7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227b1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227b8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227bb:	01 ca                	add    edx,ecx
c00227bd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00227c3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00227c6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00227cd:	83 e8 20             	sub    eax,0x20
c00227d0:	eb 1a                	jmp    c00227ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c00227d2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00227d5:	eb 95                	jmp    c002276c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c00227d7:	83 ec 0c             	sub    esp,0xc
c00227da:	68 f8 91 02 c0       	push   0xc00291f8
c00227df:	e8 01 62 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00227e4:	83 c4 10             	add    esp,0x10
c00227e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00227ec:	8d 65 f8             	lea    esp,[ebp-0x8]
c00227ef:	5b                   	pop    ebx
c00227f0:	5e                   	pop    esi
c00227f1:	5d                   	pop    ebp
c00227f2:	c3                   	ret    
c00227f3:	90                   	nop

c00227f4 <PIC::disable()>:
c00227f4:	55                   	push   ebp
c00227f5:	89 e5                	mov    ebp,esp
c00227f7:	83 ec 10             	sub    esp,0x10
c00227fa:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022800:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022804:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022807:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002280b:	ee                   	out    dx,al
c002280c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022812:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022816:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022819:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002281d:	ee                   	out    dx,al
c002281e:	90                   	nop
c002281f:	c9                   	leave  
c0022820:	c3                   	ret    
c0022821:	90                   	nop

c0022822 <PIC::close(int, int, void*)>:
c0022822:	55                   	push   ebp
c0022823:	89 e5                	mov    ebp,esp
c0022825:	83 ec 08             	sub    esp,0x8
c0022828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002282b:	8b 00                	mov    eax,DWORD PTR [eax]
c002282d:	83 c0 3c             	add    eax,0x3c
c0022830:	8b 00                	mov    eax,DWORD PTR [eax]
c0022832:	83 ec 0c             	sub    esp,0xc
c0022835:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022838:	ff d0                	call   eax
c002283a:	83 c4 10             	add    esp,0x10
c002283d:	b8 00 00 00 00       	mov    eax,0x0
c0022842:	c9                   	leave  
c0022843:	c3                   	ret    

c0022844 <PIC::PIC()>:
c0022844:	83 ec 0c             	sub    esp,0xc
c0022847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002284b:	83 ec 08             	sub    esp,0x8
c002284e:	68 a4 92 02 c0       	push   0xc00292a4
c0022853:	50                   	push   eax
c0022854:	e8 41 17 ff ff       	call   c0013f9a <InterruptController::InterruptController(char const*)>
c0022859:	83 c4 10             	add    esp,0x10
c002285c:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0022861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022865:	89 10                	mov    DWORD PTR [eax],edx
c0022867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022871:	0f b6 d0             	movzx  edx,al
c0022874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022878:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002287f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022889:	0f b6 d0             	movzx  edx,al
c002288c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022890:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022899:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002289f:	8d 50 01             	lea    edx,[eax+0x1]
c00228a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228a6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228ac:	0f b6 d0             	movzx  edx,al
c00228af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00228b7:	83 e1 3f             	and    ecx,0x3f
c00228ba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00228be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228c8:	0f b6 d0             	movzx  edx,al
c00228cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00228d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228e0:	0f b6 d0             	movzx  edx,al
c00228e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00228ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228f6:	8d 50 01             	lea    edx,[eax+0x1]
c00228f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228fd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022903:	0f b6 d0             	movzx  edx,al
c0022906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002290e:	83 e1 3f             	and    ecx,0x3f
c0022911:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022915:	90                   	nop
c0022916:	83 c4 0c             	add    esp,0xc
c0022919:	c3                   	ret    

c002291a <PIC::ioWait()>:
c002291a:	eb 00                	jmp    c002291c <PIC::ioWait()+0x2>
c002291c:	eb 00                	jmp    c002291e <PIC::ioWait()+0x4>
c002291e:	90                   	nop
c002291f:	c3                   	ret    

c0022920 <PIC::getIRQReg(int)>:
c0022920:	55                   	push   ebp
c0022921:	89 e5                	mov    ebp,esp
c0022923:	83 ec 10             	sub    esp,0x10
c0022926:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022929:	0f b6 c0             	movzx  eax,al
c002292c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022932:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022935:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022938:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002293c:	ee                   	out    dx,al
c002293d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022940:	0f b6 c0             	movzx  eax,al
c0022943:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022949:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002294c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002294f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022953:	ee                   	out    dx,al
c0022954:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002295a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002295e:	89 c2                	mov    edx,eax
c0022960:	ec                   	in     al,dx
c0022961:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022964:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022967:	0f b6 c0             	movzx  eax,al
c002296a:	c1 e0 08             	shl    eax,0x8
c002296d:	89 c1                	mov    ecx,eax
c002296f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022975:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022979:	89 c2                	mov    edx,eax
c002297b:	ec                   	in     al,dx
c002297c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002297f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022982:	0f b6 c0             	movzx  eax,al
c0022985:	09 c8                	or     eax,ecx
c0022987:	c9                   	leave  
c0022988:	c3                   	ret    
c0022989:	90                   	nop

c002298a <PIC::eoi(unsigned char)>:
c002298a:	55                   	push   ebp
c002298b:	89 e5                	mov    ebp,esp
c002298d:	83 ec 14             	sub    esp,0x14
c0022990:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022993:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022996:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002299a:	75 1e                	jne    c00229ba <PIC::eoi(unsigned char)+0x30>
c002299c:	6a 0b                	push   0xb
c002299e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229a1:	e8 7a ff ff ff       	call   c0022920 <PIC::getIRQReg(int)>
c00229a6:	83 c4 08             	add    esp,0x8
c00229a9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00229ad:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00229b1:	25 80 00 00 00       	and    eax,0x80
c00229b6:	85 c0                	test   eax,eax
c00229b8:	74 5f                	je     c0022a19 <PIC::eoi(unsigned char)+0x8f>
c00229ba:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00229be:	75 2d                	jne    c00229ed <PIC::eoi(unsigned char)+0x63>
c00229c0:	6a 0b                	push   0xb
c00229c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229c5:	e8 56 ff ff ff       	call   c0022920 <PIC::getIRQReg(int)>
c00229ca:	83 c4 08             	add    esp,0x8
c00229cd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00229d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00229d4:	66 85 c0             	test   ax,ax
c00229d7:	78 14                	js     c00229ed <PIC::eoi(unsigned char)+0x63>
c00229d9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00229df:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00229e3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00229e6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00229ea:	ee                   	out    dx,al
c00229eb:	eb 2d                	jmp    c0022a1a <PIC::eoi(unsigned char)+0x90>
c00229ed:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00229f1:	76 12                	jbe    c0022a05 <PIC::eoi(unsigned char)+0x7b>
c00229f3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00229f9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00229fd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022a00:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022a04:	ee                   	out    dx,al
c0022a05:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022a0b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022a0f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022a12:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022a16:	ee                   	out    dx,al
c0022a17:	eb 01                	jmp    c0022a1a <PIC::eoi(unsigned char)+0x90>
c0022a19:	90                   	nop
c0022a1a:	c9                   	leave  
c0022a1b:	c3                   	ret    

c0022a1c <PIC::remap()>:
c0022a1c:	55                   	push   ebp
c0022a1d:	89 e5                	mov    ebp,esp
c0022a1f:	83 ec 48             	sub    esp,0x48
c0022a22:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022a29:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022a30:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022a36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022a39:	89 c2                	mov    edx,eax
c0022a3b:	ec                   	in     al,dx
c0022a3c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022a3f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022a42:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022a45:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022a4b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022a4e:	89 c2                	mov    edx,eax
c0022a50:	ec                   	in     al,dx
c0022a51:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022a54:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022a57:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022a5a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022a60:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022a64:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022a67:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022a6a:	ee                   	out    dx,al
c0022a6b:	83 ec 0c             	sub    esp,0xc
c0022a6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a71:	e8 a4 fe ff ff       	call   c002291a <PIC::ioWait()>
c0022a76:	83 c4 10             	add    esp,0x10
c0022a79:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022a7f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022a83:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022a86:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022a89:	ee                   	out    dx,al
c0022a8a:	83 ec 0c             	sub    esp,0xc
c0022a8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a90:	e8 85 fe ff ff       	call   c002291a <PIC::ioWait()>
c0022a95:	83 c4 10             	add    esp,0x10
c0022a98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022a9b:	0f b6 c0             	movzx  eax,al
c0022a9e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022aa4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022aa7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022aaa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022aad:	ee                   	out    dx,al
c0022aae:	83 ec 0c             	sub    esp,0xc
c0022ab1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ab4:	e8 61 fe ff ff       	call   c002291a <PIC::ioWait()>
c0022ab9:	83 c4 10             	add    esp,0x10
c0022abc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022abf:	0f b6 c0             	movzx  eax,al
c0022ac2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022ac8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022acb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022ace:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022ad1:	ee                   	out    dx,al
c0022ad2:	83 ec 0c             	sub    esp,0xc
c0022ad5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ad8:	e8 3d fe ff ff       	call   c002291a <PIC::ioWait()>
c0022add:	83 c4 10             	add    esp,0x10
c0022ae0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022ae6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022aea:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022aed:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022af0:	ee                   	out    dx,al
c0022af1:	83 ec 0c             	sub    esp,0xc
c0022af4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022af7:	e8 1e fe ff ff       	call   c002291a <PIC::ioWait()>
c0022afc:	83 c4 10             	add    esp,0x10
c0022aff:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022b05:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022b09:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022b0c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022b0f:	ee                   	out    dx,al
c0022b10:	83 ec 0c             	sub    esp,0xc
c0022b13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b16:	e8 ff fd ff ff       	call   c002291a <PIC::ioWait()>
c0022b1b:	83 c4 10             	add    esp,0x10
c0022b1e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022b24:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022b28:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022b2b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022b2e:	ee                   	out    dx,al
c0022b2f:	83 ec 0c             	sub    esp,0xc
c0022b32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b35:	e8 e0 fd ff ff       	call   c002291a <PIC::ioWait()>
c0022b3a:	83 c4 10             	add    esp,0x10
c0022b3d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022b43:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022b47:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022b4a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022b4d:	ee                   	out    dx,al
c0022b4e:	83 ec 0c             	sub    esp,0xc
c0022b51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b54:	e8 c1 fd ff ff       	call   c002291a <PIC::ioWait()>
c0022b59:	83 c4 10             	add    esp,0x10
c0022b5c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022b60:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022b66:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022b69:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022b6c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022b6f:	ee                   	out    dx,al
c0022b70:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022b74:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022b7a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022b7d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022b80:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022b83:	ee                   	out    dx,al
c0022b84:	90                   	nop
c0022b85:	c9                   	leave  
c0022b86:	c3                   	ret    
c0022b87:	90                   	nop

c0022b88 <PIC::open(int, int, void*)>:
c0022b88:	55                   	push   ebp
c0022b89:	89 e5                	mov    ebp,esp
c0022b8b:	83 ec 18             	sub    esp,0x18
c0022b8e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022b94:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022b98:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022b9b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022b9f:	ee                   	out    dx,al
c0022ba0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022ba6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022baa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022bad:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022bb1:	ee                   	out    dx,al
c0022bb2:	83 ec 0c             	sub    esp,0xc
c0022bb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bb8:	e8 5f fe ff ff       	call   c0022a1c <PIC::remap()>
c0022bbd:	83 c4 10             	add    esp,0x10
c0022bc0:	b8 00 00 00 00       	mov    eax,0x0
c0022bc5:	c9                   	leave  
c0022bc6:	c3                   	ret    
c0022bc7:	90                   	nop

c0022bc8 <APICTimer::close(int, int, void*)>:
c0022bc8:	b8 00 00 00 00       	mov    eax,0x0
c0022bcd:	c3                   	ret    

c0022bce <apicTimerHandler(regs*, void*)>:
c0022bce:	83 ec 0c             	sub    esp,0xc
c0022bd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bd7:	99                   	cdq    
c0022bd8:	52                   	push   edx
c0022bd9:	50                   	push   eax
c0022bda:	6a 00                	push   0x0
c0022bdc:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022be1:	e8 76 07 00 00       	call   c002335c <__udivdi3>
c0022be6:	83 c4 10             	add    esp,0x10
c0022be9:	83 ec 08             	sub    esp,0x8
c0022bec:	52                   	push   edx
c0022bed:	50                   	push   eax
c0022bee:	e8 a4 31 ff ff       	call   c0015d97 <timerHandler(unsigned long long)>
c0022bf3:	83 c4 10             	add    esp,0x10
c0022bf6:	90                   	nop
c0022bf7:	83 c4 0c             	add    esp,0xc
c0022bfa:	c3                   	ret    
c0022bfb:	90                   	nop

c0022bfc <APICTimer::write(int)>:
c0022bfc:	53                   	push   ebx
c0022bfd:	83 ec 28             	sub    esp,0x28
c0022c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c04:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022c08:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c0e:	e8 4f 4c ff ff       	call   c0017862 <CPU::current()>
c0022c13:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022c19:	83 ec 0c             	sub    esp,0xc
c0022c1c:	50                   	push   eax
c0022c1d:	e8 0e f6 ff ff       	call   c0022230 <APIC::getBase()>
c0022c22:	83 c4 10             	add    esp,0x10
c0022c25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c29:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c2e:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c40:	05 e0 03 00 00       	add    eax,0x3e0
c0022c45:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022c4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c4f:	05 80 03 00 00       	add    eax,0x380
c0022c54:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022c5a:	fb                   	sti    
c0022c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c63:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022c68:	83 d2 00             	adc    edx,0x0
c0022c6b:	89 c1                	mov    ecx,eax
c0022c6d:	89 d3                	mov    ebx,edx
c0022c6f:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c74:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c7a:	39 c8                	cmp    eax,ecx
c0022c7c:	89 d0                	mov    eax,edx
c0022c7e:	19 d8                	sbb    eax,ebx
c0022c80:	73 02                	jae    c0022c84 <APICTimer::write(int)+0x88>
c0022c82:	eb d7                	jmp    c0022c5b <APICTimer::write(int)+0x5f>
c0022c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c88:	05 20 03 00 00       	add    eax,0x320
c0022c8d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022c93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c97:	05 90 03 00 00       	add    eax,0x390
c0022c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c9e:	f7 d0                	not    eax
c0022ca0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ca4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022ca8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cac:	ba 00 00 00 00       	mov    edx,0x0
c0022cb1:	f7 f3                	div    ebx
c0022cb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022cb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022cbb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022cc1:	0d 00 00 02 00       	or     eax,0x20000
c0022cc6:	89 c2                	mov    edx,eax
c0022cc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ccc:	05 20 03 00 00       	add    eax,0x320
c0022cd1:	89 10                	mov    DWORD PTR [eax],edx
c0022cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cd7:	05 e0 03 00 00       	add    eax,0x3e0
c0022cdc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022ce2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ce6:	05 80 03 00 00       	add    eax,0x380
c0022ceb:	89 c2                	mov    edx,eax
c0022ced:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cf1:	89 02                	mov    DWORD PTR [edx],eax
c0022cf3:	90                   	nop
c0022cf4:	83 c4 28             	add    esp,0x28
c0022cf7:	5b                   	pop    ebx
c0022cf8:	c3                   	ret    
c0022cf9:	90                   	nop

c0022cfa <APICTimer::open(int, int, void*)>:
c0022cfa:	57                   	push   edi
c0022cfb:	56                   	push   esi
c0022cfc:	53                   	push   ebx
c0022cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d03:	83 c0 24             	add    eax,0x24
c0022d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d08:	83 ec 08             	sub    esp,0x8
c0022d0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d13:	ff d0                	call   eax
c0022d15:	83 c4 10             	add    esp,0x10
c0022d18:	e8 45 4b ff ff       	call   c0017862 <CPU::current()>
c0022d1d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022d23:	83 ec 0c             	sub    esp,0xc
c0022d26:	50                   	push   eax
c0022d27:	e8 04 f5 ff ff       	call   c0022230 <APIC::getBase()>
c0022d2c:	83 c4 10             	add    esp,0x10
c0022d2f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d39:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d3f:	0f b6 f8             	movzx  edi,al
c0022d42:	89 d0                	mov    eax,edx
c0022d44:	ba 00 00 00 00       	mov    edx,0x0
c0022d49:	89 c1                	mov    ecx,eax
c0022d4b:	80 e5 ff             	and    ch,0xff
c0022d4e:	89 cb                	mov    ebx,ecx
c0022d50:	0f b6 f2             	movzx  esi,dl
c0022d53:	89 d8                	mov    eax,ebx
c0022d55:	89 f2                	mov    edx,esi
c0022d57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d5b:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022d5e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022d62:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022d66:	83 e0 00             	and    eax,0x0
c0022d69:	09 d0                	or     eax,edx
c0022d6b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d73:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d79:	8d 50 01             	lea    edx,[eax+0x1]
c0022d7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d80:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022d86:	0f b6 d0             	movzx  edx,al
c0022d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8d:	83 c2 08             	add    edx,0x8
c0022d90:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022d94:	0f b6 c9             	movzx  ecx,cl
c0022d97:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022d9d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022da9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022db3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022db7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022dbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022dc1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022dc7:	83 ec 0c             	sub    esp,0xc
c0022dca:	51                   	push   ecx
c0022dcb:	6a 01                	push   0x1
c0022dcd:	68 ce 2b 02 c0       	push   0xc0022bce
c0022dd2:	52                   	push   edx
c0022dd3:	50                   	push   eax
c0022dd4:	e8 cd 07 ff ff       	call   c00135a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022dd9:	83 c4 20             	add    esp,0x20
c0022ddc:	89 c2                	mov    edx,eax
c0022dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022de8:	b8 00 00 00 00       	mov    eax,0x0
c0022ded:	5b                   	pop    ebx
c0022dee:	5e                   	pop    esi
c0022def:	5f                   	pop    edi
c0022df0:	c3                   	ret    
c0022df1:	90                   	nop

c0022df2 <APICTimer::APICTimer()>:
c0022df2:	83 ec 0c             	sub    esp,0xc
c0022df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df9:	83 ec 08             	sub    esp,0x8
c0022dfc:	68 10 93 02 c0       	push   0xc0029310
c0022e01:	50                   	push   eax
c0022e02:	e8 01 2f ff ff       	call   c0015d08 <Timer::Timer(char const*)>
c0022e07:	83 c4 10             	add    esp,0x10
c0022e0a:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0022e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e13:	89 10                	mov    DWORD PTR [eax],edx
c0022e15:	90                   	nop
c0022e16:	83 c4 0c             	add    esp,0xc
c0022e19:	c3                   	ret    

c0022e1a <PIT::write(int)>:
c0022e1a:	83 ec 10             	sub    esp,0x10
c0022e1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e25:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022e2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e2f:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0022e34:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022e39:	99                   	cdq    
c0022e3a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022e3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e42:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022e49:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022e4e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022e52:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022e57:	ee                   	out    dx,al
c0022e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e5c:	0f b6 c0             	movzx  eax,al
c0022e5f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022e66:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022e6a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022e6e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022e73:	ee                   	out    dx,al
c0022e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e78:	c1 f8 08             	sar    eax,0x8
c0022e7b:	0f b6 c0             	movzx  eax,al
c0022e7e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022e85:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022e89:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022e8d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022e92:	ee                   	out    dx,al
c0022e93:	90                   	nop
c0022e94:	83 c4 10             	add    esp,0x10
c0022e97:	c3                   	ret    

c0022e98 <pitHandler(regs*, void*)>:
c0022e98:	83 ec 0c             	sub    esp,0xc
c0022e9b:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0022ea0:	99                   	cdq    
c0022ea1:	52                   	push   edx
c0022ea2:	50                   	push   eax
c0022ea3:	6a 00                	push   0x0
c0022ea5:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022eaa:	e8 ad 04 00 00       	call   c002335c <__udivdi3>
c0022eaf:	83 c4 10             	add    esp,0x10
c0022eb2:	83 ec 08             	sub    esp,0x8
c0022eb5:	52                   	push   edx
c0022eb6:	50                   	push   eax
c0022eb7:	e8 db 2e ff ff       	call   c0015d97 <timerHandler(unsigned long long)>
c0022ebc:	83 c4 10             	add    esp,0x10
c0022ebf:	90                   	nop
c0022ec0:	83 c4 0c             	add    esp,0xc
c0022ec3:	c3                   	ret    

c0022ec4 <PIT::open(int, int, void*)>:
c0022ec4:	83 ec 0c             	sub    esp,0xc
c0022ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ecd:	83 c0 24             	add    eax,0x24
c0022ed0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ed2:	83 ec 08             	sub    esp,0x8
c0022ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022edd:	ff d0                	call   eax
c0022edf:	83 c4 10             	add    esp,0x10
c0022ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee6:	83 ec 0c             	sub    esp,0xc
c0022ee9:	6a 00                	push   0x0
c0022eeb:	6a 01                	push   0x1
c0022eed:	68 98 2e 02 c0       	push   0xc0022e98
c0022ef2:	6a 00                	push   0x0
c0022ef4:	50                   	push   eax
c0022ef5:	e8 ac 06 ff ff       	call   c00135a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022efa:	83 c4 20             	add    esp,0x20
c0022efd:	89 c2                	mov    edx,eax
c0022eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f03:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022f09:	b8 00 00 00 00       	mov    eax,0x0
c0022f0e:	83 c4 0c             	add    esp,0xc
c0022f11:	c3                   	ret    

c0022f12 <PIT::close(int, int, void*)>:
c0022f12:	83 ec 0c             	sub    esp,0xc
c0022f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f19:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f27:	6a 01                	push   0x1
c0022f29:	68 98 2e 02 c0       	push   0xc0022e98
c0022f2e:	6a 00                	push   0x0
c0022f30:	50                   	push   eax
c0022f31:	e8 ce 06 ff ff       	call   c0013604 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022f36:	83 c4 10             	add    esp,0x10
c0022f39:	b8 00 00 00 00       	mov    eax,0x0
c0022f3e:	83 c4 0c             	add    esp,0xc
c0022f41:	c3                   	ret    

c0022f42 <PIT::PIT()>:
c0022f42:	83 ec 0c             	sub    esp,0xc
c0022f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f49:	83 ec 08             	sub    esp,0x8
c0022f4c:	68 4c 93 02 c0       	push   0xc002934c
c0022f51:	50                   	push   eax
c0022f52:	e8 b1 2d ff ff       	call   c0015d08 <Timer::Timer(char const*)>
c0022f57:	83 c4 10             	add    esp,0x10
c0022f5a:	ba 74 93 02 c0       	mov    edx,0xc0029374
c0022f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f63:	89 10                	mov    DWORD PTR [eax],edx
c0022f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f6f:	0f b6 d0             	movzx  edx,al
c0022f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f76:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f81:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f87:	0f b6 d0             	movzx  edx,al
c0022f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f8e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f9d:	8d 50 01             	lea    edx,[eax+0x1]
c0022fa0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fa4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022faa:	0f b6 d0             	movzx  edx,al
c0022fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022fb5:	83 e1 3f             	and    ecx,0x3f
c0022fb8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022fbc:	90                   	nop
c0022fbd:	83 c4 0c             	add    esp,0xc
c0022fc0:	c3                   	ret    
c0022fc1:	66 90                	xchg   ax,ax
c0022fc3:	66 90                	xchg   ax,ax
c0022fc5:	66 90                	xchg   ax,ax
c0022fc7:	66 90                	xchg   ax,ax
c0022fc9:	66 90                	xchg   ax,ax
c0022fcb:	66 90                	xchg   ax,ax
c0022fcd:	66 90                	xchg   ax,ax
c0022fcf:	90                   	nop

c0022fd0 <avxDetect>:
c0022fd0:	b8 00 00 00 00       	mov    eax,0x0
c0022fd5:	c3                   	ret    

c0022fd6 <avxSave>:
c0022fd6:	c3                   	ret    

c0022fd7 <avxLoad>:
c0022fd7:	c3                   	ret    

c0022fd8 <avxInit>:
c0022fd8:	c3                   	ret    

c0022fd9 <avxClose>:
c0022fd9:	c3                   	ret    
c0022fda:	66 90                	xchg   ax,ax
c0022fdc:	66 90                	xchg   ax,ax
c0022fde:	66 90                	xchg   ax,ax

c0022fe0 <sseDetect>:
c0022fe0:	b8 01 00 00 00       	mov    eax,0x1
c0022fe5:	0f a2                	cpuid  
c0022fe7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022fed:	74 06                	je     c0022ff5 <sseDetect.noSSE>
c0022fef:	b8 01 00 00 00       	mov    eax,0x1
c0022ff4:	c3                   	ret    

c0022ff5 <sseDetect.noSSE>:
c0022ff5:	b8 00 00 00 00       	mov    eax,0x0
c0022ffa:	c3                   	ret    

c0022ffb <sseSave>:
c0022ffb:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023000:	c3                   	ret    

c0023001 <sseLoad>:
c0023001:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023006:	c3                   	ret    

c0023007 <sseInit>:
c0023007:	e8 40 00 00 00       	call   c002304c <x87Init>
c002300c:	0f 20 e0             	mov    eax,cr4
c002300f:	66 0d 00 06          	or     ax,0x600
c0023013:	0f 22 e0             	mov    cr4,eax
c0023016:	c3                   	ret    

c0023017 <sseClose>:
c0023017:	c3                   	ret    
c0023018:	66 90                	xchg   ax,ax
c002301a:	66 90                	xchg   ax,ax
c002301c:	66 90                	xchg   ax,ax
c002301e:	66 90                	xchg   ax,ax

c0023020 <value_37F>:
c0023020:	7f 03                	jg     c0023025 <value_37A+0x1>

c0023022 <value_37E>:
c0023022:	7e 03                	jle    c0023027 <x87Detect+0x1>

c0023024 <value_37A>:
c0023024:	7a 03                	jp     c0023029 <x87Detect+0x3>

c0023026 <x87Detect>:
c0023026:	b8 01 00 00 00       	mov    eax,0x1
c002302b:	0f a2                	cpuid  
c002302d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023033:	74 06                	je     c002303b <x87Detect.nox87>
c0023035:	b8 01 00 00 00       	mov    eax,0x1
c002303a:	c3                   	ret    

c002303b <x87Detect.nox87>:
c002303b:	b8 00 00 00 00       	mov    eax,0x0
c0023040:	c3                   	ret    

c0023041 <x87Save>:
c0023041:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023046:	c3                   	ret    

c0023047 <x87Load>:
c0023047:	dd 64 24 08          	frstor [esp+0x8]
c002304b:	c3                   	ret    

c002304c <x87Init>:
c002304c:	9b db e3             	finit  
c002304f:	0f 20 c0             	mov    eax,cr0
c0023052:	66 25 fb ff          	and    ax,0xfffb
c0023056:	66 0d 22 00          	or     ax,0x22
c002305a:	0f 22 c0             	mov    cr0,eax
c002305d:	0f 06                	clts   
c002305f:	d9 2d 24 30 02 c0    	fldcw  WORD PTR ds:0xc0023024
c0023065:	c3                   	ret    

c0023066 <x87Close>:
c0023066:	c3                   	ret    
c0023067:	90                   	nop

c0023068 <__do_global_ctors_aux>:
c0023068:	a1 98 5b 02 c0       	mov    eax,ds:0xc0025b98
c002306d:	83 f8 ff             	cmp    eax,0xffffffff
c0023070:	74 1a                	je     c002308c <__do_global_ctors_aux+0x24>
c0023072:	55                   	push   ebp
c0023073:	89 e5                	mov    ebp,esp
c0023075:	53                   	push   ebx
c0023076:	52                   	push   edx
c0023077:	bb 98 5b 02 c0       	mov    ebx,0xc0025b98
c002307c:	ff d0                	call   eax
c002307e:	83 eb 04             	sub    ebx,0x4
c0023081:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023083:	83 f8 ff             	cmp    eax,0xffffffff
c0023086:	75 f4                	jne    c002307c <__do_global_ctors_aux+0x14>
c0023088:	58                   	pop    eax
c0023089:	5b                   	pop    ebx
c002308a:	5d                   	pop    ebp
c002308b:	c3                   	ret    
c002308c:	c3                   	ret    
c002308d:	66 90                	xchg   ax,ax
c002308f:	90                   	nop

c0023090 <__divdi3>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	83 ec 1c             	sub    esp,0x1c
c0023097:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002309b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002309f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00230a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00230a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00230aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00230ae:	85 db                	test   ebx,ebx
c00230b0:	0f 88 8e 00 00 00    	js     c0023144 <__divdi3+0xb4>
c00230b6:	89 dd                	mov    ebp,ebx
c00230b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00230c0:	89 d3                	mov    ebx,edx
c00230c2:	85 d2                	test   edx,edx
c00230c4:	79 0d                	jns    c00230d3 <__divdi3+0x43>
c00230c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00230ca:	f7 d8                	neg    eax
c00230cc:	83 d2 00             	adc    edx,0x0
c00230cf:	f7 da                	neg    edx
c00230d1:	89 d3                	mov    ebx,edx
c00230d3:	89 c7                	mov    edi,eax
c00230d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00230d8:	85 db                	test   ebx,ebx
c00230da:	75 48                	jne    c0023124 <__divdi3+0x94>
c00230dc:	39 ef                	cmp    edi,ebp
c00230de:	76 24                	jbe    c0023104 <__divdi3+0x74>
c00230e0:	89 ea                	mov    edx,ebp
c00230e2:	f7 f7                	div    edi
c00230e4:	89 c1                	mov    ecx,eax
c00230e6:	31 f6                	xor    esi,esi
c00230e8:	89 c8                	mov    eax,ecx
c00230ea:	89 f2                	mov    edx,esi
c00230ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00230f0:	85 c9                	test   ecx,ecx
c00230f2:	74 07                	je     c00230fb <__divdi3+0x6b>
c00230f4:	f7 d8                	neg    eax
c00230f6:	83 d2 00             	adc    edx,0x0
c00230f9:	f7 da                	neg    edx
c00230fb:	83 c4 1c             	add    esp,0x1c
c00230fe:	5b                   	pop    ebx
c00230ff:	5e                   	pop    esi
c0023100:	5f                   	pop    edi
c0023101:	5d                   	pop    ebp
c0023102:	c3                   	ret    
c0023103:	90                   	nop
c0023104:	85 ff                	test   edi,edi
c0023106:	75 0b                	jne    c0023113 <__divdi3+0x83>
c0023108:	b8 01 00 00 00       	mov    eax,0x1
c002310d:	31 d2                	xor    edx,edx
c002310f:	f7 f3                	div    ebx
c0023111:	89 c7                	mov    edi,eax
c0023113:	31 d2                	xor    edx,edx
c0023115:	89 e8                	mov    eax,ebp
c0023117:	f7 f7                	div    edi
c0023119:	89 c6                	mov    esi,eax
c002311b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002311e:	f7 f7                	div    edi
c0023120:	89 c1                	mov    ecx,eax
c0023122:	eb c4                	jmp    c00230e8 <__divdi3+0x58>
c0023124:	39 eb                	cmp    ebx,ebp
c0023126:	77 3c                	ja     c0023164 <__divdi3+0xd4>
c0023128:	0f bd f3             	bsr    esi,ebx
c002312b:	83 f6 1f             	xor    esi,0x1f
c002312e:	75 40                	jne    c0023170 <__divdi3+0xe0>
c0023130:	39 eb                	cmp    ebx,ebp
c0023132:	72 09                	jb     c002313d <__divdi3+0xad>
c0023134:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023137:	0f 87 97 00 00 00    	ja     c00231d4 <__divdi3+0x144>
c002313d:	b9 01 00 00 00       	mov    ecx,0x1
c0023142:	eb a4                	jmp    c00230e8 <__divdi3+0x58>
c0023144:	f7 d9                	neg    ecx
c0023146:	83 d3 00             	adc    ebx,0x0
c0023149:	f7 db                	neg    ebx
c002314b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002314e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023152:	89 dd                	mov    ebp,ebx
c0023154:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002315c:	e9 5f ff ff ff       	jmp    c00230c0 <__divdi3+0x30>
c0023161:	8d 76 00             	lea    esi,[esi+0x0]
c0023164:	31 f6                	xor    esi,esi
c0023166:	31 c9                	xor    ecx,ecx
c0023168:	e9 7b ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c002316d:	8d 76 00             	lea    esi,[esi+0x0]
c0023170:	b8 20 00 00 00       	mov    eax,0x20
c0023175:	29 f0                	sub    eax,esi
c0023177:	89 f1                	mov    ecx,esi
c0023179:	d3 e3                	shl    ebx,cl
c002317b:	89 fa                	mov    edx,edi
c002317d:	88 c1                	mov    cl,al
c002317f:	d3 ea                	shr    edx,cl
c0023181:	09 da                	or     edx,ebx
c0023183:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023187:	89 f1                	mov    ecx,esi
c0023189:	d3 e7                	shl    edi,cl
c002318b:	89 eb                	mov    ebx,ebp
c002318d:	88 c1                	mov    cl,al
c002318f:	d3 eb                	shr    ebx,cl
c0023191:	89 f1                	mov    ecx,esi
c0023193:	d3 e5                	shl    ebp,cl
c0023195:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023198:	88 c1                	mov    cl,al
c002319a:	d3 ea                	shr    edx,cl
c002319c:	09 d5                	or     ebp,edx
c002319e:	89 e8                	mov    eax,ebp
c00231a0:	89 da                	mov    edx,ebx
c00231a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00231a6:	89 d3                	mov    ebx,edx
c00231a8:	89 c5                	mov    ebp,eax
c00231aa:	f7 e7                	mul    edi
c00231ac:	39 d3                	cmp    ebx,edx
c00231ae:	72 18                	jb     c00231c8 <__divdi3+0x138>
c00231b0:	74 0a                	je     c00231bc <__divdi3+0x12c>
c00231b2:	89 e9                	mov    ecx,ebp
c00231b4:	31 f6                	xor    esi,esi
c00231b6:	e9 2d ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231bb:	90                   	nop
c00231bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00231bf:	89 f1                	mov    ecx,esi
c00231c1:	d3 e7                	shl    edi,cl
c00231c3:	39 c7                	cmp    edi,eax
c00231c5:	73 eb                	jae    c00231b2 <__divdi3+0x122>
c00231c7:	90                   	nop
c00231c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00231cb:	31 f6                	xor    esi,esi
c00231cd:	e9 16 ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231d2:	66 90                	xchg   ax,ax
c00231d4:	31 c9                	xor    ecx,ecx
c00231d6:	e9 0d ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231db:	90                   	nop

c00231dc <__moddi3>:
c00231dc:	55                   	push   ebp
c00231dd:	57                   	push   edi
c00231de:	56                   	push   esi
c00231df:	53                   	push   ebx
c00231e0:	83 ec 2c             	sub    esp,0x2c
c00231e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00231e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00231eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00231ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00231f3:	85 db                	test   ebx,ebx
c00231f5:	0f 88 85 00 00 00    	js     c0023280 <__moddi3+0xa4>
c00231fb:	89 de                	mov    esi,ebx
c00231fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023205:	89 d7                	mov    edi,edx
c0023207:	85 d2                	test   edx,edx
c0023209:	79 09                	jns    c0023214 <__moddi3+0x38>
c002320b:	f7 d8                	neg    eax
c002320d:	83 d2 00             	adc    edx,0x0
c0023210:	f7 da                	neg    edx
c0023212:	89 d7                	mov    edi,edx
c0023214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023218:	89 cd                	mov    ebp,ecx
c002321a:	85 ff                	test   edi,edi
c002321c:	75 52                	jne    c0023270 <__moddi3+0x94>
c002321e:	89 c3                	mov    ebx,eax
c0023220:	39 f0                	cmp    eax,esi
c0023222:	76 24                	jbe    c0023248 <__moddi3+0x6c>
c0023224:	89 c8                	mov    eax,ecx
c0023226:	89 f2                	mov    edx,esi
c0023228:	f7 f3                	div    ebx
c002322a:	89 d6                	mov    esi,edx
c002322c:	89 f0                	mov    eax,esi
c002322e:	31 d2                	xor    edx,edx
c0023230:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023234:	85 c9                	test   ecx,ecx
c0023236:	74 07                	je     c002323f <__moddi3+0x63>
c0023238:	f7 d8                	neg    eax
c002323a:	83 d2 00             	adc    edx,0x0
c002323d:	f7 da                	neg    edx
c002323f:	83 c4 2c             	add    esp,0x2c
c0023242:	5b                   	pop    ebx
c0023243:	5e                   	pop    esi
c0023244:	5f                   	pop    edi
c0023245:	5d                   	pop    ebp
c0023246:	c3                   	ret    
c0023247:	90                   	nop
c0023248:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002324c:	85 db                	test   ebx,ebx
c002324e:	75 0d                	jne    c002325d <__moddi3+0x81>
c0023250:	b8 01 00 00 00       	mov    eax,0x1
c0023255:	31 d2                	xor    edx,edx
c0023257:	f7 f7                	div    edi
c0023259:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002325d:	89 f0                	mov    eax,esi
c002325f:	31 d2                	xor    edx,edx
c0023261:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023265:	f7 f7                	div    edi
c0023267:	89 e8                	mov    eax,ebp
c0023269:	f7 f7                	div    edi
c002326b:	89 d6                	mov    esi,edx
c002326d:	eb bd                	jmp    c002322c <__moddi3+0x50>
c002326f:	90                   	nop
c0023270:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023274:	39 f7                	cmp    edi,esi
c0023276:	76 20                	jbe    c0023298 <__moddi3+0xbc>
c0023278:	89 c8                	mov    eax,ecx
c002327a:	89 f2                	mov    edx,esi
c002327c:	eb b2                	jmp    c0023230 <__moddi3+0x54>
c002327e:	66 90                	xchg   ax,ax
c0023280:	f7 d9                	neg    ecx
c0023282:	83 d3 00             	adc    ebx,0x0
c0023285:	f7 db                	neg    ebx
c0023287:	89 de                	mov    esi,ebx
c0023289:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023291:	e9 6f ff ff ff       	jmp    c0023205 <__moddi3+0x29>
c0023296:	66 90                	xchg   ax,ax
c0023298:	0f bd c7             	bsr    eax,edi
c002329b:	83 f0 1f             	xor    eax,0x1f
c002329e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00232a2:	75 24                	jne    c00232c8 <__moddi3+0xec>
c00232a4:	39 f7                	cmp    edi,esi
c00232a6:	72 06                	jb     c00232ae <__moddi3+0xd2>
c00232a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00232ac:	77 0c                	ja     c00232ba <__moddi3+0xde>
c00232ae:	89 e9                	mov    ecx,ebp
c00232b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00232b4:	19 fe                	sbb    esi,edi
c00232b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00232ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00232be:	89 f2                	mov    edx,esi
c00232c0:	e9 6b ff ff ff       	jmp    c0023230 <__moddi3+0x54>
c00232c5:	8d 76 00             	lea    esi,[esi+0x0]
c00232c8:	b8 20 00 00 00       	mov    eax,0x20
c00232cd:	89 c2                	mov    edx,eax
c00232cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232d3:	29 da                	sub    edx,ebx
c00232d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00232d9:	88 d9                	mov    cl,bl
c00232db:	d3 e7                	shl    edi,cl
c00232dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232e1:	88 d1                	mov    cl,dl
c00232e3:	d3 e8                	shr    eax,cl
c00232e5:	09 c7                	or     edi,eax
c00232e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00232eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00232ef:	89 d8                	mov    eax,ebx
c00232f1:	88 d9                	mov    cl,bl
c00232f3:	d3 e7                	shl    edi,cl
c00232f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00232f9:	89 f3                	mov    ebx,esi
c00232fb:	88 d1                	mov    cl,dl
c00232fd:	d3 eb                	shr    ebx,cl
c00232ff:	89 c7                	mov    edi,eax
c0023301:	88 c1                	mov    cl,al
c0023303:	d3 e6                	shl    esi,cl
c0023305:	89 e8                	mov    eax,ebp
c0023307:	88 d1                	mov    cl,dl
c0023309:	d3 e8                	shr    eax,cl
c002330b:	09 f0                	or     eax,esi
c002330d:	89 f9                	mov    ecx,edi
c002330f:	d3 e5                	shl    ebp,cl
c0023311:	89 da                	mov    edx,ebx
c0023313:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023317:	89 d3                	mov    ebx,edx
c0023319:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002331d:	89 c6                	mov    esi,eax
c002331f:	89 d1                	mov    ecx,edx
c0023321:	39 d3                	cmp    ebx,edx
c0023323:	72 27                	jb     c002334c <__moddi3+0x170>
c0023325:	74 21                	je     c0023348 <__moddi3+0x16c>
c0023327:	29 f5                	sub    ebp,esi
c0023329:	19 cb                	sbb    ebx,ecx
c002332b:	89 de                	mov    esi,ebx
c002332d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023331:	d3 e6                	shl    esi,cl
c0023333:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023337:	89 f9                	mov    ecx,edi
c0023339:	d3 ed                	shr    ebp,cl
c002333b:	09 ee                	or     esi,ebp
c002333d:	89 f0                	mov    eax,esi
c002333f:	d3 eb                	shr    ebx,cl
c0023341:	89 da                	mov    edx,ebx
c0023343:	e9 e8 fe ff ff       	jmp    c0023230 <__moddi3+0x54>
c0023348:	39 c5                	cmp    ebp,eax
c002334a:	73 db                	jae    c0023327 <__moddi3+0x14b>
c002334c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023350:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023354:	89 d1                	mov    ecx,edx
c0023356:	89 c6                	mov    esi,eax
c0023358:	eb cd                	jmp    c0023327 <__moddi3+0x14b>
c002335a:	66 90                	xchg   ax,ax

c002335c <__udivdi3>:
c002335c:	55                   	push   ebp
c002335d:	57                   	push   edi
c002335e:	56                   	push   esi
c002335f:	53                   	push   ebx
c0023360:	83 ec 1c             	sub    esp,0x1c
c0023363:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023367:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002336b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002336f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023373:	85 d2                	test   edx,edx
c0023375:	75 41                	jne    c00233b8 <__udivdi3+0x5c>
c0023377:	39 f7                	cmp    edi,esi
c0023379:	76 15                	jbe    c0023390 <__udivdi3+0x34>
c002337b:	89 e8                	mov    eax,ebp
c002337d:	89 f2                	mov    edx,esi
c002337f:	f7 f7                	div    edi
c0023381:	31 db                	xor    ebx,ebx
c0023383:	89 da                	mov    edx,ebx
c0023385:	83 c4 1c             	add    esp,0x1c
c0023388:	5b                   	pop    ebx
c0023389:	5e                   	pop    esi
c002338a:	5f                   	pop    edi
c002338b:	5d                   	pop    ebp
c002338c:	c3                   	ret    
c002338d:	8d 76 00             	lea    esi,[esi+0x0]
c0023390:	89 f9                	mov    ecx,edi
c0023392:	85 ff                	test   edi,edi
c0023394:	75 0b                	jne    c00233a1 <__udivdi3+0x45>
c0023396:	b8 01 00 00 00       	mov    eax,0x1
c002339b:	31 d2                	xor    edx,edx
c002339d:	f7 f7                	div    edi
c002339f:	89 c1                	mov    ecx,eax
c00233a1:	31 d2                	xor    edx,edx
c00233a3:	89 f0                	mov    eax,esi
c00233a5:	f7 f1                	div    ecx
c00233a7:	89 c3                	mov    ebx,eax
c00233a9:	89 e8                	mov    eax,ebp
c00233ab:	f7 f1                	div    ecx
c00233ad:	89 da                	mov    edx,ebx
c00233af:	83 c4 1c             	add    esp,0x1c
c00233b2:	5b                   	pop    ebx
c00233b3:	5e                   	pop    esi
c00233b4:	5f                   	pop    edi
c00233b5:	5d                   	pop    ebp
c00233b6:	c3                   	ret    
c00233b7:	90                   	nop
c00233b8:	39 f2                	cmp    edx,esi
c00233ba:	77 1c                	ja     c00233d8 <__udivdi3+0x7c>
c00233bc:	0f bd da             	bsr    ebx,edx
c00233bf:	83 f3 1f             	xor    ebx,0x1f
c00233c2:	75 24                	jne    c00233e8 <__udivdi3+0x8c>
c00233c4:	39 f2                	cmp    edx,esi
c00233c6:	72 08                	jb     c00233d0 <__udivdi3+0x74>
c00233c8:	39 ef                	cmp    edi,ebp
c00233ca:	0f 87 84 00 00 00    	ja     c0023454 <__udivdi3+0xf8>
c00233d0:	b8 01 00 00 00       	mov    eax,0x1
c00233d5:	eb ac                	jmp    c0023383 <__udivdi3+0x27>
c00233d7:	90                   	nop
c00233d8:	31 db                	xor    ebx,ebx
c00233da:	31 c0                	xor    eax,eax
c00233dc:	89 da                	mov    edx,ebx
c00233de:	83 c4 1c             	add    esp,0x1c
c00233e1:	5b                   	pop    ebx
c00233e2:	5e                   	pop    esi
c00233e3:	5f                   	pop    edi
c00233e4:	5d                   	pop    ebp
c00233e5:	c3                   	ret    
c00233e6:	66 90                	xchg   ax,ax
c00233e8:	b8 20 00 00 00       	mov    eax,0x20
c00233ed:	29 d8                	sub    eax,ebx
c00233ef:	88 d9                	mov    cl,bl
c00233f1:	d3 e2                	shl    edx,cl
c00233f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00233f7:	89 fa                	mov    edx,edi
c00233f9:	88 c1                	mov    cl,al
c00233fb:	d3 ea                	shr    edx,cl
c00233fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023401:	09 d1                	or     ecx,edx
c0023403:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023407:	88 d9                	mov    cl,bl
c0023409:	d3 e7                	shl    edi,cl
c002340b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002340f:	89 f7                	mov    edi,esi
c0023411:	88 c1                	mov    cl,al
c0023413:	d3 ef                	shr    edi,cl
c0023415:	88 d9                	mov    cl,bl
c0023417:	d3 e6                	shl    esi,cl
c0023419:	89 ea                	mov    edx,ebp
c002341b:	88 c1                	mov    cl,al
c002341d:	d3 ea                	shr    edx,cl
c002341f:	09 d6                	or     esi,edx
c0023421:	89 f0                	mov    eax,esi
c0023423:	89 fa                	mov    edx,edi
c0023425:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023429:	89 d7                	mov    edi,edx
c002342b:	89 c6                	mov    esi,eax
c002342d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023431:	39 d7                	cmp    edi,edx
c0023433:	72 13                	jb     c0023448 <__udivdi3+0xec>
c0023435:	74 09                	je     c0023440 <__udivdi3+0xe4>
c0023437:	89 f0                	mov    eax,esi
c0023439:	31 db                	xor    ebx,ebx
c002343b:	e9 43 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c0023440:	88 d9                	mov    cl,bl
c0023442:	d3 e5                	shl    ebp,cl
c0023444:	39 c5                	cmp    ebp,eax
c0023446:	73 ef                	jae    c0023437 <__udivdi3+0xdb>
c0023448:	8d 46 ff             	lea    eax,[esi-0x1]
c002344b:	31 db                	xor    ebx,ebx
c002344d:	e9 31 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c0023452:	66 90                	xchg   ax,ax
c0023454:	31 c0                	xor    eax,eax
c0023456:	e9 28 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c002345b:	90                   	nop

c002345c <__umoddi3>:
c002345c:	55                   	push   ebp
c002345d:	57                   	push   edi
c002345e:	56                   	push   esi
c002345f:	53                   	push   ebx
c0023460:	83 ec 1c             	sub    esp,0x1c
c0023463:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023467:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002346b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002346f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023473:	89 da                	mov    edx,ebx
c0023475:	85 c0                	test   eax,eax
c0023477:	75 37                	jne    c00234b0 <__umoddi3+0x54>
c0023479:	39 df                	cmp    edi,ebx
c002347b:	76 13                	jbe    c0023490 <__umoddi3+0x34>
c002347d:	89 f0                	mov    eax,esi
c002347f:	f7 f7                	div    edi
c0023481:	89 d0                	mov    eax,edx
c0023483:	31 d2                	xor    edx,edx
c0023485:	83 c4 1c             	add    esp,0x1c
c0023488:	5b                   	pop    ebx
c0023489:	5e                   	pop    esi
c002348a:	5f                   	pop    edi
c002348b:	5d                   	pop    ebp
c002348c:	c3                   	ret    
c002348d:	8d 76 00             	lea    esi,[esi+0x0]
c0023490:	89 fd                	mov    ebp,edi
c0023492:	85 ff                	test   edi,edi
c0023494:	75 0b                	jne    c00234a1 <__umoddi3+0x45>
c0023496:	b8 01 00 00 00       	mov    eax,0x1
c002349b:	31 d2                	xor    edx,edx
c002349d:	f7 f7                	div    edi
c002349f:	89 c5                	mov    ebp,eax
c00234a1:	89 d8                	mov    eax,ebx
c00234a3:	31 d2                	xor    edx,edx
c00234a5:	f7 f5                	div    ebp
c00234a7:	89 f0                	mov    eax,esi
c00234a9:	f7 f5                	div    ebp
c00234ab:	89 d0                	mov    eax,edx
c00234ad:	eb d4                	jmp    c0023483 <__umoddi3+0x27>
c00234af:	90                   	nop
c00234b0:	89 f1                	mov    ecx,esi
c00234b2:	39 d8                	cmp    eax,ebx
c00234b4:	76 0a                	jbe    c00234c0 <__umoddi3+0x64>
c00234b6:	89 f0                	mov    eax,esi
c00234b8:	83 c4 1c             	add    esp,0x1c
c00234bb:	5b                   	pop    ebx
c00234bc:	5e                   	pop    esi
c00234bd:	5f                   	pop    edi
c00234be:	5d                   	pop    ebp
c00234bf:	c3                   	ret    
c00234c0:	0f bd e8             	bsr    ebp,eax
c00234c3:	83 f5 1f             	xor    ebp,0x1f
c00234c6:	75 1c                	jne    c00234e4 <__umoddi3+0x88>
c00234c8:	39 d8                	cmp    eax,ebx
c00234ca:	72 04                	jb     c00234d0 <__umoddi3+0x74>
c00234cc:	39 f7                	cmp    edi,esi
c00234ce:	77 08                	ja     c00234d8 <__umoddi3+0x7c>
c00234d0:	89 da                	mov    edx,ebx
c00234d2:	29 fe                	sub    esi,edi
c00234d4:	19 c2                	sbb    edx,eax
c00234d6:	89 f1                	mov    ecx,esi
c00234d8:	89 c8                	mov    eax,ecx
c00234da:	83 c4 1c             	add    esp,0x1c
c00234dd:	5b                   	pop    ebx
c00234de:	5e                   	pop    esi
c00234df:	5f                   	pop    edi
c00234e0:	5d                   	pop    ebp
c00234e1:	c3                   	ret    
c00234e2:	66 90                	xchg   ax,ax
c00234e4:	ba 20 00 00 00       	mov    edx,0x20
c00234e9:	29 ea                	sub    edx,ebp
c00234eb:	89 e9                	mov    ecx,ebp
c00234ed:	d3 e0                	shl    eax,cl
c00234ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234f3:	89 f8                	mov    eax,edi
c00234f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00234f9:	88 d1                	mov    cl,dl
c00234fb:	d3 e8                	shr    eax,cl
c00234fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023501:	09 c1                	or     ecx,eax
c0023503:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023507:	89 e9                	mov    ecx,ebp
c0023509:	d3 e7                	shl    edi,cl
c002350b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002350f:	89 d8                	mov    eax,ebx
c0023511:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023515:	88 d1                	mov    cl,dl
c0023517:	d3 e8                	shr    eax,cl
c0023519:	89 c7                	mov    edi,eax
c002351b:	89 e9                	mov    ecx,ebp
c002351d:	d3 e3                	shl    ebx,cl
c002351f:	89 f0                	mov    eax,esi
c0023521:	88 d1                	mov    cl,dl
c0023523:	d3 e8                	shr    eax,cl
c0023525:	09 d8                	or     eax,ebx
c0023527:	89 e9                	mov    ecx,ebp
c0023529:	d3 e6                	shl    esi,cl
c002352b:	89 f3                	mov    ebx,esi
c002352d:	89 fa                	mov    edx,edi
c002352f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023533:	89 d1                	mov    ecx,edx
c0023535:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023539:	89 c6                	mov    esi,eax
c002353b:	89 d7                	mov    edi,edx
c002353d:	39 d1                	cmp    ecx,edx
c002353f:	72 27                	jb     c0023568 <__umoddi3+0x10c>
c0023541:	74 21                	je     c0023564 <__umoddi3+0x108>
c0023543:	89 ca                	mov    edx,ecx
c0023545:	29 f3                	sub    ebx,esi
c0023547:	19 fa                	sbb    edx,edi
c0023549:	89 d0                	mov    eax,edx
c002354b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002354f:	d3 e0                	shl    eax,cl
c0023551:	89 e9                	mov    ecx,ebp
c0023553:	d3 eb                	shr    ebx,cl
c0023555:	09 d8                	or     eax,ebx
c0023557:	d3 ea                	shr    edx,cl
c0023559:	83 c4 1c             	add    esp,0x1c
c002355c:	5b                   	pop    ebx
c002355d:	5e                   	pop    esi
c002355e:	5f                   	pop    edi
c002355f:	5d                   	pop    ebp
c0023560:	c3                   	ret    
c0023561:	8d 76 00             	lea    esi,[esi+0x0]
c0023564:	39 c3                	cmp    ebx,eax
c0023566:	73 db                	jae    c0023543 <__umoddi3+0xe7>
c0023568:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002356c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023570:	89 d7                	mov    edi,edx
c0023572:	89 c6                	mov    esi,eax
c0023574:	eb cd                	jmp    c0023543 <__umoddi3+0xe7>

c0023576 <__addsf3>:
c0023576:	55                   	push   ebp
c0023577:	89 e5                	mov    ebp,esp
c0023579:	57                   	push   edi
c002357a:	56                   	push   esi
c002357b:	53                   	push   ebx
c002357c:	83 ec 08             	sub    esp,0x8
c002357f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023582:	89 fa                	mov    edx,edi
c0023584:	89 f8                	mov    eax,edi
c0023586:	c1 f8 17             	sar    eax,0x17
c0023589:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002358c:	c1 e2 08             	shl    edx,0x8
c002358f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023595:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023598:	89 de                	mov    esi,ebx
c002359a:	c1 fe 17             	sar    esi,0x17
c002359d:	c1 e3 08             	shl    ebx,0x8
c00235a0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00235a6:	31 f0                	xor    eax,esi
c00235a8:	0f 88 3b 01 00 00    	js     c00236e9 <__addsf3+0x173>
c00235ae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00235b1:	29 f1                	sub    ecx,esi
c00235b3:	85 c9                	test   ecx,ecx
c00235b5:	7e 54                	jle    c002360b <__addsf3+0x95>
c00235b7:	89 f0                	mov    eax,esi
c00235b9:	84 c0                	test   al,al
c00235bb:	75 10                	jne    c00235cd <__addsf3+0x57>
c00235bd:	85 db                	test   ebx,ebx
c00235bf:	0f 84 aa 02 00 00    	je     c002386f <__addsf3+0x2f9>
c00235c5:	49                   	dec    ecx
c00235c6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00235c9:	74 38                	je     c0023603 <__addsf3+0x8d>
c00235cb:	eb 13                	jmp    c00235e0 <__addsf3+0x6a>
c00235cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00235d0:	f7 d0                	not    eax
c00235d2:	84 c0                	test   al,al
c00235d4:	0f 84 95 02 00 00    	je     c002386f <__addsf3+0x2f9>
c00235da:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00235e0:	83 f9 1f             	cmp    ecx,0x1f
c00235e3:	0f 8f 86 02 00 00    	jg     c002386f <__addsf3+0x2f9>
c00235e9:	89 de                	mov    esi,ebx
c00235eb:	d3 ee                	shr    esi,cl
c00235ed:	b8 20 00 00 00       	mov    eax,0x20
c00235f2:	29 c8                	sub    eax,ecx
c00235f4:	89 c1                	mov    ecx,eax
c00235f6:	d3 e3                	shl    ebx,cl
c00235f8:	31 c0                	xor    eax,eax
c00235fa:	85 db                	test   ebx,ebx
c00235fc:	0f 95 c0             	setne  al
c00235ff:	09 f0                	or     eax,esi
c0023601:	01 d0                	add    eax,edx
c0023603:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023606:	e9 b6 00 00 00       	jmp    c00236c1 <__addsf3+0x14b>
c002360b:	74 5c                	je     c0023669 <__addsf3+0xf3>
c002360d:	89 f1                	mov    ecx,esi
c002360f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023612:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023615:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023619:	75 14                	jne    c002362f <__addsf3+0xb9>
c002361b:	85 d2                	test   edx,edx
c002361d:	0f 84 4c 02 00 00    	je     c002386f <__addsf3+0x2f9>
c0023623:	49                   	dec    ecx
c0023624:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023627:	0f 84 94 00 00 00    	je     c00236c1 <__addsf3+0x14b>
c002362d:	eb 12                	jmp    c0023641 <__addsf3+0xcb>
c002362f:	89 f0                	mov    eax,esi
c0023631:	f7 d0                	not    eax
c0023633:	84 c0                	test   al,al
c0023635:	0f 84 34 02 00 00    	je     c002386f <__addsf3+0x2f9>
c002363b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023641:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023644:	83 f9 1f             	cmp    ecx,0x1f
c0023647:	0f 8f 22 02 00 00    	jg     c002386f <__addsf3+0x2f9>
c002364d:	89 d7                	mov    edi,edx
c002364f:	d3 ef                	shr    edi,cl
c0023651:	b8 20 00 00 00       	mov    eax,0x20
c0023656:	29 c8                	sub    eax,ecx
c0023658:	89 c1                	mov    ecx,eax
c002365a:	d3 e2                	shl    edx,cl
c002365c:	31 c0                	xor    eax,eax
c002365e:	85 d2                	test   edx,edx
c0023660:	0f 95 c0             	setne  al
c0023663:	09 f8                	or     eax,edi
c0023665:	01 d8                	add    eax,ebx
c0023667:	eb 58                	jmp    c00236c1 <__addsf3+0x14b>
c0023669:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002366c:	8d 70 01             	lea    esi,[eax+0x1]
c002366f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023675:	75 32                	jne    c00236a9 <__addsf3+0x133>
c0023677:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002367b:	75 1f                	jne    c002369c <__addsf3+0x126>
c002367d:	85 d2                	test   edx,edx
c002367f:	0f 84 e0 01 00 00    	je     c0023865 <__addsf3+0x2ef>
c0023685:	85 db                	test   ebx,ebx
c0023687:	0f 84 e2 01 00 00    	je     c002386f <__addsf3+0x2f9>
c002368d:	89 d0                	mov    eax,edx
c002368f:	01 d8                	add    eax,ebx
c0023691:	0f 89 a9 01 00 00    	jns    c0023840 <__addsf3+0x2ca>
c0023697:	e9 9d 01 00 00       	jmp    c0023839 <__addsf3+0x2c3>
c002369c:	85 d2                	test   edx,edx
c002369e:	0f 85 cb 01 00 00    	jne    c002386f <__addsf3+0x2f9>
c00236a4:	e9 bc 01 00 00       	jmp    c0023865 <__addsf3+0x2ef>
c00236a9:	31 c0                	xor    eax,eax
c00236ab:	89 f1                	mov    ecx,esi
c00236ad:	f7 d1                	not    ecx
c00236af:	84 c9                	test   cl,cl
c00236b1:	0f 84 90 01 00 00    	je     c0023847 <__addsf3+0x2d1>
c00236b7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00236ba:	d1 e8                	shr    eax,1
c00236bc:	e9 86 01 00 00       	jmp    c0023847 <__addsf3+0x2d1>
c00236c1:	85 c0                	test   eax,eax
c00236c3:	0f 89 7e 01 00 00    	jns    c0023847 <__addsf3+0x2d1>
c00236c9:	46                   	inc    esi
c00236ca:	89 f2                	mov    edx,esi
c00236cc:	f7 d2                	not    edx
c00236ce:	84 d2                	test   dl,dl
c00236d0:	0f 84 6f 01 00 00    	je     c0023845 <__addsf3+0x2cf>
c00236d6:	89 c2                	mov    edx,eax
c00236d8:	83 e2 01             	and    edx,0x1
c00236db:	d1 e8                	shr    eax,1
c00236dd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00236e2:	09 d0                	or     eax,edx
c00236e4:	e9 5e 01 00 00       	jmp    c0023847 <__addsf3+0x2d1>
c00236e9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00236ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00236f0:	89 f0                	mov    eax,esi
c00236f2:	0f b6 c0             	movzx  eax,al
c00236f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00236f8:	29 c1                	sub    ecx,eax
c00236fa:	85 c9                	test   ecx,ecx
c00236fc:	7e 55                	jle    c0023753 <__addsf3+0x1dd>
c00236fe:	85 c0                	test   eax,eax
c0023700:	75 11                	jne    c0023713 <__addsf3+0x19d>
c0023702:	85 db                	test   ebx,ebx
c0023704:	0f 84 65 01 00 00    	je     c002386f <__addsf3+0x2f9>
c002370a:	49                   	dec    ecx
c002370b:	75 19                	jne    c0023726 <__addsf3+0x1b0>
c002370d:	89 d0                	mov    eax,edx
c002370f:	29 d8                	sub    eax,ebx
c0023711:	eb 38                	jmp    c002374b <__addsf3+0x1d5>
c0023713:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023716:	f7 d0                	not    eax
c0023718:	84 c0                	test   al,al
c002371a:	0f 84 4f 01 00 00    	je     c002386f <__addsf3+0x2f9>
c0023720:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023726:	83 f9 1f             	cmp    ecx,0x1f
c0023729:	0f 8f 40 01 00 00    	jg     c002386f <__addsf3+0x2f9>
c002372f:	89 de                	mov    esi,ebx
c0023731:	d3 ee                	shr    esi,cl
c0023733:	b8 20 00 00 00       	mov    eax,0x20
c0023738:	29 c8                	sub    eax,ecx
c002373a:	89 c1                	mov    ecx,eax
c002373c:	d3 e3                	shl    ebx,cl
c002373e:	31 c0                	xor    eax,eax
c0023740:	85 db                	test   ebx,ebx
c0023742:	0f 95 c0             	setne  al
c0023745:	09 f0                	or     eax,esi
c0023747:	29 c2                	sub    edx,eax
c0023749:	89 d0                	mov    eax,edx
c002374b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002374e:	e9 af 00 00 00       	jmp    c0023802 <__addsf3+0x28c>
c0023753:	74 5c                	je     c00237b1 <__addsf3+0x23b>
c0023755:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023758:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002375b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002375f:	75 14                	jne    c0023775 <__addsf3+0x1ff>
c0023761:	85 d2                	test   edx,edx
c0023763:	0f 84 06 01 00 00    	je     c002386f <__addsf3+0x2f9>
c0023769:	48                   	dec    eax
c002376a:	75 1b                	jne    c0023787 <__addsf3+0x211>
c002376c:	89 d8                	mov    eax,ebx
c002376e:	29 d0                	sub    eax,edx
c0023770:	e9 8d 00 00 00       	jmp    c0023802 <__addsf3+0x28c>
c0023775:	89 f1                	mov    ecx,esi
c0023777:	f7 d1                	not    ecx
c0023779:	84 c9                	test   cl,cl
c002377b:	0f 84 ee 00 00 00    	je     c002386f <__addsf3+0x2f9>
c0023781:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023787:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002378a:	83 f8 1f             	cmp    eax,0x1f
c002378d:	0f 8f dc 00 00 00    	jg     c002386f <__addsf3+0x2f9>
c0023793:	89 d7                	mov    edi,edx
c0023795:	88 c1                	mov    cl,al
c0023797:	d3 ef                	shr    edi,cl
c0023799:	b9 20 00 00 00       	mov    ecx,0x20
c002379e:	29 c1                	sub    ecx,eax
c00237a0:	d3 e2                	shl    edx,cl
c00237a2:	31 c0                	xor    eax,eax
c00237a4:	85 d2                	test   edx,edx
c00237a6:	0f 95 c0             	setne  al
c00237a9:	09 f8                	or     eax,edi
c00237ab:	29 c3                	sub    ebx,eax
c00237ad:	89 d8                	mov    eax,ebx
c00237af:	eb 51                	jmp    c0023802 <__addsf3+0x28c>
c00237b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00237b4:	40                   	inc    eax
c00237b5:	a8 fe                	test   al,0xfe
c00237b7:	75 3d                	jne    c00237f6 <__addsf3+0x280>
c00237b9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00237bd:	0f 85 a7 00 00 00    	jne    c002386a <__addsf3+0x2f4>
c00237c3:	85 d2                	test   edx,edx
c00237c5:	75 12                	jne    c00237d9 <__addsf3+0x263>
c00237c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237ca:	85 db                	test   ebx,ebx
c00237cc:	0f 85 9d 00 00 00    	jne    c002386f <__addsf3+0x2f9>
c00237d2:	31 ff                	xor    edi,edi
c00237d4:	e9 96 00 00 00       	jmp    c002386f <__addsf3+0x2f9>
c00237d9:	85 db                	test   ebx,ebx
c00237db:	0f 84 8e 00 00 00    	je     c002386f <__addsf3+0x2f9>
c00237e1:	89 d0                	mov    eax,edx
c00237e3:	29 d8                	sub    eax,ebx
c00237e5:	79 06                	jns    c00237ed <__addsf3+0x277>
c00237e7:	89 d8                	mov    eax,ebx
c00237e9:	29 d0                	sub    eax,edx
c00237eb:	eb 5a                	jmp    c0023847 <__addsf3+0x2d1>
c00237ed:	bf 00 00 00 00       	mov    edi,0x0
c00237f2:	74 7b                	je     c002386f <__addsf3+0x2f9>
c00237f4:	eb 4a                	jmp    c0023840 <__addsf3+0x2ca>
c00237f6:	89 d0                	mov    eax,edx
c00237f8:	29 d8                	sub    eax,ebx
c00237fa:	79 12                	jns    c002380e <__addsf3+0x298>
c00237fc:	89 d8                	mov    eax,ebx
c00237fe:	29 d0                	sub    eax,edx
c0023800:	eb 09                	jmp    c002380b <__addsf3+0x295>
c0023802:	85 c0                	test   eax,eax
c0023804:	79 41                	jns    c0023847 <__addsf3+0x2d1>
c0023806:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002380b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002380e:	31 f6                	xor    esi,esi
c0023810:	85 c0                	test   eax,eax
c0023812:	74 33                	je     c0023847 <__addsf3+0x2d1>
c0023814:	0f bd c8             	bsr    ecx,eax
c0023817:	83 f1 1f             	xor    ecx,0x1f
c002381a:	d3 e0                	shl    eax,cl
c002381c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023820:	39 ca                	cmp    edx,ecx
c0023822:	7f 10                	jg     c0023834 <__addsf3+0x2be>
c0023824:	29 d1                	sub    ecx,edx
c0023826:	41                   	inc    ecx
c0023827:	d3 e8                	shr    eax,cl
c0023829:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002382c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023832:	eb 13                	jmp    c0023847 <__addsf3+0x2d1>
c0023834:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023837:	29 ce                	sub    esi,ecx
c0023839:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002383e:	eb 07                	jmp    c0023847 <__addsf3+0x2d1>
c0023840:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023843:	eb 02                	jmp    c0023847 <__addsf3+0x2d1>
c0023845:	31 c0                	xor    eax,eax
c0023847:	89 c2                	mov    edx,eax
c0023849:	c1 ea 08             	shr    edx,0x8
c002384c:	a8 7f                	test   al,0x7f
c002384e:	0f 95 c1             	setne  cl
c0023851:	09 d1                	or     ecx,edx
c0023853:	83 e1 01             	and    ecx,0x1
c0023856:	c1 e8 07             	shr    eax,0x7
c0023859:	21 c8                	and    eax,ecx
c002385b:	c1 e6 17             	shl    esi,0x17
c002385e:	09 d6                	or     esi,edx
c0023860:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023863:	eb 0a                	jmp    c002386f <__addsf3+0x2f9>
c0023865:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023868:	eb 05                	jmp    c002386f <__addsf3+0x2f9>
c002386a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002386f:	89 f8                	mov    eax,edi
c0023871:	5a                   	pop    edx
c0023872:	59                   	pop    ecx
c0023873:	5b                   	pop    ebx
c0023874:	5e                   	pop    esi
c0023875:	5f                   	pop    edi
c0023876:	5d                   	pop    ebp
c0023877:	c3                   	ret    

c0023878 <__subsf3>:
c0023878:	55                   	push   ebp
c0023879:	89 e5                	mov    ebp,esp
c002387b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002387e:	05 00 00 00 80       	add    eax,0x80000000
c0023883:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023886:	5d                   	pop    ebp
c0023887:	e9 ea fc ff ff       	jmp    c0023576 <__addsf3>

c002388c <__negsf2>:
c002388c:	55                   	push   ebp
c002388d:	89 e5                	mov    ebp,esp
c002388f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023892:	05 00 00 00 80       	add    eax,0x80000000
c0023897:	5d                   	pop    ebp
c0023898:	c3                   	ret    

c0023899 <__mulsf3>:
c0023899:	55                   	push   ebp
c002389a:	89 e5                	mov    ebp,esp
c002389c:	57                   	push   edi
c002389d:	56                   	push   esi
c002389e:	53                   	push   ebx
c002389f:	83 ec 1c             	sub    esp,0x1c
c00238a2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00238a5:	89 f0                	mov    eax,esi
c00238a7:	89 f1                	mov    ecx,esi
c00238a9:	c1 f9 17             	sar    ecx,0x17
c00238ac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00238af:	c1 e0 08             	shl    eax,0x8
c00238b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00238b7:	89 c1                	mov    ecx,eax
c00238b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00238bc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00238bf:	89 c7                	mov    edi,eax
c00238c1:	c1 ff 17             	sar    edi,0x17
c00238c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00238c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00238cb:	89 f8                	mov    eax,edi
c00238cd:	0f b6 c0             	movzx  eax,al
c00238d0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00238d3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00238d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00238da:	42                   	inc    edx
c00238db:	80 e2 fe             	and    dl,0xfe
c00238de:	75 7b                	jne    c002395b <__mulsf3+0xc2>
c00238e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00238e4:	74 54                	je     c002393a <__mulsf3+0xa1>
c00238e6:	85 c9                	test   ecx,ecx
c00238e8:	0f 85 64 01 00 00    	jne    c0023a52 <__mulsf3+0x1b9>
c00238ee:	8d 57 01             	lea    edx,[edi+0x1]
c00238f1:	80 e2 fe             	and    dl,0xfe
c00238f4:	75 1f                	jne    c0023915 <__mulsf3+0x7c>
c00238f6:	85 c0                	test   eax,eax
c00238f8:	b8 00 00 00 00       	mov    eax,0x0
c00238fd:	74 29                	je     c0023928 <__mulsf3+0x8f>
c00238ff:	53                   	push   ebx
c0023900:	53                   	push   ebx
c0023901:	50                   	push   eax
c0023902:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023905:	e8 96 05 00 00       	call   c0023ea0 <__nesf2>
c002390a:	83 c4 10             	add    esp,0x10
c002390d:	85 c0                	test   eax,eax
c002390f:	0f 85 3a 01 00 00    	jne    c0023a4f <__mulsf3+0x1b6>
c0023915:	85 ff                	test   edi,edi
c0023917:	0f 89 35 01 00 00    	jns    c0023a52 <__mulsf3+0x1b9>
c002391d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023923:	e9 2a 01 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c0023928:	51                   	push   ecx
c0023929:	51                   	push   ecx
c002392a:	50                   	push   eax
c002392b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002392e:	e8 6d 05 00 00       	call   c0023ea0 <__nesf2>
c0023933:	83 c4 10             	add    esp,0x10
c0023936:	85 c0                	test   eax,eax
c0023938:	eb 15                	jmp    c002394f <__mulsf3+0xb6>
c002393a:	85 c9                	test   ecx,ecx
c002393c:	74 0b                	je     c0023949 <__mulsf3+0xb0>
c002393e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023941:	01 c9                	add    ecx,ecx
c0023943:	78 16                	js     c002395b <__mulsf3+0xc2>
c0023945:	89 d3                	mov    ebx,edx
c0023947:	eb f5                	jmp    c002393e <__mulsf3+0xa5>
c0023949:	89 f8                	mov    eax,edi
c002394b:	f7 d0                	not    eax
c002394d:	84 c0                	test   al,al
c002394f:	75 c4                	jne    c0023915 <__mulsf3+0x7c>
c0023951:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023956:	e9 f7 00 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c002395b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002395e:	c1 e6 08             	shl    esi,0x8
c0023961:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023967:	8d 57 01             	lea    edx,[edi+0x1]
c002396a:	80 e2 fe             	and    dl,0xfe
c002396d:	75 63                	jne    c00239d2 <__mulsf3+0x139>
c002396f:	85 c0                	test   eax,eax
c0023971:	74 2f                	je     c00239a2 <__mulsf3+0x109>
c0023973:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023977:	0f 89 d2 00 00 00    	jns    c0023a4f <__mulsf3+0x1b6>
c002397d:	52                   	push   edx
c002397e:	52                   	push   edx
c002397f:	6a 00                	push   0x0
c0023981:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023984:	e8 dc 04 00 00       	call   c0023e65 <__eqsf2>
c0023989:	83 c4 10             	add    esp,0x10
c002398c:	85 c0                	test   eax,eax
c002398e:	0f 85 bb 00 00 00    	jne    c0023a4f <__mulsf3+0x1b6>
c0023994:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023997:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002399d:	e9 b0 00 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c00239a2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00239a5:	50                   	push   eax
c00239a6:	50                   	push   eax
c00239a7:	6a 00                	push   0x0
c00239a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00239ac:	e8 b4 04 00 00       	call   c0023e65 <__eqsf2>
c00239b1:	83 c4 10             	add    esp,0x10
c00239b4:	85 c0                	test   eax,eax
c00239b6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00239b9:	75 0c                	jne    c00239c7 <__mulsf3+0x12e>
c00239bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00239bf:	0f 89 8a 00 00 00    	jns    c0023a4f <__mulsf3+0x1b6>
c00239c5:	eb cd                	jmp    c0023994 <__mulsf3+0xfb>
c00239c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00239ca:	01 f6                	add    esi,esi
c00239cc:	78 04                	js     c00239d2 <__mulsf3+0x139>
c00239ce:	89 c3                	mov    ebx,eax
c00239d0:	eb f5                	jmp    c00239c7 <__mulsf3+0x12e>
c00239d2:	89 c8                	mov    eax,ecx
c00239d4:	0d 00 00 00 80       	or     eax,0x80000000
c00239d9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00239df:	f7 e6                	mul    esi
c00239e1:	85 c0                	test   eax,eax
c00239e3:	0f 95 c0             	setne  al
c00239e6:	0f b6 c0             	movzx  eax,al
c00239e9:	09 c2                	or     edx,eax
c00239eb:	78 03                	js     c00239f0 <__mulsf3+0x157>
c00239ed:	01 d2                	add    edx,edx
c00239ef:	4b                   	dec    ebx
c00239f0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00239f6:	7f 22                	jg     c0023a1a <__mulsf3+0x181>
c00239f8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00239fe:	85 db                	test   ebx,ebx
c0023a00:	7f 23                	jg     c0023a25 <__mulsf3+0x18c>
c0023a02:	83 fb e9             	cmp    ebx,0xffffffe9
c0023a05:	7c 1a                	jl     c0023a21 <__mulsf3+0x188>
c0023a07:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023a0d:	b9 01 00 00 00       	mov    ecx,0x1
c0023a12:	29 d9                	sub    ecx,ebx
c0023a14:	d3 ea                	shr    edx,cl
c0023a16:	31 db                	xor    ebx,ebx
c0023a18:	eb 0b                	jmp    c0023a25 <__mulsf3+0x18c>
c0023a1a:	bb ff 00 00 00       	mov    ebx,0xff
c0023a1f:	eb 02                	jmp    c0023a23 <__mulsf3+0x18a>
c0023a21:	31 db                	xor    ebx,ebx
c0023a23:	31 d2                	xor    edx,edx
c0023a25:	89 d0                	mov    eax,edx
c0023a27:	c1 e8 08             	shr    eax,0x8
c0023a2a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023a2d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023a33:	09 fb                	or     ebx,edi
c0023a35:	c1 e3 17             	shl    ebx,0x17
c0023a38:	09 c3                	or     ebx,eax
c0023a3a:	f6 c2 7f             	test   dl,0x7f
c0023a3d:	0f 95 c1             	setne  cl
c0023a40:	09 c8                	or     eax,ecx
c0023a42:	83 e0 01             	and    eax,0x1
c0023a45:	c1 ea 07             	shr    edx,0x7
c0023a48:	21 c2                	and    edx,eax
c0023a4a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023a4d:	eb 03                	jmp    c0023a52 <__mulsf3+0x1b9>
c0023a4f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023a52:	89 f0                	mov    eax,esi
c0023a54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023a57:	5b                   	pop    ebx
c0023a58:	5e                   	pop    esi
c0023a59:	5f                   	pop    edi
c0023a5a:	5d                   	pop    ebp
c0023a5b:	c3                   	ret    

c0023a5c <__divsf3>:
c0023a5c:	55                   	push   ebp
c0023a5d:	89 e5                	mov    ebp,esp
c0023a5f:	57                   	push   edi
c0023a60:	56                   	push   esi
c0023a61:	53                   	push   ebx
c0023a62:	83 ec 1c             	sub    esp,0x1c
c0023a65:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023a68:	89 d8                	mov    eax,ebx
c0023a6a:	89 d9                	mov    ecx,ebx
c0023a6c:	c1 f9 17             	sar    ecx,0x17
c0023a6f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023a72:	c1 e0 08             	shl    eax,0x8
c0023a75:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023a7a:	89 c1                	mov    ecx,eax
c0023a7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a7f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023a82:	89 c7                	mov    edi,eax
c0023a84:	c1 ff 17             	sar    edi,0x17
c0023a87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023a8b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023a8e:	89 f8                	mov    eax,edi
c0023a90:	0f b6 c0             	movzx  eax,al
c0023a93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023a96:	29 c6                	sub    esi,eax
c0023a98:	83 c6 7f             	add    esi,0x7f
c0023a9b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023a9e:	42                   	inc    edx
c0023a9f:	80 e2 fe             	and    dl,0xfe
c0023aa2:	0f 85 9c 00 00 00    	jne    c0023b44 <__divsf3+0xe8>
c0023aa8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023aac:	74 33                	je     c0023ae1 <__divsf3+0x85>
c0023aae:	85 c9                	test   ecx,ecx
c0023ab0:	0f 85 c7 01 00 00    	jne    c0023c7d <__divsf3+0x221>
c0023ab6:	8d 57 01             	lea    edx,[edi+0x1]
c0023ab9:	80 e2 fe             	and    dl,0xfe
c0023abc:	75 2f                	jne    c0023aed <__divsf3+0x91>
c0023abe:	85 c0                	test   eax,eax
c0023ac0:	74 2b                	je     c0023aed <__divsf3+0x91>
c0023ac2:	51                   	push   ecx
c0023ac3:	51                   	push   ecx
c0023ac4:	6a 00                	push   0x0
c0023ac6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ac9:	e8 d2 03 00 00       	call   c0023ea0 <__nesf2>
c0023ace:	83 c4 10             	add    esp,0x10
c0023ad1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023ad4:	85 c0                	test   eax,eax
c0023ad6:	0f 85 a1 01 00 00    	jne    c0023c7d <__divsf3+0x221>
c0023adc:	e9 92 01 00 00       	jmp    c0023c73 <__divsf3+0x217>
c0023ae1:	85 c9                	test   ecx,ecx
c0023ae3:	75 1b                	jne    c0023b00 <__divsf3+0xa4>
c0023ae5:	8d 57 01             	lea    edx,[edi+0x1]
c0023ae8:	80 e2 fe             	and    dl,0xfe
c0023aeb:	74 1e                	je     c0023b0b <__divsf3+0xaf>
c0023aed:	85 ff                	test   edi,edi
c0023aef:	0f 89 88 01 00 00    	jns    c0023c7d <__divsf3+0x221>
c0023af5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023afb:	e9 7d 01 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023b00:	8d 56 ff             	lea    edx,[esi-0x1]
c0023b03:	01 c9                	add    ecx,ecx
c0023b05:	78 3d                	js     c0023b44 <__divsf3+0xe8>
c0023b07:	89 d6                	mov    esi,edx
c0023b09:	eb f5                	jmp    c0023b00 <__divsf3+0xa4>
c0023b0b:	85 c0                	test   eax,eax
c0023b0d:	b8 00 00 00 00       	mov    eax,0x0
c0023b12:	74 18                	je     c0023b2c <__divsf3+0xd0>
c0023b14:	52                   	push   edx
c0023b15:	52                   	push   edx
c0023b16:	50                   	push   eax
c0023b17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b1a:	e8 81 03 00 00       	call   c0023ea0 <__nesf2>
c0023b1f:	83 c4 10             	add    esp,0x10
c0023b22:	85 c0                	test   eax,eax
c0023b24:	0f 85 50 01 00 00    	jne    c0023c7a <__divsf3+0x21e>
c0023b2a:	eb c1                	jmp    c0023aed <__divsf3+0x91>
c0023b2c:	56                   	push   esi
c0023b2d:	56                   	push   esi
c0023b2e:	50                   	push   eax
c0023b2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b32:	e8 69 03 00 00       	call   c0023ea0 <__nesf2>
c0023b37:	83 c4 10             	add    esp,0x10
c0023b3a:	85 c0                	test   eax,eax
c0023b3c:	0f 84 31 01 00 00    	je     c0023c73 <__divsf3+0x217>
c0023b42:	eb a9                	jmp    c0023aed <__divsf3+0x91>
c0023b44:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023b47:	c1 e3 08             	shl    ebx,0x8
c0023b4a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023b50:	8d 57 01             	lea    edx,[edi+0x1]
c0023b53:	80 e2 fe             	and    dl,0xfe
c0023b56:	75 71                	jne    c0023bc9 <__divsf3+0x16d>
c0023b58:	85 c0                	test   eax,eax
c0023b5a:	ba 00 00 00 00       	mov    edx,0x0
c0023b5f:	74 2f                	je     c0023b90 <__divsf3+0x134>
c0023b61:	51                   	push   ecx
c0023b62:	51                   	push   ecx
c0023b63:	52                   	push   edx
c0023b64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b67:	e8 f9 02 00 00       	call   c0023e65 <__eqsf2>
c0023b6c:	83 c4 10             	add    esp,0x10
c0023b6f:	85 c0                	test   eax,eax
c0023b71:	0f 85 03 01 00 00    	jne    c0023c7a <__divsf3+0x21e>
c0023b77:	31 d2                	xor    edx,edx
c0023b79:	89 d3                	mov    ebx,edx
c0023b7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023b7e:	31 f8                	xor    eax,edi
c0023b80:	0f 89 f7 00 00 00    	jns    c0023c7d <__divsf3+0x221>
c0023b86:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023b8b:	e9 ed 00 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023b90:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023b93:	50                   	push   eax
c0023b94:	50                   	push   eax
c0023b95:	52                   	push   edx
c0023b96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b99:	e8 c7 02 00 00       	call   c0023e65 <__eqsf2>
c0023b9e:	83 c4 10             	add    esp,0x10
c0023ba1:	85 c0                	test   eax,eax
c0023ba3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023ba6:	75 16                	jne    c0023bbe <__divsf3+0x162>
c0023ba8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023bab:	31 fb                	xor    ebx,edi
c0023bad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023bb3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023bb9:	e9 bf 00 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023bbe:	8d 46 01             	lea    eax,[esi+0x1]
c0023bc1:	01 db                	add    ebx,ebx
c0023bc3:	78 04                	js     c0023bc9 <__divsf3+0x16d>
c0023bc5:	89 c6                	mov    esi,eax
c0023bc7:	eb f5                	jmp    c0023bbe <__divsf3+0x162>
c0023bc9:	89 c8                	mov    eax,ecx
c0023bcb:	0d 00 00 00 80       	or     eax,0x80000000
c0023bd0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023bd6:	31 d2                	xor    edx,edx
c0023bd8:	39 d8                	cmp    eax,ebx
c0023bda:	72 07                	jb     c0023be3 <__divsf3+0x187>
c0023bdc:	29 d8                	sub    eax,ebx
c0023bde:	ba 01 00 00 00       	mov    edx,0x1
c0023be3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023bea:	01 d2                	add    edx,edx
c0023bec:	89 c1                	mov    ecx,eax
c0023bee:	01 c0                	add    eax,eax
c0023bf0:	85 c9                	test   ecx,ecx
c0023bf2:	78 04                	js     c0023bf8 <__divsf3+0x19c>
c0023bf4:	39 c3                	cmp    ebx,eax
c0023bf6:	77 05                	ja     c0023bfd <__divsf3+0x1a1>
c0023bf8:	29 d8                	sub    eax,ebx
c0023bfa:	83 ca 01             	or     edx,0x1
c0023bfd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023c00:	75 e8                	jne    c0023bea <__divsf3+0x18e>
c0023c02:	85 c0                	test   eax,eax
c0023c04:	0f 95 c0             	setne  al
c0023c07:	0f b6 c0             	movzx  eax,al
c0023c0a:	c1 e2 06             	shl    edx,0x6
c0023c0d:	09 c2                	or     edx,eax
c0023c0f:	78 03                	js     c0023c14 <__divsf3+0x1b8>
c0023c11:	01 d2                	add    edx,edx
c0023c13:	4e                   	dec    esi
c0023c14:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023c1a:	7f 22                	jg     c0023c3e <__divsf3+0x1e2>
c0023c1c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023c22:	85 f6                	test   esi,esi
c0023c24:	7f 23                	jg     c0023c49 <__divsf3+0x1ed>
c0023c26:	83 fe e9             	cmp    esi,0xffffffe9
c0023c29:	7c 1a                	jl     c0023c45 <__divsf3+0x1e9>
c0023c2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023c31:	b9 01 00 00 00       	mov    ecx,0x1
c0023c36:	29 f1                	sub    ecx,esi
c0023c38:	d3 ea                	shr    edx,cl
c0023c3a:	31 f6                	xor    esi,esi
c0023c3c:	eb 0b                	jmp    c0023c49 <__divsf3+0x1ed>
c0023c3e:	be ff 00 00 00       	mov    esi,0xff
c0023c43:	eb 02                	jmp    c0023c47 <__divsf3+0x1eb>
c0023c45:	31 f6                	xor    esi,esi
c0023c47:	31 d2                	xor    edx,edx
c0023c49:	89 d0                	mov    eax,edx
c0023c4b:	c1 e8 08             	shr    eax,0x8
c0023c4e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023c51:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023c57:	09 fe                	or     esi,edi
c0023c59:	c1 e6 17             	shl    esi,0x17
c0023c5c:	09 c6                	or     esi,eax
c0023c5e:	f6 c2 7f             	test   dl,0x7f
c0023c61:	0f 95 c1             	setne  cl
c0023c64:	09 c8                	or     eax,ecx
c0023c66:	83 e0 01             	and    eax,0x1
c0023c69:	c1 ea 07             	shr    edx,0x7
c0023c6c:	21 c2                	and    edx,eax
c0023c6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023c71:	eb 0a                	jmp    c0023c7d <__divsf3+0x221>
c0023c73:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023c78:	eb 03                	jmp    c0023c7d <__divsf3+0x221>
c0023c7a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023c7d:	89 d8                	mov    eax,ebx
c0023c7f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023c82:	5b                   	pop    ebx
c0023c83:	5e                   	pop    esi
c0023c84:	5f                   	pop    edi
c0023c85:	5d                   	pop    ebp
c0023c86:	c3                   	ret    

c0023c87 <__floatsisf>:
c0023c87:	55                   	push   ebp
c0023c88:	89 e5                	mov    ebp,esp
c0023c8a:	53                   	push   ebx
c0023c8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023c8e:	85 d2                	test   edx,edx
c0023c90:	7e 2b                	jle    c0023cbd <__floatsisf+0x36>
c0023c92:	0f bd ca             	bsr    ecx,edx
c0023c95:	83 f1 1f             	xor    ecx,0x1f
c0023c98:	d3 e2                	shl    edx,cl
c0023c9a:	89 d0                	mov    eax,edx
c0023c9c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023ca1:	89 c3                	mov    ebx,eax
c0023ca3:	c1 eb 08             	shr    ebx,0x8
c0023ca6:	80 e2 7f             	and    dl,0x7f
c0023ca9:	0f 95 c2             	setne  dl
c0023cac:	09 da                	or     edx,ebx
c0023cae:	83 e2 01             	and    edx,0x1
c0023cb1:	c1 e8 07             	shr    eax,0x7
c0023cb4:	21 c2                	and    edx,eax
c0023cb6:	b8 9e 00 00 00       	mov    eax,0x9e
c0023cbb:	eb 32                	jmp    c0023cef <__floatsisf+0x68>
c0023cbd:	b8 00 00 00 00       	mov    eax,0x0
c0023cc2:	74 34                	je     c0023cf8 <__floatsisf+0x71>
c0023cc4:	f7 da                	neg    edx
c0023cc6:	0f bd ca             	bsr    ecx,edx
c0023cc9:	83 f1 1f             	xor    ecx,0x1f
c0023ccc:	d3 e2                	shl    edx,cl
c0023cce:	89 d0                	mov    eax,edx
c0023cd0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023cd5:	89 c3                	mov    ebx,eax
c0023cd7:	c1 eb 08             	shr    ebx,0x8
c0023cda:	80 e2 7f             	and    dl,0x7f
c0023cdd:	0f 95 c2             	setne  dl
c0023ce0:	09 da                	or     edx,ebx
c0023ce2:	83 e2 01             	and    edx,0x1
c0023ce5:	c1 e8 07             	shr    eax,0x7
c0023ce8:	21 c2                	and    edx,eax
c0023cea:	b8 9e 01 00 00       	mov    eax,0x19e
c0023cef:	29 c8                	sub    eax,ecx
c0023cf1:	c1 e0 17             	shl    eax,0x17
c0023cf4:	09 d8                	or     eax,ebx
c0023cf6:	01 d0                	add    eax,edx
c0023cf8:	5b                   	pop    ebx
c0023cf9:	5d                   	pop    ebp
c0023cfa:	c3                   	ret    

c0023cfb <__floatunsisf>:
c0023cfb:	55                   	push   ebp
c0023cfc:	89 e5                	mov    ebp,esp
c0023cfe:	53                   	push   ebx
c0023cff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d02:	31 c0                	xor    eax,eax
c0023d04:	85 d2                	test   edx,edx
c0023d06:	74 32                	je     c0023d3a <__floatunsisf+0x3f>
c0023d08:	0f bd ca             	bsr    ecx,edx
c0023d0b:	83 f1 1f             	xor    ecx,0x1f
c0023d0e:	d3 e2                	shl    edx,cl
c0023d10:	89 d0                	mov    eax,edx
c0023d12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023d17:	89 c3                	mov    ebx,eax
c0023d19:	c1 eb 08             	shr    ebx,0x8
c0023d1c:	80 e2 7f             	and    dl,0x7f
c0023d1f:	0f 95 c2             	setne  dl
c0023d22:	09 da                	or     edx,ebx
c0023d24:	83 e2 01             	and    edx,0x1
c0023d27:	c1 e8 07             	shr    eax,0x7
c0023d2a:	21 c2                	and    edx,eax
c0023d2c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023d31:	29 c8                	sub    eax,ecx
c0023d33:	c1 e0 17             	shl    eax,0x17
c0023d36:	09 d8                	or     eax,ebx
c0023d38:	01 d0                	add    eax,edx
c0023d3a:	5b                   	pop    ebx
c0023d3b:	5d                   	pop    ebp
c0023d3c:	c3                   	ret    

c0023d3d <__fixsfsi>:
c0023d3d:	55                   	push   ebp
c0023d3e:	89 e5                	mov    ebp,esp
c0023d40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d43:	89 d1                	mov    ecx,edx
c0023d45:	c1 e1 08             	shl    ecx,0x8
c0023d48:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023d4e:	c1 fa 17             	sar    edx,0x17
c0023d51:	78 1c                	js     c0023d6f <__fixsfsi+0x32>
c0023d53:	83 ea 7f             	sub    edx,0x7f
c0023d56:	31 c0                	xor    eax,eax
c0023d58:	83 fa 1e             	cmp    edx,0x1e
c0023d5b:	77 40                	ja     c0023d9d <__fixsfsi+0x60>
c0023d5d:	89 c8                	mov    eax,ecx
c0023d5f:	0d 00 00 00 80       	or     eax,0x80000000
c0023d64:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d69:	29 d1                	sub    ecx,edx
c0023d6b:	d3 e8                	shr    eax,cl
c0023d6d:	eb 2e                	jmp    c0023d9d <__fixsfsi+0x60>
c0023d6f:	31 c0                	xor    eax,eax
c0023d71:	81 c2 81 00 00 00    	add    edx,0x81
c0023d77:	78 24                	js     c0023d9d <__fixsfsi+0x60>
c0023d79:	83 fa 1e             	cmp    edx,0x1e
c0023d7c:	7e 09                	jle    c0023d87 <__fixsfsi+0x4a>
c0023d7e:	83 fa 1f             	cmp    edx,0x1f
c0023d81:	75 18                	jne    c0023d9b <__fixsfsi+0x5e>
c0023d83:	85 c9                	test   ecx,ecx
c0023d85:	75 14                	jne    c0023d9b <__fixsfsi+0x5e>
c0023d87:	89 c8                	mov    eax,ecx
c0023d89:	0d 00 00 00 80       	or     eax,0x80000000
c0023d8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d93:	29 d1                	sub    ecx,edx
c0023d95:	d3 e8                	shr    eax,cl
c0023d97:	f7 d8                	neg    eax
c0023d99:	eb 02                	jmp    c0023d9d <__fixsfsi+0x60>
c0023d9b:	31 c0                	xor    eax,eax
c0023d9d:	5d                   	pop    ebp
c0023d9e:	c3                   	ret    

c0023d9f <__fixunssfsi>:
c0023d9f:	55                   	push   ebp
c0023da0:	89 e5                	mov    ebp,esp
c0023da2:	53                   	push   ebx
c0023da3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023da6:	89 d3                	mov    ebx,edx
c0023da8:	c1 fb 17             	sar    ebx,0x17
c0023dab:	83 eb 7f             	sub    ebx,0x7f
c0023dae:	31 c0                	xor    eax,eax
c0023db0:	83 fb 1f             	cmp    ebx,0x1f
c0023db3:	77 18                	ja     c0023dcd <__fixunssfsi+0x2e>
c0023db5:	89 d0                	mov    eax,edx
c0023db7:	c1 e0 08             	shl    eax,0x8
c0023dba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023dbf:	0d 00 00 00 80       	or     eax,0x80000000
c0023dc4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023dc9:	29 d9                	sub    ecx,ebx
c0023dcb:	d3 e8                	shr    eax,cl
c0023dcd:	5b                   	pop    ebx
c0023dce:	5d                   	pop    ebp
c0023dcf:	c3                   	ret    

c0023dd0 <__cmpsf2>:
c0023dd0:	55                   	push   ebp
c0023dd1:	89 e5                	mov    ebp,esp
c0023dd3:	57                   	push   edi
c0023dd4:	56                   	push   esi
c0023dd5:	53                   	push   ebx
c0023dd6:	83 ec 24             	sub    esp,0x24
c0023dd9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ddc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ddf:	e8 4f 10 00 00       	call   c0024e33 <__truncdfsf2>
c0023de4:	5a                   	pop    edx
c0023de5:	59                   	pop    ecx
c0023de6:	89 c3                	mov    ebx,eax
c0023de8:	c1 e8 17             	shr    eax,0x17
c0023deb:	0f b6 f0             	movzx  esi,al
c0023dee:	89 d8                	mov    eax,ebx
c0023df0:	c1 e8 1f             	shr    eax,0x1f
c0023df3:	31 c6                	xor    esi,eax
c0023df5:	c1 e3 08             	shl    ebx,0x8
c0023df8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023dfb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023dfe:	e8 30 10 00 00       	call   c0024e33 <__truncdfsf2>
c0023e03:	83 c4 10             	add    esp,0x10
c0023e06:	89 c1                	mov    ecx,eax
c0023e08:	c1 e9 17             	shr    ecx,0x17
c0023e0b:	0f b6 c9             	movzx  ecx,cl
c0023e0e:	89 c7                	mov    edi,eax
c0023e10:	c1 ef 1f             	shr    edi,0x1f
c0023e13:	89 ca                	mov    edx,ecx
c0023e15:	31 fa                	xor    edx,edi
c0023e17:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023e1a:	c1 e0 08             	shl    eax,0x8
c0023e1d:	89 c2                	mov    edx,eax
c0023e1f:	89 d8                	mov    eax,ebx
c0023e21:	09 d0                	or     eax,edx
c0023e23:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023e28:	09 f0                	or     eax,esi
c0023e2a:	75 08                	jne    c0023e34 <__cmpsf2+0x64>
c0023e2c:	31 c0                	xor    eax,eax
c0023e2e:	39 f9                	cmp    ecx,edi
c0023e30:	75 0c                	jne    c0023e3e <__cmpsf2+0x6e>
c0023e32:	eb 29                	jmp    c0023e5d <__cmpsf2+0x8d>
c0023e34:	b8 01 00 00 00       	mov    eax,0x1
c0023e39:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e3c:	7f 1f                	jg     c0023e5d <__cmpsf2+0x8d>
c0023e3e:	83 c8 ff             	or     eax,0xffffffff
c0023e41:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e44:	7c 17                	jl     c0023e5d <__cmpsf2+0x8d>
c0023e46:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023e4c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023e52:	b8 01 00 00 00       	mov    eax,0x1
c0023e57:	39 d3                	cmp    ebx,edx
c0023e59:	77 02                	ja     c0023e5d <__cmpsf2+0x8d>
c0023e5b:	19 c0                	sbb    eax,eax
c0023e5d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023e60:	5b                   	pop    ebx
c0023e61:	5e                   	pop    esi
c0023e62:	5f                   	pop    edi
c0023e63:	5d                   	pop    ebp
c0023e64:	c3                   	ret    

c0023e65 <__eqsf2>:
c0023e65:	55                   	push   ebp
c0023e66:	89 e5                	mov    ebp,esp
c0023e68:	83 ec 24             	sub    esp,0x24
c0023e6b:	6a 01                	push   0x1
c0023e6d:	83 ec 0c             	sub    esp,0xc
c0023e70:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023e73:	e8 df 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023e78:	83 c4 10             	add    esp,0x10
c0023e7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e81:	52                   	push   edx
c0023e82:	50                   	push   eax
c0023e83:	50                   	push   eax
c0023e84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e87:	e8 cb 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023e8c:	59                   	pop    ecx
c0023e8d:	59                   	pop    ecx
c0023e8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e91:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e94:	52                   	push   edx
c0023e95:	50                   	push   eax
c0023e96:	e8 35 ff ff ff       	call   c0023dd0 <__cmpsf2>
c0023e9b:	83 c4 20             	add    esp,0x20
c0023e9e:	c9                   	leave  
c0023e9f:	c3                   	ret    

c0023ea0 <__nesf2>:
c0023ea0:	eb c3                	jmp    c0023e65 <__eqsf2>

c0023ea2 <__gtsf2>:
c0023ea2:	55                   	push   ebp
c0023ea3:	89 e5                	mov    ebp,esp
c0023ea5:	83 ec 24             	sub    esp,0x24
c0023ea8:	6a ff                	push   0xffffffff
c0023eaa:	83 ec 0c             	sub    esp,0xc
c0023ead:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023eb0:	e8 a2 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023eb5:	83 c4 10             	add    esp,0x10
c0023eb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ebb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ebe:	52                   	push   edx
c0023ebf:	50                   	push   eax
c0023ec0:	50                   	push   eax
c0023ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ec4:	e8 8e 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023ec9:	59                   	pop    ecx
c0023eca:	59                   	pop    ecx
c0023ecb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ece:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ed1:	52                   	push   edx
c0023ed2:	50                   	push   eax
c0023ed3:	e8 f8 fe ff ff       	call   c0023dd0 <__cmpsf2>
c0023ed8:	83 c4 20             	add    esp,0x20
c0023edb:	c9                   	leave  
c0023edc:	c3                   	ret    

c0023edd <__gesf2>:
c0023edd:	eb c3                	jmp    c0023ea2 <__gtsf2>

c0023edf <__ltsf2>:
c0023edf:	eb 84                	jmp    c0023e65 <__eqsf2>

c0023ee1 <__lesf2>:
c0023ee1:	eb 82                	jmp    c0023e65 <__eqsf2>

c0023ee3 <__adddf3>:
c0023ee3:	55                   	push   ebp
c0023ee4:	89 e5                	mov    ebp,esp
c0023ee6:	57                   	push   edi
c0023ee7:	56                   	push   esi
c0023ee8:	53                   	push   ebx
c0023ee9:	83 ec 24             	sub    esp,0x24
c0023eec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023eef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023ef2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023ef5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023ef8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023efb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023efe:	89 c8                	mov    eax,ecx
c0023f00:	89 ce                	mov    esi,ecx
c0023f02:	c1 fe 14             	sar    esi,0x14
c0023f05:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0023f08:	89 fb                	mov    ebx,edi
c0023f0a:	89 fa                	mov    edx,edi
c0023f0c:	c1 e2 0b             	shl    edx,0xb
c0023f0f:	c1 e0 0b             	shl    eax,0xb
c0023f12:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023f17:	c1 eb 15             	shr    ebx,0x15
c0023f1a:	09 d8                	or     eax,ebx
c0023f1c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0023f1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0023f22:	c1 fe 14             	sar    esi,0x14
c0023f25:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0023f28:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023f2b:	89 f3                	mov    ebx,esi
c0023f2d:	c1 e3 0b             	shl    ebx,0xb
c0023f30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0023f33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023f36:	c1 e3 0b             	shl    ebx,0xb
c0023f39:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0023f3f:	c1 ee 15             	shr    esi,0x15
c0023f42:	09 f3                	or     ebx,esi
c0023f44:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0023f47:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f4a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0023f4d:	0f 88 5f 02 00 00    	js     c00241b2 <__adddf3+0x2cf>
c0023f53:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023f56:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0023f59:	85 db                	test   ebx,ebx
c0023f5b:	0f 8e c7 00 00 00    	jle    c0024028 <__adddf3+0x145>
c0023f61:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0023f68:	75 1a                	jne    c0023f84 <__adddf3+0xa1>
c0023f6a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023f6d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0023f70:	0f 84 b2 05 00 00    	je     c0024528 <__adddf3+0x645>
c0023f76:	4b                   	dec    ebx
c0023f77:	75 23                	jne    c0023f9c <__adddf3+0xb9>
c0023f79:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0023f7c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0023f7f:	e9 99 00 00 00       	jmp    c002401d <__adddf3+0x13a>
c0023f84:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f87:	f7 d6                	not    esi
c0023f89:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0023f8f:	0f 84 93 05 00 00    	je     c0024528 <__adddf3+0x645>
c0023f95:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0023f9c:	83 fb 1f             	cmp    ebx,0x1f
c0023f9f:	7e 42                	jle    c0023fe3 <__adddf3+0x100>
c0023fa1:	83 fb 3f             	cmp    ebx,0x3f
c0023fa4:	0f 8f 7e 05 00 00    	jg     c0024528 <__adddf3+0x645>
c0023faa:	83 e3 1f             	and    ebx,0x1f
c0023fad:	89 d9                	mov    ecx,ebx
c0023faf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023fb2:	d3 ef                	shr    edi,cl
c0023fb4:	31 db                	xor    ebx,ebx
c0023fb6:	85 c9                	test   ecx,ecx
c0023fb8:	74 15                	je     c0023fcf <__adddf3+0xec>
c0023fba:	be 20 00 00 00       	mov    esi,0x20
c0023fbf:	29 ce                	sub    esi,ecx
c0023fc1:	89 f1                	mov    ecx,esi
c0023fc3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023fc6:	d3 e6                	shl    esi,cl
c0023fc8:	31 db                	xor    ebx,ebx
c0023fca:	85 f6                	test   esi,esi
c0023fcc:	0f 95 c3             	setne  bl
c0023fcf:	31 c9                	xor    ecx,ecx
c0023fd1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023fd5:	0f 95 c1             	setne  cl
c0023fd8:	09 cf                	or     edi,ecx
c0023fda:	09 fb                	or     ebx,edi
c0023fdc:	01 da                	add    edx,ebx
c0023fde:	83 d0 00             	adc    eax,0x0
c0023fe1:	eb 3a                	jmp    c002401d <__adddf3+0x13a>
c0023fe3:	bf 20 00 00 00       	mov    edi,0x20
c0023fe8:	29 df                	sub    edi,ebx
c0023fea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023fed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023ff0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0023ff3:	d3 e6                	shl    esi,cl
c0023ff5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023ff8:	88 d9                	mov    cl,bl
c0023ffa:	d3 ef                	shr    edi,cl
c0023ffc:	09 fe                	or     esi,edi
c0023ffe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024001:	88 d9                	mov    cl,bl
c0024003:	d3 ef                	shr    edi,cl
c0024005:	89 fb                	mov    ebx,edi
c0024007:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002400a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002400d:	d3 e7                	shl    edi,cl
c002400f:	85 ff                	test   edi,edi
c0024011:	0f 95 c1             	setne  cl
c0024014:	0f b6 c9             	movzx  ecx,cl
c0024017:	09 ce                	or     esi,ecx
c0024019:	01 f2                	add    edx,esi
c002401b:	11 d8                	adc    eax,ebx
c002401d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024020:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024023:	e9 52 01 00 00       	jmp    c002417a <__adddf3+0x297>
c0024028:	0f 84 d5 00 00 00    	je     c0024103 <__adddf3+0x220>
c002402e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024031:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024034:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024037:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002403a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024041:	75 20                	jne    c0024063 <__adddf3+0x180>
c0024043:	89 d6                	mov    esi,edx
c0024045:	09 c6                	or     esi,eax
c0024047:	0f 84 db 04 00 00    	je     c0024528 <__adddf3+0x645>
c002404d:	4b                   	dec    ebx
c002404e:	75 29                	jne    c0024079 <__adddf3+0x196>
c0024050:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024053:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024056:	01 d1                	add    ecx,edx
c0024058:	11 c6                	adc    esi,eax
c002405a:	89 f0                	mov    eax,esi
c002405c:	89 ca                	mov    edx,ecx
c002405e:	e9 17 01 00 00       	jmp    c002417a <__adddf3+0x297>
c0024063:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024066:	f7 d6                	not    esi
c0024068:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002406e:	0f 84 b4 04 00 00    	je     c0024528 <__adddf3+0x645>
c0024074:	0d 00 00 00 80       	or     eax,0x80000000
c0024079:	83 fb 1f             	cmp    ebx,0x1f
c002407c:	7e 48                	jle    c00240c6 <__adddf3+0x1e3>
c002407e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024081:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024084:	83 fb 3f             	cmp    ebx,0x3f
c0024087:	0f 8f 9b 04 00 00    	jg     c0024528 <__adddf3+0x645>
c002408d:	83 e3 1f             	and    ebx,0x1f
c0024090:	89 d9                	mov    ecx,ebx
c0024092:	89 c7                	mov    edi,eax
c0024094:	d3 ef                	shr    edi,cl
c0024096:	31 db                	xor    ebx,ebx
c0024098:	85 c9                	test   ecx,ecx
c002409a:	74 12                	je     c00240ae <__adddf3+0x1cb>
c002409c:	be 20 00 00 00       	mov    esi,0x20
c00240a1:	29 ce                	sub    esi,ecx
c00240a3:	89 f1                	mov    ecx,esi
c00240a5:	d3 e0                	shl    eax,cl
c00240a7:	31 db                	xor    ebx,ebx
c00240a9:	85 c0                	test   eax,eax
c00240ab:	0f 95 c3             	setne  bl
c00240ae:	31 c0                	xor    eax,eax
c00240b0:	85 d2                	test   edx,edx
c00240b2:	0f 95 c0             	setne  al
c00240b5:	09 c7                	or     edi,eax
c00240b7:	09 fb                	or     ebx,edi
c00240b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240bf:	01 da                	add    edx,ebx
c00240c1:	83 d6 00             	adc    esi,0x0
c00240c4:	eb 39                	jmp    c00240ff <__adddf3+0x21c>
c00240c6:	be 20 00 00 00       	mov    esi,0x20
c00240cb:	29 de                	sub    esi,ebx
c00240cd:	89 c7                	mov    edi,eax
c00240cf:	89 f1                	mov    ecx,esi
c00240d1:	d3 e7                	shl    edi,cl
c00240d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00240d6:	89 d7                	mov    edi,edx
c00240d8:	88 d9                	mov    cl,bl
c00240da:	d3 ef                	shr    edi,cl
c00240dc:	89 f9                	mov    ecx,edi
c00240de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00240e1:	09 cf                	or     edi,ecx
c00240e3:	88 d9                	mov    cl,bl
c00240e5:	d3 e8                	shr    eax,cl
c00240e7:	89 f1                	mov    ecx,esi
c00240e9:	d3 e2                	shl    edx,cl
c00240eb:	85 d2                	test   edx,edx
c00240ed:	0f 95 c2             	setne  dl
c00240f0:	0f b6 d2             	movzx  edx,dl
c00240f3:	09 d7                	or     edi,edx
c00240f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240fb:	01 fa                	add    edx,edi
c00240fd:	11 c6                	adc    esi,eax
c00240ff:	89 f0                	mov    eax,esi
c0024101:	eb 77                	jmp    c002417a <__adddf3+0x297>
c0024103:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024106:	46                   	inc    esi
c0024107:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002410a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024110:	75 41                	jne    c0024153 <__adddf3+0x270>
c0024112:	89 d3                	mov    ebx,edx
c0024114:	09 c3                	or     ebx,eax
c0024116:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002411d:	75 27                	jne    c0024146 <__adddf3+0x263>
c002411f:	85 db                	test   ebx,ebx
c0024121:	0f 84 fb 03 00 00    	je     c0024522 <__adddf3+0x63f>
c0024127:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002412a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002412d:	0f 84 f5 03 00 00    	je     c0024528 <__adddf3+0x645>
c0024133:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024136:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024139:	85 c0                	test   eax,eax
c002413b:	0f 89 91 03 00 00    	jns    c00244d2 <__adddf3+0x5ef>
c0024141:	e9 85 03 00 00       	jmp    c00244cb <__adddf3+0x5e8>
c0024146:	85 db                	test   ebx,ebx
c0024148:	0f 85 da 03 00 00    	jne    c0024528 <__adddf3+0x645>
c002414e:	e9 cf 03 00 00       	jmp    c0024522 <__adddf3+0x63f>
c0024153:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024156:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024159:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002415c:	f7 d1                	not    ecx
c002415e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024164:	0f 84 70 03 00 00    	je     c00244da <__adddf3+0x5f7>
c002416a:	d1 ea                	shr    edx,1
c002416c:	89 c1                	mov    ecx,eax
c002416e:	c1 e1 1f             	shl    ecx,0x1f
c0024171:	09 ca                	or     edx,ecx
c0024173:	d1 e8                	shr    eax,1
c0024175:	e9 6f 03 00 00       	jmp    c00244e9 <__adddf3+0x606>
c002417a:	85 c0                	test   eax,eax
c002417c:	0f 89 67 03 00 00    	jns    c00244e9 <__adddf3+0x606>
c0024182:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024185:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024188:	f7 d1                	not    ecx
c002418a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024190:	0f 84 44 03 00 00    	je     c00244da <__adddf3+0x5f7>
c0024196:	89 d1                	mov    ecx,edx
c0024198:	d1 e9                	shr    ecx,1
c002419a:	83 e2 01             	and    edx,0x1
c002419d:	09 ca                	or     edx,ecx
c002419f:	89 c1                	mov    ecx,eax
c00241a1:	c1 e1 1f             	shl    ecx,0x1f
c00241a4:	09 ca                	or     edx,ecx
c00241a6:	d1 e8                	shr    eax,1
c00241a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00241ad:	e9 37 03 00 00       	jmp    c00244e9 <__adddf3+0x606>
c00241b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00241b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00241bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00241be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00241c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241c7:	29 de                	sub    esi,ebx
c00241c9:	85 f6                	test   esi,esi
c00241cb:	0f 8e bd 00 00 00    	jle    c002428e <__adddf3+0x3ab>
c00241d1:	85 db                	test   ebx,ebx
c00241d3:	75 17                	jne    c00241ec <__adddf3+0x309>
c00241d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00241d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00241db:	0f 84 47 03 00 00    	je     c0024528 <__adddf3+0x645>
c00241e1:	4e                   	dec    esi
c00241e2:	75 20                	jne    c0024204 <__adddf3+0x321>
c00241e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00241e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00241ea:	eb 5b                	jmp    c0024247 <__adddf3+0x364>
c00241ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00241ef:	f7 d3                	not    ebx
c00241f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241f7:	0f 84 2b 03 00 00    	je     c0024528 <__adddf3+0x645>
c00241fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024204:	83 fe 1f             	cmp    esi,0x1f
c0024207:	7e 49                	jle    c0024252 <__adddf3+0x36f>
c0024209:	83 fe 3f             	cmp    esi,0x3f
c002420c:	0f 8f 16 03 00 00    	jg     c0024528 <__adddf3+0x645>
c0024212:	83 e6 1f             	and    esi,0x1f
c0024215:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024218:	89 f1                	mov    ecx,esi
c002421a:	d3 ef                	shr    edi,cl
c002421c:	31 db                	xor    ebx,ebx
c002421e:	85 f6                	test   esi,esi
c0024220:	74 13                	je     c0024235 <__adddf3+0x352>
c0024222:	b9 20 00 00 00       	mov    ecx,0x20
c0024227:	29 f1                	sub    ecx,esi
c0024229:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002422c:	d3 e6                	shl    esi,cl
c002422e:	31 db                	xor    ebx,ebx
c0024230:	85 f6                	test   esi,esi
c0024232:	0f 95 c3             	setne  bl
c0024235:	31 c9                	xor    ecx,ecx
c0024237:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002423b:	0f 95 c1             	setne  cl
c002423e:	09 cf                	or     edi,ecx
c0024240:	09 fb                	or     ebx,edi
c0024242:	29 da                	sub    edx,ebx
c0024244:	83 d8 00             	sbb    eax,0x0
c0024247:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002424a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002424d:	e9 aa 01 00 00       	jmp    c00243fc <__adddf3+0x519>
c0024252:	bf 20 00 00 00       	mov    edi,0x20
c0024257:	29 f7                	sub    edi,esi
c0024259:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002425c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002425f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024262:	d3 e3                	shl    ebx,cl
c0024264:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024267:	89 f1                	mov    ecx,esi
c0024269:	d3 ef                	shr    edi,cl
c002426b:	09 fb                	or     ebx,edi
c002426d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024270:	89 f1                	mov    ecx,esi
c0024272:	d3 ef                	shr    edi,cl
c0024274:	89 fe                	mov    esi,edi
c0024276:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024279:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002427c:	d3 e7                	shl    edi,cl
c002427e:	85 ff                	test   edi,edi
c0024280:	0f 95 c1             	setne  cl
c0024283:	0f b6 c9             	movzx  ecx,cl
c0024286:	09 cb                	or     ebx,ecx
c0024288:	29 da                	sub    edx,ebx
c002428a:	19 f0                	sbb    eax,esi
c002428c:	eb b9                	jmp    c0024247 <__adddf3+0x364>
c002428e:	0f 84 cd 00 00 00    	je     c0024361 <__adddf3+0x47e>
c0024294:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024297:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002429a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002429d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00242a1:	75 1b                	jne    c00242be <__adddf3+0x3db>
c00242a3:	89 d6                	mov    esi,edx
c00242a5:	09 c6                	or     esi,eax
c00242a7:	0f 84 7b 02 00 00    	je     c0024528 <__adddf3+0x645>
c00242ad:	4b                   	dec    ebx
c00242ae:	75 24                	jne    c00242d4 <__adddf3+0x3f1>
c00242b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00242b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00242b6:	29 d1                	sub    ecx,edx
c00242b8:	19 c6                	sbb    esi,eax
c00242ba:	89 ca                	mov    edx,ecx
c00242bc:	eb 61                	jmp    c002431f <__adddf3+0x43c>
c00242be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00242c1:	f7 d6                	not    esi
c00242c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00242c9:	0f 84 59 02 00 00    	je     c0024528 <__adddf3+0x645>
c00242cf:	0d 00 00 00 80       	or     eax,0x80000000
c00242d4:	83 fb 1f             	cmp    ebx,0x1f
c00242d7:	7e 4d                	jle    c0024326 <__adddf3+0x443>
c00242d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00242dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00242df:	83 fb 3f             	cmp    ebx,0x3f
c00242e2:	0f 8f 40 02 00 00    	jg     c0024528 <__adddf3+0x645>
c00242e8:	83 e3 1f             	and    ebx,0x1f
c00242eb:	89 d9                	mov    ecx,ebx
c00242ed:	89 c7                	mov    edi,eax
c00242ef:	d3 ef                	shr    edi,cl
c00242f1:	31 db                	xor    ebx,ebx
c00242f3:	85 c9                	test   ecx,ecx
c00242f5:	74 12                	je     c0024309 <__adddf3+0x426>
c00242f7:	be 20 00 00 00       	mov    esi,0x20
c00242fc:	29 ce                	sub    esi,ecx
c00242fe:	89 f1                	mov    ecx,esi
c0024300:	d3 e0                	shl    eax,cl
c0024302:	31 db                	xor    ebx,ebx
c0024304:	85 c0                	test   eax,eax
c0024306:	0f 95 c3             	setne  bl
c0024309:	31 c0                	xor    eax,eax
c002430b:	85 d2                	test   edx,edx
c002430d:	0f 95 c0             	setne  al
c0024310:	09 c7                	or     edi,eax
c0024312:	09 fb                	or     ebx,edi
c0024314:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024317:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002431a:	29 da                	sub    edx,ebx
c002431c:	83 de 00             	sbb    esi,0x0
c002431f:	89 f0                	mov    eax,esi
c0024321:	e9 d6 00 00 00       	jmp    c00243fc <__adddf3+0x519>
c0024326:	be 20 00 00 00       	mov    esi,0x20
c002432b:	29 de                	sub    esi,ebx
c002432d:	89 c7                	mov    edi,eax
c002432f:	89 f1                	mov    ecx,esi
c0024331:	d3 e7                	shl    edi,cl
c0024333:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024336:	89 d7                	mov    edi,edx
c0024338:	88 d9                	mov    cl,bl
c002433a:	d3 ef                	shr    edi,cl
c002433c:	89 f9                	mov    ecx,edi
c002433e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024341:	09 cf                	or     edi,ecx
c0024343:	88 d9                	mov    cl,bl
c0024345:	d3 e8                	shr    eax,cl
c0024347:	89 f1                	mov    ecx,esi
c0024349:	d3 e2                	shl    edx,cl
c002434b:	85 d2                	test   edx,edx
c002434d:	0f 95 c2             	setne  dl
c0024350:	0f b6 d2             	movzx  edx,dl
c0024353:	09 d7                	or     edi,edx
c0024355:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024358:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002435b:	29 fa                	sub    edx,edi
c002435d:	19 c6                	sbb    esi,eax
c002435f:	eb be                	jmp    c002431f <__adddf3+0x43c>
c0024361:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024364:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024367:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002436d:	75 6a                	jne    c00243d9 <__adddf3+0x4f6>
c002436f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024373:	75 58                	jne    c00243cd <__adddf3+0x4ea>
c0024375:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024378:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002437b:	89 d6                	mov    esi,edx
c002437d:	09 c6                	or     esi,eax
c002437f:	75 17                	jne    c0024398 <__adddf3+0x4b5>
c0024381:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024384:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024387:	85 db                	test   ebx,ebx
c0024389:	0f 85 99 01 00 00    	jne    c0024528 <__adddf3+0x645>
c002438f:	31 ff                	xor    edi,edi
c0024391:	31 c9                	xor    ecx,ecx
c0024393:	e9 90 01 00 00       	jmp    c0024528 <__adddf3+0x645>
c0024398:	85 db                	test   ebx,ebx
c002439a:	0f 84 88 01 00 00    	je     c0024528 <__adddf3+0x645>
c00243a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00243a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00243a6:	85 c0                	test   eax,eax
c00243a8:	79 10                	jns    c00243ba <__adddf3+0x4d7>
c00243aa:	31 c9                	xor    ecx,ecx
c00243ac:	f7 da                	neg    edx
c00243ae:	0f 95 c1             	setne  cl
c00243b1:	01 c8                	add    eax,ecx
c00243b3:	f7 d8                	neg    eax
c00243b5:	e9 2f 01 00 00       	jmp    c00244e9 <__adddf3+0x606>
c00243ba:	31 ff                	xor    edi,edi
c00243bc:	31 c9                	xor    ecx,ecx
c00243be:	89 c3                	mov    ebx,eax
c00243c0:	09 d3                	or     ebx,edx
c00243c2:	0f 84 60 01 00 00    	je     c0024528 <__adddf3+0x645>
c00243c8:	e9 05 01 00 00       	jmp    c00244d2 <__adddf3+0x5ef>
c00243cd:	31 ff                	xor    edi,edi
c00243cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00243d4:	e9 4f 01 00 00       	jmp    c0024528 <__adddf3+0x645>
c00243d9:	89 c1                	mov    ecx,eax
c00243db:	89 d0                	mov    eax,edx
c00243dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00243e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00243e3:	89 ca                	mov    edx,ecx
c00243e5:	85 c9                	test   ecx,ecx
c00243e7:	79 2c                	jns    c0024415 <__adddf3+0x532>
c00243e9:	31 c9                	xor    ecx,ecx
c00243eb:	f7 d8                	neg    eax
c00243ed:	0f 95 c1             	setne  cl
c00243f0:	01 ca                	add    edx,ecx
c00243f2:	f7 da                	neg    edx
c00243f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00243f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00243fa:	eb 19                	jmp    c0024415 <__adddf3+0x532>
c00243fc:	85 c0                	test   eax,eax
c00243fe:	0f 89 e5 00 00 00    	jns    c00244e9 <__adddf3+0x606>
c0024404:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024409:	89 c1                	mov    ecx,eax
c002440b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002440e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024411:	89 d0                	mov    eax,edx
c0024413:	89 ca                	mov    edx,ecx
c0024415:	85 d2                	test   edx,edx
c0024417:	74 59                	je     c0024472 <__adddf3+0x58f>
c0024419:	0f bd da             	bsr    ebx,edx
c002441c:	83 f3 1f             	xor    ebx,0x1f
c002441f:	88 d9                	mov    cl,bl
c0024421:	d3 e2                	shl    edx,cl
c0024423:	bf 20 00 00 00       	mov    edi,0x20
c0024428:	89 f9                	mov    ecx,edi
c002442a:	29 d9                	sub    ecx,ebx
c002442c:	89 c6                	mov    esi,eax
c002442e:	d3 ee                	shr    esi,cl
c0024430:	09 d6                	or     esi,edx
c0024432:	88 d9                	mov    cl,bl
c0024434:	d3 e0                	shl    eax,cl
c0024436:	89 c2                	mov    edx,eax
c0024438:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002443b:	25 ff 07 00 00       	and    eax,0x7ff
c0024440:	39 d8                	cmp    eax,ebx
c0024442:	7f 22                	jg     c0024466 <__adddf3+0x583>
c0024444:	29 c3                	sub    ebx,eax
c0024446:	43                   	inc    ebx
c0024447:	88 d9                	mov    cl,bl
c0024449:	d3 ea                	shr    edx,cl
c002444b:	29 df                	sub    edi,ebx
c002444d:	89 f9                	mov    ecx,edi
c002444f:	89 f0                	mov    eax,esi
c0024451:	d3 e0                	shl    eax,cl
c0024453:	09 c2                	or     edx,eax
c0024455:	89 f0                	mov    eax,esi
c0024457:	88 d9                	mov    cl,bl
c0024459:	d3 e8                	shr    eax,cl
c002445b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002445e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024464:	eb 6f                	jmp    c00244d5 <__adddf3+0x5f2>
c0024466:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024469:	29 d8                	sub    eax,ebx
c002446b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002446e:	89 f0                	mov    eax,esi
c0024470:	eb 59                	jmp    c00244cb <__adddf3+0x5e8>
c0024472:	85 c0                	test   eax,eax
c0024474:	74 6a                	je     c00244e0 <__adddf3+0x5fd>
c0024476:	0f bd c8             	bsr    ecx,eax
c0024479:	83 f1 1f             	xor    ecx,0x1f
c002447c:	d3 e0                	shl    eax,cl
c002447e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024481:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024487:	83 c1 20             	add    ecx,0x20
c002448a:	39 cb                	cmp    ebx,ecx
c002448c:	7f 35                	jg     c00244c3 <__adddf3+0x5e0>
c002448e:	29 d9                	sub    ecx,ebx
c0024490:	8d 71 01             	lea    esi,[ecx+0x1]
c0024493:	83 fe 1f             	cmp    esi,0x1f
c0024496:	7e 09                	jle    c00244a1 <__adddf3+0x5be>
c0024498:	83 e9 1f             	sub    ecx,0x1f
c002449b:	d3 e8                	shr    eax,cl
c002449d:	89 c3                	mov    ebx,eax
c002449f:	eb 11                	jmp    c00244b2 <__adddf3+0x5cf>
c00244a1:	b9 20 00 00 00       	mov    ecx,0x20
c00244a6:	29 f1                	sub    ecx,esi
c00244a8:	89 c3                	mov    ebx,eax
c00244aa:	d3 e3                	shl    ebx,cl
c00244ac:	89 f1                	mov    ecx,esi
c00244ae:	d3 e8                	shr    eax,cl
c00244b0:	89 c2                	mov    edx,eax
c00244b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00244b5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00244ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00244bd:	89 d0                	mov    eax,edx
c00244bf:	89 da                	mov    edx,ebx
c00244c1:	eb 26                	jmp    c00244e9 <__adddf3+0x606>
c00244c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244c6:	29 cf                	sub    edi,ecx
c00244c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244cb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00244d0:	eb 17                	jmp    c00244e9 <__adddf3+0x606>
c00244d2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244d5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244d8:	eb 0f                	jmp    c00244e9 <__adddf3+0x606>
c00244da:	31 d2                	xor    edx,edx
c00244dc:	31 c0                	xor    eax,eax
c00244de:	eb 09                	jmp    c00244e9 <__adddf3+0x606>
c00244e0:	89 c2                	mov    edx,eax
c00244e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00244e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00244ec:	c1 e1 14             	shl    ecx,0x14
c00244ef:	89 c3                	mov    ebx,eax
c00244f1:	c1 eb 0b             	shr    ebx,0xb
c00244f4:	09 d9                	or     ecx,ebx
c00244f6:	89 d3                	mov    ebx,edx
c00244f8:	c1 eb 0b             	shr    ebx,0xb
c00244fb:	c1 e0 15             	shl    eax,0x15
c00244fe:	09 d8                	or     eax,ebx
c0024500:	89 c7                	mov    edi,eax
c0024502:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024508:	0f 95 c0             	setne  al
c002450b:	89 c6                	mov    esi,eax
c002450d:	09 f3                	or     ebx,esi
c002450f:	83 e3 01             	and    ebx,0x1
c0024512:	c1 ea 0a             	shr    edx,0xa
c0024515:	21 da                	and    edx,ebx
c0024517:	89 f8                	mov    eax,edi
c0024519:	01 d0                	add    eax,edx
c002451b:	83 d1 00             	adc    ecx,0x0
c002451e:	89 c7                	mov    edi,eax
c0024520:	eb 06                	jmp    c0024528 <__adddf3+0x645>
c0024522:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024525:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024528:	89 f8                	mov    eax,edi
c002452a:	89 ca                	mov    edx,ecx
c002452c:	83 c4 24             	add    esp,0x24
c002452f:	5b                   	pop    ebx
c0024530:	5e                   	pop    esi
c0024531:	5f                   	pop    edi
c0024532:	5d                   	pop    ebp
c0024533:	c3                   	ret    

c0024534 <__subdf3>:
c0024534:	55                   	push   ebp
c0024535:	89 e5                	mov    ebp,esp
c0024537:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002453a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002453d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024543:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024546:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024549:	5d                   	pop    ebp
c002454a:	e9 94 f9 ff ff       	jmp    c0023ee3 <__adddf3>

c002454f <__negdf2>:
c002454f:	55                   	push   ebp
c0024550:	89 e5                	mov    ebp,esp
c0024552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024555:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024558:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002455e:	5d                   	pop    ebp
c002455f:	c3                   	ret    

c0024560 <__muldf3>:
c0024560:	55                   	push   ebp
c0024561:	89 e5                	mov    ebp,esp
c0024563:	57                   	push   edi
c0024564:	56                   	push   esi
c0024565:	53                   	push   ebx
c0024566:	83 ec 24             	sub    esp,0x24
c0024569:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002456c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002456f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024572:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024575:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024578:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002457b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002457e:	89 c8                	mov    eax,ecx
c0024580:	c1 f8 14             	sar    eax,0x14
c0024583:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024586:	89 f8                	mov    eax,edi
c0024588:	89 fb                	mov    ebx,edi
c002458a:	c1 e3 0b             	shl    ebx,0xb
c002458d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024590:	c1 e1 0b             	shl    ecx,0xb
c0024593:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024599:	c1 e8 15             	shr    eax,0x15
c002459c:	09 c1                	or     ecx,eax
c002459e:	89 d6                	mov    esi,edx
c00245a0:	89 d0                	mov    eax,edx
c00245a2:	c1 f8 14             	sar    eax,0x14
c00245a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245ab:	89 c3                	mov    ebx,eax
c00245ad:	c1 e3 0b             	shl    ebx,0xb
c00245b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00245b3:	c1 e6 0b             	shl    esi,0xb
c00245b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00245bc:	c1 e8 15             	shr    eax,0x15
c00245bf:	09 c6                	or     esi,eax
c00245c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245c4:	25 ff 07 00 00       	and    eax,0x7ff
c00245c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00245cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00245cf:	25 ff 07 00 00       	and    eax,0x7ff
c00245d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00245d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00245da:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00245dd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00245e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245e7:	40                   	inc    eax
c00245e8:	a9 fe 07 00 00       	test   eax,0x7fe
c00245ed:	0f 85 8d 00 00 00    	jne    c0024680 <__muldf3+0x120>
c00245f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245f6:	09 c8                	or     eax,ecx
c00245f8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00245fc:	74 44                	je     c0024642 <__muldf3+0xe2>
c00245fe:	85 c0                	test   eax,eax
c0024600:	0f 85 31 02 00 00    	jne    c0024837 <__muldf3+0x2d7>
c0024606:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024609:	40                   	inc    eax
c002460a:	a9 fe 07 00 00       	test   eax,0x7fe
c002460f:	75 13                	jne    c0024624 <__muldf3+0xc4>
c0024611:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024614:	09 f1                	or     ecx,esi
c0024616:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002461a:	74 22                	je     c002463e <__muldf3+0xde>
c002461c:	85 c9                	test   ecx,ecx
c002461e:	0f 85 0d 02 00 00    	jne    c0024831 <__muldf3+0x2d1>
c0024624:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024628:	0f 89 09 02 00 00    	jns    c0024837 <__muldf3+0x2d7>
c002462e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024631:	05 00 00 00 80       	add    eax,0x80000000
c0024636:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024639:	e9 f9 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c002463e:	85 c9                	test   ecx,ecx
c0024640:	eb 2e                	jmp    c0024670 <__muldf3+0x110>
c0024642:	85 c0                	test   eax,eax
c0024644:	74 20                	je     c0024666 <__muldf3+0x106>
c0024646:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024649:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002464c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002464f:	c1 ef 1f             	shr    edi,0x1f
c0024652:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024655:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024658:	8d 43 ff             	lea    eax,[ebx-0x1]
c002465b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002465e:	09 f9                	or     ecx,edi
c0024660:	78 1e                	js     c0024680 <__muldf3+0x120>
c0024662:	89 c3                	mov    ebx,eax
c0024664:	eb e0                	jmp    c0024646 <__muldf3+0xe6>
c0024666:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024669:	f7 d0                	not    eax
c002466b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024670:	75 b2                	jne    c0024624 <__muldf3+0xc4>
c0024672:	31 ff                	xor    edi,edi
c0024674:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002467b:	e9 b7 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c0024680:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024683:	40                   	inc    eax
c0024684:	a9 fe 07 00 00       	test   eax,0x7fe
c0024689:	75 57                	jne    c00246e2 <__muldf3+0x182>
c002468b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002468e:	09 f0                	or     eax,esi
c0024690:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024694:	74 23                	je     c00246b9 <__muldf3+0x159>
c0024696:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002469a:	0f 89 91 01 00 00    	jns    c0024831 <__muldf3+0x2d1>
c00246a0:	85 c0                	test   eax,eax
c00246a2:	0f 85 89 01 00 00    	jne    c0024831 <__muldf3+0x2d1>
c00246a8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00246ab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00246b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00246b4:	e9 7e 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c00246b9:	85 c0                	test   eax,eax
c00246bb:	75 0c                	jne    c00246c9 <__muldf3+0x169>
c00246bd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00246c1:	0f 89 6a 01 00 00    	jns    c0024831 <__muldf3+0x2d1>
c00246c7:	eb df                	jmp    c00246a8 <__muldf3+0x148>
c00246c9:	01 f6                	add    esi,esi
c00246cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00246ce:	c1 ea 1f             	shr    edx,0x1f
c00246d1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00246d4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00246d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00246da:	09 d6                	or     esi,edx
c00246dc:	78 04                	js     c00246e2 <__muldf3+0x182>
c00246de:	89 c3                	mov    ebx,eax
c00246e0:	eb e7                	jmp    c00246c9 <__muldf3+0x169>
c00246e2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00246e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00246ee:	89 c8                	mov    eax,ecx
c00246f0:	f7 e6                	mul    esi
c00246f2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00246f5:	89 c7                	mov    edi,eax
c00246f7:	89 c8                	mov    eax,ecx
c00246f9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00246fc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00246ff:	89 c1                	mov    ecx,eax
c0024701:	89 f0                	mov    eax,esi
c0024703:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024706:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024709:	89 c6                	mov    esi,eax
c002470b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002470e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024711:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024714:	31 c0                	xor    eax,eax
c0024716:	01 f1                	add    ecx,esi
c0024718:	0f 92 c0             	setb   al
c002471b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002471e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024721:	83 d6 00             	adc    esi,0x0
c0024724:	01 c7                	add    edi,eax
c0024726:	83 d6 00             	adc    esi,0x0
c0024729:	01 ca                	add    edx,ecx
c002472b:	0f 92 c1             	setb   cl
c002472e:	0f b6 c9             	movzx  ecx,cl
c0024731:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024734:	83 d6 00             	adc    esi,0x0
c0024737:	01 cf                	add    edi,ecx
c0024739:	83 d6 00             	adc    esi,0x0
c002473c:	31 c9                	xor    ecx,ecx
c002473e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024741:	0f 95 c1             	setne  cl
c0024744:	09 cf                	or     edi,ecx
c0024746:	85 f6                	test   esi,esi
c0024748:	78 0c                	js     c0024756 <__muldf3+0x1f6>
c002474a:	01 f6                	add    esi,esi
c002474c:	89 f8                	mov    eax,edi
c002474e:	c1 e8 1f             	shr    eax,0x1f
c0024751:	09 c6                	or     esi,eax
c0024753:	01 ff                	add    edi,edi
c0024755:	4b                   	dec    ebx
c0024756:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002475c:	0f 8f 85 00 00 00    	jg     c00247e7 <__muldf3+0x287>
c0024762:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024768:	85 db                	test   ebx,ebx
c002476a:	0f 8f 84 00 00 00    	jg     c00247f4 <__muldf3+0x294>
c0024770:	83 fb cc             	cmp    ebx,0xffffffcc
c0024773:	7c 79                	jl     c00247ee <__muldf3+0x28e>
c0024775:	ba 01 00 00 00       	mov    edx,0x1
c002477a:	29 da                	sub    edx,ebx
c002477c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024782:	83 fa 1f             	cmp    edx,0x1f
c0024785:	7e 30                	jle    c00247b7 <__muldf3+0x257>
c0024787:	83 fa 20             	cmp    edx,0x20
c002478a:	75 0b                	jne    c0024797 <__muldf3+0x237>
c002478c:	31 c0                	xor    eax,eax
c002478e:	85 ff                	test   edi,edi
c0024790:	0f 95 c0             	setne  al
c0024793:	89 c7                	mov    edi,eax
c0024795:	eb 1a                	jmp    c00247b1 <__muldf3+0x251>
c0024797:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002479a:	89 f0                	mov    eax,esi
c002479c:	d3 e0                	shl    eax,cl
c002479e:	09 f8                	or     eax,edi
c00247a0:	0f 95 c0             	setne  al
c00247a3:	0f b6 c0             	movzx  eax,al
c00247a6:	89 c7                	mov    edi,eax
c00247a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00247ad:	29 d9                	sub    ecx,ebx
c00247af:	d3 ee                	shr    esi,cl
c00247b1:	09 f7                	or     edi,esi
c00247b3:	31 db                	xor    ebx,ebx
c00247b5:	eb 3b                	jmp    c00247f2 <__muldf3+0x292>
c00247b7:	83 c3 1f             	add    ebx,0x1f
c00247ba:	89 f0                	mov    eax,esi
c00247bc:	88 d9                	mov    cl,bl
c00247be:	d3 e0                	shl    eax,cl
c00247c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247c3:	89 f8                	mov    eax,edi
c00247c5:	88 d1                	mov    cl,dl
c00247c7:	d3 e8                	shr    eax,cl
c00247c9:	89 c1                	mov    ecx,eax
c00247cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00247ce:	09 c8                	or     eax,ecx
c00247d0:	88 d9                	mov    cl,bl
c00247d2:	d3 e7                	shl    edi,cl
c00247d4:	31 db                	xor    ebx,ebx
c00247d6:	85 ff                	test   edi,edi
c00247d8:	0f 95 c3             	setne  bl
c00247db:	89 df                	mov    edi,ebx
c00247dd:	09 c7                	or     edi,eax
c00247df:	88 d1                	mov    cl,dl
c00247e1:	d3 ee                	shr    esi,cl
c00247e3:	31 db                	xor    ebx,ebx
c00247e5:	eb 0d                	jmp    c00247f4 <__muldf3+0x294>
c00247e7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00247ec:	eb 02                	jmp    c00247f0 <__muldf3+0x290>
c00247ee:	31 db                	xor    ebx,ebx
c00247f0:	31 ff                	xor    edi,edi
c00247f2:	31 f6                	xor    esi,esi
c00247f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00247f7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00247fa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00247ff:	09 c3                	or     ebx,eax
c0024801:	c1 e3 14             	shl    ebx,0x14
c0024804:	89 f0                	mov    eax,esi
c0024806:	c1 e8 0b             	shr    eax,0xb
c0024809:	09 c3                	or     ebx,eax
c002480b:	89 f8                	mov    eax,edi
c002480d:	c1 e8 0b             	shr    eax,0xb
c0024810:	c1 e6 15             	shl    esi,0x15
c0024813:	09 c6                	or     esi,eax
c0024815:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002481b:	0f 95 c1             	setne  cl
c002481e:	09 c8                	or     eax,ecx
c0024820:	83 e0 01             	and    eax,0x1
c0024823:	c1 ef 0a             	shr    edi,0xa
c0024826:	21 c7                	and    edi,eax
c0024828:	01 f7                	add    edi,esi
c002482a:	83 d3 00             	adc    ebx,0x0
c002482d:	89 da                	mov    edx,ebx
c002482f:	eb 03                	jmp    c0024834 <__muldf3+0x2d4>
c0024831:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024834:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024837:	89 f8                	mov    eax,edi
c0024839:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002483c:	83 c4 24             	add    esp,0x24
c002483f:	5b                   	pop    ebx
c0024840:	5e                   	pop    esi
c0024841:	5f                   	pop    edi
c0024842:	5d                   	pop    ebp
c0024843:	c3                   	ret    

c0024844 <__divdf3>:
c0024844:	55                   	push   ebp
c0024845:	89 e5                	mov    ebp,esp
c0024847:	57                   	push   edi
c0024848:	56                   	push   esi
c0024849:	53                   	push   ebx
c002484a:	83 ec 2c             	sub    esp,0x2c
c002484d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024850:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024853:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024856:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024859:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002485c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002485f:	89 ce                	mov    esi,ecx
c0024861:	89 c8                	mov    eax,ecx
c0024863:	c1 f8 14             	sar    eax,0x14
c0024866:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024869:	89 f8                	mov    eax,edi
c002486b:	89 fb                	mov    ebx,edi
c002486d:	c1 e3 0b             	shl    ebx,0xb
c0024870:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024873:	c1 e6 0b             	shl    esi,0xb
c0024876:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002487c:	c1 e8 15             	shr    eax,0x15
c002487f:	09 c6                	or     esi,eax
c0024881:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024884:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024887:	89 c2                	mov    edx,eax
c0024889:	c1 fa 14             	sar    edx,0x14
c002488c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002488f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024892:	89 de                	mov    esi,ebx
c0024894:	c1 e6 0b             	shl    esi,0xb
c0024897:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002489a:	c1 e0 0b             	shl    eax,0xb
c002489d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00248a2:	c1 eb 15             	shr    ebx,0x15
c00248a5:	09 d8                	or     eax,ebx
c00248a7:	89 c2                	mov    edx,eax
c00248a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00248ac:	25 ff 07 00 00       	and    eax,0x7ff
c00248b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00248b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00248b7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00248bd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00248c0:	29 d8                	sub    eax,ebx
c00248c2:	05 ff 03 00 00       	add    eax,0x3ff
c00248c7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00248ca:	46                   	inc    esi
c00248cb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00248d1:	0f 85 a5 00 00 00    	jne    c002497c <__divdf3+0x138>
c00248d7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00248da:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00248dd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00248e1:	74 2a                	je     c002490d <__divdf3+0xc9>
c00248e3:	85 f6                	test   esi,esi
c00248e5:	0f 85 cc 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c00248eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00248ee:	40                   	inc    eax
c00248ef:	a9 fe 07 00 00       	test   eax,0x7fe
c00248f4:	75 26                	jne    c002491c <__divdf3+0xd8>
c00248f6:	85 db                	test   ebx,ebx
c00248f8:	74 22                	je     c002491c <__divdf3+0xd8>
c00248fa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00248fd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024900:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024903:	09 d0                	or     eax,edx
c0024905:	0f 85 ac 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c002490b:	eb 63                	jmp    c0024970 <__divdf3+0x12c>
c002490d:	85 f6                	test   esi,esi
c002490f:	75 22                	jne    c0024933 <__divdf3+0xef>
c0024911:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024914:	40                   	inc    eax
c0024915:	a9 fe 07 00 00       	test   eax,0x7fe
c002491a:	74 36                	je     c0024952 <__divdf3+0x10e>
c002491c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024920:	0f 89 91 02 00 00    	jns    c0024bb7 <__divdf3+0x373>
c0024926:	89 f8                	mov    eax,edi
c0024928:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002492e:	e9 80 02 00 00       	jmp    c0024bb3 <__divdf3+0x36f>
c0024933:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024936:	01 f6                	add    esi,esi
c0024938:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002493b:	c1 ef 1f             	shr    edi,0x1f
c002493e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024941:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024944:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024947:	09 f7                	or     edi,esi
c0024949:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002494c:	78 2e                	js     c002497c <__divdf3+0x138>
c002494e:	89 c8                	mov    eax,ecx
c0024950:	eb e1                	jmp    c0024933 <__divdf3+0xef>
c0024952:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024955:	09 d0                	or     eax,edx
c0024957:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002495b:	74 0f                	je     c002496c <__divdf3+0x128>
c002495d:	85 c0                	test   eax,eax
c002495f:	74 bb                	je     c002491c <__divdf3+0xd8>
c0024961:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024964:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024967:	e9 4b 02 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c002496c:	85 c0                	test   eax,eax
c002496e:	75 ac                	jne    c002491c <__divdf3+0xd8>
c0024970:	31 ff                	xor    edi,edi
c0024972:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024977:	e9 3b 02 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c002497c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002497f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024982:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024988:	75 6b                	jne    c00249f5 <__divdf3+0x1b1>
c002498a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002498d:	09 d6                	or     esi,edx
c002498f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024993:	74 28                	je     c00249bd <__divdf3+0x179>
c0024995:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024998:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002499b:	85 f6                	test   esi,esi
c002499d:	0f 85 14 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c00249a3:	31 ff                	xor    edi,edi
c00249a5:	31 c9                	xor    ecx,ecx
c00249a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249aa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249ad:	0f 89 04 02 00 00    	jns    c0024bb7 <__divdf3+0x373>
c00249b3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00249b8:	e9 fa 01 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c00249bd:	85 f6                	test   esi,esi
c00249bf:	75 1b                	jne    c00249dc <__divdf3+0x198>
c00249c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249c4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249c7:	25 00 00 00 80       	and    eax,0x80000000
c00249cc:	31 c9                	xor    ecx,ecx
c00249ce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00249d3:	89 cf                	mov    edi,ecx
c00249d5:	89 c1                	mov    ecx,eax
c00249d7:	e9 db 01 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c00249dc:	01 d2                	add    edx,edx
c00249de:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00249e1:	c1 eb 1f             	shr    ebx,0x1f
c00249e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00249e7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00249ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00249ed:	09 da                	or     edx,ebx
c00249ef:	78 04                	js     c00249f5 <__divdf3+0x1b1>
c00249f1:	89 c8                	mov    eax,ecx
c00249f3:	eb e7                	jmp    c00249dc <__divdf3+0x198>
c00249f5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00249f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00249fe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024a04:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024a07:	39 d6                	cmp    esi,edx
c0024a09:	77 0d                	ja     c0024a18 <__divdf3+0x1d4>
c0024a0b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024a0e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024a11:	72 1b                	jb     c0024a2e <__divdf3+0x1ea>
c0024a13:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024a16:	75 16                	jne    c0024a2e <__divdf3+0x1ea>
c0024a18:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a1b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024a1e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024a21:	83 de 00             	sbb    esi,0x0
c0024a24:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024a27:	ba 01 00 00 00       	mov    edx,0x1
c0024a2c:	eb 02                	jmp    c0024a30 <__divdf3+0x1ec>
c0024a2e:	31 d2                	xor    edx,edx
c0024a30:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024a37:	31 ff                	xor    edi,edi
c0024a39:	01 ff                	add    edi,edi
c0024a3b:	89 d1                	mov    ecx,edx
c0024a3d:	c1 e9 1f             	shr    ecx,0x1f
c0024a40:	09 cf                	or     edi,ecx
c0024a42:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024a45:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024a48:	89 da                	mov    edx,ebx
c0024a4a:	89 f3                	mov    ebx,esi
c0024a4c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024a4f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a52:	c1 e9 1f             	shr    ecx,0x1f
c0024a55:	09 ce                	or     esi,ecx
c0024a57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a5a:	01 c9                	add    ecx,ecx
c0024a5c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024a5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a62:	85 db                	test   ebx,ebx
c0024a64:	78 29                	js     c0024a8f <__divdf3+0x24b>
c0024a66:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024a69:	72 07                	jb     c0024a72 <__divdf3+0x22e>
c0024a6b:	75 3c                	jne    c0024aa9 <__divdf3+0x265>
c0024a6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a70:	77 37                	ja     c0024aa9 <__divdf3+0x265>
c0024a72:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a75:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024a78:	31 d2                	xor    edx,edx
c0024a7a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024a7d:	0f 97 c2             	seta   dl
c0024a80:	29 d6                	sub    esi,edx
c0024a82:	89 d9                	mov    ecx,ebx
c0024a84:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024a87:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a8a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024a8d:	eb 17                	jmp    c0024aa6 <__divdf3+0x262>
c0024a8f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a92:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a98:	0f 97 c1             	seta   cl
c0024a9b:	0f b6 c9             	movzx  ecx,cl
c0024a9e:	29 ce                	sub    esi,ecx
c0024aa0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024aa3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024aa6:	83 ca 01             	or     edx,0x1
c0024aa9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024aac:	75 8b                	jne    c0024a39 <__divdf3+0x1f5>
c0024aae:	c1 e7 09             	shl    edi,0x9
c0024ab1:	89 d1                	mov    ecx,edx
c0024ab3:	c1 e9 17             	shr    ecx,0x17
c0024ab6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024ab9:	09 f3                	or     ebx,esi
c0024abb:	0f 95 c3             	setne  bl
c0024abe:	0f b6 db             	movzx  ebx,bl
c0024ac1:	c1 e2 09             	shl    edx,0x9
c0024ac4:	09 d3                	or     ebx,edx
c0024ac6:	89 ca                	mov    edx,ecx
c0024ac8:	09 fa                	or     edx,edi
c0024aca:	78 0c                	js     c0024ad8 <__divdf3+0x294>
c0024acc:	01 d2                	add    edx,edx
c0024ace:	89 d9                	mov    ecx,ebx
c0024ad0:	c1 e9 1f             	shr    ecx,0x1f
c0024ad3:	09 ca                	or     edx,ecx
c0024ad5:	01 db                	add    ebx,ebx
c0024ad7:	48                   	dec    eax
c0024ad8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024add:	0f 8f 83 00 00 00    	jg     c0024b66 <__divdf3+0x322>
c0024ae3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024ae9:	85 c0                	test   eax,eax
c0024aeb:	0f 8f 82 00 00 00    	jg     c0024b73 <__divdf3+0x32f>
c0024af1:	83 f8 cc             	cmp    eax,0xffffffcc
c0024af4:	7c 77                	jl     c0024b6d <__divdf3+0x329>
c0024af6:	be 01 00 00 00       	mov    esi,0x1
c0024afb:	29 c6                	sub    esi,eax
c0024afd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b03:	83 fe 1f             	cmp    esi,0x1f
c0024b06:	7e 2f                	jle    c0024b37 <__divdf3+0x2f3>
c0024b08:	83 fe 20             	cmp    esi,0x20
c0024b0b:	75 0a                	jne    c0024b17 <__divdf3+0x2d3>
c0024b0d:	85 db                	test   ebx,ebx
c0024b0f:	0f 95 c3             	setne  bl
c0024b12:	0f b6 db             	movzx  ebx,bl
c0024b15:	eb 1a                	jmp    c0024b31 <__divdf3+0x2ed>
c0024b17:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024b1a:	89 d7                	mov    edi,edx
c0024b1c:	d3 e7                	shl    edi,cl
c0024b1e:	89 f9                	mov    ecx,edi
c0024b20:	09 d9                	or     ecx,ebx
c0024b22:	0f 95 c3             	setne  bl
c0024b25:	0f b6 db             	movzx  ebx,bl
c0024b28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024b2d:	29 c1                	sub    ecx,eax
c0024b2f:	d3 ea                	shr    edx,cl
c0024b31:	09 d3                	or     ebx,edx
c0024b33:	31 c0                	xor    eax,eax
c0024b35:	eb 3a                	jmp    c0024b71 <__divdf3+0x32d>
c0024b37:	83 c0 1f             	add    eax,0x1f
c0024b3a:	89 d7                	mov    edi,edx
c0024b3c:	88 c1                	mov    cl,al
c0024b3e:	d3 e7                	shl    edi,cl
c0024b40:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024b43:	89 df                	mov    edi,ebx
c0024b45:	89 f1                	mov    ecx,esi
c0024b47:	d3 ef                	shr    edi,cl
c0024b49:	89 f9                	mov    ecx,edi
c0024b4b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024b4e:	09 cf                	or     edi,ecx
c0024b50:	88 c1                	mov    cl,al
c0024b52:	d3 e3                	shl    ebx,cl
c0024b54:	85 db                	test   ebx,ebx
c0024b56:	0f 95 c3             	setne  bl
c0024b59:	0f b6 db             	movzx  ebx,bl
c0024b5c:	09 fb                	or     ebx,edi
c0024b5e:	89 f1                	mov    ecx,esi
c0024b60:	d3 ea                	shr    edx,cl
c0024b62:	31 c0                	xor    eax,eax
c0024b64:	eb 0d                	jmp    c0024b73 <__divdf3+0x32f>
c0024b66:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024b6b:	eb 02                	jmp    c0024b6f <__divdf3+0x32b>
c0024b6d:	31 c0                	xor    eax,eax
c0024b6f:	31 db                	xor    ebx,ebx
c0024b71:	31 d2                	xor    edx,edx
c0024b73:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024b76:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024b79:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024b7f:	09 c8                	or     eax,ecx
c0024b81:	c1 e0 14             	shl    eax,0x14
c0024b84:	89 d1                	mov    ecx,edx
c0024b86:	c1 e9 0b             	shr    ecx,0xb
c0024b89:	09 c8                	or     eax,ecx
c0024b8b:	89 c6                	mov    esi,eax
c0024b8d:	89 d9                	mov    ecx,ebx
c0024b8f:	c1 e9 0b             	shr    ecx,0xb
c0024b92:	c1 e2 15             	shl    edx,0x15
c0024b95:	09 ca                	or     edx,ecx
c0024b97:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024b9d:	0f 95 c0             	setne  al
c0024ba0:	09 c1                	or     ecx,eax
c0024ba2:	83 e1 01             	and    ecx,0x1
c0024ba5:	c1 eb 0a             	shr    ebx,0xa
c0024ba8:	21 cb                	and    ebx,ecx
c0024baa:	01 d3                	add    ebx,edx
c0024bac:	89 d8                	mov    eax,ebx
c0024bae:	83 d6 00             	adc    esi,0x0
c0024bb1:	89 f2                	mov    edx,esi
c0024bb3:	89 c7                	mov    edi,eax
c0024bb5:	89 d1                	mov    ecx,edx
c0024bb7:	89 f8                	mov    eax,edi
c0024bb9:	89 ca                	mov    edx,ecx
c0024bbb:	83 c4 2c             	add    esp,0x2c
c0024bbe:	5b                   	pop    ebx
c0024bbf:	5e                   	pop    esi
c0024bc0:	5f                   	pop    edi
c0024bc1:	5d                   	pop    ebp
c0024bc2:	c3                   	ret    

c0024bc3 <__floatsidf>:
c0024bc3:	55                   	push   ebp
c0024bc4:	89 e5                	mov    ebp,esp
c0024bc6:	56                   	push   esi
c0024bc7:	53                   	push   ebx
c0024bc8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024bcb:	85 db                	test   ebx,ebx
c0024bcd:	7e 15                	jle    c0024be4 <__floatsidf+0x21>
c0024bcf:	0f bd cb             	bsr    ecx,ebx
c0024bd2:	83 f1 1f             	xor    ecx,0x1f
c0024bd5:	d3 e3                	shl    ebx,cl
c0024bd7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024bdd:	b8 1e 04 00 00       	mov    eax,0x41e
c0024be2:	eb 21                	jmp    c0024c05 <__floatsidf+0x42>
c0024be4:	b8 00 00 00 00       	mov    eax,0x0
c0024be9:	ba 00 00 00 00       	mov    edx,0x0
c0024bee:	74 2a                	je     c0024c1a <__floatsidf+0x57>
c0024bf0:	f7 db                	neg    ebx
c0024bf2:	0f bd cb             	bsr    ecx,ebx
c0024bf5:	83 f1 1f             	xor    ecx,0x1f
c0024bf8:	d3 e3                	shl    ebx,cl
c0024bfa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c00:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024c05:	29 c8                	sub    eax,ecx
c0024c07:	c1 e0 14             	shl    eax,0x14
c0024c0a:	89 c1                	mov    ecx,eax
c0024c0c:	89 de                	mov    esi,ebx
c0024c0e:	c1 ee 0b             	shr    esi,0xb
c0024c11:	09 f1                	or     ecx,esi
c0024c13:	89 ca                	mov    edx,ecx
c0024c15:	c1 e3 15             	shl    ebx,0x15
c0024c18:	89 d8                	mov    eax,ebx
c0024c1a:	5b                   	pop    ebx
c0024c1b:	5e                   	pop    esi
c0024c1c:	5d                   	pop    ebp
c0024c1d:	c3                   	ret    

c0024c1e <__floatunsidf>:
c0024c1e:	55                   	push   ebp
c0024c1f:	89 e5                	mov    ebp,esp
c0024c21:	56                   	push   esi
c0024c22:	53                   	push   ebx
c0024c23:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024c26:	85 db                	test   ebx,ebx
c0024c28:	74 2a                	je     c0024c54 <__floatunsidf+0x36>
c0024c2a:	0f bd cb             	bsr    ecx,ebx
c0024c2d:	83 f1 1f             	xor    ecx,0x1f
c0024c30:	d3 e3                	shl    ebx,cl
c0024c32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c38:	b8 1e 04 00 00       	mov    eax,0x41e
c0024c3d:	29 c8                	sub    eax,ecx
c0024c3f:	c1 e0 14             	shl    eax,0x14
c0024c42:	89 c1                	mov    ecx,eax
c0024c44:	89 de                	mov    esi,ebx
c0024c46:	c1 ee 0b             	shr    esi,0xb
c0024c49:	09 f1                	or     ecx,esi
c0024c4b:	89 ca                	mov    edx,ecx
c0024c4d:	c1 e3 15             	shl    ebx,0x15
c0024c50:	89 d8                	mov    eax,ebx
c0024c52:	eb 04                	jmp    c0024c58 <__floatunsidf+0x3a>
c0024c54:	31 c0                	xor    eax,eax
c0024c56:	31 d2                	xor    edx,edx
c0024c58:	5b                   	pop    ebx
c0024c59:	5e                   	pop    esi
c0024c5a:	5d                   	pop    ebp
c0024c5b:	c3                   	ret    

c0024c5c <__fixdfsi>:
c0024c5c:	55                   	push   ebp
c0024c5d:	89 e5                	mov    ebp,esp
c0024c5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c62:	89 d1                	mov    ecx,edx
c0024c64:	c1 e1 0b             	shl    ecx,0xb
c0024c67:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c70:	c1 e8 15             	shr    eax,0x15
c0024c73:	09 c1                	or     ecx,eax
c0024c75:	c1 fa 14             	sar    edx,0x14
c0024c78:	78 1f                	js     c0024c99 <__fixdfsi+0x3d>
c0024c7a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024c80:	31 c0                	xor    eax,eax
c0024c82:	83 fa 1e             	cmp    edx,0x1e
c0024c85:	77 40                	ja     c0024cc7 <__fixdfsi+0x6b>
c0024c87:	89 c8                	mov    eax,ecx
c0024c89:	0d 00 00 00 80       	or     eax,0x80000000
c0024c8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024c93:	29 d1                	sub    ecx,edx
c0024c95:	d3 e8                	shr    eax,cl
c0024c97:	eb 2e                	jmp    c0024cc7 <__fixdfsi+0x6b>
c0024c99:	31 c0                	xor    eax,eax
c0024c9b:	81 c2 01 04 00 00    	add    edx,0x401
c0024ca1:	78 24                	js     c0024cc7 <__fixdfsi+0x6b>
c0024ca3:	83 fa 1e             	cmp    edx,0x1e
c0024ca6:	7e 09                	jle    c0024cb1 <__fixdfsi+0x55>
c0024ca8:	83 fa 1f             	cmp    edx,0x1f
c0024cab:	75 18                	jne    c0024cc5 <__fixdfsi+0x69>
c0024cad:	85 c9                	test   ecx,ecx
c0024caf:	75 14                	jne    c0024cc5 <__fixdfsi+0x69>
c0024cb1:	89 c8                	mov    eax,ecx
c0024cb3:	0d 00 00 00 80       	or     eax,0x80000000
c0024cb8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cbd:	29 d1                	sub    ecx,edx
c0024cbf:	d3 e8                	shr    eax,cl
c0024cc1:	f7 d8                	neg    eax
c0024cc3:	eb 02                	jmp    c0024cc7 <__fixdfsi+0x6b>
c0024cc5:	31 c0                	xor    eax,eax
c0024cc7:	5d                   	pop    ebp
c0024cc8:	c3                   	ret    

c0024cc9 <__fixunsdfsi>:
c0024cc9:	55                   	push   ebp
c0024cca:	89 e5                	mov    ebp,esp
c0024ccc:	53                   	push   ebx
c0024ccd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024cd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024cd3:	89 d3                	mov    ebx,edx
c0024cd5:	c1 fb 14             	sar    ebx,0x14
c0024cd8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024cde:	31 c0                	xor    eax,eax
c0024ce0:	83 fb 1f             	cmp    ebx,0x1f
c0024ce3:	77 1d                	ja     c0024d02 <__fixunsdfsi+0x39>
c0024ce5:	89 d0                	mov    eax,edx
c0024ce7:	c1 e0 0b             	shl    eax,0xb
c0024cea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024cef:	c1 e9 15             	shr    ecx,0x15
c0024cf2:	09 c8                	or     eax,ecx
c0024cf4:	0d 00 00 00 80       	or     eax,0x80000000
c0024cf9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cfe:	29 d9                	sub    ecx,ebx
c0024d00:	d3 e8                	shr    eax,cl
c0024d02:	5b                   	pop    ebx
c0024d03:	5d                   	pop    ebp
c0024d04:	c3                   	ret    

c0024d05 <__cmpdf2>:
c0024d05:	55                   	push   ebp
c0024d06:	89 e5                	mov    ebp,esp
c0024d08:	57                   	push   edi
c0024d09:	56                   	push   esi
c0024d0a:	53                   	push   ebx
c0024d0b:	83 ec 0c             	sub    esp,0xc
c0024d0e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024d11:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024d14:	89 ca                	mov    edx,ecx
c0024d16:	c1 ea 14             	shr    edx,0x14
c0024d19:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024d1f:	89 cb                	mov    ebx,ecx
c0024d21:	c1 fb 1f             	sar    ebx,0x1f
c0024d24:	31 da                	xor    edx,ebx
c0024d26:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024d29:	89 df                	mov    edi,ebx
c0024d2b:	c1 e7 0b             	shl    edi,0xb
c0024d2e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024d31:	c1 e1 0b             	shl    ecx,0xb
c0024d34:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d3a:	c1 eb 15             	shr    ebx,0x15
c0024d3d:	09 d9                	or     ecx,ebx
c0024d3f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024d42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024d45:	89 ce                	mov    esi,ecx
c0024d47:	c1 ee 14             	shr    esi,0x14
c0024d4a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024d50:	89 cb                	mov    ebx,ecx
c0024d52:	c1 fb 1f             	sar    ebx,0x1f
c0024d55:	31 de                	xor    esi,ebx
c0024d57:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024d5a:	89 df                	mov    edi,ebx
c0024d5c:	c1 e7 0b             	shl    edi,0xb
c0024d5f:	c1 e1 0b             	shl    ecx,0xb
c0024d62:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d68:	c1 eb 15             	shr    ebx,0x15
c0024d6b:	09 d9                	or     ecx,ebx
c0024d6d:	89 d3                	mov    ebx,edx
c0024d6f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d75:	43                   	inc    ebx
c0024d76:	83 fb 01             	cmp    ebx,0x1
c0024d79:	77 08                	ja     c0024d83 <__cmpdf2+0x7e>
c0024d7b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024d7e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024d81:	75 68                	jne    c0024deb <__cmpdf2+0xe6>
c0024d83:	89 f3                	mov    ebx,esi
c0024d85:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d8b:	43                   	inc    ebx
c0024d8c:	83 fb 01             	cmp    ebx,0x1
c0024d8f:	77 06                	ja     c0024d97 <__cmpdf2+0x92>
c0024d91:	89 fb                	mov    ebx,edi
c0024d93:	09 cb                	or     ebx,ecx
c0024d95:	75 54                	jne    c0024deb <__cmpdf2+0xe6>
c0024d97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024d9a:	09 f8                	or     eax,edi
c0024d9c:	09 c8                	or     eax,ecx
c0024d9e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024da1:	75 12                	jne    c0024db5 <__cmpdf2+0xb0>
c0024da3:	8d 42 01             	lea    eax,[edx+0x1]
c0024da6:	83 f8 01             	cmp    eax,0x1
c0024da9:	77 0a                	ja     c0024db5 <__cmpdf2+0xb0>
c0024dab:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024dae:	31 c0                	xor    eax,eax
c0024db0:	83 fb 01             	cmp    ebx,0x1
c0024db3:	76 36                	jbe    c0024deb <__cmpdf2+0xe6>
c0024db5:	b8 01 00 00 00       	mov    eax,0x1
c0024dba:	39 f2                	cmp    edx,esi
c0024dbc:	7f 2d                	jg     c0024deb <__cmpdf2+0xe6>
c0024dbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024dc3:	7c 26                	jl     c0024deb <__cmpdf2+0xe6>
c0024dc5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024dc8:	77 07                	ja     c0024dd1 <__cmpdf2+0xcc>
c0024dca:	72 16                	jb     c0024de2 <__cmpdf2+0xdd>
c0024dcc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024dcf:	76 0a                	jbe    c0024ddb <__cmpdf2+0xd6>
c0024dd1:	89 d0                	mov    eax,edx
c0024dd3:	c1 f8 1f             	sar    eax,0x1f
c0024dd6:	83 c8 01             	or     eax,0x1
c0024dd9:	eb 10                	jmp    c0024deb <__cmpdf2+0xe6>
c0024ddb:	b8 00 00 00 00       	mov    eax,0x0
c0024de0:	73 09                	jae    c0024deb <__cmpdf2+0xe6>
c0024de2:	89 d0                	mov    eax,edx
c0024de4:	c1 f8 1f             	sar    eax,0x1f
c0024de7:	83 e0 02             	and    eax,0x2
c0024dea:	48                   	dec    eax
c0024deb:	83 c4 0c             	add    esp,0xc
c0024dee:	5b                   	pop    ebx
c0024def:	5e                   	pop    esi
c0024df0:	5f                   	pop    edi
c0024df1:	5d                   	pop    ebp
c0024df2:	c3                   	ret    

c0024df3 <__eqdf2>:
c0024df3:	55                   	push   ebp
c0024df4:	89 e5                	mov    ebp,esp
c0024df6:	50                   	push   eax
c0024df7:	6a 01                	push   0x1
c0024df9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024dfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024dff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e05:	e8 fb fe ff ff       	call   c0024d05 <__cmpdf2>
c0024e0a:	83 c4 18             	add    esp,0x18
c0024e0d:	c9                   	leave  
c0024e0e:	c3                   	ret    

c0024e0f <__nedf2>:
c0024e0f:	eb e2                	jmp    c0024df3 <__eqdf2>

c0024e11 <__gtdf2>:
c0024e11:	55                   	push   ebp
c0024e12:	89 e5                	mov    ebp,esp
c0024e14:	50                   	push   eax
c0024e15:	6a ff                	push   0xffffffff
c0024e17:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024e1a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024e1d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e23:	e8 dd fe ff ff       	call   c0024d05 <__cmpdf2>
c0024e28:	83 c4 18             	add    esp,0x18
c0024e2b:	c9                   	leave  
c0024e2c:	c3                   	ret    

c0024e2d <__gedf2>:
c0024e2d:	eb e2                	jmp    c0024e11 <__gtdf2>

c0024e2f <__ltdf2>:
c0024e2f:	eb c2                	jmp    c0024df3 <__eqdf2>

c0024e31 <__ledf2>:
c0024e31:	eb c0                	jmp    c0024df3 <__eqdf2>

c0024e33 <__truncdfsf2>:
c0024e33:	55                   	push   ebp
c0024e34:	89 e5                	mov    ebp,esp
c0024e36:	57                   	push   edi
c0024e37:	56                   	push   esi
c0024e38:	53                   	push   ebx
c0024e39:	83 ec 0c             	sub    esp,0xc
c0024e3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024e3f:	89 d1                	mov    ecx,edx
c0024e41:	c1 f9 14             	sar    ecx,0x14
c0024e44:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e47:	89 df                	mov    edi,ebx
c0024e49:	c1 e7 0b             	shl    edi,0xb
c0024e4c:	89 d0                	mov    eax,edx
c0024e4e:	c1 e0 0b             	shl    eax,0xb
c0024e51:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024e56:	c1 eb 15             	shr    ebx,0x15
c0024e59:	09 d8                	or     eax,ebx
c0024e5b:	89 cb                	mov    ebx,ecx
c0024e5d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024e63:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024e69:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024e6f:	0f 86 9e 00 00 00    	jbe    c0024f13 <__truncdfsf2+0xe0>
c0024e75:	85 db                	test   ebx,ebx
c0024e77:	75 0a                	jne    c0024e83 <__truncdfsf2+0x50>
c0024e79:	c1 fa 17             	sar    edx,0x17
c0024e7c:	30 d2                	xor    dl,dl
c0024e7e:	e9 84 00 00 00       	jmp    c0024f07 <__truncdfsf2+0xd4>
c0024e83:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0024e89:	83 fe 83             	cmp    esi,0xffffff83
c0024e8c:	7d 4b                	jge    c0024ed9 <__truncdfsf2+0xa6>
c0024e8e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0024e93:	29 f1                	sub    ecx,esi
c0024e95:	83 f9 1f             	cmp    ecx,0x1f
c0024e98:	7f 6b                	jg     c0024f05 <__truncdfsf2+0xd2>
c0024e9a:	0d 00 00 00 80       	or     eax,0x80000000
c0024e9f:	89 c3                	mov    ebx,eax
c0024ea1:	d3 eb                	shr    ebx,cl
c0024ea3:	be 01 00 00 00       	mov    esi,0x1
c0024ea8:	d3 e6                	shl    esi,cl
c0024eaa:	4e                   	dec    esi
c0024eab:	21 f0                	and    eax,esi
c0024ead:	09 f8                	or     eax,edi
c0024eaf:	0f 95 c0             	setne  al
c0024eb2:	0f b6 c0             	movzx  eax,al
c0024eb5:	09 c3                	or     ebx,eax
c0024eb7:	89 d9                	mov    ecx,ebx
c0024eb9:	c1 e9 08             	shr    ecx,0x8
c0024ebc:	f6 c3 7f             	test   bl,0x7f
c0024ebf:	0f 95 c0             	setne  al
c0024ec2:	09 c8                	or     eax,ecx
c0024ec4:	83 e0 01             	and    eax,0x1
c0024ec7:	c1 eb 07             	shr    ebx,0x7
c0024eca:	21 c3                	and    ebx,eax
c0024ecc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024ed2:	09 d1                	or     ecx,edx
c0024ed4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0024ed7:	eb 76                	jmp    c0024f4f <__truncdfsf2+0x11c>
c0024ed9:	83 c6 80             	add    esi,0xffffff80
c0024edc:	7e 1d                	jle    c0024efb <__truncdfsf2+0xc8>
c0024ede:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024ee4:	75 0b                	jne    c0024ef1 <__truncdfsf2+0xbe>
c0024ee6:	09 f8                	or     eax,edi
c0024ee8:	74 09                	je     c0024ef3 <__truncdfsf2+0xc0>
c0024eea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0024eef:	eb 02                	jmp    c0024ef3 <__truncdfsf2+0xc0>
c0024ef1:	31 c0                	xor    eax,eax
c0024ef3:	c1 fa 17             	sar    edx,0x17
c0024ef6:	80 ca ff             	or     dl,0xff
c0024ef9:	eb 0e                	jmp    c0024f09 <__truncdfsf2+0xd6>
c0024efb:	c1 fa 1f             	sar    edx,0x1f
c0024efe:	c1 e2 08             	shl    edx,0x8
c0024f01:	09 ca                	or     edx,ecx
c0024f03:	eb 04                	jmp    c0024f09 <__truncdfsf2+0xd6>
c0024f05:	31 d2                	xor    edx,edx
c0024f07:	31 c0                	xor    eax,eax
c0024f09:	c1 e2 17             	shl    edx,0x17
c0024f0c:	c1 e8 08             	shr    eax,0x8
c0024f0f:	09 d0                	or     eax,edx
c0024f11:	eb 3c                	jmp    c0024f4f <__truncdfsf2+0x11c>
c0024f13:	81 e9 80 03 00 00    	sub    ecx,0x380
c0024f19:	89 ca                	mov    edx,ecx
c0024f1b:	c1 fa 0b             	sar    edx,0xb
c0024f1e:	c1 e2 08             	shl    edx,0x8
c0024f21:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024f24:	31 db                	xor    ebx,ebx
c0024f26:	85 ff                	test   edi,edi
c0024f28:	0f 95 c3             	setne  bl
c0024f2b:	09 d8                	or     eax,ebx
c0024f2d:	89 c3                	mov    ebx,eax
c0024f2f:	c1 eb 08             	shr    ebx,0x8
c0024f32:	a8 7f                	test   al,0x7f
c0024f34:	0f 95 c2             	setne  dl
c0024f37:	89 d6                	mov    esi,edx
c0024f39:	09 de                	or     esi,ebx
c0024f3b:	83 e6 01             	and    esi,0x1
c0024f3e:	c1 e8 07             	shr    eax,0x7
c0024f41:	21 f0                	and    eax,esi
c0024f43:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024f46:	09 ca                	or     edx,ecx
c0024f48:	c1 e2 17             	shl    edx,0x17
c0024f4b:	09 da                	or     edx,ebx
c0024f4d:	01 d0                	add    eax,edx
c0024f4f:	83 c4 0c             	add    esp,0xc
c0024f52:	5b                   	pop    ebx
c0024f53:	5e                   	pop    esi
c0024f54:	5f                   	pop    edi
c0024f55:	5d                   	pop    ebp
c0024f56:	c3                   	ret    

c0024f57 <__extendsfdf2>:
c0024f57:	55                   	push   ebp
c0024f58:	89 e5                	mov    ebp,esp
c0024f5a:	57                   	push   edi
c0024f5b:	56                   	push   esi
c0024f5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024f5f:	89 d1                	mov    ecx,edx
c0024f61:	c1 f9 17             	sar    ecx,0x17
c0024f64:	c1 e2 08             	shl    edx,0x8
c0024f67:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024f6d:	89 c8                	mov    eax,ecx
c0024f6f:	80 e4 f8             	and    ah,0xf8
c0024f72:	8d 71 01             	lea    esi,[ecx+0x1]
c0024f75:	81 e6 fe 00 00 00    	and    esi,0xfe
c0024f7b:	75 27                	jne    c0024fa4 <__extendsfdf2+0x4d>
c0024f7d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0024f83:	75 18                	jne    c0024f9d <__extendsfdf2+0x46>
c0024f85:	85 d2                	test   edx,edx
c0024f87:	74 20                	je     c0024fa9 <__extendsfdf2+0x52>
c0024f89:	41                   	inc    ecx
c0024f8a:	01 d2                	add    edx,edx
c0024f8c:	79 fb                	jns    c0024f89 <__extendsfdf2+0x32>
c0024f8e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024f94:	29 c8                	sub    eax,ecx
c0024f96:	05 81 03 00 00       	add    eax,0x381
c0024f9b:	eb 0c                	jmp    c0024fa9 <__extendsfdf2+0x52>
c0024f9d:	05 00 07 00 00       	add    eax,0x700
c0024fa2:	eb 05                	jmp    c0024fa9 <__extendsfdf2+0x52>
c0024fa4:	05 80 03 00 00       	add    eax,0x380
c0024fa9:	c1 e0 14             	shl    eax,0x14
c0024fac:	89 c1                	mov    ecx,eax
c0024fae:	89 d0                	mov    eax,edx
c0024fb0:	c1 e8 0b             	shr    eax,0xb
c0024fb3:	09 c1                	or     ecx,eax
c0024fb5:	c1 e2 15             	shl    edx,0x15
c0024fb8:	89 d0                	mov    eax,edx
c0024fba:	89 ca                	mov    edx,ecx
c0024fbc:	5e                   	pop    esi
c0024fbd:	5f                   	pop    edi
c0024fbe:	5d                   	pop    ebp
c0024fbf:	c3                   	ret    

c0024fc0 <fabs>:
c0024fc0:	83 ec 0c             	sub    esp,0xc
c0024fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0024fca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024fd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024fd7:	dd 04 24             	fld    QWORD PTR [esp]
c0024fda:	83 c4 0c             	add    esp,0xc
c0024fdd:	c3                   	ret    
c0024fde:	66 90                	xchg   ax,ax

c0024fe0 <lrint>:
c0024fe0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024fe4:	83 ec 04             	sub    esp,0x4
c0024fe7:	db 1c 24             	fistp  DWORD PTR [esp]
c0024fea:	58                   	pop    eax
c0024feb:	c3                   	ret    

c0024fec <lrintf>:
c0024fec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0024ff0:	83 ec 04             	sub    esp,0x4
c0024ff3:	db 1c 24             	fistp  DWORD PTR [esp]
c0024ff6:	58                   	pop    eax
c0024ff7:	c3                   	ret    

Disassembly of section .init:

c0024ff8 <_init>:
c0024ff8:	55                   	push   ebp
c0024ff9:	89 e5                	mov    ebp,esp
c0024ffb:	e8 18 b1 fd ff       	call   c0000118 <frame_dummy>
c0025000:	e8 63 e0 ff ff       	call   c0023068 <__do_global_ctors_aux>
c0025005:	5d                   	pop    ebp
c0025006:	c3                   	ret    

Disassembly of section .fini:

c0025007 <_fini>:
c0025007:	55                   	push   ebp
c0025008:	89 e5                	mov    ebp,esp
c002500a:	e8 99 b0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002500f:	5d                   	pop    ebp
c0025010:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025012 <Computer::~Computer()>:
c0025012:	83 ec 0c             	sub    esp,0xc
c0025015:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c002501a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002501e:	89 10                	mov    DWORD PTR [eax],edx
c0025020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025024:	83 ec 0c             	sub    esp,0xc
c0025027:	50                   	push   eax
c0025028:	e8 c7 e4 fe ff       	call   c00134f4 <Device::~Device()>
c002502d:	83 c4 10             	add    esp,0x10
c0025030:	90                   	nop
c0025031:	83 c4 0c             	add    esp,0xc
c0025034:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025036 <Computer::~Computer()>:
c0025036:	83 ec 0c             	sub    esp,0xc
c0025039:	83 ec 0c             	sub    esp,0xc
c002503c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025040:	e8 cd ff ff ff       	call   c0025012 <Computer::~Computer()>
c0025045:	83 c4 10             	add    esp,0x10
c0025048:	83 ec 08             	sub    esp,0x8
c002504b:	68 ec 01 00 00       	push   0x1ec
c0025050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025054:	e8 0e d1 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025059:	83 c4 10             	add    esp,0x10
c002505c:	83 c4 0c             	add    esp,0xc
c002505f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025060 <idleCommon()>:
c0025060:	83 ec 0c             	sub    esp,0xc
c0025063:	e8 d0 68 ff ff       	call   c001b938 <lockScheduler()>
c0025068:	e8 ff 6b ff ff       	call   c001bc6c <schedule()>
c002506d:	83 c4 0c             	add    esp,0xc
c0025070:	e9 c5 68 ff ff       	jmp    c001b93a <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c0025075 <CPU::readCR3()>:
c0025075:	83 ec 10             	sub    esp,0x10
c0025078:	0f 20 d8             	mov    eax,cr3
c002507b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002507f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025083:	83 c4 10             	add    esp,0x10
c0025086:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c0025087 <CPU::writeCR3(unsigned long)>:
c0025087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002508b:	0f 22 d8             	mov    cr3,eax
c002508e:	90                   	nop
c002508f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025090 <LinkedList<UnixFile>::~LinkedList()>:
c0025090:	90                   	nop
c0025091:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025092 <LinkedList<UnixFile>::LinkedList()>:
c0025092:	83 ec 0c             	sub    esp,0xc
c0025095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025099:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002509f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00250bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250d5:	83 ec 0c             	sub    esp,0xc
c00250d8:	68 66 6d 02 c0       	push   0xc0026d66
c00250dd:	e8 65 d1 fe ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	90                   	nop
c00250e6:	83 c4 0c             	add    esp,0xc
c00250e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00250ea:	83 ec 0c             	sub    esp,0xc
c00250ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00250f2:	75 10                	jne    c0025104 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00250f4:	83 ec 0c             	sub    esp,0xc
c00250f7:	68 80 6d 02 c0       	push   0xc0026d80
c00250fc:	e8 e4 38 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0025101:	83 c4 10             	add    esp,0x10
c0025104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025108:	8b 00                	mov    eax,DWORD PTR [eax]
c002510a:	85 c0                	test   eax,eax
c002510c:	74 34                	je     c0025142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002510e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025115:	85 c0                	test   eax,eax
c0025117:	74 29                	je     c0025142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002511d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025120:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025124:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002512f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025139:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025140:	eb 65                	jmp    c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025146:	8b 00                	mov    eax,DWORD PTR [eax]
c0025148:	85 c0                	test   eax,eax
c002514a:	75 4b                	jne    c0025197 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002514c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025153:	85 c0                	test   eax,eax
c0025155:	75 40                	jne    c0025197 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002515b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002515f:	89 10                	mov    DWORD PTR [eax],edx
c0025161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025165:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025169:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002516c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025173:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002517a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025181:	85 c0                	test   eax,eax
c0025183:	74 22                	je     c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025185:	83 ec 0c             	sub    esp,0xc
c0025188:	68 a2 6d 02 c0       	push   0xc0026da2
c002518d:	e8 53 38 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0025192:	83 c4 10             	add    esp,0x10
c0025195:	eb 10                	jmp    c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025197:	83 ec 0c             	sub    esp,0xc
c002519a:	68 ac 6d 02 c0       	push   0xc0026dac
c002519f:	e8 41 38 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00251a4:	83 c4 10             	add    esp,0x10
c00251a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ae:	8d 50 01             	lea    edx,[eax+0x1]
c00251b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00251b8:	90                   	nop
c00251b9:	83 c4 0c             	add    esp,0xc
c00251bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00251be <LinkedList<UnixFile>::getFirstElement()>:
c00251be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00251c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00251c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00251c6 <LinkedList<UnixFile>::removeFirst()>:
c00251c6:	83 ec 0c             	sub    esp,0xc
c00251c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00251cf:	85 c0                	test   eax,eax
c00251d1:	75 12                	jne    c00251e5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00251d3:	83 ec 0c             	sub    esp,0xc
c00251d6:	68 b8 6d 02 c0       	push   0xc0026db8
c00251db:	e8 05 38 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00251e0:	83 c4 10             	add    esp,0x10
c00251e3:	eb 7e                	jmp    c0025263 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00251e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00251ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ef:	85 c0                	test   eax,eax
c00251f1:	74 10                	je     c0025203 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00251f3:	83 ec 0c             	sub    esp,0xc
c00251f6:	68 03 6e 02 c0       	push   0xc0026e03
c00251fb:	e8 e5 37 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0025200:	83 c4 10             	add    esp,0x10
c0025203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025207:	8b 00                	mov    eax,DWORD PTR [eax]
c0025209:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002520c:	85 c0                	test   eax,eax
c002520e:	75 33                	jne    c0025243 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002521a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002521e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025229:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002522c:	83 f8 01             	cmp    eax,0x1
c002522f:	74 21                	je     c0025252 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025231:	83 ec 0c             	sub    esp,0xc
c0025234:	68 dc 6d 02 c0       	push   0xc0026ddc
c0025239:	e8 a7 37 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c002523e:	83 c4 10             	add    esp,0x10
c0025241:	eb 0f                	jmp    c0025252 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025247:	8b 00                	mov    eax,DWORD PTR [eax]
c0025249:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002524c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025250:	89 10                	mov    DWORD PTR [eax],edx
c0025252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025259:	8d 50 ff             	lea    edx,[eax-0x1]
c002525c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025260:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025263:	83 c4 0c             	add    esp,0xc
c0025266:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0025268 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0025268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002526c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002526f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025270 <DriverlessDevice::~DriverlessDevice()>:
c0025270:	ba 84 74 02 c0       	mov    edx,0xc0027484
c0025275:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025279:	89 10                	mov    DWORD PTR [eax],edx
c002527b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002527f:	50                   	push   eax
c0025280:	e8 6f e2 fe ff       	call   c00134f4 <Device::~Device()>
c0025285:	83 c4 04             	add    esp,0x4
c0025288:	90                   	nop
c0025289:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002528a <DriverlessDevice::~DriverlessDevice()>:
c002528a:	83 ec 0c             	sub    esp,0xc
c002528d:	83 ec 0c             	sub    esp,0xc
c0025290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025294:	e8 d7 ff ff ff       	call   c0025270 <DriverlessDevice::~DriverlessDevice()>
c0025299:	83 c4 10             	add    esp,0x10
c002529c:	83 ec 08             	sub    esp,0x8
c002529f:	68 58 01 00 00       	push   0x158
c00252a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00252a8:	e8 ba ce fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c00252ad:	83 c4 10             	add    esp,0x10
c00252b0:	83 c4 0c             	add    esp,0xc
c00252b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00252b4 <LinkedList<Device>::addElement(Device*)>:
c00252b4:	83 ec 0c             	sub    esp,0xc
c00252b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00252bc:	75 10                	jne    c00252ce <LinkedList<Device>::addElement(Device*)+0x1a>
c00252be:	83 ec 0c             	sub    esp,0xc
c00252c1:	68 80 6d 02 c0       	push   0xc0026d80
c00252c6:	e8 1a 37 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00252cb:	83 c4 10             	add    esp,0x10
c00252ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00252d4:	85 c0                	test   eax,eax
c00252d6:	74 3a                	je     c0025312 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252df:	85 c0                	test   eax,eax
c00252e1:	74 2f                	je     c0025312 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252ee:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00252f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00252ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025306:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025310:	eb 68                	jmp    c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025316:	8b 00                	mov    eax,DWORD PTR [eax]
c0025318:	85 c0                	test   eax,eax
c002531a:	75 4e                	jne    c002536a <LinkedList<Device>::addElement(Device*)+0xb6>
c002531c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025323:	85 c0                	test   eax,eax
c0025325:	75 43                	jne    c002536a <LinkedList<Device>::addElement(Device*)+0xb6>
c0025327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002532f:	89 10                	mov    DWORD PTR [eax],edx
c0025331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025335:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025339:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002533c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025343:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002534d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025351:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025354:	85 c0                	test   eax,eax
c0025356:	74 22                	je     c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	68 a2 6d 02 c0       	push   0xc0026da2
c0025360:	e8 80 36 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0025365:	83 c4 10             	add    esp,0x10
c0025368:	eb 10                	jmp    c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c002536a:	83 ec 0c             	sub    esp,0xc
c002536d:	68 ac 6d 02 c0       	push   0xc0026dac
c0025372:	e8 6e 36 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0025377:	83 c4 10             	add    esp,0x10
c002537a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025381:	8d 50 01             	lea    edx,[eax+0x1]
c0025384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025388:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002538b:	90                   	nop
c002538c:	83 c4 0c             	add    esp,0xc
c002538f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025390 <LinkedList<Device>::LinkedList()>:
c0025390:	83 ec 0c             	sub    esp,0xc
c0025393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025397:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002539d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00253bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253d3:	83 ec 0c             	sub    esp,0xc
c00253d6:	68 66 6d 02 c0       	push   0xc0026d66
c00253db:	e8 67 ce fe ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c00253e0:	83 c4 10             	add    esp,0x10
c00253e3:	90                   	nop
c00253e4:	83 c4 0c             	add    esp,0xc
c00253e7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c00253e8 <CPU::readCR0()>:
c00253e8:	83 ec 10             	sub    esp,0x10
c00253eb:	0f 20 c0             	mov    eax,cr0
c00253ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00253f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253f6:	83 c4 10             	add    esp,0x10
c00253f9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c00253fa <CPU::writeCR0(unsigned long)>:
c00253fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253fe:	0f 22 c0             	mov    cr0,eax
c0025401:	90                   	nop
c0025402:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0025403 <CPU::readDR0()>:
c0025403:	83 ec 10             	sub    esp,0x10
c0025406:	0f 21 c0             	mov    eax,db0
c0025409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002540d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025411:	83 c4 10             	add    esp,0x10
c0025414:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025415 <CPU::readDR1()>:
c0025415:	83 ec 10             	sub    esp,0x10
c0025418:	0f 21 c8             	mov    eax,db1
c002541b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002541f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025423:	83 c4 10             	add    esp,0x10
c0025426:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c0025427 <CPU::readDR2()>:
c0025427:	83 ec 10             	sub    esp,0x10
c002542a:	0f 21 d0             	mov    eax,db2
c002542d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025435:	83 c4 10             	add    esp,0x10
c0025438:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c0025439 <CPU::readDR3()>:
c0025439:	83 ec 10             	sub    esp,0x10
c002543c:	0f 21 d8             	mov    eax,db3
c002543f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025447:	83 c4 10             	add    esp,0x10
c002544a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c002544b <CPU::readDR6()>:
c002544b:	83 ec 10             	sub    esp,0x10
c002544e:	0f 21 f0             	mov    eax,db6
c0025451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025455:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025459:	83 c4 10             	add    esp,0x10
c002545c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c002545d <CPU::readDR7()>:
c002545d:	83 ec 10             	sub    esp,0x10
c0025460:	0f 21 f8             	mov    eax,db7
c0025463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002546b:	83 c4 10             	add    esp,0x10
c002546e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025474:	8b 00                	mov    eax,DWORD PTR [eax]
c0025476:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002547c:	8b 00                	mov    eax,DWORD PTR [eax]
c002547e:	85 c0                	test   eax,eax
c0025480:	75 0e                	jne    c0025490 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025489:	85 c0                	test   eax,eax
c002548b:	75 03                	jne    c0025490 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002548d:	b0 01                	mov    al,0x1
c002548f:	c3                   	ret    
c0025490:	b0 00                	mov    al,0x0
c0025492:	90                   	nop
c0025493:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549b:	8b 00                	mov    eax,DWORD PTR [eax]
c002549d:	85 c0                	test   eax,eax
c002549f:	75 15                	jne    c00254b6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	68 b8 6d 02 c0       	push   0xc0026db8
c00254a9:	e8 37 35 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00254ae:	83 c4 10             	add    esp,0x10
c00254b1:	e9 88 00 00 00       	jmp    c002553e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00254b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254c0:	85 c0                	test   eax,eax
c00254c2:	0f 95 c0             	setne  al
c00254c5:	84 c0                	test   al,al
c00254c7:	74 10                	je     c00254d9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00254c9:	83 ec 0c             	sub    esp,0xc
c00254cc:	68 03 6e 02 c0       	push   0xc0026e03
c00254d1:	e8 0f 35 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00254d6:	83 c4 10             	add    esp,0x10
c00254d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00254df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254e2:	85 c0                	test   eax,eax
c00254e4:	0f 94 c0             	sete   al
c00254e7:	84 c0                	test   al,al
c00254e9:	74 33                	je     c002551e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00254eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00254f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025504:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025507:	83 f8 01             	cmp    eax,0x1
c002550a:	74 21                	je     c002552d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002550c:	83 ec 0c             	sub    esp,0xc
c002550f:	68 dc 6d 02 c0       	push   0xc0026ddc
c0025514:	e8 cc 34 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0025519:	83 c4 10             	add    esp,0x10
c002551c:	eb 0f                	jmp    c002552d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002551e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025522:	8b 00                	mov    eax,DWORD PTR [eax]
c0025524:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552b:	89 10                	mov    DWORD PTR [eax],edx
c002552d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025531:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025534:	8d 50 ff             	lea    edx,[eax-0x1]
c0025537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002553b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002553e:	83 c4 0c             	add    esp,0xc
c0025541:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025542:	83 ec 0c             	sub    esp,0xc
c0025545:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002554a:	75 10                	jne    c002555c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002554c:	83 ec 0c             	sub    esp,0xc
c002554f:	68 80 6d 02 c0       	push   0xc0026d80
c0025554:	e8 8c 34 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c0025559:	83 c4 10             	add    esp,0x10
c002555c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025560:	8b 00                	mov    eax,DWORD PTR [eax]
c0025562:	85 c0                	test   eax,eax
c0025564:	74 34                	je     c002559a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002556d:	85 c0                	test   eax,eax
c002556f:	74 29                	je     c002559a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002557c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025587:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002558a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025591:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025598:	eb 65                	jmp    c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002559a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559e:	8b 00                	mov    eax,DWORD PTR [eax]
c00255a0:	85 c0                	test   eax,eax
c00255a2:	75 4b                	jne    c00255ef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255ab:	85 c0                	test   eax,eax
c00255ad:	75 40                	jne    c00255ef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255b7:	89 10                	mov    DWORD PTR [eax],edx
c00255b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00255c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255cb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00255d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00255d9:	85 c0                	test   eax,eax
c00255db:	74 22                	je     c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255dd:	83 ec 0c             	sub    esp,0xc
c00255e0:	68 a2 6d 02 c0       	push   0xc0026da2
c00255e5:	e8 fb 33 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00255ea:	83 c4 10             	add    esp,0x10
c00255ed:	eb 10                	jmp    c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255ef:	83 ec 0c             	sub    esp,0xc
c00255f2:	68 ac 6d 02 c0       	push   0xc0026dac
c00255f7:	e8 e9 33 ff ff       	call   c00189e5 <Krnl::panic(char const*)>
c00255fc:	83 c4 10             	add    esp,0x10
c00255ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025603:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025606:	8d 50 01             	lea    edx,[eax+0x1]
c0025609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002560d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025610:	90                   	nop
c0025611:	83 c4 0c             	add    esp,0xc
c0025614:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025616 <ACPI::~ACPI()>:
c0025616:	83 ec 0c             	sub    esp,0xc
c0025619:	ba 14 7c 02 c0       	mov    edx,0xc0027c14
c002561e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025622:	89 10                	mov    DWORD PTR [eax],edx
c0025624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	50                   	push   eax
c002562c:	e8 c3 de fe ff       	call   c00134f4 <Device::~Device()>
c0025631:	83 c4 10             	add    esp,0x10
c0025634:	90                   	nop
c0025635:	83 c4 0c             	add    esp,0xc
c0025638:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002563a <ACPI::~ACPI()>:
c002563a:	83 ec 0c             	sub    esp,0xc
c002563d:	83 ec 0c             	sub    esp,0xc
c0025640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025644:	e8 cd ff ff ff       	call   c0025616 <ACPI::~ACPI()>
c0025649:	83 c4 10             	add    esp,0x10
c002564c:	83 ec 08             	sub    esp,0x8
c002564f:	68 68 22 00 00       	push   0x2268
c0025654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025658:	e8 0a cb fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c002565d:	83 c4 10             	add    esp,0x10
c0025660:	83 c4 0c             	add    esp,0xc
c0025663:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025664 <CPU::~CPU()>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	ba 04 80 02 c0       	mov    edx,0xc0028004
c002566c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025670:	89 10                	mov    DWORD PTR [eax],edx
c0025672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025676:	83 ec 0c             	sub    esp,0xc
c0025679:	50                   	push   eax
c002567a:	e8 75 de fe ff       	call   c00134f4 <Device::~Device()>
c002567f:	83 c4 10             	add    esp,0x10
c0025682:	90                   	nop
c0025683:	83 c4 0c             	add    esp,0xc
c0025686:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025688 <CPU::~CPU()>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	83 ec 0c             	sub    esp,0xc
c002568e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025692:	e8 cd ff ff ff       	call   c0025664 <CPU::~CPU()>
c0025697:	83 c4 10             	add    esp,0x10
c002569a:	83 ec 08             	sub    esp,0x8
c002569d:	68 98 11 00 00       	push   0x1198
c00256a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256a6:	e8 bc ca fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c00256ab:	83 c4 10             	add    esp,0x10
c00256ae:	83 c4 0c             	add    esp,0xc
c00256b1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c00256b2 <CPU::readCR4()>:
c00256b2:	83 ec 10             	sub    esp,0x10
c00256b5:	0f 20 e0             	mov    eax,cr4
c00256b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256c0:	83 c4 10             	add    esp,0x10
c00256c3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c00256c4 <CPU::writeDR7(unsigned long)>:
c00256c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256c8:	0f 23 f8             	mov    db7,eax
c00256cb:	90                   	nop
c00256cc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c00256cd <CPU::writeCR4(unsigned long)>:
c00256cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256d1:	0f 22 e0             	mov    cr4,eax
c00256d4:	90                   	nop
c00256d5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c00256d6 <CPU::readCR2()>:
c00256d6:	83 ec 10             	sub    esp,0x10
c00256d9:	0f 20 d0             	mov    eax,cr2
c00256dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256e4:	83 c4 10             	add    esp,0x10
c00256e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00256e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00256e8:	90                   	nop
c00256e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00256ea <ThreadControlBlock::ThreadControlBlock()>:
c00256ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00256f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025704:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002570b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002570f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002571a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002571e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025722:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025726:	90                   	nop
c0025727:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025728:	83 ec 0c             	sub    esp,0xc
c002572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002574b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002574f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002576b:	83 ec 0c             	sub    esp,0xc
c002576e:	68 66 6d 02 c0       	push   0xc0026d66
c0025773:	e8 cf ca fe ff       	call   c0012247 <Dbg::kprintf(char const*, ...)>
c0025778:	83 c4 10             	add    esp,0x10
c002577b:	90                   	nop
c002577c:	83 c4 0c             	add    esp,0xc
c002577f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025780 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025784:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025787:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0025788 <Vm::_FPUState::_FPUState()>:
c0025788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002578c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025793:	90                   	nop
c0025794:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025796 <PCI::~PCI()>:
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c002579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a2:	89 10                	mov    DWORD PTR [eax],edx
c00257a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	50                   	push   eax
c00257ac:	e8 53 d7 fe ff       	call   c0012f04 <Bus::~Bus()>
c00257b1:	83 c4 10             	add    esp,0x10
c00257b4:	90                   	nop
c00257b5:	83 c4 0c             	add    esp,0xc
c00257b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00257ba <PCI::~PCI()>:
c00257ba:	83 ec 0c             	sub    esp,0xc
c00257bd:	83 ec 0c             	sub    esp,0xc
c00257c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257c4:	e8 cd ff ff ff       	call   c0025796 <PCI::~PCI()>
c00257c9:	83 c4 10             	add    esp,0x10
c00257cc:	83 ec 08             	sub    esp,0x8
c00257cf:	68 58 01 00 00       	push   0x158
c00257d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257d8:	e8 8a c9 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c00257dd:	83 c4 10             	add    esp,0x10
c00257e0:	83 c4 0c             	add    esp,0xc
c00257e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00257e4 <IDE::~IDE()>:
c00257e4:	83 ec 0c             	sub    esp,0xc
c00257e7:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c00257ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f0:	89 10                	mov    DWORD PTR [eax],edx
c00257f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f6:	83 ec 0c             	sub    esp,0xc
c00257f9:	50                   	push   eax
c00257fa:	e8 0b e2 fe ff       	call   c0013a0a <HardDiskController::~HardDiskController()>
c00257ff:	83 c4 10             	add    esp,0x10
c0025802:	90                   	nop
c0025803:	83 c4 0c             	add    esp,0xc
c0025806:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025808 <IDE::~IDE()>:
c0025808:	83 ec 0c             	sub    esp,0xc
c002580b:	83 ec 0c             	sub    esp,0xc
c002580e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025812:	e8 cd ff ff ff       	call   c00257e4 <IDE::~IDE()>
c0025817:	83 c4 10             	add    esp,0x10
c002581a:	83 ec 08             	sub    esp,0x8
c002581d:	68 70 02 00 00       	push   0x270
c0025822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025826:	e8 3c c9 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c002582b:	83 c4 10             	add    esp,0x10
c002582e:	83 c4 0c             	add    esp,0xc
c0025831:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025832 <ATA::~ATA()>:
c0025832:	83 ec 0c             	sub    esp,0xc
c0025835:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c002583a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583e:	89 10                	mov    DWORD PTR [eax],edx
c0025840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025844:	83 ec 0c             	sub    esp,0xc
c0025847:	50                   	push   eax
c0025848:	e8 9b e2 fe ff       	call   c0013ae8 <PhysicalDisk::~PhysicalDisk()>
c002584d:	83 c4 10             	add    esp,0x10
c0025850:	90                   	nop
c0025851:	83 c4 0c             	add    esp,0xc
c0025854:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025856 <ATA::~ATA()>:
c0025856:	83 ec 0c             	sub    esp,0xc
c0025859:	83 ec 0c             	sub    esp,0xc
c002585c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025860:	e8 cd ff ff ff       	call   c0025832 <ATA::~ATA()>
c0025865:	83 c4 10             	add    esp,0x10
c0025868:	83 ec 08             	sub    esp,0x8
c002586b:	68 7c 01 00 00       	push   0x17c
c0025870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025874:	e8 ee c8 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025879:	83 c4 10             	add    esp,0x10
c002587c:	83 c4 0c             	add    esp,0xc
c002587f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025880 <ATAPI::~ATAPI()>:
c0025880:	83 ec 0c             	sub    esp,0xc
c0025883:	ba 2c 90 02 c0       	mov    edx,0xc002902c
c0025888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002588c:	89 10                	mov    DWORD PTR [eax],edx
c002588e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025892:	83 ec 0c             	sub    esp,0xc
c0025895:	50                   	push   eax
c0025896:	e8 4d e2 fe ff       	call   c0013ae8 <PhysicalDisk::~PhysicalDisk()>
c002589b:	83 c4 10             	add    esp,0x10
c002589e:	90                   	nop
c002589f:	83 c4 0c             	add    esp,0xc
c00258a2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00258a4 <ATAPI::~ATAPI()>:
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	83 ec 0c             	sub    esp,0xc
c00258aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ae:	e8 cd ff ff ff       	call   c0025880 <ATAPI::~ATAPI()>
c00258b3:	83 c4 10             	add    esp,0x10
c00258b6:	83 ec 08             	sub    esp,0x8
c00258b9:	68 80 01 00 00       	push   0x180
c00258be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258c2:	e8 a0 c8 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c00258c7:	83 c4 10             	add    esp,0x10
c00258ca:	83 c4 0c             	add    esp,0xc
c00258cd:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00258ce <AVX::~AVX()>:
c00258ce:	83 ec 0c             	sub    esp,0xc
c00258d1:	ba 68 90 02 c0       	mov    edx,0xc0029068
c00258d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258da:	89 10                	mov    DWORD PTR [eax],edx
c00258dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e0:	83 ec 0c             	sub    esp,0xc
c00258e3:	50                   	push   eax
c00258e4:	e8 83 e2 fe ff       	call   c0013b6c <FPU::~FPU()>
c00258e9:	83 c4 10             	add    esp,0x10
c00258ec:	90                   	nop
c00258ed:	83 c4 0c             	add    esp,0xc
c00258f0:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00258f2 <AVX::~AVX()>:
c00258f2:	83 ec 0c             	sub    esp,0xc
c00258f5:	83 ec 0c             	sub    esp,0xc
c00258f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258fc:	e8 cd ff ff ff       	call   c00258ce <AVX::~AVX()>
c0025901:	83 c4 10             	add    esp,0x10
c0025904:	83 ec 08             	sub    esp,0x8
c0025907:	68 58 01 00 00       	push   0x158
c002590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025910:	e8 52 c8 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025915:	83 c4 10             	add    esp,0x10
c0025918:	83 c4 0c             	add    esp,0xc
c002591b:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002591c <MMX::~MMX()>:
c002591c:	83 ec 0c             	sub    esp,0xc
c002591f:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c0025924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025928:	89 10                	mov    DWORD PTR [eax],edx
c002592a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592e:	83 ec 0c             	sub    esp,0xc
c0025931:	50                   	push   eax
c0025932:	e8 35 e2 fe ff       	call   c0013b6c <FPU::~FPU()>
c0025937:	83 c4 10             	add    esp,0x10
c002593a:	90                   	nop
c002593b:	83 c4 0c             	add    esp,0xc
c002593e:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025940 <MMX::~MMX()>:
c0025940:	83 ec 0c             	sub    esp,0xc
c0025943:	83 ec 0c             	sub    esp,0xc
c0025946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002594a:	e8 cd ff ff ff       	call   c002591c <MMX::~MMX()>
c002594f:	83 c4 10             	add    esp,0x10
c0025952:	83 ec 08             	sub    esp,0x8
c0025955:	68 58 01 00 00       	push   0x158
c002595a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002595e:	e8 04 c8 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025963:	83 c4 10             	add    esp,0x10
c0025966:	83 c4 0c             	add    esp,0xc
c0025969:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002596a <SSE::~SSE()>:
c002596a:	83 ec 0c             	sub    esp,0xc
c002596d:	ba e8 90 02 c0       	mov    edx,0xc00290e8
c0025972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025976:	89 10                	mov    DWORD PTR [eax],edx
c0025978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002597c:	83 ec 0c             	sub    esp,0xc
c002597f:	50                   	push   eax
c0025980:	e8 e7 e1 fe ff       	call   c0013b6c <FPU::~FPU()>
c0025985:	83 c4 10             	add    esp,0x10
c0025988:	90                   	nop
c0025989:	83 c4 0c             	add    esp,0xc
c002598c:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002598e <SSE::~SSE()>:
c002598e:	83 ec 0c             	sub    esp,0xc
c0025991:	83 ec 0c             	sub    esp,0xc
c0025994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025998:	e8 cd ff ff ff       	call   c002596a <SSE::~SSE()>
c002599d:	83 c4 10             	add    esp,0x10
c00259a0:	83 ec 08             	sub    esp,0x8
c00259a3:	68 58 01 00 00       	push   0x158
c00259a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259ac:	e8 b6 c7 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c00259b1:	83 c4 10             	add    esp,0x10
c00259b4:	83 c4 0c             	add    esp,0xc
c00259b7:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00259b8 <x87::~x87()>:
c00259b8:	83 ec 0c             	sub    esp,0xc
c00259bb:	ba 28 91 02 c0       	mov    edx,0xc0029128
c00259c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c4:	89 10                	mov    DWORD PTR [eax],edx
c00259c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ca:	83 ec 0c             	sub    esp,0xc
c00259cd:	50                   	push   eax
c00259ce:	e8 99 e1 fe ff       	call   c0013b6c <FPU::~FPU()>
c00259d3:	83 c4 10             	add    esp,0x10
c00259d6:	90                   	nop
c00259d7:	83 c4 0c             	add    esp,0xc
c00259da:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00259dc <x87::~x87()>:
c00259dc:	83 ec 0c             	sub    esp,0xc
c00259df:	83 ec 0c             	sub    esp,0xc
c00259e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259e6:	e8 cd ff ff ff       	call   c00259b8 <x87::~x87()>
c00259eb:	83 c4 10             	add    esp,0x10
c00259ee:	83 ec 08             	sub    esp,0x8
c00259f1:	68 58 01 00 00       	push   0x158
c00259f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259fa:	e8 68 c7 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c00259ff:	83 c4 10             	add    esp,0x10
c0025a02:	83 c4 0c             	add    esp,0xc
c0025a05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025a06 <IOAPIC::~IOAPIC()>:
c0025a06:	83 ec 0c             	sub    esp,0xc
c0025a09:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0025a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a12:	89 10                	mov    DWORD PTR [eax],edx
c0025a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a18:	83 ec 0c             	sub    esp,0xc
c0025a1b:	50                   	push   eax
c0025a1c:	e8 d3 da fe ff       	call   c00134f4 <Device::~Device()>
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	90                   	nop
c0025a25:	83 c4 0c             	add    esp,0xc
c0025a28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025a2a <IOAPIC::~IOAPIC()>:
c0025a2a:	83 ec 0c             	sub    esp,0xc
c0025a2d:	83 ec 0c             	sub    esp,0xc
c0025a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a34:	e8 cd ff ff ff       	call   c0025a06 <IOAPIC::~IOAPIC()>
c0025a39:	83 c4 10             	add    esp,0x10
c0025a3c:	83 ec 08             	sub    esp,0x8
c0025a3f:	68 68 01 00 00       	push   0x168
c0025a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a48:	e8 1a c7 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025a4d:	83 c4 10             	add    esp,0x10
c0025a50:	83 c4 0c             	add    esp,0xc
c0025a53:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025a54 <APIC::~APIC()>:
c0025a54:	83 ec 0c             	sub    esp,0xc
c0025a57:	ba 38 92 02 c0       	mov    edx,0xc0029238
c0025a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a60:	89 10                	mov    DWORD PTR [eax],edx
c0025a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a66:	83 ec 0c             	sub    esp,0xc
c0025a69:	50                   	push   eax
c0025a6a:	e8 d1 e5 fe ff       	call   c0014040 <InterruptController::~InterruptController()>
c0025a6f:	83 c4 10             	add    esp,0x10
c0025a72:	90                   	nop
c0025a73:	83 c4 0c             	add    esp,0xc
c0025a76:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025a78 <APIC::~APIC()>:
c0025a78:	83 ec 0c             	sub    esp,0xc
c0025a7b:	83 ec 0c             	sub    esp,0xc
c0025a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a82:	e8 cd ff ff ff       	call   c0025a54 <APIC::~APIC()>
c0025a87:	83 c4 10             	add    esp,0x10
c0025a8a:	83 ec 08             	sub    esp,0x8
c0025a8d:	68 58 21 00 00       	push   0x2158
c0025a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a96:	e8 cc c6 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	83 c4 0c             	add    esp,0xc
c0025aa1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025aa2 <PIC::~PIC()>:
c0025aa2:	83 ec 0c             	sub    esp,0xc
c0025aa5:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0025aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aae:	89 10                	mov    DWORD PTR [eax],edx
c0025ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab4:	83 ec 0c             	sub    esp,0xc
c0025ab7:	50                   	push   eax
c0025ab8:	e8 83 e5 fe ff       	call   c0014040 <InterruptController::~InterruptController()>
c0025abd:	83 c4 10             	add    esp,0x10
c0025ac0:	90                   	nop
c0025ac1:	83 c4 0c             	add    esp,0xc
c0025ac4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025ac6 <PIC::~PIC()>:
c0025ac6:	83 ec 0c             	sub    esp,0xc
c0025ac9:	83 ec 0c             	sub    esp,0xc
c0025acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ad0:	e8 cd ff ff ff       	call   c0025aa2 <PIC::~PIC()>
c0025ad5:	83 c4 10             	add    esp,0x10
c0025ad8:	83 ec 08             	sub    esp,0x8
c0025adb:	68 58 21 00 00       	push   0x2158
c0025ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ae4:	e8 7e c6 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025ae9:	83 c4 10             	add    esp,0x10
c0025aec:	83 c4 0c             	add    esp,0xc
c0025aef:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025af0 <APICTimer::~APICTimer()>:
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0025af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afc:	89 10                	mov    DWORD PTR [eax],edx
c0025afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b02:	83 ec 0c             	sub    esp,0xc
c0025b05:	50                   	push   eax
c0025b06:	e8 33 02 ff ff       	call   c0015d3e <Timer::~Timer()>
c0025b0b:	83 c4 10             	add    esp,0x10
c0025b0e:	90                   	nop
c0025b0f:	83 c4 0c             	add    esp,0xc
c0025b12:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025b14 <APICTimer::~APICTimer()>:
c0025b14:	83 ec 0c             	sub    esp,0xc
c0025b17:	83 ec 0c             	sub    esp,0xc
c0025b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b1e:	e8 cd ff ff ff       	call   c0025af0 <APICTimer::~APICTimer()>
c0025b23:	83 c4 10             	add    esp,0x10
c0025b26:	83 ec 08             	sub    esp,0x8
c0025b29:	68 60 01 00 00       	push   0x160
c0025b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b32:	e8 30 c6 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025b37:	83 c4 10             	add    esp,0x10
c0025b3a:	83 c4 0c             	add    esp,0xc
c0025b3d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025b3e <PIT::~PIT()>:
c0025b3e:	83 ec 0c             	sub    esp,0xc
c0025b41:	ba 74 93 02 c0       	mov    edx,0xc0029374
c0025b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4a:	89 10                	mov    DWORD PTR [eax],edx
c0025b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b50:	83 ec 0c             	sub    esp,0xc
c0025b53:	50                   	push   eax
c0025b54:	e8 e5 01 ff ff       	call   c0015d3e <Timer::~Timer()>
c0025b59:	83 c4 10             	add    esp,0x10
c0025b5c:	90                   	nop
c0025b5d:	83 c4 0c             	add    esp,0xc
c0025b60:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025b62 <PIT::~PIT()>:
c0025b62:	83 ec 0c             	sub    esp,0xc
c0025b65:	83 ec 0c             	sub    esp,0xc
c0025b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b6c:	e8 cd ff ff ff       	call   c0025b3e <PIT::~PIT()>
c0025b71:	83 c4 10             	add    esp,0x10
c0025b74:	83 ec 08             	sub    esp,0x8
c0025b77:	68 5c 01 00 00       	push   0x15c
c0025b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b80:	e8 e2 c5 fe ff       	call   c0012167 <operator delete(void*, unsigned long)>
c0025b85:	83 c4 10             	add    esp,0x10
c0025b88:	83 c4 0c             	add    esp,0xc
c0025b8b:	c3                   	ret    
