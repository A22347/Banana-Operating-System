
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 85 02 00       	call   c0028538 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 90 02 c0       	mov    ebx,0xc00290e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 90 02 c0    	cmp    ebx,0xc00290f0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 d9 02 c0       	mov    eax,0xc002d998
c0000049:	3d 98 d9 02 c0       	cmp    eax,0xc002d998
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 d9 02 c0       	push   0xc002d998
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 d9 02 c0       	mov    eax,0xc002d998
c0000075:	2d 98 d9 02 c0       	sub    eax,0xc002d998
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 d9 02 c0       	push   0xc002d998
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 df 02 c0 00 	cmp    BYTE PTR ds:0xc002dfc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 90 02 c0       	mov    ebx,0xc00290f8
c00000bb:	81 eb f4 90 02 c0    	sub    ebx,0xc00290f4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 90 02 c0       	mov    esi,0xc00290f4
c00000ca:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc df 02 c0       	mov    ds:0xc002dfcc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 d9 02 c0       	push   0xc002d998
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 df 02 c0       	push   0xc002dfd0
c000012c:	68 98 d9 02 c0       	push   0xc002d998
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 e7 d4 01 00       	call   c001d882 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 15 28 01 00       	call   c0012bc8 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 c5 d4 01 00       	call   c001d882 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 13 d9 01 00       	call   c001dcef <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 c1 de 01 00       	call   c001e2a6 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 10 e4 02 c0 	lgdtd  ds:0xc002e410
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 fe 44 01 00       	call   c0014ad7 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 e8 df 02 c0       	mov    ds:0xc002dfe8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 e8 df 02 c0    	mov    DWORD PTR ds:0xc002dfe8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d e8 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfe8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 00 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f00],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 00 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f00],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 00 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f00],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 00 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f00],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 00 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f00],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 00 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e000
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 04 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1ffc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 04 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ffc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 2c e0 02 c0    	cmp    DWORD PTR ds:0xc002e02c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 3c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e03c
c0000e60:	c7 42 0c 34 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e034
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 00 e0 02 c0 02 	test   BYTE PTR ds:0xc002e000,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 00 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e000
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 04 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ffc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 04 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ffc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 34 e0 02 c0 	lea    edx,[eax*8-0x3ffd1fcc]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 40 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e040
c00011e2:	81 fb 34 e0 02 c0    	cmp    ebx,0xc002e034
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 34 e0 02 c0       	cmp    eax,0xc002e034
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 30 e0 02 c0    	cmp    DWORD PTR ds:0xc002e030,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 3c e0 02 c0       	mov    ds:0xc002e03c,eax
c000121e:	a3 40 e0 02 c0       	mov    ds:0xc002e040,eax
c0001223:	a3 30 e0 02 c0       	mov    ds:0xc002e030,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 34 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e034
c0001231:	c7 40 0c 34 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e034
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 40 e0 02 c0       	mov    ds:0xc002e040,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 34 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e034
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 f8 df 02 c0 	lea    ebp,[edx*4-0x3ffd2008]
c0001282:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 00 e0 02 c0 	lea    ecx,[edx*4-0x3ffd2000]
c000129d:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 34 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1ccc],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 34 e0 02 c0 	lea    eax,[eax*8-0x3ffd1fcc]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,ecx
c0001357:	89 0d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,ecx
c000135d:	c7 41 08 34 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e034
c0001364:	c7 41 0c 34 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e034
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 2c e0 02 c0 	lea    edx,[ecx*8-0x3ffd1fd4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 34 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1ccc]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 34 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1ccc]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 2c e0 02 c0 	lea    edx,[eax*4-0x3ffd1fd4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 34 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1ccc],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,edi
c000142a:	89 3d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,edi
c0001430:	c7 47 08 34 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e034
c0001437:	c7 47 0c 34 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e034
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 30 e0 02 c0    	mov    DWORD PTR ds:0xc002e030,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 00 e0 02 c0       	mov    edx,0xc002e000
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 54 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e354
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 54 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e354,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 54 e3 02 c0    	mov    DWORD PTR ds:0xc002e354,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 2c e0 02 c0    	cmp    DWORD PTR ds:0xc002e02c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 5c e3 02 c0    	push   DWORD PTR ds:0xc002e35c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 5c e3 02 c0       	mov    eax,ds:0xc002e35c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 2c e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e02c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 04 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ffc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 34 e0 02 c0       	mov    eax,0xc002e034
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 2c e3 02 c0       	cmp    eax,0xc002e32c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 50 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e350
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 64 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e364
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 74 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e374
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 04 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6dfc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 00 e0 02 c0       	mov    ds:0xc002e000,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 44 e3 02 c0    	mov    DWORD PTR ds:0xc002e344,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 48 e3 02 c0    	mov    DWORD PTR ds:0xc002e348,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 4c e3 02 c0    	mov    DWORD PTR ds:0xc002e34c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 54 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e354,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 e0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce520]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 72 f0 01 00       	jmp    c0020c9e <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 e0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce520]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 a3 f0 01 00       	jmp    c0020ce5 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 e0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce520]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 cb f0 01 00       	jmp    c0020d2c <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 58 49 02 00       	call   c002689c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 20 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ce0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 20 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ce0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 20 92 02 c0       	mov    edx,0xc0029220
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 4c 93 02 c0       	mov    edx,0xc002934c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 a0 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1c60]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 80 e3 02 c0    	mov    ax,ds:0xc002e380
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 80 e3 02 c0    	mov    ds:0xc002e380,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 55 37 02 00       	call   c002689c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 52 93 02 c0       	mov    eax,0xc0029352
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad a0 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6d60]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 5b 93 02 c0       	mov    eax,0xc002935b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 20 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ce0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 20 21 02 00       	call   c002689c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 30 93 02 c0       	mov    edx,0xc0029330
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 20 92 02 c0       	mov    edx,0xc0029220
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 30 92 02 c0       	mov    edx,0xc0029230
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 a0 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c60]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 a0 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c60],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 e7 0a 02 00       	call   c002689c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 cd 0a 02 00       	call   c002689c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 77 92 02 c0       	mov    eax,0xc0029277
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 70 92 02 c0       	mov    eax,0xc0029270
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 a0 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c60]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 60 92 02 c0       	mov    esi,0xc0029260
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 10 f2 01 00       	call   c002689c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 40 93 02 c0       	mov    edx,0xc0029340
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 40 92 02 c0       	mov    edx,0xc0029240
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 50 92 02 c0       	mov    edx,0xc0029250
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 62 93 02 c0       	mov    edx,0xc0029362
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 6e 93 02 c0       	mov    edx,0xc002936e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 82 93 02 c0       	mov    edx,0xc0029382
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c a0 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc00296a0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 a0 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc00296a0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 a0 94 02 c0       	mov    eax,0xc00294a0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 e0 93 02 c0       	mov    eax,0xc00293e0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 a0 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c60]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 64 fb 01 00       	call   c002836f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 27 fb 01 00       	call   c0028351 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 fb fa 01 00       	call   c002836f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ae f1 01 00       	call   c0027a74 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 28 fc 01 00       	call   c0028500 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 75 fa 01 00       	call   c002836f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 b7 f9 01 00       	call   c002836f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 84 f9 01 00       	call   c0028351 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 71 f8 01 00       	call   c002836f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 39 f8 01 00       	call   c0028351 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 45 f6 01 00       	call   c002836f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 0a f6 01 00       	call   c0028351 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 00 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6400]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 1a f3 01 00       	call   c0028103 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 98 ec 01 00       	call   c0027aa0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 54 f5 01 00       	call   c0028373 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 42 f6 01 00       	call   c0028497 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 2c ec 01 00       	call   c0027aa0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 d7 f4 01 00       	call   c002836d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 b8 f4 01 00       	call   c0028371 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 46 f6 01 00       	call   c0028520 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 f8 f1 01 00       	call   c0028103 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 76 eb 01 00       	call   c0027aa0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 32 f4 01 00       	call   c0028373 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 20 f5 01 00       	call   c0028497 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 0a eb 01 00       	call   c0027aa0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 b5 f3 01 00       	call   c002836d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 95 f3 01 00       	call   c0028371 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 22 f5 01 00       	call   c0028520 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 d0 f2 01 00       	call   c002836f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 8e f2 01 00       	call   c0028351 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 76 f2 01 00       	call   c002836f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 e8 ef 01 00       	call   c0028103 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ea e2 01 00       	call   c0027423 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 4d e9 01 00       	call   c0027aa0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 9f ef 01 00       	call   c0028103 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 a5 e2 01 00       	call   c0027423 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 74 ef 01 00       	call   c0028103 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 c4 f1 01 00       	call   c002836d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 a1 e8 01 00       	call   c0027a74 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 1b f3 01 00       	call   c0028500 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 4a f1 01 00       	call   c0028351 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 45 e8 01 00       	call   c0027a74 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 c3 ee 01 00       	call   c0028103 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 46 e8 01 00       	call   c0027aa0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 98 ee 01 00       	call   c0028103 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 ff ea 01 00       	call   c0027d84 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 7e e1 01 00       	call   c0027423 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 de da 01 00       	call   c0026db8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 b5 f1 01 00       	call   c0028497 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 9e e7 01 00       	call   c0027aa0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 85 f1 01 00       	call   c0028497 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 f7 e0 01 00       	call   c0027423 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 30 f0 01 00       	call   c0028373 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 18 ea 01 00       	call   c0027d84 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 9e e0 01 00       	call   c0027423 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 84 f1 01 00       	call   c0028520 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 5e ed 01 00       	call   c0028103 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 b5 e6 01 00       	call   c0027a74 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 94 ef 01 00       	call   c002836f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 2d e0 01 00       	call   c0027423 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 59 e6 01 00       	call   c0027a74 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 f3 f0 01 00       	call   c0028520 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 ac ec 01 00       	call   c0028103 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 29 e6 01 00       	call   c0027aa0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 7c ec 01 00       	call   c0028103 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 82 df 01 00       	call   c0027423 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 52 ec 01 00       	call   c0028103 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 a4 ee 01 00       	call   c002836f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 7b e5 01 00       	call   c0027a74 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 f5 ef 01 00       	call   c0028500 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 24 ee 01 00       	call   c0028351 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 1e e5 01 00       	call   c0027a74 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 9c eb 01 00       	call   c0028103 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 1f e5 01 00       	call   c0027aa0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 71 eb 01 00       	call   c0028103 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 d8 e7 01 00       	call   c0027d84 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 57 de 01 00       	call   c0027423 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 a7 d7 01 00       	call   c0026db8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 7e ee 01 00       	call   c0028497 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 67 e4 01 00       	call   c0027aa0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 4e ee 01 00       	call   c0028497 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 c0 dd 01 00       	call   c0027423 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 f9 ec 01 00       	call   c0028373 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 e0 e6 01 00       	call   c0027d84 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 5f dd 01 00       	call   c0027423 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 45 ee 01 00       	call   c0028520 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 1f ea 01 00       	call   c0028103 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 76 e3 01 00       	call   c0027a74 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 55 ec 01 00       	call   c002836f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ee dc 01 00       	call   c0027423 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 1a e3 01 00       	call   c0027a74 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 8f e9 01 00       	call   c0028103 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 95 dc 01 00       	call   c0027423 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 60 9c 02 c0       	mov    eax,0xc0029c60
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 74 9c 02 c0       	mov    eax,0xc0029c74
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 0a e8 01 00       	call   c0028103 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 88 e1 01 00       	call   c0027aa0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 1a d4 01 00       	call   c0026db8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 f1 ea 01 00       	call   c0028497 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 da e0 01 00       	call   c0027aa0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 bd ea 01 00       	call   c0028497 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 2f da 01 00       	call   c0027423 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 8f ea 01 00       	call   c0028497 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 7e e0 01 00       	call   c0027aa0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 e7 d9 01 00       	call   c0027423 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 08 d3 01 00       	call   c0026db8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 df e9 01 00       	call   c0028497 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 c8 df 01 00       	call   c0027aa0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 ab e9 01 00       	call   c0028497 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 1d d9 01 00       	call   c0027423 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 7d e9 01 00       	call   c0028497 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 6c df 01 00       	call   c0027aa0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 d5 d8 01 00       	call   c0027423 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 b3 d8 01 00       	call   c0027423 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 8f d1 01 00       	call   c0026db8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 66 e8 01 00       	call   c0028497 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 4f de 01 00       	call   c0027aa0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 32 e8 01 00       	call   c0028497 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 a4 d7 01 00       	call   c0027423 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 04 e8 01 00       	call   c0028497 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ed dd 01 00       	call   c0027aa0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 56 d7 01 00       	call   c0027423 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 b6 e7 01 00       	call   c0028497 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 9f dd 01 00       	call   c0027aa0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 08 d7 01 00       	call   c0027423 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 1d d0 01 00       	call   c0026db8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 f4 e6 01 00       	call   c0028497 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 dd dc 01 00       	call   c0027aa0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 c4 e6 01 00       	call   c0028497 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 36 d6 01 00       	call   c0027423 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 96 e6 01 00       	call   c0028497 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 7f dc 01 00       	call   c0027aa0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 e8 d5 01 00       	call   c0027423 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 48 e6 01 00       	call   c0028497 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 31 dc 01 00       	call   c0027aa0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 9a d5 01 00       	call   c0027423 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 6e d5 01 00       	call   c0027423 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 cb db 01 00       	call   c0027aa0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 87 e4 01 00       	call   c0028373 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 16 d5 01 00       	call   c0027423 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 73 db 01 00       	call   c0027aa0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 2f e4 01 00       	call   c0028373 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 a9 cd 01 00       	call   c0026db8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 80 e4 01 00       	call   c0028497 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 69 da 01 00       	call   c0027aa0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 4c e4 01 00       	call   c0028497 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 be d3 01 00       	call   c0027423 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 1e e4 01 00       	call   c0028497 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 07 da 01 00       	call   c0027aa0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 70 d3 01 00       	call   c0027423 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 d0 e3 01 00       	call   c0028497 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 b9 d9 01 00       	call   c0027aa0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 22 d3 01 00       	call   c0027423 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 82 e3 01 00       	call   c0028497 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 6b d9 01 00       	call   c0027aa0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 d4 d2 01 00       	call   c0027423 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 34 e3 01 00       	call   c0028497 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 1d d9 01 00       	call   c0027aa0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 86 d2 01 00       	call   c0027423 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 88 cb 01 00       	call   c0026db8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 5f e2 01 00       	call   c0028497 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 48 d8 01 00       	call   c0027aa0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 2f e2 01 00       	call   c0028497 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 a1 d1 01 00       	call   c0027423 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 01 e2 01 00       	call   c0028497 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ea d7 01 00       	call   c0027aa0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 53 d1 01 00       	call   c0027423 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 b3 e1 01 00       	call   c0028497 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 9c d7 01 00       	call   c0027aa0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 05 d1 01 00       	call   c0027423 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 65 e1 01 00       	call   c0028497 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 4e d7 01 00       	call   c0027aa0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 b7 d0 01 00       	call   c0027423 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 17 e1 01 00       	call   c0028497 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 00 d7 01 00       	call   c0027aa0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 69 d0 01 00       	call   c0027423 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 3d d0 01 00       	call   c0027423 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 9a d6 01 00       	call   c0027aa0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 56 df 01 00       	call   c0028373 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 e5 cf 01 00       	call   c0027423 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 42 d6 01 00       	call   c0027aa0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 fe de 01 00       	call   c0028373 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 8c cf 01 00       	call   c0027423 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 e9 d5 01 00       	call   c0027aa0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 a5 de 01 00       	call   c0028373 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 33 cf 01 00       	call   c0027423 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 90 d5 01 00       	call   c0027aa0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 4c de 01 00       	call   c0028373 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 aa c7 01 00       	call   c0026db8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 81 de 01 00       	call   c0028497 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 6a d4 01 00       	call   c0027aa0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 4d de 01 00       	call   c0028497 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 bf cd 01 00       	call   c0027423 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 1f de 01 00       	call   c0028497 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 08 d4 01 00       	call   c0027aa0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 71 cd 01 00       	call   c0027423 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 d1 dd 01 00       	call   c0028497 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ba d3 01 00       	call   c0027aa0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 23 cd 01 00       	call   c0027423 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 83 dd 01 00       	call   c0028497 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 6c d3 01 00       	call   c0027aa0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 d5 cc 01 00       	call   c0027423 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 35 dd 01 00       	call   c0028497 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 1e d3 01 00       	call   c0027aa0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 87 cc 01 00       	call   c0027423 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 e7 dc 01 00       	call   c0028497 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 d0 d2 01 00       	call   c0027aa0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 36 cc 01 00       	call   c0027423 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 96 dc 01 00       	call   c0028497 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 7f d2 01 00       	call   c0027aa0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 e8 cb 01 00       	call   c0027423 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 e2 c4 01 00       	call   c0026db8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 b9 db 01 00       	call   c0028497 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 a2 d1 01 00       	call   c0027aa0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 82 db 01 00       	call   c0028497 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 f4 ca 01 00       	call   c0027423 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 54 db 01 00       	call   c0028497 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 3d d1 01 00       	call   c0027aa0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 a6 ca 01 00       	call   c0027423 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 06 db 01 00       	call   c0028497 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ef d0 01 00       	call   c0027aa0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 58 ca 01 00       	call   c0027423 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 b8 da 01 00       	call   c0028497 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 a1 d0 01 00       	call   c0027aa0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 0a ca 01 00       	call   c0027423 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 6a da 01 00       	call   c0028497 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 53 d0 01 00       	call   c0027aa0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 bc c9 01 00       	call   c0027423 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 1c da 01 00       	call   c0028497 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 05 d0 01 00       	call   c0027aa0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 6b c9 01 00       	call   c0027423 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 cb d9 01 00       	call   c0028497 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 b4 cf 01 00       	call   c0027aa0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 23 c9 01 00       	call   c0027423 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 fc c8 01 00       	call   c0027423 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 5a cf 01 00       	call   c0027aa0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 16 d8 01 00       	call   c0028373 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 a5 c8 01 00       	call   c0027423 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 03 cf 01 00       	call   c0027aa0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 bf d7 01 00       	call   c0028373 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 4d c8 01 00       	call   c0027423 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 ab ce 01 00       	call   c0027aa0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 67 d7 01 00       	call   c0028373 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 f5 c7 01 00       	call   c0027423 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 53 ce 01 00       	call   c0027aa0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 0f d7 01 00       	call   c0028373 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 9d c7 01 00       	call   c0027423 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 fb cd 01 00       	call   c0027aa0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 b7 d6 01 00       	call   c0028373 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 4b c7 01 00       	call   c0027423 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 a9 cd 01 00       	call   c0027aa0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 65 d6 01 00       	call   c0028373 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 79 bf 01 00       	call   c0026db8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 50 d6 01 00       	call   c0028497 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 39 cc 01 00       	call   c0027aa0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 20 d6 01 00       	call   c0028497 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 92 c5 01 00       	call   c0027423 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 a4 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd635c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 c6 d5 01 00       	call   c0028497 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 af cb 01 00       	call   c0027aa0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 1a c5 01 00       	call   c0027423 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 67 d5 01 00       	call   c0028497 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 50 cb 01 00       	call   c0027aa0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 bb c4 01 00       	call   c0027423 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 08 d5 01 00       	call   c0028497 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 f1 ca 01 00       	call   c0027aa0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 5c c4 01 00       	call   c0027423 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 a9 d4 01 00       	call   c0028497 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 92 ca 01 00       	call   c0027aa0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 fd c3 01 00       	call   c0027423 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 4a d4 01 00       	call   c0028497 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 33 ca 01 00       	call   c0027aa0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 9e c3 01 00       	call   c0027423 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 eb d3 01 00       	call   c0028497 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 d4 c9 01 00       	call   c0027aa0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 3f c3 01 00       	call   c0027423 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 8c d3 01 00       	call   c0028497 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 75 c9 01 00       	call   c0027aa0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 e0 c2 01 00       	call   c0027423 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 2d d3 01 00       	call   c0028497 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 16 c9 01 00       	call   c0027aa0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 81 c2 01 00       	call   c0027423 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 8b bb 01 00       	call   c0026db8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 62 d2 01 00       	call   c0028497 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 4b c8 01 00       	call   c0027aa0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 32 d2 01 00       	call   c0028497 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 a4 c1 01 00       	call   c0027423 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 c0 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6340]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 d7 d1 01 00       	call   c0028497 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 c0 c7 01 00       	call   c0027aa0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 2b c1 01 00       	call   c0027423 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 77 d1 01 00       	call   c0028497 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 60 c7 01 00       	call   c0027aa0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 cb c0 01 00       	call   c0027423 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 17 d1 01 00       	call   c0028497 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 00 c7 01 00       	call   c0027aa0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 6b c0 01 00       	call   c0027423 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 b7 d0 01 00       	call   c0028497 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 a0 c6 01 00       	call   c0027aa0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 0b c0 01 00       	call   c0027423 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 57 d0 01 00       	call   c0028497 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 40 c6 01 00       	call   c0027aa0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 ab bf 01 00       	call   c0027423 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 f7 cf 01 00       	call   c0028497 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 e0 c5 01 00       	call   c0027aa0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 4b bf 01 00       	call   c0027423 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 97 cf 01 00       	call   c0028497 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 80 c5 01 00       	call   c0027aa0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 eb be 01 00       	call   c0027423 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 37 cf 01 00       	call   c0028497 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 20 c5 01 00       	call   c0027aa0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 8b be 01 00       	call   c0027423 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 dc 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6324]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 30 be 01 00       	call   c0027423 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 8d c4 01 00       	call   c0027aa0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 49 cd 01 00       	call   c0028373 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 d3 bd 01 00       	call   c0027423 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 30 c4 01 00       	call   c0027aa0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ec cc 01 00       	call   c0028373 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 76 bd 01 00       	call   c0027423 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 d3 c3 01 00       	call   c0027aa0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 8f cc 01 00       	call   c0028373 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 19 bd 01 00       	call   c0027423 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 76 c3 01 00       	call   c0027aa0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 32 cc 01 00       	call   c0028373 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 bc bc 01 00       	call   c0027423 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 19 c3 01 00       	call   c0027aa0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 d5 cb 01 00       	call   c0028373 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 5f bc 01 00       	call   c0027423 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 bc c2 01 00       	call   c0027aa0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 78 cb 01 00       	call   c0028373 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 02 bc 01 00       	call   c0027423 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 5f c2 01 00       	call   c0027aa0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 1b cb 01 00       	call   c0028373 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 a5 bb 01 00       	call   c0027423 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 02 c2 01 00       	call   c0027aa0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 be ca 01 00       	call   c0028373 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ba c1 01 00       	call   c0027aa0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 2a cc 01 00       	jmp    c0028520 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 9c c8 01 00       	call   c002836f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 5a c8 01 00       	call   c0028351 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 f1 c5 01 00       	call   c0028103 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 f2 b8 01 00       	call   c0027423 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 c1 c5 01 00       	call   c0028103 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 28 c2 01 00       	call   c0027d84 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 c7 c7 01 00       	call   c0028351 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ca c7 01 00       	call   c002836f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 9d c7 01 00       	call   c002836f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 96 c1 01 00       	call   c0027d84 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 18 c9 01 00       	call   c0028520 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 f3 c8 01 00       	call   c0028520 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 cd c4 01 00       	call   c0028103 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 24 be 01 00       	call   c0027a74 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 03 c7 01 00       	call   c002836f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 9c b7 01 00       	call   c0027423 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 c0 bd 01 00       	call   c0027a74 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 5a c8 01 00       	call   c0028520 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 9a c0 01 00       	call   c0027d84 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 17 b7 01 00       	call   c0027423 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 43 c3 01 00       	call   c0028103 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 43 b6 01 00       	call   c0027423 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 23 b6 01 00       	call   c0027423 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 f3 c2 01 00       	call   c0028103 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 43 c5 01 00       	call   c002836d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 22 bc 01 00       	call   c0027a74 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 9c c6 01 00       	call   c0028500 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 cb c4 01 00       	call   c0028351 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 c9 bb 01 00       	call   c0027a74 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 47 c2 01 00       	call   c0028103 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ca bb 01 00       	call   c0027aa0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 1c c2 01 00       	call   c0028103 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 83 be 01 00       	call   c0027d84 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 02 b5 01 00       	call   c0027423 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 cc c1 01 00       	call   c0028103 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 18 c4 01 00       	call   c002836f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 0d bb 01 00       	call   c0027aa0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 df ba 01 00       	call   c0027aa0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 18 c1 01 00       	call   c0028103 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 7c bd 01 00       	call   c0027d84 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 44 bd 01 00       	call   c0027d84 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 c3 b3 01 00       	call   c0027423 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 a8 c4 01 00       	call   c0028520 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 82 c0 01 00       	call   c0028103 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 d9 b9 01 00       	call   c0027a74 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 b8 c2 01 00       	call   c002836f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 50 b3 01 00       	call   c0027423 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 74 b9 01 00       	call   c0027a74 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 0e c4 01 00       	call   c0028520 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 d7 c1 01 00       	call   c002836f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 95 c1 01 00       	call   c0028351 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 2c bf 01 00       	call   c0028103 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 2d b2 01 00       	call   c0027423 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 fc be 01 00       	call   c0028103 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 63 bb 01 00       	call   c0027d84 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 02 c1 01 00       	call   c0028351 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 05 c1 01 00       	call   c002836f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 d8 c0 01 00       	call   c002836f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 d1 ba 01 00       	call   c0027d84 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 53 c2 01 00       	call   c0028520 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 2e c2 01 00       	call   c0028520 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 08 be 01 00       	call   c0028103 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 5f b7 01 00       	call   c0027a74 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 3e c0 01 00       	call   c002836f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 d7 b0 01 00       	call   c0027423 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 fb b6 01 00       	call   c0027a74 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 95 c1 01 00       	call   c0028520 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 d5 b9 01 00       	call   c0027d84 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 52 b0 01 00       	call   c0027423 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 7d bc 01 00       	call   c0028103 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 7d af 01 00       	call   c0027423 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 5d af 01 00       	call   c0027423 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 2d bc 01 00       	call   c0028103 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 7d be 01 00       	call   c002836d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 5b b5 01 00       	call   c0027a74 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 d5 bf 01 00       	call   c0028500 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 04 be 01 00       	call   c0028351 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 01 b5 01 00       	call   c0027a74 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 7f bb 01 00       	call   c0028103 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 02 b5 01 00       	call   c0027aa0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 54 bb 01 00       	call   c0028103 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 bb b7 01 00       	call   c0027d84 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 3a ae 01 00       	call   c0027423 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 04 bb 01 00       	call   c0028103 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 50 bd 01 00       	call   c002836f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 45 b4 01 00       	call   c0027aa0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 17 b4 01 00       	call   c0027aa0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 4e ba 01 00       	call   c0028103 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 b2 b6 01 00       	call   c0027d84 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 7f b6 01 00       	call   c0027d84 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 fe ac 01 00       	call   c0027423 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 e3 bd 01 00       	call   c0028520 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 bd b9 01 00       	call   c0028103 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 14 b3 01 00       	call   c0027a74 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 f3 bb 01 00       	call   c002836f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 8b ac 01 00       	call   c0027423 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 af b2 01 00       	call   c0027a74 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 49 bd 01 00       	call   c0028520 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 12 bb 01 00       	call   c002836f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 d0 ba 01 00       	call   c0028351 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 67 b8 01 00       	call   c0028103 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 68 ab 01 00       	call   c0027423 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 37 b8 01 00       	call   c0028103 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 9e b4 01 00       	call   c0027d84 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 3d ba 01 00       	call   c0028351 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 40 ba 01 00       	call   c002836f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 13 ba 01 00       	call   c002836f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 0c b4 01 00       	call   c0027d84 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 8e bb 01 00       	call   c0028520 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 69 bb 01 00       	call   c0028520 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 43 b7 01 00       	call   c0028103 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 9a b0 01 00       	call   c0027a74 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 79 b9 01 00       	call   c002836f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 12 aa 01 00       	call   c0027423 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 36 b0 01 00       	call   c0027a74 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 d0 ba 01 00       	call   c0028520 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 10 b3 01 00       	call   c0027d84 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 8d a9 01 00       	call   c0027423 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 b8 b5 01 00       	call   c0028103 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 b8 a8 01 00       	call   c0027423 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 98 a8 01 00       	call   c0027423 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 68 b5 01 00       	call   c0028103 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 b8 b7 01 00       	call   c002836d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 96 ae 01 00       	call   c0027a74 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 10 b9 01 00       	call   c0028500 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 3f b7 01 00       	call   c0028351 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 3c ae 01 00       	call   c0027a74 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ba b4 01 00       	call   c0028103 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 3d ae 01 00       	call   c0027aa0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 8f b4 01 00       	call   c0028103 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 f6 b0 01 00       	call   c0027d84 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 75 a7 01 00       	call   c0027423 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 3f b4 01 00       	call   c0028103 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 8b b6 01 00       	call   c002836f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 80 ad 01 00       	call   c0027aa0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 52 ad 01 00       	call   c0027aa0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 89 b3 01 00       	call   c0028103 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ed af 01 00       	call   c0027d84 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ba af 01 00       	call   c0027d84 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 39 a6 01 00       	call   c0027423 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 1e b7 01 00       	call   c0028520 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 f8 b2 01 00       	call   c0028103 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 4f ac 01 00       	call   c0027a74 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 2e b5 01 00       	call   c002836f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 c6 a5 01 00       	call   c0027423 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ea ab 01 00       	call   c0027a74 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 84 b6 01 00       	call   c0028520 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 4d b4 01 00       	call   c002836f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 0b b4 01 00       	call   c0028351 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 a2 b1 01 00       	call   c0028103 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 a3 a4 01 00       	call   c0027423 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 72 b1 01 00       	call   c0028103 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 d9 ad 01 00       	call   c0027d84 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 78 b3 01 00       	call   c0028351 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 7b b3 01 00       	call   c002836f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 4e b3 01 00       	call   c002836f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 47 ad 01 00       	call   c0027d84 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 c9 b4 01 00       	call   c0028520 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 a4 b4 01 00       	call   c0028520 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 7e b0 01 00       	call   c0028103 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 d5 a9 01 00       	call   c0027a74 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 b4 b2 01 00       	call   c002836f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 4d a3 01 00       	call   c0027423 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 71 a9 01 00       	call   c0027a74 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 0b b4 01 00       	call   c0028520 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 4b ac 01 00       	call   c0027d84 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 c8 a2 01 00       	call   c0027423 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 f3 ae 01 00       	call   c0028103 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 f3 a1 01 00       	call   c0027423 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 d3 a1 01 00       	call   c0027423 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 a3 ae 01 00       	call   c0028103 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 f3 b0 01 00       	call   c002836d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 d1 a7 01 00       	call   c0027a74 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 4b b2 01 00       	call   c0028500 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 7a b0 01 00       	call   c0028351 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 77 a7 01 00       	call   c0027a74 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 f5 ad 01 00       	call   c0028103 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 78 a7 01 00       	call   c0027aa0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ca ad 01 00       	call   c0028103 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 31 aa 01 00       	call   c0027d84 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 b0 a0 01 00       	call   c0027423 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 7a ad 01 00       	call   c0028103 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 c6 af 01 00       	call   c002836f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 bb a6 01 00       	call   c0027aa0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 8d a6 01 00       	call   c0027aa0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 c4 ac 01 00       	call   c0028103 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 28 a9 01 00       	call   c0027d84 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 f5 a8 01 00       	call   c0027d84 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 74 9f 01 00       	call   c0027423 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 59 b0 01 00       	call   c0028520 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 33 ac 01 00       	call   c0028103 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 8a a5 01 00       	call   c0027a74 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 69 ae 01 00       	call   c002836f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 01 9f 01 00       	call   c0027423 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 25 a5 01 00       	call   c0027a74 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 bf af 01 00       	call   c0028520 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 85 ad 01 00       	call   c002836f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 43 ad 01 00       	call   c0028351 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 da aa 01 00       	call   c0028103 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 db 9d 01 00       	call   c0027423 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 aa aa 01 00       	call   c0028103 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 11 a7 01 00       	call   c0027d84 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 b0 ac 01 00       	call   c0028351 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 b3 ac 01 00       	call   c002836f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 86 ac 01 00       	call   c002836f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 7f a6 01 00       	call   c0027d84 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 01 ae 01 00       	call   c0028520 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 d8 ad 01 00       	call   c0028520 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 b2 a9 01 00       	call   c0028103 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 09 a3 01 00       	call   c0027a74 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 e8 ab 01 00       	call   c002836f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 81 9c 01 00       	call   c0027423 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 a9 a2 01 00       	call   c0027a74 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 43 ad 01 00       	call   c0028520 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 84 a5 01 00       	call   c0027d84 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 01 9c 01 00       	call   c0027423 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 2d a8 01 00       	call   c0028103 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 2d 9b 01 00       	call   c0027423 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 0d 9b 01 00       	call   c0027423 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 dd a7 01 00       	call   c0028103 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 11 aa 01 00       	call   c0028351 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 08 a1 01 00       	call   c0027a74 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 82 ab 01 00       	call   c0028500 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 b1 a9 01 00       	call   c0028351 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 ab a0 01 00       	call   c0027a74 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 29 a7 01 00       	call   c0028103 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 ac a0 01 00       	call   c0027aa0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 fe a6 01 00       	call   c0028103 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 65 a3 01 00       	call   c0027d84 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 e4 99 01 00       	call   c0027423 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ae a6 01 00       	call   c0028103 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 fa a8 01 00       	call   c002836f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ef 9f 01 00       	call   c0027aa0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 c1 9f 01 00       	call   c0027aa0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 05 a6 01 00       	call   c0028103 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 6c a2 01 00       	call   c0027d84 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 55 9f 01 00       	call   c0027aa0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 11 a8 01 00       	call   c0028373 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 04 a2 01 00       	call   c0027d84 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 83 98 01 00       	call   c0027423 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 68 a9 01 00       	call   c0028520 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 42 a5 01 00       	call   c0028103 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 99 9e 01 00       	call   c0027a74 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 78 a7 01 00       	call   c002836f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 10 98 01 00       	call   c0027423 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 38 9e 01 00       	call   c0027a74 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 d2 a8 01 00       	call   c0028520 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 04 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62fc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 f8 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6308]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 8d a5 01 00       	call   c002836f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 4b a5 01 00       	call   c0028351 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 37 a5 01 00       	call   c002836f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 a9 a2 01 00       	call   c0028103 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 27 9c 01 00       	call   c0027aa0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 79 a2 01 00       	call   c0028103 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 7f 95 01 00       	call   c0027423 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 4e a2 01 00       	call   c0028103 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 9e a4 01 00       	call   c002836d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 7f 9b 01 00       	call   c0027a74 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 f9 a5 01 00       	call   c0028500 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 28 a4 01 00       	call   c0028351 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 27 9b 01 00       	call   c0027a74 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 a5 a1 01 00       	call   c0028103 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 28 9b 01 00       	call   c0027aa0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 7a a1 01 00       	call   c0028103 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 e1 9d 01 00       	call   c0027d84 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 60 94 01 00       	call   c0027423 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 88 9d 01 00       	call   c0027d84 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 0e 94 01 00       	call   c0027423 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 f4 a4 01 00       	call   c0028520 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ce a0 01 00       	call   c0028103 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 25 9a 01 00       	call   c0027a74 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 04 a3 01 00       	call   c002836f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 9d 93 01 00       	call   c0027423 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 c9 99 01 00       	call   c0027a74 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 63 a4 01 00       	call   c0028520 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 18 a0 01 00       	call   c0028103 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 95 99 01 00       	call   c0027aa0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 e6 9f 01 00       	call   c0028103 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ec 92 01 00       	call   c0027423 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 bc 9f 01 00       	call   c0028103 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 10 a2 01 00       	call   c0028371 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 e9 98 01 00       	call   c0027a74 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 63 a3 01 00       	call   c0028500 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 92 a1 01 00       	call   c0028351 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 90 98 01 00       	call   c0027a74 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 0e 9f 01 00       	call   c0028103 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 91 98 01 00       	call   c0027aa0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 e3 9e 01 00       	call   c0028103 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 4a 9b 01 00       	call   c0027d84 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 c9 91 01 00       	call   c0027423 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 e5 9a 01 00       	call   c0027d84 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 64 91 01 00       	call   c0027423 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 4a a2 01 00       	call   c0028520 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 24 9e 01 00       	call   c0028103 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 7b 97 01 00       	call   c0027a74 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 5a a0 01 00       	call   c002836f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 f3 90 01 00       	call   c0027423 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 1f 97 01 00       	call   c0027a74 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 90 9d 01 00       	call   c0028103 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 96 90 01 00       	call   c0027423 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 1e 9e 02 c0       	mov    eax,0xc0029e1e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 2f 9e 02 c0       	mov    eax,0xc0029e2f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 66 9e 02 c0       	push   0xc0029e66
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 08 e4 02 c0       	mov    eax,0xc002e408
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 6f 9e 02 c0       	push   0xc0029e6f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 9c 68 02 c0       	mov    eax,0xc002689c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 79 9e 02 c0       	push   0xc0029e79
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 d0 65 02 c0       	mov    eax,0xc00265d0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 82 9e 02 c0       	push   0xc0029e82
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 9c 69 02 c0       	mov    eax,0xc002699c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 8c 9e 02 c0       	push   0xc0029e8c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 1c 67 02 c0       	mov    eax,0xc002671c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 95 9e 02 c0       	push   0xc0029e95
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 0c e4 02 c0       	mov    eax,0xc002e40c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 a2 9e 02 c0       	push   0xc0029ea2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 0d e4 02 c0       	mov    eax,0xc002e40d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 6f 5d 00 00       	call   c0014392 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c000e668:	68 af 9e 02 c0       	push   0xc0029eaf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 7b f4 00 00       	call   c001daf0 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 64 f7 00 00       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 4c e6 01 c0       	push   0xc001e64c
c000e693:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c000e699:	e8 50 f7 00 00       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c000e6a6:	c6 05 0d e4 02 c0 01 	mov    BYTE PTR ds:0xc002e40d,0x1
c000e6ad:	e8 1b 03 01 00       	call   c001e9cd <Vm::initialise8086()>
c000e6b2:	e8 c3 4a 00 00       	call   c001317a <Fs::initVFS()>
c000e6b7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 ad dd 00 00       	call   c001c480 <Sys::loadSyscalls()>
c000e6d3:	e8 86 bc 00 00       	call   c001a35e <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 bc 9e 02 c0       	push   0xc0029ebc
c000e6e2:	68 c5 9e 02 c0       	push   0xc0029ec5
c000e6e7:	e8 98 c9 00 00       	call   c001b084 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 6e 55 00 00       	call   c0013c62 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 61 5c 00 00       	call   c0014366 <Device::loadDriversForAll()>
c000e705:	e8 9a b7 00 00       	call   c0019ea4 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 cd 9e 02 c0       	push   0xc0029ecd
c000e719:	e8 f6 ee 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 21 f1 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 1e fa 00 00       	call   c001e152 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 e9 9e 02 c0       	push   0xc0029ee9
c000e749:	50                   	push   eax
c000e74a:	e8 bd 5c 00 00       	call   c001440c <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 88 a0 02 c0       	mov    edx,0xc002a088
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 21 e4 02 c0 04 	test   BYTE PTR ds:0xc002e421,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 83 7c 01 00       	call   c0026566 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 98 a2 00 00       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 71 a2 00 00       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 4f a2 00 00       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 2d a2 00 00       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 20 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e420,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 3b a1 00 00       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 16 a1 00 00       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 ed 7a 01 00       	call   c0026520 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 aa 7a 01 00       	call   c0026500 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 32 a1 00 00       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 f9 9e 02 c0       	push   0xc0029ef9
c000eaaf:	e8 42 43 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 0c 9f 02 c0       	push   0xc0029f0c
c000ead2:	e8 1f 43 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 1d 9f 02 c0       	push   0xc0029f1d
c000eaf5:	e8 fc 42 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 2e 9f 02 c0       	push   0xc0029f2e
c000eb18:	e8 d9 42 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 3f 9f 02 c0       	push   0xc0029f3f
c000eb3b:	e8 b6 42 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 50 9f 02 c0       	push   0xc0029f50
c000eb5e:	e8 93 42 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 61 9f 02 c0       	push   0xc0029f61
c000eb81:	e8 70 42 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 72 9f 02 c0       	push   0xc0029f72
c000eba4:	e8 4d 42 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 83 9f 02 c0       	push   0xc0029f83
c000ebc7:	e8 2a 42 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 94 9f 02 c0       	push   0xc0029f94
c000ebea:	e8 07 42 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 a5 9f 02 c0       	push   0xc0029fa5
c000ec0d:	e8 e4 41 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 b6 9f 02 c0       	push   0xc0029fb6
c000ec30:	e8 c1 41 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 c7 9f 02 c0       	push   0xc0029fc7
c000ec53:	e8 9e 41 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 d8 9f 02 c0       	push   0xc0029fd8
c000ec76:	e8 7b 41 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 e9 9f 02 c0       	push   0xc0029fe9
c000ec99:	e8 58 41 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 fa 9f 02 c0       	push   0xc0029ffa
c000ecbc:	e8 35 41 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 0b a0 02 c0       	push   0xc002a00b
c000ecdf:	e8 12 41 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 1c a0 02 c0       	push   0xc002a01c
c000ed02:	e8 ef 40 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 2d a0 02 c0       	push   0xc002a02d
c000ed21:	e8 d0 40 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 70 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba70
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 bf 40 00 00       	jmp    c0012df6 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 3e a0 02 c0       	push   0xc002a03e
c000ee0a:	e8 88 b6 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 44 a0 02 c0       	push   0xc002a044
c000ee42:	e8 50 b6 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 20 e4 02 c0 04 	test   BYTE PTR ds:0xc002e420,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 44 d3 02 c0 	sete   BYTE PTR ds:0xc002d344
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 d1 91 00 00       	call   c0018086 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 58 53 00 00       	call   c001421c <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 7a 9d 00 00       	call   c0018c6e <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 19 53 00 00       	call   c001421c <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 83 58 00 00       	call   c00147a2 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 e9 52 00 00       	call   c001421c <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 99 ef 00 00       	call   c001deee <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 4a a0 02 c0       	push   0xc002a04a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 53 3e 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 5b a0 02 c0       	push   0xc002a05b
c000efc0:	e8 d2 b4 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 68 a0 02 c0       	push   0xc002a068
c000efd5:	e8 bd b4 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 72 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a072
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 a6 b4 00 00       	jmp    c001a497 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 ac a0 02 c0       	push   0xc002a0ac
c000f086:	e8 6b 3d 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 12 e4 02 c0       	mov    ds:0xc002e412,eax
c000f0c7:	66 89 15 10 e4 02 c0 	mov    WORD PTR ds:0xc002e410,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 e0 ea 00 00       	call   c001dcbe <unlockScheduler()>
c000f1de:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 74 93 01 00       	call   c00285a0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 6b 93 01 00       	call   c00285a0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 18 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e418,0x7ff
c000f323:	a3 1a e4 02 c0       	mov    ds:0xc002e41a,eax
c000f328:	0f 01 1d 18 e4 02 c0 	lidtd  ds:0xc002e418
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 52 27 00 00       	call   c0011d67 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 82 2d 00 00       	call   c00123a2 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 12 1e 00 00       	call   c0011450 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 43 1e 00 00       	call   c0011490 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 20 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d320
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 c8 a0 02 c0       	push   0xc002a0c8
c000f6f4:	e8 fd 36 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 20 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d320,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 48 26 00 00       	call   c0011d67 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 20 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d320
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 69 2b 00 00       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 20 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d320
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 f8 a0 02 c0       	push   0xc002a0f8
c000f7ad:	e8 e5 ac 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 fd a0 02 c0       	push   0xc002a0fd
c000f7c3:	e8 cf ac 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 e3 e4 00 00       	call   c001dcbc <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 d4 e4 00 00       	call   c001dcbe <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 6c 25 00 00       	call   c0011d67 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 98 2b 00 00       	call   c00123a2 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 51 25 00 00       	call   c0011d67 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 3b 28 00 00       	call   c001205e <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 40 d3 02 c0       	mov    eax,ds:0xc002d340
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 40 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d340
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 40 d3 02 c0       	mov    eax,ds:0xc002d340
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 32 0c 00 00       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 f4 0b 00 00       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 8b 0c 00 00       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 40 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d340
c000fb46:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 40 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d340,0x8000
c000fba0:	c6 05 a0 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4a0,0x1
c000fba7:	c7 05 d8 e4 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e4d8,0xc000fa13
c000fbb1:	c7 05 c4 e4 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e4c4,0xc000f89a
c000fbbb:	c7 05 c0 e4 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e4c0,0xc000f8e5
c000fbc5:	c7 05 cc e4 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e4cc,0xc000fa59
c000fbcf:	c7 05 d4 e4 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e4d4,0xc000f963
c000fbd9:	c7 05 c8 e4 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e4c8,0xc000f9c1
c000fbe3:	c7 05 d0 e4 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e4d0,0xc000f9c2
c000fbed:	c7 05 dc e4 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e4dc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 72 09 00 00       	call   c001057c <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 04 a1 02 c0       	push   0xc002a104
c000fc4a:	e8 a7 31 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 d1 03 00 00       	call   c0010037 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 41 20 00 00       	call   c0011cac <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 71 ba 02 c0       	push   0xc002ba71
c000fc92:	e8 00 a8 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 20 e4 02 c0    	mov    DWORD PTR ds:0xc002e420,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 ef 21 00 00       	call   c0011e9c <VAS::VAS()>
c000fcad:	89 1d 88 e5 02 c0    	mov    DWORD PTR ds:0xc002e588,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 1b a1 02 c0 	mov    DWORD PTR [esp],0xc002a11b
c000fcbf:	e8 32 31 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 08 e4 02 c0    	mov    DWORD PTR ds:0xc002e408,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 38 a1 02 c0       	push   0xc002a138
c000fce8:	e8 09 31 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000fced:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 2f 24 00 00       	call   c0012136 <VAS::~VAS()>
c000fd07:	c7 04 24 4b a1 02 c0 	mov    DWORD PTR [esp],0xc002a14b
c000fd0e:	e8 84 a7 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000fd13:	83 c4 20             	add    esp,0x20
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba 60 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1ba0],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be 60 e4 02 c0       	mov    esi,0xc002e460
c000fd84:	8d 90 60 e4 02 c0    	lea    edx,[eax-0x3ffd1ba0]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 60 e4 02 c0    	lea    eax,[edx-0x3ffd1ba0]
c000fdea:	8d 94 11 60 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1ba0]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 24 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d324
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 24 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d324
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 24 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d324
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 4c e4 02 c0       	mov    eax,ds:0xc002e44c
c000fe76:	48                   	dec    eax
c000fe77:	a3 4c e4 02 c0       	mov    ds:0xc002e44c,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d 50 e4 02 c0    	idiv   DWORD PTR ds:0xc002e450
c000fe8c:	39 05 48 e4 02 c0    	cmp    DWORD PTR ds:0xc002e448,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 48 e4 02 c0       	mov    ds:0xc002e448,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 5b 0a 00 00       	call   c0010910 <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 66 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a166
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 ba a5 00 00       	jmp    c001a497 <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	51                   	push   ecx
c000fee0:	8b 35 40 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e440
c000fee6:	89 f3                	mov    ebx,esi
c000fee8:	eb 0a                	jmp    c000fef4 <Phys::allocatePage()+0x17>
c000feea:	89 1d 40 e4 02 c0    	mov    DWORD PTR ds:0xc002e440,ebx
c000fef0:	39 de                	cmp    esi,ebx
c000fef2:	74 24                	je     c000ff18 <Phys::allocatePage()+0x3b>
c000fef4:	53                   	push   ebx
c000fef5:	e8 3d ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefa:	5a                   	pop    edx
c000fefb:	84 c0                	test   al,al
c000fefd:	74 5a                	je     c000ff59 <Phys::allocatePage()+0x7c>
c000feff:	43                   	inc    ebx
c000ff00:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff06:	75 e2                	jne    c000feea <Phys::allocatePage()+0xd>
c000ff08:	31 db                	xor    ebx,ebx
c000ff0a:	c7 05 40 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e440,0x0
c000ff14:	39 de                	cmp    esi,ebx
c000ff16:	75 dc                	jne    c000fef4 <Phys::allocatePage()+0x17>
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	68 7c a1 02 c0       	push   0xc002a17c
c000ff20:	e8 d1 2e 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c000ff25:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff2c:	e8 e9 fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	85 c0                	test   eax,eax
c000ff36:	75 56                	jne    c000ff8e <Phys::allocatePage()+0xb1>
c000ff38:	83 ec 0c             	sub    esp,0xc
c000ff3b:	68 8d a1 02 c0       	push   0xc002a18d
c000ff40:	e8 52 a5 00 00       	call   c001a497 <Krnl::panic(char const*)>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	8b 1d 40 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e440
c000ff4e:	53                   	push   ebx
c000ff4f:	e8 e3 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff54:	5a                   	pop    edx
c000ff55:	84 c0                	test   al,al
c000ff57:	75 a6                	jne    c000feff <Phys::allocatePage()+0x22>
c000ff59:	6a 01                	push   0x1
c000ff5b:	53                   	push   ebx
c000ff5c:	e8 a4 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff61:	a1 4c e4 02 c0       	mov    eax,ds:0xc002e44c
c000ff66:	59                   	pop    ecx
c000ff67:	40                   	inc    eax
c000ff68:	5b                   	pop    ebx
c000ff69:	a3 4c e4 02 c0       	mov    ds:0xc002e44c,eax
c000ff6e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff71:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff74:	c1 e0 02             	shl    eax,0x2
c000ff77:	99                   	cdq    
c000ff78:	f7 3d 50 e4 02 c0    	idiv   DWORD PTR ds:0xc002e450
c000ff7e:	39 05 48 e4 02 c0    	cmp    DWORD PTR ds:0xc002e448,eax
c000ff84:	75 0c                	jne    c000ff92 <Phys::allocatePage()+0xb5>
c000ff86:	a1 40 e4 02 c0       	mov    eax,ds:0xc002e440
c000ff8b:	c1 e0 0c             	shl    eax,0xc
c000ff8e:	5a                   	pop    edx
c000ff8f:	5b                   	pop    ebx
c000ff90:	5e                   	pop    esi
c000ff91:	c3                   	ret    
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	a3 48 e4 02 c0       	mov    ds:0xc002e448,eax
c000ff9a:	50                   	push   eax
c000ff9b:	e8 70 09 00 00       	call   c0010910 <VgaText::updateRAMUsageDisplay(int)>
c000ffa0:	83 c4 10             	add    esp,0x10
c000ffa3:	eb e1                	jmp    c000ff86 <Phys::allocatePage()+0xa9>

c000ffa5 <Phys::allocateContiguousPages(int)>:
c000ffa5:	57                   	push   edi
c000ffa6:	56                   	push   esi
c000ffa7:	53                   	push   ebx
c000ffa8:	31 db                	xor    ebx,ebx
c000ffaa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffae:	e8 09 dd 00 00       	call   c001dcbc <lockScheduler()>
c000ffb3:	85 db                	test   ebx,ebx
c000ffb5:	75 11                	jne    c000ffc8 <Phys::allocateContiguousPages(int)+0x23>
c000ffb7:	e8 21 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffbc:	83 ff 01             	cmp    edi,0x1
c000ffbf:	89 c6                	mov    esi,eax
c000ffc1:	74 21                	je     c000ffe4 <Phys::allocateContiguousPages(int)+0x3f>
c000ffc3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffc8:	e8 10 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffcd:	89 da                	mov    edx,ebx
c000ffcf:	c1 e2 0c             	shl    edx,0xc
c000ffd2:	01 f2                	add    edx,esi
c000ffd4:	39 c2                	cmp    edx,eax
c000ffd6:	74 17                	je     c000ffef <Phys::allocateContiguousPages(int)+0x4a>
c000ffd8:	bb 01 00 00 00       	mov    ebx,0x1
c000ffdd:	89 c6                	mov    esi,eax
c000ffdf:	83 ff 01             	cmp    edi,0x1
c000ffe2:	75 e4                	jne    c000ffc8 <Phys::allocateContiguousPages(int)+0x23>
c000ffe4:	e8 d5 dc 00 00       	call   c001dcbe <unlockScheduler()>
c000ffe9:	89 f0                	mov    eax,esi
c000ffeb:	5b                   	pop    ebx
c000ffec:	5e                   	pop    esi
c000ffed:	5f                   	pop    edi
c000ffee:	c3                   	ret    
c000ffef:	43                   	inc    ebx
c000fff0:	39 fb                	cmp    ebx,edi
c000fff2:	75 bf                	jne    c000ffb3 <Phys::allocateContiguousPages(int)+0xe>
c000fff4:	e8 c5 dc 00 00       	call   c001dcbe <unlockScheduler()>
c000fff9:	89 f0                	mov    eax,esi
c000fffb:	5b                   	pop    ebx
c000fffc:	5e                   	pop    esi
c000fffd:	5f                   	pop    edi
c000fffe:	c3                   	ret    

c000ffff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ffff:	56                   	push   esi
c0010000:	53                   	push   ebx
c0010001:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010005:	39 1d 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,ebx
c001000b:	73 06                	jae    c0010013 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001000d:	89 1d 44 e4 02 c0    	mov    DWORD PTR ds:0xc002e444,ebx
c0010013:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010017:	c1 eb 0c             	shr    ebx,0xc
c001001a:	c1 e8 0c             	shr    eax,0xc
c001001d:	39 d8                	cmp    eax,ebx
c001001f:	73 13                	jae    c0010034 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010021:	6a 00                	push   0x0
c0010023:	8d 70 01             	lea    esi,[eax+0x1]
c0010026:	50                   	push   eax
c0010027:	e8 d9 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001002c:	5a                   	pop    edx
c001002d:	89 f0                	mov    eax,esi
c001002f:	59                   	pop    ecx
c0010030:	39 f3                	cmp    ebx,esi
c0010032:	75 ed                	jne    c0010021 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010034:	5b                   	pop    ebx
c0010035:	5e                   	pop    esi
c0010036:	c3                   	ret    

c0010037 <Phys::physicalMemorySetup(unsigned int)>:
c0010037:	55                   	push   ebp
c0010038:	57                   	push   edi
c0010039:	56                   	push   esi
c001003a:	53                   	push   ebx
c001003b:	31 db                	xor    ebx,ebx
c001003d:	83 ec 40             	sub    esp,0x40
c0010040:	6a 30                	push   0x30
c0010042:	6a 00                	push   0x0
c0010044:	68 60 e4 02 c0       	push   0xc002e460
c0010049:	e8 2a 07 ff ff       	call   c0000778 <memset>
c001004e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010052:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010057:	05 00 10 00 00       	add    eax,0x1000
c001005c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	83 ec 08             	sub    esp,0x8
c0010066:	6a 01                	push   0x1
c0010068:	53                   	push   ebx
c0010069:	43                   	inc    ebx
c001006a:	e8 96 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001006f:	83 c4 10             	add    esp,0x10
c0010072:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010078:	75 e9                	jne    c0010063 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001007a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010081:	66 85 c0             	test   ax,ax
c0010084:	0f 84 8e 01 00 00    	je     c0010218 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001008a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001008e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010096:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001009a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001009f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100ab:	eb 15                	jmp    c00100c2 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100ad:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100b1:	83 c3 18             	add    ebx,0x18
c00100b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100b8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100bc:	0f 84 66 01 00 00    	je     c0010228 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100c2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100d3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100d5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100d8:	01 f0                	add    eax,esi
c00100da:	55                   	push   ebp
c00100db:	11 fa                	adc    edx,edi
c00100dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100e1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100e9:	56                   	push   esi
c00100ea:	68 c8 a1 02 c0       	push   0xc002a1c8
c00100ef:	e8 02 2d 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00100f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100f8:	83 c4 10             	add    esp,0x10
c00100fb:	09 f8                	or     eax,edi
c00100fd:	0f 85 25 01 00 00    	jne    c0010228 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010103:	4d                   	dec    ebp
c0010104:	75 a7                	jne    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010106:	ba 00 00 08 00       	mov    edx,0x80000
c001010b:	89 c1                	mov    ecx,eax
c001010d:	39 f2                	cmp    edx,esi
c001010f:	19 f9                	sbb    ecx,edi
c0010111:	0f 82 a7 00 00 00    	jb     c00101be <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010117:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001011b:	89 c1                	mov    ecx,eax
c001011d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010121:	0f 83 97 00 00 00    	jae    c00101be <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010127:	ba 00 00 0a 00       	mov    edx,0xa0000
c001012c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010130:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010134:	39 fa                	cmp    edx,edi
c0010136:	19 e8                	sbb    eax,ebp
c0010138:	0f 82 14 01 00 00    	jb     c0010252 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001013e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010142:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010146:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001014c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010151:	83 d5 ff             	adc    ebp,0xffffffff
c0010154:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010158:	31 c0                	xor    eax,eax
c001015a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001015e:	39 fa                	cmp    edx,edi
c0010160:	89 c1                	mov    ecx,eax
c0010162:	19 e9                	sbb    ecx,ebp
c0010164:	0f 83 43 ff ff ff    	jae    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c001016a:	be 00 00 08 00       	mov    esi,0x80000
c001016f:	50                   	push   eax
c0010170:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010174:	57                   	push   edi
c0010175:	56                   	push   esi
c0010176:	68 ec a1 02 c0       	push   0xc002a1ec
c001017b:	e8 76 2c 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0010180:	5a                   	pop    edx
c0010181:	59                   	pop    ecx
c0010182:	57                   	push   edi
c0010183:	56                   	push   esi
c0010184:	e8 76 fe ff ff       	call   c000ffff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010189:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001018d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010191:	83 c4 0c             	add    esp,0xc
c0010194:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010198:	03 05 50 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e450
c001019e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101a5:	a3 50 e4 02 c0       	mov    ds:0xc002e450,eax
c00101aa:	52                   	push   edx
c00101ab:	50                   	push   eax
c00101ac:	68 a9 a1 02 c0       	push   0xc002a1a9
c00101b1:	e8 40 2c 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00101b6:	83 c4 10             	add    esp,0x10
c00101b9:	e9 ef fe ff ff       	jmp    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101be:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101ca:	39 ea                	cmp    edx,ebp
c00101cc:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101d0:	0f 82 d7 fe ff ff    	jb     c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101db:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101df:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101e3:	0f 83 c4 fe ff ff    	jae    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e9:	39 ee                	cmp    esi,ebp
c00101eb:	89 f8                	mov    eax,edi
c00101ed:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101f1:	0f 83 78 ff ff ff    	jae    c001016f <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101ff:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010203:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010207:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001020b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001020f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010213:	e9 57 ff ff ff       	jmp    c001016f <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010218:	83 ec 0c             	sub    esp,0xc
c001021b:	68 9b a1 02 c0       	push   0xc002a19b
c0010220:	e8 72 a2 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	bb 40 01 00 00       	mov    ebx,0x140
c001022d:	83 ec 08             	sub    esp,0x8
c0010230:	6a 00                	push   0x0
c0010232:	53                   	push   ebx
c0010233:	43                   	inc    ebx
c0010234:	e8 cc fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010239:	ff 05 50 e4 02 c0    	inc    DWORD PTR ds:0xc002e450
c001023f:	83 c4 10             	add    esp,0x10
c0010242:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010248:	75 e3                	jne    c001022d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001024a:	83 c4 3c             	add    esp,0x3c
c001024d:	5b                   	pop    ebx
c001024e:	5e                   	pop    esi
c001024f:	5f                   	pop    edi
c0010250:	5d                   	pop    ebp
c0010251:	c3                   	ret    
c0010252:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001025a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010262:	e9 d7 fe ff ff       	jmp    c001013e <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010267:	90                   	nop

c0010268 <Pipe::isAtty()>:
c0010268:	31 c0                	xor    eax,eax
c001026a:	c3                   	ret    
c001026b:	90                   	nop

c001026c <Pipe::~Pipe()>:
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	ba 58 a2 02 c0       	mov    edx,0xc002a258
c0010274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010278:	89 10                	mov    DWORD PTR [eax],edx
c001027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027e:	83 ec 0c             	sub    esp,0xc
c0010281:	50                   	push   eax
c0010282:	e8 37 16 00 00       	call   c00118be <UnixFile::~UnixFile()>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	90                   	nop
c001028b:	83 c4 0c             	add    esp,0xc
c001028e:	c3                   	ret    
c001028f:	90                   	nop

c0010290 <Pipe::~Pipe()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	83 ec 0c             	sub    esp,0xc
c0010296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029a:	e8 cd ff ff ff       	call   c001026c <Pipe::~Pipe()>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	83 ec 08             	sub    esp,0x8
c00102a5:	6a 20                	push   0x20
c00102a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ab:	e8 66 2a 00 00       	call   c0012d16 <operator delete(void*, unsigned long)>
c00102b0:	83 c4 10             	add    esp,0x10
c00102b3:	83 c4 0c             	add    esp,0xc
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <Pipe::read(unsigned long long, void*, int*)>:
c00102b8:	55                   	push   ebp
c00102b9:	57                   	push   edi
c00102ba:	56                   	push   esi
c00102bb:	53                   	push   ebx
c00102bc:	83 ec 1c             	sub    esp,0x1c
c00102bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102ce:	89 c8                	mov    eax,ecx
c00102d0:	99                   	cdq    
c00102d1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102d5:	74 19                	je     c00102f0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d7:	39 f9                	cmp    ecx,edi
c00102d9:	89 d1                	mov    ecx,edx
c00102db:	19 f1                	sbb    ecx,esi
c00102dd:	73 11                	jae    c00102f0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102df:	e8 d8 d9 00 00       	call   c001dcbc <lockScheduler()>
c00102e4:	e8 0f dd 00 00       	call   c001dff8 <schedule()>
c00102e9:	e8 d0 d9 00 00       	call   c001dcbe <unlockScheduler()>
c00102ee:	eb db                	jmp    c00102cb <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102f0:	39 f8                	cmp    eax,edi
c00102f2:	89 d1                	mov    ecx,edx
c00102f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102f8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102fc:	19 f1                	sbb    ecx,esi
c00102fe:	73 08                	jae    c0010308 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010300:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010304:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010308:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001030b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001030e:	29 c6                	sub    esi,eax
c0010310:	89 f1                	mov    ecx,esi
c0010312:	c1 f9 1f             	sar    ecx,0x1f
c0010315:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010319:	89 ca                	mov    edx,ecx
c001031b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001031f:	19 d1                	sbb    ecx,edx
c0010321:	73 04                	jae    c0010327 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010323:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010327:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001032b:	89 fd                	mov    ebp,edi
c001032d:	29 f5                	sub    ebp,esi
c001032f:	85 f6                	test   esi,esi
c0010331:	74 12                	je     c0010345 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010333:	52                   	push   edx
c0010334:	56                   	push   esi
c0010335:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010338:	50                   	push   eax
c0010339:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001033d:	e8 02 04 ff ff       	call   c0000744 <memcpy>
c0010342:	83 c4 10             	add    esp,0x10
c0010345:	85 ed                	test   ebp,ebp
c0010347:	74 12                	je     c001035b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010349:	50                   	push   eax
c001034a:	55                   	push   ebp
c001034b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001034e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010352:	56                   	push   esi
c0010353:	e8 ec 03 ff ff       	call   c0000744 <memcpy>
c0010358:	83 c4 10             	add    esp,0x10
c001035b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001035e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010361:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010364:	99                   	cdq    
c0010365:	89 f7                	mov    edi,esi
c0010367:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001036b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001036f:	c1 ff 1f             	sar    edi,0x1f
c0010372:	57                   	push   edi
c0010373:	56                   	push   esi
c0010374:	52                   	push   edx
c0010375:	50                   	push   eax
c0010376:	e8 21 66 01 00       	call   c002699c <__umoddi3>
c001037b:	83 c4 10             	add    esp,0x10
c001037e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010381:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010386:	75 10                	jne    c0010398 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010388:	83 ec 0c             	sub    esp,0xc
c001038b:	68 15 a2 02 c0       	push   0xc002a215
c0010390:	e8 02 a1 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0010395:	83 c4 10             	add    esp,0x10
c0010398:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001039c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a0:	89 10                	mov    DWORD PTR [eax],edx
c00103a2:	83 c4 1c             	add    esp,0x1c
c00103a5:	31 c0                	xor    eax,eax
c00103a7:	5b                   	pop    ebx
c00103a8:	5e                   	pop    esi
c00103a9:	5f                   	pop    edi
c00103aa:	5d                   	pop    ebp
c00103ab:	c3                   	ret    

c00103ac <Pipe::write(unsigned long long, void*, int*)>:
c00103ac:	55                   	push   ebp
c00103ad:	57                   	push   edi
c00103ae:	56                   	push   esi
c00103af:	53                   	push   ebx
c00103b0:	83 ec 1c             	sub    esp,0x1c
c00103b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00103c2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103c5:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103cc:	89 de                	mov    esi,ebx
c00103ce:	89 df                	mov    edi,ebx
c00103d0:	c1 ff 1f             	sar    edi,0x1f
c00103d3:	01 c6                	add    esi,eax
c00103d5:	89 c8                	mov    eax,ecx
c00103d7:	11 d7                	adc    edi,edx
c00103d9:	99                   	cdq    
c00103da:	39 f1                	cmp    ecx,esi
c00103dc:	89 d0                	mov    eax,edx
c00103de:	19 f8                	sbb    eax,edi
c00103e0:	b8 01 00 00 00       	mov    eax,0x1
c00103e5:	0f 82 80 00 00 00    	jb     c001046b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103ee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103f1:	01 d8                	add    eax,ebx
c00103f3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103f7:	99                   	cdq    
c00103f8:	f7 f9                	idiv   ecx
c00103fa:	29 d1                	sub    ecx,edx
c00103fc:	89 d7                	mov    edi,edx
c00103fe:	89 c8                	mov    eax,ecx
c0010400:	99                   	cdq    
c0010401:	39 ce                	cmp    esi,ecx
c0010403:	19 d3                	sbb    ebx,edx
c0010405:	bb 00 00 00 00       	mov    ebx,0x0
c001040a:	72 04                	jb     c0010410 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001040c:	89 f3                	mov    ebx,esi
c001040e:	29 cb                	sub    ebx,ecx
c0010410:	89 f1                	mov    ecx,esi
c0010412:	29 d9                	sub    ecx,ebx
c0010414:	74 1a                	je     c0010430 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010416:	52                   	push   edx
c0010417:	51                   	push   ecx
c0010418:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001041c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010420:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010423:	57                   	push   edi
c0010424:	e8 1b 03 ff ff       	call   c0000744 <memcpy>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010430:	85 db                	test   ebx,ebx
c0010432:	74 12                	je     c0010446 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010434:	50                   	push   eax
c0010435:	53                   	push   ebx
c0010436:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001043a:	51                   	push   ecx
c001043b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001043e:	e8 01 03 ff ff       	call   c0000744 <memcpy>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010449:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001044e:	75 10                	jne    c0010460 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010450:	83 ec 0c             	sub    esp,0xc
c0010453:	68 31 a2 02 c0       	push   0xc002a231
c0010458:	e8 3a a0 00 00       	call   c001a497 <Krnl::panic(char const*)>
c001045d:	83 c4 10             	add    esp,0x10
c0010460:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010464:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010467:	89 38                	mov    DWORD PTR [eax],edi
c0010469:	31 c0                	xor    eax,eax
c001046b:	83 c4 1c             	add    esp,0x1c
c001046e:	5b                   	pop    ebx
c001046f:	5e                   	pop    esi
c0010470:	5f                   	pop    edi
c0010471:	5d                   	pop    ebp
c0010472:	c3                   	ret    
c0010473:	90                   	nop

c0010474 <Pipe::Pipe(int)>:
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047b:	83 ec 08             	sub    esp,0x8
c001047e:	6a 00                	push   0x0
c0010480:	50                   	push   eax
c0010481:	e8 56 12 00 00       	call   c00116dc <UnixFile::UnixFile(int)>
c0010486:	83 c4 10             	add    esp,0x10
c0010489:	ba 58 a2 02 c0       	mov    edx,0xc002a258
c001048e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010492:	89 10                	mov    DWORD PTR [eax],edx
c0010494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010498:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001049c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001049f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ae:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104b9:	83 ec 0c             	sub    esp,0xc
c00104bc:	50                   	push   eax
c00104bd:	e8 7e f3 ff ff       	call   c000f840 <malloc>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	89 c2                	mov    edx,eax
c00104c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104d6:	90                   	nop
c00104d7:	83 c4 0c             	add    esp,0xc
c00104da:	c3                   	ret    
c00104db:	90                   	nop

c00104dc <VgaText::isAtty()>:
c00104dc:	b0 01                	mov    al,0x1
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <VgaText::~VgaText()>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	ba 14 a3 02 c0       	mov    edx,0xc002a314
c00104e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ec:	89 10                	mov    DWORD PTR [eax],edx
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	83 ec 0c             	sub    esp,0xc
c00104f5:	50                   	push   eax
c00104f6:	e8 c3 13 00 00       	call   c00118be <UnixFile::~UnixFile()>
c00104fb:	83 c4 10             	add    esp,0x10
c00104fe:	90                   	nop
c00104ff:	83 c4 0c             	add    esp,0xc
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <VgaText::~VgaText()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	83 ec 0c             	sub    esp,0xc
c001050a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050e:	e8 cd ff ff ff       	call   c00104e0 <VgaText::~VgaText()>
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	83 ec 08             	sub    esp,0x8
c0010519:	68 60 12 00 00       	push   0x1260
c001051e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010522:	e8 ef 27 00 00       	call   c0012d16 <operator delete(void*, unsigned long)>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	83 c4 0c             	add    esp,0xc
c001052d:	c3                   	ret    

c001052e <VgaText::read(unsigned long long, void*, int*)>:
c001052e:	83 ec 10             	sub    esp,0x10
c0010531:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010535:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053d:	e8 56 5c 00 00       	call   c0016198 <readKeyboard(VgaText*, char*, unsigned long)>
c0010542:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010546:	89 02                	mov    DWORD PTR [edx],eax
c0010548:	31 c0                	xor    eax,eax
c001054a:	83 c4 1c             	add    esp,0x1c
c001054d:	c3                   	ret    

c001054e <setTerminalScrollLock(bool)>:
c001054e:	c3                   	ret    

c001054f <addToTerminalCycle(VgaText*)>:
c001054f:	8b 15 e0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e0
c0010555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010559:	85 d2                	test   edx,edx
c001055b:	75 0c                	jne    c0010569 <addToTerminalCycle(VgaText*)+0x1a>
c001055d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010563:	a3 e0 e4 02 c0       	mov    ds:0xc002e4e0,eax
c0010568:	c3                   	ret    
c0010569:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001056f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010575:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001057b:	c3                   	ret    

c001057c <installVgaTextImplementation()>:
c001057c:	83 ec 10             	sub    esp,0x10
c001057f:	6a 20                	push   0x20
c0010581:	6a 00                	push   0x0
c0010583:	68 c0 e4 02 c0       	push   0xc002e4c0
c0010588:	e8 eb 01 ff ff       	call   c0000778 <memset>
c001058d:	83 c4 1c             	add    esp,0x1c
c0010590:	c3                   	ret    

c0010591 <scrollTerminalScrollLock(int)>:
c0010591:	c3                   	ret    

c0010592 <VgaText::load()>:
c0010592:	53                   	push   ebx
c0010593:	31 c0                	xor    eax,eax
c0010595:	83 ec 58             	sub    esp,0x58
c0010598:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001059c:	89 e2                	mov    edx,esp
c001059e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105a2:	40                   	inc    eax
c00105a3:	83 f8 50             	cmp    eax,0x50
c00105a6:	75 f6                	jne    c001059e <VgaText::load()+0xc>
c00105a8:	31 c0                	xor    eax,eax
c00105aa:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105b1:	84 c9                	test   cl,cl
c00105b3:	74 06                	je     c00105bb <VgaText::load()+0x29>
c00105b5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105b8:	40                   	inc    eax
c00105b9:	eb ef                	jmp    c00105aa <VgaText::load()+0x18>
c00105bb:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105c1:	85 c0                	test   eax,eax
c00105c3:	74 09                	je     c00105ce <VgaText::load()+0x3c>
c00105c5:	51                   	push   ecx
c00105c6:	51                   	push   ecx
c00105c7:	52                   	push   edx
c00105c8:	53                   	push   ebx
c00105c9:	ff d0                	call   eax
c00105cb:	83 c4 10             	add    esp,0x10
c00105ce:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105d4:	85 c0                	test   eax,eax
c00105d6:	74 09                	je     c00105e1 <VgaText::load()+0x4f>
c00105d8:	83 ec 0c             	sub    esp,0xc
c00105db:	53                   	push   ebx
c00105dc:	ff d0                	call   eax
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 c4 58             	add    esp,0x58
c00105e4:	5b                   	pop    ebx
c00105e5:	c3                   	ret    

c00105e6 <VgaText::updateCursor()>:
c00105e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ea:	39 05 e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,eax
c00105f0:	75 0c                	jne    c00105fe <VgaText::updateCursor()+0x18>
c00105f2:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00105f8:	85 c0                	test   eax,eax
c00105fa:	74 02                	je     c00105fe <VgaText::updateCursor()+0x18>
c00105fc:	ff e0                	jmp    eax
c00105fe:	c3                   	ret    
c00105ff:	90                   	nop

c0010600 <VgaText::showCursor(bool)>:
c0010600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010604:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010608:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001060e:	c3                   	ret    
c001060f:	90                   	nop

c0010610 <VgaText::disableBlink(bool)>:
c0010610:	56                   	push   esi
c0010611:	53                   	push   ebx
c0010612:	51                   	push   ecx
c0010613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010617:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001061b:	39 1d e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,ebx
c0010621:	75 18                	jne    c001063b <VgaText::disableBlink(bool)+0x2b>
c0010623:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010629:	85 c0                	test   eax,eax
c001062b:	74 0e                	je     c001063b <VgaText::disableBlink(bool)+0x2b>
c001062d:	89 f1                	mov    ecx,esi
c001062f:	52                   	push   edx
c0010630:	52                   	push   edx
c0010631:	0f b6 d1             	movzx  edx,cl
c0010634:	52                   	push   edx
c0010635:	53                   	push   ebx
c0010636:	ff d0                	call   eax
c0010638:	83 c4 10             	add    esp,0x10
c001063b:	89 f0                	mov    eax,esi
c001063d:	83 f0 01             	xor    eax,0x1
c0010640:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010646:	58                   	pop    eax
c0010647:	5b                   	pop    ebx
c0010648:	5e                   	pop    esi
c0010649:	c3                   	ret    

c001064a <VgaText::doANSI_SGR(int)>:
c001064a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001064e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010652:	85 d2                	test   edx,edx
c0010654:	75 14                	jne    c001066a <VgaText::doANSI_SGR(int)+0x20>
c0010656:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001065c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010662:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010668:	eb 65                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c001066a:	83 fa 07             	cmp    edx,0x7
c001066d:	75 14                	jne    c0010683 <VgaText::doANSI_SGR(int)+0x39>
c001066f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010675:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001067b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010681:	eb 4c                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c0010683:	83 fa 1b             	cmp    edx,0x1b
c0010686:	74 ce                	je     c0010656 <VgaText::doANSI_SGR(int)+0xc>
c0010688:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001068b:	83 f9 07             	cmp    ecx,0x7
c001068e:	77 09                	ja     c0010699 <VgaText::doANSI_SGR(int)+0x4f>
c0010690:	8b 14 8d 60 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ca0]
c0010697:	eb 20                	jmp    c00106b9 <VgaText::doANSI_SGR(int)+0x6f>
c0010699:	8d 4a d8             	lea    ecx,[edx-0x28]
c001069c:	83 f9 07             	cmp    ecx,0x7
c001069f:	77 09                	ja     c00106aa <VgaText::doANSI_SGR(int)+0x60>
c00106a1:	8b 14 8d 60 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ca0]
c00106a8:	eb 25                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c00106aa:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106ad:	83 f9 07             	cmp    ecx,0x7
c00106b0:	77 0e                	ja     c00106c0 <VgaText::doANSI_SGR(int)+0x76>
c00106b2:	8b 14 95 18 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2de8]
c00106b9:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106bf:	c3                   	ret    
c00106c0:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c3:	83 f9 07             	cmp    ecx,0x7
c00106c6:	77 0d                	ja     c00106d5 <VgaText::doANSI_SGR(int)+0x8b>
c00106c8:	8b 14 95 f0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e10]
c00106cf:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106d5:	c3                   	ret    

c00106d6 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106de:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106e4:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106ea:	c3                   	ret    
c00106eb:	90                   	nop

c00106ec <VgaText::setDefaultFgColour(VgaColour)>:
c00106ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f4:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00106fa:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010700:	c3                   	ret    
c0010701:	90                   	nop

c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010702:	53                   	push   ebx
c0010703:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010707:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001070b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001070f:	51                   	push   ecx
c0010710:	e8 c1 ff ff ff       	call   c00106d6 <VgaText::setDefaultBgColour(VgaColour)>
c0010715:	58                   	pop    eax
c0010716:	5a                   	pop    edx
c0010717:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001071b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001071f:	5b                   	pop    ebx
c0010720:	eb ca                	jmp    c00106ec <VgaText::setDefaultFgColour(VgaColour)>

c0010722 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010722:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010726:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001072b:	83 e0 0f             	and    eax,0xf
c001072e:	c1 e2 04             	shl    edx,0x4
c0010731:	09 d0                	or     eax,edx
c0010733:	c3                   	ret    

c0010734 <VgaText::scrollScreen()>:
c0010734:	57                   	push   edi
c0010735:	56                   	push   esi
c0010736:	be 01 00 00 00       	mov    esi,0x1
c001073b:	53                   	push   ebx
c001073c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010740:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010746:	31 ff                	xor    edi,edi
c0010748:	01 d9                	add    ecx,ebx
c001074a:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001074d:	83 fe 17             	cmp    esi,0x17
c0010750:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010756:	75 28                	jne    c0010780 <VgaText::scrollScreen()+0x4c>
c0010758:	f7 c7 01 00 00 00    	test   edi,0x1
c001075e:	74 1c                	je     c001077c <VgaText::scrollScreen()+0x48>
c0010760:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010767:	50                   	push   eax
c0010768:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001076f:	50                   	push   eax
c0010770:	e8 ad ff ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010775:	5a                   	pop    edx
c0010776:	5a                   	pop    edx
c0010777:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001077a:	eb 04                	jmp    c0010780 <VgaText::scrollScreen()+0x4c>
c001077c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010780:	47                   	inc    edi
c0010781:	41                   	inc    ecx
c0010782:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010788:	75 c0                	jne    c001074a <VgaText::scrollScreen()+0x16>
c001078a:	46                   	inc    esi
c001078b:	83 fe 18             	cmp    esi,0x18
c001078e:	75 b0                	jne    c0010740 <VgaText::scrollScreen()+0xc>
c0010790:	39 1d e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,ebx
c0010796:	75 24                	jne    c00107bc <VgaText::scrollScreen()+0x88>
c0010798:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001079f:	74 08                	je     c00107a9 <VgaText::scrollScreen()+0x75>
c00107a1:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107a7:	eb 13                	jmp    c00107bc <VgaText::scrollScreen()+0x88>
c00107a9:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107af:	85 c0                	test   eax,eax
c00107b1:	74 09                	je     c00107bc <VgaText::scrollScreen()+0x88>
c00107b3:	83 ec 0c             	sub    esp,0xc
c00107b6:	53                   	push   ebx
c00107b7:	ff d0                	call   eax
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107c0:	5b                   	pop    ebx
c00107c1:	5e                   	pop    esi
c00107c2:	5f                   	pop    edi
c00107c3:	e9 1e fe ff ff       	jmp    c00105e6 <VgaText::updateCursor()>

c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107cd:	c1 e0 08             	shl    eax,0x8
c00107d0:	89 c2                	mov    edx,eax
c00107d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d7:	09 d0                	or     eax,edx
c00107d9:	c3                   	ret    

c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107da:	53                   	push   ebx
c00107db:	83 ec 08             	sub    esp,0x8
c00107de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e7:	50                   	push   eax
c00107e8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ed:	50                   	push   eax
c00107ee:	e8 2f ff ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f3:	5a                   	pop    edx
c00107f4:	0f b6 c0             	movzx  eax,al
c00107f7:	5b                   	pop    ebx
c00107f8:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107fd:	50                   	push   eax
c00107fe:	53                   	push   ebx
c00107ff:	e8 c4 ff ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010804:	5a                   	pop    edx
c0010805:	5a                   	pop    edx
c0010806:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001080c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010810:	0f b7 d2             	movzx  edx,dx
c0010813:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010818:	39 0d e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,ecx
c001081e:	75 14                	jne    c0010834 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010820:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010826:	85 c0                	test   eax,eax
c0010828:	74 0a                	je     c0010834 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001082a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001082e:	83 c4 08             	add    esp,0x8
c0010831:	5b                   	pop    ebx
c0010832:	ff e0                	jmp    eax
c0010834:	83 c4 08             	add    esp,0x8
c0010837:	5b                   	pop    ebx
c0010838:	c3                   	ret    
c0010839:	90                   	nop

c001083a <VgaText::getCursorX()>:
c001083a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010844:	c3                   	ret    
c0010845:	90                   	nop

c0010846 <VgaText::getCursorY()>:
c0010846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084a:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010850:	c3                   	ret    
c0010851:	90                   	nop

c0010852 <VgaText::setCursor(int, int)>:
c0010852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010856:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085a:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010860:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010864:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001086a:	e9 77 fd ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c001086f:	90                   	nop

c0010870 <VgaText::setCursorX(int)>:
c0010870:	83 ec 10             	sub    esp,0x10
c0010873:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010877:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001087d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010881:	50                   	push   eax
c0010882:	e8 cb ff ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010887:	83 c4 1c             	add    esp,0x1c
c001088a:	c3                   	ret    
c001088b:	90                   	nop

c001088c <VgaText::setCursorY(int)>:
c001088c:	83 ec 10             	sub    esp,0x10
c001088f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010893:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010897:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001089d:	50                   	push   eax
c001089e:	e8 af ff ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c00108a3:	83 c4 1c             	add    esp,0x1c
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <VgaText::incrementCursor(bool)>:
c00108a8:	56                   	push   esi
c00108a9:	53                   	push   ebx
c00108aa:	51                   	push   ecx
c00108ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108b3:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108b9:	40                   	inc    eax
c00108ba:	83 f8 50             	cmp    eax,0x50
c00108bd:	74 08                	je     c00108c7 <VgaText::incrementCursor(bool)+0x1f>
c00108bf:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108c5:	eb 33                	jmp    c00108fa <VgaText::incrementCursor(bool)+0x52>
c00108c7:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108cd:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108d7:	8d 50 01             	lea    edx,[eax+0x1]
c00108da:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108e0:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108e6:	75 12                	jne    c00108fa <VgaText::incrementCursor(bool)+0x52>
c00108e8:	83 ec 0c             	sub    esp,0xc
c00108eb:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108f1:	53                   	push   ebx
c00108f2:	e8 3d fe ff ff       	call   c0010734 <VgaText::scrollScreen()>
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	89 f0                	mov    eax,esi
c00108fc:	84 c0                	test   al,al
c00108fe:	74 0c                	je     c001090c <VgaText::incrementCursor(bool)+0x64>
c0010900:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010904:	5a                   	pop    edx
c0010905:	5b                   	pop    ebx
c0010906:	5e                   	pop    esi
c0010907:	e9 da fc ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c001090c:	58                   	pop    eax
c001090d:	5b                   	pop    ebx
c001090e:	5e                   	pop    esi
c001090f:	c3                   	ret    

c0010910 <VgaText::updateRAMUsageDisplay(int)>:
c0010910:	56                   	push   esi
c0010911:	8b 35 40 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d340
c0010917:	53                   	push   ebx
c0010918:	bb 0a 00 00 00       	mov    ebx,0xa
c001091d:	6a 0f                	push   0xf
c001091f:	6a 00                	push   0x0
c0010921:	e8 fc fd ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010926:	5a                   	pop    edx
c0010927:	59                   	pop    ecx
c0010928:	0f b6 c8             	movzx  ecx,al
c001092b:	51                   	push   ecx
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	99                   	cdq    
c0010931:	f7 fb                	idiv   ebx
c0010933:	89 d3                	mov    ebx,edx
c0010935:	83 c0 30             	add    eax,0x30
c0010938:	83 c3 30             	add    ebx,0x30
c001093b:	0f be c0             	movsx  eax,al
c001093e:	0f b6 db             	movzx  ebx,bl
c0010941:	50                   	push   eax
c0010942:	e8 81 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010947:	5a                   	pop    edx
c0010948:	5a                   	pop    edx
c0010949:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010950:	51                   	push   ecx
c0010951:	53                   	push   ebx
c0010952:	e8 71 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010957:	5b                   	pop    ebx
c0010958:	5a                   	pop    edx
c0010959:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010960:	51                   	push   ecx
c0010961:	6a 25                	push   0x25
c0010963:	e8 60 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010968:	59                   	pop    ecx
c0010969:	5b                   	pop    ebx
c001096a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	c3                   	ret    

c0010974 <VgaText::updateDiskUsage()>:
c0010974:	55                   	push   ebp
c0010975:	bd 10 27 00 00       	mov    ebp,0x2710
c001097a:	57                   	push   edi
c001097b:	8b 3d 40 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d340
c0010981:	56                   	push   esi
c0010982:	53                   	push   ebx
c0010983:	6a 0f                	push   0xf
c0010985:	6a 00                	push   0x0
c0010987:	e8 96 fd ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c001098c:	5a                   	pop    edx
c001098d:	0f b6 d8             	movzx  ebx,al
c0010990:	59                   	pop    ecx
c0010991:	8b 35 68 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032768
c0010997:	53                   	push   ebx
c0010998:	b9 0a 00 00 00       	mov    ecx,0xa
c001099d:	89 f0                	mov    eax,esi
c001099f:	99                   	cdq    
c00109a0:	f7 fd                	idiv   ebp
c00109a2:	99                   	cdq    
c00109a3:	f7 f9                	idiv   ecx
c00109a5:	8d 42 30             	lea    eax,[edx+0x30]
c00109a8:	0f b6 c0             	movzx  eax,al
c00109ab:	50                   	push   eax
c00109ac:	e8 17 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b1:	5d                   	pop    ebp
c00109b2:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109b7:	5a                   	pop    edx
c00109b8:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109bc:	53                   	push   ebx
c00109bd:	89 f0                	mov    eax,esi
c00109bf:	99                   	cdq    
c00109c0:	f7 fd                	idiv   ebp
c00109c2:	99                   	cdq    
c00109c3:	f7 f9                	idiv   ecx
c00109c5:	8d 42 30             	lea    eax,[edx+0x30]
c00109c8:	0f b6 c0             	movzx  eax,al
c00109cb:	50                   	push   eax
c00109cc:	e8 f7 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d1:	5d                   	pop    ebp
c00109d2:	bd 64 00 00 00       	mov    ebp,0x64
c00109d7:	5a                   	pop    edx
c00109d8:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109df:	53                   	push   ebx
c00109e0:	89 f0                	mov    eax,esi
c00109e2:	99                   	cdq    
c00109e3:	f7 fd                	idiv   ebp
c00109e5:	99                   	cdq    
c00109e6:	f7 f9                	idiv   ecx
c00109e8:	8d 42 30             	lea    eax,[edx+0x30]
c00109eb:	0f b6 c0             	movzx  eax,al
c00109ee:	50                   	push   eax
c00109ef:	e8 d4 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109f4:	5d                   	pop    ebp
c00109f5:	5a                   	pop    edx
c00109f6:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109fd:	53                   	push   ebx
c00109fe:	89 f0                	mov    eax,esi
c0010a00:	99                   	cdq    
c0010a01:	f7 f9                	idiv   ecx
c0010a03:	89 d6                	mov    esi,edx
c0010a05:	99                   	cdq    
c0010a06:	f7 f9                	idiv   ecx
c0010a08:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0b:	0f b6 c0             	movzx  eax,al
c0010a0e:	50                   	push   eax
c0010a0f:	e8 b4 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a14:	5d                   	pop    ebp
c0010a15:	5a                   	pop    edx
c0010a16:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a1d:	53                   	push   ebx
c0010a1e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a21:	0f b6 f0             	movzx  esi,al
c0010a24:	56                   	push   esi
c0010a25:	e8 9e fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2a:	5e                   	pop    esi
c0010a2b:	8b 35 64 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032764
c0010a31:	5d                   	pop    ebp
c0010a32:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a39:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a3e:	53                   	push   ebx
c0010a3f:	89 f0                	mov    eax,esi
c0010a41:	99                   	cdq    
c0010a42:	f7 fd                	idiv   ebp
c0010a44:	99                   	cdq    
c0010a45:	f7 f9                	idiv   ecx
c0010a47:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4a:	0f b6 c0             	movzx  eax,al
c0010a4d:	50                   	push   eax
c0010a4e:	e8 75 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a53:	5a                   	pop    edx
c0010a54:	5d                   	pop    ebp
c0010a55:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a5c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a61:	53                   	push   ebx
c0010a62:	89 f0                	mov    eax,esi
c0010a64:	99                   	cdq    
c0010a65:	f7 fd                	idiv   ebp
c0010a67:	99                   	cdq    
c0010a68:	f7 f9                	idiv   ecx
c0010a6a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6d:	0f b6 c0             	movzx  eax,al
c0010a70:	50                   	push   eax
c0010a71:	e8 52 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a76:	5a                   	pop    edx
c0010a77:	5d                   	pop    ebp
c0010a78:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a7f:	bd 64 00 00 00       	mov    ebp,0x64
c0010a84:	53                   	push   ebx
c0010a85:	89 f0                	mov    eax,esi
c0010a87:	99                   	cdq    
c0010a88:	f7 fd                	idiv   ebp
c0010a8a:	99                   	cdq    
c0010a8b:	f7 f9                	idiv   ecx
c0010a8d:	83 c2 30             	add    edx,0x30
c0010a90:	0f b6 d2             	movzx  edx,dl
c0010a93:	52                   	push   edx
c0010a94:	e8 2f fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a99:	5a                   	pop    edx
c0010a9a:	5d                   	pop    ebp
c0010a9b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aa2:	53                   	push   ebx
c0010aa3:	89 f0                	mov    eax,esi
c0010aa5:	99                   	cdq    
c0010aa6:	f7 f9                	idiv   ecx
c0010aa8:	89 d6                	mov    esi,edx
c0010aaa:	99                   	cdq    
c0010aab:	f7 f9                	idiv   ecx
c0010aad:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab0:	0f b6 c0             	movzx  eax,al
c0010ab3:	50                   	push   eax
c0010ab4:	e8 0f fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab9:	5a                   	pop    edx
c0010aba:	59                   	pop    ecx
c0010abb:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ac2:	53                   	push   ebx
c0010ac3:	8d 46 30             	lea    eax,[esi+0x30]
c0010ac6:	0f b6 f0             	movzx  esi,al
c0010ac9:	56                   	push   esi
c0010aca:	e8 f9 fc ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010acf:	5b                   	pop    ebx
c0010ad0:	5e                   	pop    esi
c0010ad1:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ad8:	5b                   	pop    ebx
c0010ad9:	5e                   	pop    esi
c0010ada:	5f                   	pop    edi
c0010adb:	5d                   	pop    ebp
c0010adc:	c3                   	ret    
c0010add:	90                   	nop

c0010ade <VgaText::updateTitle()>:
c0010ade:	53                   	push   ebx
c0010adf:	31 c0                	xor    eax,eax
c0010ae1:	83 ec 58             	sub    esp,0x58
c0010ae4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ae8:	89 e1                	mov    ecx,esp
c0010aea:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010aee:	40                   	inc    eax
c0010aef:	83 f8 50             	cmp    eax,0x50
c0010af2:	75 f6                	jne    c0010aea <VgaText::updateTitle()+0xc>
c0010af4:	31 c0                	xor    eax,eax
c0010af6:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010afd:	84 db                	test   bl,bl
c0010aff:	74 06                	je     c0010b07 <VgaText::updateTitle()+0x29>
c0010b01:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b04:	40                   	inc    eax
c0010b05:	eb ef                	jmp    c0010af6 <VgaText::updateTitle()+0x18>
c0010b07:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b0d:	85 c0                	test   eax,eax
c0010b0f:	74 09                	je     c0010b1a <VgaText::updateTitle()+0x3c>
c0010b11:	53                   	push   ebx
c0010b12:	53                   	push   ebx
c0010b13:	51                   	push   ecx
c0010b14:	52                   	push   edx
c0010b15:	ff d0                	call   eax
c0010b17:	83 c4 10             	add    esp,0x10
c0010b1a:	e8 55 fe ff ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0010b1f:	83 c4 58             	add    esp,0x58
c0010b22:	5b                   	pop    ebx
c0010b23:	c3                   	ret    

c0010b24 <VgaText::setTitleTextColour(VgaColour)>:
c0010b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b2c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b32:	eb aa                	jmp    c0010ade <VgaText::updateTitle()>

c0010b34 <VgaText::setTitleColour(VgaColour)>:
c0010b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b3c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b42:	eb 9a                	jmp    c0010ade <VgaText::updateTitle()>

c0010b44 <VgaText::setTitle(char*)>:
c0010b44:	53                   	push   ebx
c0010b45:	83 ec 10             	sub    esp,0x10
c0010b48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b50:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b56:	50                   	push   eax
c0010b57:	e8 d8 fc fe ff       	call   c0000834 <strcpy>
c0010b5c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b60:	83 c4 18             	add    esp,0x18
c0010b63:	5b                   	pop    ebx
c0010b64:	e9 75 ff ff ff       	jmp    c0010ade <VgaText::updateTitle()>
c0010b69:	90                   	nop

c0010b6a <VgaText::decrementCursor(bool)>:
c0010b6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b72:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	74 07                	je     c0010b83 <VgaText::decrementCursor(bool)+0x19>
c0010b7c:	48                   	dec    eax
c0010b7d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b83:	84 c9                	test   cl,cl
c0010b85:	74 09                	je     c0010b90 <VgaText::decrementCursor(bool)+0x26>
c0010b87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b8b:	e9 56 fa ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c0010b90:	c3                   	ret    
c0010b91:	90                   	nop

c0010b92 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b92:	53                   	push   ebx
c0010b93:	83 ec 08             	sub    esp,0x8
c0010b96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010ba6:	3c 07                	cmp    al,0x7
c0010ba8:	75 2a                	jne    c0010bd4 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010baa:	a1 90 e5 02 c0       	mov    eax,ds:0xc002e590
c0010baf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bb7:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bbf:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bcb:	83 c4 08             	add    esp,0x8
c0010bce:	5b                   	pop    ebx
c0010bcf:	e9 20 30 00 00       	jmp    c0013bf4 <Buzzer::beep(int, int, bool)>
c0010bd4:	3c 0d                	cmp    al,0xd
c0010bd6:	75 0c                	jne    c0010be4 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bd8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010be2:	eb 3b                	jmp    c0010c1f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010be4:	3c 0a                	cmp    al,0xa
c0010be6:	75 40                	jne    c0010c28 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010be8:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010bee:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bf8:	8d 50 01             	lea    edx,[eax+0x1]
c0010bfb:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c01:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c07:	75 12                	jne    c0010c1b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c09:	83 ec 0c             	sub    esp,0xc
c0010c0c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c12:	53                   	push   ebx
c0010c13:	e8 1c fb ff ff       	call   c0010734 <VgaText::scrollScreen()>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c1f:	83 c4 08             	add    esp,0x8
c0010c22:	5b                   	pop    ebx
c0010c23:	e9 be f9 ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c0010c28:	3c 08                	cmp    al,0x8
c0010c2a:	75 31                	jne    c0010c5d <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c2c:	50                   	push   eax
c0010c2d:	50                   	push   eax
c0010c2e:	6a 01                	push   0x1
c0010c30:	53                   	push   ebx
c0010c31:	e8 34 ff ff ff       	call   c0010b6a <VgaText::decrementCursor(bool)>
c0010c36:	5a                   	pop    edx
c0010c37:	59                   	pop    ecx
c0010c38:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c3e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c44:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c4a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c50:	6a 20                	push   0x20
c0010c52:	53                   	push   ebx
c0010c53:	e8 82 fb ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c58:	83 c4 28             	add    esp,0x28
c0010c5b:	5b                   	pop    ebx
c0010c5c:	c3                   	ret    
c0010c5d:	83 ec 08             	sub    esp,0x8
c0010c60:	0f be c0             	movsx  eax,al
c0010c63:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c69:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c6f:	51                   	push   ecx
c0010c70:	52                   	push   edx
c0010c71:	50                   	push   eax
c0010c72:	53                   	push   ebx
c0010c73:	e8 62 fb ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c78:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c7c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c84:	83 c4 28             	add    esp,0x28
c0010c87:	5b                   	pop    ebx
c0010c88:	e9 1b fc ff ff       	jmp    c00108a8 <VgaText::incrementCursor(bool)>
c0010c8d:	90                   	nop

c0010c8e <VgaText::isShowingCursor()>:
c0010c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c92:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010c98:	c3                   	ret    
c0010c99:	90                   	nop

c0010c9a <VgaText::isBlinkDisabled()>:
c0010c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c9e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010ca4:	83 f0 01             	xor    eax,0x1
c0010ca7:	c3                   	ret    

c0010ca8 <VgaText::setCursorHeight(int)>:
c0010ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cb0:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cb6:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cc1:	e9 3a f9 ff ff       	jmp    c0010600 <VgaText::showCursor(bool)>

c0010cc6 <VgaText::getCursorHeight()>:
c0010cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cca:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cd0:	c3                   	ret    

c0010cd1 <setActiveTerminal(VgaText*)>:
c0010cd1:	53                   	push   ebx
c0010cd2:	83 ec 08             	sub    esp,0x8
c0010cd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd9:	85 db                	test   ebx,ebx
c0010cdb:	75 11                	jne    c0010cee <setActiveTerminal(VgaText*)+0x1d>
c0010cdd:	c7 44 24 10 6c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a26c
c0010ce5:	83 c4 08             	add    esp,0x8
c0010ce8:	5b                   	pop    ebx
c0010ce9:	e9 a9 97 00 00       	jmp    c001a497 <Krnl::panic(char const*)>
c0010cee:	50                   	push   eax
c0010cef:	50                   	push   eax
c0010cf0:	53                   	push   ebx
c0010cf1:	68 7a a2 02 c0       	push   0xc002a27a
c0010cf6:	e8 fb 20 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0010cfb:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	85 c0                	test   eax,eax
c0010d05:	74 0c                	je     c0010d13 <setActiveTerminal(VgaText*)+0x42>
c0010d07:	83 ec 0c             	sub    esp,0xc
c0010d0a:	50                   	push   eax
c0010d0b:	e8 d6 f8 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c0010d19:	51                   	push   ecx
c0010d1a:	51                   	push   ecx
c0010d1b:	53                   	push   ebx
c0010d1c:	68 92 a2 02 c0       	push   0xc002a292
c0010d21:	e8 d0 20 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0010d26:	83 c4 0c             	add    esp,0xc
c0010d29:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d2f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d35:	53                   	push   ebx
c0010d36:	e8 17 fb ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010d3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d3e:	e8 57 ff ff ff       	call   c0010c9a <VgaText::isBlinkDisabled()>
c0010d43:	5a                   	pop    edx
c0010d44:	0f b6 c0             	movzx  eax,al
c0010d47:	59                   	pop    ecx
c0010d48:	50                   	push   eax
c0010d49:	53                   	push   ebx
c0010d4a:	e8 c1 f8 ff ff       	call   c0010610 <VgaText::disableBlink(bool)>
c0010d4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d52:	e8 6f ff ff ff       	call   c0010cc6 <VgaText::getCursorHeight()>
c0010d57:	5a                   	pop    edx
c0010d58:	59                   	pop    ecx
c0010d59:	50                   	push   eax
c0010d5a:	53                   	push   ebx
c0010d5b:	e8 48 ff ff ff       	call   c0010ca8 <VgaText::setCursorHeight(int)>
c0010d60:	83 c4 10             	add    esp,0x10
c0010d63:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d6a:	75 0a                	jne    c0010d76 <setActiveTerminal(VgaText*)+0xa5>
c0010d6c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d7a:	83 c4 08             	add    esp,0x8
c0010d7d:	5b                   	pop    ebx
c0010d7e:	e9 0f f8 ff ff       	jmp    c0010592 <VgaText::load()>

c0010d83 <doTerminalCycle()>:
c0010d83:	83 ec 18             	sub    esp,0x18
c0010d86:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c0010d8b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010d91:	50                   	push   eax
c0010d92:	a3 e0 e4 02 c0       	mov    ds:0xc002e4e0,eax
c0010d97:	e8 35 ff ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c0010d9c:	83 c4 1c             	add    esp,0x1c
c0010d9f:	c3                   	ret    

c0010da0 <VgaText::doUpdate()>:
c0010da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da4:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010daa:	85 c0                	test   eax,eax
c0010dac:	74 02                	je     c0010db0 <VgaText::doUpdate()+0x10>
c0010dae:	ff e0                	jmp    eax
c0010db0:	c3                   	ret    
c0010db1:	90                   	nop

c0010db2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010db2:	55                   	push   ebp
c0010db3:	57                   	push   edi
c0010db4:	56                   	push   esi
c0010db5:	53                   	push   ebx
c0010db6:	83 ec 1c             	sub    esp,0x1c
c0010db9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dbd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dc2:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010dc9:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dcc:	50                   	push   eax
c0010dcd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd2:	50                   	push   eax
c0010dd3:	e8 4a f9 ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dd8:	59                   	pop    ecx
c0010dd9:	0f b6 c0             	movzx  eax,al
c0010ddc:	5b                   	pop    ebx
c0010ddd:	31 c9                	xor    ecx,ecx
c0010ddf:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010de7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010deb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010df1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010df5:	0f b7 db             	movzx  ebx,bx
c0010df8:	01 db                	add    ebx,ebx
c0010dfa:	01 fb                	add    ebx,edi
c0010dfc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010dff:	84 c0                	test   al,al
c0010e01:	0f 84 38 01 00 00    	je     c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e07:	3c 0d                	cmp    al,0xd
c0010e09:	75 0f                	jne    c0010e1a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e0b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e15:	e9 1f 01 00 00       	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e1a:	3c 0a                	cmp    al,0xa
c0010e1c:	75 5b                	jne    c0010e79 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e1e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e24:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e2e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e31:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e37:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e3d:	75 12                	jne    c0010e51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e48:	55                   	push   ebp
c0010e49:	e8 e6 f8 ff ff       	call   c0010734 <VgaText::scrollScreen()>
c0010e4e:	83 c4 10             	add    esp,0x10
c0010e51:	83 ec 0c             	sub    esp,0xc
c0010e54:	55                   	push   ebp
c0010e55:	e8 8c f7 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010e5a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e6b:	31 c9                	xor    ecx,ecx
c0010e6d:	0f b7 db             	movzx  ebx,bx
c0010e70:	01 db                	add    ebx,ebx
c0010e72:	01 fb                	add    ebx,edi
c0010e74:	e9 c0 00 00 00       	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e79:	3c 08                	cmp    al,0x8
c0010e7b:	75 4e                	jne    c0010ecb <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e7d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e81:	53                   	push   ebx
c0010e82:	53                   	push   ebx
c0010e83:	6a 01                	push   0x1
c0010e85:	55                   	push   ebp
c0010e86:	e8 df fc ff ff       	call   c0010b6a <VgaText::decrementCursor(bool)>
c0010e8b:	58                   	pop    eax
c0010e8c:	5a                   	pop    edx
c0010e8d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010e93:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010e99:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010e9f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ea5:	6a 20                	push   0x20
c0010ea7:	55                   	push   ebp
c0010ea8:	e8 2d f9 ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ead:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eb5:	83 c4 20             	add    esp,0x20
c0010eb8:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ebe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ec2:	0f b7 db             	movzx  ebx,bx
c0010ec5:	01 db                	add    ebx,ebx
c0010ec7:	01 fb                	add    ebx,edi
c0010ec9:	eb 6e                	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ecb:	51                   	push   ecx
c0010ecc:	51                   	push   ecx
c0010ecd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ed1:	50                   	push   eax
c0010ed2:	e8 f1 f8 ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ed7:	83 c4 10             	add    esp,0x10
c0010eda:	66 89 03             	mov    WORD PTR [ebx],ax
c0010edd:	39 2d e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,ebp
c0010ee3:	75 2a                	jne    c0010f0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ee5:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010eeb:	85 c0                	test   eax,eax
c0010eed:	74 20                	je     c0010f0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010eef:	52                   	push   edx
c0010ef0:	52                   	push   edx
c0010ef1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010efd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f01:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f05:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f08:	51                   	push   ecx
c0010f09:	55                   	push   ebp
c0010f0a:	ff d0                	call   eax
c0010f0c:	83 c4 20             	add    esp,0x20
c0010f0f:	83 c3 02             	add    ebx,0x2
c0010f12:	50                   	push   eax
c0010f13:	50                   	push   eax
c0010f14:	6a 00                	push   0x0
c0010f16:	55                   	push   ebp
c0010f17:	e8 8c f9 ff ff       	call   c00108a8 <VgaText::incrementCursor(bool)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f26:	75 0f                	jne    c0010f37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f28:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f30:	0f b7 db             	movzx  ebx,bx
c0010f33:	01 db                	add    ebx,ebx
c0010f35:	01 fb                	add    ebx,edi
c0010f37:	b1 01                	mov    cl,0x1
c0010f39:	46                   	inc    esi
c0010f3a:	e9 bd fe ff ff       	jmp    c0010dfc <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f3f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f43:	83 ec 0c             	sub    esp,0xc
c0010f46:	55                   	push   ebp
c0010f47:	e8 9a f6 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010f4c:	83 c4 10             	add    esp,0x10
c0010f4f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f53:	84 c9                	test   cl,cl
c0010f55:	74 0c                	je     c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f57:	83 ec 0c             	sub    esp,0xc
c0010f5a:	55                   	push   ebp
c0010f5b:	e8 40 fe ff ff       	call   c0010da0 <VgaText::doUpdate()>
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f6a:	83 c4 1c             	add    esp,0x1c
c0010f6d:	5b                   	pop    ebx
c0010f6e:	5e                   	pop    esi
c0010f6f:	5f                   	pop    edi
c0010f70:	5d                   	pop    ebp
c0010f71:	c3                   	ret    

c0010f72 <VgaText::clearScreen()>:
c0010f72:	57                   	push   edi
c0010f73:	56                   	push   esi
c0010f74:	31 f6                	xor    esi,esi
c0010f76:	53                   	push   ebx
c0010f77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f7b:	52                   	push   edx
c0010f7c:	6a 00                	push   0x0
c0010f7e:	6a 00                	push   0x0
c0010f80:	53                   	push   ebx
c0010f81:	e8 cc f8 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010f86:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010f96:	7e 26                	jle    c0010fbe <VgaText::clearScreen()+0x4c>
c0010f98:	31 ff                	xor    edi,edi
c0010f9a:	50                   	push   eax
c0010f9b:	50                   	push   eax
c0010f9c:	56                   	push   esi
c0010f9d:	57                   	push   edi
c0010f9e:	47                   	inc    edi
c0010f9f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fa5:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fab:	6a 20                	push   0x20
c0010fad:	53                   	push   ebx
c0010fae:	e8 27 f8 ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fb3:	83 c4 20             	add    esp,0x20
c0010fb6:	83 ff 50             	cmp    edi,0x50
c0010fb9:	75 df                	jne    c0010f9a <VgaText::clearScreen()+0x28>
c0010fbb:	46                   	inc    esi
c0010fbc:	eb d2                	jmp    c0010f90 <VgaText::clearScreen()+0x1e>
c0010fbe:	83 ec 0c             	sub    esp,0xc
c0010fc1:	53                   	push   ebx
c0010fc2:	e8 d9 fd ff ff       	call   c0010da0 <VgaText::doUpdate()>
c0010fc7:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	5b                   	pop    ebx
c0010fd2:	5e                   	pop    esi
c0010fd3:	5f                   	pop    edi
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <VgaText::putchar(char)>:
c0010fd6:	56                   	push   esi
c0010fd7:	53                   	push   ebx
c0010fd8:	83 ec 14             	sub    esp,0x14
c0010fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fdf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe3:	3c 5b                	cmp    al,0x5b
c0010fe5:	75 21                	jne    c0011008 <VgaText::putchar(char)+0x32>
c0010fe7:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010fee:	74 28                	je     c0011018 <VgaText::putchar(char)+0x42>
c0010ff0:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ff9:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011003:	e9 e2 00 00 00       	jmp    c00110ea <VgaText::putchar(char)+0x114>
c0011008:	3c 1b                	cmp    al,0x1b
c001100a:	75 0c                	jne    c0011018 <VgaText::putchar(char)+0x42>
c001100c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011013:	e9 d2 00 00 00       	jmp    c00110ea <VgaText::putchar(char)+0x114>
c0011018:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001101e:	84 c9                	test   cl,cl
c0011020:	0f 84 ab 00 00 00    	je     c00110d1 <VgaText::putchar(char)+0xfb>
c0011026:	8d 50 c0             	lea    edx,[eax-0x40]
c0011029:	80 fa 3e             	cmp    dl,0x3e
c001102c:	0f 87 82 00 00 00    	ja     c00110b4 <VgaText::putchar(char)+0xde>
c0011032:	3c 6d                	cmp    al,0x6d
c0011034:	75 4d                	jne    c0011083 <VgaText::putchar(char)+0xad>
c0011036:	31 f6                	xor    esi,esi
c0011038:	31 d2                	xor    edx,edx
c001103a:	31 c0                	xor    eax,eax
c001103c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011042:	7e 30                	jle    c0011074 <VgaText::putchar(char)+0x9e>
c0011044:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001104c:	80 fa 3b             	cmp    dl,0x3b
c001104f:	75 17                	jne    c0011068 <VgaText::putchar(char)+0x92>
c0011051:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011055:	50                   	push   eax
c0011056:	53                   	push   ebx
c0011057:	e8 ee f5 ff ff       	call   c001064a <VgaText::doANSI_SGR(int)>
c001105c:	59                   	pop    ecx
c001105d:	31 d2                	xor    edx,edx
c001105f:	58                   	pop    eax
c0011060:	31 c0                	xor    eax,eax
c0011062:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011066:	eb 09                	jmp    c0011071 <VgaText::putchar(char)+0x9b>
c0011068:	6b c0 0a             	imul   eax,eax,0xa
c001106b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001106f:	88 ca                	mov    dl,cl
c0011071:	46                   	inc    esi
c0011072:	eb c8                	jmp    c001103c <VgaText::putchar(char)+0x66>
c0011074:	84 d2                	test   dl,dl
c0011076:	74 31                	je     c00110a9 <VgaText::putchar(char)+0xd3>
c0011078:	50                   	push   eax
c0011079:	53                   	push   ebx
c001107a:	e8 cb f5 ff ff       	call   c001064a <VgaText::doANSI_SGR(int)>
c001107f:	58                   	pop    eax
c0011080:	5a                   	pop    edx
c0011081:	eb 26                	jmp    c00110a9 <VgaText::putchar(char)+0xd3>
c0011083:	3c 4a                	cmp    al,0x4a
c0011085:	75 22                	jne    c00110a9 <VgaText::putchar(char)+0xd3>
c0011087:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001108e:	75 19                	jne    c00110a9 <VgaText::putchar(char)+0xd3>
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	53                   	push   ebx
c0011094:	e8 d9 fe ff ff       	call   c0010f72 <VgaText::clearScreen()>
c0011099:	83 c4 0c             	add    esp,0xc
c001109c:	6a 00                	push   0x0
c001109e:	6a 00                	push   0x0
c00110a0:	53                   	push   ebx
c00110a1:	e8 ac f7 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110b2:	eb 36                	jmp    c00110ea <VgaText::putchar(char)+0x114>
c00110b4:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110ba:	83 fa 0e             	cmp    edx,0xe
c00110bd:	7f 2b                	jg     c00110ea <VgaText::putchar(char)+0x114>
c00110bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110c2:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110c8:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110cf:	eb 19                	jmp    c00110ea <VgaText::putchar(char)+0x114>
c00110d1:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110d7:	0f be c0             	movsx  eax,al
c00110da:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110e0:	50                   	push   eax
c00110e1:	53                   	push   ebx
c00110e2:	e8 ab fa ff ff       	call   c0010b92 <VgaText::putchar(char, VgaColour, VgaColour)>
c00110e7:	83 c4 10             	add    esp,0x10
c00110ea:	83 c4 14             	add    esp,0x14
c00110ed:	5b                   	pop    ebx
c00110ee:	5e                   	pop    esi
c00110ef:	c3                   	ret    

c00110f0 <VgaText::puts(char const*)>:
c00110f0:	53                   	push   ebx
c00110f1:	83 ec 08             	sub    esp,0x8
c00110f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110f8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00110fb:	84 c0                	test   al,al
c00110fd:	74 12                	je     c0011111 <VgaText::puts(char const*)+0x21>
c00110ff:	43                   	inc    ebx
c0011100:	51                   	push   ecx
c0011101:	51                   	push   ecx
c0011102:	50                   	push   eax
c0011103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011107:	e8 ca fe ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001110c:	83 c4 10             	add    esp,0x10
c001110f:	eb e7                	jmp    c00110f8 <VgaText::puts(char const*)+0x8>
c0011111:	83 c4 08             	add    esp,0x8
c0011114:	5b                   	pop    ebx
c0011115:	c3                   	ret    

c0011116 <VgaText::putx(unsigned int)>:
c0011116:	57                   	push   edi
c0011117:	b9 11 00 00 00       	mov    ecx,0x11
c001111c:	56                   	push   esi
c001111d:	be ae a2 02 c0       	mov    esi,0xc002a2ae
c0011122:	53                   	push   ebx
c0011123:	83 ec 20             	sub    esp,0x20
c0011126:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001112a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001112e:	fc                   	cld    
c001112f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011131:	be 08 00 00 00       	mov    esi,0x8
c0011136:	50                   	push   eax
c0011137:	50                   	push   eax
c0011138:	89 d8                	mov    eax,ebx
c001113a:	c1 e3 04             	shl    ebx,0x4
c001113d:	c1 e8 1c             	shr    eax,0x1c
c0011140:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011145:	50                   	push   eax
c0011146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114a:	e8 87 fe ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	4e                   	dec    esi
c0011153:	75 e1                	jne    c0011136 <VgaText::putx(unsigned int)+0x20>
c0011155:	83 c4 20             	add    esp,0x20
c0011158:	5b                   	pop    ebx
c0011159:	5e                   	pop    esi
c001115a:	5f                   	pop    edi
c001115b:	c3                   	ret    

c001115c <VgaText::VgaText(char const*)>:
c001115c:	57                   	push   edi
c001115d:	56                   	push   esi
c001115e:	53                   	push   ebx
c001115f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011163:	83 ec 08             	sub    esp,0x8
c0011166:	6a 00                	push   0x0
c0011168:	50                   	push   eax
c0011169:	e8 6e 05 00 00       	call   c00116dc <UnixFile::UnixFile(int)>
c001116e:	83 c4 10             	add    esp,0x10
c0011171:	ba 14 a3 02 c0       	mov    edx,0xc002a314
c0011176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117a:	89 10                	mov    DWORD PTR [eax],edx
c001117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011180:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001118a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a7:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b2:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c0:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ce:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d9:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e4:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00111ea:	bb c0 e4 02 c0       	mov    ebx,0xc002e4c0
c00111ef:	b8 08 00 00 00       	mov    eax,0x8
c00111f4:	fc                   	cld    
c00111f5:	89 d7                	mov    edi,edx
c00111f7:	89 de                	mov    esi,ebx
c00111f9:	89 c1                	mov    ecx,eax
c00111fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011201:	05 1e 10 00 00       	add    eax,0x101e
c0011206:	83 ec 08             	sub    esp,0x8
c0011209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120d:	50                   	push   eax
c001120e:	e8 21 f6 fe ff       	call   c0000834 <strcpy>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011228:	83 c0 0c             	add    eax,0xc
c001122b:	83 ec 04             	sub    esp,0x4
c001122e:	68 00 0f 00 00       	push   0xf00
c0011233:	6a 00                	push   0x0
c0011235:	50                   	push   eax
c0011236:	e8 3d f5 fe ff       	call   c0000778 <memset>
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	83 ec 04             	sub    esp,0x4
c0011241:	6a 00                	push   0x0
c0011243:	6a 07                	push   0x7
c0011245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011249:	e8 b4 f4 ff ff       	call   c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	83 ec 08             	sub    esp,0x8
c0011254:	6a 02                	push   0x2
c0011256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001125a:	e8 49 fa ff ff       	call   c0010ca8 <VgaText::setCursorHeight(int)>
c001125f:	83 c4 10             	add    esp,0x10
c0011262:	83 ec 04             	sub    esp,0x4
c0011265:	6a 00                	push   0x0
c0011267:	6a 00                	push   0x0
c0011269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126d:	e8 e0 f5 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	83 ec 08             	sub    esp,0x8
c0011278:	6a 01                	push   0x1
c001127a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001127e:	e8 7d f3 ff ff       	call   c0010600 <VgaText::showCursor(bool)>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	6a 01                	push   0x1
c001128b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128f:	e8 7c f3 ff ff       	call   c0010610 <VgaText::disableBlink(bool)>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	83 ec 0c             	sub    esp,0xc
c001129a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129e:	e8 cf fc ff ff       	call   c0010f72 <VgaText::clearScreen()>
c00112a3:	83 c4 10             	add    esp,0x10
c00112a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112aa:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b5:	05 9e 10 00 00       	add    eax,0x109e
c00112ba:	83 ec 04             	sub    esp,0x4
c00112bd:	68 96 00 00 00       	push   0x96
c00112c2:	6a 00                	push   0x0
c00112c4:	50                   	push   eax
c00112c5:	e8 ae f4 fe ff       	call   c0000778 <memset>
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d1:	05 34 11 00 00       	add    eax,0x1134
c00112d6:	83 ec 04             	sub    esp,0x4
c00112d9:	68 2c 01 00 00       	push   0x12c
c00112de:	6a 00                	push   0x0
c00112e0:	50                   	push   eax
c00112e1:	e8 92 f4 fe ff       	call   c0000778 <memset>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	90                   	nop
c00112ea:	5b                   	pop    ebx
c00112eb:	5e                   	pop    esi
c00112ec:	5f                   	pop    edi
c00112ed:	c3                   	ret    

c00112ee <VgaText::receiveKey(unsigned char)>:
c00112ee:	55                   	push   ebp
c00112ef:	57                   	push   edi
c00112f0:	56                   	push   esi
c00112f1:	53                   	push   ebx
c00112f2:	83 ec 1c             	sub    esp,0x1c
c00112f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112fd:	84 db                	test   bl,bl
c00112ff:	0f 84 c9 00 00 00    	je     c00113ce <VgaText::receiveKey(unsigned char)+0xe0>
c0011305:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001130b:	80 fb 08             	cmp    bl,0x8
c001130e:	75 2c                	jne    c001133c <VgaText::receiveKey(unsigned char)+0x4e>
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	57                   	push   edi
c0011314:	e8 7b f4 fe ff       	call   c0000794 <strlen>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	85 c0                	test   eax,eax
c001131e:	74 41                	je     c0011361 <VgaText::receiveKey(unsigned char)+0x73>
c0011320:	50                   	push   eax
c0011321:	50                   	push   eax
c0011322:	6a 08                	push   0x8
c0011324:	56                   	push   esi
c0011325:	e8 ac fc ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001132a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001132d:	e8 62 f4 fe ff       	call   c0000794 <strlen>
c0011332:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001133a:	eb 22                	jmp    c001135e <VgaText::receiveKey(unsigned char)+0x70>
c001133c:	0f be c3             	movsx  eax,bl
c001133f:	52                   	push   edx
c0011340:	52                   	push   edx
c0011341:	50                   	push   eax
c0011342:	56                   	push   esi
c0011343:	e8 8e fc ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c0011348:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001134c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011351:	59                   	pop    ecx
c0011352:	5d                   	pop    ebp
c0011353:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011357:	50                   	push   eax
c0011358:	57                   	push   edi
c0011359:	e8 16 f6 fe ff       	call   c0000974 <strcat>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011368:	75 05                	jne    c001136f <VgaText::receiveKey(unsigned char)+0x81>
c001136a:	80 fb 0a             	cmp    bl,0xa
c001136d:	75 53                	jne    c00113c2 <VgaText::receiveKey(unsigned char)+0xd4>
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011378:	53                   	push   ebx
c0011379:	e8 16 f4 fe ff       	call   c0000794 <strlen>
c001137e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011381:	89 c5                	mov    ebp,eax
c0011383:	e8 0c f4 fe ff       	call   c0000794 <strlen>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001138f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011394:	76 10                	jbe    c00113a6 <VgaText::receiveKey(unsigned char)+0xb8>
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	68 bf a2 02 c0       	push   0xc002a2bf
c001139e:	e8 f4 90 00 00       	call   c001a497 <Krnl::panic(char const*)>
c00113a3:	83 c4 10             	add    esp,0x10
c00113a6:	50                   	push   eax
c00113a7:	50                   	push   eax
c00113a8:	57                   	push   edi
c00113a9:	53                   	push   ebx
c00113aa:	e8 c5 f5 fe ff       	call   c0000974 <strcat>
c00113af:	83 c4 0c             	add    esp,0xc
c00113b2:	68 96 00 00 00       	push   0x96
c00113b7:	6a 00                	push   0x0
c00113b9:	57                   	push   edi
c00113ba:	e8 b9 f3 fe ff       	call   c0000778 <memset>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	56                   	push   esi
c00113c6:	e8 d5 f9 ff ff       	call   c0010da0 <VgaText::doUpdate()>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	83 c4 1c             	add    esp,0x1c
c00113d1:	5b                   	pop    ebx
c00113d2:	5e                   	pop    esi
c00113d3:	5f                   	pop    edi
c00113d4:	5d                   	pop    ebp
c00113d5:	c3                   	ret    

c00113d6 <VgaText::write(unsigned long long, void*, int*)>:
c00113d6:	55                   	push   ebp
c00113d7:	57                   	push   edi
c00113d8:	56                   	push   esi
c00113d9:	53                   	push   ebx
c00113da:	83 ec 0c             	sub    esp,0xc
c00113dd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113e1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113e9:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00113f0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113f3:	39 eb                	cmp    ebx,ebp
c00113f5:	74 13                	je     c001140a <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113f7:	43                   	inc    ebx
c00113f8:	50                   	push   eax
c00113f9:	50                   	push   eax
c00113fa:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113fe:	50                   	push   eax
c00113ff:	56                   	push   esi
c0011400:	e8 d1 fb ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	eb e9                	jmp    c00113f3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011414:	56                   	push   esi
c0011415:	e8 86 f9 ff ff       	call   c0010da0 <VgaText::doUpdate()>
c001141a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001141e:	89 38                	mov    DWORD PTR [eax],edi
c0011420:	83 c4 1c             	add    esp,0x1c
c0011423:	31 c0                	xor    eax,eax
c0011425:	5b                   	pop    ebx
c0011426:	5e                   	pop    esi
c0011427:	5f                   	pop    edi
c0011428:	5d                   	pop    ebp
c0011429:	c3                   	ret    

c001142a <newTerminal(char*)>:
c001142a:	83 ec 28             	sub    esp,0x28
c001142d:	68 60 12 00 00       	push   0x1260
c0011432:	e8 09 e4 ff ff       	call   c000f840 <malloc>
c0011437:	5a                   	pop    edx
c0011438:	59                   	pop    ecx
c0011439:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001143d:	50                   	push   eax
c001143e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011442:	e8 15 fd ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c0011447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144b:	83 c4 2c             	add    esp,0x2c
c001144e:	c3                   	ret    
c001144f:	90                   	nop

c0011450 <TSS::TSS()>:
c0011450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001145b:	90                   	nop
c001145c:	c3                   	ret    
c001145d:	90                   	nop

c001145e <TSS::setESP(unsigned long)>:
c001145e:	55                   	push   ebp
c001145f:	89 e5                	mov    ebp,esp
c0011461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011467:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001146a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001146d:	90                   	nop
c001146e:	5d                   	pop    ebp
c001146f:	c3                   	ret    

c0011470 <TSS::flush()>:
c0011470:	55                   	push   ebp
c0011471:	89 e5                	mov    ebp,esp
c0011473:	83 ec 10             	sub    esp,0x10
c0011476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011479:	8b 00                	mov    eax,DWORD PTR [eax]
c001147b:	83 c8 03             	or     eax,0x3
c001147e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011482:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011486:	66 89 d0             	mov    ax,dx
c0011489:	0f 00 d8             	ltr    ax
c001148c:	90                   	nop
c001148d:	c9                   	leave  
c001148e:	c3                   	ret    
c001148f:	90                   	nop

c0011490 <TSS::setup(unsigned long, unsigned long)>:
c0011490:	55                   	push   ebp
c0011491:	89 e5                	mov    ebp,esp
c0011493:	83 ec 18             	sub    esp,0x18
c0011496:	83 ec 0c             	sub    esp,0xc
c0011499:	6a 68                	push   0x68
c001149b:	e8 a0 e3 ff ff       	call   c000f840 <malloc>
c00114a0:	83 c4 10             	add    esp,0x10
c00114a3:	89 c2                	mov    edx,eax
c00114a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b1:	83 ec 04             	sub    esp,0x4
c00114b4:	6a 68                	push   0x68
c00114b6:	6a 00                	push   0x0
c00114b8:	50                   	push   eax
c00114b9:	e8 ba f2 fe ff       	call   c0000778 <memset>
c00114be:	83 c4 10             	add    esp,0x10
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114eb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011503:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011536:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011542:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011555:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011558:	0f 20 da             	mov    edx,cr3
c001155b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001155e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011561:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156a:	83 ec 08             	sub    esp,0x8
c001156d:	50                   	push   eax
c001156e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011571:	50                   	push   eax
c0011572:	e8 a7 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011577:	83 c4 10             	add    esp,0x10
c001157a:	83 ec 08             	sub    esp,0x8
c001157d:	6a 68                	push   0x68
c001157f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011582:	50                   	push   eax
c0011583:	e8 b2 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011588:	83 c4 10             	add    esp,0x10
c001158b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001158f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011592:	83 e0 0f             	and    eax,0xf
c0011595:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011598:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001159b:	83 c8 40             	or     eax,0x40
c001159e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115a1:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00115a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115ac:	05 78 01 00 00       	add    eax,0x178
c00115b1:	83 ec 04             	sub    esp,0x4
c00115b4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115b7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115ba:	50                   	push   eax
c00115bb:	e8 ae da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115c0:	83 c4 10             	add    esp,0x10
c00115c3:	89 c2                	mov    edx,eax
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	89 10                	mov    DWORD PTR [eax],edx
c00115ca:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00115cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d5:	05 78 01 00 00       	add    eax,0x178
c00115da:	83 ec 0c             	sub    esp,0xc
c00115dd:	50                   	push   eax
c00115de:	e8 cf da ff ff       	call   c000f0b2 <GDT::flush()>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00115eb:	83 ec 08             	sub    esp,0x8
c00115ee:	50                   	push   eax
c00115ef:	68 28 a3 02 c0       	push   0xc002a328
c00115f4:	e8 fd 17 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00115f9:	83 c4 10             	add    esp,0x10
c00115fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011601:	c9                   	leave  
c0011602:	c3                   	ret    
c0011603:	90                   	nop

c0011604 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001160c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001160f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011614:	75 08                	jne    c001161e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011616:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001161c:	eb 38                	jmp    c0011656 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001161e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011623:	75 17                	jne    c001163c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011625:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001162a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001162d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011633:	8b 10                	mov    edx,DWORD PTR [eax]
c0011635:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011639:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001163c:	89 c1                	mov    ecx,eax
c001163e:	83 e1 fd             	and    ecx,0xfffffffd
c0011641:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011647:	74 cd                	je     c0011616 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011649:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001164e:	83 e0 ef             	and    eax,0xffffffef
c0011651:	83 f8 08             	cmp    eax,0x8
c0011654:	76 c0                	jbe    c0011616 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011656:	31 c0                	xor    eax,eax
c0011658:	c3                   	ret    
c0011659:	90                   	nop

c001165a <ReservedFilename::isAtty()>:
c001165a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001165e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011661:	31 c0                	xor    eax,eax
c0011663:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011669:	74 09                	je     c0011674 <ReservedFilename::isAtty()+0x1a>
c001166b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011671:	0f 94 c0             	sete   al
c0011674:	c3                   	ret    
c0011675:	90                   	nop

c0011676 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001167e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011685:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001168a:	75 08                	jne    c0011694 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001168c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011692:	eb 3d                	jmp    c00116d1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011694:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011699:	75 17                	jne    c00116b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001169b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116af:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116b2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116b7:	75 04                	jne    c00116bd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116b9:	89 0a                	mov    DWORD PTR [edx],ecx
c00116bb:	eb 14                	jmp    c00116d1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116bd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116c2:	74 c8                	je     c001168c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116c4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116c9:	83 e0 ef             	and    eax,0xffffffef
c00116cc:	83 f8 08             	cmp    eax,0x8
c00116cf:	76 bb                	jbe    c001168c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116d1:	31 c0                	xor    eax,eax
c00116d3:	c3                   	ret    

c00116d4 <UnixFile::getFileDescriptor()>:
c00116d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116db:	c3                   	ret    

c00116dc <UnixFile::UnixFile(int)>:
c00116dc:	53                   	push   ebx
c00116dd:	83 ec 28             	sub    esp,0x28
c00116e0:	ba 14 a4 02 c0       	mov    edx,0xc002a414
c00116e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e9:	89 10                	mov    DWORD PTR [eax],edx
c00116eb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116f3:	0f 8f 8c 01 00 00    	jg     c0011885 <UnixFile::UnixFile(int)+0x1a9>
c00116f9:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c00116fe:	8d 50 01             	lea    edx,[eax+0x1]
c0011701:	89 15 a0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a0,edx
c0011707:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001170b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001170e:	83 ec 08             	sub    esp,0x8
c0011711:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011715:	68 78 e5 02 c0       	push   0xc002e578
c001171a:	e8 f1 6e 01 00       	call   c0028610 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	a0 74 e5 02 c0       	mov    al,ds:0xc002e574
c0011727:	83 f0 01             	xor    eax,0x1
c001172a:	84 c0                	test   al,al
c001172c:	0f 84 54 01 00 00    	je     c0011886 <UnixFile::UnixFile(int)+0x1aa>
c0011732:	c6 05 74 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e574,0x1
c0011739:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011741:	83 ec 0c             	sub    esp,0xc
c0011744:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011748:	e8 f3 e0 ff ff       	call   c000f840 <malloc>
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	89 c3                	mov    ebx,eax
c0011752:	83 ec 08             	sub    esp,0x8
c0011755:	68 03 ff ff 0f       	push   0xfffff03
c001175a:	53                   	push   ebx
c001175b:	e8 2c 01 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011760:	83 c4 10             	add    esp,0x10
c0011763:	89 1d 6c e5 02 c0    	mov    DWORD PTR ds:0xc002e56c,ebx
c0011769:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011771:	83 ec 0c             	sub    esp,0xc
c0011774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011778:	e8 c3 e0 ff ff       	call   c000f840 <malloc>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	89 c3                	mov    ebx,eax
c0011782:	83 ec 08             	sub    esp,0x8
c0011785:	68 01 ff ff 0f       	push   0xfffff01
c001178a:	53                   	push   ebx
c001178b:	e8 fc 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011790:	83 c4 10             	add    esp,0x10
c0011793:	89 1d 70 e5 02 c0    	mov    DWORD PTR ds:0xc002e570,ebx
c0011799:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117a1:	83 ec 0c             	sub    esp,0xc
c00117a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117a8:	e8 93 e0 ff ff       	call   c000f840 <malloc>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	89 c3                	mov    ebx,eax
c00117b2:	83 ec 08             	sub    esp,0x8
c00117b5:	68 00 ff ff 0f       	push   0xfffff00
c00117ba:	53                   	push   ebx
c00117bb:	e8 cc 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	89 1d 64 e5 02 c0    	mov    DWORD PTR ds:0xc002e564,ebx
c00117c9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117d1:	83 ec 0c             	sub    esp,0xc
c00117d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117d8:	e8 63 e0 ff ff       	call   c000f840 <malloc>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	89 c3                	mov    ebx,eax
c00117e2:	83 ec 08             	sub    esp,0x8
c00117e5:	68 02 ff ff 0f       	push   0xfffff02
c00117ea:	53                   	push   ebx
c00117eb:	e8 9c 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	89 1d 68 e5 02 c0    	mov    DWORD PTR ds:0xc002e568,ebx
c00117f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011801:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011806:	7f 7e                	jg     c0011886 <UnixFile::UnixFile(int)+0x1aa>
c0011808:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011817:	e8 24 e0 ff ff       	call   c000f840 <malloc>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 c3                	mov    ebx,eax
c0011821:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011825:	05 10 ff ff 0f       	add    eax,0xfffff10
c001182a:	83 ec 08             	sub    esp,0x8
c001182d:	50                   	push   eax
c001182e:	53                   	push   ebx
c001182f:	e8 58 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011834:	83 c4 10             	add    esp,0x10
c0011837:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001183b:	89 1c 85 40 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ac0],ebx
c0011842:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011851:	e8 ea df ff ff       	call   c000f840 <malloc>
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	89 c3                	mov    ebx,eax
c001185b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001185f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011864:	83 ec 08             	sub    esp,0x8
c0011867:	50                   	push   eax
c0011868:	53                   	push   ebx
c0011869:	e8 1e 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011875:	89 1c 85 00 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b00],ebx
c001187c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011880:	e9 7c ff ff ff       	jmp    c0011801 <UnixFile::UnixFile(int)+0x125>
c0011885:	90                   	nop
c0011886:	83 c4 28             	add    esp,0x28
c0011889:	5b                   	pop    ebx
c001188a:	c3                   	ret    
c001188b:	90                   	nop

c001188c <ReservedFilename::ReservedFilename(int)>:
c001188c:	83 ec 0c             	sub    esp,0xc
c001188f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011893:	83 ec 08             	sub    esp,0x8
c0011896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189a:	50                   	push   eax
c001189b:	e8 3c fe ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	ba 30 a4 02 c0       	mov    edx,0xc002a430
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	89 10                	mov    DWORD PTR [eax],edx
c00118ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118b6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118b9:	90                   	nop
c00118ba:	83 c4 0c             	add    esp,0xc
c00118bd:	c3                   	ret    

c00118be <UnixFile::~UnixFile()>:
c00118be:	83 ec 1c             	sub    esp,0x1c
c00118c1:	ba 14 a4 02 c0       	mov    edx,0xc002a414
c00118c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ca:	89 10                	mov    DWORD PTR [eax],edx
c00118cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118d8:	7f 73                	jg     c001194d <UnixFile::~UnixFile()+0x8f>
c00118da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118e2:	83 ec 0c             	sub    esp,0xc
c00118e5:	68 78 e5 02 c0       	push   0xc002e578
c00118ea:	e8 f5 6d 01 00       	call   c00286e4 <LinkedList<UnixFile>::getFirstElement()>
c00118ef:	83 c4 10             	add    esp,0x10
c00118f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118f6:	83 ec 0c             	sub    esp,0xc
c00118f9:	68 78 e5 02 c0       	push   0xc002e578
c00118fe:	e8 e9 6d 01 00       	call   c00286ec <LinkedList<UnixFile>::removeFirst()>
c0011903:	83 c4 10             	add    esp,0x10
c0011906:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001190a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001190e:	74 40                	je     c0011950 <UnixFile::~UnixFile()+0x92>
c0011910:	83 ec 08             	sub    esp,0x8
c0011913:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011917:	68 78 e5 02 c0       	push   0xc002e578
c001191c:	e8 ef 6c 01 00       	call   c0028610 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011928:	8d 50 01             	lea    edx,[eax+0x1]
c001192b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001192f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011934:	0f 94 c0             	sete   al
c0011937:	84 c0                	test   al,al
c0011939:	74 a7                	je     c00118e2 <UnixFile::~UnixFile()+0x24>
c001193b:	83 ec 0c             	sub    esp,0xc
c001193e:	68 ec a3 02 c0       	push   0xc002a3ec
c0011943:	e8 4f 8b 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0011948:	83 c4 10             	add    esp,0x10
c001194b:	eb 95                	jmp    c00118e2 <UnixFile::~UnixFile()+0x24>
c001194d:	90                   	nop
c001194e:	eb 01                	jmp    c0011951 <UnixFile::~UnixFile()+0x93>
c0011950:	90                   	nop
c0011951:	90                   	nop
c0011952:	83 c4 1c             	add    esp,0x1c
c0011955:	c3                   	ret    

c0011956 <UnixFile::~UnixFile()>:
c0011956:	83 ec 0c             	sub    esp,0xc
c0011959:	83 ec 0c             	sub    esp,0xc
c001195c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011960:	e8 59 ff ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	6a 0c                	push   0xc
c001196d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011971:	e8 a0 13 00 00       	call   c0012d16 <operator delete(void*, unsigned long)>
c0011976:	83 c4 10             	add    esp,0x10
c0011979:	83 c4 0c             	add    esp,0xc
c001197c:	c3                   	ret    
c001197d:	90                   	nop

c001197e <ReservedFilename::~ReservedFilename()>:
c001197e:	83 ec 0c             	sub    esp,0xc
c0011981:	ba 30 a4 02 c0       	mov    edx,0xc002a430
c0011986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001198a:	89 10                	mov    DWORD PTR [eax],edx
c001198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	50                   	push   eax
c0011994:	e8 25 ff ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	90                   	nop
c001199d:	83 c4 0c             	add    esp,0xc
c00119a0:	c3                   	ret    
c00119a1:	90                   	nop

c00119a2 <ReservedFilename::~ReservedFilename()>:
c00119a2:	83 ec 0c             	sub    esp,0xc
c00119a5:	83 ec 0c             	sub    esp,0xc
c00119a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ac:	e8 cd ff ff ff       	call   c001197e <ReservedFilename::~ReservedFilename()>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	83 ec 08             	sub    esp,0x8
c00119b7:	6a 0c                	push   0xc
c00119b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bd:	e8 54 13 00 00       	call   c0012d16 <operator delete(void*, unsigned long)>
c00119c2:	83 c4 10             	add    esp,0x10
c00119c5:	83 c4 0c             	add    esp,0xc
c00119c8:	c3                   	ret    

c00119c9 <getFromFileDescriptor(int)>:
c00119c9:	53                   	push   ebx
c00119ca:	83 ec 08             	sub    esp,0x8
c00119cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119dd:	7f 2c                	jg     c0011a0b <getFromFileDescriptor(int)+0x42>
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	68 78 e5 02 c0       	push   0xc002e578
c00119e7:	e8 f8 6c 01 00       	call   c00286e4 <LinkedList<UnixFile>::getFirstElement()>
c00119ec:	83 c4 10             	add    esp,0x10
c00119ef:	85 c0                	test   eax,eax
c00119f1:	75 04                	jne    c00119f7 <getFromFileDescriptor(int)+0x2e>
c00119f3:	31 c0                	xor    eax,eax
c00119f5:	eb 6e                	jmp    c0011a65 <getFromFileDescriptor(int)+0x9c>
c00119f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119fa:	74 69                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c00119fc:	52                   	push   edx
c00119fd:	52                   	push   edx
c00119fe:	50                   	push   eax
c00119ff:	68 78 e5 02 c0       	push   0xc002e578
c0011a04:	e8 85 6d 01 00       	call   c002878e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a09:	eb e1                	jmp    c00119ec <getFromFileDescriptor(int)+0x23>
c0011a0b:	a1 6c e5 02 c0       	mov    eax,ds:0xc002e56c
c0011a10:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a16:	74 4d                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a18:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c0011a1d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a23:	74 40                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a25:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0011a2a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a30:	74 33                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a32:	a1 64 e5 02 c0       	mov    eax,ds:0xc002e564
c0011a37:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a3d:	74 26                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a3f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a45:	83 f8 08             	cmp    eax,0x8
c0011a48:	77 09                	ja     c0011a53 <getFromFileDescriptor(int)+0x8a>
c0011a4a:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c0011a51:	eb 12                	jmp    c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a53:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a59:	83 fb 08             	cmp    ebx,0x8
c0011a5c:	77 95                	ja     c00119f3 <getFromFileDescriptor(int)+0x2a>
c0011a5e:	8b 04 9d 00 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b00]
c0011a65:	83 c4 08             	add    esp,0x8
c0011a68:	5b                   	pop    ebx
c0011a69:	c3                   	ret    

c0011a6a <__static_initialization_and_destruction_0(int, int)>:
c0011a6a:	83 ec 0c             	sub    esp,0xc
c0011a6d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a72:	75 34                	jne    c0011aa8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a74:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a7c:	75 2a                	jne    c0011aa8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	68 78 e5 02 c0       	push   0xc002e578
c0011a86:	e8 2d 6b 01 00       	call   c00285b8 <LinkedList<UnixFile>::LinkedList()>
c0011a8b:	83 c4 10             	add    esp,0x10
c0011a8e:	83 ec 04             	sub    esp,0x4
c0011a91:	68 1c d3 02 c0       	push   0xc002d31c
c0011a96:	68 78 e5 02 c0       	push   0xc002e578
c0011a9b:	68 b6 85 02 c0       	push   0xc00285b6
c0011aa0:	e8 eb 11 00 00       	call   c0012c90 <__cxa_atexit>
c0011aa5:	83 c4 10             	add    esp,0x10
c0011aa8:	90                   	nop
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	c3                   	ret    

c0011aad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011aad:	83 ec 0c             	sub    esp,0xc
c0011ab0:	83 ec 08             	sub    esp,0x8
c0011ab3:	68 ff ff 00 00       	push   0xffff
c0011ab8:	6a 01                	push   0x1
c0011aba:	e8 ab ff ff ff       	call   c0011a6a <__static_initialization_and_destruction_0(int, int)>
c0011abf:	83 c4 10             	add    esp,0x10
c0011ac2:	83 c4 0c             	add    esp,0xc
c0011ac5:	c3                   	ret    

c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ac6:	53                   	push   ebx
c0011ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011acb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011acf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011ad5:	89 c8                	mov    eax,ecx
c0011ad7:	d1 e8                	shr    eax,1
c0011ad9:	03 05 a8 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3a8
c0011adf:	83 e1 01             	and    ecx,0x1
c0011ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ae4:	75 09                	jne    c0011aef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011ae6:	83 e2 f0             	and    edx,0xfffffff0
c0011ae9:	09 da                	or     edx,ebx
c0011aeb:	88 10                	mov    BYTE PTR [eax],dl
c0011aed:	5b                   	pop    ebx
c0011aee:	c3                   	ret    
c0011aef:	c1 e3 04             	shl    ebx,0x4
c0011af2:	83 e2 0f             	and    edx,0xf
c0011af5:	09 da                	or     edx,ebx
c0011af7:	88 10                	mov    BYTE PTR [eax],dl
c0011af9:	5b                   	pop    ebx
c0011afa:	c3                   	ret    

c0011afb <Virt::getPageState(unsigned long)>:
c0011afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aff:	8b 0d a8 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3a8
c0011b05:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b0b:	89 d0                	mov    eax,edx
c0011b0d:	d1 e8                	shr    eax,1
c0011b0f:	83 e2 01             	and    edx,0x1
c0011b12:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b15:	75 04                	jne    c0011b1b <Virt::getPageState(unsigned long)+0x20>
c0011b17:	83 e0 0f             	and    eax,0xf
c0011b1a:	c3                   	ret    
c0011b1b:	c0 e8 04             	shr    al,0x4
c0011b1e:	c3                   	ret    

c0011b1f <Virt::allocateKernelVirtualPages(int)>:
c0011b1f:	55                   	push   ebp
c0011b20:	31 ed                	xor    ebp,ebp
c0011b22:	57                   	push   edi
c0011b23:	56                   	push   esi
c0011b24:	53                   	push   ebx
c0011b25:	31 db                	xor    ebx,ebx
c0011b27:	83 ec 1c             	sub    esp,0x1c
c0011b2a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b2e:	8b 3d a4 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a4
c0011b34:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b39:	57                   	push   edi
c0011b3a:	e8 bc ff ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011b3f:	5a                   	pop    edx
c0011b40:	84 c0                	test   al,al
c0011b42:	75 3a                	jne    c0011b7e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b44:	85 db                	test   ebx,ebx
c0011b46:	75 02                	jne    c0011b4a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b48:	89 fd                	mov    ebp,edi
c0011b4a:	43                   	inc    ebx
c0011b4b:	39 f3                	cmp    ebx,esi
c0011b4d:	74 5a                	je     c0011ba9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b4f:	47                   	inc    edi
c0011b50:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b56:	76 31                	jbe    c0011b89 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b58:	c7 05 a4 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d3a4,0xc8000
c0011b62:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b67:	75 28                	jne    c0011b91 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b69:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b6e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b73:	57                   	push   edi
c0011b74:	e8 82 ff ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011b79:	5a                   	pop    edx
c0011b7a:	84 c0                	test   al,al
c0011b7c:	74 c6                	je     c0011b44 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b7e:	31 db                	xor    ebx,ebx
c0011b80:	47                   	inc    edi
c0011b81:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b87:	77 cf                	ja     c0011b58 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b89:	89 3d a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,edi
c0011b8f:	eb a8                	jmp    c0011b39 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b91:	83 ec 0c             	sub    esp,0xc
c0011b94:	68 44 a4 02 c0       	push   0xc002a444
c0011b99:	e8 f9 88 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0011b9e:	8b 3d a4 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a4
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	eb 90                	jmp    c0011b39 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ba9:	89 2d a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,ebp
c0011baf:	4b                   	dec    ebx
c0011bb0:	74 5f                	je     c0011c11 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bb2:	85 f6                	test   esi,esi
c0011bb4:	74 3d                	je     c0011bf3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bb6:	89 e8                	mov    eax,ebp
c0011bb8:	31 db                	xor    ebx,ebx
c0011bba:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bbd:	eb 14                	jmp    c0011bd3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bbf:	6a 01                	push   0x1
c0011bc1:	43                   	inc    ebx
c0011bc2:	50                   	push   eax
c0011bc3:	e8 fe fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc8:	58                   	pop    eax
c0011bc9:	39 f3                	cmp    ebx,esi
c0011bcb:	5a                   	pop    edx
c0011bcc:	74 25                	je     c0011bf3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bce:	a1 a4 d3 02 c0       	mov    eax,ds:0xc002d3a4
c0011bd3:	8d 50 01             	lea    edx,[eax+0x1]
c0011bd6:	85 db                	test   ebx,ebx
c0011bd8:	89 15 a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,edx
c0011bde:	74 20                	je     c0011c00 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011be0:	39 df                	cmp    edi,ebx
c0011be2:	75 db                	jne    c0011bbf <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011be4:	6a 03                	push   0x3
c0011be6:	43                   	inc    ebx
c0011be7:	50                   	push   eax
c0011be8:	e8 d9 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bed:	59                   	pop    ecx
c0011bee:	39 f3                	cmp    ebx,esi
c0011bf0:	58                   	pop    eax
c0011bf1:	75 db                	jne    c0011bce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bf3:	83 c4 1c             	add    esp,0x1c
c0011bf6:	89 e8                	mov    eax,ebp
c0011bf8:	5b                   	pop    ebx
c0011bf9:	c1 e0 0c             	shl    eax,0xc
c0011bfc:	5e                   	pop    esi
c0011bfd:	5f                   	pop    edi
c0011bfe:	5d                   	pop    ebp
c0011bff:	c3                   	ret    
c0011c00:	6a 02                	push   0x2
c0011c02:	bb 01 00 00 00       	mov    ebx,0x1
c0011c07:	50                   	push   eax
c0011c08:	e8 b9 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0d:	58                   	pop    eax
c0011c0e:	5a                   	pop    edx
c0011c0f:	eb bd                	jmp    c0011bce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c11:	6a 04                	push   0x4
c0011c13:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c16:	55                   	push   ebp
c0011c17:	a3 a4 d3 02 c0       	mov    ds:0xc002d3a4,eax
c0011c1c:	e8 a5 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c21:	59                   	pop    ecx
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	5b                   	pop    ebx
c0011c25:	c1 e0 0c             	shl    eax,0xc
c0011c28:	83 c4 1c             	add    esp,0x1c
c0011c2b:	5b                   	pop    ebx
c0011c2c:	5e                   	pop    esi
c0011c2d:	5f                   	pop    edi
c0011c2e:	5d                   	pop    ebp
c0011c2f:	c3                   	ret    

c0011c30 <Virt::freeSwapfilePage(unsigned long)>:
c0011c30:	53                   	push   ebx
c0011c31:	8b 15 84 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e584
c0011c37:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c3b:	b8 01 00 00 00       	mov    eax,0x1
c0011c40:	89 cb                	mov    ebx,ecx
c0011c42:	d3 e0                	shl    eax,cl
c0011c44:	c1 eb 05             	shr    ebx,0x5
c0011c47:	f7 d0                	not    eax
c0011c49:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c4c:	5b                   	pop    ebx
c0011c4d:	c3                   	ret    

c0011c4e <Virt::swapIDToSector(unsigned long)>:
c0011c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c52:	0f af 05 ac d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d3ac
c0011c59:	03 05 b4 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3b4
c0011c5f:	c3                   	ret    

c0011c60 <Virt::allocateSwapfilePage()>:
c0011c60:	8b 0d ac d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3ac
c0011c66:	31 d2                	xor    edx,edx
c0011c68:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011c6d:	f7 f1                	div    ecx
c0011c6f:	39 0d b0 d3 02 c0    	cmp    DWORD PTR ds:0xc002d3b0,ecx
c0011c75:	72 1b                	jb     c0011c92 <Virt::allocateSwapfilePage()+0x32>
c0011c77:	88 c1                	mov    cl,al
c0011c79:	ba 01 00 00 00       	mov    edx,0x1
c0011c7e:	c1 e8 05             	shr    eax,0x5
c0011c81:	d3 e2                	shl    edx,cl
c0011c83:	8b 0d 84 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e584
c0011c89:	8d 04 81             	lea    eax,[ecx+eax*4]
c0011c8c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c8e:	85 ca                	test   edx,ecx
c0011c90:	74 13                	je     c0011ca5 <Virt::allocateSwapfilePage()+0x45>
c0011c92:	83 ec 18             	sub    esp,0x18
c0011c95:	68 96 a6 02 c0       	push   0xc002a696
c0011c9a:	e8 f8 87 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0011c9f:	31 c0                	xor    eax,eax
c0011ca1:	83 c4 1c             	add    esp,0x1c
c0011ca4:	c3                   	ret    
c0011ca5:	09 ca                	or     edx,ecx
c0011ca7:	89 10                	mov    DWORD PTR [eax],edx
c0011ca9:	31 c0                	xor    eax,eax
c0011cab:	c3                   	ret    

c0011cac <Virt::virtualMemorySetup()>:
c0011cac:	53                   	push   ebx
c0011cad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011cb2:	83 ec 08             	sub    esp,0x8
c0011cb5:	6a 0f                	push   0xf
c0011cb7:	53                   	push   ebx
c0011cb8:	43                   	inc    ebx
c0011cb9:	e8 08 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cbe:	59                   	pop    ecx
c0011cbf:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011cc5:	58                   	pop    eax
c0011cc6:	75 ed                	jne    c0011cb5 <Virt::virtualMemorySetup()+0x9>
c0011cc8:	83 ec 08             	sub    esp,0x8
c0011ccb:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011cd0:	68 00 00 00 c8       	push   0xc8000000
c0011cd5:	68 ad a6 02 c0       	push   0xc002a6ad
c0011cda:	e8 17 11 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0011cdf:	58                   	pop    eax
c0011ce0:	5a                   	pop    edx
c0011ce1:	68 00 f0 ff ef       	push   0xeffff000
c0011ce6:	68 c1 a6 02 c0       	push   0xc002a6c1
c0011ceb:	e8 06 11 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	83 ec 08             	sub    esp,0x8
c0011cf6:	6a 00                	push   0x0
c0011cf8:	53                   	push   ebx
c0011cf9:	43                   	inc    ebx
c0011cfa:	e8 c7 fd ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cff:	83 c4 10             	add    esp,0x10
c0011d02:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d08:	75 e9                	jne    c0011cf3 <Virt::virtualMemorySetup()+0x47>
c0011d0a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d0f:	83 ec 08             	sub    esp,0x8
c0011d12:	6a 0f                	push   0xf
c0011d14:	53                   	push   ebx
c0011d15:	43                   	inc    ebx
c0011d16:	e8 ab fd ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d24:	75 e9                	jne    c0011d0f <Virt::virtualMemorySetup()+0x63>
c0011d26:	83 ec 0c             	sub    esp,0xc
c0011d29:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011d2e:	31 d2                	xor    edx,edx
c0011d30:	f7 35 ac d3 02 c0    	div    DWORD PTR ds:0xc002d3ac
c0011d36:	c1 e8 05             	shr    eax,0x5
c0011d39:	50                   	push   eax
c0011d3a:	e8 01 db ff ff       	call   c000f840 <malloc>
c0011d3f:	83 c4 0c             	add    esp,0xc
c0011d42:	89 c1                	mov    ecx,eax
c0011d44:	a3 84 e5 02 c0       	mov    ds:0xc002e584,eax
c0011d49:	31 d2                	xor    edx,edx
c0011d4b:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011d50:	f7 35 ac d3 02 c0    	div    DWORD PTR ds:0xc002d3ac
c0011d56:	c1 e8 05             	shr    eax,0x5
c0011d59:	50                   	push   eax
c0011d5a:	6a 00                	push   0x0
c0011d5c:	51                   	push   ecx
c0011d5d:	e8 16 ea fe ff       	call   c0000778 <memset>
c0011d62:	83 c4 18             	add    esp,0x18
c0011d65:	5b                   	pop    ebx
c0011d66:	c3                   	ret    

c0011d67 <Virt::getAKernelVAS()>:
c0011d67:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0011d6c:	c3                   	ret    

c0011d6d <Virt::setupPageSwapping(int)>:
c0011d6d:	57                   	push   edi
c0011d6e:	56                   	push   esi
c0011d6f:	53                   	push   ebx
c0011d70:	83 ec 1c             	sub    esp,0x1c
c0011d73:	68 14 01 00 00       	push   0x114
c0011d78:	e8 c3 da ff ff       	call   c000f840 <malloc>
c0011d7d:	83 c4 0c             	add    esp,0xc
c0011d80:	89 c6                	mov    esi,eax
c0011d82:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c0011d88:	68 d5 a6 02 c0       	push   0xc002a6d5
c0011d8d:	50                   	push   eax
c0011d8e:	e8 bb 15 00 00       	call   c001334e <File::File(char const*, Process*)>
c0011d93:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d96:	e8 8f 17 00 00       	call   c001352a <File::unlink()>
c0011d9b:	58                   	pop    eax
c0011d9c:	5a                   	pop    edx
c0011d9d:	6a 12                	push   0x12
c0011d9f:	56                   	push   esi
c0011da0:	e8 0d 16 00 00       	call   c00133b2 <File::open(FileOpenMode)>
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	85 c0                	test   eax,eax
c0011daa:	0f 85 ca 00 00 00    	jne    c0011e7a <Virt::setupPageSwapping(int)+0x10d>
c0011db0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011db4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011dbc:	c1 e3 08             	shl    ebx,0x8
c0011dbf:	83 ec 0c             	sub    esp,0xc
c0011dc2:	68 00 00 01 00       	push   0x10000
c0011dc7:	e8 74 da ff ff       	call   c000f840 <malloc>
c0011dcc:	83 c4 0c             	add    esp,0xc
c0011dcf:	89 c7                	mov    edi,eax
c0011dd1:	68 00 00 01 00       	push   0x10000
c0011dd6:	6a 00                	push   0x0
c0011dd8:	50                   	push   eax
c0011dd9:	e8 9a e9 fe ff       	call   c0000778 <memset>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	85 db                	test   ebx,ebx
c0011de3:	79 03                	jns    c0011de8 <Virt::setupPageSwapping(int)+0x7b>
c0011de5:	83 c3 0f             	add    ebx,0xf
c0011de8:	c1 fb 04             	sar    ebx,0x4
c0011deb:	4b                   	dec    ebx
c0011dec:	83 fb ff             	cmp    ebx,0xffffffff
c0011def:	74 4b                	je     c0011e3c <Virt::setupPageSwapping(int)+0xcf>
c0011df1:	83 ec 0c             	sub    esp,0xc
c0011df4:	8b 06                	mov    eax,DWORD PTR [esi]
c0011df6:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011dfa:	52                   	push   edx
c0011dfb:	57                   	push   edi
c0011dfc:	6a 00                	push   0x0
c0011dfe:	68 00 00 01 00       	push   0x10000
c0011e03:	56                   	push   esi
c0011e04:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e07:	83 c4 20             	add    esp,0x20
c0011e0a:	85 c0                	test   eax,eax
c0011e0c:	75 59                	jne    c0011e67 <Virt::setupPageSwapping(int)+0xfa>
c0011e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e12:	3d 00 00 01 00       	cmp    eax,0x10000
c0011e17:	74 d2                	je     c0011deb <Virt::setupPageSwapping(int)+0x7e>
c0011e19:	83 ec 08             	sub    esp,0x8
c0011e1c:	4b                   	dec    ebx
c0011e1d:	50                   	push   eax
c0011e1e:	68 28 a7 02 c0       	push   0xc002a728
c0011e23:	e8 ce 0f 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0011e28:	c7 04 24 31 a7 02 c0 	mov    DWORD PTR [esp],0xc002a731
c0011e2f:	e8 63 86 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	83 fb ff             	cmp    ebx,0xffffffff
c0011e3a:	75 b5                	jne    c0011df1 <Virt::setupPageSwapping(int)+0x84>
c0011e3c:	83 ec 0c             	sub    esp,0xc
c0011e3f:	56                   	push   esi
c0011e40:	e8 cb 15 00 00       	call   c0013410 <File::close()>
c0011e45:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e48:	e8 13 da ff ff       	call   c000f860 <rfree>
c0011e4d:	83 c4 10             	add    esp,0x10
c0011e50:	85 f6                	test   esi,esi
c0011e52:	74 0c                	je     c0011e60 <Virt::setupPageSwapping(int)+0xf3>
c0011e54:	83 ec 0c             	sub    esp,0xc
c0011e57:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e59:	56                   	push   esi
c0011e5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	83 c4 10             	add    esp,0x10
c0011e63:	5b                   	pop    ebx
c0011e64:	5e                   	pop    esi
c0011e65:	5f                   	pop    edi
c0011e66:	c3                   	ret    
c0011e67:	83 ec 08             	sub    esp,0x8
c0011e6a:	50                   	push   eax
c0011e6b:	68 10 a7 02 c0       	push   0xc002a710
c0011e70:	e8 81 0f 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	eb 94                	jmp    c0011e0e <Virt::setupPageSwapping(int)+0xa1>
c0011e7a:	83 ec 08             	sub    esp,0x8
c0011e7d:	50                   	push   eax
c0011e7e:	68 ec a6 02 c0       	push   0xc002a6ec
c0011e83:	e8 6e 0f 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0011e88:	c7 04 24 f5 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6f5
c0011e8f:	e8 03 86 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0011e94:	83 c4 10             	add    esp,0x10
c0011e97:	e9 14 ff ff ff       	jmp    c0011db0 <Virt::setupPageSwapping(int)+0x43>

c0011e9c <VAS::VAS()>:
c0011e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ea0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eab:	a3 88 e5 02 c0       	mov    ds:0xc002e588,eax
c0011eb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eb4:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011eb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ebc:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011ebf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ec3:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011eca:	90                   	nop
c0011ecb:	c3                   	ret    

c0011ecc <VAS::VAS(VAS*)>:
c0011ecc:	83 ec 0c             	sub    esp,0xc
c0011ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011eda:	83 ec 0c             	sub    esp,0xc
c0011edd:	68 64 a4 02 c0       	push   0xc002a464
c0011ee2:	e8 b0 85 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0011ee7:	83 c4 10             	add    esp,0x10
c0011eea:	90                   	nop
c0011eeb:	83 c4 0c             	add    esp,0xc
c0011eee:	c3                   	ret    
c0011eef:	90                   	nop

c0011ef0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef4:	89 c2                	mov    edx,eax
c0011ef6:	c1 e8 0a             	shr    eax,0xa
c0011ef9:	c1 ea 16             	shr    edx,0x16
c0011efc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f01:	19 c9                	sbb    ecx,ecx
c0011f03:	c1 e2 0c             	shl    edx,0xc
c0011f06:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f0c:	25 fc 0f 00 00       	and    eax,0xffc
c0011f11:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f18:	01 d0                	add    eax,edx
c0011f1a:	c3                   	ret    
c0011f1b:	90                   	nop

c0011f1c <VAS::getPageTableEntry(unsigned long)>:
c0011f1c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f20:	89 ca                	mov    edx,ecx
c0011f22:	c1 e9 0a             	shr    ecx,0xa
c0011f25:	c1 ea 16             	shr    edx,0x16
c0011f28:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f2e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f34:	c1 e0 0c             	shl    eax,0xc
c0011f37:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f3a:	c3                   	ret    

c0011f3b <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f3b:	57                   	push   edi
c0011f3c:	56                   	push   esi
c0011f3d:	be 01 00 00 00       	mov    esi,0x1
c0011f42:	53                   	push   ebx
c0011f43:	83 ec 10             	sub    esp,0x10
c0011f46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f4a:	c1 eb 0c             	shr    ebx,0xc
c0011f4d:	eb 3f                	jmp    c0011f8e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f4f:	e8 13 fe ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c0011f54:	83 ec 08             	sub    esp,0x8
c0011f57:	57                   	push   edi
c0011f58:	50                   	push   eax
c0011f59:	e8 be ff ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c0011f5e:	83 c4 10             	add    esp,0x10
c0011f61:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f63:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f67:	f6 c4 04             	test   ah,0x4
c0011f6a:	75 5f                	jne    c0011fcb <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f6c:	80 fa 04             	cmp    dl,0x4
c0011f6f:	74 78                	je     c0011fe9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f71:	80 fa 02             	cmp    dl,0x2
c0011f74:	0f 84 88 00 00 00    	je     c0012002 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f7a:	80 fa 03             	cmp    dl,0x3
c0011f7d:	0f 84 ad 00 00 00    	je     c0012030 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f83:	fe ca                	dec    dl
c0011f85:	0f 84 92 00 00 00    	je     c001201d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f8b:	43                   	inc    ebx
c0011f8c:	31 f6                	xor    esi,esi
c0011f8e:	53                   	push   ebx
c0011f8f:	e8 67 fb ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011f94:	5f                   	pop    edi
c0011f95:	89 df                	mov    edi,ebx
c0011f97:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f9b:	c1 e7 0c             	shl    edi,0xc
c0011f9e:	84 c0                	test   al,al
c0011fa0:	75 ad                	jne    c0011f4f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011fa2:	83 ec 0c             	sub    esp,0xc
c0011fa5:	68 37 a7 02 c0       	push   0xc002a737
c0011faa:	e8 e8 84 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0011faf:	e8 b3 fd ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c0011fb4:	5a                   	pop    edx
c0011fb5:	59                   	pop    ecx
c0011fb6:	57                   	push   edi
c0011fb7:	50                   	push   eax
c0011fb8:	e8 5f ff ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c0011fbd:	83 c4 10             	add    esp,0x10
c0011fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fc2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fc6:	f6 c4 04             	test   ah,0x4
c0011fc9:	74 c0                	je     c0011f8b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fcb:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011fcf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fd4:	83 ec 0c             	sub    esp,0xc
c0011fd7:	50                   	push   eax
c0011fd8:	e8 76 de ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0011fdd:	83 c4 10             	add    esp,0x10
c0011fe0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fe4:	80 fa 04             	cmp    dl,0x4
c0011fe7:	75 88                	jne    c0011f71 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011fe9:	89 f0                	mov    eax,esi
c0011feb:	84 c0                	test   al,al
c0011fed:	75 47                	jne    c0012036 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fef:	c7 44 24 20 88 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a488
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	5b                   	pop    ebx
c0011ffb:	5e                   	pop    esi
c0011ffc:	5f                   	pop    edi
c0011ffd:	e9 95 84 00 00       	jmp    c001a497 <Krnl::panic(char const*)>
c0012002:	89 f0                	mov    eax,esi
c0012004:	84 c0                	test   al,al
c0012006:	75 15                	jne    c001201d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012008:	83 ec 0c             	sub    esp,0xc
c001200b:	68 53 a7 02 c0       	push   0xc002a753
c0012010:	e8 82 84 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0012015:	83 c4 10             	add    esp,0x10
c0012018:	e9 6e ff ff ff       	jmp    c0011f8b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001201d:	83 ec 08             	sub    esp,0x8
c0012020:	6a 00                	push   0x0
c0012022:	53                   	push   ebx
c0012023:	e8 9e fa ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012028:	83 c4 10             	add    esp,0x10
c001202b:	e9 5b ff ff ff       	jmp    c0011f8b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012030:	89 f0                	mov    eax,esi
c0012032:	84 c0                	test   al,al
c0012034:	75 15                	jne    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012036:	83 ec 08             	sub    esp,0x8
c0012039:	6a 00                	push   0x0
c001203b:	53                   	push   ebx
c001203c:	e8 85 fa ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	83 c4 10             	add    esp,0x10
c0012047:	5b                   	pop    ebx
c0012048:	5e                   	pop    esi
c0012049:	5f                   	pop    edi
c001204a:	c3                   	ret    
c001204b:	c7 44 24 20 6f a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a76f
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	5b                   	pop    ebx
c0012057:	5e                   	pop    esi
c0012058:	5f                   	pop    edi
c0012059:	e9 39 84 00 00       	jmp    c001a497 <Krnl::panic(char const*)>

c001205e <VAS::freeAllocatedPages(unsigned long)>:
c001205e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012062:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012066:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001206a:	74 09                	je     c0012075 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001206c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012070:	e9 c6 fe ff ff       	jmp    c0011f3b <Virt::freeKernelVirtualPages(unsigned long)>
c0012075:	c7 44 24 04 ac a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a4ac
c001207d:	e9 74 0d 00 00       	jmp    c0012df6 <Dbg::kprintf(char const*, ...)>

c0012082 <VAS::virtualToPhysical(unsigned long)>:
c0012082:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012086:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001208a:	e8 8d fe ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c001208f:	5a                   	pop    edx
c0012090:	8b 00                	mov    eax,DWORD PTR [eax]
c0012092:	59                   	pop    ecx
c0012093:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012098:	c3                   	ret    
c0012099:	90                   	nop

c001209a <VAS::reflagRange(unsigned long, int, int, int)>:
c001209a:	55                   	push   ebp
c001209b:	57                   	push   edi
c001209c:	56                   	push   esi
c001209d:	53                   	push   ebx
c001209e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00120a2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00120a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00120aa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00120ae:	85 db                	test   ebx,ebx
c00120b0:	7e 22                	jle    c00120d4 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00120b2:	c1 e3 0c             	shl    ebx,0xc
c00120b5:	01 f3                	add    ebx,esi
c00120b7:	56                   	push   esi
c00120b8:	81 c6 00 10 00 00    	add    esi,0x1000
c00120be:	55                   	push   ebp
c00120bf:	e8 58 fe ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c00120c4:	5a                   	pop    edx
c00120c5:	59                   	pop    ecx
c00120c6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00120c8:	21 f9                	and    ecx,edi
c00120ca:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00120ce:	39 f3                	cmp    ebx,esi
c00120d0:	89 08                	mov    DWORD PTR [eax],ecx
c00120d2:	75 e3                	jne    c00120b7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00120d4:	5b                   	pop    ebx
c00120d5:	5e                   	pop    esi
c00120d6:	5f                   	pop    edi
c00120d7:	5d                   	pop    ebp
c00120d8:	c3                   	ret    
c00120d9:	90                   	nop

c00120da <VAS::setToWriteCombining(unsigned long, int)>:
c00120da:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00120df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120ec:	75 01                	jne    c00120ef <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120ee:	c3                   	ret    
c00120ef:	68 80 00 00 00       	push   0x80
c00120f4:	6a ff                	push   0xffffffff
c00120f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012102:	e8 93 ff ff ff       	call   c001209a <VAS::reflagRange(unsigned long, int, int, int)>
c0012107:	83 c4 14             	add    esp,0x14
c001210a:	c3                   	ret    
c001210b:	90                   	nop

c001210c <VAS::mapOtherVASIn(bool, VAS*)>:
c001210c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012111:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012115:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001211c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001211f:	19 c0                	sbb    eax,eax
c0012121:	83 ca 03             	or     edx,0x3
c0012124:	83 e0 fc             	and    eax,0xfffffffc
c0012127:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001212e:	0f 20 d8             	mov    eax,cr3
c0012131:	0f 22 d8             	mov    cr3,eax
c0012134:	c3                   	ret    
c0012135:	90                   	nop

c0012136 <VAS::~VAS()>:
c0012136:	83 ec 2c             	sub    esp,0x2c
c0012139:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012141:	e8 76 bb 00 00       	call   c001dcbc <lockScheduler()>
c0012146:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001214b:	8b 00                	mov    eax,DWORD PTR [eax]
c001214d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012150:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012156:	83 ec 04             	sub    esp,0x4
c0012159:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001215d:	6a 01                	push   0x1
c001215f:	50                   	push   eax
c0012160:	e8 a7 ff ff ff       	call   c001210c <VAS::mapOtherVASIn(bool, VAS*)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012170:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012178:	0f 8f d7 00 00 00    	jg     c0012255 <VAS::~VAS()+0x11f>
c001217e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012182:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012185:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012189:	c1 e2 02             	shl    edx,0x2
c001218c:	01 d0                	add    eax,edx
c001218e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012190:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012198:	83 e0 01             	and    eax,0x1
c001219b:	0f 84 ab 00 00 00    	je     c001224c <VAS::~VAS()+0x116>
c00121a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00121a9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00121b1:	7f 75                	jg     c0012228 <VAS::~VAS()+0xf2>
c00121b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121b7:	c1 e0 0a             	shl    eax,0xa
c00121ba:	89 c2                	mov    edx,eax
c00121bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121c0:	01 d0                	add    eax,edx
c00121c2:	c1 e0 0c             	shl    eax,0xc
c00121c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121c9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00121d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121d3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121d9:	83 ec 04             	sub    esp,0x4
c00121dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121e0:	6a 01                	push   0x1
c00121e2:	50                   	push   eax
c00121e3:	e8 08 fd ff ff       	call   c0011ef0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121e8:	83 c4 10             	add    esp,0x10
c00121eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00121f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121fd:	25 01 04 00 00       	and    eax,0x401
c0012202:	3d 01 04 00 00       	cmp    eax,0x401
c0012207:	75 19                	jne    c0012222 <VAS::~VAS()+0xec>
c0012209:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001220d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012212:	83 ec 0c             	sub    esp,0xc
c0012215:	50                   	push   eax
c0012216:	e8 38 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001221b:	83 c4 10             	add    esp,0x10
c001221e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012222:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012226:	eb 81                	jmp    c00121a9 <VAS::~VAS()+0x73>
c0012228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001222c:	25 00 04 00 00       	and    eax,0x400
c0012231:	74 19                	je     c001224c <VAS::~VAS()+0x116>
c0012233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012237:	25 00 f0 ff ff       	and    eax,0xfffff000
c001223c:	83 ec 0c             	sub    esp,0xc
c001223f:	50                   	push   eax
c0012240:	e8 0e dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0012245:	83 c4 10             	add    esp,0x10
c0012248:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001224c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012250:	e9 1b ff ff ff       	jmp    c0012170 <VAS::~VAS()+0x3a>
c0012255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012259:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001225c:	83 ec 0c             	sub    esp,0xc
c001225f:	50                   	push   eax
c0012260:	e8 d6 fc ff ff       	call   c0011f3b <Virt::freeKernelVirtualPages(unsigned long)>
c0012265:	83 c4 10             	add    esp,0x10
c0012268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001226c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001226f:	83 ec 0c             	sub    esp,0xc
c0012272:	50                   	push   eax
c0012273:	e8 db db ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0012278:	83 c4 10             	add    esp,0x10
c001227b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001227f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012283:	c1 e0 02             	shl    eax,0x2
c0012286:	83 ec 08             	sub    esp,0x8
c0012289:	50                   	push   eax
c001228a:	68 d0 a4 02 c0       	push   0xc002a4d0
c001228f:	e8 62 0b 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012294:	83 c4 10             	add    esp,0x10
c0012297:	e8 22 ba 00 00       	call   c001dcbe <unlockScheduler()>
c001229c:	90                   	nop
c001229d:	83 c4 2c             	add    esp,0x2c
c00122a0:	c3                   	ret    
c00122a1:	90                   	nop

c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00122a2:	55                   	push   ebp
c00122a3:	57                   	push   edi
c00122a4:	56                   	push   esi
c00122a5:	53                   	push   ebx
c00122a6:	83 ec 1c             	sub    esp,0x1c
c00122a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00122ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122b1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00122b7:	77 08                	ja     c00122c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00122b9:	0f 20 d8             	mov    eax,cr3
c00122bc:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c00122bf:	75 47                	jne    c0012308 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00122c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122c5:	09 d8                	or     eax,ebx
c00122c7:	a9 ff 0f 00 00       	test   eax,0xfff
c00122cc:	75 57                	jne    c0012325 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122ce:	89 de                	mov    esi,ebx
c00122d0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122d3:	c1 ee 16             	shr    esi,0x16
c00122d6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122dd:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122e1:	74 54                	je     c0012337 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122e7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122ed:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122f1:	c1 e6 0c             	shl    esi,0xc
c00122f4:	c1 eb 0a             	shr    ebx,0xa
c00122f7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122fd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012300:	83 c4 1c             	add    esp,0x1c
c0012303:	5b                   	pop    ebx
c0012304:	5e                   	pop    esi
c0012305:	5f                   	pop    edi
c0012306:	5d                   	pop    ebp
c0012307:	c3                   	ret    
c0012308:	83 ec 0c             	sub    esp,0xc
c001230b:	68 f0 a4 02 c0       	push   0xc002a4f0
c0012310:	e8 e1 0a 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001231c:	09 d8                	or     eax,ebx
c001231e:	a9 ff 0f 00 00       	test   eax,0xfff
c0012323:	74 a9                	je     c00122ce <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012325:	83 ec 0c             	sub    esp,0xc
c0012328:	68 58 a5 02 c0       	push   0xc002a558
c001232d:	e8 65 81 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0012332:	83 c4 10             	add    esp,0x10
c0012335:	eb 97                	jmp    c00122ce <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012337:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001233b:	e8 9d db ff ff       	call   c000fedd <Phys::allocatePage()>
c0012340:	89 c5                	mov    ebp,eax
c0012342:	e8 20 fa ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c0012347:	83 ec 0c             	sub    esp,0xc
c001234a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001234e:	6a 01                	push   0x1
c0012350:	e8 ca f7 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0012355:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001235c:	6a 01                	push   0x1
c001235e:	50                   	push   eax
c001235f:	55                   	push   ebp
c0012360:	81 cd 07 04 00 00    	or     ebp,0x407
c0012366:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001236a:	51                   	push   ecx
c001236b:	e8 26 02 00 00       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012370:	83 c4 1c             	add    esp,0x1c
c0012373:	68 00 10 00 00       	push   0x1000
c0012378:	6a 00                	push   0x0
c001237a:	50                   	push   eax
c001237b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001237f:	e8 f4 e3 fe ff       	call   c0000778 <memset>
c0012384:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012388:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001238b:	e8 ab fb ff ff       	call   c0011f3b <Virt::freeKernelVirtualPages(unsigned long)>
c0012390:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012394:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012397:	83 c4 10             	add    esp,0x10
c001239a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001239d:	e9 41 ff ff ff       	jmp    c00122e3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00123a2 <VAS::allocatePages(int, int)>:
c00123a2:	55                   	push   ebp
c00123a3:	57                   	push   edi
c00123a4:	56                   	push   esi
c00123a5:	53                   	push   ebx
c00123a6:	83 ec 1c             	sub    esp,0x1c
c00123a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123ad:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00123b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123b8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00123be:	83 e0 01             	and    eax,0x1
c00123c1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00123c5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00123c9:	0f 85 cc 00 00 00    	jne    c001249b <VAS::allocatePages(int, int)+0xf9>
c00123cf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123d6:	85 c0                	test   eax,eax
c00123d8:	0f 84 a1 00 00 00    	je     c001247f <VAS::allocatePages(int, int)+0xdd>
c00123de:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e6:	c1 e6 0c             	shl    esi,0xc
c00123e9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123ed:	85 c0                	test   eax,eax
c00123ef:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123f2:	7e 33                	jle    c0012427 <VAS::allocatePages(int, int)+0x85>
c00123f4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123fc:	81 cd 00 04 00 00    	or     ebp,0x400
c0012402:	e8 d6 da ff ff       	call   c000fedd <Phys::allocatePage()>
c0012407:	55                   	push   ebp
c0012408:	53                   	push   ebx
c0012409:	50                   	push   eax
c001240a:	57                   	push   edi
c001240b:	e8 92 fe ff ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012410:	83 c4 10             	add    esp,0x10
c0012413:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012418:	74 03                	je     c001241d <VAS::allocatePages(int, int)+0x7b>
c001241a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001241d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012423:	39 de                	cmp    esi,ebx
c0012425:	75 db                	jne    c0012402 <VAS::allocatePages(int, int)+0x60>
c0012427:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001242c:	75 12                	jne    c0012440 <VAS::allocatePages(int, int)+0x9e>
c001242e:	0f 20 d8             	mov    eax,cr3
c0012431:	0f 22 d8             	mov    cr3,eax
c0012434:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012438:	83 c4 1c             	add    esp,0x1c
c001243b:	5b                   	pop    ebx
c001243c:	5e                   	pop    esi
c001243d:	5f                   	pop    edi
c001243e:	5d                   	pop    ebp
c001243f:	c3                   	ret    
c0012440:	c1 ee 0a             	shr    esi,0xa
c0012443:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012447:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001244d:	c1 eb 0a             	shr    ebx,0xa
c0012450:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012456:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001245c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012462:	39 c3                	cmp    ebx,eax
c0012464:	77 ce                	ja     c0012434 <VAS::allocatePages(int, int)+0x92>
c0012466:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012469:	81 c3 00 10 00 00    	add    ebx,0x1000
c001246f:	39 d8                	cmp    eax,ebx
c0012471:	73 f3                	jae    c0012466 <VAS::allocatePages(int, int)+0xc4>
c0012473:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012477:	83 c4 1c             	add    esp,0x1c
c001247a:	5b                   	pop    ebx
c001247b:	5e                   	pop    esi
c001247c:	5f                   	pop    edi
c001247d:	5d                   	pop    ebp
c001247e:	c3                   	ret    
c001247f:	83 ec 0c             	sub    esp,0xc
c0012482:	68 7c a5 02 c0       	push   0xc002a57c
c0012487:	e8 0b 80 00 00       	call   c001a497 <Krnl::panic(char const*)>
c001248c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001248f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012493:	83 c4 10             	add    esp,0x10
c0012496:	e9 43 ff ff ff       	jmp    c00123de <VAS::allocatePages(int, int)+0x3c>
c001249b:	83 ec 0c             	sub    esp,0xc
c001249e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124a2:	e8 78 f6 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00124a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00124b3:	0f 87 9b 00 00 00    	ja     c0012554 <VAS::allocatePages(int, int)+0x1b2>
c00124b9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00124bd:	85 d2                	test   edx,edx
c00124bf:	7e 3c                	jle    c00124fd <VAS::allocatePages(int, int)+0x15b>
c00124c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124c5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124cd:	c1 e5 0c             	shl    ebp,0xc
c00124d0:	81 ce 00 04 00 00    	or     esi,0x400
c00124d6:	01 dd                	add    ebp,ebx
c00124d8:	e8 00 da ff ff       	call   c000fedd <Phys::allocatePage()>
c00124dd:	56                   	push   esi
c00124de:	53                   	push   ebx
c00124df:	50                   	push   eax
c00124e0:	57                   	push   edi
c00124e1:	e8 bc fd ff ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e6:	83 c4 10             	add    esp,0x10
c00124e9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ee:	74 03                	je     c00124f3 <VAS::allocatePages(int, int)+0x151>
c00124f0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124f9:	39 dd                	cmp    ebp,ebx
c00124fb:	75 db                	jne    c00124d8 <VAS::allocatePages(int, int)+0x136>
c00124fd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012502:	0f 84 26 ff ff ff    	je     c001242e <VAS::allocatePages(int, int)+0x8c>
c0012508:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001250c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012510:	89 d3                	mov    ebx,edx
c0012512:	c1 e0 0c             	shl    eax,0xc
c0012515:	c1 eb 0a             	shr    ebx,0xa
c0012518:	01 d0                	add    eax,edx
c001251a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012520:	c1 e8 0a             	shr    eax,0xa
c0012523:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012529:	25 00 f0 ff ff       	and    eax,0xfffff000
c001252e:	2d 00 00 40 00       	sub    eax,0x400000
c0012533:	39 c3                	cmp    ebx,eax
c0012535:	0f 87 f9 fe ff ff    	ja     c0012434 <VAS::allocatePages(int, int)+0x92>
c001253b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012544:	39 d8                	cmp    eax,ebx
c0012546:	73 f3                	jae    c001253b <VAS::allocatePages(int, int)+0x199>
c0012548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254c:	83 c4 1c             	add    esp,0x1c
c001254f:	5b                   	pop    ebx
c0012550:	5e                   	pop    esi
c0012551:	5f                   	pop    edi
c0012552:	5d                   	pop    ebp
c0012553:	c3                   	ret    
c0012554:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012559:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001255f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012566:	0f 84 4d ff ff ff    	je     c00124b9 <VAS::allocatePages(int, int)+0x117>
c001256c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012574:	e9 40 ff ff ff       	jmp    c00124b9 <VAS::allocatePages(int, int)+0x117>
c0012579:	90                   	nop

c001257a <VAS::setCPUSpecific(unsigned long)>:
c001257a:	83 ec 0c             	sub    esp,0xc
c001257d:	6a 05                	push   0x5
c001257f:	68 00 00 40 c2       	push   0xc2400000
c0012584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001258c:	e8 11 fd ff ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012591:	83 c4 1c             	add    esp,0x1c
c0012594:	c3                   	ret    
c0012595:	90                   	nop

c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012596:	55                   	push   ebp
c0012597:	57                   	push   edi
c0012598:	56                   	push   esi
c0012599:	53                   	push   ebx
c001259a:	83 ec 1c             	sub    esp,0x1c
c001259d:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00125a2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00125a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125ac:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125b0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00125b6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00125ba:	83 e0 01             	and    eax,0x1
c00125bd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00125c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125c5:	85 c0                	test   eax,eax
c00125c7:	7e 39                	jle    c0012602 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00125c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125cd:	89 f3                	mov    ebx,esi
c00125cf:	c1 e0 0c             	shl    eax,0xc
c00125d2:	01 f0                	add    eax,esi
c00125d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125d8:	55                   	push   ebp
c00125d9:	53                   	push   ebx
c00125da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125de:	29 f0                	sub    eax,esi
c00125e0:	01 d8                	add    eax,ebx
c00125e2:	50                   	push   eax
c00125e3:	57                   	push   edi
c00125e4:	e8 b9 fc ff ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125e9:	83 c4 10             	add    esp,0x10
c00125ec:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125f1:	74 03                	je     c00125f6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125f3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125f6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125fc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012600:	75 d6                	jne    c00125d8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012602:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012607:	75 10                	jne    c0012619 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012609:	0f 20 d8             	mov    eax,cr3
c001260c:	0f 22 d8             	mov    cr3,eax
c001260f:	83 c4 1c             	add    esp,0x1c
c0012612:	89 f0                	mov    eax,esi
c0012614:	5b                   	pop    ebx
c0012615:	5e                   	pop    esi
c0012616:	5f                   	pop    edi
c0012617:	5d                   	pop    ebp
c0012618:	c3                   	ret    
c0012619:	89 f3                	mov    ebx,esi
c001261b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001261f:	c1 eb 0a             	shr    ebx,0xa
c0012622:	c1 e0 0c             	shl    eax,0xc
c0012625:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001262b:	01 f0                	add    eax,esi
c001262d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012633:	c1 e8 0a             	shr    eax,0xa
c0012636:	25 00 f0 ff ff       	and    eax,0xfffff000
c001263b:	2d 00 00 40 00       	sub    eax,0x400000
c0012640:	39 c3                	cmp    ebx,eax
c0012642:	77 cb                	ja     c001260f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012644:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012647:	81 c3 00 10 00 00    	add    ebx,0x1000
c001264d:	39 d8                	cmp    eax,ebx
c001264f:	73 f3                	jae    c0012644 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012651:	83 c4 1c             	add    esp,0x1c
c0012654:	89 f0                	mov    eax,esi
c0012656:	5b                   	pop    ebx
c0012657:	5e                   	pop    esi
c0012658:	5f                   	pop    edi
c0012659:	5d                   	pop    ebp
c001265a:	c3                   	ret    
c001265b:	90                   	nop

c001265c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001265c:	55                   	push   ebp
c001265d:	57                   	push   edi
c001265e:	56                   	push   esi
c001265f:	53                   	push   ebx
c0012660:	83 ec 1c             	sub    esp,0x1c
c0012663:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012667:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001266b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001266f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012673:	a9 ff 0f 00 00       	test   eax,0xfff
c0012678:	75 4a                	jne    c00126c4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001267a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001267e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012681:	c1 eb 16             	shr    ebx,0x16
c0012684:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001268b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001268f:	74 4d                	je     c00126de <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012691:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012695:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012699:	c1 e8 0a             	shr    eax,0xa
c001269c:	80 fa 01             	cmp    dl,0x1
c001269f:	19 d2                	sbb    edx,edx
c00126a1:	c1 e3 0c             	shl    ebx,0xc
c00126a4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00126a8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00126ae:	25 fc 0f 00 00       	and    eax,0xffc
c00126b3:	01 d8                	add    eax,ebx
c00126b5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00126bc:	83 c4 1c             	add    esp,0x1c
c00126bf:	5b                   	pop    ebx
c00126c0:	5e                   	pop    esi
c00126c1:	5f                   	pop    edi
c00126c2:	5d                   	pop    ebp
c00126c3:	c3                   	ret    
c00126c4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00126c8:	83 ec 0c             	sub    esp,0xc
c00126cb:	68 a8 a5 02 c0       	push   0xc002a5a8
c00126d0:	e8 c2 7d 00 00       	call   c001a497 <Krnl::panic(char const*)>
c00126d5:	83 c4 10             	add    esp,0x10
c00126d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126dc:	eb 9c                	jmp    c001267a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126e2:	e8 f6 d7 ff ff       	call   c000fedd <Phys::allocatePage()>
c00126e7:	89 c5                	mov    ebp,eax
c00126e9:	e8 79 f6 ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c00126ee:	83 ec 0c             	sub    esp,0xc
c00126f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00126f5:	6a 01                	push   0x1
c00126f7:	e8 23 f4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00126fc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012703:	6a 01                	push   0x1
c0012705:	50                   	push   eax
c0012706:	55                   	push   ebp
c0012707:	81 cd 07 04 00 00    	or     ebp,0x407
c001270d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012711:	51                   	push   ecx
c0012712:	e8 7f fe ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012717:	83 c4 1c             	add    esp,0x1c
c001271a:	68 00 10 00 00       	push   0x1000
c001271f:	6a 00                	push   0x0
c0012721:	50                   	push   eax
c0012722:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012726:	e8 4d e0 fe ff       	call   c0000778 <memset>
c001272b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001272f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012732:	e8 04 f8 ff ff       	call   c0011f3b <Virt::freeKernelVirtualPages(unsigned long)>
c0012737:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001273a:	83 c4 10             	add    esp,0x10
c001273d:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012744:	e9 48 ff ff ff       	jmp    c0012691 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012749:	90                   	nop

c001274a <VAS::VAS(bool)>:
c001274a:	53                   	push   ebx
c001274b:	83 ec 28             	sub    esp,0x28
c001274e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012752:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012756:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001275a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012765:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012769:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001276c:	e8 6c d7 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012771:	89 c2                	mov    edx,eax
c0012773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001277a:	e8 e8 f5 ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c001277f:	89 c3                	mov    ebx,eax
c0012781:	83 ec 0c             	sub    esp,0xc
c0012784:	6a 01                	push   0x1
c0012786:	e8 94 f3 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c001278b:	83 c4 10             	add    esp,0x10
c001278e:	89 c2                	mov    edx,eax
c0012790:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012794:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012797:	83 ec 0c             	sub    esp,0xc
c001279a:	6a 03                	push   0x3
c001279c:	6a 01                	push   0x1
c001279e:	52                   	push   edx
c001279f:	50                   	push   eax
c00127a0:	53                   	push   ebx
c00127a1:	e8 f0 fd ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127a6:	83 c4 20             	add    esp,0x20
c00127a9:	89 c2                	mov    edx,eax
c00127ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127af:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00127b2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00127ba:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127c2:	7f 1c                	jg     c00127e0 <VAS::VAS(bool)+0x96>
c00127c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127cf:	c1 e2 02             	shl    edx,0x2
c00127d2:	01 d0                	add    eax,edx
c00127d4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127de:	eb da                	jmp    c00127ba <VAS::VAS(bool)+0x70>
c00127e0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127e8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127f0:	7f 7a                	jg     c001286c <VAS::VAS(bool)+0x122>
c00127f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127f6:	2d 00 02 00 00       	sub    eax,0x200
c00127fb:	c1 e0 0c             	shl    eax,0xc
c00127fe:	83 c8 03             	or     eax,0x3
c0012801:	89 c2                	mov    edx,eax
c0012803:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012808:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001280e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012814:	83 e0 10             	and    eax,0x10
c0012817:	84 c0                	test   al,al
c0012819:	74 07                	je     c0012822 <VAS::VAS(bool)+0xd8>
c001281b:	b8 00 01 00 00       	mov    eax,0x100
c0012820:	eb 05                	jmp    c0012827 <VAS::VAS(bool)+0xdd>
c0012822:	b8 00 00 00 00       	mov    eax,0x0
c0012827:	09 d0                	or     eax,edx
c0012829:	89 c1                	mov    ecx,eax
c001282b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012836:	c1 e2 02             	shl    edx,0x2
c0012839:	01 d0                	add    eax,edx
c001283b:	89 ca                	mov    edx,ecx
c001283d:	89 10                	mov    DWORD PTR [eax],edx
c001283f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012843:	2d 40 03 00 00       	sub    eax,0x340
c0012848:	83 f8 7f             	cmp    eax,0x7f
c001284b:	77 16                	ja     c0012863 <VAS::VAS(bool)+0x119>
c001284d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012851:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012854:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012858:	c1 e2 02             	shl    edx,0x2
c001285b:	01 d0                	add    eax,edx
c001285d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012863:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012867:	e9 7c ff ff ff       	jmp    c00127e8 <VAS::VAS(bool)+0x9e>
c001286c:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012871:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012877:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001287d:	83 e0 10             	and    eax,0x10
c0012880:	84 c0                	test   al,al
c0012882:	74 07                	je     c001288b <VAS::VAS(bool)+0x141>
c0012884:	b8 03 41 00 00       	mov    eax,0x4103
c0012889:	eb 05                	jmp    c0012890 <VAS::VAS(bool)+0x146>
c001288b:	b8 03 40 00 00       	mov    eax,0x4003
c0012890:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012894:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012897:	81 c2 20 0c 00 00    	add    edx,0xc20
c001289d:	89 02                	mov    DWORD PTR [edx],eax
c001289f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00128a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00128b0:	83 ec 08             	sub    esp,0x8
c00128b3:	50                   	push   eax
c00128b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128b8:	e8 bd fc ff ff       	call   c001257a <VAS::setCPUSpecific(unsigned long)>
c00128bd:	83 c4 10             	add    esp,0x10
c00128c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00128c7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00128cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128d2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128d8:	83 e0 10             	and    eax,0x10
c00128db:	84 c0                	test   al,al
c00128dd:	74 07                	je     c00128e6 <VAS::VAS(bool)+0x19c>
c00128df:	b8 00 01 00 00       	mov    eax,0x100
c00128e4:	eb 05                	jmp    c00128eb <VAS::VAS(bool)+0x1a1>
c00128e6:	b8 00 00 00 00       	mov    eax,0x0
c00128eb:	09 c2                	or     edx,eax
c00128ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128f4:	05 fc 0f 00 00       	add    eax,0xffc
c00128f9:	83 ca 03             	or     edx,0x3
c00128fc:	89 10                	mov    DWORD PTR [eax],edx
c00128fe:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012903:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012909:	83 ec 0c             	sub    esp,0xc
c001290c:	50                   	push   eax
c001290d:	e8 f6 1b 00 00       	call   c0014508 <Device::getName()>
c0012912:	83 c4 10             	add    esp,0x10
c0012915:	83 ec 08             	sub    esp,0x8
c0012918:	68 89 a7 02 c0       	push   0xc002a789
c001291d:	50                   	push   eax
c001291e:	e8 9d df fe ff       	call   c00008c0 <strcmp>
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	85 c0                	test   eax,eax
c0012928:	0f 94 c0             	sete   al
c001292b:	84 c0                	test   al,al
c001292d:	74 70                	je     c001299f <VAS::VAS(bool)+0x255>
c001292f:	e8 6b b3 00 00       	call   c001dc9f <disableIRQs()>
c0012934:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012939:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001293f:	05 7c 09 00 00       	add    eax,0x97c
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	50                   	push   eax
c0012948:	e8 6f c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012955:	89 c3                	mov    ebx,eax
c0012957:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001295c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012962:	05 7c 09 00 00       	add    eax,0x97c
c0012967:	83 ec 0c             	sub    esp,0xc
c001296a:	50                   	push   eax
c001296b:	e8 4c c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012970:	83 c4 10             	add    esp,0x10
c0012973:	83 ec 08             	sub    esp,0x8
c0012976:	50                   	push   eax
c0012977:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001297b:	e8 9c f5 ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c0012980:	83 c4 10             	add    esp,0x10
c0012983:	8b 00                	mov    eax,DWORD PTR [eax]
c0012985:	25 00 f0 ff ff       	and    eax,0xfffff000
c001298a:	6a 11                	push   0x11
c001298c:	53                   	push   ebx
c001298d:	50                   	push   eax
c001298e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012992:	e8 0b f9 ff ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012997:	83 c4 10             	add    esp,0x10
c001299a:	e8 0e b3 00 00       	call   c001dcad <enableIRQs()>
c001299f:	90                   	nop
c00129a0:	83 c4 28             	add    esp,0x28
c00129a3:	5b                   	pop    ebx
c00129a4:	c3                   	ret    
c00129a5:	90                   	nop

c00129a6 <VAS::evict(unsigned long)>:
c00129a6:	57                   	push   edi
c00129a7:	56                   	push   esi
c00129a8:	53                   	push   ebx
c00129a9:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00129ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00129b1:	e8 06 b3 00 00       	call   c001dcbc <lockScheduler()>
c00129b6:	83 ec 08             	sub    esp,0x8
c00129b9:	56                   	push   esi
c00129ba:	68 97 a7 02 c0       	push   0xc002a797
c00129bf:	e8 32 04 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00129c4:	e8 97 f2 ff ff       	call   c0011c60 <Virt::allocateSwapfilePage()>
c00129c9:	89 c3                	mov    ebx,eax
c00129cb:	58                   	pop    eax
c00129cc:	5a                   	pop    edx
c00129cd:	56                   	push   esi
c00129ce:	57                   	push   edi
c00129cf:	e8 48 f5 ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c00129d4:	89 c7                	mov    edi,eax
c00129d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00129d8:	c1 e8 0c             	shr    eax,0xc
c00129db:	89 04 24             	mov    DWORD PTR [esp],eax
c00129de:	e8 70 d4 ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00129e3:	8b 17                	mov    edx,DWORD PTR [edi]
c00129e5:	89 d8                	mov    eax,ebx
c00129e7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00129ed:	c1 e0 0b             	shl    eax,0xb
c00129f0:	09 c2                	or     edx,eax
c00129f2:	89 17                	mov    DWORD PTR [edi],edx
c00129f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129f7:	e8 52 f2 ff ff       	call   c0011c4e <Virt::swapIDToSector(unsigned long)>
c00129fc:	89 34 24             	mov    DWORD PTR [esp],esi
c00129ff:	31 d2                	xor    edx,edx
c0012a01:	6a 08                	push   0x8
c0012a03:	52                   	push   edx
c0012a04:	50                   	push   eax
c0012a05:	0f be 05 b8 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d3b8
c0012a0c:	ff 34 85 1c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16e4]
c0012a13:	e8 5a 3c 00 00       	call   c0016672 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a18:	83 c4 14             	add    esp,0x14
c0012a1b:	53                   	push   ebx
c0012a1c:	e8 2d f2 ff ff       	call   c0011c4e <Virt::swapIDToSector(unsigned long)>
c0012a21:	59                   	pop    ecx
c0012a22:	5b                   	pop    ebx
c0012a23:	50                   	push   eax
c0012a24:	68 b5 a7 02 c0       	push   0xc002a7b5
c0012a29:	e8 c8 03 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012a2e:	83 c4 10             	add    esp,0x10
c0012a31:	5b                   	pop    ebx
c0012a32:	5e                   	pop    esi
c0012a33:	5f                   	pop    edi
c0012a34:	e9 85 b2 00 00       	jmp    c001dcbe <unlockScheduler()>
c0012a39:	90                   	nop

c0012a3a <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a3a:	55                   	push   ebp
c0012a3b:	57                   	push   edi
c0012a3c:	56                   	push   esi
c0012a3d:	53                   	push   ebx
c0012a3e:	83 ec 18             	sub    esp,0x18
c0012a41:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0012a45:	68 cc a5 02 c0       	push   0xc002a5cc
c0012a4a:	e8 a7 03 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012a4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012a53:	5e                   	pop    esi
c0012a54:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012a5a:	5d                   	pop    ebp
c0012a5b:	53                   	push   ebx
c0012a5c:	57                   	push   edi
c0012a5d:	e8 ba f4 ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c0012a62:	5a                   	pop    edx
c0012a63:	89 c6                	mov    esi,eax
c0012a65:	59                   	pop    ecx
c0012a66:	ff 30                	push   DWORD PTR [eax]
c0012a68:	68 d3 a7 02 c0       	push   0xc002a7d3
c0012a6d:	e8 84 03 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012a72:	83 c4 10             	add    esp,0x10
c0012a75:	f7 06 00 04 00 00    	test   DWORD PTR [esi],0x400
c0012a7b:	75 0a                	jne    c0012a87 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c0012a7d:	83 c4 0c             	add    esp,0xc
c0012a80:	31 c0                	xor    eax,eax
c0012a82:	5b                   	pop    ebx
c0012a83:	5e                   	pop    esi
c0012a84:	5f                   	pop    edi
c0012a85:	5d                   	pop    ebp
c0012a86:	c3                   	ret    
c0012a87:	83 ec 0c             	sub    esp,0xc
c0012a8a:	68 e4 a7 02 c0       	push   0xc002a7e4
c0012a8f:	e8 62 03 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012a94:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012a96:	e8 42 d4 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012a9b:	c1 ed 0b             	shr    ebp,0xb
c0012a9e:	8b 16                	mov    edx,DWORD PTR [esi]
c0012aa0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aa6:	81 ca 01 08 00 00    	or     edx,0x801
c0012aac:	52                   	push   edx
c0012aad:	53                   	push   ebx
c0012aae:	50                   	push   eax
c0012aaf:	57                   	push   edi
c0012ab0:	e8 ed f7 ff ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012ab5:	83 c4 14             	add    esp,0x14
c0012ab8:	55                   	push   ebp
c0012ab9:	e8 90 f1 ff ff       	call   c0011c4e <Virt::swapIDToSector(unsigned long)>
c0012abe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ac1:	31 d2                	xor    edx,edx
c0012ac3:	ff 35 ac d3 02 c0    	push   DWORD PTR ds:0xc002d3ac
c0012ac9:	52                   	push   edx
c0012aca:	50                   	push   eax
c0012acb:	0f be 05 b8 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d3b8
c0012ad2:	ff 34 85 1c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16e4]
c0012ad9:	e8 28 3b 00 00       	call   c0016606 <LogicalDisk::read(unsigned long long, int, void*)>
c0012ade:	83 c4 14             	add    esp,0x14
c0012ae1:	55                   	push   ebp
c0012ae2:	e8 49 f1 ff ff       	call   c0011c30 <Virt::freeSwapfilePage(unsigned long)>
c0012ae7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012aea:	e8 5f f1 ff ff       	call   c0011c4e <Virt::swapIDToSector(unsigned long)>
c0012aef:	5a                   	pop    edx
c0012af0:	59                   	pop    ecx
c0012af1:	50                   	push   eax
c0012af2:	68 f8 a5 02 c0       	push   0xc002a5f8
c0012af7:	e8 fa 02 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012afc:	83 c4 10             	add    esp,0x10
c0012aff:	b0 01                	mov    al,0x1
c0012b01:	83 c4 0c             	add    esp,0xc
c0012b04:	5b                   	pop    ebx
c0012b05:	5e                   	pop    esi
c0012b06:	5f                   	pop    edi
c0012b07:	5d                   	pop    ebp
c0012b08:	c3                   	ret    
c0012b09:	90                   	nop

c0012b0a <VAS::scanForSwappable()>:
c0012b0a:	55                   	push   ebp
c0012b0b:	57                   	push   edi
c0012b0c:	31 ff                	xor    edi,edi
c0012b0e:	56                   	push   esi
c0012b0f:	53                   	push   ebx
c0012b10:	bb 00 00 40 00       	mov    ebx,0x400000
c0012b15:	83 ec 28             	sub    esp,0x28
c0012b18:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0012b1c:	68 18 a6 02 c0       	push   0xc002a618
c0012b21:	e8 d0 02 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b31:	eb 16                	jmp    c0012b49 <VAS::scanForSwappable()+0x3f>
c0012b33:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012b38:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b42:	3d 00 10 00 00       	cmp    eax,0x1000
c0012b47:	74 69                	je     c0012bb2 <VAS::scanForSwappable()+0xa8>
c0012b49:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b50:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012b54:	74 dd                	je     c0012b33 <VAS::scanForSwappable()+0x29>
c0012b56:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012b5c:	eb 0a                	jmp    c0012b68 <VAS::scanForSwappable()+0x5e>
c0012b5e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012b64:	39 eb                	cmp    ebx,ebp
c0012b66:	74 cb                	je     c0012b33 <VAS::scanForSwappable()+0x29>
c0012b68:	83 ec 08             	sub    esp,0x8
c0012b6b:	55                   	push   ebp
c0012b6c:	56                   	push   esi
c0012b6d:	e8 aa f3 ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b77:	89 c1                	mov    ecx,eax
c0012b79:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012b7f:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012b85:	75 d7                	jne    c0012b5e <VAS::scanForSwappable()+0x54>
c0012b87:	a8 01                	test   al,0x1
c0012b89:	74 14                	je     c0012b9f <VAS::scanForSwappable()+0x95>
c0012b8b:	83 ec 08             	sub    esp,0x8
c0012b8e:	47                   	inc    edi
c0012b8f:	55                   	push   ebp
c0012b90:	68 3c a6 02 c0       	push   0xc002a63c
c0012b95:	e8 5c 02 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	eb bf                	jmp    c0012b5e <VAS::scanForSwappable()+0x54>
c0012b9f:	83 ec 08             	sub    esp,0x8
c0012ba2:	55                   	push   ebp
c0012ba3:	68 68 a6 02 c0       	push   0xc002a668
c0012ba8:	e8 49 02 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	eb ac                	jmp    c0012b5e <VAS::scanForSwappable()+0x54>
c0012bb2:	83 ec 08             	sub    esp,0x8
c0012bb5:	57                   	push   edi
c0012bb6:	68 fc a7 02 c0       	push   0xc002a7fc
c0012bbb:	e8 36 02 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012bc0:	83 c4 2c             	add    esp,0x2c
c0012bc3:	5b                   	pop    ebx
c0012bc4:	5e                   	pop    esi
c0012bc5:	5f                   	pop    edi
c0012bc6:	5d                   	pop    ebp
c0012bc7:	c3                   	ret    

c0012bc8 <mapVASFirstTime>:
c0012bc8:	55                   	push   ebp
c0012bc9:	57                   	push   edi
c0012bca:	56                   	push   esi
c0012bcb:	53                   	push   ebx
c0012bcc:	83 ec 0c             	sub    esp,0xc
c0012bcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012bd7:	4a                   	dec    edx
c0012bd8:	0f 84 9a 00 00 00    	je     c0012c78 <mapVASFirstTime+0xb0>
c0012bde:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012be1:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012be4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012be9:	c1 e5 15             	shl    ebp,0x15
c0012bec:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012bf1:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012bf7:	29 eb                	sub    ebx,ebp
c0012bf9:	29 ee                	sub    esi,ebp
c0012bfb:	e8 dd d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012c00:	83 ec 0c             	sub    esp,0xc
c0012c03:	68 03 04 00 00       	push   0x403
c0012c08:	6a 01                	push   0x1
c0012c0a:	53                   	push   ebx
c0012c0b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c11:	50                   	push   eax
c0012c12:	57                   	push   edi
c0012c13:	e8 7e f9 ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c18:	83 c4 20             	add    esp,0x20
c0012c1b:	39 f3                	cmp    ebx,esi
c0012c1d:	75 dc                	jne    c0012bfb <mapVASFirstTime+0x33>
c0012c1f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c24:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c29:	29 ee                	sub    esi,ebp
c0012c2b:	29 e8                	sub    eax,ebp
c0012c2d:	89 c5                	mov    ebp,eax
c0012c2f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c33:	19 db                	sbb    ebx,ebx
c0012c35:	e8 a3 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012c3a:	83 e3 04             	and    ebx,0x4
c0012c3d:	83 ec 0c             	sub    esp,0xc
c0012c40:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c46:	53                   	push   ebx
c0012c47:	6a 01                	push   0x1
c0012c49:	56                   	push   esi
c0012c4a:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c50:	50                   	push   eax
c0012c51:	57                   	push   edi
c0012c52:	e8 3f f9 ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c57:	83 c4 20             	add    esp,0x20
c0012c5a:	39 f5                	cmp    ebp,esi
c0012c5c:	75 d1                	jne    c0012c2f <mapVASFirstTime+0x67>
c0012c5e:	0f 20 d8             	mov    eax,cr3
c0012c61:	0f 22 d8             	mov    cr3,eax
c0012c64:	83 ec 0c             	sub    esp,0xc
c0012c67:	57                   	push   edi
c0012c68:	e8 9d fe ff ff       	call   c0012b0a <VAS::scanForSwappable()>
c0012c6d:	83 c4 10             	add    esp,0x10
c0012c70:	83 c4 0c             	add    esp,0xc
c0012c73:	5b                   	pop    ebx
c0012c74:	5e                   	pop    esi
c0012c75:	5f                   	pop    edi
c0012c76:	5d                   	pop    ebp
c0012c77:	c3                   	ret    
c0012c78:	83 ec 0c             	sub    esp,0xc
c0012c7b:	68 11 a8 02 c0       	push   0xc002a811
c0012c80:	e8 71 01 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012c85:	83 c4 10             	add    esp,0x10
c0012c88:	83 c4 0c             	add    esp,0xc
c0012c8b:	5b                   	pop    ebx
c0012c8c:	5e                   	pop    esi
c0012c8d:	5f                   	pop    edi
c0012c8e:	5d                   	pop    ebp
c0012c8f:	c3                   	ret    

c0012c90 <__cxa_atexit>:
c0012c90:	31 c0                	xor    eax,eax
c0012c92:	c3                   	ret    

c0012c93 <__cxa_finalize>:
c0012c93:	c3                   	ret    

c0012c94 <__stack_chk_fail>:
c0012c94:	55                   	push   ebp
c0012c95:	89 e5                	mov    ebp,esp
c0012c97:	83 ec 14             	sub    esp,0x14
c0012c9a:	68 2a a8 02 c0       	push   0xc002a82a
c0012c9f:	e8 52 01 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012ca4:	58                   	pop    eax
c0012ca5:	5a                   	pop    edx
c0012ca6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012ca9:	68 7a a8 02 c0       	push   0xc002a87a
c0012cae:	e8 43 01 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012cb3:	59                   	pop    ecx
c0012cb4:	58                   	pop    eax
c0012cb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cb8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cbb:	68 7a a8 02 c0       	push   0xc002a87a
c0012cc0:	e8 31 01 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012cc5:	5a                   	pop    edx
c0012cc6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cc9:	59                   	pop    ecx
c0012cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ccc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ccf:	68 7a a8 02 c0       	push   0xc002a87a
c0012cd4:	e8 1d 01 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012cd9:	5a                   	pop    edx
c0012cda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cdd:	59                   	pop    ecx
c0012cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ce2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ce5:	68 7a a8 02 c0       	push   0xc002a87a
c0012cea:	e8 07 01 00 00       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0012cef:	c7 04 24 82 a8 02 c0 	mov    DWORD PTR [esp],0xc002a882
c0012cf6:	e8 9c 77 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0012cfb:	83 c4 10             	add    esp,0x10
c0012cfe:	c9                   	leave  
c0012cff:	c3                   	ret    

c0012d00 <__cxa_pure_virtual>:
c0012d00:	83 ec 18             	sub    esp,0x18
c0012d03:	68 9a a8 02 c0       	push   0xc002a89a
c0012d08:	e8 8a 77 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0012d0d:	83 c4 1c             	add    esp,0x1c
c0012d10:	c3                   	ret    

c0012d11 <operator new[](unsigned long)>:
c0012d11:	e9 2a cb ff ff       	jmp    c000f840 <malloc>

c0012d16 <operator delete(void*, unsigned long)>:
c0012d16:	e9 45 cb ff ff       	jmp    c000f860 <rfree>

c0012d1b <operator delete[](void*)>:
c0012d1b:	e9 40 cb ff ff       	jmp    c000f860 <rfree>

c0012d20 <operator delete[](void*, unsigned long)>:
c0012d20:	e9 3b cb ff ff       	jmp    c000f860 <rfree>

c0012d25 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d25:	57                   	push   edi
c0012d26:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d2b:	56                   	push   esi
c0012d2c:	be b0 a8 02 c0       	mov    esi,0xc002a8b0
c0012d31:	53                   	push   ebx
c0012d32:	83 ec 40             	sub    esp,0x40
c0012d35:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d39:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d3d:	fc                   	cld    
c0012d3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d40:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d44:	83 f9 3e             	cmp    ecx,0x3e
c0012d47:	7e 05                	jle    c0012d4e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d49:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d4e:	89 df                	mov    edi,ebx
c0012d50:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d54:	eb 02                	jmp    c0012d58 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d56:	89 c7                	mov    edi,eax
c0012d58:	31 d2                	xor    edx,edx
c0012d5a:	46                   	inc    esi
c0012d5b:	89 f8                	mov    eax,edi
c0012d5d:	f7 f1                	div    ecx
c0012d5f:	39 cf                	cmp    edi,ecx
c0012d61:	73 f3                	jae    c0012d56 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d63:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d66:	eb 02                	jmp    c0012d6a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d68:	89 c3                	mov    ebx,eax
c0012d6a:	31 d2                	xor    edx,edx
c0012d6c:	4e                   	dec    esi
c0012d6d:	89 d8                	mov    eax,ebx
c0012d6f:	f7 f1                	div    ecx
c0012d71:	39 cb                	cmp    ebx,ecx
c0012d73:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d77:	88 16                	mov    BYTE PTR [esi],dl
c0012d79:	73 ed                	jae    c0012d68 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d7b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d7f:	83 c4 40             	add    esp,0x40
c0012d82:	5b                   	pop    ebx
c0012d83:	5e                   	pop    esi
c0012d84:	5f                   	pop    edi
c0012d85:	c3                   	ret    

c0012d86 <Dbg::logc(char)>:
c0012d86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d8a:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d8f:	ec                   	in     al,dx
c0012d90:	a8 20                	test   al,0x20
c0012d92:	74 fb                	je     c0012d8f <Dbg::logc(char)+0x9>
c0012d94:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d99:	88 c8                	mov    al,cl
c0012d9b:	ee                   	out    dx,al
c0012d9c:	c3                   	ret    

c0012d9d <Dbg::logs(char*)>:
c0012d9d:	53                   	push   ebx
c0012d9e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012da2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012da5:	84 c0                	test   al,al
c0012da7:	74 0f                	je     c0012db8 <Dbg::logs(char*)+0x1b>
c0012da9:	50                   	push   eax
c0012daa:	43                   	inc    ebx
c0012dab:	e8 d6 ff ff ff       	call   c0012d86 <Dbg::logc(char)>
c0012db0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012db3:	5a                   	pop    edx
c0012db4:	84 c0                	test   al,al
c0012db6:	75 f1                	jne    c0012da9 <Dbg::logs(char*)+0xc>
c0012db8:	5b                   	pop    ebx
c0012db9:	c3                   	ret    

c0012dba <Dbg::logWriteInt(unsigned int)>:
c0012dba:	83 ec 10             	sub    esp,0x10
c0012dbd:	6a 0a                	push   0xa
c0012dbf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012dc3:	50                   	push   eax
c0012dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dc8:	e8 58 ff ff ff       	call   c0012d25 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012dcd:	50                   	push   eax
c0012dce:	e8 ca ff ff ff       	call   c0012d9d <Dbg::logs(char*)>
c0012dd3:	83 c4 20             	add    esp,0x20
c0012dd6:	c3                   	ret    

c0012dd7 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012dd7:	83 ec 10             	sub    esp,0x10
c0012dda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dde:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012de2:	50                   	push   eax
c0012de3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012de7:	e8 39 ff ff ff       	call   c0012d25 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012dec:	50                   	push   eax
c0012ded:	e8 ab ff ff ff       	call   c0012d9d <Dbg::logs(char*)>
c0012df2:	83 c4 20             	add    esp,0x20
c0012df5:	c3                   	ret    

c0012df6 <Dbg::kprintf(char const*, ...)>:
c0012df6:	55                   	push   ebp
c0012df7:	57                   	push   edi
c0012df8:	56                   	push   esi
c0012df9:	53                   	push   ebx
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e01:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e09:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e0c:	84 c0                	test   al,al
c0012e0e:	74 4a                	je     c0012e5a <Dbg::kprintf(char const*, ...)+0x64>
c0012e10:	31 db                	xor    ebx,ebx
c0012e12:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e15:	3c 25                	cmp    al,0x25
c0012e17:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e1a:	0f 85 e4 00 00 00    	jne    c0012f04 <Dbg::kprintf(char const*, ...)+0x10e>
c0012e20:	83 c3 02             	add    ebx,0x2
c0012e23:	8a 07                	mov    al,BYTE PTR [edi]
c0012e25:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e28:	83 e8 25             	sub    eax,0x25
c0012e2b:	3c 53                	cmp    al,0x53
c0012e2d:	0f 87 ba 00 00 00    	ja     c0012eed <Dbg::kprintf(char const*, ...)+0xf7>
c0012e33:	0f b6 c0             	movzx  eax,al
c0012e36:	ff 24 85 f0 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5710]
c0012e3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e41:	89 c8                	mov    eax,ecx
c0012e43:	83 c1 04             	add    ecx,0x4
c0012e46:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e4a:	ff 30                	push   DWORD PTR [eax]
c0012e4c:	e8 4c ff ff ff       	call   c0012d9d <Dbg::logs(char*)>
c0012e51:	58                   	pop    eax
c0012e52:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e56:	84 c0                	test   al,al
c0012e58:	75 b8                	jne    c0012e12 <Dbg::kprintf(char const*, ...)+0x1c>
c0012e5a:	83 c4 0c             	add    esp,0xc
c0012e5d:	5b                   	pop    ebx
c0012e5e:	5e                   	pop    esi
c0012e5f:	5f                   	pop    edi
c0012e60:	5d                   	pop    ebp
c0012e61:	c3                   	ret    
c0012e62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e66:	89 d0                	mov    eax,edx
c0012e68:	83 c2 04             	add    edx,0x4
c0012e6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e6f:	ff 30                	push   DWORD PTR [eax]
c0012e71:	e8 44 ff ff ff       	call   c0012dba <Dbg::logWriteInt(unsigned int)>
c0012e76:	58                   	pop    eax
c0012e77:	eb d9                	jmp    c0012e52 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e7d:	89 d0                	mov    eax,edx
c0012e7f:	83 c2 04             	add    edx,0x4
c0012e82:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e89:	50                   	push   eax
c0012e8a:	e8 f7 fe ff ff       	call   c0012d86 <Dbg::logc(char)>
c0012e8f:	58                   	pop    eax
c0012e90:	eb c0                	jmp    c0012e52 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e96:	89 c8                	mov    eax,ecx
c0012e98:	83 c1 04             	add    ecx,0x4
c0012e9b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e9f:	ff 30                	push   DWORD PTR [eax]
c0012ea1:	e8 14 ff ff ff       	call   c0012dba <Dbg::logWriteInt(unsigned int)>
c0012ea6:	5f                   	pop    edi
c0012ea7:	eb a9                	jmp    c0012e52 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ea9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ead:	89 c8                	mov    eax,ecx
c0012eaf:	83 c1 04             	add    ecx,0x4
c0012eb2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012eb6:	6a 10                	push   0x10
c0012eb8:	ff 30                	push   DWORD PTR [eax]
c0012eba:	e8 18 ff ff ff       	call   c0012dd7 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ebf:	59                   	pop    ecx
c0012ec0:	5f                   	pop    edi
c0012ec1:	eb 8f                	jmp    c0012e52 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ec3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ec7:	89 d0                	mov    eax,edx
c0012ec9:	83 c2 08             	add    edx,0x8
c0012ecc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ed0:	6a 10                	push   0x10
c0012ed2:	ff 30                	push   DWORD PTR [eax]
c0012ed4:	e8 fe fe ff ff       	call   c0012dd7 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ed9:	58                   	pop    eax
c0012eda:	5a                   	pop    edx
c0012edb:	e9 72 ff ff ff       	jmp    c0012e52 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee0:	6a 25                	push   0x25
c0012ee2:	e8 9f fe ff ff       	call   c0012d86 <Dbg::logc(char)>
c0012ee7:	58                   	pop    eax
c0012ee8:	e9 65 ff ff ff       	jmp    c0012e52 <Dbg::kprintf(char const*, ...)+0x5c>
c0012eed:	6a 25                	push   0x25
c0012eef:	e8 92 fe ff ff       	call   c0012d86 <Dbg::logc(char)>
c0012ef4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ef7:	50                   	push   eax
c0012ef8:	e8 89 fe ff ff       	call   c0012d86 <Dbg::logc(char)>
c0012efd:	5a                   	pop    edx
c0012efe:	59                   	pop    ecx
c0012eff:	e9 4e ff ff ff       	jmp    c0012e52 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f04:	50                   	push   eax
c0012f05:	89 eb                	mov    ebx,ebp
c0012f07:	e8 7a fe ff ff       	call   c0012d86 <Dbg::logc(char)>
c0012f0c:	89 fd                	mov    ebp,edi
c0012f0e:	58                   	pop    eax
c0012f0f:	e9 3e ff ff ff       	jmp    c0012e52 <Dbg::kprintf(char const*, ...)+0x5c>

c0012f14 <File::read(unsigned long long, void*, int*)>:
c0012f14:	53                   	push   ebx
c0012f15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f19:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f1d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f24:	3c 19                	cmp    al,0x19
c0012f26:	77 35                	ja     c0012f5d <File::read(unsigned long long, void*, int*)+0x49>
c0012f28:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0012f2f:	85 c0                	test   eax,eax
c0012f31:	74 2a                	je     c0012f5d <File::read(unsigned long long, void*, int*)+0x49>
c0012f33:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f39:	85 c0                	test   eax,eax
c0012f3b:	74 20                	je     c0012f5d <File::read(unsigned long long, void*, int*)+0x49>
c0012f3d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f41:	74 21                	je     c0012f64 <File::read(unsigned long long, void*, int*)+0x50>
c0012f43:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f49:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f57:	5b                   	pop    ebx
c0012f58:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f5b:	ff e0                	jmp    eax
c0012f5d:	b8 0b 00 00 00       	mov    eax,0xb
c0012f62:	eb 05                	jmp    c0012f69 <File::read(unsigned long long, void*, int*)+0x55>
c0012f64:	b8 05 00 00 00       	mov    eax,0x5
c0012f69:	5b                   	pop    ebx
c0012f6a:	c3                   	ret    
c0012f6b:	90                   	nop

c0012f6c <File::write(unsigned long long, void*, int*)>:
c0012f6c:	53                   	push   ebx
c0012f6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f75:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f7c:	3c 19                	cmp    al,0x19
c0012f7e:	77 35                	ja     c0012fb5 <File::write(unsigned long long, void*, int*)+0x49>
c0012f80:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0012f87:	85 c0                	test   eax,eax
c0012f89:	74 2a                	je     c0012fb5 <File::write(unsigned long long, void*, int*)+0x49>
c0012f8b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f91:	85 c0                	test   eax,eax
c0012f93:	74 20                	je     c0012fb5 <File::write(unsigned long long, void*, int*)+0x49>
c0012f95:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f99:	74 21                	je     c0012fbc <File::write(unsigned long long, void*, int*)+0x50>
c0012f9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fa1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012faf:	5b                   	pop    ebx
c0012fb0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012fb3:	ff e0                	jmp    eax
c0012fb5:	b8 0b 00 00 00       	mov    eax,0xb
c0012fba:	eb 05                	jmp    c0012fc1 <File::write(unsigned long long, void*, int*)+0x55>
c0012fbc:	b8 05 00 00 00       	mov    eax,0x5
c0012fc1:	5b                   	pop    ebx
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <Directory::read(unsigned long long, void*, int*)>:
c0012fc4:	53                   	push   ebx
c0012fc5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fc9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fcd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fd4:	3c 19                	cmp    al,0x19
c0012fd6:	77 35                	ja     c001300d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fd8:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0012fdf:	85 c0                	test   eax,eax
c0012fe1:	74 2a                	je     c001300d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fe3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fe9:	85 c0                	test   eax,eax
c0012feb:	74 20                	je     c001300d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ff1:	74 21                	je     c0013014 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ff3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ff5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ff9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013003:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013007:	5b                   	pop    ebx
c0013008:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001300b:	ff e0                	jmp    eax
c001300d:	b8 0b 00 00 00       	mov    eax,0xb
c0013012:	eb 05                	jmp    c0013019 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013014:	b8 05 00 00 00       	mov    eax,0x5
c0013019:	5b                   	pop    ebx
c001301a:	c3                   	ret    
c001301b:	90                   	nop

c001301c <Directory::write(unsigned long long, void*, int*)>:
c001301c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013020:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013027:	b8 0b 00 00 00       	mov    eax,0xb
c001302c:	80 fa 19             	cmp    dl,0x19
c001302f:	77 18                	ja     c0013049 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013031:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c0013038:	85 d2                	test   edx,edx
c001303a:	74 0d                	je     c0013049 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001303c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013043:	19 c0                	sbb    eax,eax
c0013045:	83 e0 0a             	and    eax,0xa
c0013048:	40                   	inc    eax
c0013049:	c3                   	ret    

c001304a <File::isAtty()>:
c001304a:	31 c0                	xor    eax,eax
c001304c:	c3                   	ret    
c001304d:	90                   	nop

c001304e <Directory::isAtty()>:
c001304e:	31 c0                	xor    eax,eax
c0013050:	c3                   	ret    
c0013051:	90                   	nop

c0013052 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013052:	b8 0a 00 00 00       	mov    eax,0xa
c0013057:	c3                   	ret    

c0013058 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013058:	b8 0a 00 00 00       	mov    eax,0xa
c001305d:	c3                   	ret    

c001305e <File::~File()>:
c001305e:	83 ec 0c             	sub    esp,0xc
c0013061:	ba ac aa 02 c0       	mov    edx,0xc002aaac
c0013066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306a:	89 10                	mov    DWORD PTR [eax],edx
c001306c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013070:	83 ec 0c             	sub    esp,0xc
c0013073:	50                   	push   eax
c0013074:	e8 45 e8 ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	90                   	nop
c001307d:	83 c4 0c             	add    esp,0xc
c0013080:	c3                   	ret    
c0013081:	90                   	nop

c0013082 <File::~File()>:
c0013082:	83 ec 0c             	sub    esp,0xc
c0013085:	83 ec 0c             	sub    esp,0xc
c0013088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001308c:	e8 cd ff ff ff       	call   c001305e <File::~File()>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	83 ec 08             	sub    esp,0x8
c0013097:	68 14 01 00 00       	push   0x114
c001309c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a0:	e8 71 fc ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	83 c4 0c             	add    esp,0xc
c00130ab:	c3                   	ret    

c00130ac <Directory::~Directory()>:
c00130ac:	83 ec 0c             	sub    esp,0xc
c00130af:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	89 10                	mov    DWORD PTR [eax],edx
c00130ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130be:	83 ec 0c             	sub    esp,0xc
c00130c1:	50                   	push   eax
c00130c2:	e8 f7 e7 ff ff       	call   c00118be <UnixFile::~UnixFile()>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	90                   	nop
c00130cb:	83 c4 0c             	add    esp,0xc
c00130ce:	c3                   	ret    
c00130cf:	90                   	nop

c00130d0 <Directory::~Directory()>:
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	83 ec 0c             	sub    esp,0xc
c00130d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130da:	e8 cd ff ff ff       	call   c00130ac <Directory::~Directory()>
c00130df:	83 c4 10             	add    esp,0x10
c00130e2:	83 ec 08             	sub    esp,0x8
c00130e5:	68 14 01 00 00       	push   0x114
c00130ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ee:	e8 23 fc ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	83 c4 0c             	add    esp,0xc
c00130f9:	c3                   	ret    

c00130fa <Filesystem::Filesystem()>:
c00130fa:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c00130ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013103:	89 10                	mov    DWORD PTR [eax],edx
c0013105:	8b 15 8c e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e58c
c001310b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001310f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013116:	a3 8c e5 02 c0       	mov    ds:0xc002e58c,eax
c001311b:	90                   	nop
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <Filesystem::~Filesystem()>:
c001311e:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c0013123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013127:	89 10                	mov    DWORD PTR [eax],edx
c0013129:	90                   	nop
c001312a:	c3                   	ret    
c001312b:	90                   	nop

c001312c <Filesystem::~Filesystem()>:
c001312c:	83 ec 0c             	sub    esp,0xc
c001312f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013133:	e8 e6 ff ff ff       	call   c001311e <Filesystem::~Filesystem()>
c0013138:	83 c4 04             	add    esp,0x4
c001313b:	83 ec 08             	sub    esp,0x8
c001313e:	6a 08                	push   0x8
c0013140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013144:	e8 cd fb ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	83 c4 0c             	add    esp,0xc
c001314f:	c3                   	ret    

c0013150 <Fs::getcwd(Process*, char*, int)>:
c0013150:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013154:	31 c0                	xor    eax,eax
c0013156:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013159:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001315d:	7d 15                	jge    c0013174 <Fs::getcwd(Process*, char*, int)+0x24>
c001315f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013163:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001316a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001316d:	84 c9                	test   cl,cl
c001316f:	74 06                	je     c0013177 <Fs::getcwd(Process*, char*, int)+0x27>
c0013171:	40                   	inc    eax
c0013172:	eb e2                	jmp    c0013156 <Fs::getcwd(Process*, char*, int)+0x6>
c0013174:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013177:	31 c0                	xor    eax,eax
c0013179:	c3                   	ret    

c001317a <Fs::initVFS()>:
c001317a:	83 ec 18             	sub    esp,0x18
c001317d:	6a 08                	push   0x8
c001317f:	e8 bc c6 ff ff       	call   c000f840 <malloc>
c0013184:	89 04 24             	mov    DWORD PTR [esp],eax
c0013187:	e8 a4 dc 00 00       	call   c0020e30 <FAT::FAT()>
c001318c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013193:	e8 a8 c6 ff ff       	call   c000f840 <malloc>
c0013198:	89 04 24             	mov    DWORD PTR [esp],eax
c001319b:	e8 e8 ee 00 00       	call   c0022088 <ISO9660::ISO9660()>
c00131a0:	83 c4 1c             	add    esp,0x1c
c00131a3:	c3                   	ret    

c00131a4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00131a4:	55                   	push   ebp
c00131a5:	57                   	push   edi
c00131a6:	56                   	push   esi
c00131a7:	53                   	push   ebx
c00131a8:	81 ec 10 04 00 00    	sub    esp,0x410
c00131ae:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00131b5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00131bc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00131c3:	68 00 04 00 00       	push   0x400
c00131c8:	6a 00                	push   0x0
c00131ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00131ce:	56                   	push   esi
c00131cf:	e8 a4 d5 fe ff       	call   c0000778 <memset>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00131db:	75 0b                	jne    c00131e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00131dd:	50                   	push   eax
c00131de:	50                   	push   eax
c00131df:	57                   	push   edi
c00131e0:	56                   	push   esi
c00131e1:	e8 4e d6 fe ff       	call   c0000834 <strcpy>
c00131e6:	eb 41                	jmp    c0013229 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00131e8:	8a 07                	mov    al,BYTE PTR [edi]
c00131ea:	3c 5c                	cmp    al,0x5c
c00131ec:	74 04                	je     c00131f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00131ee:	3c 2f                	cmp    al,0x2f
c00131f0:	75 18                	jne    c001320a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00131f2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00131f5:	3c 60                	cmp    al,0x60
c00131f7:	7e 03                	jle    c00131fc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00131f9:	83 e8 20             	sub    eax,0x20
c00131fc:	88 04 24             	mov    BYTE PTR [esp],al
c00131ff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013206:	50                   	push   eax
c0013207:	50                   	push   eax
c0013208:	eb 18                	jmp    c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001320a:	50                   	push   eax
c001320b:	50                   	push   eax
c001320c:	55                   	push   ebp
c001320d:	56                   	push   esi
c001320e:	e8 21 d6 fe ff       	call   c0000834 <strcpy>
c0013213:	5a                   	pop    edx
c0013214:	59                   	pop    ecx
c0013215:	68 e1 c1 02 c0       	push   0xc002c1e1
c001321a:	56                   	push   esi
c001321b:	e8 54 d7 fe ff       	call   c0000974 <strcat>
c0013220:	5d                   	pop    ebp
c0013221:	58                   	pop    eax
c0013222:	57                   	push   edi
c0013223:	56                   	push   esi
c0013224:	e8 4b d7 fe ff       	call   c0000974 <strcat>
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001322f:	3c 60                	cmp    al,0x60
c0013231:	7e 03                	jle    c0013236 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013233:	83 e8 20             	sub    eax,0x20
c0013236:	88 04 24             	mov    BYTE PTR [esp],al
c0013239:	88 03                	mov    BYTE PTR [ebx],al
c001323b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013242:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013248:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001324c:	bf 03 00 00 00       	mov    edi,0x3
c0013251:	b8 03 00 00 00       	mov    eax,0x3
c0013256:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013259:	84 d2                	test   dl,dl
c001325b:	0f 84 91 00 00 00    	je     c00132f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013261:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013264:	80 fa 5c             	cmp    dl,0x5c
c0013267:	74 05                	je     c001326e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013269:	80 fa 2f             	cmp    dl,0x2f
c001326c:	75 12                	jne    c0013280 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001326e:	89 c5                	mov    ebp,eax
c0013270:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013275:	74 09                	je     c0013280 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013277:	40                   	inc    eax
c0013278:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001327c:	89 cf                	mov    edi,ecx
c001327e:	eb d6                	jmp    c0013256 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013280:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013285:	75 5b                	jne    c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013287:	80 fa 2e             	cmp    dl,0x2e
c001328a:	75 56                	jne    c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001328c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013290:	74 19                	je     c00132ab <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013292:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013297:	74 53                	je     c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013299:	89 f9                	mov    ecx,edi
c001329b:	41                   	inc    ecx
c001329c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001329f:	80 fa 2f             	cmp    dl,0x2f
c00132a2:	74 f7                	je     c001329b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132a4:	80 fa 5c             	cmp    dl,0x5c
c00132a7:	74 f2                	je     c001329b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132a9:	eb d1                	jmp    c001327c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132ab:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132b0:	74 3a                	je     c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132b2:	83 f8 03             	cmp    eax,0x3
c00132b5:	74 c5                	je     c001327c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132b7:	41                   	inc    ecx
c00132b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00132bb:	80 fa 2f             	cmp    dl,0x2f
c00132be:	74 f7                	je     c00132b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00132c0:	80 fa 5c             	cmp    dl,0x5c
c00132c3:	74 f2                	je     c00132b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00132c5:	48                   	dec    eax
c00132c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132ca:	75 06                	jne    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132d0:	eb f3                	jmp    c00132c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00132d2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132d6:	74 07                	je     c00132df <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00132d8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132dc:	48                   	dec    eax
c00132dd:	eb f3                	jmp    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132df:	40                   	inc    eax
c00132e0:	eb 9a                	jmp    c001327c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132e2:	80 fa 2f             	cmp    dl,0x2f
c00132e5:	74 95                	je     c001327c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132e7:	80 fa 5c             	cmp    dl,0x5c
c00132ea:	74 90                	je     c001327c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132ec:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00132ef:	40                   	inc    eax
c00132f0:	eb 8a                	jmp    c001327c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132f6:	83 ec 0c             	sub    esp,0xc
c00132f9:	53                   	push   ebx
c00132fa:	e8 95 d4 fe ff       	call   c0000794 <strlen>
c00132ff:	83 c4 10             	add    esp,0x10
c0013302:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013307:	75 26                	jne    c001332f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013309:	83 ec 0c             	sub    esp,0xc
c001330c:	53                   	push   ebx
c001330d:	e8 82 d4 fe ff       	call   c0000794 <strlen>
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001331a:	74 26                	je     c0013342 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001331c:	83 ec 0c             	sub    esp,0xc
c001331f:	53                   	push   ebx
c0013320:	e8 6f d4 fe ff       	call   c0000794 <strlen>
c0013325:	83 c4 10             	add    esp,0x10
c0013328:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001332d:	eb c7                	jmp    c00132f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001332f:	83 ec 0c             	sub    esp,0xc
c0013332:	53                   	push   ebx
c0013333:	e8 5c d4 fe ff       	call   c0000794 <strlen>
c0013338:	83 c4 10             	add    esp,0x10
c001333b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013340:	74 c7                	je     c0013309 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013342:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013348:	5b                   	pop    ebx
c0013349:	5e                   	pop    esi
c001334a:	5f                   	pop    edi
c001334b:	5d                   	pop    ebp
c001334c:	c3                   	ret    
c001334d:	90                   	nop

c001334e <File::File(char const*, Process*)>:
c001334e:	83 ec 0c             	sub    esp,0xc
c0013351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013355:	83 ec 08             	sub    esp,0x8
c0013358:	6a 00                	push   0x0
c001335a:	50                   	push   eax
c001335b:	e8 7c e3 ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c0013360:	83 c4 10             	add    esp,0x10
c0013363:	ba ac aa 02 c0       	mov    edx,0xc002aaac
c0013368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001336c:	89 10                	mov    DWORD PTR [eax],edx
c001336e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013372:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337c:	83 c0 0d             	add    eax,0xd
c001337f:	83 ec 04             	sub    esp,0x4
c0013382:	52                   	push   edx
c0013383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013387:	50                   	push   eax
c0013388:	e8 17 fe ff ff       	call   c00131a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013394:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013397:	8d 50 bf             	lea    edx,[eax-0x41]
c001339a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001339e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00133a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00133ac:	90                   	nop
c00133ad:	83 c4 0c             	add    esp,0xc
c00133b0:	c3                   	ret    
c00133b1:	90                   	nop

c00133b2 <File::open(FileOpenMode)>:
c00133b2:	53                   	push   ebx
c00133b3:	b8 0b 00 00 00       	mov    eax,0xb
c00133b8:	83 ec 08             	sub    esp,0x8
c00133bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00133c6:	80 fa 19             	cmp    dl,0x19
c00133c9:	77 40                	ja     c001340b <File::open(FileOpenMode)+0x59>
c00133cb:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c00133d2:	85 d2                	test   edx,edx
c00133d4:	74 35                	je     c001340b <File::open(FileOpenMode)+0x59>
c00133d6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00133dc:	85 d2                	test   edx,edx
c00133de:	74 2b                	je     c001340b <File::open(FileOpenMode)+0x59>
c00133e0:	b8 06 00 00 00       	mov    eax,0x6
c00133e5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133e9:	75 20                	jne    c001340b <File::open(FileOpenMode)+0x59>
c00133eb:	8b 02                	mov    eax,DWORD PTR [edx]
c00133ed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133f7:	51                   	push   ecx
c00133f8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133fb:	51                   	push   ecx
c00133fc:	52                   	push   edx
c00133fd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013400:	83 c4 10             	add    esp,0x10
c0013403:	85 c0                	test   eax,eax
c0013405:	75 04                	jne    c001340b <File::open(FileOpenMode)+0x59>
c0013407:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001340b:	83 c4 08             	add    esp,0x8
c001340e:	5b                   	pop    ebx
c001340f:	c3                   	ret    

c0013410 <File::close()>:
c0013410:	53                   	push   ebx
c0013411:	b8 0b 00 00 00       	mov    eax,0xb
c0013416:	83 ec 08             	sub    esp,0x8
c0013419:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001341d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013424:	80 fa 19             	cmp    dl,0x19
c0013427:	77 41                	ja     c001346a <File::close()+0x5a>
c0013429:	8b 1c 95 20 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd15e0]
c0013430:	85 db                	test   ebx,ebx
c0013432:	74 36                	je     c001346a <File::close()+0x5a>
c0013434:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001343b:	74 2d                	je     c001346a <File::close()+0x5a>
c001343d:	b8 05 00 00 00       	mov    eax,0x5
c0013442:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013446:	74 22                	je     c001346a <File::close()+0x5a>
c0013448:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001344c:	8b 04 95 20 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15e0]
c0013453:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013459:	53                   	push   ebx
c001345a:	53                   	push   ebx
c001345b:	8b 10                	mov    edx,DWORD PTR [eax]
c001345d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013463:	50                   	push   eax
c0013464:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013467:	83 c4 10             	add    esp,0x10
c001346a:	83 c4 08             	add    esp,0x8
c001346d:	5b                   	pop    ebx
c001346e:	c3                   	ret    
c001346f:	90                   	nop

c0013470 <File::seek(unsigned long long)>:
c0013470:	56                   	push   esi
c0013471:	53                   	push   ebx
c0013472:	b8 0b 00 00 00       	mov    eax,0xb
c0013477:	51                   	push   ecx
c0013478:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001347c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013480:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013487:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001348b:	80 fa 19             	cmp    dl,0x19
c001348e:	77 31                	ja     c00134c1 <File::seek(unsigned long long)+0x51>
c0013490:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c0013497:	85 d2                	test   edx,edx
c0013499:	74 26                	je     c00134c1 <File::seek(unsigned long long)+0x51>
c001349b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134a1:	85 d2                	test   edx,edx
c00134a3:	74 1c                	je     c00134c1 <File::seek(unsigned long long)+0x51>
c00134a5:	b8 05 00 00 00       	mov    eax,0x5
c00134aa:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00134ae:	74 11                	je     c00134c1 <File::seek(unsigned long long)+0x51>
c00134b0:	8b 02                	mov    eax,DWORD PTR [edx]
c00134b2:	53                   	push   ebx
c00134b3:	51                   	push   ecx
c00134b4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00134ba:	52                   	push   edx
c00134bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134be:	83 c4 10             	add    esp,0x10
c00134c1:	5a                   	pop    edx
c00134c2:	5b                   	pop    ebx
c00134c3:	5e                   	pop    esi
c00134c4:	c3                   	ret    
c00134c5:	90                   	nop

c00134c6 <File::tell(unsigned long long*)>:
c00134c6:	83 ec 0c             	sub    esp,0xc
c00134c9:	b8 0b 00 00 00       	mov    eax,0xb
c00134ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134d2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134d9:	80 fa 19             	cmp    dl,0x19
c00134dc:	77 34                	ja     c0013512 <File::tell(unsigned long long*)+0x4c>
c00134de:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c00134e5:	85 d2                	test   edx,edx
c00134e7:	74 29                	je     c0013512 <File::tell(unsigned long long*)+0x4c>
c00134e9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134ef:	85 d2                	test   edx,edx
c00134f1:	74 1f                	je     c0013512 <File::tell(unsigned long long*)+0x4c>
c00134f3:	b8 05 00 00 00       	mov    eax,0x5
c00134f8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134fc:	74 14                	je     c0013512 <File::tell(unsigned long long*)+0x4c>
c00134fe:	50                   	push   eax
c00134ff:	8b 02                	mov    eax,DWORD PTR [edx]
c0013501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013505:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001350b:	52                   	push   edx
c001350c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	83 c4 0c             	add    esp,0xc
c0013515:	c3                   	ret    

c0013516 <File::rewind()>:
c0013516:	83 ec 10             	sub    esp,0x10
c0013519:	6a 00                	push   0x0
c001351b:	6a 00                	push   0x0
c001351d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013521:	e8 4a ff ff ff       	call   c0013470 <File::seek(unsigned long long)>
c0013526:	83 c4 1c             	add    esp,0x1c
c0013529:	c3                   	ret    

c001352a <File::unlink()>:
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	b8 0b 00 00 00       	mov    eax,0xb
c0013532:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013536:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001353d:	80 f9 19             	cmp    cl,0x19
c0013540:	77 2f                	ja     c0013571 <File::unlink()+0x47>
c0013542:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013549:	85 c9                	test   ecx,ecx
c001354b:	74 24                	je     c0013571 <File::unlink()+0x47>
c001354d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013553:	85 c9                	test   ecx,ecx
c0013555:	74 1a                	je     c0013571 <File::unlink()+0x47>
c0013557:	b8 06 00 00 00       	mov    eax,0x6
c001355c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013560:	75 0f                	jne    c0013571 <File::unlink()+0x47>
c0013562:	83 c2 0d             	add    edx,0xd
c0013565:	50                   	push   eax
c0013566:	50                   	push   eax
c0013567:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013569:	52                   	push   edx
c001356a:	51                   	push   ecx
c001356b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001356e:	83 c4 10             	add    esp,0x10
c0013571:	83 c4 0c             	add    esp,0xc
c0013574:	c3                   	ret    
c0013575:	90                   	nop

c0013576 <File::rename(char const*)>:
c0013576:	83 ec 0c             	sub    esp,0xc
c0013579:	b8 0b 00 00 00       	mov    eax,0xb
c001357e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013582:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013589:	80 f9 19             	cmp    cl,0x19
c001358c:	77 32                	ja     c00135c0 <File::rename(char const*)+0x4a>
c001358e:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013595:	85 c9                	test   ecx,ecx
c0013597:	74 27                	je     c00135c0 <File::rename(char const*)+0x4a>
c0013599:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001359f:	85 c9                	test   ecx,ecx
c00135a1:	74 1d                	je     c00135c0 <File::rename(char const*)+0x4a>
c00135a3:	b8 06 00 00 00       	mov    eax,0x6
c00135a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135ac:	75 12                	jne    c00135c0 <File::rename(char const*)+0x4a>
c00135ae:	83 c2 0d             	add    edx,0xd
c00135b1:	50                   	push   eax
c00135b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135b8:	52                   	push   edx
c00135b9:	51                   	push   ecx
c00135ba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00135bd:	83 c4 10             	add    esp,0x10
c00135c0:	83 c4 0c             	add    esp,0xc
c00135c3:	c3                   	ret    

c00135c4 <File::chfatattr(unsigned char, unsigned char)>:
c00135c4:	57                   	push   edi
c00135c5:	b8 0b 00 00 00       	mov    eax,0xb
c00135ca:	56                   	push   esi
c00135cb:	53                   	push   ebx
c00135cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135df:	80 f9 19             	cmp    cl,0x19
c00135e2:	77 37                	ja     c001361b <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135e4:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c00135eb:	85 c9                	test   ecx,ecx
c00135ed:	74 2c                	je     c001361b <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135ef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135f5:	85 c9                	test   ecx,ecx
c00135f7:	74 22                	je     c001361b <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135f9:	b8 06 00 00 00       	mov    eax,0x6
c00135fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013602:	75 17                	jne    c001361b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013604:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013606:	89 f0                	mov    eax,esi
c0013608:	83 c2 0d             	add    edx,0xd
c001360b:	0f b6 f0             	movzx  esi,al
c001360e:	0f b6 db             	movzx  ebx,bl
c0013611:	56                   	push   esi
c0013612:	53                   	push   ebx
c0013613:	52                   	push   edx
c0013614:	51                   	push   ecx
c0013615:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013618:	83 c4 10             	add    esp,0x10
c001361b:	5b                   	pop    ebx
c001361c:	5e                   	pop    esi
c001361d:	5f                   	pop    edi
c001361e:	c3                   	ret    
c001361f:	90                   	nop

c0013620 <File::exists()>:
c0013620:	83 ec 0c             	sub    esp,0xc
c0013623:	31 c0                	xor    eax,eax
c0013625:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013629:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013630:	80 f9 19             	cmp    cl,0x19
c0013633:	77 24                	ja     c0013659 <File::exists()+0x39>
c0013635:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c001363c:	85 c9                	test   ecx,ecx
c001363e:	74 19                	je     c0013659 <File::exists()+0x39>
c0013640:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013646:	85 c9                	test   ecx,ecx
c0013648:	74 0f                	je     c0013659 <File::exists()+0x39>
c001364a:	83 c2 0d             	add    edx,0xd
c001364d:	50                   	push   eax
c001364e:	50                   	push   eax
c001364f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013651:	52                   	push   edx
c0013652:	51                   	push   ecx
c0013653:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013656:	83 c4 10             	add    esp,0x10
c0013659:	83 c4 0c             	add    esp,0xc
c001365c:	c3                   	ret    
c001365d:	90                   	nop

c001365e <File::stat(unsigned long long*, bool*)>:
c001365e:	56                   	push   esi
c001365f:	53                   	push   ebx
c0013660:	50                   	push   eax
c0013661:	b8 0b 00 00 00       	mov    eax,0xb
c0013666:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001366a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001366e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013675:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013679:	80 f9 19             	cmp    cl,0x19
c001367c:	77 3d                	ja     c00136bb <File::stat(unsigned long long*, bool*)+0x5d>
c001367e:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013685:	85 c9                	test   ecx,ecx
c0013687:	74 32                	je     c00136bb <File::stat(unsigned long long*, bool*)+0x5d>
c0013689:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001368f:	85 c9                	test   ecx,ecx
c0013691:	74 28                	je     c00136bb <File::stat(unsigned long long*, bool*)+0x5d>
c0013693:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013695:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013699:	74 13                	je     c00136ae <File::stat(unsigned long long*, bool*)+0x50>
c001369b:	83 ec 04             	sub    esp,0x4
c001369e:	56                   	push   esi
c001369f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00136a5:	51                   	push   ecx
c00136a6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00136a9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00136ac:	eb 0a                	jmp    c00136b8 <File::stat(unsigned long long*, bool*)+0x5a>
c00136ae:	53                   	push   ebx
c00136af:	83 c2 0d             	add    edx,0xd
c00136b2:	56                   	push   esi
c00136b3:	52                   	push   edx
c00136b4:	51                   	push   ecx
c00136b5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	5a                   	pop    edx
c00136bc:	5b                   	pop    ebx
c00136bd:	5e                   	pop    esi
c00136be:	c3                   	ret    

c00136bf <Fs::setcwd(Process*, char*)>:
c00136bf:	55                   	push   ebp
c00136c0:	57                   	push   edi
c00136c1:	56                   	push   esi
c00136c2:	53                   	push   ebx
c00136c3:	81 ec 20 02 00 00    	sub    esp,0x220
c00136c9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00136d0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00136d6:	57                   	push   edi
c00136d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00136de:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00136e2:	56                   	push   esi
c00136e3:	e8 bc fa ff ff       	call   c00131a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00136e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00136eb:	e8 a4 d0 fe ff       	call   c0000794 <strlen>
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	83 f8 02             	cmp    eax,0x2
c00136f6:	77 17                	ja     c001370f <Fs::setcwd(Process*, char*)+0x50>
c00136f8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136fd:	83 e8 41             	sub    eax,0x41
c0013700:	83 f8 19             	cmp    eax,0x19
c0013703:	76 24                	jbe    c0013729 <Fs::setcwd(Process*, char*)+0x6a>
c0013705:	b8 03 00 00 00       	mov    eax,0x3
c001370a:	e9 e0 00 00 00       	jmp    c00137ef <Fs::setcwd(Process*, char*)+0x130>
c001370f:	83 ec 0c             	sub    esp,0xc
c0013712:	56                   	push   esi
c0013713:	e8 7c d0 fe ff       	call   c0000794 <strlen>
c0013718:	83 c4 10             	add    esp,0x10
c001371b:	83 f8 03             	cmp    eax,0x3
c001371e:	75 34                	jne    c0013754 <Fs::setcwd(Process*, char*)+0x95>
c0013720:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013725:	75 2d                	jne    c0013754 <Fs::setcwd(Process*, char*)+0x95>
c0013727:	eb cf                	jmp    c00136f8 <Fs::setcwd(Process*, char*)+0x39>
c0013729:	8b 14 85 20 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15e0]
c0013730:	b8 05 00 00 00       	mov    eax,0x5
c0013735:	85 d2                	test   edx,edx
c0013737:	0f 84 b2 00 00 00    	je     c00137ef <Fs::setcwd(Process*, char*)+0x130>
c001373d:	b8 06 00 00 00       	mov    eax,0x6
c0013742:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013749:	0f 85 92 00 00 00    	jne    c00137e1 <Fs::setcwd(Process*, char*)+0x122>
c001374f:	e9 9b 00 00 00       	jmp    c00137ef <Fs::setcwd(Process*, char*)+0x130>
c0013754:	83 ec 0c             	sub    esp,0xc
c0013757:	68 14 01 00 00       	push   0x114
c001375c:	e8 df c0 ff ff       	call   c000f840 <malloc>
c0013761:	83 c4 0c             	add    esp,0xc
c0013764:	89 c3                	mov    ebx,eax
c0013766:	55                   	push   ebp
c0013767:	56                   	push   esi
c0013768:	50                   	push   eax
c0013769:	e8 e0 fb ff ff       	call   c001334e <File::File(char const*, Process*)>
c001376e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013773:	83 c4 0c             	add    esp,0xc
c0013776:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001377a:	50                   	push   eax
c001377b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001377f:	50                   	push   eax
c0013780:	53                   	push   ebx
c0013781:	e8 d8 fe ff ff       	call   c001365e <File::stat(unsigned long long*, bool*)>
c0013786:	83 c4 10             	add    esp,0x10
c0013789:	83 f8 02             	cmp    eax,0x2
c001378c:	74 04                	je     c0013792 <Fs::setcwd(Process*, char*)+0xd3>
c001378e:	85 c0                	test   eax,eax
c0013790:	74 1c                	je     c00137ae <Fs::setcwd(Process*, char*)+0xef>
c0013792:	b8 01 00 00 00       	mov    eax,0x1
c0013797:	85 db                	test   ebx,ebx
c0013799:	74 54                	je     c00137ef <Fs::setcwd(Process*, char*)+0x130>
c001379b:	83 ec 0c             	sub    esp,0xc
c001379e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137a0:	53                   	push   ebx
c00137a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	b8 01 00 00 00       	mov    eax,0x1
c00137ac:	eb 41                	jmp    c00137ef <Fs::setcwd(Process*, char*)+0x130>
c00137ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00137b3:	75 1c                	jne    c00137d1 <Fs::setcwd(Process*, char*)+0x112>
c00137b5:	b8 02 00 00 00       	mov    eax,0x2
c00137ba:	85 db                	test   ebx,ebx
c00137bc:	74 31                	je     c00137ef <Fs::setcwd(Process*, char*)+0x130>
c00137be:	83 ec 0c             	sub    esp,0xc
c00137c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137c3:	53                   	push   ebx
c00137c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137c7:	83 c4 10             	add    esp,0x10
c00137ca:	b8 02 00 00 00       	mov    eax,0x2
c00137cf:	eb 1e                	jmp    c00137ef <Fs::setcwd(Process*, char*)+0x130>
c00137d1:	85 db                	test   ebx,ebx
c00137d3:	74 0c                	je     c00137e1 <Fs::setcwd(Process*, char*)+0x122>
c00137d5:	83 ec 0c             	sub    esp,0xc
c00137d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137da:	53                   	push   ebx
c00137db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137de:	83 c4 10             	add    esp,0x10
c00137e1:	50                   	push   eax
c00137e2:	50                   	push   eax
c00137e3:	56                   	push   esi
c00137e4:	57                   	push   edi
c00137e5:	e8 4a d0 fe ff       	call   c0000834 <strcpy>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	31 c0                	xor    eax,eax
c00137ef:	81 c4 1c 02 00 00    	add    esp,0x21c
c00137f5:	5b                   	pop    ebx
c00137f6:	5e                   	pop    esi
c00137f7:	5f                   	pop    edi
c00137f8:	5d                   	pop    ebp
c00137f9:	c3                   	ret    

c00137fa <Directory::Directory(char const*, Process*)>:
c00137fa:	83 ec 0c             	sub    esp,0xc
c00137fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013801:	83 ec 08             	sub    esp,0x8
c0013804:	6a 00                	push   0x0
c0013806:	50                   	push   eax
c0013807:	e8 d0 de ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c0013814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013818:	89 10                	mov    DWORD PTR [eax],edx
c001381a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001381e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013828:	83 c0 0d             	add    eax,0xd
c001382b:	83 ec 04             	sub    esp,0x4
c001382e:	52                   	push   edx
c001382f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013833:	50                   	push   eax
c0013834:	e8 6b f9 ff ff       	call   c00131a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013839:	83 c4 10             	add    esp,0x10
c001383c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013840:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013843:	8d 50 bf             	lea    edx,[eax-0x41]
c0013846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013854:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013858:	90                   	nop
c0013859:	83 c4 0c             	add    esp,0xc
c001385c:	c3                   	ret    
c001385d:	90                   	nop

c001385e <Directory::open()>:
c001385e:	53                   	push   ebx
c001385f:	b8 0b 00 00 00       	mov    eax,0xb
c0013864:	83 ec 08             	sub    esp,0x8
c0013867:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001386b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013872:	80 fa 19             	cmp    dl,0x19
c0013875:	77 3d                	ja     c00138b4 <Directory::open()+0x56>
c0013877:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c001387e:	85 d2                	test   edx,edx
c0013880:	74 32                	je     c00138b4 <Directory::open()+0x56>
c0013882:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013888:	85 d2                	test   edx,edx
c001388a:	74 28                	je     c00138b4 <Directory::open()+0x56>
c001388c:	b8 06 00 00 00       	mov    eax,0x6
c0013891:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013895:	75 1d                	jne    c00138b4 <Directory::open()+0x56>
c0013897:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001389d:	50                   	push   eax
c001389e:	8b 02                	mov    eax,DWORD PTR [edx]
c00138a0:	51                   	push   ecx
c00138a1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00138a4:	51                   	push   ecx
c00138a5:	52                   	push   edx
c00138a6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00138a9:	83 c4 10             	add    esp,0x10
c00138ac:	85 c0                	test   eax,eax
c00138ae:	75 04                	jne    c00138b4 <Directory::open()+0x56>
c00138b0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00138b4:	83 c4 08             	add    esp,0x8
c00138b7:	5b                   	pop    ebx
c00138b8:	c3                   	ret    
c00138b9:	90                   	nop

c00138ba <Directory::close()>:
c00138ba:	53                   	push   ebx
c00138bb:	b8 0b 00 00 00       	mov    eax,0xb
c00138c0:	83 ec 08             	sub    esp,0x8
c00138c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138c7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00138ce:	80 fa 19             	cmp    dl,0x19
c00138d1:	77 41                	ja     c0013914 <Directory::close()+0x5a>
c00138d3:	8b 1c 95 20 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd15e0]
c00138da:	85 db                	test   ebx,ebx
c00138dc:	74 36                	je     c0013914 <Directory::close()+0x5a>
c00138de:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00138e5:	74 2d                	je     c0013914 <Directory::close()+0x5a>
c00138e7:	b8 05 00 00 00       	mov    eax,0x5
c00138ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138f0:	74 22                	je     c0013914 <Directory::close()+0x5a>
c00138f2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138f6:	8b 04 95 20 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15e0]
c00138fd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013903:	53                   	push   ebx
c0013904:	53                   	push   ebx
c0013905:	8b 10                	mov    edx,DWORD PTR [eax]
c0013907:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001390d:	50                   	push   eax
c001390e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013911:	83 c4 10             	add    esp,0x10
c0013914:	83 c4 08             	add    esp,0x8
c0013917:	5b                   	pop    ebx
c0013918:	c3                   	ret    
c0013919:	90                   	nop

c001391a <Directory::unlink()>:
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	b8 0b 00 00 00       	mov    eax,0xb
c0013922:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013926:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001392d:	80 f9 19             	cmp    cl,0x19
c0013930:	77 2f                	ja     c0013961 <Directory::unlink()+0x47>
c0013932:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013939:	85 c9                	test   ecx,ecx
c001393b:	74 24                	je     c0013961 <Directory::unlink()+0x47>
c001393d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013943:	85 c9                	test   ecx,ecx
c0013945:	74 1a                	je     c0013961 <Directory::unlink()+0x47>
c0013947:	b8 06 00 00 00       	mov    eax,0x6
c001394c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013950:	75 0f                	jne    c0013961 <Directory::unlink()+0x47>
c0013952:	83 c2 0d             	add    edx,0xd
c0013955:	50                   	push   eax
c0013956:	50                   	push   eax
c0013957:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013959:	52                   	push   edx
c001395a:	51                   	push   ecx
c001395b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	83 c4 0c             	add    esp,0xc
c0013964:	c3                   	ret    
c0013965:	90                   	nop

c0013966 <Directory::rename(char const*)>:
c0013966:	83 ec 0c             	sub    esp,0xc
c0013969:	b8 0b 00 00 00       	mov    eax,0xb
c001396e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013972:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013979:	80 f9 19             	cmp    cl,0x19
c001397c:	77 32                	ja     c00139b0 <Directory::rename(char const*)+0x4a>
c001397e:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013985:	85 c9                	test   ecx,ecx
c0013987:	74 27                	je     c00139b0 <Directory::rename(char const*)+0x4a>
c0013989:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001398f:	85 c9                	test   ecx,ecx
c0013991:	74 1d                	je     c00139b0 <Directory::rename(char const*)+0x4a>
c0013993:	b8 06 00 00 00       	mov    eax,0x6
c0013998:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001399c:	75 12                	jne    c00139b0 <Directory::rename(char const*)+0x4a>
c001399e:	83 c2 0d             	add    edx,0xd
c00139a1:	50                   	push   eax
c00139a2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139a8:	52                   	push   edx
c00139a9:	51                   	push   ecx
c00139aa:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	83 c4 0c             	add    esp,0xc
c00139b3:	c3                   	ret    

c00139b4 <Directory::exists()>:
c00139b4:	83 ec 0c             	sub    esp,0xc
c00139b7:	31 c0                	xor    eax,eax
c00139b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139bd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139c4:	80 f9 19             	cmp    cl,0x19
c00139c7:	77 24                	ja     c00139ed <Directory::exists()+0x39>
c00139c9:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c00139d0:	85 c9                	test   ecx,ecx
c00139d2:	74 19                	je     c00139ed <Directory::exists()+0x39>
c00139d4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139da:	85 c9                	test   ecx,ecx
c00139dc:	74 0f                	je     c00139ed <Directory::exists()+0x39>
c00139de:	83 c2 0d             	add    edx,0xd
c00139e1:	50                   	push   eax
c00139e2:	50                   	push   eax
c00139e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139e5:	52                   	push   edx
c00139e6:	51                   	push   ecx
c00139e7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00139ea:	83 c4 10             	add    esp,0x10
c00139ed:	83 c4 0c             	add    esp,0xc
c00139f0:	c3                   	ret    
c00139f1:	90                   	nop

c00139f2 <Directory::read(dirent*)>:
c00139f2:	83 ec 1c             	sub    esp,0x1c
c00139f5:	b8 0b 00 00 00       	mov    eax,0xb
c00139fa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139fe:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a05:	80 fa 19             	cmp    dl,0x19
c0013a08:	77 30                	ja     c0013a3a <Directory::read(dirent*)+0x48>
c0013a0a:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c0013a11:	85 d2                	test   edx,edx
c0013a13:	74 25                	je     c0013a3a <Directory::read(dirent*)+0x48>
c0013a15:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a1c:	74 1c                	je     c0013a3a <Directory::read(dirent*)+0x48>
c0013a1e:	83 ec 0c             	sub    esp,0xc
c0013a21:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a23:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a27:	52                   	push   edx
c0013a28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a2c:	6a 00                	push   0x0
c0013a2e:	68 10 01 00 00       	push   0x110
c0013a33:	51                   	push   ecx
c0013a34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a37:	83 c4 20             	add    esp,0x20
c0013a3a:	83 c4 1c             	add    esp,0x1c
c0013a3d:	c3                   	ret    

c0013a3e <Directory::create()>:
c0013a3e:	83 ec 0c             	sub    esp,0xc
c0013a41:	b8 0b 00 00 00       	mov    eax,0xb
c0013a46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a51:	80 f9 19             	cmp    cl,0x19
c0013a54:	77 2f                	ja     c0013a85 <Directory::create()+0x47>
c0013a56:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013a5d:	85 c9                	test   ecx,ecx
c0013a5f:	74 24                	je     c0013a85 <Directory::create()+0x47>
c0013a61:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a67:	85 c9                	test   ecx,ecx
c0013a69:	74 1a                	je     c0013a85 <Directory::create()+0x47>
c0013a6b:	b8 06 00 00 00       	mov    eax,0x6
c0013a70:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a74:	75 0f                	jne    c0013a85 <Directory::create()+0x47>
c0013a76:	83 c2 0d             	add    edx,0xd
c0013a79:	50                   	push   eax
c0013a7a:	50                   	push   eax
c0013a7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a7d:	52                   	push   edx
c0013a7e:	51                   	push   ecx
c0013a7f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	83 c4 0c             	add    esp,0xc
c0013a88:	c3                   	ret    
c0013a89:	90                   	nop

c0013a8a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a8a:	b8 0a 00 00 00       	mov    eax,0xa
c0013a8f:	c3                   	ret    

c0013a90 <Bus::Bus(char const*)>:
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a97:	83 ec 08             	sub    esp,0x8
c0013a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a9e:	50                   	push   eax
c0013a9f:	e8 68 09 00 00       	call   c001440c <Device::Device(char const*)>
c0013aa4:	83 c4 10             	add    esp,0x10
c0013aa7:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab0:	89 10                	mov    DWORD PTR [eax],edx
c0013ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013ac0:	90                   	nop
c0013ac1:	83 c4 0c             	add    esp,0xc
c0013ac4:	c3                   	ret    
c0013ac5:	90                   	nop

c0013ac6 <Bus::~Bus()>:
c0013ac6:	83 ec 0c             	sub    esp,0xc
c0013ac9:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad2:	89 10                	mov    DWORD PTR [eax],edx
c0013ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad8:	83 ec 0c             	sub    esp,0xc
c0013adb:	50                   	push   eax
c0013adc:	e8 0d 06 00 00       	call   c00140ee <Device::~Device()>
c0013ae1:	83 c4 10             	add    esp,0x10
c0013ae4:	90                   	nop
c0013ae5:	83 c4 0c             	add    esp,0xc
c0013ae8:	c3                   	ret    
c0013ae9:	90                   	nop

c0013aea <Bus::~Bus()>:
c0013aea:	83 ec 0c             	sub    esp,0xc
c0013aed:	83 ec 0c             	sub    esp,0xc
c0013af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af4:	e8 cd ff ff ff       	call   c0013ac6 <Bus::~Bus()>
c0013af9:	83 c4 10             	add    esp,0x10
c0013afc:	83 ec 08             	sub    esp,0x8
c0013aff:	68 58 01 00 00       	push   0x158
c0013b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b08:	e8 09 f2 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0013b0d:	83 c4 10             	add    esp,0x10
c0013b10:	83 c4 0c             	add    esp,0xc
c0013b13:	c3                   	ret    

c0013b14 <Buzzer::Buzzer(char const*)>:
c0013b14:	83 ec 0c             	sub    esp,0xc
c0013b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1b:	83 ec 08             	sub    esp,0x8
c0013b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b22:	50                   	push   eax
c0013b23:	e8 e4 08 00 00       	call   c001440c <Device::Device(char const*)>
c0013b28:	83 c4 10             	add    esp,0x10
c0013b2b:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b34:	89 10                	mov    DWORD PTR [eax],edx
c0013b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b48:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b52:	90                   	nop
c0013b53:	83 c4 0c             	add    esp,0xc
c0013b56:	c3                   	ret    
c0013b57:	90                   	nop

c0013b58 <Buzzer::~Buzzer()>:
c0013b58:	83 ec 0c             	sub    esp,0xc
c0013b5b:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b64:	89 10                	mov    DWORD PTR [eax],edx
c0013b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6a:	83 ec 0c             	sub    esp,0xc
c0013b6d:	50                   	push   eax
c0013b6e:	e8 7b 05 00 00       	call   c00140ee <Device::~Device()>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	90                   	nop
c0013b77:	83 c4 0c             	add    esp,0xc
c0013b7a:	c3                   	ret    
c0013b7b:	90                   	nop

c0013b7c <Buzzer::~Buzzer()>:
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	83 ec 0c             	sub    esp,0xc
c0013b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b86:	e8 cd ff ff ff       	call   c0013b58 <Buzzer::~Buzzer()>
c0013b8b:	83 c4 10             	add    esp,0x10
c0013b8e:	83 ec 08             	sub    esp,0x8
c0013b91:	68 5c 01 00 00       	push   0x15c
c0013b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b9a:	e8 77 f1 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	83 c4 0c             	add    esp,0xc
c0013ba5:	c3                   	ret    

c0013ba6 <Buzzer::stop()>:
c0013ba6:	83 ec 14             	sub    esp,0x14
c0013ba9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bad:	8b 10                	mov    edx,DWORD PTR [eax]
c0013baf:	6a 00                	push   0x0
c0013bb1:	50                   	push   eax
c0013bb2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013bb5:	83 c4 1c             	add    esp,0x1c
c0013bb8:	c3                   	ret    

c0013bb9 <beepThread(void*)>:
c0013bb9:	53                   	push   ebx
c0013bba:	83 ec 08             	sub    esp,0x8
c0013bbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bc1:	e8 f8 a0 00 00       	call   c001dcbe <unlockScheduler()>
c0013bc6:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013bcb:	52                   	push   edx
c0013bcc:	52                   	push   edx
c0013bcd:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013bd3:	52                   	push   edx
c0013bd4:	50                   	push   eax
c0013bd5:	e8 32 a6 00 00       	call   c001e20c <nanoSleep(unsigned long long)>
c0013bda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bdd:	e8 c4 ff ff ff       	call   c0013ba6 <Buzzer::stop()>
c0013be2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013bea:	83 c4 18             	add    esp,0x18
c0013bed:	5b                   	pop    ebx
c0013bee:	e9 5f a5 00 00       	jmp    c001e152 <blockTask(TaskState)>
c0013bf3:	90                   	nop

c0013bf4 <Buzzer::beep(int, int, bool)>:
c0013bf4:	57                   	push   edi
c0013bf5:	56                   	push   esi
c0013bf6:	53                   	push   ebx
c0013bf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bfb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c03:	52                   	push   edx
c0013c04:	52                   	push   edx
c0013c05:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0b:	56                   	push   esi
c0013c0c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	89 f8                	mov    eax,edi
c0013c14:	84 c0                	test   al,al
c0013c16:	74 1f                	je     c0013c37 <Buzzer::beep(int, int, bool)+0x43>
c0013c18:	50                   	push   eax
c0013c19:	50                   	push   eax
c0013c1a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c20:	99                   	cdq    
c0013c21:	52                   	push   edx
c0013c22:	50                   	push   eax
c0013c23:	e8 e4 a5 00 00       	call   c001e20c <nanoSleep(unsigned long long)>
c0013c28:	83 c4 10             	add    esp,0x10
c0013c2b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c2f:	5b                   	pop    ebx
c0013c30:	5e                   	pop    esi
c0013c31:	5f                   	pop    edi
c0013c32:	e9 6f ff ff ff       	jmp    c0013ba6 <Buzzer::stop()>
c0013c37:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c3d:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0013c42:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c4a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c4e:	c7 44 24 14 b9 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013bb9
c0013c56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c5a:	5b                   	pop    ebx
c0013c5b:	5e                   	pop    esi
c0013c5c:	5f                   	pop    edi
c0013c5d:	e9 8c a1 00 00       	jmp    c001ddee <Process::createThread(void (*)(void*), void*, int)>

c0013c62 <User::loadClockSettings(int)>:
c0013c62:	53                   	push   ebx
c0013c63:	83 ec 14             	sub    esp,0x14
c0013c66:	68 14 01 00 00       	push   0x114
c0013c6b:	e8 d0 bb ff ff       	call   c000f840 <malloc>
c0013c70:	83 c4 0c             	add    esp,0xc
c0013c73:	89 c3                	mov    ebx,eax
c0013c75:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c0013c7b:	68 38 ab 02 c0       	push   0xc002ab38
c0013c80:	50                   	push   eax
c0013c81:	e8 c8 f6 ff ff       	call   c001334e <File::File(char const*, Process*)>
c0013c86:	58                   	pop    eax
c0013c87:	5a                   	pop    edx
c0013c88:	6a 01                	push   0x1
c0013c8a:	53                   	push   ebx
c0013c8b:	e8 22 f7 ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c0013c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c93:	e8 78 f7 ff ff       	call   c0013410 <File::close()>
c0013c98:	83 c4 10             	add    esp,0x10
c0013c9b:	85 db                	test   ebx,ebx
c0013c9d:	74 0f                	je     c0013cae <User::loadClockSettings(int)+0x4c>
c0013c9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ca1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013ca5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ca8:	83 c4 08             	add    esp,0x8
c0013cab:	5b                   	pop    ebx
c0013cac:	ff e0                	jmp    eax
c0013cae:	83 c4 08             	add    esp,0x8
c0013cb1:	5b                   	pop    ebx
c0013cb2:	c3                   	ret    
c0013cb3:	90                   	nop

c0013cb4 <Clock::Clock(char const*)>:
c0013cb4:	83 ec 0c             	sub    esp,0xc
c0013cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cbb:	83 ec 08             	sub    esp,0x8
c0013cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc2:	50                   	push   eax
c0013cc3:	e8 44 07 00 00       	call   c001440c <Device::Device(char const*)>
c0013cc8:	83 c4 10             	add    esp,0x10
c0013ccb:	ba 60 ab 02 c0       	mov    edx,0xc002ab60
c0013cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd4:	89 10                	mov    DWORD PTR [eax],edx
c0013cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cda:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ce4:	90                   	nop
c0013ce5:	83 c4 0c             	add    esp,0xc
c0013ce8:	c3                   	ret    
c0013ce9:	90                   	nop

c0013cea <Clock::~Clock()>:
c0013cea:	83 ec 0c             	sub    esp,0xc
c0013ced:	ba 60 ab 02 c0       	mov    edx,0xc002ab60
c0013cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf6:	89 10                	mov    DWORD PTR [eax],edx
c0013cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cfc:	83 ec 0c             	sub    esp,0xc
c0013cff:	50                   	push   eax
c0013d00:	e8 e9 03 00 00       	call   c00140ee <Device::~Device()>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	90                   	nop
c0013d09:	83 c4 0c             	add    esp,0xc
c0013d0c:	c3                   	ret    
c0013d0d:	90                   	nop

c0013d0e <Clock::~Clock()>:
c0013d0e:	83 ec 0c             	sub    esp,0xc
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d18:	e8 cd ff ff ff       	call   c0013cea <Clock::~Clock()>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	83 ec 08             	sub    esp,0x8
c0013d23:	68 58 01 00 00       	push   0x158
c0013d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d2c:	e8 e5 ef ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0013d31:	83 c4 10             	add    esp,0x10
c0013d34:	83 c4 0c             	add    esp,0xc
c0013d37:	c3                   	ret    

c0013d38 <Clock::timeInSecondsLocal()>:
c0013d38:	53                   	push   ebx
c0013d39:	83 ec 14             	sub    esp,0x14
c0013d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d40:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d42:	50                   	push   eax
c0013d43:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d46:	0f b6 0d 94 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e594
c0013d4d:	03 0d 98 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e598
c0013d53:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d59:	89 cb                	mov    ebx,ecx
c0013d5b:	c1 fb 1f             	sar    ebx,0x1f
c0013d5e:	01 c8                	add    eax,ecx
c0013d60:	11 da                	adc    edx,ebx
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	31 c9                	xor    ecx,ecx
c0013d67:	80 3d 95 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e595,0x0
c0013d6e:	74 05                	je     c0013d75 <Clock::timeInSecondsLocal()+0x3d>
c0013d70:	b9 08 07 00 00       	mov    ecx,0x708
c0013d75:	31 db                	xor    ebx,ebx
c0013d77:	01 c8                	add    eax,ecx
c0013d79:	11 da                	adc    edx,ebx
c0013d7b:	83 c4 08             	add    esp,0x8
c0013d7e:	5b                   	pop    ebx
c0013d7f:	c3                   	ret    

c0013d80 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d80:	57                   	push   edi
c0013d81:	56                   	push   esi
c0013d82:	53                   	push   ebx
c0013d83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d8d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d91:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d94:	0f b6 05 94 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e594
c0013d9b:	03 05 98 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e598
c0013da1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013da7:	99                   	cdq    
c0013da8:	29 c6                	sub    esi,eax
c0013daa:	19 d7                	sbb    edi,edx
c0013dac:	89 f0                	mov    eax,esi
c0013dae:	89 fa                	mov    edx,edi
c0013db0:	31 f6                	xor    esi,esi
c0013db2:	80 3d 95 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e595,0x0
c0013db9:	74 05                	je     c0013dc0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013dbb:	be 08 07 00 00       	mov    esi,0x708
c0013dc0:	31 ff                	xor    edi,edi
c0013dc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013dc6:	29 f0                	sub    eax,esi
c0013dc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dcc:	19 fa                	sbb    edx,edi
c0013dce:	89 d8                	mov    eax,ebx
c0013dd0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013dd4:	5b                   	pop    ebx
c0013dd5:	5e                   	pop    esi
c0013dd6:	5f                   	pop    edi
c0013dd7:	ff e0                	jmp    eax

c0013dd9 <datetimeToSeconds(datetime_t)>:
c0013dd9:	55                   	push   ebp
c0013dda:	57                   	push   edi
c0013ddb:	56                   	push   esi
c0013ddc:	53                   	push   ebx
c0013ddd:	83 ec 14             	sub    esp,0x14
c0013de0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013de4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013de8:	89 d3                	mov    ebx,edx
c0013dea:	0f b6 c6             	movzx  eax,dh
c0013ded:	c1 eb 10             	shr    ebx,0x10
c0013df0:	48                   	dec    eax
c0013df1:	66 81 eb 6c 07       	sub    bx,0x76c
c0013df6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013dfa:	0f b6 f5             	movzx  esi,ch
c0013dfd:	89 cf                	mov    edi,ecx
c0013dff:	6b f6 3c             	imul   esi,esi,0x3c
c0013e02:	c1 ef 10             	shr    edi,0x10
c0013e05:	0f b6 c9             	movzx  ecx,cl
c0013e08:	89 f8                	mov    eax,edi
c0013e0a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e10:	0f b6 f8             	movzx  edi,al
c0013e13:	0f b6 d2             	movzx  edx,dl
c0013e16:	01 fe                	add    esi,edi
c0013e18:	01 f1                	add    ecx,esi
c0013e1a:	0f b7 f3             	movzx  esi,bx
c0013e1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e21:	c1 f9 1f             	sar    ecx,0x1f
c0013e24:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e29:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e2d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e32:	8b 0c 8d a0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5460]
c0013e39:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e3d:	76 29                	jbe    c0013e68 <datetimeToSeconds(datetime_t)+0x8f>
c0013e3f:	f6 c3 03             	test   bl,0x3
c0013e42:	75 24                	jne    c0013e68 <datetimeToSeconds(datetime_t)+0x8f>
c0013e44:	31 d2                	xor    edx,edx
c0013e46:	bf 64 00 00 00       	mov    edi,0x64
c0013e4b:	89 d8                	mov    eax,ebx
c0013e4d:	66 f7 f7             	div    di
c0013e50:	66 85 d2             	test   dx,dx
c0013e53:	75 12                	jne    c0013e67 <datetimeToSeconds(datetime_t)+0x8e>
c0013e55:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e5b:	bf 90 01 00 00       	mov    edi,0x190
c0013e60:	99                   	cdq    
c0013e61:	f7 ff                	idiv   edi
c0013e63:	85 d2                	test   edx,edx
c0013e65:	75 01                	jne    c0013e68 <datetimeToSeconds(datetime_t)+0x8f>
c0013e67:	41                   	inc    ecx
c0013e68:	66 83 fb 46          	cmp    bx,0x46
c0013e6c:	76 45                	jbe    c0013eb3 <datetimeToSeconds(datetime_t)+0xda>
c0013e6e:	bb 46 00 00 00       	mov    ebx,0x46
c0013e73:	bf 64 00 00 00       	mov    edi,0x64
c0013e78:	bd 90 01 00 00       	mov    ebp,0x190
c0013e7d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e82:	f6 c3 03             	test   bl,0x3
c0013e85:	75 23                	jne    c0013eaa <datetimeToSeconds(datetime_t)+0xd1>
c0013e87:	89 d8                	mov    eax,ebx
c0013e89:	99                   	cdq    
c0013e8a:	f7 ff                	idiv   edi
c0013e8c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e91:	85 d2                	test   edx,edx
c0013e93:	75 15                	jne    c0013eaa <datetimeToSeconds(datetime_t)+0xd1>
c0013e95:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e9b:	99                   	cdq    
c0013e9c:	f7 fd                	idiv   ebp
c0013e9e:	83 fa 01             	cmp    edx,0x1
c0013ea1:	19 c0                	sbb    eax,eax
c0013ea3:	f7 d0                	not    eax
c0013ea5:	05 6e 01 00 00       	add    eax,0x16e
c0013eaa:	01 c1                	add    ecx,eax
c0013eac:	43                   	inc    ebx
c0013ead:	39 f3                	cmp    ebx,esi
c0013eaf:	7c cc                	jl     c0013e7d <datetimeToSeconds(datetime_t)+0xa4>
c0013eb1:	eb 35                	jmp    c0013ee8 <datetimeToSeconds(datetime_t)+0x10f>
c0013eb3:	74 33                	je     c0013ee8 <datetimeToSeconds(datetime_t)+0x10f>
c0013eb5:	b8 45 00 00 00       	mov    eax,0x45
c0013eba:	89 c2                	mov    edx,eax
c0013ebc:	83 e2 03             	and    edx,0x3
c0013ebf:	39 f0                	cmp    eax,esi
c0013ec1:	7e 0f                	jle    c0013ed2 <datetimeToSeconds(datetime_t)+0xf9>
c0013ec3:	83 fa 01             	cmp    edx,0x1
c0013ec6:	19 d2                	sbb    edx,edx
c0013ec8:	48                   	dec    eax
c0013ec9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013ed0:	eb e8                	jmp    c0013eba <datetimeToSeconds(datetime_t)+0xe1>
c0013ed2:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ed7:	85 d2                	test   edx,edx
c0013ed9:	75 0b                	jne    c0013ee6 <datetimeToSeconds(datetime_t)+0x10d>
c0013edb:	66 83 fb 01          	cmp    bx,0x1
c0013edf:	19 c0                	sbb    eax,eax
c0013ee1:	05 6e 01 00 00       	add    eax,0x16e
c0013ee6:	29 c1                	sub    ecx,eax
c0013ee8:	b8 80 51 01 00       	mov    eax,0x15180
c0013eed:	f7 e9                	imul   ecx
c0013eef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ef3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ef7:	83 c4 14             	add    esp,0x14
c0013efa:	5b                   	pop    ebx
c0013efb:	5e                   	pop    esi
c0013efc:	5f                   	pop    edi
c0013efd:	5d                   	pop    ebp
c0013efe:	c3                   	ret    
c0013eff:	90                   	nop

c0013f00 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f00:	57                   	push   edi
c0013f01:	56                   	push   esi
c0013f02:	53                   	push   ebx
c0013f03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f07:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f09:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f14:	e8 c0 fe ff ff       	call   c0013dd9 <datetimeToSeconds(datetime_t)>
c0013f19:	59                   	pop    ecx
c0013f1a:	0f b6 0d 94 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e594
c0013f21:	5b                   	pop    ebx
c0013f22:	03 0d 98 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e598
c0013f28:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f2e:	89 cb                	mov    ebx,ecx
c0013f30:	c1 fb 1f             	sar    ebx,0x1f
c0013f33:	29 c8                	sub    eax,ecx
c0013f35:	19 da                	sbb    edx,ebx
c0013f37:	31 c9                	xor    ecx,ecx
c0013f39:	80 3d 95 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e595,0x0
c0013f40:	74 05                	je     c0013f47 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f42:	b9 08 07 00 00       	mov    ecx,0x708
c0013f47:	31 db                	xor    ebx,ebx
c0013f49:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f4d:	29 c8                	sub    eax,ecx
c0013f4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f53:	19 da                	sbb    edx,ebx
c0013f55:	89 f8                	mov    eax,edi
c0013f57:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f5b:	5b                   	pop    ebx
c0013f5c:	5e                   	pop    esi
c0013f5d:	5f                   	pop    edi
c0013f5e:	ff e0                	jmp    eax

c0013f60 <secondsToDatetime(unsigned long long)>:
c0013f60:	55                   	push   ebp
c0013f61:	57                   	push   edi
c0013f62:	56                   	push   esi
c0013f63:	53                   	push   ebx
c0013f64:	83 ec 1c             	sub    esp,0x1c
c0013f67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f6b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f6f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f73:	6a 00                	push   0x0
c0013f75:	68 80 51 01 00       	push   0x15180
c0013f7a:	55                   	push   ebp
c0013f7b:	57                   	push   edi
c0013f7c:	e8 1b 29 01 00       	call   c002689c <__udivdi3>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f8e:	6a 00                	push   0x0
c0013f90:	68 80 51 01 00       	push   0x15180
c0013f95:	55                   	push   ebp
c0013f96:	57                   	push   edi
c0013f97:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f9c:	e8 fb 29 01 00       	call   c002699c <__umoddi3>
c0013fa1:	83 c4 10             	add    esp,0x10
c0013fa4:	99                   	cdq    
c0013fa5:	f7 ff                	idiv   edi
c0013fa7:	bf 3c 00 00 00       	mov    edi,0x3c
c0013fac:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013faf:	89 d0                	mov    eax,edx
c0013fb1:	99                   	cdq    
c0013fb2:	f7 ff                	idiv   edi
c0013fb4:	85 db                	test   ebx,ebx
c0013fb6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013fb9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013fbc:	79 11                	jns    c0013fcf <secondsToDatetime(unsigned long long)+0x6f>
c0013fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013fc2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013fc8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fcd:	eb 07                	jmp    c0013fd6 <secondsToDatetime(unsigned long long)+0x76>
c0013fcf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fd4:	89 d8                	mov    eax,ebx
c0013fd6:	bf b4 05 00 00       	mov    edi,0x5b4
c0013fdb:	99                   	cdq    
c0013fdc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013fe1:	f7 f9                	idiv   ecx
c0013fe3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fec:	31 d2                	xor    edx,edx
c0013fee:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ff6:	01 c3                	add    ebx,eax
c0013ff8:	89 d8                	mov    eax,ebx
c0013ffa:	f7 f1                	div    ecx
c0013ffc:	31 d2                	xor    edx,edx
c0013ffe:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014001:	89 d8                	mov    eax,ebx
c0014003:	f7 f7                	div    edi
c0014005:	31 d2                	xor    edx,edx
c0014007:	29 c1                	sub    ecx,eax
c0014009:	89 d8                	mov    eax,ebx
c001400b:	f7 f5                	div    ebp
c001400d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014012:	29 c1                	sub    ecx,eax
c0014014:	31 d2                	xor    edx,edx
c0014016:	89 c8                	mov    eax,ecx
c0014018:	f7 f5                	div    ebp
c001401a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001401f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014023:	31 d2                	xor    edx,edx
c0014025:	89 c8                	mov    eax,ecx
c0014027:	f7 f5                	div    ebp
c0014029:	31 d2                	xor    edx,edx
c001402b:	01 c3                	add    ebx,eax
c001402d:	89 c8                	mov    eax,ecx
c001402f:	f7 f7                	div    edi
c0014031:	bf 99 00 00 00       	mov    edi,0x99
c0014036:	29 c3                	sub    ebx,eax
c0014038:	31 d2                	xor    edx,edx
c001403a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014042:	29 c3                	sub    ebx,eax
c0014044:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014047:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001404a:	bb 05 00 00 00       	mov    ebx,0x5
c001404f:	83 c1 02             	add    ecx,0x2
c0014052:	89 c8                	mov    eax,ecx
c0014054:	f7 f7                	div    edi
c0014056:	31 d2                	xor    edx,edx
c0014058:	89 c7                	mov    edi,eax
c001405a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014060:	83 c0 02             	add    eax,0x2
c0014063:	f7 f3                	div    ebx
c0014065:	89 eb                	mov    ebx,ebp
c0014067:	29 c3                	sub    ebx,eax
c0014069:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001406f:	88 1e                	mov    BYTE PTR [esi],bl
c0014071:	19 c0                	sbb    eax,eax
c0014073:	31 d2                	xor    edx,edx
c0014075:	83 e0 0c             	and    eax,0xc
c0014078:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001407c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014084:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014088:	83 f9 01             	cmp    ecx,0x1
c001408b:	0f 96 c2             	setbe  dl
c001408e:	41                   	inc    ecx
c001408f:	01 d0                	add    eax,edx
c0014091:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014094:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014098:	83 c4 1c             	add    esp,0x1c
c001409b:	89 f0                	mov    eax,esi
c001409d:	5b                   	pop    ebx
c001409e:	5e                   	pop    esi
c001409f:	5f                   	pop    edi
c00140a0:	5d                   	pop    ebp
c00140a1:	c2 04 00             	ret    0x4

c00140a4 <Clock::timeInDatetimeLocal()>:
c00140a4:	53                   	push   ebx
c00140a5:	83 ec 14             	sub    esp,0x14
c00140a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140b0:	e8 83 fc ff ff       	call   c0013d38 <Clock::timeInSecondsLocal()>
c00140b5:	83 c4 0c             	add    esp,0xc
c00140b8:	52                   	push   edx
c00140b9:	50                   	push   eax
c00140ba:	53                   	push   ebx
c00140bb:	e8 a0 fe ff ff       	call   c0013f60 <secondsToDatetime(unsigned long long)>
c00140c0:	89 d8                	mov    eax,ebx
c00140c2:	83 c4 14             	add    esp,0x14
c00140c5:	5b                   	pop    ebx
c00140c6:	c2 04 00             	ret    0x4
c00140c9:	90                   	nop

c00140ca <Device::hibernate()>:
c00140ca:	c3                   	ret    
c00140cb:	90                   	nop

c00140cc <Device::wake()>:
c00140cc:	c3                   	ret    
c00140cd:	90                   	nop

c00140ce <Device::detect()>:
c00140ce:	c3                   	ret    
c00140cf:	90                   	nop

c00140d0 <Device::disableLegacy()>:
c00140d0:	c3                   	ret    
c00140d1:	90                   	nop

c00140d2 <Device::powerSaving(PowerSavingLevel)>:
c00140d2:	c3                   	ret    
c00140d3:	90                   	nop

c00140d4 <DriverlessDevice::close(int, int, void*)>:
c00140d4:	31 c0                	xor    eax,eax
c00140d6:	c3                   	ret    
c00140d7:	90                   	nop

c00140d8 <DriverlessDevice::detect()>:
c00140d8:	c3                   	ret    
c00140d9:	90                   	nop

c00140da <DriverlessDevice::open(int, int, void*)>:
c00140da:	83 ec 18             	sub    esp,0x18
c00140dd:	68 d0 ab 02 c0       	push   0xc002abd0
c00140e2:	e8 b0 63 00 00       	call   c001a497 <Krnl::panic(char const*)>
c00140e7:	83 c8 ff             	or     eax,0xffffffff
c00140ea:	83 c4 1c             	add    esp,0x1c
c00140ed:	c3                   	ret    

c00140ee <Device::~Device()>:
c00140ee:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c00140f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140f7:	89 10                	mov    DWORD PTR [eax],edx
c00140f9:	90                   	nop
c00140fa:	c3                   	ret    
c00140fb:	90                   	nop

c00140fc <Device::~Device()>:
c00140fc:	83 ec 0c             	sub    esp,0xc
c00140ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014103:	e8 e6 ff ff ff       	call   c00140ee <Device::~Device()>
c0014108:	83 c4 04             	add    esp,0x4
c001410b:	83 ec 08             	sub    esp,0x8
c001410e:	68 58 01 00 00       	push   0x158
c0014113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014117:	e8 fa eb ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	83 c4 0c             	add    esp,0xc
c0014122:	c3                   	ret    
c0014123:	90                   	nop

c0014124 <Device::findAndLoadDriver()>:
c0014124:	c3                   	ret    
c0014125:	90                   	nop

c0014126 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014126:	57                   	push   edi
c0014127:	b9 09 00 00 00       	mov    ecx,0x9
c001412c:	56                   	push   esi
c001412d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014131:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014135:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001413f:	81 c7 18 01 00 00    	add    edi,0x118
c0014145:	fc                   	cld    
c0014146:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014148:	5e                   	pop    esi
c0014149:	5f                   	pop    edi
c001414a:	c3                   	ret    
c001414b:	90                   	nop

c001414c <Device::preOpenACPI(void*, char*, char*)>:
c001414c:	56                   	push   esi
c001414d:	53                   	push   ebx
c001414e:	83 ec 08             	sub    esp,0x8
c0014151:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014155:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014159:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014163:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014167:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001416d:	6a 1e                	push   0x1e
c001416f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014175:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014179:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001417f:	50                   	push   eax
c0014180:	e8 bf c5 fe ff       	call   c0000744 <memcpy>
c0014185:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014189:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001418d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014195:	83 c4 14             	add    esp,0x14
c0014198:	5b                   	pop    ebx
c0014199:	5e                   	pop    esi
c001419a:	e9 a5 c5 fe ff       	jmp    c0000744 <memcpy>
c001419f:	90                   	nop

c00141a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141a4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141a9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141b0:	75 0b                	jne    c00141bd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00141b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00141b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00141bb:	eb 1e                	jmp    c00141db <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00141bd:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00141c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141c8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141d8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00141db:	ff e0                	jmp    eax
c00141dd:	90                   	nop

c00141de <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141e2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141e7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141ee:	75 0b                	jne    c00141fb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00141f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00141f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141f6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00141f9:	eb 1e                	jmp    c0014219 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141fb:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014200:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014206:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001420c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001420e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014212:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014216:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014219:	ff e0                	jmp    eax
c001421b:	90                   	nop

c001421c <Device::addChild(Device*)>:
c001421c:	53                   	push   ebx
c001421d:	83 ec 08             	sub    esp,0x8
c0014220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014224:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014228:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001422e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014234:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014236:	85 d2                	test   edx,edx
c0014238:	74 04                	je     c001423e <Device::addChild(Device*)+0x22>
c001423a:	89 d3                	mov    ebx,edx
c001423c:	eb f6                	jmp    c0014234 <Device::addChild(Device*)+0x18>
c001423e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014241:	83 ec 0c             	sub    esp,0xc
c0014244:	6a 08                	push   0x8
c0014246:	e8 f5 b5 ff ff       	call   c000f840 <malloc>
c001424b:	89 03                	mov    DWORD PTR [ebx],eax
c001424d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014253:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001425a:	83 c4 18             	add    esp,0x18
c001425d:	5b                   	pop    ebx
c001425e:	c3                   	ret    
c001425f:	90                   	nop

c0014260 <Device::removeAllChildren()>:
c0014260:	56                   	push   esi
c0014261:	53                   	push   ebx
c0014262:	52                   	push   edx
c0014263:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014267:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001426d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014270:	74 17                	je     c0014289 <Device::removeAllChildren()+0x29>
c0014272:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014275:	85 c0                	test   eax,eax
c0014277:	74 0c                	je     c0014285 <Device::removeAllChildren()+0x25>
c0014279:	83 ec 0c             	sub    esp,0xc
c001427c:	8b 10                	mov    edx,DWORD PTR [eax]
c001427e:	50                   	push   eax
c001427f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014282:	83 c4 10             	add    esp,0x10
c0014285:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014287:	eb e4                	jmp    c001426d <Device::removeAllChildren()+0xd>
c0014289:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001428f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014295:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001429b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142a2:	58                   	pop    eax
c00142a3:	5b                   	pop    ebx
c00142a4:	5e                   	pop    esi
c00142a5:	c3                   	ret    

c00142a6 <Device::hibernateAll()>:
c00142a6:	53                   	push   ebx
c00142a7:	83 ec 14             	sub    esp,0x14
c00142aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142b0:	53                   	push   ebx
c00142b1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00142b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142ba:	83 c4 10             	add    esp,0x10
c00142bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c0:	74 0f                	je     c00142d1 <Device::hibernateAll()+0x2b>
c00142c2:	83 ec 0c             	sub    esp,0xc
c00142c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142c8:	e8 d9 ff ff ff       	call   c00142a6 <Device::hibernateAll()>
c00142cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142cf:	eb e9                	jmp    c00142ba <Device::hibernateAll()+0x14>
c00142d1:	83 c4 08             	add    esp,0x8
c00142d4:	5b                   	pop    ebx
c00142d5:	c3                   	ret    

c00142d6 <Device::wakeAll()>:
c00142d6:	53                   	push   ebx
c00142d7:	83 ec 14             	sub    esp,0x14
c00142da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142e0:	53                   	push   ebx
c00142e1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00142e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142ea:	83 c4 10             	add    esp,0x10
c00142ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142f0:	74 0f                	je     c0014301 <Device::wakeAll()+0x2b>
c00142f2:	83 ec 0c             	sub    esp,0xc
c00142f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142f8:	e8 d9 ff ff ff       	call   c00142d6 <Device::wakeAll()>
c00142fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142ff:	eb e9                	jmp    c00142ea <Device::wakeAll()+0x14>
c0014301:	83 c4 08             	add    esp,0x8
c0014304:	5b                   	pop    ebx
c0014305:	c3                   	ret    

c0014306 <Device::detectAll()>:
c0014306:	53                   	push   ebx
c0014307:	83 ec 14             	sub    esp,0x14
c001430a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001430e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014310:	53                   	push   ebx
c0014311:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014314:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001431a:	83 c4 10             	add    esp,0x10
c001431d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014320:	74 0f                	je     c0014331 <Device::detectAll()+0x2b>
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014328:	e8 d9 ff ff ff       	call   c0014306 <Device::detectAll()>
c001432d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001432f:	eb e9                	jmp    c001431a <Device::detectAll()+0x14>
c0014331:	83 c4 08             	add    esp,0x8
c0014334:	5b                   	pop    ebx
c0014335:	c3                   	ret    

c0014336 <Device::disableLegacyAll()>:
c0014336:	53                   	push   ebx
c0014337:	83 ec 14             	sub    esp,0x14
c001433a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001433e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014340:	53                   	push   ebx
c0014341:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014344:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001434a:	83 c4 10             	add    esp,0x10
c001434d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014350:	74 0f                	je     c0014361 <Device::disableLegacyAll()+0x2b>
c0014352:	83 ec 0c             	sub    esp,0xc
c0014355:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014358:	e8 d9 ff ff ff       	call   c0014336 <Device::disableLegacyAll()>
c001435d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001435f:	eb e9                	jmp    c001434a <Device::disableLegacyAll()+0x14>
c0014361:	83 c4 08             	add    esp,0x8
c0014364:	5b                   	pop    ebx
c0014365:	c3                   	ret    

c0014366 <Device::loadDriversForAll()>:
c0014366:	53                   	push   ebx
c0014367:	83 ec 08             	sub    esp,0x8
c001436a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001436e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014374:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014376:	85 db                	test   ebx,ebx
c0014378:	74 12                	je     c001438c <Device::loadDriversForAll()+0x26>
c001437a:	83 ec 0c             	sub    esp,0xc
c001437d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014380:	e8 e1 ff ff ff       	call   c0014366 <Device::loadDriversForAll()>
c0014385:	83 c4 10             	add    esp,0x10
c0014388:	89 d8                	mov    eax,ebx
c001438a:	eb e8                	jmp    c0014374 <Device::loadDriversForAll()+0xe>
c001438c:	83 c4 08             	add    esp,0x8
c001438f:	5b                   	pop    ebx
c0014390:	c3                   	ret    
c0014391:	90                   	nop

c0014392 <Device::closeAll()>:
c0014392:	53                   	push   ebx
c0014393:	83 ec 08             	sub    esp,0x8
c0014396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001439a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001439c:	6a 00                	push   0x0
c001439e:	6a 00                	push   0x0
c00143a0:	6a 00                	push   0x0
c00143a2:	53                   	push   ebx
c00143a3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ac:	83 c4 10             	add    esp,0x10
c00143af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143b2:	74 0f                	je     c00143c3 <Device::closeAll()+0x31>
c00143b4:	83 ec 0c             	sub    esp,0xc
c00143b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143ba:	e8 d3 ff ff ff       	call   c0014392 <Device::closeAll()>
c00143bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143c1:	eb e9                	jmp    c00143ac <Device::closeAll()+0x1a>
c00143c3:	83 c4 08             	add    esp,0x8
c00143c6:	5b                   	pop    ebx
c00143c7:	c3                   	ret    

c00143c8 <Device::powerSavingAll(PowerSavingLevel)>:
c00143c8:	56                   	push   esi
c00143c9:	53                   	push   ebx
c00143ca:	83 ec 0c             	sub    esp,0xc
c00143cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143d1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143d7:	56                   	push   esi
c00143d8:	53                   	push   ebx
c00143d9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00143dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143e2:	83 c4 10             	add    esp,0x10
c00143e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143e8:	74 0f                	je     c00143f9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00143ea:	52                   	push   edx
c00143eb:	52                   	push   edx
c00143ec:	56                   	push   esi
c00143ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143f0:	e8 d3 ff ff ff       	call   c00143c8 <Device::powerSavingAll(PowerSavingLevel)>
c00143f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143f7:	eb e9                	jmp    c00143e2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00143f9:	58                   	pop    eax
c00143fa:	5b                   	pop    ebx
c00143fb:	5e                   	pop    esi
c00143fc:	c3                   	ret    
c00143fd:	90                   	nop

c00143fe <Device::setName(char const*)>:
c00143fe:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014406:	e9 29 c4 fe ff       	jmp    c0000834 <strcpy>
c001440b:	90                   	nop

c001440c <Device::Device(char const*)>:
c001440c:	83 ec 1c             	sub    esp,0x1c
c001440f:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c0014414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014418:	89 10                	mov    DWORD PTR [eax],edx
c001441a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001441e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001442c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001443a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014448:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014452:	83 ec 08             	sub    esp,0x8
c0014455:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001445d:	e8 9c ff ff ff       	call   c00143fe <Device::setName(char const*)>
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001446d:	83 ec 0c             	sub    esp,0xc
c0014470:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014474:	e8 c7 b3 ff ff       	call   c000f840 <malloc>
c0014479:	83 c4 10             	add    esp,0x10
c001447c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014482:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014489:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001448d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014497:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001449d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00144bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00144ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ce:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144dc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ea:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014502:	90                   	nop
c0014503:	83 c4 1c             	add    esp,0x1c
c0014506:	c3                   	ret    
c0014507:	90                   	nop

c0014508 <Device::getName()>:
c0014508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001450c:	05 d0 00 00 00       	add    eax,0xd0
c0014511:	c3                   	ret    

c0014512 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014512:	83 ec 0c             	sub    esp,0xc
c0014515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014519:	83 ec 08             	sub    esp,0x8
c001451c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014520:	50                   	push   eax
c0014521:	e8 e6 fe ff ff       	call   c001440c <Device::Device(char const*)>
c0014526:	83 c4 10             	add    esp,0x10
c0014529:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c001452e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014532:	89 10                	mov    DWORD PTR [eax],edx
c0014534:	90                   	nop
c0014535:	83 c4 0c             	add    esp,0xc
c0014538:	c3                   	ret    
c0014539:	90                   	nop

c001453a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001453a:	57                   	push   edi
c001453b:	56                   	push   esi
c001453c:	53                   	push   ebx
c001453d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014541:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014545:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014549:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001454f:	75 0c                	jne    c001455d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014551:	52                   	push   edx
c0014552:	52                   	push   edx
c0014553:	53                   	push   ebx
c0014554:	56                   	push   esi
c0014555:	e8 80 42 01 00       	call   c00287da <LinkedList<Device>::addElement(Device*)>
c001455a:	83 c4 10             	add    esp,0x10
c001455d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014563:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014566:	74 12                	je     c001457a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014568:	50                   	push   eax
c0014569:	57                   	push   edi
c001456a:	56                   	push   esi
c001456b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001456e:	e8 c7 ff ff ff       	call   c001453a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014573:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	eb e9                	jmp    c0014563 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001457a:	5b                   	pop    ebx
c001457b:	5e                   	pop    esi
c001457c:	5f                   	pop    edi
c001457d:	c3                   	ret    

c001457e <getDevicesOfType(DeviceType)>:
c001457e:	53                   	push   ebx
c001457f:	83 ec 14             	sub    esp,0x14
c0014582:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014586:	53                   	push   ebx
c0014587:	e8 2a 43 01 00       	call   c00288b6 <LinkedList<Device>::LinkedList()>
c001458c:	83 c4 0c             	add    esp,0xc
c001458f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014593:	53                   	push   ebx
c0014594:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c001459a:	e8 9b ff ff ff       	call   c001453a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001459f:	89 d8                	mov    eax,ebx
c00145a1:	83 c4 18             	add    esp,0x18
c00145a4:	5b                   	pop    ebx
c00145a5:	c2 04 00             	ret    0x4

c00145a8 <HardDiskController::HardDiskController(char const*)>:
c00145a8:	83 ec 0c             	sub    esp,0xc
c00145ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145af:	83 ec 08             	sub    esp,0x8
c00145b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145b6:	50                   	push   eax
c00145b7:	e8 50 fe ff ff       	call   c001440c <Device::Device(char const*)>
c00145bc:	83 c4 10             	add    esp,0x10
c00145bf:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c00145c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c8:	89 10                	mov    DWORD PTR [eax],edx
c00145ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ce:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00145d8:	90                   	nop
c00145d9:	83 c4 0c             	add    esp,0xc
c00145dc:	c3                   	ret    
c00145dd:	90                   	nop

c00145de <HardDiskController::~HardDiskController()>:
c00145de:	83 ec 0c             	sub    esp,0xc
c00145e1:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c00145e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ea:	89 10                	mov    DWORD PTR [eax],edx
c00145ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f0:	83 ec 0c             	sub    esp,0xc
c00145f3:	50                   	push   eax
c00145f4:	e8 f5 fa ff ff       	call   c00140ee <Device::~Device()>
c00145f9:	83 c4 10             	add    esp,0x10
c00145fc:	90                   	nop
c00145fd:	83 c4 0c             	add    esp,0xc
c0014600:	c3                   	ret    
c0014601:	90                   	nop

c0014602 <HardDiskController::~HardDiskController()>:
c0014602:	83 ec 0c             	sub    esp,0xc
c0014605:	83 ec 0c             	sub    esp,0xc
c0014608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001460c:	e8 cd ff ff ff       	call   c00145de <HardDiskController::~HardDiskController()>
c0014611:	83 c4 10             	add    esp,0x10
c0014614:	83 ec 08             	sub    esp,0x8
c0014617:	68 58 01 00 00       	push   0x158
c001461c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014620:	e8 f1 e6 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	83 c4 0c             	add    esp,0xc
c001462b:	c3                   	ret    

c001462c <PhysicalDisk::eject()>:
c001462c:	83 ec 18             	sub    esp,0x18
c001462f:	68 74 ac 02 c0       	push   0xc002ac74
c0014634:	e8 bd e7 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014639:	83 c8 ff             	or     eax,0xffffffff
c001463c:	83 c4 1c             	add    esp,0x1c
c001463f:	c3                   	ret    

c0014640 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014640:	83 ec 0c             	sub    esp,0xc
c0014643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014647:	83 ec 08             	sub    esp,0x8
c001464a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001464e:	50                   	push   eax
c001464f:	e8 b8 fd ff ff       	call   c001440c <Device::Device(char const*)>
c0014654:	83 c4 10             	add    esp,0x10
c0014657:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c001465c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014660:	89 10                	mov    DWORD PTR [eax],edx
c0014662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014666:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001466d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014671:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001468a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001468e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014698:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146a2:	90                   	nop
c00146a3:	83 c4 0c             	add    esp,0xc
c00146a6:	c3                   	ret    
c00146a7:	90                   	nop

c00146a8 <PhysicalDisk::startCache()>:
c00146a8:	56                   	push   esi
c00146a9:	53                   	push   ebx
c00146aa:	83 ec 10             	sub    esp,0x10
c00146ad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146b1:	6a 44                	push   0x44
c00146b3:	e8 88 b1 ff ff       	call   c000f840 <malloc>
c00146b8:	89 c6                	mov    esi,eax
c00146ba:	58                   	pop    eax
c00146bb:	5a                   	pop    edx
c00146bc:	53                   	push   ebx
c00146bd:	56                   	push   esi
c00146be:	e8 29 27 00 00       	call   c0016dec <VCache::VCache(PhysicalDisk*)>
c00146c3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00146c9:	83 c4 14             	add    esp,0x14
c00146cc:	5b                   	pop    ebx
c00146cd:	5e                   	pop    esi
c00146ce:	c3                   	ret    
c00146cf:	90                   	nop

c00146d0 <PhysicalDisk::~PhysicalDisk()>:
c00146d0:	83 ec 0c             	sub    esp,0xc
c00146d3:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c00146d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146dc:	89 10                	mov    DWORD PTR [eax],edx
c00146de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e2:	83 ec 0c             	sub    esp,0xc
c00146e5:	50                   	push   eax
c00146e6:	e8 03 fa ff ff       	call   c00140ee <Device::~Device()>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	90                   	nop
c00146ef:	83 c4 0c             	add    esp,0xc
c00146f2:	c3                   	ret    
c00146f3:	90                   	nop

c00146f4 <PhysicalDisk::~PhysicalDisk()>:
c00146f4:	83 ec 0c             	sub    esp,0xc
c00146f7:	83 ec 0c             	sub    esp,0xc
c00146fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146fe:	e8 cd ff ff ff       	call   c00146d0 <PhysicalDisk::~PhysicalDisk()>
c0014703:	83 c4 10             	add    esp,0x10
c0014706:	83 ec 08             	sub    esp,0x8
c0014709:	68 6c 01 00 00       	push   0x16c
c001470e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014712:	e8 ff e5 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0014717:	83 c4 10             	add    esp,0x10
c001471a:	83 c4 0c             	add    esp,0xc
c001471d:	c3                   	ret    

c001471e <FPU::FPU(char const*)>:
c001471e:	83 ec 0c             	sub    esp,0xc
c0014721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014725:	83 ec 08             	sub    esp,0x8
c0014728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001472c:	50                   	push   eax
c001472d:	e8 da fc ff ff       	call   c001440c <Device::Device(char const*)>
c0014732:	83 c4 10             	add    esp,0x10
c0014735:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c001473a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473e:	89 10                	mov    DWORD PTR [eax],edx
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001474e:	90                   	nop
c001474f:	83 c4 0c             	add    esp,0xc
c0014752:	c3                   	ret    
c0014753:	90                   	nop

c0014754 <FPU::~FPU()>:
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c001475c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014760:	89 10                	mov    DWORD PTR [eax],edx
c0014762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	50                   	push   eax
c001476a:	e8 7f f9 ff ff       	call   c00140ee <Device::~Device()>
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	90                   	nop
c0014773:	83 c4 0c             	add    esp,0xc
c0014776:	c3                   	ret    
c0014777:	90                   	nop

c0014778 <FPU::~FPU()>:
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014782:	e8 cd ff ff ff       	call   c0014754 <FPU::~FPU()>
c0014787:	83 c4 10             	add    esp,0x10
c001478a:	83 ec 08             	sub    esp,0x8
c001478d:	68 58 01 00 00       	push   0x158
c0014792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014796:	e8 7b e5 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c001479b:	83 c4 10             	add    esp,0x10
c001479e:	83 c4 0c             	add    esp,0xc
c00147a1:	c3                   	ret    

c00147a2 <setupFPU()>:
c00147a2:	53                   	push   ebx
c00147a3:	83 ec 08             	sub    esp,0x8
c00147a6:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c00147ac:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00147b3:	74 19                	je     c00147ce <setupFPU()+0x2c>
c00147b5:	83 ec 0c             	sub    esp,0xc
c00147b8:	68 58 01 00 00       	push   0x158
c00147bd:	e8 7e b0 ff ff       	call   c000f840 <malloc>
c00147c2:	89 c3                	mov    ebx,eax
c00147c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00147c7:	e8 56 0c 01 00       	call   c0025422 <AVX::AVX()>
c00147cc:	eb 5b                	jmp    c0014829 <setupFPU()+0x87>
c00147ce:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00147d4:	84 c0                	test   al,al
c00147d6:	79 19                	jns    c00147f1 <setupFPU()+0x4f>
c00147d8:	83 ec 0c             	sub    esp,0xc
c00147db:	68 58 01 00 00       	push   0x158
c00147e0:	e8 5b b0 ff ff       	call   c000f840 <malloc>
c00147e5:	89 c3                	mov    ebx,eax
c00147e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00147ea:	e8 59 0d 01 00       	call   c0025548 <SSE::SSE()>
c00147ef:	eb 38                	jmp    c0014829 <setupFPU()+0x87>
c00147f1:	a8 20                	test   al,0x20
c00147f3:	74 19                	je     c001480e <setupFPU()+0x6c>
c00147f5:	83 ec 0c             	sub    esp,0xc
c00147f8:	68 58 01 00 00       	push   0x158
c00147fd:	e8 3e b0 ff ff       	call   c000f840 <malloc>
c0014802:	89 c3                	mov    ebx,eax
c0014804:	89 04 24             	mov    DWORD PTR [esp],eax
c0014807:	e8 a6 0c 01 00       	call   c00254b2 <MMX::MMX()>
c001480c:	eb 1b                	jmp    c0014829 <setupFPU()+0x87>
c001480e:	a8 10                	test   al,0x10
c0014810:	74 1c                	je     c001482e <setupFPU()+0x8c>
c0014812:	83 ec 0c             	sub    esp,0xc
c0014815:	68 58 01 00 00       	push   0x158
c001481a:	e8 21 b0 ff ff       	call   c000f840 <malloc>
c001481f:	89 c3                	mov    ebx,eax
c0014821:	89 04 24             	mov    DWORD PTR [esp],eax
c0014824:	e8 ad 0d 01 00       	call   c00255d6 <x87::x87()>
c0014829:	83 c4 10             	add    esp,0x10
c001482c:	eb 24                	jmp    c0014852 <setupFPU()+0xb0>
c001482e:	83 e0 ef             	and    eax,0xffffffef
c0014831:	83 ec 0c             	sub    esp,0xc
c0014834:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001483a:	68 d4 ac 02 c0       	push   0xc002acd4
c001483f:	e8 b2 e5 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014844:	0f 20 c0             	mov    eax,cr0
c0014847:	83 c8 04             	or     eax,0x4
c001484a:	0f 22 c0             	mov    cr0,eax
c001484d:	31 db                	xor    ebx,ebx
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	89 d8                	mov    eax,ebx
c0014854:	83 c4 08             	add    esp,0x8
c0014857:	5b                   	pop    ebx
c0014858:	c3                   	ret    
c0014859:	90                   	nop

c001485a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001485a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001485e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014862:	c1 e0 04             	shl    eax,0x4
c0014865:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014869:	8d 50 10             	lea    edx,[eax+0x10]
c001486c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014872:	74 08                	je     c001487c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014874:	83 c0 04             	add    eax,0x4
c0014877:	39 d0                	cmp    eax,edx
c0014879:	75 f1                	jne    c001486c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001487b:	c3                   	ret    
c001487c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014886:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014890:	eb e2                	jmp    c0014874 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014892 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014892:	57                   	push   edi
c0014893:	31 c0                	xor    eax,eax
c0014895:	56                   	push   esi
c0014896:	53                   	push   ebx
c0014897:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001489b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001489f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00148a3:	89 da                	mov    edx,ebx
c00148a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00148a9:	c1 e2 04             	shl    edx,0x4
c00148ac:	01 ca                	add    edx,ecx
c00148ae:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00148b6:	74 16                	je     c00148ce <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00148b8:	40                   	inc    eax
c00148b9:	83 f8 04             	cmp    eax,0x4
c00148bc:	75 f0                	jne    c00148ae <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00148be:	c7 44 24 10 18 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad18
c00148c6:	5b                   	pop    ebx
c00148c7:	5e                   	pop    esi
c00148c8:	5f                   	pop    edi
c00148c9:	e9 c9 5b 00 00       	jmp    c001a497 <Krnl::panic(char const*)>
c00148ce:	8d 04 98             	lea    eax,[eax+ebx*4]
c00148d1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00148d4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00148da:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00148e0:	5b                   	pop    ebx
c00148e1:	5e                   	pop    esi
c00148e2:	5f                   	pop    edi
c00148e3:	c3                   	ret    

c00148e4 <doubleFault(regs*, void*)>:
c00148e4:	55                   	push   ebp
c00148e5:	89 e5                	mov    ebp,esp
c00148e7:	83 ec 08             	sub    esp,0x8
c00148ea:	83 ec 0c             	sub    esp,0xc
c00148ed:	68 53 ad 02 c0       	push   0xc002ad53
c00148f2:	e8 a0 5b 00 00       	call   c001a497 <Krnl::panic(char const*)>
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	90                   	nop
c00148fb:	c9                   	leave  
c00148fc:	c3                   	ret    
c00148fd:	90                   	nop

c00148fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148fe:	56                   	push   esi
c00148ff:	53                   	push   ebx
c0014900:	50                   	push   eax
c0014901:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014905:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014909:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001490e:	75 35                	jne    c0014945 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014910:	8d 43 20             	lea    eax,[ebx+0x20]
c0014913:	31 d2                	xor    edx,edx
c0014915:	89 c1                	mov    ecx,eax
c0014917:	c1 e1 04             	shl    ecx,0x4
c001491a:	01 f1                	add    ecx,esi
c001491c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014924:	74 3e                	je     c0014964 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014926:	42                   	inc    edx
c0014927:	83 fa 04             	cmp    edx,0x4
c001492a:	75 f0                	jne    c001491c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001492c:	83 ec 0c             	sub    esp,0xc
c001492f:	68 98 ad 02 c0       	push   0xc002ad98
c0014934:	e8 5e 5b 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014941:	5a                   	pop    edx
c0014942:	5b                   	pop    ebx
c0014943:	5e                   	pop    esi
c0014944:	c3                   	ret    
c0014945:	83 ec 0c             	sub    esp,0xc
c0014948:	56                   	push   esi
c0014949:	e8 ba fb ff ff       	call   c0014508 <Device::getName()>
c001494e:	83 c4 10             	add    esp,0x10
c0014951:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014954:	75 ba                	jne    c0014910 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014956:	83 fb 0f             	cmp    ebx,0xf
c0014959:	7f 29                	jg     c0014984 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001495b:	0f b6 9b 60 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd29a0]
c0014962:	eb ac                	jmp    c0014910 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014964:	8d 04 82             	lea    eax,[edx+eax*4]
c0014967:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001496b:	8d 04 86             	lea    eax,[esi+eax*4]
c001496e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014974:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014978:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001497e:	89 d8                	mov    eax,ebx
c0014980:	5a                   	pop    edx
c0014981:	5b                   	pop    ebx
c0014982:	5e                   	pop    esi
c0014983:	c3                   	ret    
c0014984:	83 ec 0c             	sub    esp,0xc
c0014987:	68 60 ad 02 c0       	push   0xc002ad60
c001498c:	e8 06 5b 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0014991:	83 c4 10             	add    esp,0x10
c0014994:	e9 77 ff ff ff       	jmp    c0014910 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014999:	90                   	nop

c001499a <InterruptController::clearAllHandlers(int, bool)>:
c001499a:	56                   	push   esi
c001499b:	53                   	push   ebx
c001499c:	52                   	push   edx
c001499d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00149a5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00149aa:	75 61                	jne    c0014a0d <InterruptController::clearAllHandlers(int, bool)+0x73>
c00149ac:	8d 46 20             	lea    eax,[esi+0x20]
c00149af:	c1 e6 04             	shl    esi,0x4
c00149b2:	c1 e0 04             	shl    eax,0x4
c00149b5:	01 de                	add    esi,ebx
c00149b7:	01 d8                	add    eax,ebx
c00149b9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00149c3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00149cd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00149d7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00149e1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00149eb:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00149f5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149ff:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a09:	58                   	pop    eax
c0014a0a:	5b                   	pop    ebx
c0014a0b:	5e                   	pop    esi
c0014a0c:	c3                   	ret    
c0014a0d:	83 ec 0c             	sub    esp,0xc
c0014a10:	53                   	push   ebx
c0014a11:	e8 f2 fa ff ff       	call   c0014508 <Device::getName()>
c0014a16:	83 c4 10             	add    esp,0x10
c0014a19:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a1c:	75 8e                	jne    c00149ac <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a1e:	83 fe 0f             	cmp    esi,0xf
c0014a21:	7f 09                	jg     c0014a2c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a23:	0f b6 b6 60 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd29a0]
c0014a2a:	eb 80                	jmp    c00149ac <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a2c:	83 ec 0c             	sub    esp,0xc
c0014a2f:	68 d4 ad 02 c0       	push   0xc002add4
c0014a34:	e8 5e 5a 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0014a39:	83 c4 10             	add    esp,0x10
c0014a3c:	e9 6b ff ff ff       	jmp    c00149ac <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a41:	90                   	nop

c0014a42 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a42:	56                   	push   esi
c0014a43:	53                   	push   ebx
c0014a44:	52                   	push   edx
c0014a45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a4d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a52:	75 3a                	jne    c0014a8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a58:	8d 50 20             	lea    edx,[eax+0x20]
c0014a5b:	c1 e2 04             	shl    edx,0x4
c0014a5e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a61:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a65:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a6b:	74 0b                	je     c0014a78 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a6d:	83 c0 04             	add    eax,0x4
c0014a70:	39 d0                	cmp    eax,edx
c0014a72:	75 f1                	jne    c0014a65 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a74:	58                   	pop    eax
c0014a75:	5b                   	pop    ebx
c0014a76:	5e                   	pop    esi
c0014a77:	c3                   	ret    
c0014a78:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a82:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a8c:	eb df                	jmp    c0014a6d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a8e:	83 ec 0c             	sub    esp,0xc
c0014a91:	56                   	push   esi
c0014a92:	e8 71 fa ff ff       	call   c0014508 <Device::getName()>
c0014a97:	83 c4 10             	add    esp,0x10
c0014a9a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a9d:	75 b5                	jne    c0014a54 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a9f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014aa4:	7f 11                	jg     c0014ab7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014aa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014aaa:	0f b6 80 60 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd29a0]
c0014ab1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ab5:	eb 9d                	jmp    c0014a54 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ab7:	83 ec 0c             	sub    esp,0xc
c0014aba:	68 d4 ad 02 c0       	push   0xc002add4
c0014abf:	e8 d3 59 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0014ac4:	83 c4 10             	add    esp,0x10
c0014ac7:	eb 8b                	jmp    c0014a54 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014ac9 <nmiHandler(regs*, void*)>:
c0014ac9:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014ace:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ad2:	e9 b5 a4 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014ad7 <int_handler>:
c0014ad7:	55                   	push   ebp
c0014ad8:	57                   	push   edi
c0014ad9:	56                   	push   esi
c0014ada:	53                   	push   ebx
c0014adb:	83 ec 0c             	sub    esp,0xc
c0014ade:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014ae2:	80 3d 64 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f64,0x0
c0014ae9:	74 0b                	je     c0014af6 <int_handler+0x1f>
c0014aeb:	fa                   	cli    
c0014aec:	f4                   	hlt    
c0014aed:	80 3d 64 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f64,0x0
c0014af4:	75 f5                	jne    c0014aeb <int_handler+0x14>
c0014af6:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014afb:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014afe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b04:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b0a:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b0d:	83 f8 17             	cmp    eax,0x17
c0014b10:	77 13                	ja     c0014b25 <int_handler+0x4e>
c0014b12:	83 ec 08             	sub    esp,0x8
c0014b15:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b17:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b1a:	0f b6 c0             	movzx  eax,al
c0014b1d:	50                   	push   eax
c0014b1e:	57                   	push   edi
c0014b1f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b22:	83 c4 10             	add    esp,0x10
c0014b25:	83 c3 15             	add    ebx,0x15
c0014b28:	c1 e3 04             	shl    ebx,0x4
c0014b2b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b2f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b36:	31 db                	xor    ebx,ebx
c0014b38:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b3c:	85 c0                	test   eax,eax
c0014b3e:	74 13                	je     c0014b53 <int_handler+0x7c>
c0014b40:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b43:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b47:	74 1c                	je     c0014b65 <int_handler+0x8e>
c0014b49:	83 ec 08             	sub    esp,0x8
c0014b4c:	52                   	push   edx
c0014b4d:	56                   	push   esi
c0014b4e:	ff d0                	call   eax
c0014b50:	83 c4 10             	add    esp,0x10
c0014b53:	43                   	inc    ebx
c0014b54:	83 fb 04             	cmp    ebx,0x4
c0014b57:	75 df                	jne    c0014b38 <int_handler+0x61>
c0014b59:	83 c4 0c             	add    esp,0xc
c0014b5c:	31 c0                	xor    eax,eax
c0014b5e:	5b                   	pop    ebx
c0014b5f:	31 d2                	xor    edx,edx
c0014b61:	5e                   	pop    esi
c0014b62:	5f                   	pop    edi
c0014b63:	5d                   	pop    ebp
c0014b64:	c3                   	ret    
c0014b65:	83 ec 08             	sub    esp,0x8
c0014b68:	52                   	push   edx
c0014b69:	56                   	push   esi
c0014b6a:	ff d0                	call   eax
c0014b6c:	83 c4 10             	add    esp,0x10
c0014b6f:	83 c4 0c             	add    esp,0xc
c0014b72:	5b                   	pop    ebx
c0014b73:	5e                   	pop    esi
c0014b74:	5f                   	pop    edi
c0014b75:	5d                   	pop    ebp
c0014b76:	c3                   	ret    
c0014b77:	90                   	nop

c0014b78 <InterruptController::InterruptController(char const*)>:
c0014b78:	83 ec 1c             	sub    esp,0x1c
c0014b7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b7f:	83 ec 08             	sub    esp,0x8
c0014b82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b86:	50                   	push   eax
c0014b87:	e8 80 f8 ff ff       	call   c001440c <Device::Device(char const*)>
c0014b8c:	83 c4 10             	add    esp,0x10
c0014b8f:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c0014b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b98:	89 10                	mov    DWORD PTR [eax],edx
c0014b9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b9e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014ba8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014bb0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014bb8:	7f 5e                	jg     c0014c18 <InterruptController::InterruptController(char const*)+0xa0>
c0014bba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014bc2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014bc7:	7f 49                	jg     c0014c12 <InterruptController::InterruptController(char const*)+0x9a>
c0014bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bd1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bdc:	01 ca                	add    edx,ecx
c0014bde:	83 c2 54             	add    edx,0x54
c0014be1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bf1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bfc:	01 ca                	add    edx,ecx
c0014bfe:	81 c2 54 04 00 00    	add    edx,0x454
c0014c04:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c0c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c10:	eb b0                	jmp    c0014bc2 <InterruptController::InterruptController(char const*)+0x4a>
c0014c12:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c16:	eb 98                	jmp    c0014bb0 <InterruptController::InterruptController(char const*)+0x38>
c0014c18:	90                   	nop
c0014c19:	83 c4 1c             	add    esp,0x1c
c0014c1c:	c3                   	ret    
c0014c1d:	90                   	nop

c0014c1e <InterruptController::~InterruptController()>:
c0014c1e:	83 ec 0c             	sub    esp,0xc
c0014c21:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c0014c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c2a:	89 10                	mov    DWORD PTR [eax],edx
c0014c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c30:	83 ec 0c             	sub    esp,0xc
c0014c33:	50                   	push   eax
c0014c34:	e8 b5 f4 ff ff       	call   c00140ee <Device::~Device()>
c0014c39:	83 c4 10             	add    esp,0x10
c0014c3c:	90                   	nop
c0014c3d:	83 c4 0c             	add    esp,0xc
c0014c40:	c3                   	ret    
c0014c41:	90                   	nop

c0014c42 <InterruptController::~InterruptController()>:
c0014c42:	83 ec 0c             	sub    esp,0xc
c0014c45:	83 ec 0c             	sub    esp,0xc
c0014c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c4c:	e8 cd ff ff ff       	call   c0014c1e <InterruptController::~InterruptController()>
c0014c51:	83 c4 10             	add    esp,0x10
c0014c54:	83 ec 08             	sub    esp,0x8
c0014c57:	68 58 21 00 00       	push   0x2158
c0014c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c60:	e8 b1 e0 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0014c65:	83 c4 10             	add    esp,0x10
c0014c68:	83 c4 0c             	add    esp,0xc
c0014c6b:	c3                   	ret    

c0014c6c <displayDebugInfo(regs*)>:
c0014c6c:	55                   	push   ebp
c0014c6d:	57                   	push   edi
c0014c6e:	56                   	push   esi
c0014c6f:	53                   	push   ebx
c0014c70:	83 ec 24             	sub    esp,0x24
c0014c73:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c77:	0f 20 c2             	mov    edx,cr0
c0014c7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c7e:	0f 20 d7             	mov    edi,cr2
c0014c81:	0f 20 de             	mov    esi,cr3
c0014c84:	0f 20 e5             	mov    ebp,cr4
c0014c87:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c8a:	68 0e ae 02 c0       	push   0xc002ae0e
c0014c8f:	e8 62 e1 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014c94:	59                   	pop    ecx
c0014c95:	58                   	pop    eax
c0014c96:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c99:	68 19 ae 02 c0       	push   0xc002ae19
c0014c9e:	e8 53 e1 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014ca3:	58                   	pop    eax
c0014ca4:	5a                   	pop    edx
c0014ca5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014ca8:	68 24 ae 02 c0       	push   0xc002ae24
c0014cad:	e8 44 e1 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014cb2:	59                   	pop    ecx
c0014cb3:	58                   	pop    eax
c0014cb4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cb7:	68 2f ae 02 c0       	push   0xc002ae2f
c0014cbc:	e8 35 e1 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014cc1:	58                   	pop    eax
c0014cc2:	5a                   	pop    edx
c0014cc3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014cc6:	68 3a ae 02 c0       	push   0xc002ae3a
c0014ccb:	e8 26 e1 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014cd0:	59                   	pop    ecx
c0014cd1:	58                   	pop    eax
c0014cd2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014cd5:	68 45 ae 02 c0       	push   0xc002ae45
c0014cda:	e8 17 e1 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014cdf:	58                   	pop    eax
c0014ce0:	5a                   	pop    edx
c0014ce1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ce4:	68 50 ae 02 c0       	push   0xc002ae50
c0014ce9:	e8 08 e1 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014cee:	59                   	pop    ecx
c0014cef:	58                   	pop    eax
c0014cf0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014cf3:	68 5b ae 02 c0       	push   0xc002ae5b
c0014cf8:	e8 f9 e0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014cfd:	58                   	pop    eax
c0014cfe:	5a                   	pop    edx
c0014cff:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d02:	68 66 ae 02 c0       	push   0xc002ae66
c0014d07:	e8 ea e0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014d0c:	59                   	pop    ecx
c0014d0d:	58                   	pop    eax
c0014d0e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d11:	68 75 ae 02 c0       	push   0xc002ae75
c0014d16:	e8 db e0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014d1b:	58                   	pop    eax
c0014d1c:	5a                   	pop    edx
c0014d1d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d20:	68 80 ae 02 c0       	push   0xc002ae80
c0014d25:	e8 cc e0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014d2a:	59                   	pop    ecx
c0014d2b:	58                   	pop    eax
c0014d2c:	57                   	push   edi
c0014d2d:	68 8b ae 02 c0       	push   0xc002ae8b
c0014d32:	e8 bf e0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014d37:	58                   	pop    eax
c0014d38:	5a                   	pop    edx
c0014d39:	56                   	push   esi
c0014d3a:	68 96 ae 02 c0       	push   0xc002ae96
c0014d3f:	e8 b2 e0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0014d44:	59                   	pop    ecx
c0014d45:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014d4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d50:	e8 7c bf ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c0014d55:	58                   	pop    eax
c0014d56:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d59:	5a                   	pop    edx
c0014d5a:	c1 e0 05             	shl    eax,0x5
c0014d5d:	05 c0 d3 02 c0       	add    eax,0xc002d3c0
c0014d62:	50                   	push   eax
c0014d63:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014d68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d6e:	e8 7d c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014d73:	59                   	pop    ecx
c0014d74:	58                   	pop    eax
c0014d75:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014d7a:	68 a1 ae 02 c0       	push   0xc002aea1
c0014d7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d85:	e8 66 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014d8a:	58                   	pop    eax
c0014d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d90:	5a                   	pop    edx
c0014d91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d94:	83 c0 0c             	add    eax,0xc
c0014d97:	50                   	push   eax
c0014d98:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014d9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da3:	e8 48 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014da8:	59                   	pop    ecx
c0014da9:	58                   	pop    eax
c0014daa:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014daf:	68 aa ae 02 c0       	push   0xc002aeaa
c0014db4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dba:	e8 31 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014dbf:	58                   	pop    eax
c0014dc0:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014dc5:	5a                   	pop    edx
c0014dc6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dcf:	e8 42 c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014dd4:	59                   	pop    ecx
c0014dd5:	58                   	pop    eax
c0014dd6:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014ddb:	68 b2 ae 02 c0       	push   0xc002aeb2
c0014de0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de6:	e8 05 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014deb:	58                   	pop    eax
c0014dec:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014df1:	5a                   	pop    edx
c0014df2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014df5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dfb:	e8 16 c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014e00:	59                   	pop    ecx
c0014e01:	58                   	pop    eax
c0014e02:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014e07:	68 ba ae 02 c0       	push   0xc002aeba
c0014e0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e12:	e8 d9 c2 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014e17:	58                   	pop    eax
c0014e18:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014e1d:	5a                   	pop    edx
c0014e1e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e27:	e8 ea c2 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014e2c:	59                   	pop    ecx
c0014e2d:	58                   	pop    eax
c0014e2e:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014e33:	68 c2 ae 02 c0       	push   0xc002aec2
c0014e38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3e:	e8 ad c2 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014e43:	58                   	pop    eax
c0014e44:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014e49:	5a                   	pop    edx
c0014e4a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e53:	e8 be c2 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014e58:	59                   	pop    ecx
c0014e59:	58                   	pop    eax
c0014e5a:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014e5f:	68 ca ae 02 c0       	push   0xc002aeca
c0014e64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6a:	e8 81 c2 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014e6f:	58                   	pop    eax
c0014e70:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014e75:	5a                   	pop    edx
c0014e76:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7f:	e8 92 c2 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014e84:	59                   	pop    ecx
c0014e85:	58                   	pop    eax
c0014e86:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014e8b:	68 d2 ae 02 c0       	push   0xc002aed2
c0014e90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e96:	e8 55 c2 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014e9b:	58                   	pop    eax
c0014e9c:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014ea1:	5a                   	pop    edx
c0014ea2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014ea5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eab:	e8 66 c2 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014eb0:	59                   	pop    ecx
c0014eb1:	58                   	pop    eax
c0014eb2:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014eb7:	68 da ae 02 c0       	push   0xc002aeda
c0014ebc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec2:	e8 29 c2 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ec7:	58                   	pop    eax
c0014ec8:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014ecd:	5a                   	pop    edx
c0014ece:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ed2:	52                   	push   edx
c0014ed3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed9:	e8 38 c2 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014ede:	59                   	pop    ecx
c0014edf:	58                   	pop    eax
c0014ee0:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014ee5:	68 e3 ae 02 c0       	push   0xc002aee3
c0014eea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef0:	e8 fb c1 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ef5:	58                   	pop    eax
c0014ef6:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014efb:	5a                   	pop    edx
c0014efc:	57                   	push   edi
c0014efd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f03:	e8 0e c2 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014f08:	59                   	pop    ecx
c0014f09:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f0e:	5f                   	pop    edi
c0014f0f:	68 eb ae 02 c0       	push   0xc002aeeb
c0014f14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1a:	e8 d1 c1 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014f1f:	58                   	pop    eax
c0014f20:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f25:	5a                   	pop    edx
c0014f26:	56                   	push   esi
c0014f27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2d:	e8 e4 c1 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014f32:	59                   	pop    ecx
c0014f33:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f38:	5e                   	pop    esi
c0014f39:	68 f3 ae 02 c0       	push   0xc002aef3
c0014f3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f44:	e8 a7 c1 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014f49:	5f                   	pop    edi
c0014f4a:	58                   	pop    eax
c0014f4b:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f50:	55                   	push   ebp
c0014f51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f57:	e8 ba c1 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014f5c:	58                   	pop    eax
c0014f5d:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f62:	5a                   	pop    edx
c0014f63:	68 fb ae 02 c0       	push   0xc002aefb
c0014f68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6e:	e8 7d c1 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014f73:	0f 21 c0             	mov    eax,db0
c0014f76:	59                   	pop    ecx
c0014f77:	5e                   	pop    esi
c0014f78:	50                   	push   eax
c0014f79:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f84:	e8 8d c1 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014f89:	5f                   	pop    edi
c0014f8a:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f8f:	5d                   	pop    ebp
c0014f90:	68 04 af 02 c0       	push   0xc002af04
c0014f95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9b:	e8 50 c1 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014fa0:	0f 21 c8             	mov    eax,db1
c0014fa3:	5a                   	pop    edx
c0014fa4:	59                   	pop    ecx
c0014fa5:	50                   	push   eax
c0014fa6:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014fab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb1:	e8 60 c1 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014fb6:	5e                   	pop    esi
c0014fb7:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014fbc:	5f                   	pop    edi
c0014fbd:	68 0c af 02 c0       	push   0xc002af0c
c0014fc2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc8:	e8 23 c1 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014fcd:	0f 21 d0             	mov    eax,db2
c0014fd0:	5d                   	pop    ebp
c0014fd1:	5a                   	pop    edx
c0014fd2:	50                   	push   eax
c0014fd3:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014fd8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fde:	e8 33 c1 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014fe3:	59                   	pop    ecx
c0014fe4:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014fe9:	5e                   	pop    esi
c0014fea:	68 14 af 02 c0       	push   0xc002af14
c0014fef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff5:	e8 f6 c0 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ffa:	0f 21 d8             	mov    eax,db3
c0014ffd:	5f                   	pop    edi
c0014ffe:	5d                   	pop    ebp
c0014fff:	50                   	push   eax
c0015000:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015005:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500b:	e8 06 c1 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0015010:	58                   	pop    eax
c0015011:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015016:	5a                   	pop    edx
c0015017:	68 1c af 02 c0       	push   0xc002af1c
c001501c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015022:	e8 c9 c0 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0015027:	0f 21 f0             	mov    eax,db6
c001502a:	59                   	pop    ecx
c001502b:	5e                   	pop    esi
c001502c:	50                   	push   eax
c001502d:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015032:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015038:	e8 d9 c0 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001503d:	5f                   	pop    edi
c001503e:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015043:	5d                   	pop    ebp
c0015044:	68 24 af 02 c0       	push   0xc002af24
c0015049:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504f:	e8 9c c0 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0015054:	0f 21 f8             	mov    eax,db7
c0015057:	5a                   	pop    edx
c0015058:	59                   	pop    ecx
c0015059:	50                   	push   eax
c001505a:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001505f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015065:	e8 ac c0 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001506a:	5e                   	pop    esi
c001506b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001506e:	e8 50 85 00 00       	call   c001d5c3 <Thr::getDriverNameFromAddress(unsigned long)>
c0015073:	83 c4 10             	add    esp,0x10
c0015076:	85 c0                	test   eax,eax
c0015078:	74 7d                	je     c00150f7 <displayDebugInfo(regs*)+0x48b>
c001507a:	89 c6                	mov    esi,eax
c001507c:	50                   	push   eax
c001507d:	50                   	push   eax
c001507e:	56                   	push   esi
c001507f:	68 2c af 02 c0       	push   0xc002af2c
c0015084:	e8 6d dd ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0015089:	5a                   	pop    edx
c001508a:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001508f:	59                   	pop    ecx
c0015090:	68 3a af 02 c0       	push   0xc002af3a
c0015095:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509b:	e8 50 c0 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c00150a0:	5f                   	pop    edi
c00150a1:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00150a6:	5d                   	pop    ebp
c00150a7:	56                   	push   esi
c00150a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ae:	e8 3d c0 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c00150b3:	58                   	pop    eax
c00150b4:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00150b9:	5a                   	pop    edx
c00150ba:	68 46 af 02 c0       	push   0xc002af46
c00150bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c5:	e8 26 c0 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c00150ca:	59                   	pop    ecx
c00150cb:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00150d0:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00150d6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150d9:	e8 1c 85 00 00       	call   c001d5fa <Thr::getDriverOffsetFromAddress(unsigned long)>
c00150de:	5b                   	pop    ebx
c00150df:	5d                   	pop    ebp
c00150e0:	50                   	push   eax
c00150e1:	57                   	push   edi
c00150e2:	e8 2f c0 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c00150e7:	58                   	pop    eax
c00150e8:	5a                   	pop    edx
c00150e9:	56                   	push   esi
c00150ea:	68 52 af 02 c0       	push   0xc002af52
c00150ef:	e8 02 dd ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	fa                   	cli    
c00150f8:	f4                   	hlt    
c00150f9:	eb fe                	jmp    c00150f9 <displayDebugInfo(regs*)+0x48d>

c00150fb <x87EmulHandler(regs*, void*)>:
c00150fb:	53                   	push   ebx
c00150fc:	83 ec 14             	sub    esp,0x14
c00150ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015103:	53                   	push   ebx
c0015104:	e8 47 a8 00 00       	call   c001f950 <Vm::x87Handler(regs*)>
c0015109:	83 c4 10             	add    esp,0x10
c001510c:	84 c0                	test   al,al
c001510e:	74 05                	je     c0015115 <x87EmulHandler(regs*, void*)+0x1a>
c0015110:	83 c4 08             	add    esp,0x8
c0015113:	5b                   	pop    ebx
c0015114:	c3                   	ret    
c0015115:	83 ec 0c             	sub    esp,0xc
c0015118:	68 62 af 02 c0       	push   0xc002af62
c001511d:	e8 d4 dc ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0015122:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015125:	e8 42 fb ff ff       	call   c0014c6c <displayDebugInfo(regs*)>

c001512a <gpFault(regs*, void*)>:
c001512a:	53                   	push   ebx
c001512b:	83 ec 14             	sub    esp,0x14
c001512e:	c7 05 b4 e5 02 c0 cd ec 01 c0 	mov    DWORD PTR ds:0xc002e5b4,0xc001eccd
c0015138:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001513c:	53                   	push   ebx
c001513d:	e8 8b 9b 00 00       	call   c001eccd <Vm::faultHandler(regs*)>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	84 c0                	test   al,al
c0015147:	74 05                	je     c001514e <gpFault(regs*, void*)+0x24>
c0015149:	83 c4 08             	add    esp,0x8
c001514c:	5b                   	pop    ebx
c001514d:	c3                   	ret    
c001514e:	83 ec 0c             	sub    esp,0xc
c0015151:	68 78 af 02 c0       	push   0xc002af78
c0015156:	e8 9b dc ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001515b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001515e:	e8 09 fb ff ff       	call   c0014c6c <displayDebugInfo(regs*)>

c0015163 <pgFault(regs*, void*)>:
c0015163:	83 ec 18             	sub    esp,0x18
c0015166:	68 93 af 02 c0       	push   0xc002af93
c001516b:	e8 86 dc ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0015170:	0f 20 d0             	mov    eax,cr2
c0015173:	5a                   	pop    edx
c0015174:	59                   	pop    ecx
c0015175:	50                   	push   eax
c0015176:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001517b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001517e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015184:	e8 b1 d8 ff ff       	call   c0012a3a <VAS::tryLoadBackOffDisk(unsigned long)>
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	84 c0                	test   al,al
c001518e:	74 04                	je     c0015194 <pgFault(regs*, void*)+0x31>
c0015190:	83 c4 0c             	add    esp,0xc
c0015193:	c3                   	ret    
c0015194:	83 ec 0c             	sub    esp,0xc
c0015197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001519b:	e8 cc fa ff ff       	call   c0014c6c <displayDebugInfo(regs*)>

c00151a0 <otherISRHandler(regs*, void*)>:
c00151a0:	53                   	push   ebx
c00151a1:	83 ec 0c             	sub    esp,0xc
c00151a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00151a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00151ab:	50                   	push   eax
c00151ac:	50                   	push   eax
c00151ad:	68 a0 af 02 c0       	push   0xc002afa0
c00151b2:	e8 3f dc ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00151b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151ba:	e8 ad fa ff ff       	call   c0014c6c <displayDebugInfo(regs*)>

c00151bf <opcodeFault(regs*, void*)>:
c00151bf:	55                   	push   ebp
c00151c0:	89 e5                	mov    ebp,esp
c00151c2:	56                   	push   esi
c00151c3:	53                   	push   ebx
c00151c4:	83 ec 40             	sub    esp,0x40
c00151c7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00151cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151d2:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00151d8:	84 c0                	test   al,al
c00151da:	74 24                	je     c0015200 <opcodeFault(regs*, void*)+0x41>
c00151dc:	83 ec 0c             	sub    esp,0xc
c00151df:	68 c0 af 02 c0       	push   0xc002afc0
c00151e4:	e8 0d dc ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151f2:	8d 50 19             	lea    edx,[eax+0x19]
c00151f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151fb:	e9 be 05 00 00       	jmp    c00157be <opcodeFault(regs*, void*)+0x5ff>
c0015200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015203:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015206:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015209:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001520d:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015214:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015217:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001521a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521d:	8a 00                	mov    al,BYTE PTR [eax]
c001521f:	3c f0                	cmp    al,0xf0
c0015221:	75 17                	jne    c001523a <opcodeFault(regs*, void*)+0x7b>
c0015223:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015229:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001522c:	8d 50 01             	lea    edx,[eax+0x1]
c001522f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015232:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015235:	e9 da 00 00 00       	jmp    c0015314 <opcodeFault(regs*, void*)+0x155>
c001523a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523d:	8a 00                	mov    al,BYTE PTR [eax]
c001523f:	3c f2                	cmp    al,0xf2
c0015241:	74 09                	je     c001524c <opcodeFault(regs*, void*)+0x8d>
c0015243:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015246:	8a 00                	mov    al,BYTE PTR [eax]
c0015248:	3c f3                	cmp    al,0xf3
c001524a:	75 1b                	jne    c0015267 <opcodeFault(regs*, void*)+0xa8>
c001524c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015250:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015256:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015259:	8d 50 01             	lea    edx,[eax+0x1]
c001525c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015262:	e9 ad 00 00 00       	jmp    c0015314 <opcodeFault(regs*, void*)+0x155>
c0015267:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526a:	8a 00                	mov    al,BYTE PTR [eax]
c001526c:	3c 66                	cmp    al,0x66
c001526e:	75 1f                	jne    c001528f <opcodeFault(regs*, void*)+0xd0>
c0015270:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015274:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015278:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001527b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015281:	8d 50 01             	lea    edx,[eax+0x1]
c0015284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015287:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001528a:	e9 85 00 00 00       	jmp    c0015314 <opcodeFault(regs*, void*)+0x155>
c001528f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015292:	8a 00                	mov    al,BYTE PTR [eax]
c0015294:	3c 67                	cmp    al,0x67
c0015296:	75 18                	jne    c00152b0 <opcodeFault(regs*, void*)+0xf1>
c0015298:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001529c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001529f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a5:	8d 50 01             	lea    edx,[eax+0x1]
c00152a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ae:	eb 64                	jmp    c0015314 <opcodeFault(regs*, void*)+0x155>
c00152b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b3:	8a 00                	mov    al,BYTE PTR [eax]
c00152b5:	3c 2e                	cmp    al,0x2e
c00152b7:	74 09                	je     c00152c2 <opcodeFault(regs*, void*)+0x103>
c00152b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bc:	8a 00                	mov    al,BYTE PTR [eax]
c00152be:	3c 3e                	cmp    al,0x3e
c00152c0:	75 18                	jne    c00152da <opcodeFault(regs*, void*)+0x11b>
c00152c2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152c6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152cf:	8d 50 01             	lea    edx,[eax+0x1]
c00152d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152d8:	eb 3a                	jmp    c0015314 <opcodeFault(regs*, void*)+0x155>
c00152da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152dd:	8a 00                	mov    al,BYTE PTR [eax]
c00152df:	3c 36                	cmp    al,0x36
c00152e1:	74 1b                	je     c00152fe <opcodeFault(regs*, void*)+0x13f>
c00152e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e6:	8a 00                	mov    al,BYTE PTR [eax]
c00152e8:	3c 26                	cmp    al,0x26
c00152ea:	74 12                	je     c00152fe <opcodeFault(regs*, void*)+0x13f>
c00152ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ef:	8a 00                	mov    al,BYTE PTR [eax]
c00152f1:	3c 64                	cmp    al,0x64
c00152f3:	74 09                	je     c00152fe <opcodeFault(regs*, void*)+0x13f>
c00152f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f8:	8a 00                	mov    al,BYTE PTR [eax]
c00152fa:	3c 65                	cmp    al,0x65
c00152fc:	75 16                	jne    c0015314 <opcodeFault(regs*, void*)+0x155>
c00152fe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015302:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015308:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530b:	8d 50 01             	lea    edx,[eax+0x1]
c001530e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015311:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015314:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015317:	8a 00                	mov    al,BYTE PTR [eax]
c0015319:	3c 0f                	cmp    al,0xf
c001531b:	0f 85 ad 00 00 00    	jne    c00153ce <opcodeFault(regs*, void*)+0x20f>
c0015321:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015324:	40                   	inc    eax
c0015325:	8a 00                	mov    al,BYTE PTR [eax]
c0015327:	3c c2                	cmp    al,0xc2
c0015329:	74 0e                	je     c0015339 <opcodeFault(regs*, void*)+0x17a>
c001532b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532e:	40                   	inc    eax
c001532f:	8a 00                	mov    al,BYTE PTR [eax]
c0015331:	3c c3                	cmp    al,0xc3
c0015333:	0f 85 95 00 00 00    	jne    c00153ce <opcodeFault(regs*, void*)+0x20f>
c0015339:	83 ec 0c             	sub    esp,0xc
c001533c:	68 e3 af 02 c0       	push   0xc002afe3
c0015341:	e8 b0 da ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534f:	8d 50 01             	lea    edx,[eax+0x1]
c0015352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015355:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015358:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001535b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535e:	8a 00                	mov    al,BYTE PTR [eax]
c0015360:	8d 50 fe             	lea    edx,[eax-0x2]
c0015363:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015366:	88 10                	mov    BYTE PTR [eax],dl
c0015368:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001536b:	50                   	push   eax
c001536c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001536f:	50                   	push   eax
c0015370:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015373:	50                   	push   eax
c0015374:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015377:	e8 e2 47 00 00       	call   c0019b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001537c:	83 c4 10             	add    esp,0x10
c001537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015382:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015385:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015388:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001538b:	01 d0                	add    eax,edx
c001538d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015393:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015396:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015399:	48                   	dec    eax
c001539a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001539d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00153a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a9:	83 ec 04             	sub    esp,0x4
c00153ac:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153af:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153b2:	50                   	push   eax
c00153b3:	e8 fc ad fe ff       	call   c00001b4 <voodooXADD>
c00153b8:	83 c4 10             	add    esp,0x10
c00153bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00153be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00153c1:	01 c2                	add    edx,eax
c00153c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c9:	e9 f0 03 00 00       	jmp    c00157be <opcodeFault(regs*, void*)+0x5ff>
c00153ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d1:	8a 00                	mov    al,BYTE PTR [eax]
c00153d3:	3c 0f                	cmp    al,0xf
c00153d5:	0f 85 8b 01 00 00    	jne    c0015566 <opcodeFault(regs*, void*)+0x3a7>
c00153db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153de:	40                   	inc    eax
c00153df:	8a 00                	mov    al,BYTE PTR [eax]
c00153e1:	3c c7                	cmp    al,0xc7
c00153e3:	0f 86 7d 01 00 00    	jbe    c0015566 <opcodeFault(regs*, void*)+0x3a7>
c00153e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ec:	40                   	inc    eax
c00153ed:	8a 00                	mov    al,BYTE PTR [eax]
c00153ef:	3c cf                	cmp    al,0xcf
c00153f1:	0f 87 6f 01 00 00    	ja     c0015566 <opcodeFault(regs*, void*)+0x3a7>
c00153f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fa:	40                   	inc    eax
c00153fb:	8a 00                	mov    al,BYTE PTR [eax]
c00153fd:	83 c0 38             	add    eax,0x38
c0015400:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015403:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015407:	75 0b                	jne    c0015414 <opcodeFault(regs*, void*)+0x255>
c0015409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001540f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015412:	eb 75                	jmp    c0015489 <opcodeFault(regs*, void*)+0x2ca>
c0015414:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015418:	75 0b                	jne    c0015425 <opcodeFault(regs*, void*)+0x266>
c001541a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015420:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015423:	eb 64                	jmp    c0015489 <opcodeFault(regs*, void*)+0x2ca>
c0015425:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015429:	75 0b                	jne    c0015436 <opcodeFault(regs*, void*)+0x277>
c001542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015431:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015434:	eb 53                	jmp    c0015489 <opcodeFault(regs*, void*)+0x2ca>
c0015436:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001543a:	75 0b                	jne    c0015447 <opcodeFault(regs*, void*)+0x288>
c001543c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015442:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015445:	eb 42                	jmp    c0015489 <opcodeFault(regs*, void*)+0x2ca>
c0015447:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001544b:	75 0b                	jne    c0015458 <opcodeFault(regs*, void*)+0x299>
c001544d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015450:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015453:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015456:	eb 31                	jmp    c0015489 <opcodeFault(regs*, void*)+0x2ca>
c0015458:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001545c:	75 0b                	jne    c0015469 <opcodeFault(regs*, void*)+0x2aa>
c001545e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015461:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015464:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015467:	eb 20                	jmp    c0015489 <opcodeFault(regs*, void*)+0x2ca>
c0015469:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001546d:	75 0b                	jne    c001547a <opcodeFault(regs*, void*)+0x2bb>
c001546f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015472:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015475:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015478:	eb 0f                	jmp    c0015489 <opcodeFault(regs*, void*)+0x2ca>
c001547a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001547e:	75 09                	jne    c0015489 <opcodeFault(regs*, void*)+0x2ca>
c0015480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015483:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015486:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015489:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001548d:	74 10                	je     c001549f <opcodeFault(regs*, void*)+0x2e0>
c001548f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015496:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001549d:	eb 2d                	jmp    c00154cc <opcodeFault(regs*, void*)+0x30d>
c001549f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154a2:	c1 e0 18             	shl    eax,0x18
c00154a5:	89 c2                	mov    edx,eax
c00154a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154aa:	c1 e0 08             	shl    eax,0x8
c00154ad:	25 00 00 ff 00       	and    eax,0xff0000
c00154b2:	09 c2                	or     edx,eax
c00154b4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154b7:	c1 e8 08             	shr    eax,0x8
c00154ba:	25 00 ff 00 00       	and    eax,0xff00
c00154bf:	09 c2                	or     edx,eax
c00154c1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154c4:	c1 e8 18             	shr    eax,0x18
c00154c7:	09 d0                	or     eax,edx
c00154c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154cc:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154d0:	75 0b                	jne    c00154dd <opcodeFault(regs*, void*)+0x31e>
c00154d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154d8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00154db:	eb 75                	jmp    c0015552 <opcodeFault(regs*, void*)+0x393>
c00154dd:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154e1:	75 0b                	jne    c00154ee <opcodeFault(regs*, void*)+0x32f>
c00154e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154e9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00154ec:	eb 64                	jmp    c0015552 <opcodeFault(regs*, void*)+0x393>
c00154ee:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154f2:	75 0b                	jne    c00154ff <opcodeFault(regs*, void*)+0x340>
c00154f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154fa:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00154fd:	eb 53                	jmp    c0015552 <opcodeFault(regs*, void*)+0x393>
c00154ff:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015503:	75 0b                	jne    c0015510 <opcodeFault(regs*, void*)+0x351>
c0015505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015508:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001550b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001550e:	eb 42                	jmp    c0015552 <opcodeFault(regs*, void*)+0x393>
c0015510:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015514:	75 0b                	jne    c0015521 <opcodeFault(regs*, void*)+0x362>
c0015516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015519:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001551c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001551f:	eb 31                	jmp    c0015552 <opcodeFault(regs*, void*)+0x393>
c0015521:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015525:	75 0b                	jne    c0015532 <opcodeFault(regs*, void*)+0x373>
c0015527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001552d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015530:	eb 20                	jmp    c0015552 <opcodeFault(regs*, void*)+0x393>
c0015532:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015536:	75 0b                	jne    c0015543 <opcodeFault(regs*, void*)+0x384>
c0015538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001553e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015541:	eb 0f                	jmp    c0015552 <opcodeFault(regs*, void*)+0x393>
c0015543:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015547:	75 09                	jne    c0015552 <opcodeFault(regs*, void*)+0x393>
c0015549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001554f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015555:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015558:	8d 50 02             	lea    edx,[eax+0x2]
c001555b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015561:	e9 58 02 00 00       	jmp    c00157be <opcodeFault(regs*, void*)+0x5ff>
c0015566:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015569:	8a 00                	mov    al,BYTE PTR [eax]
c001556b:	3c 0f                	cmp    al,0xf
c001556d:	0f 85 76 01 00 00    	jne    c00156e9 <opcodeFault(regs*, void*)+0x52a>
c0015573:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015576:	40                   	inc    eax
c0015577:	8a 00                	mov    al,BYTE PTR [eax]
c0015579:	3c c7                	cmp    al,0xc7
c001557b:	0f 85 68 01 00 00    	jne    c00156e9 <opcodeFault(regs*, void*)+0x52a>
c0015581:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015587:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001558a:	8d 50 01             	lea    edx,[eax+0x1]
c001558d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015590:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015593:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015596:	50                   	push   eax
c0015597:	8d 45 bb             	lea    eax,[ebp-0x45]
c001559a:	50                   	push   eax
c001559b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001559e:	50                   	push   eax
c001559f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155a2:	e8 b7 45 00 00       	call   c0019b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00155a7:	83 c4 10             	add    esp,0x10
c00155aa:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00155ad:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00155b0:	83 f0 01             	xor    eax,0x1
c00155b3:	84 c0                	test   al,al
c00155b5:	0f 84 2e 01 00 00    	je     c00156e9 <opcodeFault(regs*, void*)+0x52a>
c00155bb:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00155be:	3c 01                	cmp    al,0x1
c00155c0:	0f 85 23 01 00 00    	jne    c00156e9 <opcodeFault(regs*, void*)+0x52a>
c00155c6:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00155c9:	83 f0 01             	xor    eax,0x1
c00155cc:	84 c0                	test   al,al
c00155ce:	0f 84 15 01 00 00    	je     c00156e9 <opcodeFault(regs*, void*)+0x52a>
c00155d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155da:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155dd:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00155e4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00155e7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00155ea:	89 c2                	mov    edx,eax
c00155ec:	b8 00 00 00 00       	mov    eax,0x0
c00155f1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155f4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00155f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fa:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155fd:	ba 00 00 00 00       	mov    edx,0x0
c0015602:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015605:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001560e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015611:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015618:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001561b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001561e:	89 c2                	mov    edx,eax
c0015620:	b8 00 00 00 00       	mov    eax,0x0
c0015625:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015628:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001562b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015631:	ba 00 00 00 00       	mov    edx,0x0
c0015636:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015639:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001563c:	e8 7b 86 00 00       	call   c001dcbc <lockScheduler()>
c0015641:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015644:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015647:	8b 00                	mov    eax,DWORD PTR [eax]
c0015649:	89 c1                	mov    ecx,eax
c001564b:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001564e:	89 cb                	mov    ebx,ecx
c0015650:	89 d0                	mov    eax,edx
c0015652:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015655:	89 c6                	mov    esi,eax
c0015657:	89 f0                	mov    eax,esi
c0015659:	09 d8                	or     eax,ebx
c001565b:	85 c0                	test   eax,eax
c001565d:	75 21                	jne    c0015680 <opcodeFault(regs*, void*)+0x4c1>
c001565f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015662:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015665:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015668:	89 01                	mov    DWORD PTR [ecx],eax
c001566a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001566d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015670:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015673:	83 c8 40             	or     eax,0x40
c0015676:	89 c2                	mov    edx,eax
c0015678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001567e:	eb 3e                	jmp    c00156be <opcodeFault(regs*, void*)+0x4ff>
c0015680:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015683:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015686:	8b 00                	mov    eax,DWORD PTR [eax]
c0015688:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001568b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001568e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015694:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015697:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001569a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001569d:	89 d0                	mov    eax,edx
c001569f:	31 d2                	xor    edx,edx
c00156a1:	89 c3                	mov    ebx,eax
c00156a3:	89 d6                	mov    esi,edx
c00156a5:	89 da                	mov    edx,ebx
c00156a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156aa:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156b3:	83 e0 bf             	and    eax,0xffffffbf
c00156b6:	89 c2                	mov    edx,eax
c00156b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bb:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00156be:	e8 fb 85 00 00       	call   c001dcbe <unlockScheduler()>
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156c9:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00156cc:	01 c2                	add    edx,eax
c00156ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156d4:	83 ec 0c             	sub    esp,0xc
c00156d7:	68 f2 af 02 c0       	push   0xc002aff2
c00156dc:	e8 15 d7 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00156e1:	83 c4 10             	add    esp,0x10
c00156e4:	e9 d5 00 00 00       	jmp    c00157be <opcodeFault(regs*, void*)+0x5ff>
c00156e9:	83 ec 0c             	sub    esp,0xc
c00156ec:	68 05 b0 02 c0       	push   0xc002b005
c00156f1:	e8 00 d7 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00156f6:	83 c4 10             	add    esp,0x10
c00156f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015702:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015705:	c1 e0 04             	shl    eax,0x4
c0015708:	01 d0                	add    eax,edx
c001570a:	83 c0 03             	add    eax,0x3
c001570d:	8a 00                	mov    al,BYTE PTR [eax]
c001570f:	0f b6 d8             	movzx  ebx,al
c0015712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015715:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001571e:	c1 e0 04             	shl    eax,0x4
c0015721:	01 d0                	add    eax,edx
c0015723:	83 c0 02             	add    eax,0x2
c0015726:	8a 00                	mov    al,BYTE PTR [eax]
c0015728:	0f b6 c8             	movzx  ecx,al
c001572b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015734:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015737:	c1 e0 04             	shl    eax,0x4
c001573a:	01 d0                	add    eax,edx
c001573c:	40                   	inc    eax
c001573d:	8a 00                	mov    al,BYTE PTR [eax]
c001573f:	0f b6 d0             	movzx  edx,al
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001574e:	c1 e0 04             	shl    eax,0x4
c0015751:	01 f0                	add    eax,esi
c0015753:	8a 00                	mov    al,BYTE PTR [eax]
c0015755:	0f b6 c0             	movzx  eax,al
c0015758:	83 ec 0c             	sub    esp,0xc
c001575b:	53                   	push   ebx
c001575c:	51                   	push   ecx
c001575d:	52                   	push   edx
c001575e:	50                   	push   eax
c001575f:	68 18 b0 02 c0       	push   0xc002b018
c0015764:	e8 8d d6 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0015769:	83 c4 20             	add    esp,0x20
c001576c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015772:	83 c0 03             	add    eax,0x3
c0015775:	8a 00                	mov    al,BYTE PTR [eax]
c0015777:	0f b6 d8             	movzx  ebx,al
c001577a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015780:	83 c0 02             	add    eax,0x2
c0015783:	8a 00                	mov    al,BYTE PTR [eax]
c0015785:	0f b6 c8             	movzx  ecx,al
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001578e:	40                   	inc    eax
c001578f:	8a 00                	mov    al,BYTE PTR [eax]
c0015791:	0f b6 d0             	movzx  edx,al
c0015794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015797:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001579a:	8a 00                	mov    al,BYTE PTR [eax]
c001579c:	0f b6 c0             	movzx  eax,al
c001579f:	83 ec 0c             	sub    esp,0xc
c00157a2:	53                   	push   ebx
c00157a3:	51                   	push   ecx
c00157a4:	52                   	push   edx
c00157a5:	50                   	push   eax
c00157a6:	68 40 b0 02 c0       	push   0xc002b040
c00157ab:	e8 46 d6 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00157b0:	83 c4 20             	add    esp,0x20
c00157b3:	83 ec 0c             	sub    esp,0xc
c00157b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157b9:	e8 ae f4 ff ff       	call   c0014c6c <displayDebugInfo(regs*)>
c00157be:	8d 65 f8             	lea    esp,[ebp-0x8]
c00157c1:	5b                   	pop    ebx
c00157c2:	5e                   	pop    esi
c00157c3:	5d                   	pop    ebp
c00157c4:	c3                   	ret    

c00157c5 <displayProgramFault(char const*)>:
c00157c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157cd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00157d3:	85 c0                	test   eax,eax
c00157d5:	74 15                	je     c00157ec <displayProgramFault(char const*)+0x27>
c00157d7:	83 ec 0c             	sub    esp,0xc
c00157da:	6a 04                	push   0x4
c00157dc:	6a 0f                	push   0xf
c00157de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157e2:	50                   	push   eax
c00157e3:	e8 ca b5 ff ff       	call   c0010db2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00157e8:	83 c4 1c             	add    esp,0x1c
c00157eb:	c3                   	ret    
c00157ec:	c3                   	ret    

c00157ed <setupInterruptController()>:
c00157ed:	55                   	push   ebp
c00157ee:	89 e5                	mov    ebp,esp
c00157f0:	53                   	push   ebx
c00157f1:	83 ec 24             	sub    esp,0x24
c00157f4:	b8 00 00 00 00       	mov    eax,0x0
c00157f9:	85 c0                	test   eax,eax
c00157fb:	0f 95 c0             	setne  al
c00157fe:	84 c0                	test   al,al
c0015800:	74 5b                	je     c001585d <setupInterruptController()+0x70>
c0015802:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015809:	83 ec 0c             	sub    esp,0xc
c001580c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001580f:	e8 2c a0 ff ff       	call   c000f840 <malloc>
c0015814:	83 c4 10             	add    esp,0x10
c0015817:	89 c3                	mov    ebx,eax
c0015819:	83 ec 0c             	sub    esp,0xc
c001581c:	53                   	push   ebx
c001581d:	e8 f2 ff 00 00       	call   c0025814 <APIC::APIC()>
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015828:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001582b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001582e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015830:	83 c0 08             	add    eax,0x8
c0015833:	8b 00                	mov    eax,DWORD PTR [eax]
c0015835:	6a 00                	push   0x0
c0015837:	6a 00                	push   0x0
c0015839:	6a 00                	push   0x0
c001583b:	52                   	push   edx
c001583c:	ff d0                	call   eax
c001583e:	83 c4 10             	add    esp,0x10
c0015841:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0015846:	83 ec 08             	sub    esp,0x8
c0015849:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001584c:	50                   	push   eax
c001584d:	e8 ca e9 ff ff       	call   c001421c <Device::addChild(Device*)>
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015858:	e9 52 03 00 00       	jmp    c0015baf <setupInterruptController()+0x3c2>
c001585d:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0015862:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015868:	83 e0 01             	and    eax,0x1
c001586b:	84 c0                	test   al,al
c001586d:	0f 95 c0             	setne  al
c0015870:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015873:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001587a:	83 ec 0c             	sub    esp,0xc
c001587d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015880:	e8 bb 9f ff ff       	call   c000f840 <malloc>
c0015885:	83 c4 10             	add    esp,0x10
c0015888:	89 c3                	mov    ebx,eax
c001588a:	83 ec 0c             	sub    esp,0xc
c001588d:	53                   	push   ebx
c001588e:	e8 d9 04 01 00       	call   c0025d6c <PIC::PIC()>
c0015893:	83 c4 10             	add    esp,0x10
c0015896:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015899:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001589c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001589f:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a1:	83 c0 08             	add    eax,0x8
c00158a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a6:	6a 00                	push   0x0
c00158a8:	6a 00                	push   0x0
c00158aa:	6a 00                	push   0x0
c00158ac:	52                   	push   edx
c00158ad:	ff d0                	call   eax
c00158af:	83 c4 10             	add    esp,0x10
c00158b2:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00158b6:	74 73                	je     c001592b <setupInterruptController()+0x13e>
c00158b8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158be:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c0:	83 c0 0c             	add    eax,0xc
c00158c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c5:	6a 00                	push   0x0
c00158c7:	6a 00                	push   0x0
c00158c9:	6a 00                	push   0x0
c00158cb:	52                   	push   edx
c00158cc:	ff d0                	call   eax
c00158ce:	83 c4 10             	add    esp,0x10
c00158d1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158d5:	74 15                	je     c00158ec <setupInterruptController()+0xff>
c00158d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158da:	8b 00                	mov    eax,DWORD PTR [eax]
c00158dc:	83 c0 04             	add    eax,0x4
c00158df:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e1:	83 ec 0c             	sub    esp,0xc
c00158e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158e7:	ff d0                	call   eax
c00158e9:	83 c4 10             	add    esp,0x10
c00158ec:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00158f3:	83 ec 0c             	sub    esp,0xc
c00158f6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00158f9:	e8 42 9f ff ff       	call   c000f840 <malloc>
c00158fe:	83 c4 10             	add    esp,0x10
c0015901:	89 c3                	mov    ebx,eax
c0015903:	83 ec 0c             	sub    esp,0xc
c0015906:	53                   	push   ebx
c0015907:	e8 08 ff 00 00       	call   c0025814 <APIC::APIC()>
c001590c:	83 c4 10             	add    esp,0x10
c001590f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015912:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015915:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015918:	8b 00                	mov    eax,DWORD PTR [eax]
c001591a:	83 c0 08             	add    eax,0x8
c001591d:	8b 00                	mov    eax,DWORD PTR [eax]
c001591f:	6a 00                	push   0x0
c0015921:	6a 00                	push   0x0
c0015923:	6a 00                	push   0x0
c0015925:	52                   	push   edx
c0015926:	ff d0                	call   eax
c0015928:	83 c4 10             	add    esp,0x10
c001592b:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0015930:	83 ec 08             	sub    esp,0x8
c0015933:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015936:	50                   	push   eax
c0015937:	e8 e0 e8 ff ff       	call   c001421c <Device::addChild(Device*)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015942:	8b 00                	mov    eax,DWORD PTR [eax]
c0015944:	83 c0 24             	add    eax,0x24
c0015947:	8b 00                	mov    eax,DWORD PTR [eax]
c0015949:	6a 00                	push   0x0
c001594b:	68 a0 51 01 c0       	push   0xc00151a0
c0015950:	6a 00                	push   0x0
c0015952:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015955:	ff d0                	call   eax
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001595d:	8b 00                	mov    eax,DWORD PTR [eax]
c001595f:	83 c0 24             	add    eax,0x24
c0015962:	8b 00                	mov    eax,DWORD PTR [eax]
c0015964:	6a 00                	push   0x0
c0015966:	68 a0 51 01 c0       	push   0xc00151a0
c001596b:	6a 01                	push   0x1
c001596d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015970:	ff d0                	call   eax
c0015972:	83 c4 10             	add    esp,0x10
c0015975:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015978:	8b 00                	mov    eax,DWORD PTR [eax]
c001597a:	83 c0 24             	add    eax,0x24
c001597d:	8b 00                	mov    eax,DWORD PTR [eax]
c001597f:	6a 00                	push   0x0
c0015981:	68 c9 4a 01 c0       	push   0xc0014ac9
c0015986:	6a 02                	push   0x2
c0015988:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001598b:	ff d0                	call   eax
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015993:	8b 00                	mov    eax,DWORD PTR [eax]
c0015995:	83 c0 24             	add    eax,0x24
c0015998:	8b 00                	mov    eax,DWORD PTR [eax]
c001599a:	6a 00                	push   0x0
c001599c:	68 a0 51 01 c0       	push   0xc00151a0
c00159a1:	6a 03                	push   0x3
c00159a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159a6:	ff d0                	call   eax
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b0:	83 c0 24             	add    eax,0x24
c00159b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b5:	6a 00                	push   0x0
c00159b7:	68 a0 51 01 c0       	push   0xc00151a0
c00159bc:	6a 04                	push   0x4
c00159be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159c1:	ff d0                	call   eax
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159cb:	83 c0 24             	add    eax,0x24
c00159ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d0:	6a 00                	push   0x0
c00159d2:	68 a0 51 01 c0       	push   0xc00151a0
c00159d7:	6a 05                	push   0x5
c00159d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159dc:	ff d0                	call   eax
c00159de:	83 c4 10             	add    esp,0x10
c00159e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e6:	83 c0 24             	add    eax,0x24
c00159e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159eb:	6a 00                	push   0x0
c00159ed:	68 bf 51 01 c0       	push   0xc00151bf
c00159f2:	6a 06                	push   0x6
c00159f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159f7:	ff d0                	call   eax
c00159f9:	83 c4 10             	add    esp,0x10
c00159fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a01:	83 c0 24             	add    eax,0x24
c0015a04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a06:	6a 00                	push   0x0
c0015a08:	68 fb 50 01 c0       	push   0xc00150fb
c0015a0d:	6a 07                	push   0x7
c0015a0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a12:	ff d0                	call   eax
c0015a14:	83 c4 10             	add    esp,0x10
c0015a17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1c:	83 c0 24             	add    eax,0x24
c0015a1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a21:	6a 00                	push   0x0
c0015a23:	68 e4 48 01 c0       	push   0xc00148e4
c0015a28:	6a 08                	push   0x8
c0015a2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a2d:	ff d0                	call   eax
c0015a2f:	83 c4 10             	add    esp,0x10
c0015a32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a37:	83 c0 24             	add    eax,0x24
c0015a3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3c:	6a 00                	push   0x0
c0015a3e:	68 a0 51 01 c0       	push   0xc00151a0
c0015a43:	6a 09                	push   0x9
c0015a45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a48:	ff d0                	call   eax
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a52:	83 c0 24             	add    eax,0x24
c0015a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a57:	6a 00                	push   0x0
c0015a59:	68 a0 51 01 c0       	push   0xc00151a0
c0015a5e:	6a 0a                	push   0xa
c0015a60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a63:	ff d0                	call   eax
c0015a65:	83 c4 10             	add    esp,0x10
c0015a68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6d:	83 c0 24             	add    eax,0x24
c0015a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a72:	6a 00                	push   0x0
c0015a74:	68 a0 51 01 c0       	push   0xc00151a0
c0015a79:	6a 0b                	push   0xb
c0015a7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a7e:	ff d0                	call   eax
c0015a80:	83 c4 10             	add    esp,0x10
c0015a83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a88:	83 c0 24             	add    eax,0x24
c0015a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8d:	6a 00                	push   0x0
c0015a8f:	68 a0 51 01 c0       	push   0xc00151a0
c0015a94:	6a 0c                	push   0xc
c0015a96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a99:	ff d0                	call   eax
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa3:	83 c0 24             	add    eax,0x24
c0015aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa8:	6a 00                	push   0x0
c0015aaa:	68 2a 51 01 c0       	push   0xc001512a
c0015aaf:	6a 0d                	push   0xd
c0015ab1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab4:	ff d0                	call   eax
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abe:	83 c0 24             	add    eax,0x24
c0015ac1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac3:	6a 00                	push   0x0
c0015ac5:	68 63 51 01 c0       	push   0xc0015163
c0015aca:	6a 0e                	push   0xe
c0015acc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015acf:	ff d0                	call   eax
c0015ad1:	83 c4 10             	add    esp,0x10
c0015ad4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad9:	83 c0 24             	add    eax,0x24
c0015adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ade:	6a 00                	push   0x0
c0015ae0:	68 a0 51 01 c0       	push   0xc00151a0
c0015ae5:	6a 0f                	push   0xf
c0015ae7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aea:	ff d0                	call   eax
c0015aec:	83 c4 10             	add    esp,0x10
c0015aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af4:	83 c0 24             	add    eax,0x24
c0015af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af9:	6a 00                	push   0x0
c0015afb:	68 a0 51 01 c0       	push   0xc00151a0
c0015b00:	6a 10                	push   0x10
c0015b02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b05:	ff d0                	call   eax
c0015b07:	83 c4 10             	add    esp,0x10
c0015b0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0f:	83 c0 24             	add    eax,0x24
c0015b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b14:	6a 00                	push   0x0
c0015b16:	68 a0 51 01 c0       	push   0xc00151a0
c0015b1b:	6a 11                	push   0x11
c0015b1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b20:	ff d0                	call   eax
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2a:	83 c0 24             	add    eax,0x24
c0015b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2f:	6a 00                	push   0x0
c0015b31:	68 a0 51 01 c0       	push   0xc00151a0
c0015b36:	6a 12                	push   0x12
c0015b38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3b:	ff d0                	call   eax
c0015b3d:	83 c4 10             	add    esp,0x10
c0015b40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b45:	83 c0 24             	add    eax,0x24
c0015b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4a:	6a 00                	push   0x0
c0015b4c:	68 a0 51 01 c0       	push   0xc00151a0
c0015b51:	6a 13                	push   0x13
c0015b53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b56:	ff d0                	call   eax
c0015b58:	83 c4 10             	add    esp,0x10
c0015b5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b60:	83 c0 24             	add    eax,0x24
c0015b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b65:	6a 00                	push   0x0
c0015b67:	68 a0 51 01 c0       	push   0xc00151a0
c0015b6c:	6a 14                	push   0x14
c0015b6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b71:	ff d0                	call   eax
c0015b73:	83 c4 10             	add    esp,0x10
c0015b76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7b:	83 c0 24             	add    eax,0x24
c0015b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b80:	6a 00                	push   0x0
c0015b82:	68 a0 51 01 c0       	push   0xc00151a0
c0015b87:	6a 1e                	push   0x1e
c0015b89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8c:	ff d0                	call   eax
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b96:	83 c0 24             	add    eax,0x24
c0015b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9b:	6a 00                	push   0x0
c0015b9d:	68 6b c6 01 c0       	push   0xc001c66b
c0015ba2:	6a 60                	push   0x60
c0015ba4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba7:	ff d0                	call   eax
c0015ba9:	83 c4 10             	add    esp,0x10
c0015bac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015baf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015bb2:	c9                   	leave  
c0015bb3:	c3                   	ret    

c0015bb4 <InterruptController::convertLegacyIRQNumber(int)>:
c0015bb4:	55                   	push   ebp
c0015bb5:	89 e5                	mov    ebp,esp
c0015bb7:	83 ec 08             	sub    esp,0x8
c0015bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbd:	83 ec 0c             	sub    esp,0xc
c0015bc0:	50                   	push   eax
c0015bc1:	e8 42 e9 ff ff       	call   c0014508 <Device::getName()>
c0015bc6:	83 c4 10             	add    esp,0x10
c0015bc9:	8a 00                	mov    al,BYTE PTR [eax]
c0015bcb:	3c 41                	cmp    al,0x41
c0015bcd:	0f 94 c0             	sete   al
c0015bd0:	84 c0                	test   al,al
c0015bd2:	74 28                	je     c0015bfc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015bd4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015bd8:	7f 12                	jg     c0015bec <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015bda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bdd:	05 60 d6 02 c0       	add    eax,0xc002d660
c0015be2:	8a 00                	mov    al,BYTE PTR [eax]
c0015be4:	0f b6 c0             	movzx  eax,al
c0015be7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015bea:	eb 10                	jmp    c0015bfc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015bec:	83 ec 0c             	sub    esp,0xc
c0015bef:	68 60 ad 02 c0       	push   0xc002ad60
c0015bf4:	e8 9e 48 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0015bf9:	83 c4 10             	add    esp,0x10
c0015bfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bff:	c9                   	leave  
c0015c00:	c3                   	ret    
c0015c01:	90                   	nop

c0015c02 <startGUI(void*)>:
c0015c02:	55                   	push   ebp
c0015c03:	89 e5                	mov    ebp,esp
c0015c05:	53                   	push   ebx
c0015c06:	83 ec 04             	sub    esp,0x4
c0015c09:	e8 b0 80 00 00       	call   c001dcbe <unlockScheduler()>
c0015c0e:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015c14:	83 ec 08             	sub    esp,0x8
c0015c17:	6a 01                	push   0x1
c0015c19:	68 b0 b0 02 c0       	push   0xc002b0b0
c0015c1e:	e8 f1 79 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0015c23:	83 c4 10             	add    esp,0x10
c0015c26:	83 ec 08             	sub    esp,0x8
c0015c29:	53                   	push   ebx
c0015c2a:	50                   	push   eax
c0015c2b:	e8 18 7c 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0015c30:	83 c4 10             	add    esp,0x10
c0015c33:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015c39:	83 ec 08             	sub    esp,0x8
c0015c3c:	6a 01                	push   0x1
c0015c3e:	68 ca b0 02 c0       	push   0xc002b0ca
c0015c43:	e8 cc 79 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0015c48:	83 c4 10             	add    esp,0x10
c0015c4b:	83 ec 08             	sub    esp,0x8
c0015c4e:	53                   	push   ebx
c0015c4f:	50                   	push   eax
c0015c50:	e8 f3 7b 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0015c55:	83 c4 10             	add    esp,0x10
c0015c58:	90                   	nop
c0015c59:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c5c:	c9                   	leave  
c0015c5d:	c3                   	ret    

c0015c5e <startGUIVESA(void*)>:
c0015c5e:	55                   	push   ebp
c0015c5f:	89 e5                	mov    ebp,esp
c0015c61:	53                   	push   ebx
c0015c62:	83 ec 04             	sub    esp,0x4
c0015c65:	e8 54 80 00 00       	call   c001dcbe <unlockScheduler()>
c0015c6a:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015c70:	83 ec 08             	sub    esp,0x8
c0015c73:	6a 01                	push   0x1
c0015c75:	68 e4 b0 02 c0       	push   0xc002b0e4
c0015c7a:	e8 95 79 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	83 ec 08             	sub    esp,0x8
c0015c85:	53                   	push   ebx
c0015c86:	50                   	push   eax
c0015c87:	e8 bc 7b 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0015c8c:	83 c4 10             	add    esp,0x10
c0015c8f:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015c95:	83 ec 08             	sub    esp,0x8
c0015c98:	6a 01                	push   0x1
c0015c9a:	68 ca b0 02 c0       	push   0xc002b0ca
c0015c9f:	e8 70 79 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0015ca4:	83 c4 10             	add    esp,0x10
c0015ca7:	83 ec 08             	sub    esp,0x8
c0015caa:	53                   	push   ebx
c0015cab:	50                   	push   eax
c0015cac:	e8 97 7b 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0015cb1:	83 c4 10             	add    esp,0x10
c0015cb4:	90                   	nop
c0015cb5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cb8:	c9                   	leave  
c0015cb9:	c3                   	ret    

c0015cba <sendKeyToTerminal(unsigned char)>:
c0015cba:	55                   	push   ebp
c0015cbb:	89 e5                	mov    ebp,esp
c0015cbd:	83 ec 28             	sub    esp,0x28
c0015cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015cc6:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0015ccb:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ccf:	83 ec 08             	sub    esp,0x8
c0015cd2:	52                   	push   edx
c0015cd3:	50                   	push   eax
c0015cd4:	e8 15 b6 ff ff       	call   c00112ee <VgaText::receiveKey(unsigned char)>
c0015cd9:	83 c4 10             	add    esp,0x10
c0015cdc:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ce0:	75 41                	jne    c0015d23 <sendKeyToTerminal(unsigned char)+0x69>
c0015ce2:	e8 fc 7f 00 00       	call   c001dce3 <lockStuff()>
c0015ce7:	a1 c0 e5 02 c0       	mov    eax,ds:0xc002e5c0
c0015cec:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015cef:	c7 05 c0 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5c0,0x0
c0015cf9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015cfd:	74 1f                	je     c0015d1e <sendKeyToTerminal(unsigned char)+0x64>
c0015cff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d02:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015d05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d08:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d0b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d0e:	83 ec 0c             	sub    esp,0xc
c0015d11:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015d14:	e8 bb 85 00 00       	call   c001e2d4 <unblockTask(ThreadControlBlock*)>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	eb db                	jmp    c0015cf9 <sendKeyToTerminal(unsigned char)+0x3f>
c0015d1e:	e8 5a 83 00 00       	call   c001e07d <unlockStuff()>
c0015d23:	90                   	nop
c0015d24:	c9                   	leave  
c0015d25:	c3                   	ret    

c0015d26 <sendKeyboardToken(KeyboardToken)>:
c0015d26:	55                   	push   ebp
c0015d27:	89 e5                	mov    ebp,esp
c0015d29:	83 ec 18             	sub    esp,0x18
c0015d2c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d32:	0f b7 c0             	movzx  eax,ax
c0015d35:	83 f2 01             	xor    edx,0x1
c0015d38:	88 90 e0 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1a20],dl
c0015d3e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015d43:	85 c0                	test   eax,eax
c0015d45:	74 24                	je     c0015d6b <sendKeyboardToken(KeyboardToken)+0x45>
c0015d47:	8b 0d c8 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5c8
c0015d4d:	83 ec 04             	sub    esp,0x4
c0015d50:	68 e0 e5 02 c0       	push   0xc002e5e0
c0015d55:	83 ec 08             	sub    esp,0x8
c0015d58:	89 e2                	mov    edx,esp
c0015d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d5d:	89 02                	mov    DWORD PTR [edx],eax
c0015d5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d62:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d66:	ff d1                	call   ecx
c0015d68:	83 c4 10             	add    esp,0x10
c0015d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d6e:	66 3d 03 02          	cmp    ax,0x203
c0015d72:	75 07                	jne    c0015d7b <sendKeyboardToken(KeyboardToken)+0x55>
c0015d74:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c0015d79:	84 c0                	test   al,al
c0015d7b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015d7f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015d82:	a0 e8 e9 02 c0       	mov    al,ds:0xc002e9e8
c0015d87:	38 c2                	cmp    dl,al
c0015d89:	74 1c                	je     c0015da7 <sendKeyboardToken(KeyboardToken)+0x81>
c0015d8b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015d8e:	a2 e8 e9 02 c0       	mov    ds:0xc002e9e8,al
c0015d93:	a0 e8 e9 02 c0       	mov    al,ds:0xc002e9e8
c0015d98:	0f b6 c0             	movzx  eax,al
c0015d9b:	83 ec 0c             	sub    esp,0xc
c0015d9e:	50                   	push   eax
c0015d9f:	e8 aa a7 ff ff       	call   c001054e <setTerminalScrollLock(bool)>
c0015da4:	83 c4 10             	add    esp,0x10
c0015da7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015daa:	84 c0                	test   al,al
c0015dac:	0f 84 ae 00 00 00    	je     c0015e60 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db5:	66 3d 10 03          	cmp    ax,0x310
c0015db9:	75 06                	jne    c0015dc1 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015dbb:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc4:	66 3d 11 03          	cmp    ax,0x311
c0015dc8:	75 06                	jne    c0015dd0 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015dca:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd3:	66 3d 12 03          	cmp    ax,0x312
c0015dd7:	75 06                	jne    c0015ddf <sendKeyboardToken(KeyboardToken)+0xb9>
c0015dd9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de2:	66 3d 13 03          	cmp    ax,0x313
c0015de6:	75 06                	jne    c0015dee <sendKeyboardToken(KeyboardToken)+0xc8>
c0015de8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df1:	66 3d 14 03          	cmp    ax,0x314
c0015df5:	75 06                	jne    c0015dfd <sendKeyboardToken(KeyboardToken)+0xd7>
c0015df7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e00:	66 3d 15 03          	cmp    ax,0x315
c0015e04:	75 06                	jne    c0015e0c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015e06:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0f:	66 3d 16 03          	cmp    ax,0x316
c0015e13:	75 06                	jne    c0015e1b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015e15:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1e:	66 3d 17 03          	cmp    ax,0x317
c0015e22:	75 06                	jne    c0015e2a <sendKeyboardToken(KeyboardToken)+0x104>
c0015e24:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2d:	66 3d 18 03          	cmp    ax,0x318
c0015e31:	75 06                	jne    c0015e39 <sendKeyboardToken(KeyboardToken)+0x113>
c0015e33:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3c:	66 3d 19 03          	cmp    ax,0x319
c0015e40:	75 06                	jne    c0015e48 <sendKeyboardToken(KeyboardToken)+0x122>
c0015e42:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4b:	66 3d 1a 03          	cmp    ax,0x31a
c0015e4f:	0f 85 c9 00 00 00    	jne    c0015f1e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e55:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015e5b:	e9 be 00 00 00       	jmp    c0015f1e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e63:	66 3d 10 03          	cmp    ax,0x310
c0015e67:	75 0a                	jne    c0015e73 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015e69:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015e6f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e76:	66 3d 11 03          	cmp    ax,0x311
c0015e7a:	75 0a                	jne    c0015e86 <sendKeyboardToken(KeyboardToken)+0x160>
c0015e7c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015e82:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e89:	66 3d 12 03          	cmp    ax,0x312
c0015e8d:	75 0a                	jne    c0015e99 <sendKeyboardToken(KeyboardToken)+0x173>
c0015e8f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015e95:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9c:	66 3d 13 03          	cmp    ax,0x313
c0015ea0:	75 0a                	jne    c0015eac <sendKeyboardToken(KeyboardToken)+0x186>
c0015ea2:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ea8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eaf:	66 3d 14 03          	cmp    ax,0x314
c0015eb3:	75 0a                	jne    c0015ebf <sendKeyboardToken(KeyboardToken)+0x199>
c0015eb5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015ebb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec2:	66 3d 15 03          	cmp    ax,0x315
c0015ec6:	75 0a                	jne    c0015ed2 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ec8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ece:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed5:	66 3d 16 03          	cmp    ax,0x316
c0015ed9:	75 0a                	jne    c0015ee5 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015edb:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ee1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee8:	66 3d 17 03          	cmp    ax,0x317
c0015eec:	75 0a                	jne    c0015ef8 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015eee:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ef4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efb:	66 3d 18 03          	cmp    ax,0x318
c0015eff:	75 0a                	jne    c0015f0b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015f01:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015f07:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0e:	66 3d 19 03          	cmp    ax,0x319
c0015f12:	75 0a                	jne    c0015f1e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f14:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015f1a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f21:	66 3d 00 02          	cmp    ax,0x200
c0015f25:	75 2c                	jne    c0015f53 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f27:	a0 e0 e9 02 c0       	mov    al,ds:0xc002e9e0
c0015f2c:	83 f0 01             	xor    eax,0x1
c0015f2f:	84 c0                	test   al,al
c0015f31:	74 20                	je     c0015f53 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f33:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015f38:	6a 01                	push   0x1
c0015f3a:	6a 00                	push   0x0
c0015f3c:	68 02 5c 01 c0       	push   0xc0015c02
c0015f41:	50                   	push   eax
c0015f42:	e8 a7 7e 00 00       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c0015f47:	83 c4 10             	add    esp,0x10
c0015f4a:	c6 05 e0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9e0,0x1
c0015f51:	eb 33                	jmp    c0015f86 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f56:	66 3d 01 02          	cmp    ax,0x201
c0015f5a:	75 2a                	jne    c0015f86 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f5c:	a0 e0 e9 02 c0       	mov    al,ds:0xc002e9e0
c0015f61:	83 f0 01             	xor    eax,0x1
c0015f64:	84 c0                	test   al,al
c0015f66:	74 1e                	je     c0015f86 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f68:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015f6d:	6a 01                	push   0x1
c0015f6f:	6a 00                	push   0x0
c0015f71:	68 5e 5c 01 c0       	push   0xc0015c5e
c0015f76:	50                   	push   eax
c0015f77:	e8 72 7e 00 00       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c0015f7c:	83 c4 10             	add    esp,0x10
c0015f7f:	c6 05 e0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9e0,0x1
c0015f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f89:	66 3d 1d 03          	cmp    ax,0x31d
c0015f8d:	75 06                	jne    c0015f95 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015f8f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f98:	66 3d 1c 03          	cmp    ax,0x31c
c0015f9c:	75 06                	jne    c0015fa4 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015f9e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa7:	66 3d 1b 03          	cmp    ax,0x31b
c0015fab:	75 06                	jne    c0015fb3 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015fad:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb6:	66 3d 1e 03          	cmp    ax,0x31e
c0015fba:	75 06                	jne    c0015fc2 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015fbc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc5:	66 3d 1f 03          	cmp    ax,0x31f
c0015fc9:	75 06                	jne    c0015fd1 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015fcb:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd4:	66 3d 1a 03          	cmp    ax,0x31a
c0015fd8:	75 06                	jne    c0015fe0 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015fda:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015fe0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015fe4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015fe7:	83 f0 01             	xor    eax,0x1
c0015fea:	84 c0                	test   al,al
c0015fec:	74 77                	je     c0016065 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015fee:	a0 e1 e6 02 c0       	mov    al,ds:0xc002e6e1
c0015ff3:	84 c0                	test   al,al
c0015ff5:	74 41                	je     c0016038 <sendKeyboardToken(KeyboardToken)+0x312>
c0015ff7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ffb:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015fff:	74 2b                	je     c001602c <sendKeyboardToken(KeyboardToken)+0x306>
c0016001:	8b 15 e4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9e4
c0016007:	89 d0                	mov    eax,edx
c0016009:	c1 e0 02             	shl    eax,0x2
c001600c:	01 d0                	add    eax,edx
c001600e:	01 c0                	add    eax,eax
c0016010:	a3 e4 e9 02 c0       	mov    ds:0xc002e9e4,eax
c0016015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016018:	0f b7 c0             	movzx  eax,ax
c001601b:	8d 50 d0             	lea    edx,[eax-0x30]
c001601e:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c0016023:	01 d0                	add    eax,edx
c0016025:	a3 e4 e9 02 c0       	mov    ds:0xc002e9e4,eax
c001602a:	eb 6d                	jmp    c0016099 <sendKeyboardToken(KeyboardToken)+0x373>
c001602c:	c7 05 e4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9e4,0x0
c0016036:	eb 61                	jmp    c0016099 <sendKeyboardToken(KeyboardToken)+0x373>
c0016038:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c001603d:	85 c0                	test   eax,eax
c001603f:	74 18                	je     c0016059 <sendKeyboardToken(KeyboardToken)+0x333>
c0016041:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c0016046:	0f b6 c0             	movzx  eax,al
c0016049:	83 ec 0c             	sub    esp,0xc
c001604c:	50                   	push   eax
c001604d:	e8 68 fc ff ff       	call   c0015cba <sendKeyToTerminal(unsigned char)>
c0016052:	83 c4 10             	add    esp,0x10
c0016055:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016059:	c7 05 e4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9e4,0x0
c0016063:	eb 34                	jmp    c0016099 <sendKeyboardToken(KeyboardToken)+0x373>
c0016065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016068:	66 3d 01 01          	cmp    ax,0x101
c001606c:	75 2b                	jne    c0016099 <sendKeyboardToken(KeyboardToken)+0x373>
c001606e:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c0016073:	85 c0                	test   eax,eax
c0016075:	74 18                	je     c001608f <sendKeyboardToken(KeyboardToken)+0x369>
c0016077:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c001607c:	0f b6 c0             	movzx  eax,al
c001607f:	83 ec 0c             	sub    esp,0xc
c0016082:	50                   	push   eax
c0016083:	e8 32 fc ff ff       	call   c0015cba <sendKeyToTerminal(unsigned char)>
c0016088:	83 c4 10             	add    esp,0x10
c001608b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001608f:	c7 05 e4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9e4,0x0
c0016099:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001609c:	83 f0 01             	xor    eax,0x1
c001609f:	84 c0                	test   al,al
c00160a1:	74 4c                	je     c00160ef <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160a3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160a6:	83 f0 01             	xor    eax,0x1
c00160a9:	84 c0                	test   al,al
c00160ab:	74 42                	je     c00160ef <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160ad:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c00160b2:	83 f0 01             	xor    eax,0x1
c00160b5:	84 c0                	test   al,al
c00160b7:	74 36                	je     c00160ef <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160bc:	66 83 f8 1f          	cmp    ax,0x1f
c00160c0:	76 09                	jbe    c00160cb <sendKeyboardToken(KeyboardToken)+0x3a5>
c00160c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c5:	66 83 f8 7e          	cmp    ax,0x7e
c00160c9:	76 12                	jbe    c00160dd <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ce:	66 83 f8 0a          	cmp    ax,0xa
c00160d2:	74 09                	je     c00160dd <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d7:	66 83 f8 08          	cmp    ax,0x8
c00160db:	75 12                	jne    c00160ef <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e0:	0f b6 c0             	movzx  eax,al
c00160e3:	83 ec 0c             	sub    esp,0xc
c00160e6:	50                   	push   eax
c00160e7:	e8 ce fb ff ff       	call   c0015cba <sendKeyToTerminal(unsigned char)>
c00160ec:	83 c4 10             	add    esp,0x10
c00160ef:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160f2:	83 f0 01             	xor    eax,0x1
c00160f5:	84 c0                	test   al,al
c00160f7:	74 4f                	je     c0016148 <sendKeyboardToken(KeyboardToken)+0x422>
c00160f9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160fc:	83 f0 01             	xor    eax,0x1
c00160ff:	84 c0                	test   al,al
c0016101:	74 45                	je     c0016148 <sendKeyboardToken(KeyboardToken)+0x422>
c0016103:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c0016108:	84 c0                	test   al,al
c001610a:	74 3c                	je     c0016148 <sendKeyboardToken(KeyboardToken)+0x422>
c001610c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610f:	66 83 f8 3f          	cmp    ax,0x3f
c0016113:	76 33                	jbe    c0016148 <sendKeyboardToken(KeyboardToken)+0x422>
c0016115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016118:	66 83 f8 7f          	cmp    ax,0x7f
c001611c:	77 2a                	ja     c0016148 <sendKeyboardToken(KeyboardToken)+0x422>
c001611e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016121:	88 c2                	mov    dl,al
c0016123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016126:	66 83 f8 5f          	cmp    ax,0x5f
c001612a:	76 04                	jbe    c0016130 <sendKeyboardToken(KeyboardToken)+0x40a>
c001612c:	b0 20                	mov    al,0x20
c001612e:	eb 02                	jmp    c0016132 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016130:	b0 00                	mov    al,0x0
c0016132:	29 c2                	sub    edx,eax
c0016134:	88 d0                	mov    al,dl
c0016136:	83 e8 40             	sub    eax,0x40
c0016139:	0f b6 c0             	movzx  eax,al
c001613c:	83 ec 0c             	sub    esp,0xc
c001613f:	50                   	push   eax
c0016140:	e8 75 fb ff ff       	call   c0015cba <sendKeyToTerminal(unsigned char)>
c0016145:	83 c4 10             	add    esp,0x10
c0016148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614b:	66 3d 00 03          	cmp    ax,0x300
c001614f:	75 0f                	jne    c0016160 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016151:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016154:	83 f0 01             	xor    eax,0x1
c0016157:	84 c0                	test   al,al
c0016159:	74 05                	je     c0016160 <sendKeyboardToken(KeyboardToken)+0x43a>
c001615b:	e8 23 ac ff ff       	call   c0010d83 <doTerminalCycle()>
c0016160:	90                   	nop
c0016161:	c9                   	leave  
c0016162:	c3                   	ret    

c0016163 <clearInternalKeybuffer(VgaText*)>:
c0016163:	55                   	push   ebp
c0016164:	89 e5                	mov    ebp,esp
c0016166:	83 ec 08             	sub    esp,0x8
c0016169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616c:	05 34 11 00 00       	add    eax,0x1134
c0016171:	83 ec 0c             	sub    esp,0xc
c0016174:	50                   	push   eax
c0016175:	e8 1a a6 fe ff       	call   c0000794 <strlen>
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016180:	81 c2 34 11 00 00    	add    edx,0x1134
c0016186:	83 ec 04             	sub    esp,0x4
c0016189:	50                   	push   eax
c001618a:	6a 00                	push   0x0
c001618c:	52                   	push   edx
c001618d:	e8 e6 a5 fe ff       	call   c0000778 <memset>
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	90                   	nop
c0016196:	c9                   	leave  
c0016197:	c3                   	ret    

c0016198 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016198:	55                   	push   ebp
c0016199:	89 e5                	mov    ebp,esp
c001619b:	83 ec 18             	sub    esp,0x18
c001619e:	fb                   	sti    
c001619f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00161a6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00161aa:	0f 84 8a 00 00 00    	je     c001623a <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00161b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b3:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00161b9:	84 c0                	test   al,al
c00161bb:	75 11                	jne    c00161ce <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00161bd:	e8 fa 7a 00 00       	call   c001dcbc <lockScheduler()>
c00161c2:	e8 31 7e 00 00       	call   c001dff8 <schedule()>
c00161c7:	e8 f2 7a 00 00       	call   c001dcbe <unlockScheduler()>
c00161cc:	eb e2                	jmp    c00161b0 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00161ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00161d1:	8d 50 01             	lea    edx,[eax+0x1]
c00161d4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00161d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161da:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00161e0:	88 10                	mov    BYTE PTR [eax],dl
c00161e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e5:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00161eb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00161ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f1:	05 34 11 00 00       	add    eax,0x1134
c00161f6:	83 ec 0c             	sub    esp,0xc
c00161f9:	50                   	push   eax
c00161fa:	e8 95 a5 fe ff       	call   c0000794 <strlen>
c00161ff:	83 c4 10             	add    esp,0x10
c0016202:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016205:	81 c2 34 11 00 00    	add    edx,0x1134
c001620b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001620e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016211:	81 c2 34 11 00 00    	add    edx,0x1134
c0016217:	83 ec 04             	sub    esp,0x4
c001621a:	50                   	push   eax
c001621b:	51                   	push   ecx
c001621c:	52                   	push   edx
c001621d:	e8 5a a4 fe ff       	call   c000067c <memmove>
c0016222:	83 c4 10             	add    esp,0x10
c0016225:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016228:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001622b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001622f:	0f 85 71 ff ff ff    	jne    c00161a6 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016235:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016238:	eb 03                	jmp    c001623d <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001623a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001623d:	c9                   	leave  
c001623e:	c3                   	ret    
c001623f:	90                   	nop

c0016240 <Keyboard::Keyboard(char const*)>:
c0016240:	83 ec 0c             	sub    esp,0xc
c0016243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016247:	83 ec 08             	sub    esp,0x8
c001624a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001624e:	50                   	push   eax
c001624f:	e8 b8 e1 ff ff       	call   c001440c <Device::Device(char const*)>
c0016254:	83 c4 10             	add    esp,0x10
c0016257:	ba 08 b1 02 c0       	mov    edx,0xc002b108
c001625c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016260:	89 10                	mov    DWORD PTR [eax],edx
c0016262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016266:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016270:	c6 05 c4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5c4,0x1
c0016277:	90                   	nop
c0016278:	83 c4 0c             	add    esp,0xc
c001627b:	c3                   	ret    

c001627c <Keyboard::~Keyboard()>:
c001627c:	83 ec 0c             	sub    esp,0xc
c001627f:	ba 08 b1 02 c0       	mov    edx,0xc002b108
c0016284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016288:	89 10                	mov    DWORD PTR [eax],edx
c001628a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001628e:	83 ec 0c             	sub    esp,0xc
c0016291:	50                   	push   eax
c0016292:	e8 57 de ff ff       	call   c00140ee <Device::~Device()>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	90                   	nop
c001629b:	83 c4 0c             	add    esp,0xc
c001629e:	c3                   	ret    
c001629f:	90                   	nop

c00162a0 <Keyboard::~Keyboard()>:
c00162a0:	83 ec 0c             	sub    esp,0xc
c00162a3:	83 ec 0c             	sub    esp,0xc
c00162a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162aa:	e8 cd ff ff ff       	call   c001627c <Keyboard::~Keyboard()>
c00162af:	83 c4 10             	add    esp,0x10
c00162b2:	83 ec 08             	sub    esp,0x8
c00162b5:	68 5c 01 00 00       	push   0x15c
c00162ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162be:	e8 53 ca ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c00162c3:	83 c4 10             	add    esp,0x10
c00162c6:	83 c4 0c             	add    esp,0xc
c00162c9:	c3                   	ret    

c00162ca <LogicalDisk::close(int, int, void*)>:
c00162ca:	83 c8 ff             	or     eax,0xffffffff
c00162cd:	c3                   	ret    

c00162ce <LogicalDisk::~LogicalDisk()>:
c00162ce:	83 ec 0c             	sub    esp,0xc
c00162d1:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c00162d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162da:	89 10                	mov    DWORD PTR [eax],edx
c00162dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e0:	83 ec 0c             	sub    esp,0xc
c00162e3:	50                   	push   eax
c00162e4:	e8 05 de ff ff       	call   c00140ee <Device::~Device()>
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	90                   	nop
c00162ed:	83 c4 0c             	add    esp,0xc
c00162f0:	c3                   	ret    
c00162f1:	90                   	nop

c00162f2 <LogicalDisk::~LogicalDisk()>:
c00162f2:	83 ec 0c             	sub    esp,0xc
c00162f5:	83 ec 0c             	sub    esp,0xc
c00162f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162fc:	e8 cd ff ff ff       	call   c00162ce <LogicalDisk::~LogicalDisk()>
c0016301:	83 c4 10             	add    esp,0x10
c0016304:	83 ec 08             	sub    esp,0x8
c0016307:	68 74 01 00 00       	push   0x174
c001630c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016310:	e8 01 ca ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0016315:	83 c4 10             	add    esp,0x10
c0016318:	83 c4 0c             	add    esp,0xc
c001631b:	c3                   	ret    

c001631c <LogicalDisk::open(int, int, void*)>:
c001631c:	83 ec 18             	sub    esp,0x18
c001631f:	68 34 b1 02 c0       	push   0xc002b134
c0016324:	e8 6e 41 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0016329:	83 c8 ff             	or     eax,0xffffffff
c001632c:	83 c4 1c             	add    esp,0x1c
c001632f:	c3                   	ret    

c0016330 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016330:	53                   	push   ebx
c0016331:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016335:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016339:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001633d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016343:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016349:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001634f:	77 10                	ja     c0016361 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016351:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016357:	89 d3                	mov    ebx,edx
c0016359:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001635f:	72 05                	jb     c0016366 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016361:	83 c8 ff             	or     eax,0xffffffff
c0016364:	89 c2                	mov    edx,eax
c0016366:	5b                   	pop    ebx
c0016367:	c3                   	ret    

c0016368 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016368:	56                   	push   esi
c0016369:	83 c8 ff             	or     eax,0xffffffff
c001636c:	53                   	push   ebx
c001636d:	89 c2                	mov    edx,eax
c001636f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016373:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001637b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016381:	77 27                	ja     c00163aa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016383:	89 d8                	mov    eax,ebx
c0016385:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001638b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016391:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016396:	89 c2                	mov    edx,eax
c0016398:	73 10                	jae    c00163aa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001639a:	89 c8                	mov    eax,ecx
c001639c:	89 da                	mov    edx,ebx
c001639e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00163a4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00163aa:	5b                   	pop    ebx
c00163ab:	5e                   	pop    esi
c00163ac:	c3                   	ret    
c00163ad:	90                   	nop

c00163ae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163ae:	83 ec 1c             	sub    esp,0x1c
c00163b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00163c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00163c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00163cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163d4:	83 ec 08             	sub    esp,0x8
c00163d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163db:	50                   	push   eax
c00163dc:	e8 2b e0 ff ff       	call   c001440c <Device::Device(char const*)>
c00163e1:	83 c4 10             	add    esp,0x10
c00163e4:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c00163e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ed:	89 10                	mov    DWORD PTR [eax],edx
c00163ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163f3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163fe:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016409:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016413:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001641b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001641f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016425:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001642b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001642f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016432:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016436:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001643c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016446:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001644a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016454:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001645e:	90                   	nop
c001645f:	83 c4 1c             	add    esp,0x1c
c0016462:	c3                   	ret    
c0016463:	90                   	nop

c0016464 <LogicalDisk::assignDriveLetter()>:
c0016464:	55                   	push   ebp
c0016465:	57                   	push   edi
c0016466:	56                   	push   esi
c0016467:	53                   	push   ebx
c0016468:	83 ec 14             	sub    esp,0x14
c001646b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001646f:	8b 3d 00 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea00
c0016475:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001647b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001647f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016485:	8b 3d 04 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea04
c001648b:	3c 01                	cmp    al,0x1
c001648d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016491:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016495:	19 c0                	sbb    eax,eax
c0016497:	83 e0 02             	and    eax,0x2
c001649a:	83 c0 41             	add    eax,0x41
c001649d:	0f be e8             	movsx  ebp,al
c00164a0:	3c 43                	cmp    al,0x43
c00164a2:	75 10                	jne    c00164b4 <LogicalDisk::assignDriveLetter()+0x50>
c00164a4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00164ab:	75 5d                	jne    c001650a <LogicalDisk::assignDriveLetter()+0xa6>
c00164ad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00164b2:	75 56                	jne    c001650a <LogicalDisk::assignDriveLetter()+0xa6>
c00164b4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00164b7:	ba 01 00 00 00       	mov    edx,0x1
c00164bc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00164c0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00164c4:	d3 e2                	shl    edx,cl
c00164c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164ca:	89 d7                	mov    edi,edx
c00164cc:	89 d6                	mov    esi,edx
c00164ce:	c1 ff 1f             	sar    edi,0x1f
c00164d1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00164d5:	21 f9                	and    ecx,edi
c00164d7:	09 d1                	or     ecx,edx
c00164d9:	75 2f                	jne    c001650a <LogicalDisk::assignDriveLetter()+0xa6>
c00164db:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00164df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00164e3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00164e9:	09 f2                	or     edx,esi
c00164eb:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c00164f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164f5:	09 fa                	or     edx,edi
c00164f7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00164fb:	89 15 04 ea 02 c0    	mov    DWORD PTR ds:0xc002ea04,edx
c0016501:	89 1c bd 20 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd15e0],ebx
c0016508:	eb 08                	jmp    c0016512 <LogicalDisk::assignDriveLetter()+0xae>
c001650a:	45                   	inc    ebp
c001650b:	40                   	inc    eax
c001650c:	3c 5b                	cmp    al,0x5b
c001650e:	75 90                	jne    c00164a0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016510:	31 c0                	xor    eax,eax
c0016512:	83 c4 14             	add    esp,0x14
c0016515:	5b                   	pop    ebx
c0016516:	5e                   	pop    esi
c0016517:	5f                   	pop    edi
c0016518:	5d                   	pop    ebp
c0016519:	c3                   	ret    

c001651a <LogicalDisk::mount()>:
c001651a:	56                   	push   esi
c001651b:	53                   	push   ebx
c001651c:	51                   	push   ecx
c001651d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016521:	8b 1d 8c e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e58c
c0016527:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016531:	85 db                	test   ebx,ebx
c0016533:	74 50                	je     c0016585 <LogicalDisk::mount()+0x6b>
c0016535:	e8 6d 77 00 00       	call   c001dca7 <getIRQNestingLevel()>
c001653a:	52                   	push   edx
c001653b:	52                   	push   edx
c001653c:	50                   	push   eax
c001653d:	68 58 b1 02 c0       	push   0xc002b158
c0016542:	e8 af c8 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0016547:	83 c4 0c             	add    esp,0xc
c001654a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016551:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016553:	83 e8 41             	sub    eax,0x41
c0016556:	50                   	push   eax
c0016557:	56                   	push   esi
c0016558:	53                   	push   ebx
c0016559:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001655c:	83 c4 10             	add    esp,0x10
c001655f:	84 c0                	test   al,al
c0016561:	74 08                	je     c001656b <LogicalDisk::mount()+0x51>
c0016563:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016569:	eb 1c                	jmp    c0016587 <LogicalDisk::mount()+0x6d>
c001656b:	e8 37 77 00 00       	call   c001dca7 <getIRQNestingLevel()>
c0016570:	51                   	push   ecx
c0016571:	51                   	push   ecx
c0016572:	50                   	push   eax
c0016573:	68 73 b1 02 c0       	push   0xc002b173
c0016578:	e8 79 c8 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001657d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016580:	83 c4 10             	add    esp,0x10
c0016583:	eb ac                	jmp    c0016531 <LogicalDisk::mount()+0x17>
c0016585:	31 c0                	xor    eax,eax
c0016587:	5a                   	pop    edx
c0016588:	5b                   	pop    ebx
c0016589:	5e                   	pop    esi
c001658a:	c3                   	ret    
c001658b:	90                   	nop

c001658c <LogicalDisk::unmount()>:
c001658c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016590:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001659a:	c3                   	ret    
c001659b:	90                   	nop

c001659c <LogicalDisk::eject()>:
c001659c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165a0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00165a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00165a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165ac:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00165af:	90                   	nop

c00165b0 <LogicalDisk::unassignDriveLetter()>:
c00165b0:	57                   	push   edi
c00165b1:	56                   	push   esi
c00165b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165b6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00165bd:	84 c9                	test   cl,cl
c00165bf:	75 0f                	jne    c00165d0 <LogicalDisk::unassignDriveLetter()+0x20>
c00165c1:	c7 44 24 0c 8e b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b18e
c00165c9:	5e                   	pop    esi
c00165ca:	5f                   	pop    edi
c00165cb:	e9 c7 3e 00 00       	jmp    c001a497 <Krnl::panic(char const*)>
c00165d0:	83 e9 41             	sub    ecx,0x41
c00165d3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00165da:	b8 01 00 00 00       	mov    eax,0x1
c00165df:	c7 04 8d 20 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd15e0],0x0
c00165ea:	d3 e0                	shl    eax,cl
c00165ec:	89 c7                	mov    edi,eax
c00165ee:	f7 d0                	not    eax
c00165f0:	c1 ff 1f             	sar    edi,0x1f
c00165f3:	21 05 00 ea 02 c0    	and    DWORD PTR ds:0xc002ea00,eax
c00165f9:	89 fe                	mov    esi,edi
c00165fb:	f7 d6                	not    esi
c00165fd:	21 35 04 ea 02 c0    	and    DWORD PTR ds:0xc002ea04,esi
c0016603:	5e                   	pop    esi
c0016604:	5f                   	pop    edi
c0016605:	c3                   	ret    

c0016606 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016606:	57                   	push   edi
c0016607:	56                   	push   esi
c0016608:	53                   	push   ebx
c0016609:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001660d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016611:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016615:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016619:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001661f:	77 41                	ja     c0016662 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016621:	99                   	cdq    
c0016622:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016628:	01 c8                	add    eax,ecx
c001662a:	11 da                	adc    edx,ebx
c001662c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016632:	19 d7                	sbb    edi,edx
c0016634:	72 33                	jb     c0016669 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016636:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001663c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016642:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016646:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001664a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016650:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016656:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001665a:	5b                   	pop    ebx
c001665b:	5e                   	pop    esi
c001665c:	5f                   	pop    edi
c001665d:	e9 b0 0a 00 00       	jmp    c0017112 <VCache::read(unsigned long long, int, void*)>
c0016662:	b8 05 00 00 00       	mov    eax,0x5
c0016667:	eb 05                	jmp    c001666e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016669:	b8 07 00 00 00       	mov    eax,0x7
c001666e:	5b                   	pop    ebx
c001666f:	5e                   	pop    esi
c0016670:	5f                   	pop    edi
c0016671:	c3                   	ret    

c0016672 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016672:	57                   	push   edi
c0016673:	56                   	push   esi
c0016674:	53                   	push   ebx
c0016675:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016679:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001667d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016685:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001668b:	77 41                	ja     c00166ce <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001668d:	99                   	cdq    
c001668e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016694:	01 c8                	add    eax,ecx
c0016696:	11 da                	adc    edx,ebx
c0016698:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001669e:	19 d7                	sbb    edi,edx
c00166a0:	72 33                	jb     c00166d5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00166a2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00166a8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00166ae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00166b2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00166b6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00166bc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166c6:	5b                   	pop    ebx
c00166c7:	5e                   	pop    esi
c00166c8:	5f                   	pop    edi
c00166c9:	e9 4e 09 00 00       	jmp    c001701c <VCache::write(unsigned long long, int, void*)>
c00166ce:	b8 05 00 00 00       	mov    eax,0x5
c00166d3:	eb 05                	jmp    c00166da <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00166d5:	b8 07 00 00 00       	mov    eax,0x7
c00166da:	5b                   	pop    ebx
c00166db:	5e                   	pop    esi
c00166dc:	5f                   	pop    edi
c00166dd:	c3                   	ret    

c00166de <Mouse::Mouse(char const*)>:
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166e5:	83 ec 08             	sub    esp,0x8
c00166e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166ec:	50                   	push   eax
c00166ed:	e8 1a dd ff ff       	call   c001440c <Device::Device(char const*)>
c00166f2:	83 c4 10             	add    esp,0x10
c00166f5:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c00166fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166fe:	89 10                	mov    DWORD PTR [eax],edx
c0016700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016704:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001670e:	90                   	nop
c001670f:	83 c4 0c             	add    esp,0xc
c0016712:	c3                   	ret    
c0016713:	90                   	nop

c0016714 <Mouse::~Mouse()>:
c0016714:	83 ec 0c             	sub    esp,0xc
c0016717:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c001671c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016720:	89 10                	mov    DWORD PTR [eax],edx
c0016722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016726:	83 ec 0c             	sub    esp,0xc
c0016729:	50                   	push   eax
c001672a:	e8 bf d9 ff ff       	call   c00140ee <Device::~Device()>
c001672f:	83 c4 10             	add    esp,0x10
c0016732:	90                   	nop
c0016733:	83 c4 0c             	add    esp,0xc
c0016736:	c3                   	ret    
c0016737:	90                   	nop

c0016738 <Mouse::~Mouse()>:
c0016738:	83 ec 0c             	sub    esp,0xc
c001673b:	83 ec 0c             	sub    esp,0xc
c001673e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016742:	e8 cd ff ff ff       	call   c0016714 <Mouse::~Mouse()>
c0016747:	83 c4 10             	add    esp,0x10
c001674a:	83 ec 08             	sub    esp,0x8
c001674d:	68 58 01 00 00       	push   0x158
c0016752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016756:	e8 bb c5 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c001675b:	83 c4 10             	add    esp,0x10
c001675e:	83 c4 0c             	add    esp,0xc
c0016761:	c3                   	ret    

c0016762 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016762:	55                   	push   ebp
c0016763:	57                   	push   edi
c0016764:	56                   	push   esi
c0016765:	53                   	push   ebx
c0016766:	81 ec 28 01 00 00    	sub    esp,0x128
c001676c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016773:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001677a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016781:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016788:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001678c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016790:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016797:	e8 6c dd ff ff       	call   c0014508 <Device::getName()>
c001679c:	5a                   	pop    edx
c001679d:	59                   	pop    ecx
c001679e:	50                   	push   eax
c001679f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00167a3:	55                   	push   ebp
c00167a4:	e8 8b a0 fe ff       	call   c0000834 <strcpy>
c00167a9:	5b                   	pop    ebx
c00167aa:	58                   	pop    eax
c00167ab:	68 08 b2 02 c0       	push   0xc002b208
c00167b0:	55                   	push   ebp
c00167b1:	e8 be a1 fe ff       	call   c0000974 <strcat>
c00167b6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00167bd:	e8 7e 90 ff ff       	call   c000f840 <malloc>
c00167c2:	83 c4 0c             	add    esp,0xc
c00167c5:	89 c3                	mov    ebx,eax
c00167c7:	57                   	push   edi
c00167c8:	56                   	push   esi
c00167c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167d1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00167d8:	55                   	push   ebp
c00167d9:	50                   	push   eax
c00167da:	e8 cf fb ff ff       	call   c00163ae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00167df:	83 c4 14             	add    esp,0x14
c00167e2:	53                   	push   ebx
c00167e3:	e8 7c fc ff ff       	call   c0016464 <LogicalDisk::assignDriveLetter()>
c00167e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167eb:	89 c6                	mov    esi,eax
c00167ed:	e8 28 fd ff ff       	call   c001651a <LogicalDisk::mount()>
c00167f2:	58                   	pop    eax
c00167f3:	5a                   	pop    edx
c00167f4:	53                   	push   ebx
c00167f5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00167fc:	e8 1b da ff ff       	call   c001421c <Device::addChild(Device*)>
c0016801:	59                   	pop    ecx
c0016802:	89 f0                	mov    eax,esi
c0016804:	5b                   	pop    ebx
c0016805:	0f be f0             	movsx  esi,al
c0016808:	56                   	push   esi
c0016809:	68 13 b2 02 c0       	push   0xc002b213
c001680e:	e8 e3 c5 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0016813:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016819:	5b                   	pop    ebx
c001681a:	5e                   	pop    esi
c001681b:	5f                   	pop    edi
c001681c:	5d                   	pop    ebp
c001681d:	c3                   	ret    

c001681e <createPartitionsForDisk(PhysicalDisk*)>:
c001681e:	55                   	push   ebp
c001681f:	57                   	push   edi
c0016820:	56                   	push   esi
c0016821:	53                   	push   ebx
c0016822:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016828:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001682f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016835:	3d 00 02 00 00       	cmp    eax,0x200
c001683a:	74 27                	je     c0016863 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001683c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016842:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016848:	83 ec 10             	sub    esp,0x10
c001684b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001684f:	99                   	cdq    
c0016850:	c1 e6 0a             	shl    esi,0xa
c0016853:	52                   	push   edx
c0016854:	89 fd                	mov    ebp,edi
c0016856:	50                   	push   eax
c0016857:	55                   	push   ebp
c0016858:	56                   	push   esi
c0016859:	e8 3e 00 01 00       	call   c002689c <__udivdi3>
c001685e:	e9 b1 00 00 00       	jmp    c0016914 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016863:	83 ec 0c             	sub    esp,0xc
c0016866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016868:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001686c:	56                   	push   esi
c001686d:	6a 01                	push   0x1
c001686f:	6a 00                	push   0x0
c0016871:	6a 00                	push   0x0
c0016873:	53                   	push   ebx
c0016874:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016877:	83 c4 20             	add    esp,0x20
c001687a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016882:	75 0a                	jne    c001688e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016884:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001688c:	74 2c                	je     c00168ba <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001688e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016894:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001689a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168a0:	83 ec 10             	sub    esp,0x10
c00168a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168a7:	89 f7                	mov    edi,esi
c00168a9:	c1 e0 0a             	shl    eax,0xa
c00168ac:	c1 ff 1f             	sar    edi,0x1f
c00168af:	57                   	push   edi
c00168b0:	56                   	push   esi
c00168b1:	52                   	push   edx
c00168b2:	50                   	push   eax
c00168b3:	e8 e4 ff 00 00       	call   c002689c <__udivdi3>
c00168b8:	eb 5a                	jmp    c0016914 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00168ba:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00168c1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00168c8:	83 e1 7f             	and    ecx,0x7f
c00168cb:	83 e0 7f             	and    eax,0x7f
c00168ce:	01 c1                	add    ecx,eax
c00168d0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00168d7:	83 e0 7f             	and    eax,0x7f
c00168da:	01 c1                	add    ecx,eax
c00168dc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00168e3:	83 e0 7f             	and    eax,0x7f
c00168e6:	00 c1                	add    cl,al
c00168e8:	74 41                	je     c001692b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00168ea:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168f0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168fc:	83 ec 10             	sub    esp,0x10
c00168ff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016903:	89 f7                	mov    edi,esi
c0016905:	c1 e0 0a             	shl    eax,0xa
c0016908:	c1 ff 1f             	sar    edi,0x1f
c001690b:	57                   	push   edi
c001690c:	56                   	push   esi
c001690d:	52                   	push   edx
c001690e:	50                   	push   eax
c001690f:	e8 88 ff 00 00       	call   c002689c <__udivdi3>
c0016914:	83 c4 14             	add    esp,0x14
c0016917:	52                   	push   edx
c0016918:	50                   	push   eax
c0016919:	6a 00                	push   0x0
c001691b:	6a 00                	push   0x0
c001691d:	53                   	push   ebx
c001691e:	e8 3f fe ff ff       	call   c0016762 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016923:	83 c4 20             	add    esp,0x20
c0016926:	e9 79 01 00 00       	jmp    c0016aa4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001692b:	89 f0                	mov    eax,esi
c001692d:	31 f6                	xor    esi,esi
c001692f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016936:	75 02                	jne    c001693a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016938:	89 f1                	mov    ecx,esi
c001693a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016941:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016948:	c1 e2 08             	shl    edx,0x8
c001694b:	c1 e7 10             	shl    edi,0x10
c001694e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016956:	09 fa                	or     edx,edi
c0016958:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016960:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016967:	83 c0 10             	add    eax,0x10
c001696a:	09 fa                	or     edx,edi
c001696c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016973:	c1 e7 18             	shl    edi,0x18
c0016976:	09 fa                	or     edx,edi
c0016978:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001697f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016983:	c1 e7 10             	shl    edi,0x10
c0016986:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001698d:	c1 e2 08             	shl    edx,0x8
c0016990:	09 fa                	or     edx,edi
c0016992:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016999:	09 fa                	or     edx,edi
c001699b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00169a2:	c1 e7 18             	shl    edi,0x18
c00169a5:	09 fa                	or     edx,edi
c00169a7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00169ab:	46                   	inc    esi
c00169ac:	83 fe 04             	cmp    esi,0x4
c00169af:	0f 85 7a ff ff ff    	jne    c001692f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00169b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169b9:	83 f0 01             	xor    eax,0x1
c00169bc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00169c0:	75 57                	jne    c0016a19 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169c6:	83 f0 01             	xor    eax,0x1
c00169c9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00169cd:	75 4a                	jne    c0016a19 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169cf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00169d3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00169db:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00169e3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169e9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169ef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169f5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169f9:	89 f7                	mov    edi,esi
c00169fb:	c1 e0 0a             	shl    eax,0xa
c00169fe:	c1 ff 1f             	sar    edi,0x1f
c0016a01:	57                   	push   edi
c0016a02:	56                   	push   esi
c0016a03:	52                   	push   edx
c0016a04:	50                   	push   eax
c0016a05:	e8 92 fe 00 00       	call   c002689c <__udivdi3>
c0016a0a:	83 c4 10             	add    esp,0x10
c0016a0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a11:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a15:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016a19:	84 c9                	test   cl,cl
c0016a1b:	74 53                	je     c0016a70 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016a1d:	0f b6 c9             	movzx  ecx,cl
c0016a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a28:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a2c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a38:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016a3c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016a40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a44:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016a48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a50:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016a54:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016a58:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016a5c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016a60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a68:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016a6c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016a70:	31 ed                	xor    ebp,ebp
c0016a72:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016a76:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016a7a:	89 f8                	mov    eax,edi
c0016a7c:	09 f0                	or     eax,esi
c0016a7e:	74 1e                	je     c0016a9e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a80:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016a84:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016a88:	89 d1                	mov    ecx,edx
c0016a8a:	09 c1                	or     ecx,eax
c0016a8c:	74 10                	je     c0016a9e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a8e:	83 ec 0c             	sub    esp,0xc
c0016a91:	57                   	push   edi
c0016a92:	56                   	push   esi
c0016a93:	52                   	push   edx
c0016a94:	50                   	push   eax
c0016a95:	53                   	push   ebx
c0016a96:	e8 c7 fc ff ff       	call   c0016762 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a9b:	83 c4 20             	add    esp,0x20
c0016a9e:	45                   	inc    ebp
c0016a9f:	83 fd 04             	cmp    ebp,0x4
c0016aa2:	75 ce                	jne    c0016a72 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016aa4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016aaa:	5b                   	pop    ebx
c0016aab:	5e                   	pop    esi
c0016aac:	5f                   	pop    edi
c0016aad:	5d                   	pop    ebp
c0016aae:	c3                   	ret    
c0016aaf:	90                   	nop

c0016ab0 <Serial::Serial(char const*)>:
c0016ab0:	83 ec 0c             	sub    esp,0xc
c0016ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab7:	83 ec 08             	sub    esp,0x8
c0016aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016abe:	50                   	push   eax
c0016abf:	e8 48 d9 ff ff       	call   c001440c <Device::Device(char const*)>
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	ba 40 b2 02 c0       	mov    edx,0xc002b240
c0016acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad0:	89 10                	mov    DWORD PTR [eax],edx
c0016ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ae0:	90                   	nop
c0016ae1:	83 c4 0c             	add    esp,0xc
c0016ae4:	c3                   	ret    
c0016ae5:	90                   	nop

c0016ae6 <Serial::~Serial()>:
c0016ae6:	83 ec 0c             	sub    esp,0xc
c0016ae9:	ba 40 b2 02 c0       	mov    edx,0xc002b240
c0016aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af2:	89 10                	mov    DWORD PTR [eax],edx
c0016af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af8:	83 ec 0c             	sub    esp,0xc
c0016afb:	50                   	push   eax
c0016afc:	e8 ed d5 ff ff       	call   c00140ee <Device::~Device()>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	90                   	nop
c0016b05:	83 c4 0c             	add    esp,0xc
c0016b08:	c3                   	ret    
c0016b09:	90                   	nop

c0016b0a <Serial::~Serial()>:
c0016b0a:	83 ec 0c             	sub    esp,0xc
c0016b0d:	83 ec 0c             	sub    esp,0xc
c0016b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b14:	e8 cd ff ff ff       	call   c0016ae6 <Serial::~Serial()>
c0016b19:	83 c4 10             	add    esp,0x10
c0016b1c:	83 ec 08             	sub    esp,0x8
c0016b1f:	68 58 01 00 00       	push   0x158
c0016b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b28:	e8 e9 c1 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0016b2d:	83 c4 10             	add    esp,0x10
c0016b30:	83 c4 0c             	add    esp,0xc
c0016b33:	c3                   	ret    

c0016b34 <Timer::Timer(char const*)>:
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b3b:	83 ec 08             	sub    esp,0x8
c0016b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b42:	50                   	push   eax
c0016b43:	e8 c4 d8 ff ff       	call   c001440c <Device::Device(char const*)>
c0016b48:	83 c4 10             	add    esp,0x10
c0016b4b:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c0016b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b54:	89 10                	mov    DWORD PTR [eax],edx
c0016b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b5a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016b64:	90                   	nop
c0016b65:	83 c4 0c             	add    esp,0xc
c0016b68:	c3                   	ret    
c0016b69:	90                   	nop

c0016b6a <Timer::~Timer()>:
c0016b6a:	83 ec 0c             	sub    esp,0xc
c0016b6d:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c0016b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b76:	89 10                	mov    DWORD PTR [eax],edx
c0016b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b7c:	83 ec 0c             	sub    esp,0xc
c0016b7f:	50                   	push   eax
c0016b80:	e8 69 d5 ff ff       	call   c00140ee <Device::~Device()>
c0016b85:	83 c4 10             	add    esp,0x10
c0016b88:	90                   	nop
c0016b89:	83 c4 0c             	add    esp,0xc
c0016b8c:	c3                   	ret    
c0016b8d:	90                   	nop

c0016b8e <Timer::~Timer()>:
c0016b8e:	83 ec 0c             	sub    esp,0xc
c0016b91:	83 ec 0c             	sub    esp,0xc
c0016b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b98:	e8 cd ff ff ff       	call   c0016b6a <Timer::~Timer()>
c0016b9d:	83 c4 10             	add    esp,0x10
c0016ba0:	83 ec 08             	sub    esp,0x8
c0016ba3:	68 5c 01 00 00       	push   0x15c
c0016ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bac:	e8 65 c1 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0016bb1:	83 c4 10             	add    esp,0x10
c0016bb4:	83 c4 0c             	add    esp,0xc
c0016bb7:	c3                   	ret    

c0016bb8 <Timer::read()>:
c0016bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bbc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016bc2:	c3                   	ret    

c0016bc3 <timerHandler(unsigned long long)>:
c0016bc3:	55                   	push   ebp
c0016bc4:	57                   	push   edi
c0016bc5:	56                   	push   esi
c0016bc6:	53                   	push   ebx
c0016bc7:	83 ec 0c             	sub    esp,0xc
c0016bca:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016bce:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016bd2:	01 35 90 ea 02 c0    	add    DWORD PTR ds:0xc002ea90,esi
c0016bd8:	11 3d 94 ea 02 c0    	adc    DWORD PTR ds:0xc002ea94,edi
c0016bde:	80 3d 0d e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e40d,0x0
c0016be5:	0f 84 07 01 00 00    	je     c0016cf2 <timerHandler(unsigned long long)+0x12f>
c0016beb:	e8 f3 70 00 00       	call   c001dce3 <lockStuff()>
c0016bf0:	83 ec 0c             	sub    esp,0xc
c0016bf3:	68 5c 19 03 c0       	push   0xc003195c
c0016bf8:	e8 11 1d 01 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bfd:	c7 04 24 5c 19 03 c0 	mov    DWORD PTR [esp],0xc003195c
c0016c04:	89 c3                	mov    ebx,eax
c0016c06:	e8 0b 1d 01 00       	call   c0028916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c0b:	83 c4 10             	add    esp,0x10
c0016c0e:	84 c0                	test   al,al
c0016c10:	74 60                	je     c0016c72 <timerHandler(unsigned long long)+0xaf>
c0016c12:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c18:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016c1b:	85 c0                	test   eax,eax
c0016c1d:	0f 85 91 00 00 00    	jne    c0016cb4 <timerHandler(unsigned long long)+0xf1>
c0016c23:	e9 be 00 00 00       	jmp    c0016ce6 <timerHandler(unsigned long long)+0x123>
c0016c28:	83 ec 0c             	sub    esp,0xc
c0016c2b:	55                   	push   ebp
c0016c2c:	e8 a3 76 00 00       	call   c001e2d4 <unblockTask(ThreadControlBlock*)>
c0016c31:	83 c4 10             	add    esp,0x10
c0016c34:	39 eb                	cmp    ebx,ebp
c0016c36:	75 12                	jne    c0016c4a <timerHandler(unsigned long long)+0x87>
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	68 5c 19 03 c0       	push   0xc003195c
c0016c40:	e8 c9 1c 01 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c45:	89 c3                	mov    ebx,eax
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	83 ec 0c             	sub    esp,0xc
c0016c4d:	68 5c 19 03 c0       	push   0xc003195c
c0016c52:	e8 bf 1c 01 00       	call   c0028916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	84 c0                	test   al,al
c0016c5c:	75 b4                	jne    c0016c12 <timerHandler(unsigned long long)+0x4f>
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	68 5c 19 03 c0       	push   0xc003195c
c0016c66:	e8 a3 1c 01 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c6b:	83 c4 10             	add    esp,0x10
c0016c6e:	39 d8                	cmp    eax,ebx
c0016c70:	74 a0                	je     c0016c12 <timerHandler(unsigned long long)+0x4f>
c0016c72:	83 ec 0c             	sub    esp,0xc
c0016c75:	68 5c 19 03 c0       	push   0xc003195c
c0016c7a:	e8 8f 1c 01 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c7f:	c7 04 24 5c 19 03 c0 	mov    DWORD PTR [esp],0xc003195c
c0016c86:	89 c5                	mov    ebp,eax
c0016c88:	e8 a5 1c 01 00       	call   c0028932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c8d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016c90:	83 c4 10             	add    esp,0x10
c0016c93:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016c96:	39 15 90 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea90,edx
c0016c9c:	a1 94 ea 02 c0       	mov    eax,ds:0xc002ea94
c0016ca1:	19 c8                	sbb    eax,ecx
c0016ca3:	73 83                	jae    c0016c28 <timerHandler(unsigned long long)+0x65>
c0016ca5:	50                   	push   eax
c0016ca6:	50                   	push   eax
c0016ca7:	55                   	push   ebp
c0016ca8:	68 5c 19 03 c0       	push   0xc003195c
c0016cad:	e8 2e 1d 01 00       	call   c00289e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016cb2:	eb 93                	jmp    c0016c47 <timerHandler(unsigned long long)+0x84>
c0016cb4:	80 3d 0c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e40c,0x0
c0016cbb:	74 29                	je     c0016ce6 <timerHandler(unsigned long long)+0x123>
c0016cbd:	39 c6                	cmp    esi,eax
c0016cbf:	bb 00 00 00 00       	mov    ebx,0x0
c0016cc4:	19 df                	sbb    edi,ebx
c0016cc6:	72 19                	jb     c0016ce1 <timerHandler(unsigned long long)+0x11e>
c0016cc8:	e8 ef 6f 00 00       	call   c001dcbc <lockScheduler()>
c0016ccd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016cd5:	e8 1e 73 00 00       	call   c001dff8 <schedule()>
c0016cda:	e8 df 6f 00 00       	call   c001dcbe <unlockScheduler()>
c0016cdf:	eb 05                	jmp    c0016ce6 <timerHandler(unsigned long long)+0x123>
c0016ce1:	29 f0                	sub    eax,esi
c0016ce3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016ce6:	83 c4 0c             	add    esp,0xc
c0016ce9:	5b                   	pop    ebx
c0016cea:	5e                   	pop    esi
c0016ceb:	5f                   	pop    edi
c0016cec:	5d                   	pop    ebp
c0016ced:	e9 8b 73 00 00       	jmp    c001e07d <unlockStuff()>
c0016cf2:	83 c4 0c             	add    esp,0xc
c0016cf5:	5b                   	pop    ebx
c0016cf6:	5e                   	pop    esi
c0016cf7:	5f                   	pop    edi
c0016cf8:	5d                   	pop    ebp
c0016cf9:	c3                   	ret    

c0016cfa <setupTimer(int)>:
c0016cfa:	57                   	push   edi
c0016cfb:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0016d00:	56                   	push   esi
c0016d01:	53                   	push   ebx
c0016d02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d15:	e8 ee d7 ff ff       	call   c0014508 <Device::getName()>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016d20:	0f 85 8d 00 00 00    	jne    c0016db3 <setupTimer(int)+0xb9>
c0016d26:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0016d2b:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016d32:	74 7f                	je     c0016db3 <setupTimer(int)+0xb9>
c0016d34:	83 ec 0c             	sub    esp,0xc
c0016d37:	68 5c 01 00 00       	push   0x15c
c0016d3c:	e8 ff 8a ff ff       	call   c000f840 <malloc>
c0016d41:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d44:	89 c3                	mov    ebx,eax
c0016d46:	e8 2b f7 00 00       	call   c0026476 <PIT::PIT()>
c0016d4b:	59                   	pop    ecx
c0016d4c:	5f                   	pop    edi
c0016d4d:	53                   	push   ebx
c0016d4e:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0016d54:	e8 c3 d4 ff ff       	call   c001421c <Device::addChild(Device*)>
c0016d59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d5b:	6a 00                	push   0x0
c0016d5d:	6a 00                	push   0x0
c0016d5f:	56                   	push   esi
c0016d60:	53                   	push   ebx
c0016d61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d64:	83 c4 14             	add    esp,0x14
c0016d67:	68 60 01 00 00       	push   0x160
c0016d6c:	e8 cf 8a ff ff       	call   c000f840 <malloc>
c0016d71:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d74:	89 c7                	mov    edi,eax
c0016d76:	e8 ab f5 00 00       	call   c0026326 <APICTimer::APICTimer()>
c0016d7b:	6a 00                	push   0x0
c0016d7d:	6a 00                	push   0x0
c0016d7f:	56                   	push   esi
c0016d80:	57                   	push   edi
c0016d81:	e8 a2 f4 00 00       	call   c0026228 <APICTimer::open(int, int, void*)>
c0016d86:	83 c4 20             	add    esp,0x20
c0016d89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d8b:	6a 00                	push   0x0
c0016d8d:	6a 00                	push   0x0
c0016d8f:	6a 00                	push   0x0
c0016d91:	53                   	push   ebx
c0016d92:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d95:	58                   	pop    eax
c0016d96:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0016d9b:	5a                   	pop    edx
c0016d9c:	57                   	push   edi
c0016d9d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016da3:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016da9:	e8 6e d4 ff ff       	call   c001421c <Device::addChild(Device*)>
c0016dae:	83 c4 10             	add    esp,0x10
c0016db1:	eb 33                	jmp    c0016de6 <setupTimer(int)+0xec>
c0016db3:	83 ec 0c             	sub    esp,0xc
c0016db6:	68 5c 01 00 00       	push   0x15c
c0016dbb:	e8 80 8a ff ff       	call   c000f840 <malloc>
c0016dc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0016dc3:	89 c3                	mov    ebx,eax
c0016dc5:	e8 ac f6 00 00       	call   c0026476 <PIT::PIT()>
c0016dca:	58                   	pop    eax
c0016dcb:	5a                   	pop    edx
c0016dcc:	53                   	push   ebx
c0016dcd:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0016dd3:	e8 44 d4 ff ff       	call   c001421c <Device::addChild(Device*)>
c0016dd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dda:	6a 00                	push   0x0
c0016ddc:	6a 00                	push   0x0
c0016dde:	56                   	push   esi
c0016ddf:	53                   	push   ebx
c0016de0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016de3:	83 c4 20             	add    esp,0x20
c0016de6:	89 d8                	mov    eax,ebx
c0016de8:	5b                   	pop    ebx
c0016de9:	5e                   	pop    esi
c0016dea:	5f                   	pop    edi
c0016deb:	c3                   	ret    

c0016dec <VCache::VCache(PhysicalDisk*)>:
c0016dec:	53                   	push   ebx
c0016ded:	83 ec 18             	sub    esp,0x18
c0016df0:	ba b4 b2 02 c0       	mov    edx,0xc002b2b4
c0016df5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016df9:	89 10                	mov    DWORD PTR [eax],edx
c0016dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dff:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e0a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016e11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e15:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016e1c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016e23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e27:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016e2e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016e35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e39:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e44:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e4c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016e53:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e5e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e66:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016e6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e6e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e76:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016e7d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016e85:	83 ec 0c             	sub    esp,0xc
c0016e88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e8c:	e8 af 89 ff ff       	call   c000f840 <malloc>
c0016e91:	83 c4 10             	add    esp,0x10
c0016e94:	89 c3                	mov    ebx,eax
c0016e96:	83 ec 0c             	sub    esp,0xc
c0016e99:	53                   	push   ebx
c0016e9a:	e8 3d 6f 00 00       	call   c001dddc <Mutex::Mutex()>
c0016e9f:	83 c4 10             	add    esp,0x10
c0016ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016ea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ead:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016eb1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eb8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016ebf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ec3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ecd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016ed0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ed4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016eda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ee0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ee4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ee7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ef2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ef6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016efc:	05 00 01 00 00       	add    eax,0x100
c0016f01:	c1 e0 04             	shl    eax,0x4
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	50                   	push   eax
c0016f08:	e8 33 89 ff ff       	call   c000f840 <malloc>
c0016f0d:	83 c4 10             	add    esp,0x10
c0016f10:	89 c2                	mov    edx,eax
c0016f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f16:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f28:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f30:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f36:	c1 e0 07             	shl    eax,0x7
c0016f39:	83 ec 0c             	sub    esp,0xc
c0016f3c:	50                   	push   eax
c0016f3d:	e8 fe 88 ff ff       	call   c000f840 <malloc>
c0016f42:	83 c4 10             	add    esp,0x10
c0016f45:	89 c2                	mov    edx,eax
c0016f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f4e:	90                   	nop
c0016f4f:	83 c4 18             	add    esp,0x18
c0016f52:	5b                   	pop    ebx
c0016f53:	c3                   	ret    

c0016f54 <VCache::invalidateReadBuffer()>:
c0016f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f58:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016f5e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f62:	c3                   	ret    
c0016f63:	90                   	nop

c0016f64 <VCache::writeWriteBuffer()>:
c0016f64:	53                   	push   ebx
c0016f65:	83 ec 14             	sub    esp,0x14
c0016f68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f71:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016f74:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f77:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016f7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016f7d:	50                   	push   eax
c0016f7e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016f81:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016f88:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016f8f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016f93:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016f9a:	83 c4 28             	add    esp,0x28
c0016f9d:	5b                   	pop    ebx
c0016f9e:	c3                   	ret    
c0016f9f:	90                   	nop

c0016fa0 <VCache::~VCache()>:
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	ba b4 b2 02 c0       	mov    edx,0xc002b2b4
c0016fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fac:	89 10                	mov    DWORD PTR [eax],edx
c0016fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016fb5:	84 c0                	test   al,al
c0016fb7:	74 0f                	je     c0016fc8 <VCache::~VCache()+0x28>
c0016fb9:	83 ec 0c             	sub    esp,0xc
c0016fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fc0:	e8 9f ff ff ff       	call   c0016f64 <VCache::writeWriteBuffer()>
c0016fc5:	83 c4 10             	add    esp,0x10
c0016fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fcc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016fcf:	83 ec 0c             	sub    esp,0xc
c0016fd2:	50                   	push   eax
c0016fd3:	e8 78 88 ff ff       	call   c000f850 <free>
c0016fd8:	83 c4 10             	add    esp,0x10
c0016fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fdf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016fe2:	83 ec 0c             	sub    esp,0xc
c0016fe5:	50                   	push   eax
c0016fe6:	e8 65 88 ff ff       	call   c000f850 <free>
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	90                   	nop
c0016fef:	83 c4 0c             	add    esp,0xc
c0016ff2:	c3                   	ret    
c0016ff3:	90                   	nop

c0016ff4 <VCache::~VCache()>:
c0016ff4:	83 ec 0c             	sub    esp,0xc
c0016ff7:	83 ec 0c             	sub    esp,0xc
c0016ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ffe:	e8 9d ff ff ff       	call   c0016fa0 <VCache::~VCache()>
c0017003:	83 c4 10             	add    esp,0x10
c0017006:	83 ec 08             	sub    esp,0x8
c0017009:	6a 44                	push   0x44
c001700b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001700f:	e8 02 bd ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0017014:	83 c4 10             	add    esp,0x10
c0017017:	83 c4 0c             	add    esp,0xc
c001701a:	c3                   	ret    
c001701b:	90                   	nop

c001701c <VCache::write(unsigned long long, int, void*)>:
c001701c:	55                   	push   ebp
c001701d:	57                   	push   edi
c001701e:	56                   	push   esi
c001701f:	53                   	push   ebx
c0017020:	83 ec 28             	sub    esp,0x28
c0017023:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017027:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001702b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001702f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017033:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017036:	e8 03 72 00 00       	call   c001e23e <Semaphore::acquire()>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017042:	74 0c                	je     c0017050 <VCache::write(unsigned long long, int, void*)+0x34>
c0017044:	83 ec 0c             	sub    esp,0xc
c0017047:	53                   	push   ebx
c0017048:	e8 07 ff ff ff       	call   c0016f54 <VCache::invalidateReadBuffer()>
c001704d:	83 c4 10             	add    esp,0x10
c0017050:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017054:	74 66                	je     c00170bc <VCache::write(unsigned long long, int, void*)+0xa0>
c0017056:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017059:	99                   	cdq    
c001705a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001705e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017061:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017064:	89 c1                	mov    ecx,eax
c0017066:	89 d0                	mov    eax,edx
c0017068:	31 f1                	xor    ecx,esi
c001706a:	31 f8                	xor    eax,edi
c001706c:	89 ca                	mov    edx,ecx
c001706e:	09 c2                	or     edx,eax
c0017070:	75 3e                	jne    c00170b0 <VCache::write(unsigned long long, int, void*)+0x94>
c0017072:	83 fd 01             	cmp    ebp,0x1
c0017075:	75 39                	jne    c00170b0 <VCache::write(unsigned long long, int, void*)+0x94>
c0017077:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001707a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017080:	51                   	push   ecx
c0017081:	50                   	push   eax
c0017082:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017086:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001708a:	0f af c8             	imul   ecx,eax
c001708d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017090:	51                   	push   ecx
c0017091:	e8 ae 96 fe ff       	call   c0000744 <memcpy>
c0017096:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	40                   	inc    eax
c001709d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00170a0:	83 c0 80             	add    eax,0xffffff80
c00170a3:	75 57                	jne    c00170fc <VCache::write(unsigned long long, int, void*)+0xe0>
c00170a5:	83 ec 0c             	sub    esp,0xc
c00170a8:	53                   	push   ebx
c00170a9:	e8 b6 fe ff ff       	call   c0016f64 <VCache::writeWriteBuffer()>
c00170ae:	eb 34                	jmp    c00170e4 <VCache::write(unsigned long long, int, void*)+0xc8>
c00170b0:	83 ec 0c             	sub    esp,0xc
c00170b3:	53                   	push   ebx
c00170b4:	e8 ab fe ff ff       	call   c0016f64 <VCache::writeWriteBuffer()>
c00170b9:	83 c4 10             	add    esp,0x10
c00170bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170bf:	83 fd 7f             	cmp    ebp,0x7f
c00170c2:	7f 25                	jg     c00170e9 <VCache::write(unsigned long long, int, void*)+0xcd>
c00170c4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00170c7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00170ca:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00170cd:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00170d1:	52                   	push   edx
c00170d2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00170d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170dc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170df:	e8 60 96 fe ff       	call   c0000744 <memcpy>
c00170e4:	83 c4 10             	add    esp,0x10
c00170e7:	eb 13                	jmp    c00170fc <VCache::write(unsigned long long, int, void*)+0xe0>
c00170e9:	83 ec 0c             	sub    esp,0xc
c00170ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00170ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170f2:	55                   	push   ebp
c00170f3:	57                   	push   edi
c00170f4:	56                   	push   esi
c00170f5:	50                   	push   eax
c00170f6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170f9:	83 c4 20             	add    esp,0x20
c00170fc:	83 ec 0c             	sub    esp,0xc
c00170ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017102:	e8 e5 76 00 00       	call   c001e7ec <Semaphore::release()>
c0017107:	83 c4 2c             	add    esp,0x2c
c001710a:	31 c0                	xor    eax,eax
c001710c:	5b                   	pop    ebx
c001710d:	5e                   	pop    esi
c001710e:	5f                   	pop    edi
c001710f:	5d                   	pop    ebp
c0017110:	c3                   	ret    
c0017111:	90                   	nop

c0017112 <VCache::read(unsigned long long, int, void*)>:
c0017112:	55                   	push   ebp
c0017113:	57                   	push   edi
c0017114:	56                   	push   esi
c0017115:	53                   	push   ebx
c0017116:	83 ec 28             	sub    esp,0x28
c0017119:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001711d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017121:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017125:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017129:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001712d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017131:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017135:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017138:	e8 01 71 00 00       	call   c001e23e <Semaphore::acquire()>
c001713d:	83 c4 10             	add    esp,0x10
c0017140:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017144:	74 0c                	je     c0017152 <VCache::read(unsigned long long, int, void*)+0x40>
c0017146:	83 ec 0c             	sub    esp,0xc
c0017149:	53                   	push   ebx
c001714a:	e8 15 fe ff ff       	call   c0016f64 <VCache::writeWriteBuffer()>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	83 fe 01             	cmp    esi,0x1
c0017155:	0f 85 80 00 00 00    	jne    c00171db <VCache::read(unsigned long long, int, void*)+0xc9>
c001715b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001715e:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017165:	75 74                	jne    c00171db <VCache::read(unsigned long long, int, void*)+0xc9>
c0017167:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001716a:	89 d1                	mov    ecx,edx
c001716c:	f7 d9                	neg    ecx
c001716e:	89 cf                	mov    edi,ecx
c0017170:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017174:	c1 ff 1f             	sar    edi,0x1f
c0017177:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001717a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001717e:	89 ce                	mov    esi,ecx
c0017180:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017184:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017188:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001718c:	89 cf                	mov    edi,ecx
c001718e:	74 0a                	je     c001719a <VCache::read(unsigned long long, int, void*)+0x88>
c0017190:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017193:	75 05                	jne    c001719a <VCache::read(unsigned long long, int, void*)+0x88>
c0017195:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017198:	74 1c                	je     c00171b6 <VCache::read(unsigned long long, int, void*)+0xa4>
c001719a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001719e:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00171a1:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00171a4:	83 ec 0c             	sub    esp,0xc
c00171a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00171a9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00171ac:	52                   	push   edx
c00171ad:	57                   	push   edi
c00171ae:	56                   	push   esi
c00171af:	50                   	push   eax
c00171b0:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00171b3:	83 c4 20             	add    esp,0x20
c00171b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171b9:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00171bf:	50                   	push   eax
c00171c0:	52                   	push   edx
c00171c1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171c4:	48                   	dec    eax
c00171c5:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00171c9:	0f af c2             	imul   eax,edx
c00171cc:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00171cf:	50                   	push   eax
c00171d0:	55                   	push   ebp
c00171d1:	e8 6e 95 fe ff       	call   c0000744 <memcpy>
c00171d6:	83 c4 10             	add    esp,0x10
c00171d9:	eb 21                	jmp    c00171fc <VCache::read(unsigned long long, int, void*)+0xea>
c00171db:	83 ec 0c             	sub    esp,0xc
c00171de:	53                   	push   ebx
c00171df:	e8 70 fd ff ff       	call   c0016f54 <VCache::invalidateReadBuffer()>
c00171e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00171e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171ec:	56                   	push   esi
c00171ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171f5:	50                   	push   eax
c00171f6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00171f9:	83 c4 20             	add    esp,0x20
c00171fc:	83 ec 0c             	sub    esp,0xc
c00171ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017202:	e8 e5 75 00 00       	call   c001e7ec <Semaphore::release()>
c0017207:	83 c4 2c             	add    esp,0x2c
c001720a:	31 c0                	xor    eax,eax
c001720c:	5b                   	pop    ebx
c001720d:	5e                   	pop    esi
c001720e:	5f                   	pop    edi
c001720f:	5d                   	pop    ebp
c0017210:	c3                   	ret    
c0017211:	90                   	nop

c0017212 <Video::putrect(int, int, int, int, unsigned int)>:
c0017212:	55                   	push   ebp
c0017213:	57                   	push   edi
c0017214:	56                   	push   esi
c0017215:	53                   	push   ebx
c0017216:	83 ec 1c             	sub    esp,0x1c
c0017219:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001721d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017221:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017225:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017229:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001722d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017231:	01 df                	add    edi,ebx
c0017233:	39 fb                	cmp    ebx,edi
c0017235:	7d 1f                	jge    c0017256 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017237:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001723b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001723f:	7d 12                	jge    c0017253 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017241:	8b 16                	mov    edx,DWORD PTR [esi]
c0017243:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017247:	53                   	push   ebx
c0017248:	55                   	push   ebp
c0017249:	45                   	inc    ebp
c001724a:	56                   	push   esi
c001724b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001724e:	83 c4 10             	add    esp,0x10
c0017251:	eb e8                	jmp    c001723b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017253:	43                   	inc    ebx
c0017254:	eb dd                	jmp    c0017233 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017256:	83 c4 1c             	add    esp,0x1c
c0017259:	5b                   	pop    ebx
c001725a:	5e                   	pop    esi
c001725b:	5f                   	pop    edi
c001725c:	5d                   	pop    ebp
c001725d:	c3                   	ret    

c001725e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001725e:	55                   	push   ebp
c001725f:	57                   	push   edi
c0017260:	31 ff                	xor    edi,edi
c0017262:	56                   	push   esi
c0017263:	53                   	push   ebx
c0017264:	83 ec 1c             	sub    esp,0x1c
c0017267:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001726b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001726f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017276:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001727b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001727f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017283:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017287:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001728a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001728e:	01 f9                	add    ecx,edi
c0017290:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017294:	7d 2f                	jge    c00172c5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017296:	31 f6                	xor    esi,esi
c0017298:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001729c:	01 f2                	add    edx,esi
c001729e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00172a2:	7d 1a                	jge    c00172be <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00172a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172a7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00172aa:	46                   	inc    esi
c00172ab:	51                   	push   ecx
c00172ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00172b0:	52                   	push   edx
c00172b1:	55                   	push   ebp
c00172b2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00172b5:	83 c4 10             	add    esp,0x10
c00172b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172bc:	eb da                	jmp    c0017298 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00172be:	47                   	inc    edi
c00172bf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00172c3:	eb c5                	jmp    c001728a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00172c5:	83 c4 1c             	add    esp,0x1c
c00172c8:	5b                   	pop    ebx
c00172c9:	5e                   	pop    esi
c00172ca:	5f                   	pop    edi
c00172cb:	5d                   	pop    ebp
c00172cc:	c3                   	ret    
c00172cd:	90                   	nop

c00172ce <Video::blit(unsigned int*, int, int, int, int)>:
c00172ce:	55                   	push   ebp
c00172cf:	57                   	push   edi
c00172d0:	56                   	push   esi
c00172d1:	53                   	push   ebx
c00172d2:	83 ec 1c             	sub    esp,0x1c
c00172d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172dd:	85 c0                	test   eax,eax
c00172df:	79 02                	jns    c00172e3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00172e1:	31 c0                	xor    eax,eax
c00172e3:	c1 e0 02             	shl    eax,0x2
c00172e6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172f2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00172f6:	39 d8                	cmp    eax,ebx
c00172f8:	7e 49                	jle    c0017343 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172fa:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017300:	7c 41                	jl     c0017343 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017302:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017306:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001730a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001730e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017312:	39 f9                	cmp    ecx,edi
c0017314:	7e 22                	jle    c0017338 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017316:	83 c5 04             	add    ebp,0x4
c0017319:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001731f:	7c 14                	jl     c0017335 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017321:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017323:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017326:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001732a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001732e:	56                   	push   esi
c001732f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017332:	83 c4 10             	add    esp,0x10
c0017335:	47                   	inc    edi
c0017336:	eb d2                	jmp    c001730a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017338:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001733c:	43                   	inc    ebx
c001733d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017341:	eb ab                	jmp    c00172ee <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017343:	83 c4 1c             	add    esp,0x1c
c0017346:	5b                   	pop    ebx
c0017347:	5e                   	pop    esi
c0017348:	5f                   	pop    edi
c0017349:	5d                   	pop    ebp
c001734a:	c3                   	ret    
c001734b:	90                   	nop

c001734c <Video::clearScreen(unsigned int)>:
c001734c:	57                   	push   edi
c001734d:	56                   	push   esi
c001734e:	53                   	push   ebx
c001734f:	31 db                	xor    ebx,ebx
c0017351:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017355:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001735b:	7e 1f                	jle    c001737c <Video::clearScreen(unsigned int)+0x30>
c001735d:	31 ff                	xor    edi,edi
c001735f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017365:	7e 12                	jle    c0017379 <Video::clearScreen(unsigned int)+0x2d>
c0017367:	8b 06                	mov    eax,DWORD PTR [esi]
c0017369:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001736d:	53                   	push   ebx
c001736e:	57                   	push   edi
c001736f:	47                   	inc    edi
c0017370:	56                   	push   esi
c0017371:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017374:	83 c4 10             	add    esp,0x10
c0017377:	eb e6                	jmp    c001735f <Video::clearScreen(unsigned int)+0x13>
c0017379:	43                   	inc    ebx
c001737a:	eb d9                	jmp    c0017355 <Video::clearScreen(unsigned int)+0x9>
c001737c:	5b                   	pop    ebx
c001737d:	5e                   	pop    esi
c001737e:	5f                   	pop    edi
c001737f:	c3                   	ret    

c0017380 <Video::putpixel(int, int, unsigned int)>:
c0017380:	c7 44 24 04 bc b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2bc
c0017388:	e9 0a 31 00 00       	jmp    c001a497 <Krnl::panic(char const*)>
c001738d:	90                   	nop

c001738e <Video::Video(char const*)>:
c001738e:	83 ec 0c             	sub    esp,0xc
c0017391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017395:	83 ec 08             	sub    esp,0x8
c0017398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001739c:	50                   	push   eax
c001739d:	e8 6a d0 ff ff       	call   c001440c <Device::Device(char const*)>
c00173a2:	83 c4 10             	add    esp,0x10
c00173a5:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c00173aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173ae:	89 10                	mov    DWORD PTR [eax],edx
c00173b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173b4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00173be:	90                   	nop
c00173bf:	83 c4 0c             	add    esp,0xc
c00173c2:	c3                   	ret    
c00173c3:	90                   	nop

c00173c4 <Video::~Video()>:
c00173c4:	83 ec 0c             	sub    esp,0xc
c00173c7:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c00173cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173d0:	89 10                	mov    DWORD PTR [eax],edx
c00173d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173d6:	83 ec 0c             	sub    esp,0xc
c00173d9:	50                   	push   eax
c00173da:	e8 0f cd ff ff       	call   c00140ee <Device::~Device()>
c00173df:	83 c4 10             	add    esp,0x10
c00173e2:	90                   	nop
c00173e3:	83 c4 0c             	add    esp,0xc
c00173e6:	c3                   	ret    
c00173e7:	90                   	nop

c00173e8 <Video::~Video()>:
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	83 ec 0c             	sub    esp,0xc
c00173ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173f2:	e8 cd ff ff ff       	call   c00173c4 <Video::~Video()>
c00173f7:	83 c4 10             	add    esp,0x10
c00173fa:	83 ec 08             	sub    esp,0x8
c00173fd:	68 64 01 00 00       	push   0x164
c0017402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017406:	e8 0b b9 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	83 c4 0c             	add    esp,0xc
c0017411:	c3                   	ret    

c0017412 <Video::isMonochrome()>:
c0017412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017416:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001741c:	c3                   	ret    
c001741d:	90                   	nop

c001741e <Video::getWidth()>:
c001741e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017422:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017428:	c3                   	ret    
c0017429:	90                   	nop

c001742a <Video::getHeight()>:
c001742a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001742e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017434:	c3                   	ret    
c0017435:	90                   	nop

c0017436 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017436:	55                   	push   ebp
c0017437:	57                   	push   edi
c0017438:	56                   	push   esi
c0017439:	53                   	push   ebx
c001743a:	83 ec 2c             	sub    esp,0x2c
c001743d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017441:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017445:	83 f8 01             	cmp    eax,0x1
c0017448:	19 c9                	sbb    ecx,ecx
c001744a:	31 db                	xor    ebx,ebx
c001744c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017450:	89 cd                	mov    ebp,ecx
c0017452:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001745a:	f7 d5                	not    ebp
c001745c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017462:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017466:	01 d8                	add    eax,ebx
c0017468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001746c:	56                   	push   esi
c001746d:	e8 b8 ff ff ff       	call   c001742a <Video::getHeight()>
c0017472:	59                   	pop    ecx
c0017473:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017477:	7e 70                	jle    c00174e9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017479:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001747d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017481:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017484:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017488:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001748c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017493:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017497:	89 f8                	mov    eax,edi
c0017499:	83 c0 20             	add    eax,0x20
c001749c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174a0:	56                   	push   esi
c00174a1:	e8 78 ff ff ff       	call   c001741e <Video::getWidth()>
c00174a6:	5a                   	pop    edx
c00174a7:	39 c7                	cmp    edi,eax
c00174a9:	7d 34                	jge    c00174df <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00174ab:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00174b0:	74 05                	je     c00174b7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00174b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00174b4:	55                   	push   ebp
c00174b5:	eb 0d                	jmp    c00174c4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00174b7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00174bc:	74 12                	je     c00174d0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00174be:	8b 06                	mov    eax,DWORD PTR [esi]
c00174c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174c8:	57                   	push   edi
c00174c9:	56                   	push   esi
c00174ca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174cd:	83 c4 10             	add    esp,0x10
c00174d0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00174d4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00174d8:	47                   	inc    edi
c00174d9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00174dd:	75 c1                	jne    c00174a0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00174df:	43                   	inc    ebx
c00174e0:	83 fb 20             	cmp    ebx,0x20
c00174e3:	0f 85 79 ff ff ff    	jne    c0017462 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00174e9:	83 c4 2c             	add    esp,0x2c
c00174ec:	5b                   	pop    ebx
c00174ed:	5e                   	pop    esi
c00174ee:	5f                   	pop    edi
c00174ef:	5d                   	pop    ebp
c00174f0:	c3                   	ret    
c00174f1:	90                   	nop

c00174f2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00174f2:	55                   	push   ebp
c00174f3:	57                   	push   edi
c00174f4:	56                   	push   esi
c00174f5:	53                   	push   ebx
c00174f6:	83 ec 28             	sub    esp,0x28
c00174f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00174fd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017501:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017505:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017509:	c1 e7 08             	shl    edi,0x8
c001750c:	01 c7                	add    edi,eax
c001750e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017512:	c1 e0 08             	shl    eax,0x8
c0017515:	01 d0                	add    eax,edx
c0017517:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001751b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001751f:	0f af c7             	imul   eax,edi
c0017522:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017529:	50                   	push   eax
c001752a:	e8 11 83 ff ff       	call   c000f840 <malloc>
c001752f:	83 c4 10             	add    esp,0x10
c0017532:	89 c5                	mov    ebp,eax
c0017534:	85 c0                	test   eax,eax
c0017536:	75 15                	jne    c001754d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017538:	83 ec 0c             	sub    esp,0xc
c001753b:	68 dd b2 02 c0       	push   0xc002b2dd
c0017540:	e8 b1 b8 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0017545:	83 c4 10             	add    esp,0x10
c0017548:	e9 1c 01 00 00       	jmp    c0017669 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001754d:	be 12 00 00 00       	mov    esi,0x12
c0017552:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017556:	74 11                	je     c0017569 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017558:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001755c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017560:	c1 fe 03             	sar    esi,0x3
c0017563:	0f af f0             	imul   esi,eax
c0017566:	83 c6 12             	add    esi,0x12
c0017569:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001756d:	74 04                	je     c0017573 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001756f:	85 ff                	test   edi,edi
c0017571:	75 12                	jne    c0017585 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017573:	83 ec 0c             	sub    esp,0xc
c0017576:	68 f4 b2 02 c0       	push   0xc002b2f4
c001757b:	e8 76 b8 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0017580:	e9 ce 00 00 00       	jmp    c0017653 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017585:	52                   	push   edx
c0017586:	52                   	push   edx
c0017587:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001758b:	50                   	push   eax
c001758c:	68 09 b3 02 c0       	push   0xc002b309
c0017591:	e8 60 b8 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0017596:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001759a:	83 c4 10             	add    esp,0x10
c001759d:	80 fa 02             	cmp    dl,0x2
c00175a0:	0f 85 98 00 00 00    	jne    c001763e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00175a6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00175ab:	75 10                	jne    c00175bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00175ad:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00175b1:	75 0a                	jne    c00175bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00175b3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00175b6:	83 e8 18             	sub    eax,0x18
c00175b9:	a8 f7                	test   al,0xf7
c00175bb:	74 0a                	je     c00175c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00175bd:	83 ec 0c             	sub    esp,0xc
c00175c0:	68 16 b3 02 c0       	push   0xc002b316
c00175c5:	eb 7f                	jmp    c0017646 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00175c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00175d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00175db:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00175e3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00175e7:	75 0c                	jne    c00175f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00175e9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00175ee:	c1 e0 18             	shl    eax,0x18
c00175f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00175f5:	41                   	inc    ecx
c00175f6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00175fb:	c1 e2 10             	shl    edx,0x10
c00175fe:	89 d0                	mov    eax,edx
c0017600:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017605:	c1 e2 08             	shl    edx,0x8
c0017608:	09 c2                	or     edx,eax
c001760a:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001760e:	09 c2                	or     edx,eax
c0017610:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017614:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017618:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001761c:	c1 f8 03             	sar    eax,0x3
c001761f:	01 c6                	add    esi,eax
c0017621:	89 c8                	mov    eax,ecx
c0017623:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017627:	39 c7                	cmp    edi,eax
c0017629:	7f b0                	jg     c00175db <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001762b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001762f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017633:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017636:	7e 22                	jle    c001765a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017638:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001763c:	eb 99                	jmp    c00175d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001763e:	50                   	push   eax
c001763f:	50                   	push   eax
c0017640:	52                   	push   edx
c0017641:	68 24 b3 02 c0       	push   0xc002b324
c0017646:	e8 ab b7 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001764b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001764e:	e8 fd 81 ff ff       	call   c000f850 <free>
c0017653:	83 c4 10             	add    esp,0x10
c0017656:	31 ed                	xor    ebp,ebp
c0017658:	eb 0f                	jmp    c0017669 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001765a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001765e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017661:	89 38                	mov    DWORD PTR [eax],edi
c0017663:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017667:	89 08                	mov    DWORD PTR [eax],ecx
c0017669:	83 c4 1c             	add    esp,0x1c
c001766c:	89 e8                	mov    eax,ebp
c001766e:	5b                   	pop    ebx
c001766f:	5e                   	pop    esi
c0017670:	5f                   	pop    edi
c0017671:	5d                   	pop    ebp
c0017672:	c3                   	ret    
c0017673:	90                   	nop

c0017674 <Video::putTGA(int, int, unsigned char*, int)>:
c0017674:	55                   	push   ebp
c0017675:	57                   	push   edi
c0017676:	56                   	push   esi
c0017677:	53                   	push   ebx
c0017678:	83 ec 28             	sub    esp,0x28
c001767b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001767f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017683:	50                   	push   eax
c0017684:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017688:	50                   	push   eax
c0017689:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001768d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017691:	56                   	push   esi
c0017692:	e8 5b fe ff ff       	call   c00174f2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017697:	83 c4 20             	add    esp,0x20
c001769a:	85 c0                	test   eax,eax
c001769c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00176a0:	74 35                	je     c00176d7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00176a2:	89 c7                	mov    edi,eax
c00176a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176a8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00176ac:	39 d8                	cmp    eax,ebx
c00176ae:	7e 27                	jle    c00176d7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00176b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00176b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176b8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00176bc:	39 e8                	cmp    eax,ebp
c00176be:	7e 14                	jle    c00176d4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00176c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00176c2:	83 c7 04             	add    edi,0x4
c00176c5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00176c8:	53                   	push   ebx
c00176c9:	55                   	push   ebp
c00176ca:	45                   	inc    ebp
c00176cb:	56                   	push   esi
c00176cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	eb e0                	jmp    c00176b4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00176d4:	43                   	inc    ebx
c00176d5:	eb cd                	jmp    c00176a4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00176d7:	83 c4 1c             	add    esp,0x1c
c00176da:	5b                   	pop    ebx
c00176db:	5e                   	pop    esi
c00176dc:	5f                   	pop    edi
c00176dd:	5d                   	pop    ebp
c00176de:	c3                   	ret    
c00176df:	90                   	nop

c00176e0 <ACPI::close(int, int, void*)>:
c00176e0:	83 ec 1c             	sub    esp,0x1c
c00176e3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00176eb:	74 0a                	je     c00176f7 <ACPI::close(int, int, void*)+0x17>
c00176ed:	b8 00 00 00 00       	mov    eax,0x0
c00176f2:	e9 9a 00 00 00       	jmp    c0017791 <ACPI::close(int, int, void*)+0xb1>
c00176f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00176fc:	75 37                	jne    c0017735 <ACPI::close(int, int, void*)+0x55>
c00176fe:	83 ec 0c             	sub    esp,0xc
c0017701:	68 80 b3 02 c0       	push   0xc002b380
c0017706:	e8 eb b6 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001770b:	83 c4 10             	add    esp,0x10
c001770e:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0017713:	85 c0                	test   eax,eax
c0017715:	74 07                	je     c001771e <ACPI::close(int, int, void*)+0x3e>
c0017717:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001771c:	ff d0                	call   eax
c001771e:	83 ec 0c             	sub    esp,0xc
c0017721:	68 a4 b4 02 c0       	push   0xc002b4a4
c0017726:	e8 6c 2d 00 00       	call   c001a497 <Krnl::panic(char const*)>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017733:	eb 5c                	jmp    c0017791 <ACPI::close(int, int, void*)+0xb1>
c0017735:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001773a:	75 50                	jne    c001778c <ACPI::close(int, int, void*)+0xac>
c001773c:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c0017741:	85 c0                	test   eax,eax
c0017743:	74 07                	je     c001774c <ACPI::close(int, int, void*)+0x6c>
c0017745:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001774a:	ff d0                	call   eax
c001774c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017751:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017756:	83 e0 02             	and    eax,0x2
c0017759:	74 1c                	je     c0017777 <ACPI::close(int, int, void*)+0x97>
c001775b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017766:	89 c2                	mov    edx,eax
c0017768:	ec                   	in     al,dx
c0017769:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001776d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017771:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017775:	eb da                	jmp    c0017751 <ACPI::close(int, int, void*)+0x71>
c0017777:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001777e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017783:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017787:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001778b:	ee                   	out    dx,al
c001778c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017791:	83 c4 1c             	add    esp,0x1c
c0017794:	c3                   	ret    

c0017795 <findRSDP()>:
c0017795:	83 ec 1c             	sub    esp,0x1c
c0017798:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001779d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177a3:	83 e0 04             	and    eax,0x4
c00177a6:	84 c0                	test   al,al
c00177a8:	75 07                	jne    c00177b1 <findRSDP()+0x1c>
c00177aa:	b8 00 00 00 00       	mov    eax,0x0
c00177af:	eb 6a                	jmp    c001781b <findRSDP()+0x86>
c00177b1:	a1 50 e4 02 c0       	mov    eax,ds:0xc002e450
c00177b6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00177bb:	7f 1b                	jg     c00177d8 <findRSDP()+0x43>
c00177bd:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00177c2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177c8:	83 e2 fb             	and    edx,0xfffffffb
c00177cb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177d1:	b8 00 00 00 00       	mov    eax,0x0
c00177d6:	eb 43                	jmp    c001781b <findRSDP()+0x86>
c00177d8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00177e0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00177e8:	77 2c                	ja     c0017816 <findRSDP()+0x81>
c00177ea:	83 ec 04             	sub    esp,0x4
c00177ed:	6a 08                	push   0x8
c00177ef:	68 8d b3 02 c0       	push   0xc002b38d
c00177f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177f8:	e8 43 8e fe ff       	call   c0000640 <memcmp>
c00177fd:	83 c4 10             	add    esp,0x10
c0017800:	85 c0                	test   eax,eax
c0017802:	0f 94 c0             	sete   al
c0017805:	84 c0                	test   al,al
c0017807:	74 06                	je     c001780f <findRSDP()+0x7a>
c0017809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001780d:	eb 0c                	jmp    c001781b <findRSDP()+0x86>
c001780f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017814:	eb ca                	jmp    c00177e0 <findRSDP()+0x4b>
c0017816:	b8 00 00 00 00       	mov    eax,0x0
c001781b:	83 c4 1c             	add    esp,0x1c
c001781e:	c3                   	ret    

c001781f <loadACPITables(unsigned char*)>:
c001781f:	56                   	push   esi
c0017820:	53                   	push   ebx
c0017821:	83 ec 44             	sub    esp,0x44
c0017824:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017829:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001782f:	83 e0 04             	and    eax,0x4
c0017832:	84 c0                	test   al,al
c0017834:	0f 84 05 02 00 00    	je     c0017a3f <loadACPITables(unsigned char*)+0x220>
c001783a:	a0 e0 0c 03 c0       	mov    al,ds:0xc0030ce0
c001783f:	84 c0                	test   al,al
c0017841:	74 75                	je     c00178b8 <loadACPITables(unsigned char*)+0x99>
c0017843:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017847:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001784b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001784f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017852:	83 e8 24             	sub    eax,0x24
c0017855:	c1 e8 03             	shr    eax,0x3
c0017858:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001785c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017864:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017868:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001786c:	0f 8d b2 00 00 00    	jge    c0017924 <loadACPITables(unsigned char*)+0x105>
c0017872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017876:	83 c0 24             	add    eax,0x24
c0017879:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001787d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017881:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017885:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017889:	c1 e0 03             	shl    eax,0x3
c001788c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017890:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017894:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017897:	8b 00                	mov    eax,DWORD PTR [eax]
c0017899:	89 c1                	mov    ecx,eax
c001789b:	a1 cc 0a 03 c0       	mov    eax,ds:0xc0030acc
c00178a0:	8d 50 01             	lea    edx,[eax+0x1]
c00178a3:	89 15 cc 0a 03 c0    	mov    DWORD PTR ds:0xc0030acc,edx
c00178a9:	89 ca                	mov    edx,ecx
c00178ab:	89 14 c5 e4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf51c],edx
c00178b2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00178b6:	eb ac                	jmp    c0017864 <loadACPITables(unsigned char*)+0x45>
c00178b8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c7:	83 e8 24             	sub    eax,0x24
c00178ca:	c1 e8 02             	shr    eax,0x2
c00178cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178d1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00178d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178dd:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00178e1:	7d 41                	jge    c0017924 <loadACPITables(unsigned char*)+0x105>
c00178e3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178e7:	83 c0 24             	add    eax,0x24
c00178ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178fa:	c1 e0 02             	shl    eax,0x2
c00178fd:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017905:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017907:	a1 cc 0a 03 c0       	mov    eax,ds:0xc0030acc
c001790c:	8d 50 01             	lea    edx,[eax+0x1]
c001790f:	89 15 cc 0a 03 c0    	mov    DWORD PTR ds:0xc0030acc,edx
c0017915:	89 ca                	mov    edx,ecx
c0017917:	89 14 c5 e4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf51c],edx
c001791e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017922:	eb b5                	jmp    c00178d9 <loadACPITables(unsigned char*)+0xba>
c0017924:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001792c:	a1 cc 0a 03 c0       	mov    eax,ds:0xc0030acc
c0017931:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017935:	0f 8d 05 01 00 00    	jge    c0017a40 <loadACPITables(unsigned char*)+0x221>
c001793b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001793f:	8b 04 c5 e4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf51c]
c0017946:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001794a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001794e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017956:	25 ff 0f 00 00       	and    eax,0xfff
c001795b:	89 c6                	mov    esi,eax
c001795d:	e8 05 a4 ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c0017962:	89 c3                	mov    ebx,eax
c0017964:	83 ec 0c             	sub    esp,0xc
c0017967:	6a 01                	push   0x1
c0017969:	e8 b1 a1 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017975:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001797b:	83 ec 0c             	sub    esp,0xc
c001797e:	6a 01                	push   0x1
c0017980:	6a 01                	push   0x1
c0017982:	50                   	push   eax
c0017983:	52                   	push   edx
c0017984:	53                   	push   ebx
c0017985:	e8 0c ac ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001798a:	83 c4 20             	add    esp,0x20
c001798d:	09 f0                	or     eax,esi
c001798f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017993:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017997:	c1 e0 03             	shl    eax,0x3
c001799a:	05 e0 0a 03 c0       	add    eax,0xc0030ae0
c001799f:	83 ec 04             	sub    esp,0x4
c00179a2:	6a 04                	push   0x4
c00179a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179a8:	50                   	push   eax
c00179a9:	e8 96 8d fe ff       	call   c0000744 <memcpy>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179c0:	05 00 10 00 00       	add    eax,0x1000
c00179c5:	c1 e8 0c             	shr    eax,0xc
c00179c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00179d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d7:	25 ff 0f 00 00       	and    eax,0xfff
c00179dc:	89 c6                	mov    esi,eax
c00179de:	e8 84 a3 ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c00179e3:	89 c3                	mov    ebx,eax
c00179e5:	83 ec 0c             	sub    esp,0xc
c00179e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179ec:	e8 2e a1 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179fe:	83 ec 0c             	sub    esp,0xc
c0017a01:	6a 01                	push   0x1
c0017a03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a07:	50                   	push   eax
c0017a08:	52                   	push   edx
c0017a09:	53                   	push   ebx
c0017a0a:	e8 87 ab ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a0f:	83 c4 20             	add    esp,0x20
c0017a12:	09 f0                	or     eax,esi
c0017a14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017a1b:	83 ec 0c             	sub    esp,0xc
c0017a1e:	50                   	push   eax
c0017a1f:	e8 17 a5 ff ff       	call   c0011f3b <Virt::freeKernelVirtualPages(unsigned long)>
c0017a24:	83 c4 10             	add    esp,0x10
c0017a27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a2f:	89 14 c5 e4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf51c],edx
c0017a36:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017a3a:	e9 ed fe ff ff       	jmp    c001792c <loadACPITables(unsigned char*)+0x10d>
c0017a3f:	90                   	nop
c0017a40:	83 c4 44             	add    esp,0x44
c0017a43:	5b                   	pop    ebx
c0017a44:	5e                   	pop    esi
c0017a45:	c3                   	ret    

c0017a46 <findRSDT(unsigned char*)>:
c0017a46:	56                   	push   esi
c0017a47:	53                   	push   ebx
c0017a48:	83 ec 44             	sub    esp,0x44
c0017a4b:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017a50:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a56:	83 e0 04             	and    eax,0x4
c0017a59:	84 c0                	test   al,al
c0017a5b:	75 0a                	jne    c0017a67 <findRSDT(unsigned char*)+0x21>
c0017a5d:	b8 00 00 00 00       	mov    eax,0x0
c0017a62:	e9 f7 00 00 00       	jmp    c0017b5e <findRSDT(unsigned char*)+0x118>
c0017a67:	83 ec 04             	sub    esp,0x4
c0017a6a:	6a 24                	push   0x24
c0017a6c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017a70:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a74:	50                   	push   eax
c0017a75:	e8 ca 8c fe ff       	call   c0000744 <memcpy>
c0017a7a:	83 c4 10             	add    esp,0x10
c0017a7d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017a81:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017a85:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a95:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017aa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aa5:	25 ff 0f 00 00       	and    eax,0xfff
c0017aaa:	89 c6                	mov    esi,eax
c0017aac:	e8 b6 a2 ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c0017ab1:	89 c3                	mov    ebx,eax
c0017ab3:	83 ec 0c             	sub    esp,0xc
c0017ab6:	6a 02                	push   0x2
c0017ab8:	e8 62 a0 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017ac4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aca:	83 ec 0c             	sub    esp,0xc
c0017acd:	6a 01                	push   0x1
c0017acf:	6a 02                	push   0x2
c0017ad1:	50                   	push   eax
c0017ad2:	52                   	push   edx
c0017ad3:	53                   	push   ebx
c0017ad4:	e8 bd aa ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ad9:	83 c4 20             	add    esp,0x20
c0017adc:	09 f0                	or     eax,esi
c0017ade:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ae2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ae6:	25 ff 0f 00 00       	and    eax,0xfff
c0017aeb:	89 c6                	mov    esi,eax
c0017aed:	e8 75 a2 ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c0017af2:	89 c3                	mov    ebx,eax
c0017af4:	83 ec 0c             	sub    esp,0xc
c0017af7:	6a 02                	push   0x2
c0017af9:	e8 21 a0 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0017afe:	83 c4 10             	add    esp,0x10
c0017b01:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b05:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b0b:	83 ec 0c             	sub    esp,0xc
c0017b0e:	6a 01                	push   0x1
c0017b10:	6a 02                	push   0x2
c0017b12:	50                   	push   eax
c0017b13:	52                   	push   edx
c0017b14:	53                   	push   ebx
c0017b15:	e8 7c aa ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b1a:	83 c4 20             	add    esp,0x20
c0017b1d:	09 f0                	or     eax,esi
c0017b1f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b23:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017b28:	75 11                	jne    c0017b3b <findRSDT(unsigned char*)+0xf5>
c0017b2a:	c6 05 e0 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030ce0,0x0
c0017b31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b35:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b39:	eb 1f                	jmp    c0017b5a <findRSDT(unsigned char*)+0x114>
c0017b3b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017b40:	75 11                	jne    c0017b53 <findRSDT(unsigned char*)+0x10d>
c0017b42:	c6 05 e0 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030ce0,0x1
c0017b49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b4d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b51:	eb 07                	jmp    c0017b5a <findRSDT(unsigned char*)+0x114>
c0017b53:	b8 00 00 00 00       	mov    eax,0x0
c0017b58:	eb 04                	jmp    c0017b5e <findRSDT(unsigned char*)+0x118>
c0017b5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b5e:	83 c4 44             	add    esp,0x44
c0017b61:	5b                   	pop    ebx
c0017b62:	5e                   	pop    esi
c0017b63:	c3                   	ret    

c0017b64 <findDataTable(unsigned char*, char*)>:
c0017b64:	83 ec 1c             	sub    esp,0x1c
c0017b67:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017b6c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b72:	83 e0 04             	and    eax,0x4
c0017b75:	84 c0                	test   al,al
c0017b77:	75 07                	jne    c0017b80 <findDataTable(unsigned char*, char*)+0x1c>
c0017b79:	b8 00 00 00 00       	mov    eax,0x0
c0017b7e:	eb 7c                	jmp    c0017bfc <findDataTable(unsigned char*, char*)+0x98>
c0017b80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017b88:	a1 cc 0a 03 c0       	mov    eax,ds:0xc0030acc
c0017b8d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017b91:	7d 3a                	jge    c0017bcd <findDataTable(unsigned char*, char*)+0x69>
c0017b93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b97:	c1 e0 03             	shl    eax,0x3
c0017b9a:	05 e0 0a 03 c0       	add    eax,0xc0030ae0
c0017b9f:	83 ec 04             	sub    esp,0x4
c0017ba2:	6a 04                	push   0x4
c0017ba4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ba8:	50                   	push   eax
c0017ba9:	e8 92 8a fe ff       	call   c0000640 <memcmp>
c0017bae:	83 c4 10             	add    esp,0x10
c0017bb1:	85 c0                	test   eax,eax
c0017bb3:	0f 94 c0             	sete   al
c0017bb6:	84 c0                	test   al,al
c0017bb8:	74 0d                	je     c0017bc7 <findDataTable(unsigned char*, char*)+0x63>
c0017bba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bbe:	8b 04 c5 e4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf51c]
c0017bc5:	eb 35                	jmp    c0017bfc <findDataTable(unsigned char*, char*)+0x98>
c0017bc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017bcb:	eb bb                	jmp    c0017b88 <findDataTable(unsigned char*, char*)+0x24>
c0017bcd:	a0 e0 0c 03 c0       	mov    al,ds:0xc0030ce0
c0017bd2:	84 c0                	test   al,al
c0017bd4:	74 07                	je     c0017bdd <findDataTable(unsigned char*, char*)+0x79>
c0017bd6:	b8 58 00 00 00       	mov    eax,0x58
c0017bdb:	eb 05                	jmp    c0017be2 <findDataTable(unsigned char*, char*)+0x7e>
c0017bdd:	b8 52 00 00 00       	mov    eax,0x52
c0017be2:	83 ec 04             	sub    esp,0x4
c0017be5:	50                   	push   eax
c0017be6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bea:	68 c8 b4 02 c0       	push   0xc002b4c8
c0017bef:	e8 02 b2 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0017bf4:	83 c4 10             	add    esp,0x10
c0017bf7:	b8 00 00 00 00       	mov    eax,0x0
c0017bfc:	83 c4 1c             	add    esp,0x1c
c0017bff:	c3                   	ret    

c0017c00 <scanMADT()>:
c0017c00:	53                   	push   ebx
c0017c01:	83 ec 38             	sub    esp,0x38
c0017c04:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017c09:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c0f:	83 e0 04             	and    eax,0x4
c0017c12:	84 c0                	test   al,al
c0017c14:	0f 84 63 04 00 00    	je     c001807d <scanMADT()+0x47d>
c0017c1a:	e8 76 fb ff ff       	call   c0017795 <findRSDP()>
c0017c1f:	a3 ec 0c 03 c0       	mov    ds:0xc0030cec,eax
c0017c24:	a1 ec 0c 03 c0       	mov    eax,ds:0xc0030cec
c0017c29:	85 c0                	test   eax,eax
c0017c2b:	75 19                	jne    c0017c46 <scanMADT()+0x46>
c0017c2d:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017c32:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c38:	83 e2 fb             	and    edx,0xfffffffb
c0017c3b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c41:	e9 3b 04 00 00       	jmp    c0018081 <scanMADT()+0x481>
c0017c46:	a1 ec 0c 03 c0       	mov    eax,ds:0xc0030cec
c0017c4b:	83 ec 0c             	sub    esp,0xc
c0017c4e:	50                   	push   eax
c0017c4f:	e8 f2 fd ff ff       	call   c0017a46 <findRSDT(unsigned char*)>
c0017c54:	83 c4 10             	add    esp,0x10
c0017c57:	a3 e8 0c 03 c0       	mov    ds:0xc0030ce8,eax
c0017c5c:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c0017c61:	85 c0                	test   eax,eax
c0017c63:	75 19                	jne    c0017c7e <scanMADT()+0x7e>
c0017c65:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017c6a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c70:	83 e2 fb             	and    edx,0xfffffffb
c0017c73:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c79:	e9 03 04 00 00       	jmp    c0018081 <scanMADT()+0x481>
c0017c7e:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c0017c83:	83 ec 0c             	sub    esp,0xc
c0017c86:	50                   	push   eax
c0017c87:	e8 93 fb ff ff       	call   c001781f <loadACPITables(unsigned char*)>
c0017c8c:	83 c4 10             	add    esp,0x10
c0017c8f:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c0017c94:	83 ec 08             	sub    esp,0x8
c0017c97:	68 96 b3 02 c0       	push   0xc002b396
c0017c9c:	50                   	push   eax
c0017c9d:	e8 c2 fe ff ff       	call   c0017b64 <findDataTable(unsigned char*, char*)>
c0017ca2:	83 c4 10             	add    esp,0x10
c0017ca5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ca9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017cae:	75 19                	jne    c0017cc9 <scanMADT()+0xc9>
c0017cb0:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017cb5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017cbb:	83 e2 fe             	and    edx,0xfffffffe
c0017cbe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017cc4:	e9 b8 03 00 00       	jmp    c0018081 <scanMADT()+0x481>
c0017cc9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017cd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cd8:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017cdc:	0f 87 9f 03 00 00    	ja     c0018081 <scanMADT()+0x481>
c0017ce2:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017cea:	0f 87 91 03 00 00    	ja     c0018081 <scanMADT()+0x481>
c0017cf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cfc:	8d 50 01             	lea    edx,[eax+0x1]
c0017cff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d03:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d07:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d0b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017d0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d13:	8d 50 01             	lea    edx,[eax+0x1]
c0017d16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d1e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d22:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017d26:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017d2b:	0f 86 4f 03 00 00    	jbe    c0018080 <scanMADT()+0x480>
c0017d31:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017d36:	75 57                	jne    c0017d8f <scanMADT()+0x18f>
c0017d38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d3c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d43:	8a 15 e0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ee0
c0017d49:	0f b6 d2             	movzx  edx,dl
c0017d4c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d50:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d54:	88 82 20 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0e0],al
c0017d5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d5e:	8d 50 01             	lea    edx,[eax+0x1]
c0017d61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d65:	8a 15 e0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ee0
c0017d6b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d6e:	88 0d e0 0e 03 c0    	mov    BYTE PTR ds:0xc0030ee0,cl
c0017d74:	0f b6 d2             	movzx  edx,dl
c0017d77:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d7b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d7f:	88 82 00 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf100],al
c0017d85:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d8a:	e9 da 02 00 00       	jmp    c0018069 <scanMADT()+0x469>
c0017d8f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017d94:	0f 85 14 01 00 00    	jne    c0017eae <scanMADT()+0x2ae>
c0017d9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d9e:	8d 50 01             	lea    edx,[eax+0x1]
c0017da1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017da5:	8a 15 a0 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030da0
c0017dab:	0f b6 d2             	movzx  edx,dl
c0017dae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017db2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017db6:	88 82 c0 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf240],al
c0017dbc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017dc0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dc8:	01 d0                	add    eax,edx
c0017dca:	83 c0 2c             	add    eax,0x2c
c0017dcd:	8a 00                	mov    al,BYTE PTR [eax]
c0017dcf:	0f b6 d0             	movzx  edx,al
c0017dd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd6:	8d 48 01             	lea    ecx,[eax+0x1]
c0017dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ddd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017de1:	0f b6 c0             	movzx  eax,al
c0017de4:	c1 e0 08             	shl    eax,0x8
c0017de7:	89 d1                	mov    ecx,edx
c0017de9:	09 c1                	or     ecx,eax
c0017deb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017def:	8d 50 02             	lea    edx,[eax+0x2]
c0017df2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017df6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017dfa:	0f b6 c0             	movzx  eax,al
c0017dfd:	c1 e0 10             	shl    eax,0x10
c0017e00:	09 c1                	or     ecx,eax
c0017e02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e06:	8d 50 03             	lea    edx,[eax+0x3]
c0017e09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e11:	0f b6 c0             	movzx  eax,al
c0017e14:	c1 e0 18             	shl    eax,0x18
c0017e17:	09 c1                	or     ecx,eax
c0017e19:	89 ca                	mov    edx,ecx
c0017e1b:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0017e20:	0f b6 c0             	movzx  eax,al
c0017e23:	89 14 85 e0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf220],edx
c0017e2a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e37:	01 d0                	add    eax,edx
c0017e39:	83 c0 2c             	add    eax,0x2c
c0017e3c:	8a 00                	mov    al,BYTE PTR [eax]
c0017e3e:	0f b6 d0             	movzx  edx,al
c0017e41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e45:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e50:	0f b6 c0             	movzx  eax,al
c0017e53:	c1 e0 08             	shl    eax,0x8
c0017e56:	89 d1                	mov    ecx,edx
c0017e58:	09 c1                	or     ecx,eax
c0017e5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e5e:	8d 50 02             	lea    edx,[eax+0x2]
c0017e61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e65:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e69:	0f b6 c0             	movzx  eax,al
c0017e6c:	c1 e0 10             	shl    eax,0x10
c0017e6f:	09 c1                	or     ecx,eax
c0017e71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e75:	8d 50 03             	lea    edx,[eax+0x3]
c0017e78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e7c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e80:	0f b6 c0             	movzx  eax,al
c0017e83:	c1 e0 18             	shl    eax,0x18
c0017e86:	09 c1                	or     ecx,eax
c0017e88:	89 ca                	mov    edx,ecx
c0017e8a:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0017e8f:	0f b6 c0             	movzx  eax,al
c0017e92:	89 14 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],edx
c0017e99:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e9e:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0017ea3:	40                   	inc    eax
c0017ea4:	a2 a0 0d 03 c0       	mov    ds:0xc0030da0,al
c0017ea9:	e9 bb 01 00 00       	jmp    c0018069 <scanMADT()+0x469>
c0017eae:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017eb3:	0f 85 e9 00 00 00    	jne    c0017fa2 <scanMADT()+0x3a2>
c0017eb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ebd:	8d 50 01             	lea    edx,[eax+0x1]
c0017ec0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ec4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ecc:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017edb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017edf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ee3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ee7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eef:	01 d0                	add    eax,edx
c0017ef1:	83 c0 2c             	add    eax,0x2c
c0017ef4:	8a 00                	mov    al,BYTE PTR [eax]
c0017ef6:	0f b6 d0             	movzx  edx,al
c0017ef9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017efd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f04:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f08:	0f b6 c0             	movzx  eax,al
c0017f0b:	c1 e0 08             	shl    eax,0x8
c0017f0e:	89 d1                	mov    ecx,edx
c0017f10:	09 c1                	or     ecx,eax
c0017f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f16:	8d 50 02             	lea    edx,[eax+0x2]
c0017f19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f21:	0f b6 c0             	movzx  eax,al
c0017f24:	c1 e0 10             	shl    eax,0x10
c0017f27:	09 c1                	or     ecx,eax
c0017f29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2d:	8d 50 03             	lea    edx,[eax+0x3]
c0017f30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f34:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f38:	0f b6 c0             	movzx  eax,al
c0017f3b:	c1 e0 18             	shl    eax,0x18
c0017f3e:	09 c8                	or     eax,ecx
c0017f40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f44:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f51:	01 d0                	add    eax,edx
c0017f53:	83 c0 2c             	add    eax,0x2c
c0017f56:	8a 00                	mov    al,BYTE PTR [eax]
c0017f58:	0f b6 c0             	movzx  eax,al
c0017f5b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f66:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017f6a:	0f b6 d2             	movzx  edx,dl
c0017f6d:	c1 e2 08             	shl    edx,0x8
c0017f70:	09 d0                	or     eax,edx
c0017f72:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017f77:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f7c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017f81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f85:	88 90 60 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd29a0],dl
c0017f8b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017f90:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017f95:	66 89 84 12 80 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf280],ax
c0017f9d:	e9 c7 00 00 00       	jmp    c0018069 <scanMADT()+0x469>
c0017fa2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017fa7:	0f 85 b0 00 00 00    	jne    c001805d <scanMADT()+0x45d>
c0017fad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb1:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fb8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fbc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fc0:	0f b6 c0             	movzx  eax,al
c0017fc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcf:	01 d0                	add    eax,edx
c0017fd1:	83 c0 2c             	add    eax,0x2c
c0017fd4:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd6:	0f b6 d0             	movzx  edx,al
c0017fd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fe8:	0f b6 c0             	movzx  eax,al
c0017feb:	c1 e0 08             	shl    eax,0x8
c0017fee:	09 d0                	or     eax,edx
c0017ff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ff4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017ff9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffd:	8d 50 01             	lea    edx,[eax+0x1]
c0018000:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018004:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018008:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001800c:	0f b6 c0             	movzx  eax,al
c001800f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018017:	c1 e0 08             	shl    eax,0x8
c001801a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001801e:	89 c1                	mov    ecx,eax
c0018020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018024:	c1 e0 18             	shl    eax,0x18
c0018027:	89 c3                	mov    ebx,eax
c0018029:	a1 f0 0c 03 c0       	mov    eax,ds:0xc0030cf0
c001802e:	8d 50 01             	lea    edx,[eax+0x1]
c0018031:	89 15 f0 0c 03 c0    	mov    DWORD PTR ds:0xc0030cf0,edx
c0018037:	09 d9                	or     ecx,ebx
c0018039:	89 ca                	mov    edx,ecx
c001803b:	89 14 85 00 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf300],edx
c0018042:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018046:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001804a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001804e:	68 f8 b4 02 c0       	push   0xc002b4f8
c0018053:	e8 9e ad ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018058:	83 c4 10             	add    esp,0x10
c001805b:	eb 0c                	jmp    c0018069 <scanMADT()+0x469>
c001805d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018062:	75 05                	jne    c0018069 <scanMADT()+0x469>
c0018064:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018069:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001806e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018072:	01 d0                	add    eax,edx
c0018074:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018078:	e9 54 fc ff ff       	jmp    c0017cd1 <scanMADT()+0xd1>
c001807d:	90                   	nop
c001807e:	eb 01                	jmp    c0018081 <scanMADT()+0x481>
c0018080:	90                   	nop
c0018081:	83 c4 38             	add    esp,0x38
c0018084:	5b                   	pop    ebx
c0018085:	c3                   	ret    

c0018086 <ACPI::ACPI()>:
c0018086:	83 ec 0c             	sub    esp,0xc
c0018089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001808d:	83 ec 08             	sub    esp,0x8
c0018090:	68 9b b3 02 c0       	push   0xc002b39b
c0018095:	50                   	push   eax
c0018096:	e8 71 c3 ff ff       	call   c001440c <Device::Device(char const*)>
c001809b:	83 c4 10             	add    esp,0x10
c001809e:	ba 6c b5 02 c0       	mov    edx,0xc002b56c
c00180a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a7:	89 10                	mov    DWORD PTR [eax],edx
c00180a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ad:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00180b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b8:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00180c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c6:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00180d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d4:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00180db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180df:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00180e6:	e8 15 fb ff ff       	call   c0017c00 <scanMADT()>
c00180eb:	90                   	nop
c00180ec:	83 c4 0c             	add    esp,0xc
c00180ef:	c3                   	ret    

c00180f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00180f0:	83 ec 2c             	sub    esp,0x2c
c00180f3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00180f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00180fb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180ff:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018103:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018108:	88 d0                	mov    al,dl
c001810a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001810e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018113:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001811b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001811f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018125:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018129:	0f 8d 97 00 00 00    	jge    c00181c6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001812f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018133:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018137:	83 c2 2a             	add    edx,0x2a
c001813a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001813e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018143:	75 78                	jne    c00181bd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018145:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018149:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001814d:	83 c2 2a             	add    edx,0x2a
c0018150:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018154:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018158:	75 63                	jne    c00181bd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001815a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001815f:	74 3a                	je     c001819b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018161:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018165:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018169:	83 c2 2a             	add    edx,0x2a
c001816c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018174:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018177:	39 c2                	cmp    edx,eax
c0018179:	74 10                	je     c001818b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001817b:	83 ec 0c             	sub    esp,0xc
c001817e:	68 34 b5 02 c0       	push   0xc002b534
c0018183:	e8 0f 23 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0018188:	83 c4 10             	add    esp,0x10
c001818b:	83 ec 0c             	sub    esp,0xc
c001818e:	68 a0 b3 02 c0       	push   0xc002b3a0
c0018193:	e8 ff 22 00 00       	call   c001a497 <Krnl::panic(char const*)>
c0018198:	83 c4 10             	add    esp,0x10
c001819b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001819f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181a7:	83 c2 2a             	add    edx,0x2a
c00181aa:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00181ae:	8b 02                	mov    eax,DWORD PTR [edx]
c00181b0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00181b3:	89 01                	mov    DWORD PTR [ecx],eax
c00181b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00181b8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181bd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00181c1:	e9 55 ff ff ff       	jmp    c001811b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00181c6:	90                   	nop
c00181c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181cb:	83 c4 2c             	add    esp,0x2c
c00181ce:	c2 04 00             	ret    0x4
c00181d1:	90                   	nop

c00181d2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00181d2:	83 ec 1c             	sub    esp,0x1c
c00181d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00181dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00181e1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181e6:	88 c8                	mov    al,cl
c00181e8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00181ec:	88 d0                	mov    al,dl
c00181ee:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f6:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00181fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018200:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018203:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018207:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001820b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018215:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018219:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001821c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018220:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018229:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001822f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018233:	8d 48 01             	lea    ecx,[eax+0x1]
c0018236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001823a:	83 c2 2a             	add    edx,0x2a
c001823d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018245:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001824b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001824f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018252:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018256:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001825a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001825e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018264:	8d 50 01             	lea    edx,[eax+0x1]
c0018267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001826b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018275:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001827b:	3d 00 02 00 00       	cmp    eax,0x200
c0018280:	75 10                	jne    c0018292 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018282:	83 ec 0c             	sub    esp,0xc
c0018285:	68 af b3 02 c0       	push   0xc002b3af
c001828a:	e8 08 22 00 00       	call   c001a497 <Krnl::panic(char const*)>
c001828f:	83 c4 10             	add    esp,0x10
c0018292:	90                   	nop
c0018293:	83 c4 1c             	add    esp,0x1c
c0018296:	c3                   	ret    
c0018297:	90                   	nop

c0018298 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018298:	b8 00 00 00 00       	mov    eax,0x0
c001829d:	c3                   	ret    

c001829e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001829e:	83 ec 1c             	sub    esp,0x1c
c00182a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182a5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00182a8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00182ac:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00182b1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182b6:	83 ec 08             	sub    esp,0x8
c00182b9:	52                   	push   edx
c00182ba:	50                   	push   eax
c00182bb:	e8 98 6b ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00182c0:	83 c4 10             	add    esp,0x10
c00182c3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00182c7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00182cc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182d1:	83 ec 04             	sub    esp,0x4
c00182d4:	6a 01                	push   0x1
c00182d6:	52                   	push   edx
c00182d7:	50                   	push   eax
c00182d8:	e8 91 6c ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00182dd:	83 c4 10             	add    esp,0x10
c00182e0:	90                   	nop
c00182e1:	83 c4 1c             	add    esp,0x1c
c00182e4:	c3                   	ret    
c00182e5:	90                   	nop

c00182e6 <ACPI::open(int, int, void*)>:
c00182e6:	53                   	push   ebx
c00182e7:	83 ec 28             	sub    esp,0x28
c00182ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182ee:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182f9:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018300:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0018305:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001830b:	83 e0 04             	and    eax,0x4
c001830e:	84 c0                	test   al,al
c0018310:	74 47                	je     c0018359 <ACPI::open(int, int, void*)+0x73>
c0018312:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c0018317:	83 ec 08             	sub    esp,0x8
c001831a:	68 cc b3 02 c0       	push   0xc002b3cc
c001831f:	50                   	push   eax
c0018320:	e8 3f f8 ff ff       	call   c0017b64 <findDataTable(unsigned char*, char*)>
c0018325:	83 c4 10             	add    esp,0x10
c0018328:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001832c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018331:	74 26                	je     c0018359 <ACPI::open(int, int, void*)+0x73>
c0018333:	83 ec 0c             	sub    esp,0xc
c0018336:	68 d1 b3 02 c0       	push   0xc002b3d1
c001833b:	e8 b6 aa ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018347:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001834e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018352:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018359:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018361:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018365:	8a 00                	mov    al,BYTE PTR [eax]
c0018367:	3c 01                	cmp    al,0x1
c0018369:	75 28                	jne    c0018393 <ACPI::open(int, int, void*)+0xad>
c001836b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001836f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018376:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001837a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018381:	83 ec 0c             	sub    esp,0xc
c0018384:	68 e2 b3 02 c0       	push   0xc002b3e2
c0018389:	e8 68 aa ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001838e:	83 c4 10             	add    esp,0x10
c0018391:	eb 25                	jmp    c00183b8 <ACPI::open(int, int, void*)+0xd2>
c0018393:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018397:	8a 00                	mov    al,BYTE PTR [eax]
c0018399:	3c 02                	cmp    al,0x2
c001839b:	75 1b                	jne    c00183b8 <ACPI::open(int, int, void*)+0xd2>
c001839d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183a8:	83 ec 0c             	sub    esp,0xc
c00183ab:	68 ea b3 02 c0       	push   0xc002b3ea
c00183b0:	e8 41 aa ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183bc:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00183c2:	83 f0 01             	xor    eax,0x1
c00183c5:	84 c0                	test   al,al
c00183c7:	74 6a                	je     c0018433 <ACPI::open(int, int, void*)+0x14d>
c00183c9:	83 ec 0c             	sub    esp,0xc
c00183cc:	68 f2 b3 02 c0       	push   0xc002b3f2
c00183d1:	e8 20 aa ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00183d6:	83 c4 10             	add    esp,0x10
c00183d9:	e8 72 7d fe ff       	call   c0000150 <manualPCIProbe>
c00183de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00183e2:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00183e7:	75 28                	jne    c0018411 <ACPI::open(int, int, void*)+0x12b>
c00183e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ed:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183f8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183ff:	83 ec 0c             	sub    esp,0xc
c0018402:	68 00 b4 02 c0       	push   0xc002b400
c0018407:	e8 ea a9 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001840c:	83 c4 10             	add    esp,0x10
c001840f:	eb 22                	jmp    c0018433 <ACPI::open(int, int, void*)+0x14d>
c0018411:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018416:	75 1b                	jne    c0018433 <ACPI::open(int, int, void*)+0x14d>
c0018418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001841c:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018423:	83 ec 0c             	sub    esp,0xc
c0018426:	68 0a b4 02 c0       	push   0xc002b40a
c001842b:	e8 c6 a9 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018430:	83 c4 10             	add    esp,0x10
c0018433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018437:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001843d:	84 c0                	test   al,al
c001843f:	74 13                	je     c0018454 <ACPI::open(int, int, void*)+0x16e>
c0018441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018445:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001844b:	83 f0 01             	xor    eax,0x1
c001844e:	0f b6 c0             	movzx  eax,al
c0018451:	40                   	inc    eax
c0018452:	eb 05                	jmp    c0018459 <ACPI::open(int, int, void*)+0x173>
c0018454:	b8 00 00 00 00       	mov    eax,0x0
c0018459:	83 ec 08             	sub    esp,0x8
c001845c:	50                   	push   eax
c001845d:	68 14 b4 02 c0       	push   0xc002b414
c0018462:	e8 8f a9 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018467:	83 c4 10             	add    esp,0x10
c001846a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001846e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018474:	84 c0                	test   al,al
c0018476:	74 67                	je     c00184df <ACPI::open(int, int, void*)+0x1f9>
c0018478:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018480:	83 ec 0c             	sub    esp,0xc
c0018483:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018487:	e8 b4 73 ff ff       	call   c000f840 <malloc>
c001848c:	83 c4 10             	add    esp,0x10
c001848f:	89 c3                	mov    ebx,eax
c0018491:	83 ec 0c             	sub    esp,0xc
c0018494:	53                   	push   ebx
c0018495:	e8 26 a3 00 00       	call   c00227c0 <PCI::PCI()>
c001849a:	83 c4 10             	add    esp,0x10
c001849d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00184a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184a5:	83 ec 08             	sub    esp,0x8
c00184a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00184ac:	50                   	push   eax
c00184ad:	e8 6a bd ff ff       	call   c001421c <Device::addChild(Device*)>
c00184b2:	83 c4 10             	add    esp,0x10
c00184b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00184bb:	83 c0 08             	add    eax,0x8
c00184be:	8b 00                	mov    eax,DWORD PTR [eax]
c00184c0:	6a 00                	push   0x0
c00184c2:	6a 00                	push   0x0
c00184c4:	6a 00                	push   0x0
c00184c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184ca:	ff d0                	call   eax
c00184cc:	83 c4 10             	add    esp,0x10
c00184cf:	83 ec 0c             	sub    esp,0xc
c00184d2:	68 1d b4 02 c0       	push   0xc002b41d
c00184d7:	e8 1a a9 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00184dc:	83 c4 10             	add    esp,0x10
c00184df:	83 ec 0c             	sub    esp,0xc
c00184e2:	68 28 b4 02 c0       	push   0xc002b428
c00184e7:	e8 cb 46 00 00       	call   c001cbb7 <Thr::loadKernelSymbolTable(char const*)>
c00184ec:	83 c4 10             	add    esp,0x10
c00184ef:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c00184f5:	83 ec 08             	sub    esp,0x8
c00184f8:	6a 01                	push   0x1
c00184fa:	68 46 b4 02 c0       	push   0xc002b446
c00184ff:	e8 10 51 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0018504:	83 c4 10             	add    esp,0x10
c0018507:	83 ec 08             	sub    esp,0x8
c001850a:	53                   	push   ebx
c001850b:	50                   	push   eax
c001850c:	e8 37 53 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0018511:	83 c4 10             	add    esp,0x10
c0018514:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c001851a:	83 ec 08             	sub    esp,0x8
c001851d:	6a 01                	push   0x1
c001851f:	68 63 b4 02 c0       	push   0xc002b463
c0018524:	e8 eb 50 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	83 ec 08             	sub    esp,0x8
c001852f:	53                   	push   ebx
c0018530:	50                   	push   eax
c0018531:	e8 12 53 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0018536:	83 c4 10             	add    esp,0x10
c0018539:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001853e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018544:	83 e0 04             	and    eax,0x4
c0018547:	84 c0                	test   al,al
c0018549:	0f 84 d2 00 00 00    	je     c0018621 <ACPI::open(int, int, void*)+0x33b>
c001854f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018556:	83 ec 0c             	sub    esp,0xc
c0018559:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001855d:	e8 de 72 ff ff       	call   c000f840 <malloc>
c0018562:	83 c4 10             	add    esp,0x10
c0018565:	89 c3                	mov    ebx,eax
c0018567:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001856c:	83 ec 04             	sub    esp,0x4
c001856f:	50                   	push   eax
c0018570:	68 80 b4 02 c0       	push   0xc002b480
c0018575:	53                   	push   ebx
c0018576:	e8 d3 ad ff ff       	call   c001334e <File::File(char const*, Process*)>
c001857b:	83 c4 10             	add    esp,0x10
c001857e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018582:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018587:	74 17                	je     c00185a0 <ACPI::open(int, int, void*)+0x2ba>
c0018589:	83 ec 0c             	sub    esp,0xc
c001858c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018590:	e8 8b b0 ff ff       	call   c0013620 <File::exists()>
c0018595:	83 c4 10             	add    esp,0x10
c0018598:	84 c0                	test   al,al
c001859a:	74 04                	je     c00185a0 <ACPI::open(int, int, void*)+0x2ba>
c001859c:	b0 01                	mov    al,0x1
c001859e:	eb 02                	jmp    c00185a2 <ACPI::open(int, int, void*)+0x2bc>
c00185a0:	b0 00                	mov    al,0x0
c00185a2:	84 c0                	test   al,al
c00185a4:	74 22                	je     c00185c8 <ACPI::open(int, int, void*)+0x2e2>
c00185a6:	83 ec 08             	sub    esp,0x8
c00185a9:	6a 01                	push   0x1
c00185ab:	68 80 b4 02 c0       	push   0xc002b480
c00185b0:	e8 5f 50 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c00185b5:	83 c4 10             	add    esp,0x10
c00185b8:	83 ec 08             	sub    esp,0x8
c00185bb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00185bf:	50                   	push   eax
c00185c0:	e8 83 52 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c00185c5:	83 c4 10             	add    esp,0x10
c00185c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185cd:	74 1e                	je     c00185ed <ACPI::open(int, int, void*)+0x307>
c00185cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185d4:	74 17                	je     c00185ed <ACPI::open(int, int, void*)+0x307>
c00185d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185da:	8b 00                	mov    eax,DWORD PTR [eax]
c00185dc:	83 c0 08             	add    eax,0x8
c00185df:	8b 00                	mov    eax,DWORD PTR [eax]
c00185e1:	83 ec 0c             	sub    esp,0xc
c00185e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185e8:	ff d0                	call   eax
c00185ea:	83 c4 10             	add    esp,0x10
c00185ed:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c00185f2:	83 ec 08             	sub    esp,0x8
c00185f5:	68 9d b4 02 c0       	push   0xc002b49d
c00185fa:	50                   	push   eax
c00185fb:	e8 64 f5 ff ff       	call   c0017b64 <findDataTable(unsigned char*, char*)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018607:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001860c:	74 13                	je     c0018621 <ACPI::open(int, int, void*)+0x33b>
c001860e:	83 ec 08             	sub    esp,0x8
c0018611:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018615:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018619:	e8 80 fc ff ff       	call   c001829e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001861e:	83 c4 10             	add    esp,0x10
c0018621:	b8 00 00 00 00       	mov    eax,0x0
c0018626:	83 c4 28             	add    esp,0x28
c0018629:	5b                   	pop    ebx
c001862a:	c3                   	ret    
c001862b:	90                   	nop

c001862c <ACPI::sleep()>:
c001862c:	83 ec 0c             	sub    esp,0xc
c001862f:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c0018634:	85 c0                	test   eax,eax
c0018636:	74 07                	je     c001863f <ACPI::sleep()+0x13>
c0018638:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001863d:	ff d0                	call   eax
c001863f:	90                   	nop
c0018640:	83 c4 0c             	add    esp,0xc
c0018643:	c3                   	ret    

c0018644 <CPU::close(int, int, void*)>:
c0018644:	31 c0                	xor    eax,eax
c0018646:	c3                   	ret    
c0018647:	90                   	nop

c0018648 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018648:	55                   	push   ebp
c0018649:	57                   	push   edi
c001864a:	56                   	push   esi
c001864b:	53                   	push   ebx
c001864c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018650:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018654:	89 ce                	mov    esi,ecx
c0018656:	89 d5                	mov    ebp,edx
c0018658:	80 f9 04             	cmp    cl,0x4
c001865b:	75 28                	jne    c0018685 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001865d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018660:	3c 03                	cmp    al,0x3
c0018662:	0f 86 63 01 00 00    	jbe    c00187cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018668:	80 fa 03             	cmp    dl,0x3
c001866b:	0f 84 5a 01 00 00    	je     c00187cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018671:	8d 7a f2             	lea    edi,[edx-0xe]
c0018674:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018679:	89 fb                	mov    ebx,edi
c001867b:	80 fb 01             	cmp    bl,0x1
c001867e:	77 4e                	ja     c00186ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018680:	e9 52 01 00 00       	jmp    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018685:	80 f9 05             	cmp    cl,0x5
c0018688:	75 4d                	jne    c00186d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001868a:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001868f:	80 fa 03             	cmp    dl,0x3
c0018692:	0f 86 3f 01 00 00    	jbe    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018698:	8d 7a fa             	lea    edi,[edx-0x6]
c001869b:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c00186a0:	89 fb                	mov    ebx,edi
c00186a2:	80 fb 01             	cmp    bl,0x1
c00186a5:	0f 86 2c 01 00 00    	jbe    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ab:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00186b0:	80 fa 08             	cmp    dl,0x8
c00186b3:	0f 84 1e 01 00 00    	je     c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186b9:	89 d7                	mov    edi,edx
c00186bb:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c00186c0:	83 e7 fb             	and    edi,0xfffffffb
c00186c3:	89 fb                	mov    ebx,edi
c00186c5:	80 fb 09             	cmp    bl,0x9
c00186c8:	0f 84 09 01 00 00    	je     c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ce:	31 c0                	xor    eax,eax
c00186d0:	89 eb                	mov    ebx,ebp
c00186d2:	0f b6 fb             	movzx  edi,bl
c00186d5:	eb 30                	jmp    c0018707 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00186d7:	31 c0                	xor    eax,eax
c00186d9:	80 f9 06             	cmp    cl,0x6
c00186dc:	75 f2                	jne    c00186d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186de:	80 fa 0a             	cmp    dl,0xa
c00186e1:	77 ed                	ja     c00186d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186e3:	bf de 05 00 00       	mov    edi,0x5de
c00186e8:	0f a3 d7             	bt     edi,edx
c00186eb:	73 e3                	jae    c00186d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186ed:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00186f2:	e9 e0 00 00 00       	jmp    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186f7:	39 c7                	cmp    edi,eax
c00186f9:	0f 84 d3 00 00 00    	je     c00187d2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186ff:	40                   	inc    eax
c0018700:	3d d0 00 00 00       	cmp    eax,0xd0
c0018705:	74 09                	je     c0018710 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018707:	89 f3                	mov    ebx,esi
c0018709:	80 fb 0f             	cmp    bl,0xf
c001870c:	75 f1                	jne    c00186ff <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001870e:	eb e7                	jmp    c00186f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018710:	80 f9 10             	cmp    cl,0x10
c0018713:	75 14                	jne    c0018729 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018715:	8d 42 fc             	lea    eax,[edx-0x4]
c0018718:	83 e0 fb             	and    eax,0xfffffffb
c001871b:	3c 02                	cmp    al,0x2
c001871d:	76 34                	jbe    c0018753 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001871f:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018724:	80 fa 02             	cmp    dl,0x2
c0018727:	eb 24                	jmp    c001874d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018729:	80 f9 11             	cmp    cl,0x11
c001872c:	75 13                	jne    c0018741 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001872e:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018733:	80 fa 03             	cmp    dl,0x3
c0018736:	0f 85 9b 00 00 00    	jne    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873c:	e9 91 00 00 00       	jmp    c00187d2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018741:	80 f9 12             	cmp    cl,0x12
c0018744:	75 14                	jne    c001875a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018746:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c001874b:	fe ca                	dec    dl
c001874d:	0f 85 84 00 00 00    	jne    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018753:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018758:	eb 7d                	jmp    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001875a:	80 f9 14             	cmp    cl,0x14
c001875d:	75 12                	jne    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001875f:	4a                   	dec    edx
c0018760:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018765:	80 fa 01             	cmp    dl,0x1
c0018768:	77 6d                	ja     c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876a:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c001876f:	eb 66                	jmp    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018771:	80 f9 15             	cmp    cl,0x15
c0018774:	75 31                	jne    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018776:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c001877b:	80 fa 01             	cmp    dl,0x1
c001877e:	74 57                	je     c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018780:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018785:	80 fa 13             	cmp    dl,0x13
c0018788:	76 0c                	jbe    c0018796 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001878a:	80 fa 30             	cmp    dl,0x30
c001878d:	75 48                	jne    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878f:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018794:	eb 41                	jmp    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018796:	b9 04 00 09 00       	mov    ecx,0x90004
c001879b:	0f a3 d1             	bt     ecx,edx
c001879e:	73 37                	jae    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a0:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00187a5:	eb 30                	jmp    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a7:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c00187ac:	80 f9 16             	cmp    cl,0x16
c00187af:	75 26                	jne    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b1:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c00187b6:	84 d2                	test   dl,dl
c00187b8:	74 1d                	je     c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ba:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c00187bf:	80 fa 30             	cmp    dl,0x30
c00187c2:	75 13                	jne    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c4:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00187c9:	eb 0c                	jmp    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187cb:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c00187d0:	eb 05                	jmp    c00187d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d2:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00187d7:	5b                   	pop    ebx
c00187d8:	5e                   	pop    esi
c00187d9:	5f                   	pop    edi
c00187da:	5d                   	pop    ebp
c00187db:	c3                   	ret    

c00187dc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00187dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187e4:	80 f9 04             	cmp    cl,0x4
c00187e7:	75 6b                	jne    c0018854 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00187e9:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c00187ee:	80 fa 01             	cmp    dl,0x1
c00187f1:	0f 86 92 02 00 00    	jbe    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f7:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00187fc:	80 fa 02             	cmp    dl,0x2
c00187ff:	0f 84 84 02 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018805:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c001880a:	80 fa 03             	cmp    dl,0x3
c001880d:	0f 84 76 02 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018813:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c0018818:	80 fa 04             	cmp    dl,0x4
c001881b:	0f 84 68 02 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018821:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018826:	80 fa 05             	cmp    dl,0x5
c0018829:	0f 84 5a 02 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001882f:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018834:	80 fa 07             	cmp    dl,0x7
c0018837:	0f 84 4c 02 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001883d:	83 ea 08             	sub    edx,0x8
c0018840:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018845:	80 fa 01             	cmp    dl,0x1
c0018848:	0f 87 3b 02 00 00    	ja     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001884e:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018853:	c3                   	ret    
c0018854:	80 f9 05             	cmp    cl,0x5
c0018857:	75 45                	jne    c001889e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018859:	8d 4a ff             	lea    ecx,[edx-0x1]
c001885c:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018861:	80 f9 02             	cmp    cl,0x2
c0018864:	0f 86 1f 02 00 00    	jbe    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886a:	80 fa 04             	cmp    dl,0x4
c001886d:	0f 84 f3 01 00 00    	je     c0018a66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018873:	80 fa 07             	cmp    dl,0x7
c0018876:	0f 84 0d 02 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887c:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018881:	80 fa 08             	cmp    dl,0x8
c0018884:	0f 84 ff 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888a:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c001888f:	80 fa 09             	cmp    dl,0x9
c0018892:	0f 85 f1 01 00 00    	jne    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018898:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001889d:	c3                   	ret    
c001889e:	80 f9 06             	cmp    cl,0x6
c00188a1:	0f 85 85 01 00 00    	jne    c0018a2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00188a7:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c00188ac:	80 fa 01             	cmp    dl,0x1
c00188af:	0f 84 d4 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b5:	8d 42 fb             	lea    eax,[edx-0x5]
c00188b8:	3c 01                	cmp    al,0x1
c00188ba:	0f 86 ac 01 00 00    	jbe    c0018a6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188c0:	80 fa 03             	cmp    dl,0x3
c00188c3:	0f 84 a3 01 00 00    	je     c0018a6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188c9:	8d 4a f9             	lea    ecx,[edx-0x7]
c00188cc:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00188d1:	80 f9 01             	cmp    cl,0x1
c00188d4:	0f 86 af 01 00 00    	jbe    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188da:	80 fa 09             	cmp    dl,0x9
c00188dd:	0f 84 8f 01 00 00    	je     c0018a72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00188e3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00188e6:	80 f9 01             	cmp    cl,0x1
c00188e9:	0f 86 9a 01 00 00    	jbe    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ef:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00188f4:	80 fa 0d             	cmp    dl,0xd
c00188f7:	0f 84 8c 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188fd:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018902:	80 fa 0e             	cmp    dl,0xe
c0018905:	0f 84 7e 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890b:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018910:	80 fa 0f             	cmp    dl,0xf
c0018913:	0f 84 70 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018919:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c001891e:	80 fa 15             	cmp    dl,0x15
c0018921:	0f 84 62 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018927:	8d 4a ea             	lea    ecx,[edx-0x16]
c001892a:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c001892f:	80 f9 01             	cmp    cl,0x1
c0018932:	0f 86 51 01 00 00    	jbe    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018938:	80 fa 1a             	cmp    dl,0x1a
c001893b:	0f 84 37 01 00 00    	je     c0018a78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018941:	80 fa 1c             	cmp    dl,0x1c
c0018944:	0f 84 34 01 00 00    	je     c0018a7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001894a:	80 fa 1d             	cmp    dl,0x1d
c001894d:	0f 84 36 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018953:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018958:	80 fa 25             	cmp    dl,0x25
c001895b:	0f 84 28 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018961:	8d 4a da             	lea    ecx,[edx-0x26]
c0018964:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018969:	80 f9 01             	cmp    cl,0x1
c001896c:	0f 86 17 01 00 00    	jbe    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018972:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018977:	80 fa 2a             	cmp    dl,0x2a
c001897a:	0f 84 09 01 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018980:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018985:	80 fa 2c             	cmp    dl,0x2c
c0018988:	0f 84 fb 00 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898e:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018993:	80 fa 2d             	cmp    dl,0x2d
c0018996:	0f 84 ed 00 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899c:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c00189a1:	80 fa 2e             	cmp    dl,0x2e
c00189a4:	0f 84 df 00 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189aa:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c00189af:	80 fa 2f             	cmp    dl,0x2f
c00189b2:	0f 84 d1 00 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b8:	8d 4a cb             	lea    ecx,[edx-0x35]
c00189bb:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00189c0:	80 f9 01             	cmp    cl,0x1
c00189c3:	0f 86 c0 00 00 00    	jbe    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c9:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c00189ce:	80 fa 37             	cmp    dl,0x37
c00189d1:	0f 84 b2 00 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d7:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c00189dc:	80 fa 3a             	cmp    dl,0x3a
c00189df:	0f 84 a4 00 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e5:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00189ea:	80 fa 3c             	cmp    dl,0x3c
c00189ed:	0f 84 96 00 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f3:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00189f8:	80 fa 3d             	cmp    dl,0x3d
c00189fb:	0f 84 88 00 00 00    	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a01:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a06:	80 fa 3e             	cmp    dl,0x3e
c0018a09:	74 7e                	je     c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	8d 42 bb             	lea    eax,[edx-0x45]
c0018a0e:	3c 01                	cmp    al,0x1
c0018a10:	76 72                	jbe    c0018a84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a12:	80 fa 3f             	cmp    dl,0x3f
c0018a15:	74 6d                	je     c0018a84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a17:	80 fa 4a             	cmp    dl,0x4a
c0018a1a:	74 0a                	je     c0018a26 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018a1c:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018a21:	80 fa 4d             	cmp    dl,0x4d
c0018a24:	75 63                	jne    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a26:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a2b:	c3                   	ret    
c0018a2c:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018a31:	80 f9 0b             	cmp    cl,0xb
c0018a34:	75 0a                	jne    c0018a40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a36:	fe ca                	dec    dl
c0018a38:	75 4f                	jne    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3a:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a3f:	c3                   	ret    
c0018a40:	80 f9 0f             	cmp    cl,0xf
c0018a43:	75 44                	jne    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a45:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a4a:	80 fa 02             	cmp    dl,0x2
c0018a4d:	76 3a                	jbe    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a52:	3c 01                	cmp    al,0x1
c0018a54:	76 0a                	jbe    c0018a60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a56:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018a5b:	80 fa 06             	cmp    dl,0x6
c0018a5e:	75 29                	jne    c0018a89 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a60:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a65:	c3                   	ret    
c0018a66:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a6b:	c3                   	ret    
c0018a6c:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a71:	c3                   	ret    
c0018a72:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018a77:	c3                   	ret    
c0018a78:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a7d:	c3                   	ret    
c0018a7e:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018a83:	c3                   	ret    
c0018a84:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018a89:	c3                   	ret    

c0018a8a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a8a:	60                   	pusha  
c0018a8b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a97:	9c                   	pushf  
c0018a98:	fa                   	cli    
c0018a99:	0f 09                	wbinvd 
c0018a9b:	0f 30                	wrmsr  
c0018a9d:	9d                   	popf   
c0018a9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018aa2:	89 02                	mov    DWORD PTR [edx],eax
c0018aa4:	61                   	popa   
c0018aa5:	c3                   	ret    

c0018aa6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018aa6:	60                   	pusha  
c0018aa7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018aab:	9c                   	pushf  
c0018aac:	fa                   	cli    
c0018aad:	0f 09                	wbinvd 
c0018aaf:	31 c0                	xor    eax,eax
c0018ab1:	31 d2                	xor    edx,edx
c0018ab3:	0f 32                	rdmsr  
c0018ab5:	9d                   	popf   
c0018ab6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018aba:	89 02                	mov    DWORD PTR [edx],eax
c0018abc:	61                   	popa   
c0018abd:	c3                   	ret    

c0018abe <CPU::AMD_K6_writeback(int, int, int)>:
c0018abe:	56                   	push   esi
c0018abf:	53                   	push   ebx
c0018ac0:	83 ec 10             	sub    esp,0x10
c0018ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ac7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018acc:	75 5d                	jne    c0018b2b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ace:	83 f8 08             	cmp    eax,0x8
c0018ad1:	75 09                	jne    c0018adc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ad3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ad8:	7e 13                	jle    c0018aed <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ada:	eb 30                	jmp    c0018b0c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018adc:	83 f8 06             	cmp    eax,0x6
c0018adf:	7c 4a                	jl     c0018b2b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ae1:	83 f8 07             	cmp    eax,0x7
c0018ae4:	7e 07                	jle    c0018aed <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ae6:	83 f8 09             	cmp    eax,0x9
c0018ae9:	74 21                	je     c0018b0c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018aeb:	eb 3e                	jmp    c0018b2b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018aed:	89 e6                	mov    esi,esp
c0018aef:	8b 1d 44 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e444
c0018af5:	56                   	push   esi
c0018af6:	c1 eb 15             	shr    ebx,0x15
c0018af9:	68 82 00 00 c0       	push   0xc0000082
c0018afe:	83 e3 7e             	and    ebx,0x7e
c0018b01:	e8 a0 ff ff ff       	call   c0018aa6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b06:	56                   	push   esi
c0018b07:	6a 00                	push   0x0
c0018b09:	53                   	push   ebx
c0018b0a:	eb 12                	jmp    c0018b1e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018b0c:	89 e3                	mov    ebx,esp
c0018b0e:	53                   	push   ebx
c0018b0f:	68 82 00 00 c0       	push   0xc0000082
c0018b14:	e8 8d ff ff ff       	call   c0018aa6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b19:	53                   	push   ebx
c0018b1a:	6a 00                	push   0x0
c0018b1c:	6a 00                	push   0x0
c0018b1e:	68 82 00 00 c0       	push   0xc0000082
c0018b23:	e8 62 ff ff ff       	call   c0018a8a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018b28:	83 c4 18             	add    esp,0x18
c0018b2b:	83 c4 10             	add    esp,0x10
c0018b2e:	5b                   	pop    ebx
c0018b2f:	5e                   	pop    esi
c0018b30:	c3                   	ret    
c0018b31:	90                   	nop

c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b32:	55                   	push   ebp
c0018b33:	57                   	push   edi
c0018b34:	56                   	push   esi
c0018b35:	53                   	push   ebx
c0018b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b3a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b3e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b42:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b46:	39 05 20 d9 02 c0    	cmp    DWORD PTR ds:0xc002d920,eax
c0018b4c:	75 23                	jne    c0018b71 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b4e:	a1 4c 0f 03 c0       	mov    eax,ds:0xc0030f4c
c0018b53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b57:	89 06                	mov    DWORD PTR [esi],eax
c0018b59:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c0018b5e:	89 07                	mov    DWORD PTR [edi],eax
c0018b60:	a1 44 0f 03 c0       	mov    eax,ds:0xc0030f44
c0018b65:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b68:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c0018b6d:	89 02                	mov    DWORD PTR [edx],eax
c0018b6f:	eb 3f                	jmp    c0018bb0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b71:	31 c9                	xor    ecx,ecx
c0018b73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b77:	0f a2                	cpuid  
c0018b79:	89 06                	mov    DWORD PTR [esi],eax
c0018b7b:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b81:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b84:	89 10                	mov    DWORD PTR [eax],edx
c0018b86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b8a:	a3 20 d9 02 c0       	mov    ds:0xc002d920,eax
c0018b8f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b91:	a3 4c 0f 03 c0       	mov    ds:0xc0030f4c,eax
c0018b96:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b98:	a3 48 0f 03 c0       	mov    ds:0xc0030f48,eax
c0018b9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018ba0:	a3 44 0f 03 c0       	mov    ds:0xc0030f44,eax
c0018ba5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bab:	a3 40 0f 03 c0       	mov    ds:0xc0030f40,eax
c0018bb0:	5b                   	pop    ebx
c0018bb1:	5e                   	pop    esi
c0018bb2:	5f                   	pop    edi
c0018bb3:	5d                   	pop    ebp
c0018bb4:	c3                   	ret    
c0018bb5:	90                   	nop

c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>:
c0018bb6:	83 ec 10             	sub    esp,0x10
c0018bb9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bbd:	50                   	push   eax
c0018bbe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc2:	50                   	push   eax
c0018bc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc7:	50                   	push   eax
c0018bc8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bcc:	50                   	push   eax
c0018bcd:	6a 01                	push   0x1
c0018bcf:	e8 5e ff ff ff       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bd8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018bdc:	0f 95 c0             	setne  al
c0018bdf:	83 c4 24             	add    esp,0x24
c0018be2:	c3                   	ret    
c0018be3:	90                   	nop

c0018be4 <CPU::cpuidCheckECX(unsigned int)>:
c0018be4:	83 ec 10             	sub    esp,0x10
c0018be7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018beb:	50                   	push   eax
c0018bec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf0:	50                   	push   eax
c0018bf1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf5:	50                   	push   eax
c0018bf6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bfa:	50                   	push   eax
c0018bfb:	6a 01                	push   0x1
c0018bfd:	e8 30 ff ff ff       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c06:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c0a:	0f 95 c0             	setne  al
c0018c0d:	83 c4 24             	add    esp,0x24
c0018c10:	c3                   	ret    
c0018c11:	90                   	nop

c0018c12 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018c12:	83 ec 10             	sub    esp,0x10
c0018c15:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c19:	50                   	push   eax
c0018c1a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c1e:	50                   	push   eax
c0018c1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c23:	50                   	push   eax
c0018c24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c28:	50                   	push   eax
c0018c29:	6a 07                	push   0x7
c0018c2b:	e8 02 ff ff ff       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c34:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c38:	0f 95 c0             	setne  al
c0018c3b:	83 c4 24             	add    esp,0x24
c0018c3e:	c3                   	ret    
c0018c3f:	90                   	nop

c0018c40 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c40:	83 ec 10             	sub    esp,0x10
c0018c43:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c47:	50                   	push   eax
c0018c48:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c4c:	50                   	push   eax
c0018c4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c51:	50                   	push   eax
c0018c52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c56:	50                   	push   eax
c0018c57:	6a 07                	push   0x7
c0018c59:	e8 d4 fe ff ff       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c62:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c66:	0f 95 c0             	setne  al
c0018c69:	83 c4 24             	add    esp,0x24
c0018c6c:	c3                   	ret    
c0018c6d:	90                   	nop

c0018c6e <CPU::CPU()>:
c0018c6e:	83 ec 0c             	sub    esp,0xc
c0018c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c75:	83 ec 08             	sub    esp,0x8
c0018c78:	68 82 b8 02 c0       	push   0xc002b882
c0018c7d:	50                   	push   eax
c0018c7e:	e8 89 b7 ff ff       	call   c001440c <Device::Device(char const*)>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	ba 5c b9 02 c0       	mov    edx,0xc002b95c
c0018c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c8f:	89 10                	mov    DWORD PTR [eax],edx
c0018c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c95:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ca3:	05 78 01 00 00       	add    eax,0x178
c0018ca8:	83 ec 0c             	sub    esp,0xc
c0018cab:	50                   	push   eax
c0018cac:	e8 a7 63 ff ff       	call   c000f058 <GDT::GDT()>
c0018cb1:	83 c4 10             	add    esp,0x10
c0018cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cb8:	05 7c 09 00 00       	add    eax,0x97c
c0018cbd:	83 ec 0c             	sub    esp,0xc
c0018cc0:	50                   	push   eax
c0018cc1:	e8 f4 65 ff ff       	call   c000f2ba <IDT::IDT()>
c0018cc6:	83 c4 10             	add    esp,0x10
c0018cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ccd:	05 7c 11 00 00       	add    eax,0x117c
c0018cd2:	83 ec 0c             	sub    esp,0xc
c0018cd5:	50                   	push   eax
c0018cd6:	e8 75 87 ff ff       	call   c0011450 <TSS::TSS()>
c0018cdb:	83 c4 10             	add    esp,0x10
c0018cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ce2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ced:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018cf7:	90                   	nop
c0018cf8:	83 c4 0c             	add    esp,0xc
c0018cfb:	c3                   	ret    

c0018cfc <CPU::displayFeatures()>:
c0018cfc:	53                   	push   ebx
c0018cfd:	83 ec 10             	sub    esp,0x10
c0018d00:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d04:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018d0a:	68 90 b5 02 c0       	push   0xc002b590
c0018d0f:	e8 e2 a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018d14:	59                   	pop    ecx
c0018d15:	58                   	pop    eax
c0018d16:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018d1c:	50                   	push   eax
c0018d1d:	68 a1 b5 02 c0       	push   0xc002b5a1
c0018d22:	e8 cf a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018d27:	58                   	pop    eax
c0018d28:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d2e:	5a                   	pop    edx
c0018d2f:	c1 e8 0e             	shr    eax,0xe
c0018d32:	0f b6 c0             	movzx  eax,al
c0018d35:	50                   	push   eax
c0018d36:	68 b2 b5 02 c0       	push   0xc002b5b2
c0018d3b:	e8 b6 a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018d40:	59                   	pop    ecx
c0018d41:	58                   	pop    eax
c0018d42:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d48:	66 c1 e8 06          	shr    ax,0x6
c0018d4c:	0f b6 c0             	movzx  eax,al
c0018d4f:	50                   	push   eax
c0018d50:	68 c3 b5 02 c0       	push   0xc002b5c3
c0018d55:	e8 9c a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018d5a:	c7 04 24 70 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba70
c0018d61:	e8 90 a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018d66:	83 c4 10             	add    esp,0x10
c0018d69:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018d6e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018d75:	74 05                	je     c0018d7c <CPU::displayFeatures()+0x80>
c0018d77:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018d7c:	52                   	push   edx
c0018d7d:	52                   	push   edx
c0018d7e:	50                   	push   eax
c0018d7f:	68 d4 b5 02 c0       	push   0xc002b5d4
c0018d84:	e8 6d a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018d89:	83 c4 10             	add    esp,0x10
c0018d8c:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018d91:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018d98:	78 05                	js     c0018d9f <CPU::displayFeatures()+0xa3>
c0018d9a:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018d9f:	51                   	push   ecx
c0018da0:	51                   	push   ecx
c0018da1:	50                   	push   eax
c0018da2:	68 eb b5 02 c0       	push   0xc002b5eb
c0018da7:	e8 4a a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018dac:	83 c4 10             	add    esp,0x10
c0018daf:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018db4:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018dbb:	75 05                	jne    c0018dc2 <CPU::displayFeatures()+0xc6>
c0018dbd:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018dc2:	52                   	push   edx
c0018dc3:	52                   	push   edx
c0018dc4:	50                   	push   eax
c0018dc5:	68 02 b6 02 c0       	push   0xc002b602
c0018dca:	e8 27 a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018dcf:	83 c4 10             	add    esp,0x10
c0018dd2:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018dd7:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018dde:	75 05                	jne    c0018de5 <CPU::displayFeatures()+0xe9>
c0018de0:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018de5:	51                   	push   ecx
c0018de6:	51                   	push   ecx
c0018de7:	50                   	push   eax
c0018de8:	68 19 b6 02 c0       	push   0xc002b619
c0018ded:	e8 04 a0 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018df2:	83 c4 10             	add    esp,0x10
c0018df5:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018dfa:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018e01:	75 05                	jne    c0018e08 <CPU::displayFeatures()+0x10c>
c0018e03:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018e08:	52                   	push   edx
c0018e09:	52                   	push   edx
c0018e0a:	50                   	push   eax
c0018e0b:	68 30 b6 02 c0       	push   0xc002b630
c0018e10:	e8 e1 9f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018e15:	83 c4 10             	add    esp,0x10
c0018e18:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018e1d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018e24:	75 05                	jne    c0018e2b <CPU::displayFeatures()+0x12f>
c0018e26:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018e2b:	51                   	push   ecx
c0018e2c:	51                   	push   ecx
c0018e2d:	50                   	push   eax
c0018e2e:	68 47 b6 02 c0       	push   0xc002b647
c0018e33:	e8 be 9f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018e38:	83 c4 10             	add    esp,0x10
c0018e3b:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018e40:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018e47:	75 05                	jne    c0018e4e <CPU::displayFeatures()+0x152>
c0018e49:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018e4e:	52                   	push   edx
c0018e4f:	52                   	push   edx
c0018e50:	50                   	push   eax
c0018e51:	68 5e b6 02 c0       	push   0xc002b65e
c0018e56:	e8 9b 9f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018e5b:	83 c4 10             	add    esp,0x10
c0018e5e:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018e63:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018e6a:	75 05                	jne    c0018e71 <CPU::displayFeatures()+0x175>
c0018e6c:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018e71:	51                   	push   ecx
c0018e72:	51                   	push   ecx
c0018e73:	50                   	push   eax
c0018e74:	68 75 b6 02 c0       	push   0xc002b675
c0018e79:	e8 78 9f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018e7e:	83 c4 10             	add    esp,0x10
c0018e81:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018e86:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018e8d:	75 05                	jne    c0018e94 <CPU::displayFeatures()+0x198>
c0018e8f:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018e94:	52                   	push   edx
c0018e95:	52                   	push   edx
c0018e96:	50                   	push   eax
c0018e97:	68 8c b6 02 c0       	push   0xc002b68c
c0018e9c:	e8 55 9f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018ea1:	83 c4 10             	add    esp,0x10
c0018ea4:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018ea9:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018eb0:	75 05                	jne    c0018eb7 <CPU::displayFeatures()+0x1bb>
c0018eb2:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018eb7:	51                   	push   ecx
c0018eb8:	51                   	push   ecx
c0018eb9:	50                   	push   eax
c0018eba:	68 a3 b6 02 c0       	push   0xc002b6a3
c0018ebf:	e8 32 9f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018ec4:	83 c4 10             	add    esp,0x10
c0018ec7:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018ecc:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018ed3:	75 05                	jne    c0018eda <CPU::displayFeatures()+0x1de>
c0018ed5:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018eda:	52                   	push   edx
c0018edb:	52                   	push   edx
c0018edc:	50                   	push   eax
c0018edd:	68 ba b6 02 c0       	push   0xc002b6ba
c0018ee2:	e8 0f 9f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018eef:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018ef6:	75 05                	jne    c0018efd <CPU::displayFeatures()+0x201>
c0018ef8:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018efd:	51                   	push   ecx
c0018efe:	51                   	push   ecx
c0018eff:	50                   	push   eax
c0018f00:	68 d1 b6 02 c0       	push   0xc002b6d1
c0018f05:	e8 ec 9e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018f0a:	83 c4 10             	add    esp,0x10
c0018f0d:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018f12:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018f19:	75 05                	jne    c0018f20 <CPU::displayFeatures()+0x224>
c0018f1b:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018f20:	52                   	push   edx
c0018f21:	52                   	push   edx
c0018f22:	50                   	push   eax
c0018f23:	68 e8 b6 02 c0       	push   0xc002b6e8
c0018f28:	e8 c9 9e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018f2d:	83 c4 10             	add    esp,0x10
c0018f30:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018f35:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018f3c:	78 05                	js     c0018f43 <CPU::displayFeatures()+0x247>
c0018f3e:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018f43:	51                   	push   ecx
c0018f44:	51                   	push   ecx
c0018f45:	50                   	push   eax
c0018f46:	68 ff b6 02 c0       	push   0xc002b6ff
c0018f4b:	e8 a6 9e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018f50:	83 c4 10             	add    esp,0x10
c0018f53:	b8 f2 9e 02 c0       	mov    eax,0xc0029ef2
c0018f58:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018f5f:	75 05                	jne    c0018f66 <CPU::displayFeatures()+0x26a>
c0018f61:	b8 f6 9e 02 c0       	mov    eax,0xc0029ef6
c0018f66:	52                   	push   edx
c0018f67:	52                   	push   edx
c0018f68:	50                   	push   eax
c0018f69:	68 16 b7 02 c0       	push   0xc002b716
c0018f6e:	e8 83 9e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0018f73:	83 c4 18             	add    esp,0x18
c0018f76:	5b                   	pop    ebx
c0018f77:	c3                   	ret    

c0018f78 <CPU::detectFeatures()>:
c0018f78:	55                   	push   ebp
c0018f79:	57                   	push   edi
c0018f7a:	56                   	push   esi
c0018f7b:	53                   	push   ebx
c0018f7c:	83 ec 50             	sub    esp,0x50
c0018f7f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018f83:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018f8d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018f94:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018f9a:	6a 0d                	push   0xd
c0018f9c:	6a 00                	push   0x0
c0018f9e:	57                   	push   edi
c0018f9f:	e8 d4 77 fe ff       	call   c0000778 <memset>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0018fac:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018fb3:	0f 84 20 09 00 00    	je     c00198d9 <CPU::detectFeatures()+0x961>
c0018fb9:	83 ec 0c             	sub    esp,0xc
c0018fbc:	6a 10                	push   0x10
c0018fbe:	e8 f3 fb ff ff       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c0018fc3:	83 e0 01             	and    eax,0x1
c0018fc6:	8d 14 00             	lea    edx,[eax+eax*1]
c0018fc9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fcf:	83 e0 fd             	and    eax,0xfffffffd
c0018fd2:	09 d0                	or     eax,edx
c0018fd4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fda:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018fe1:	e8 d0 fb ff ff       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c0018fe6:	83 e0 01             	and    eax,0x1
c0018fe9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018ff0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ff6:	83 e0 fb             	and    eax,0xfffffffb
c0018ff9:	09 d0                	or     eax,edx
c0018ffb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019001:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019008:	e8 a9 fb ff ff       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c001900d:	83 e0 01             	and    eax,0x1
c0019010:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019017:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001901d:	83 e0 f7             	and    eax,0xfffffff7
c0019020:	09 d0                	or     eax,edx
c0019022:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019028:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001902f:	e8 82 fb ff ff       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c0019034:	83 e0 01             	and    eax,0x1
c0019037:	c1 e0 04             	shl    eax,0x4
c001903a:	88 c2                	mov    dl,al
c001903c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019042:	83 e0 ef             	and    eax,0xffffffef
c0019045:	09 d0                	or     eax,edx
c0019047:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001904d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019054:	e8 5d fb ff ff       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c0019059:	83 e0 01             	and    eax,0x1
c001905c:	c1 e0 05             	shl    eax,0x5
c001905f:	88 c2                	mov    dl,al
c0019061:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019067:	83 e0 df             	and    eax,0xffffffdf
c001906a:	09 d0                	or     eax,edx
c001906c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019072:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019079:	e8 38 fb ff ff       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c001907e:	83 e0 01             	and    eax,0x1
c0019081:	8d 14 00             	lea    edx,[eax+eax*1]
c0019084:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001908a:	83 e0 fd             	and    eax,0xfffffffd
c001908d:	09 d0                	or     eax,edx
c001908f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019095:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001909c:	e8 15 fb ff ff       	call   c0018bb6 <CPU::cpuidCheckEDX(unsigned int)>
c00190a1:	83 e0 01             	and    eax,0x1
c00190a4:	c1 e0 06             	shl    eax,0x6
c00190a7:	88 c2                	mov    dl,al
c00190a9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190af:	83 e0 bf             	and    eax,0xffffffbf
c00190b2:	09 d0                	or     eax,edx
c00190b4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190ba:	58                   	pop    eax
c00190bb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00190bf:	56                   	push   esi
c00190c0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00190c4:	55                   	push   ebp
c00190c5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190c9:	50                   	push   eax
c00190ca:	8d 54 24 28          	lea    edx,[esp+0x28]
c00190ce:	52                   	push   edx
c00190cf:	6a 00                	push   0x0
c00190d1:	e8 5c fa ff ff       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190d6:	83 c4 1c             	add    esp,0x1c
c00190d9:	6a 04                	push   0x4
c00190db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190df:	50                   	push   eax
c00190e0:	57                   	push   edi
c00190e1:	e8 5e 76 fe ff       	call   c0000744 <memcpy>
c00190e6:	83 c4 0c             	add    esp,0xc
c00190e9:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00190ef:	6a 04                	push   0x4
c00190f1:	56                   	push   esi
c00190f2:	50                   	push   eax
c00190f3:	e8 4c 76 fe ff       	call   c0000744 <memcpy>
c00190f8:	83 c4 0c             	add    esp,0xc
c00190fb:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019101:	6a 04                	push   0x4
c0019103:	55                   	push   ebp
c0019104:	50                   	push   eax
c0019105:	e8 3a 76 fe ff       	call   c0000744 <memcpy>
c001910a:	58                   	pop    eax
c001910b:	5a                   	pop    edx
c001910c:	68 2d b7 02 c0       	push   0xc002b72d
c0019111:	57                   	push   edi
c0019112:	e8 a9 77 fe ff       	call   c00008c0 <strcmp>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	85 c0                	test   eax,eax
c001911c:	75 0f                	jne    c001912d <CPU::detectFeatures()+0x1b5>
c001911e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019128:	e9 22 02 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c001912d:	50                   	push   eax
c001912e:	50                   	push   eax
c001912f:	68 3a b7 02 c0       	push   0xc002b73a
c0019134:	57                   	push   edi
c0019135:	e8 86 77 fe ff       	call   c00008c0 <strcmp>
c001913a:	83 c4 10             	add    esp,0x10
c001913d:	85 c0                	test   eax,eax
c001913f:	74 dd                	je     c001911e <CPU::detectFeatures()+0x1a6>
c0019141:	51                   	push   ecx
c0019142:	51                   	push   ecx
c0019143:	68 47 b7 02 c0       	push   0xc002b747
c0019148:	57                   	push   edi
c0019149:	e8 72 77 fe ff       	call   c00008c0 <strcmp>
c001914e:	83 c4 10             	add    esp,0x10
c0019151:	85 c0                	test   eax,eax
c0019153:	74 2a                	je     c001917f <CPU::detectFeatures()+0x207>
c0019155:	52                   	push   edx
c0019156:	52                   	push   edx
c0019157:	68 54 b7 02 c0       	push   0xc002b754
c001915c:	57                   	push   edi
c001915d:	e8 5e 77 fe ff       	call   c00008c0 <strcmp>
c0019162:	83 c4 10             	add    esp,0x10
c0019165:	85 c0                	test   eax,eax
c0019167:	74 16                	je     c001917f <CPU::detectFeatures()+0x207>
c0019169:	50                   	push   eax
c001916a:	50                   	push   eax
c001916b:	68 61 b7 02 c0       	push   0xc002b761
c0019170:	57                   	push   edi
c0019171:	e8 4a 77 fe ff       	call   c00008c0 <strcmp>
c0019176:	83 c4 10             	add    esp,0x10
c0019179:	85 c0                	test   eax,eax
c001917b:	74 48                	je     c00191c5 <CPU::detectFeatures()+0x24d>
c001917d:	eb 0f                	jmp    c001918e <CPU::detectFeatures()+0x216>
c001917f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019189:	e9 c1 01 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c001918e:	50                   	push   eax
c001918f:	50                   	push   eax
c0019190:	68 6e b7 02 c0       	push   0xc002b76e
c0019195:	57                   	push   edi
c0019196:	e8 25 77 fe ff       	call   c00008c0 <strcmp>
c001919b:	83 c4 10             	add    esp,0x10
c001919e:	85 c0                	test   eax,eax
c00191a0:	74 23                	je     c00191c5 <CPU::detectFeatures()+0x24d>
c00191a2:	50                   	push   eax
c00191a3:	50                   	push   eax
c00191a4:	68 7b b7 02 c0       	push   0xc002b77b
c00191a9:	57                   	push   edi
c00191aa:	e8 11 77 fe ff       	call   c00008c0 <strcmp>
c00191af:	83 c4 10             	add    esp,0x10
c00191b2:	85 c0                	test   eax,eax
c00191b4:	75 1e                	jne    c00191d4 <CPU::detectFeatures()+0x25c>
c00191b6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191c0:	e9 8a 01 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c00191c5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00191cf:	e9 7b 01 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c00191d4:	50                   	push   eax
c00191d5:	50                   	push   eax
c00191d6:	68 88 b7 02 c0       	push   0xc002b788
c00191db:	57                   	push   edi
c00191dc:	e8 df 76 fe ff       	call   c00008c0 <strcmp>
c00191e1:	83 c4 10             	add    esp,0x10
c00191e4:	85 c0                	test   eax,eax
c00191e6:	75 0f                	jne    c00191f7 <CPU::detectFeatures()+0x27f>
c00191e8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00191f2:	e9 58 01 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c00191f7:	50                   	push   eax
c00191f8:	50                   	push   eax
c00191f9:	68 47 b7 02 c0       	push   0xc002b747
c00191fe:	57                   	push   edi
c00191ff:	e8 bc 76 fe ff       	call   c00008c0 <strcmp>
c0019204:	83 c4 10             	add    esp,0x10
c0019207:	85 c0                	test   eax,eax
c0019209:	75 0f                	jne    c001921a <CPU::detectFeatures()+0x2a2>
c001920b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019215:	e9 35 01 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c001921a:	50                   	push   eax
c001921b:	50                   	push   eax
c001921c:	68 95 b7 02 c0       	push   0xc002b795
c0019221:	57                   	push   edi
c0019222:	e8 99 76 fe ff       	call   c00008c0 <strcmp>
c0019227:	83 c4 10             	add    esp,0x10
c001922a:	85 c0                	test   eax,eax
c001922c:	75 0f                	jne    c001923d <CPU::detectFeatures()+0x2c5>
c001922e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019238:	e9 12 01 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c001923d:	51                   	push   ecx
c001923e:	51                   	push   ecx
c001923f:	68 a2 b7 02 c0       	push   0xc002b7a2
c0019244:	57                   	push   edi
c0019245:	e8 76 76 fe ff       	call   c00008c0 <strcmp>
c001924a:	83 c4 10             	add    esp,0x10
c001924d:	85 c0                	test   eax,eax
c001924f:	75 0f                	jne    c0019260 <CPU::detectFeatures()+0x2e8>
c0019251:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001925b:	e9 ef 00 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c0019260:	52                   	push   edx
c0019261:	52                   	push   edx
c0019262:	68 af b7 02 c0       	push   0xc002b7af
c0019267:	57                   	push   edi
c0019268:	e8 53 76 fe ff       	call   c00008c0 <strcmp>
c001926d:	83 c4 10             	add    esp,0x10
c0019270:	85 c0                	test   eax,eax
c0019272:	75 0f                	jne    c0019283 <CPU::detectFeatures()+0x30b>
c0019274:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001927e:	e9 cc 00 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c0019283:	50                   	push   eax
c0019284:	50                   	push   eax
c0019285:	68 bc b7 02 c0       	push   0xc002b7bc
c001928a:	57                   	push   edi
c001928b:	e8 30 76 fe ff       	call   c00008c0 <strcmp>
c0019290:	83 c4 10             	add    esp,0x10
c0019293:	85 c0                	test   eax,eax
c0019295:	75 0f                	jne    c00192a6 <CPU::detectFeatures()+0x32e>
c0019297:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00192a1:	e9 a9 00 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c00192a6:	50                   	push   eax
c00192a7:	50                   	push   eax
c00192a8:	68 c9 b7 02 c0       	push   0xc002b7c9
c00192ad:	57                   	push   edi
c00192ae:	e8 0d 76 fe ff       	call   c00008c0 <strcmp>
c00192b3:	83 c4 10             	add    esp,0x10
c00192b6:	85 c0                	test   eax,eax
c00192b8:	75 0f                	jne    c00192c9 <CPU::detectFeatures()+0x351>
c00192ba:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00192c4:	e9 86 00 00 00       	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c00192c9:	50                   	push   eax
c00192ca:	50                   	push   eax
c00192cb:	68 d6 b7 02 c0       	push   0xc002b7d6
c00192d0:	57                   	push   edi
c00192d1:	e8 ea 75 fe ff       	call   c00008c0 <strcmp>
c00192d6:	83 c4 10             	add    esp,0x10
c00192d9:	85 c0                	test   eax,eax
c00192db:	75 0c                	jne    c00192e9 <CPU::detectFeatures()+0x371>
c00192dd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00192e7:	eb 66                	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c00192e9:	50                   	push   eax
c00192ea:	50                   	push   eax
c00192eb:	68 e3 b7 02 c0       	push   0xc002b7e3
c00192f0:	57                   	push   edi
c00192f1:	e8 ca 75 fe ff       	call   c00008c0 <strcmp>
c00192f6:	83 c4 10             	add    esp,0x10
c00192f9:	85 c0                	test   eax,eax
c00192fb:	75 0c                	jne    c0019309 <CPU::detectFeatures()+0x391>
c00192fd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019307:	eb 46                	jmp    c001934f <CPU::detectFeatures()+0x3d7>
c0019309:	50                   	push   eax
c001930a:	50                   	push   eax
c001930b:	68 f0 b7 02 c0       	push   0xc002b7f0
c0019310:	57                   	push   edi
c0019311:	e8 aa 75 fe ff       	call   c00008c0 <strcmp>
c0019316:	83 c4 10             	add    esp,0x10
c0019319:	85 c0                	test   eax,eax
c001931b:	74 e0                	je     c00192fd <CPU::detectFeatures()+0x385>
c001931d:	50                   	push   eax
c001931e:	50                   	push   eax
c001931f:	68 fd b7 02 c0       	push   0xc002b7fd
c0019324:	57                   	push   edi
c0019325:	e8 96 75 fe ff       	call   c00008c0 <strcmp>
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	85 c0                	test   eax,eax
c001932f:	74 cc                	je     c00192fd <CPU::detectFeatures()+0x385>
c0019331:	51                   	push   ecx
c0019332:	51                   	push   ecx
c0019333:	68 0a b8 02 c0       	push   0xc002b80a
c0019338:	57                   	push   edi
c0019339:	e8 82 75 fe ff       	call   c00008c0 <strcmp>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	85 c0                	test   eax,eax
c0019343:	74 b8                	je     c00192fd <CPU::detectFeatures()+0x385>
c0019345:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001934f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019354:	0f 86 be 00 00 00    	jbe    c0019418 <CPU::detectFeatures()+0x4a0>
c001935a:	83 ec 0c             	sub    esp,0xc
c001935d:	68 80 00 00 00       	push   0x80
c0019362:	e8 ab f8 ff ff       	call   c0018c12 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019367:	83 e0 01             	and    eax,0x1
c001936a:	c1 e0 06             	shl    eax,0x6
c001936d:	88 c2                	mov    dl,al
c001936f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019375:	83 e0 bf             	and    eax,0xffffffbf
c0019378:	09 d0                	or     eax,edx
c001937a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019380:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019387:	e8 86 f8 ff ff       	call   c0018c12 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001938c:	83 e0 01             	and    eax,0x1
c001938f:	c1 e0 04             	shl    eax,0x4
c0019392:	88 c2                	mov    dl,al
c0019394:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001939a:	83 e0 ef             	and    eax,0xffffffef
c001939d:	09 d0                	or     eax,edx
c001939f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193a5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00193ac:	e8 61 f8 ff ff       	call   c0018c12 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193b1:	c1 e0 07             	shl    eax,0x7
c00193b4:	88 c2                	mov    dl,al
c00193b6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193bc:	83 e0 7f             	and    eax,0x7f
c00193bf:	09 d0                	or     eax,edx
c00193c1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193c7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00193ce:	e8 6d f8 ff ff       	call   c0018c40 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193d3:	83 e0 01             	and    eax,0x1
c00193d6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00193dd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00193e3:	83 e0 f7             	and    eax,0xfffffff7
c00193e6:	09 d0                	or     eax,edx
c00193e8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193ee:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00193f5:	e8 46 f8 ff ff       	call   c0018c40 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193fa:	83 c4 10             	add    esp,0x10
c00193fd:	83 e0 01             	and    eax,0x1
c0019400:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019407:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001940d:	83 e0 fb             	and    eax,0xfffffffb
c0019410:	09 d0                	or     eax,edx
c0019412:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019418:	83 ec 0c             	sub    esp,0xc
c001941b:	56                   	push   esi
c001941c:	55                   	push   ebp
c001941d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019421:	57                   	push   edi
c0019422:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019426:	50                   	push   eax
c0019427:	6a 01                	push   0x1
c0019429:	e8 04 f7 ff ff       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001942e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019432:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019438:	88 ca                	mov    dl,cl
c001943a:	83 e0 f0             	and    eax,0xfffffff0
c001943d:	83 e2 0f             	and    edx,0xf
c0019440:	09 d0                	or     eax,edx
c0019442:	88 ca                	mov    dl,cl
c0019444:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001944a:	c0 ea 04             	shr    dl,0x4
c001944d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019451:	0f b6 c2             	movzx  eax,dl
c0019454:	83 c4 20             	add    esp,0x20
c0019457:	c1 e0 06             	shl    eax,0x6
c001945a:	89 c5                	mov    ebp,eax
c001945c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019462:	66 25 3f c0          	and    ax,0xc03f
c0019466:	09 e8                	or     eax,ebp
c0019468:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001946f:	89 c8                	mov    eax,ecx
c0019471:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019477:	c1 e8 08             	shr    eax,0x8
c001947a:	83 e2 3f             	and    edx,0x3f
c001947d:	83 e0 0f             	and    eax,0xf
c0019480:	89 c5                	mov    ebp,eax
c0019482:	c1 e5 06             	shl    ebp,0x6
c0019485:	09 d5                	or     ebp,edx
c0019487:	89 ea                	mov    edx,ebp
c0019489:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001948f:	88 c2                	mov    dl,al
c0019491:	c0 ea 02             	shr    dl,0x2
c0019494:	89 d5                	mov    ebp,edx
c0019496:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001949c:	83 e2 c0             	and    edx,0xffffffc0
c001949f:	09 d5                	or     ebp,edx
c00194a1:	89 ea                	mov    edx,ebp
c00194a3:	89 cd                	mov    ebp,ecx
c00194a5:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00194ab:	c1 ed 0c             	shr    ebp,0xc
c00194ae:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00194b4:	83 e5 03             	and    ebp,0x3
c00194b7:	83 e2 cf             	and    edx,0xffffffcf
c00194ba:	c1 e5 04             	shl    ebp,0x4
c00194bd:	09 d5                	or     ebp,edx
c00194bf:	3c 06                	cmp    al,0x6
c00194c1:	89 ea                	mov    edx,ebp
c00194c3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00194c9:	74 04                	je     c00194cf <CPU::detectFeatures()+0x557>
c00194cb:	3c 0f                	cmp    al,0xf
c00194cd:	75 5c                	jne    c001952b <CPU::detectFeatures()+0x5b3>
c00194cf:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194d3:	89 cd                	mov    ebp,ecx
c00194d5:	c1 ed 10             	shr    ebp,0x10
c00194d8:	c1 e5 04             	shl    ebp,0x4
c00194db:	09 ea                	or     edx,ebp
c00194dd:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00194e3:	0f b6 d2             	movzx  edx,dl
c00194e6:	66 81 e5 3f c0       	and    bp,0xc03f
c00194eb:	c1 e2 06             	shl    edx,0x6
c00194ee:	09 ea                	or     edx,ebp
c00194f0:	3c 0f                	cmp    al,0xf
c00194f2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00194f9:	75 30                	jne    c001952b <CPU::detectFeatures()+0x5b3>
c00194fb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019501:	c1 e9 14             	shr    ecx,0x14
c0019504:	83 e0 3f             	and    eax,0x3f
c0019507:	83 c1 0f             	add    ecx,0xf
c001950a:	88 ca                	mov    dl,cl
c001950c:	c0 e9 02             	shr    cl,0x2
c001950f:	c1 e2 06             	shl    edx,0x6
c0019512:	09 d0                	or     eax,edx
c0019514:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001951a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019520:	83 e0 c0             	and    eax,0xffffffc0
c0019523:	09 c1                	or     ecx,eax
c0019525:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019535:	56                   	push   esi
c0019536:	8d 44 24 28          	lea    eax,[esp+0x28]
c001953a:	50                   	push   eax
c001953b:	57                   	push   edi
c001953c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019540:	55                   	push   ebp
c0019541:	68 00 00 00 80       	push   0x80000000
c0019546:	e8 e7 f5 ff ff       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001954b:	83 c4 20             	add    esp,0x20
c001954e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019556:	8d 44 24 18          	lea    eax,[esp+0x18]
c001955a:	76 1e                	jbe    c001957a <CPU::detectFeatures()+0x602>
c001955c:	83 ec 0c             	sub    esp,0xc
c001955f:	56                   	push   esi
c0019560:	50                   	push   eax
c0019561:	57                   	push   edi
c0019562:	55                   	push   ebp
c0019563:	68 01 00 00 80       	push   0x80000001
c0019568:	e8 c5 f5 ff ff       	call   c0018b32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001956d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019577:	83 c4 20             	add    esp,0x20
c001957a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019580:	83 f8 01             	cmp    eax,0x1
c0019583:	75 6f                	jne    c00195f4 <CPU::detectFeatures()+0x67c>
c0019585:	51                   	push   ecx
c0019586:	51                   	push   ecx
c0019587:	68 16 b8 02 c0       	push   0xc002b816
c001958c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019590:	56                   	push   esi
c0019591:	e8 9e 72 fe ff       	call   c0000834 <strcpy>
c0019596:	5f                   	pop    edi
c0019597:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001959d:	5d                   	pop    ebp
c001959e:	66 c1 e8 06          	shr    ax,0x6
c00195a2:	0f b6 c0             	movzx  eax,al
c00195a5:	50                   	push   eax
c00195a6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195ac:	c1 e8 0e             	shr    eax,0xe
c00195af:	0f b6 c0             	movzx  eax,al
c00195b2:	50                   	push   eax
c00195b3:	e8 24 f2 ff ff       	call   c00187dc <CPU::lookupIntelName(unsigned char, unsigned char)>
c00195b8:	5a                   	pop    edx
c00195b9:	59                   	pop    ecx
c00195ba:	50                   	push   eax
c00195bb:	56                   	push   esi
c00195bc:	e8 b3 73 fe ff       	call   c0000974 <strcat>
c00195c1:	5f                   	pop    edi
c00195c2:	5d                   	pop    ebp
c00195c3:	56                   	push   esi
c00195c4:	53                   	push   ebx
c00195c5:	e8 34 ae ff ff       	call   c00143fe <Device::setName(char const*)>
c00195ca:	58                   	pop    eax
c00195cb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00195d1:	5a                   	pop    edx
c00195d2:	68 1d b8 02 c0       	push   0xc002b81d
c00195d7:	50                   	push   eax
c00195d8:	e8 e3 72 fe ff       	call   c00008c0 <strcmp>
c00195dd:	83 c4 10             	add    esp,0x10
c00195e0:	85 c0                	test   eax,eax
c00195e2:	0f 85 71 03 00 00    	jne    c0019959 <CPU::detectFeatures()+0x9e1>
c00195e8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00195ef:	e9 65 03 00 00       	jmp    c0019959 <CPU::detectFeatures()+0x9e1>
c00195f4:	83 f8 02             	cmp    eax,0x2
c00195f7:	0f 85 b5 00 00 00    	jne    c00196b2 <CPU::detectFeatures()+0x73a>
c00195fd:	57                   	push   edi
c00195fe:	57                   	push   edi
c00195ff:	68 2f b8 02 c0       	push   0xc002b82f
c0019604:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019608:	56                   	push   esi
c0019609:	e8 26 72 fe ff       	call   c0000834 <strcpy>
c001960e:	5d                   	pop    ebp
c001960f:	58                   	pop    eax
c0019610:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019616:	66 c1 e8 06          	shr    ax,0x6
c001961a:	0f b6 c0             	movzx  eax,al
c001961d:	50                   	push   eax
c001961e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019624:	c1 e8 0e             	shr    eax,0xe
c0019627:	0f b6 c0             	movzx  eax,al
c001962a:	50                   	push   eax
c001962b:	e8 18 f0 ff ff       	call   c0018648 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019630:	5a                   	pop    edx
c0019631:	59                   	pop    ecx
c0019632:	50                   	push   eax
c0019633:	56                   	push   esi
c0019634:	e8 3b 73 fe ff       	call   c0000974 <strcat>
c0019639:	5f                   	pop    edi
c001963a:	5d                   	pop    ebp
c001963b:	56                   	push   esi
c001963c:	53                   	push   ebx
c001963d:	e8 bc ad ff ff       	call   c00143fe <Device::setName(char const*)>
c0019642:	58                   	pop    eax
c0019643:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019649:	5a                   	pop    edx
c001964a:	68 34 b8 02 c0       	push   0xc002b834
c001964f:	50                   	push   eax
c0019650:	e8 6b 72 fe ff       	call   c00008c0 <strcmp>
c0019655:	83 c4 10             	add    esp,0x10
c0019658:	85 c0                	test   eax,eax
c001965a:	75 20                	jne    c001967c <CPU::detectFeatures()+0x704>
c001965c:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0019662:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019668:	a8 01                	test   al,0x1
c001966a:	74 10                	je     c001967c <CPU::detectFeatures()+0x704>
c001966c:	83 e0 fe             	and    eax,0xfffffffe
c001966f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019675:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001967c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019682:	c1 e8 0e             	shr    eax,0xe
c0019685:	3c 05                	cmp    al,0x5
c0019687:	0f 85 cc 02 00 00    	jne    c0019959 <CPU::detectFeatures()+0x9e1>
c001968d:	56                   	push   esi
c001968e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019694:	83 e0 0f             	and    eax,0xf
c0019697:	50                   	push   eax
c0019698:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001969e:	66 c1 e8 06          	shr    ax,0x6
c00196a2:	0f b6 c0             	movzx  eax,al
c00196a5:	50                   	push   eax
c00196a6:	6a 05                	push   0x5
c00196a8:	e8 11 f4 ff ff       	call   c0018abe <CPU::AMD_K6_writeback(int, int, int)>
c00196ad:	e9 1f 02 00 00       	jmp    c00198d1 <CPU::detectFeatures()+0x959>
c00196b2:	8d 50 fd             	lea    edx,[eax-0x3]
c00196b5:	83 fa 01             	cmp    edx,0x1
c00196b8:	76 09                	jbe    c00196c3 <CPU::detectFeatures()+0x74b>
c00196ba:	83 f8 06             	cmp    eax,0x6
c00196bd:	0f 85 91 01 00 00    	jne    c0019854 <CPU::detectFeatures()+0x8dc>
c00196c3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196c9:	c1 ea 0e             	shr    edx,0xe
c00196cc:	80 fa 05             	cmp    dl,0x5
c00196cf:	75 7b                	jne    c001974c <CPU::detectFeatures()+0x7d4>
c00196d1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196d7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00196dc:	66 81 fa 00 01       	cmp    dx,0x100
c00196e1:	75 0c                	jne    c00196ef <CPU::detectFeatures()+0x777>
c00196e3:	51                   	push   ecx
c00196e4:	51                   	push   ecx
c00196e5:	68 3b b8 02 c0       	push   0xc002b83b
c00196ea:	e9 dc 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c00196ef:	66 81 fa 00 02       	cmp    dx,0x200
c00196f4:	75 0c                	jne    c0019702 <CPU::detectFeatures()+0x78a>
c00196f6:	52                   	push   edx
c00196f7:	52                   	push   edx
c00196f8:	68 4e b8 02 c0       	push   0xc002b84e
c00196fd:	e9 c9 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c0019702:	66 81 fa 40 02       	cmp    dx,0x240
c0019707:	75 0c                	jne    c0019715 <CPU::detectFeatures()+0x79d>
c0019709:	50                   	push   eax
c001970a:	50                   	push   eax
c001970b:	68 60 b8 02 c0       	push   0xc002b860
c0019710:	e9 b6 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c0019715:	83 f8 06             	cmp    eax,0x6
c0019718:	75 0c                	jne    c0019726 <CPU::detectFeatures()+0x7ae>
c001971a:	50                   	push   eax
c001971b:	50                   	push   eax
c001971c:	68 72 b8 02 c0       	push   0xc002b872
c0019721:	e9 a5 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c0019726:	83 f8 04             	cmp    eax,0x4
c0019729:	75 0c                	jne    c0019737 <CPU::detectFeatures()+0x7bf>
c001972b:	50                   	push   eax
c001972c:	50                   	push   eax
c001972d:	68 7e b8 02 c0       	push   0xc002b87e
c0019732:	e9 94 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c0019737:	83 f8 03             	cmp    eax,0x3
c001973a:	0f 85 19 02 00 00    	jne    c0019959 <CPU::detectFeatures()+0x9e1>
c0019740:	50                   	push   eax
c0019741:	50                   	push   eax
c0019742:	68 86 b8 02 c0       	push   0xc002b886
c0019747:	e9 7f 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c001974c:	80 fa 06             	cmp    dl,0x6
c001974f:	0f 85 db 00 00 00    	jne    c0019830 <CPU::detectFeatures()+0x8b8>
c0019755:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001975b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019760:	66 81 fa 80 01       	cmp    dx,0x180
c0019765:	75 0c                	jne    c0019773 <CPU::detectFeatures()+0x7fb>
c0019767:	50                   	push   eax
c0019768:	50                   	push   eax
c0019769:	68 91 b8 02 c0       	push   0xc002b891
c001976e:	e9 58 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c0019773:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019779:	66 f7 c1 80 ff       	test   cx,0xff80
c001977e:	75 0c                	jne    c001978c <CPU::detectFeatures()+0x814>
c0019780:	50                   	push   eax
c0019781:	50                   	push   eax
c0019782:	68 a1 b8 02 c0       	push   0xc002b8a1
c0019787:	e9 3f 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c001978c:	66 81 fa 40 02       	cmp    dx,0x240
c0019791:	75 0c                	jne    c001979f <CPU::detectFeatures()+0x827>
c0019793:	55                   	push   ebp
c0019794:	55                   	push   ebp
c0019795:	68 a8 b8 02 c0       	push   0xc002b8a8
c001979a:	e9 2c 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c001979f:	66 81 fa 80 02       	cmp    dx,0x280
c00197a4:	75 0c                	jne    c00197b2 <CPU::detectFeatures()+0x83a>
c00197a6:	57                   	push   edi
c00197a7:	57                   	push   edi
c00197a8:	68 b1 b8 02 c0       	push   0xc002b8b1
c00197ad:	e9 19 01 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c00197b2:	66 81 fa 40 03       	cmp    dx,0x340
c00197b7:	74 ed                	je     c00197a6 <CPU::detectFeatures()+0x82e>
c00197b9:	66 81 fa c0 03       	cmp    dx,0x3c0
c00197be:	75 0c                	jne    c00197cc <CPU::detectFeatures()+0x854>
c00197c0:	56                   	push   esi
c00197c1:	56                   	push   esi
c00197c2:	68 b8 b8 02 c0       	push   0xc002b8b8
c00197c7:	e9 ff 00 00 00       	jmp    c00198cb <CPU::detectFeatures()+0x953>
c00197cc:	83 f8 06             	cmp    eax,0x6
c00197cf:	0f 84 45 ff ff ff    	je     c001971a <CPU::detectFeatures()+0x7a2>
c00197d5:	83 f8 04             	cmp    eax,0x4
c00197d8:	0f 84 4d ff ff ff    	je     c001972b <CPU::detectFeatures()+0x7b3>
c00197de:	83 f8 03             	cmp    eax,0x3
c00197e1:	0f 85 72 01 00 00    	jne    c0019959 <CPU::detectFeatures()+0x9e1>
c00197e7:	51                   	push   ecx
c00197e8:	51                   	push   ecx
c00197e9:	68 c1 b8 02 c0       	push   0xc002b8c1
c00197ee:	53                   	push   ebx
c00197ef:	e8 0a ac ff ff       	call   c00143fe <Device::setName(char const*)>
c00197f4:	b1 c1                	mov    cl,0xc1
c00197f6:	88 c8                	mov    al,cl
c00197f8:	e6 22                	out    0x22,al
c00197fa:	e4 23                	in     al,0x23
c00197fc:	88 c2                	mov    dl,al
c00197fe:	88 c8                	mov    al,cl
c0019800:	e6 22                	out    0x22,al
c0019802:	88 d0                	mov    al,dl
c0019804:	83 c8 10             	or     eax,0x10
c0019807:	e6 23                	out    0x23,al
c0019809:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019810:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019813:	89 d0                	mov    eax,edx
c0019815:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001981b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001981f:	40                   	inc    eax
c0019820:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019826:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001982b:	e9 a1 00 00 00       	jmp    c00198d1 <CPU::detectFeatures()+0x959>
c0019830:	83 f8 06             	cmp    eax,0x6
c0019833:	0f 84 e1 fe ff ff    	je     c001971a <CPU::detectFeatures()+0x7a2>
c0019839:	83 f8 04             	cmp    eax,0x4
c001983c:	0f 84 e9 fe ff ff    	je     c001972b <CPU::detectFeatures()+0x7b3>
c0019842:	83 f8 03             	cmp    eax,0x3
c0019845:	0f 85 0e 01 00 00    	jne    c0019959 <CPU::detectFeatures()+0x9e1>
c001984b:	52                   	push   edx
c001984c:	52                   	push   edx
c001984d:	68 cc b8 02 c0       	push   0xc002b8cc
c0019852:	eb 77                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c0019854:	83 f8 07             	cmp    eax,0x7
c0019857:	75 09                	jne    c0019862 <CPU::detectFeatures()+0x8ea>
c0019859:	50                   	push   eax
c001985a:	50                   	push   eax
c001985b:	68 d6 b8 02 c0       	push   0xc002b8d6
c0019860:	eb 69                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c0019862:	83 f8 0a             	cmp    eax,0xa
c0019865:	75 09                	jne    c0019870 <CPU::detectFeatures()+0x8f8>
c0019867:	50                   	push   eax
c0019868:	50                   	push   eax
c0019869:	68 e1 b8 02 c0       	push   0xc002b8e1
c001986e:	eb 5b                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c0019870:	83 f8 0b             	cmp    eax,0xb
c0019873:	75 09                	jne    c001987e <CPU::detectFeatures()+0x906>
c0019875:	50                   	push   eax
c0019876:	50                   	push   eax
c0019877:	68 e9 b8 02 c0       	push   0xc002b8e9
c001987c:	eb 4d                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c001987e:	83 f8 08             	cmp    eax,0x8
c0019881:	75 09                	jne    c001988c <CPU::detectFeatures()+0x914>
c0019883:	50                   	push   eax
c0019884:	50                   	push   eax
c0019885:	68 f2 b8 02 c0       	push   0xc002b8f2
c001988a:	eb 3f                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c001988c:	83 f8 09             	cmp    eax,0x9
c001988f:	75 09                	jne    c001989a <CPU::detectFeatures()+0x922>
c0019891:	50                   	push   eax
c0019892:	50                   	push   eax
c0019893:	68 fa b8 02 c0       	push   0xc002b8fa
c0019898:	eb 31                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c001989a:	83 f8 05             	cmp    eax,0x5
c001989d:	75 09                	jne    c00198a8 <CPU::detectFeatures()+0x930>
c001989f:	50                   	push   eax
c00198a0:	50                   	push   eax
c00198a1:	68 02 b9 02 c0       	push   0xc002b902
c00198a6:	eb 23                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c00198a8:	83 f8 0c             	cmp    eax,0xc
c00198ab:	75 09                	jne    c00198b6 <CPU::detectFeatures()+0x93e>
c00198ad:	55                   	push   ebp
c00198ae:	55                   	push   ebp
c00198af:	68 10 b9 02 c0       	push   0xc002b910
c00198b4:	eb 15                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c00198b6:	83 f8 0d             	cmp    eax,0xd
c00198b9:	75 09                	jne    c00198c4 <CPU::detectFeatures()+0x94c>
c00198bb:	57                   	push   edi
c00198bc:	57                   	push   edi
c00198bd:	68 1b b9 02 c0       	push   0xc002b91b
c00198c2:	eb 07                	jmp    c00198cb <CPU::detectFeatures()+0x953>
c00198c4:	56                   	push   esi
c00198c5:	56                   	push   esi
c00198c6:	68 2f b9 02 c0       	push   0xc002b92f
c00198cb:	53                   	push   ebx
c00198cc:	e8 2d ab ff ff       	call   c00143fe <Device::setName(char const*)>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	e9 80 00 00 00       	jmp    c0019959 <CPU::detectFeatures()+0x9e1>
c00198d9:	51                   	push   ecx
c00198da:	51                   	push   ecx
c00198db:	68 7b b7 02 c0       	push   0xc002b77b
c00198e0:	57                   	push   edi
c00198e1:	e8 4e 6f fe ff       	call   c0000834 <strcpy>
c00198e6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00198f0:	e8 b9 69 fe ff       	call   c00002ae <is486>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	85 c0                	test   eax,eax
c00198fa:	74 2b                	je     c0019927 <CPU::detectFeatures()+0x9af>
c00198fc:	52                   	push   edx
c00198fd:	52                   	push   edx
c00198fe:	68 3b b9 02 c0       	push   0xc002b93b
c0019903:	53                   	push   ebx
c0019904:	e8 f5 aa ff ff       	call   c00143fe <Device::setName(char const*)>
c0019909:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019910:	0f 20 c0             	mov    eax,cr0
c0019913:	83 e0 14             	and    eax,0x14
c0019916:	83 c4 10             	add    esp,0x10
c0019919:	83 f8 04             	cmp    eax,0x4
c001991c:	75 1f                	jne    c001993d <CPU::detectFeatures()+0x9c5>
c001991e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019925:	eb 32                	jmp    c0019959 <CPU::detectFeatures()+0x9e1>
c0019927:	50                   	push   eax
c0019928:	50                   	push   eax
c0019929:	68 46 b9 02 c0       	push   0xc002b946
c001992e:	53                   	push   ebx
c001992f:	e8 ca aa ff ff       	call   c00143fe <Device::setName(char const*)>
c0019934:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001993b:	eb d3                	jmp    c0019910 <CPU::detectFeatures()+0x998>
c001993d:	e8 47 69 fe ff       	call   c0000289 <hasLegacyFPU>
c0019942:	83 e0 01             	and    eax,0x1
c0019945:	8d 14 00             	lea    edx,[eax+eax*1]
c0019948:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001994e:	83 e0 fd             	and    eax,0xfffffffd
c0019951:	09 d0                	or     eax,edx
c0019953:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019959:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019960:	83 c4 4c             	add    esp,0x4c
c0019963:	5b                   	pop    ebx
c0019964:	5e                   	pop    esi
c0019965:	5f                   	pop    edi
c0019966:	5d                   	pop    ebp
c0019967:	c3                   	ret    

c0019968 <CPU::setupSMEP()>:
c0019968:	0f 20 e0             	mov    eax,cr4
c001996b:	0d 00 00 10 00       	or     eax,0x100000
c0019970:	0f 22 e0             	mov    cr4,eax
c0019973:	c3                   	ret    

c0019974 <CPU::setupUMIP()>:
c0019974:	0f 20 e0             	mov    eax,cr4
c0019977:	80 cc 08             	or     ah,0x8
c001997a:	0f 22 e0             	mov    cr4,eax
c001997d:	c3                   	ret    

c001997e <CPU::setupTSC()>:
c001997e:	0f 20 e0             	mov    eax,cr4
c0019981:	83 c8 04             	or     eax,0x4
c0019984:	0f 22 e0             	mov    cr4,eax
c0019987:	c3                   	ret    

c0019988 <CPU::setupLargePages()>:
c0019988:	0f 20 e0             	mov    eax,cr4
c001998b:	83 c8 10             	or     eax,0x10
c001998e:	0f 22 e0             	mov    cr4,eax
c0019991:	c3                   	ret    

c0019992 <CPU::setupPAT()>:
c0019992:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0019997:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001999e:	74 2c                	je     c00199cc <CPU::setupPAT()+0x3a>
c00199a0:	53                   	push   ebx
c00199a1:	83 ec 10             	sub    esp,0x10
c00199a4:	68 77 02 00 00       	push   0x277
c00199a9:	50                   	push   eax
c00199aa:	e8 39 54 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00199af:	83 e2 f8             	and    edx,0xfffffff8
c00199b2:	83 ca 01             	or     edx,0x1
c00199b5:	52                   	push   edx
c00199b6:	50                   	push   eax
c00199b7:	68 77 02 00 00       	push   0x277
c00199bc:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c00199c2:	e8 4d 54 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c00199c7:	83 c4 28             	add    esp,0x28
c00199ca:	5b                   	pop    ebx
c00199cb:	c3                   	ret    
c00199cc:	c3                   	ret    
c00199cd:	90                   	nop

c00199ce <CPU::setupMTRR()>:
c00199ce:	c3                   	ret    
c00199cf:	90                   	nop

c00199d0 <CPU::setupGlobalPages()>:
c00199d0:	0f 20 e0             	mov    eax,cr4
c00199d3:	0c 80                	or     al,0x80
c00199d5:	0f 22 e0             	mov    cr4,eax
c00199d8:	c3                   	ret    
c00199d9:	90                   	nop

c00199da <CPU::allowUsermodeDataAccess()>:
c00199da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199de:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199e5:	74 03                	je     c00199ea <CPU::allowUsermodeDataAccess()+0x10>
c00199e7:	0f 01 cb             	stac   
c00199ea:	c3                   	ret    
c00199eb:	90                   	nop

c00199ec <CPU::prohibitUsermodeDataAccess()>:
c00199ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199f0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199f7:	74 03                	je     c00199fc <CPU::prohibitUsermodeDataAccess()+0x10>
c00199f9:	0f 01 ca             	clac   
c00199fc:	c3                   	ret    
c00199fd:	90                   	nop

c00199fe <CPU::setupSMAP()>:
c00199fe:	0f 20 e0             	mov    eax,cr4
c0019a01:	0d 00 00 20 00       	or     eax,0x200000
c0019a06:	0f 22 e0             	mov    cr4,eax
c0019a09:	eb e1                	jmp    c00199ec <CPU::prohibitUsermodeDataAccess()>
c0019a0b:	90                   	nop

c0019a0c <CPU::setupFeatures()>:
c0019a0c:	83 ec 0c             	sub    esp,0xc
c0019a0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a13:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019a1a:	74 07                	je     c0019a23 <CPU::setupFeatures()+0x17>
c0019a1c:	52                   	push   edx
c0019a1d:	e8 46 ff ff ff       	call   c0019968 <CPU::setupSMEP()>
c0019a22:	58                   	pop    eax
c0019a23:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019a2a:	74 07                	je     c0019a33 <CPU::setupFeatures()+0x27>
c0019a2c:	52                   	push   edx
c0019a2d:	e8 cc ff ff ff       	call   c00199fe <CPU::setupSMAP()>
c0019a32:	58                   	pop    eax
c0019a33:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019a3a:	74 07                	je     c0019a43 <CPU::setupFeatures()+0x37>
c0019a3c:	52                   	push   edx
c0019a3d:	e8 32 ff ff ff       	call   c0019974 <CPU::setupUMIP()>
c0019a42:	58                   	pop    eax
c0019a43:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019a4a:	74 07                	je     c0019a53 <CPU::setupFeatures()+0x47>
c0019a4c:	52                   	push   edx
c0019a4d:	e8 2c ff ff ff       	call   c001997e <CPU::setupTSC()>
c0019a52:	58                   	pop    eax
c0019a53:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019a5a:	74 07                	je     c0019a63 <CPU::setupFeatures()+0x57>
c0019a5c:	52                   	push   edx
c0019a5d:	e8 26 ff ff ff       	call   c0019988 <CPU::setupLargePages()>
c0019a62:	59                   	pop    ecx
c0019a63:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019a6a:	74 07                	je     c0019a73 <CPU::setupFeatures()+0x67>
c0019a6c:	52                   	push   edx
c0019a6d:	e8 5e ff ff ff       	call   c00199d0 <CPU::setupGlobalPages()>
c0019a72:	58                   	pop    eax
c0019a73:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019a7a:	74 0c                	je     c0019a88 <CPU::setupFeatures()+0x7c>
c0019a7c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019a80:	83 c4 0c             	add    esp,0xc
c0019a83:	e9 0a ff ff ff       	jmp    c0019992 <CPU::setupPAT()>
c0019a88:	83 c4 0c             	add    esp,0xc
c0019a8b:	c3                   	ret    

c0019a8c <CPU::open(int, int, void*)>:
c0019a8c:	57                   	push   edi
c0019a8d:	56                   	push   esi
c0019a8e:	53                   	push   ebx
c0019a8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a97:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019a9d:	83 ec 0c             	sub    esp,0xc
c0019aa0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019aa6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019aac:	50                   	push   eax
c0019aad:	e8 22 56 ff ff       	call   c000f0d4 <GDT::setup()>
c0019ab2:	83 c4 0c             	add    esp,0xc
c0019ab5:	6a 00                	push   0x0
c0019ab7:	68 ef be ad de       	push   0xdeadbeef
c0019abc:	57                   	push   edi
c0019abd:	e8 ce 79 ff ff       	call   c0011490 <TSS::setup(unsigned long, unsigned long)>
c0019ac2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ac5:	e8 a6 79 ff ff       	call   c0011470 <TSS::flush()>
c0019aca:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ad0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ad3:	e8 58 58 ff ff       	call   c000f330 <IDT::setup()>
c0019ad8:	b8 00 04 00 00       	mov    eax,0x400
c0019add:	0f 23 f8             	mov    db7,eax
c0019ae0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019aea:	e8 ee 63 ff ff       	call   c000fedd <Phys::allocatePage()>
c0019aef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019af5:	89 30                	mov    DWORD PTR [eax],esi
c0019af7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019afd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019b00:	58                   	pop    eax
c0019b01:	5a                   	pop    edx
c0019b02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b0c:	e8 69 8a ff ff       	call   c001257a <VAS::setCPUSpecific(unsigned long)>
c0019b11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b14:	e8 5f f4 ff ff       	call   c0018f78 <CPU::detectFeatures()>
c0019b19:	e8 cf bc ff ff       	call   c00157ed <setupInterruptController()>
c0019b1e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019b24:	a1 20 e4 02 c0       	mov    eax,ds:0xc002e420
c0019b29:	83 e0 10             	and    eax,0x10
c0019b2c:	83 f8 01             	cmp    eax,0x1
c0019b2f:	19 c0                	sbb    eax,eax
c0019b31:	83 e0 46             	and    eax,0x46
c0019b34:	83 c0 1e             	add    eax,0x1e
c0019b37:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b3a:	e8 bb d1 ff ff       	call   c0016cfa <setupTimer(int)>
c0019b3f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019b45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b48:	e8 bf fe ff ff       	call   c0019a0c <CPU::setupFeatures()>
c0019b4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b50:	e8 a7 f1 ff ff       	call   c0018cfc <CPU::displayFeatures()>
c0019b55:	83 c4 10             	add    esp,0x10
c0019b58:	31 c0                	xor    eax,eax
c0019b5a:	5b                   	pop    ebx
c0019b5b:	5e                   	pop    esi
c0019b5c:	5f                   	pop    edi
c0019b5d:	c3                   	ret    

c0019b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019b5e:	57                   	push   edi
c0019b5f:	56                   	push   esi
c0019b60:	53                   	push   ebx
c0019b61:	51                   	push   ecx
c0019b62:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b66:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019b69:	0f 02 c0             	lar    eax,ax
c0019b6c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019b6f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b73:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019b76:	88 ca                	mov    dl,cl
c0019b78:	c0 ea 06             	shr    dl,0x6
c0019b7b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019b7f:	89 ca                	mov    edx,ecx
c0019b81:	66 c1 ea 03          	shr    dx,0x3
c0019b85:	83 e2 07             	and    edx,0x7
c0019b88:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019b8d:	88 17                	mov    BYTE PTR [edi],dl
c0019b8f:	0f 84 a6 01 00 00    	je     c0019d3b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019b95:	83 e1 07             	and    ecx,0x7
c0019b98:	80 f9 04             	cmp    cl,0x4
c0019b9b:	0f 84 98 00 00 00    	je     c0019c39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019ba1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ba6:	0f 95 c0             	setne  al
c0019ba9:	80 f9 05             	cmp    cl,0x5
c0019bac:	0f 95 c2             	setne  dl
c0019baf:	08 c2                	or     dl,al
c0019bb1:	74 79                	je     c0019c2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019bb3:	84 c9                	test   cl,cl
c0019bb5:	75 05                	jne    c0019bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019bb7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019bba:	eb 3c                	jmp    c0019bf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bbc:	80 f9 01             	cmp    cl,0x1
c0019bbf:	75 05                	jne    c0019bc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019bc1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019bc4:	eb 32                	jmp    c0019bf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bc6:	80 f9 02             	cmp    cl,0x2
c0019bc9:	75 05                	jne    c0019bd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019bcb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bce:	eb 28                	jmp    c0019bf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bd0:	31 c0                	xor    eax,eax
c0019bd2:	80 f9 03             	cmp    cl,0x3
c0019bd5:	75 05                	jne    c0019bdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019bd7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019bda:	eb 1c                	jmp    c0019bf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bdc:	80 f9 05             	cmp    cl,0x5
c0019bdf:	75 05                	jne    c0019be6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019be1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019be4:	eb 12                	jmp    c0019bf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019be6:	80 f9 06             	cmp    cl,0x6
c0019be9:	75 05                	jne    c0019bf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019beb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019bee:	eb 08                	jmp    c0019bf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bf0:	80 f9 07             	cmp    cl,0x7
c0019bf3:	75 03                	jne    c0019bf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bf5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019bf8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019bfd:	75 10                	jne    c0019c0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019bff:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019c03:	b9 03 00 00 00       	mov    ecx,0x3
c0019c08:	01 d0                	add    eax,edx
c0019c0a:	e9 37 01 00 00       	jmp    c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c0f:	b9 02 00 00 00       	mov    ecx,0x2
c0019c14:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019c19:	0f 85 27 01 00 00    	jne    c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c1f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019c22:	b9 06 00 00 00       	mov    ecx,0x6
c0019c27:	e9 1a 01 00 00       	jmp    c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c2c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019c2f:	b9 06 00 00 00       	mov    ecx,0x6
c0019c34:	e9 0f 01 00 00       	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c39:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019c3c:	88 ca                	mov    dl,cl
c0019c3e:	c0 ea 06             	shr    dl,0x6
c0019c41:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019c45:	89 ca                	mov    edx,ecx
c0019c47:	66 c1 ea 03          	shr    dx,0x3
c0019c4b:	83 e2 07             	and    edx,0x7
c0019c4e:	80 e1 07             	and    cl,0x7
c0019c51:	75 05                	jne    c0019c58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019c53:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019c56:	eb 4c                	jmp    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c58:	80 f9 01             	cmp    cl,0x1
c0019c5b:	75 05                	jne    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019c5d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019c60:	eb 42                	jmp    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c62:	80 f9 02             	cmp    cl,0x2
c0019c65:	75 05                	jne    c0019c6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019c67:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019c6a:	eb 38                	jmp    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c6c:	80 f9 03             	cmp    cl,0x3
c0019c6f:	75 05                	jne    c0019c76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019c71:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019c74:	eb 2e                	jmp    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c76:	80 f9 04             	cmp    cl,0x4
c0019c79:	75 12                	jne    c0019c8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019c7b:	f6 c4 60             	test   ah,0x60
c0019c7e:	75 08                	jne    c0019c88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019c80:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019c83:	8d 78 14             	lea    edi,[eax+0x14]
c0019c86:	eb 1c                	jmp    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c88:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019c8b:	eb 17                	jmp    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c8d:	80 f9 05             	cmp    cl,0x5
c0019c90:	75 05                	jne    c0019c97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019c92:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019c95:	eb 0d                	jmp    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c97:	80 f9 06             	cmp    cl,0x6
c0019c9a:	75 05                	jne    c0019ca1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c9c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c9f:	eb 03                	jmp    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ca1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019ca4:	84 d2                	test   dl,dl
c0019ca6:	75 05                	jne    c0019cad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019ca8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cab:	eb 3c                	jmp    c0019ce9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cad:	80 fa 01             	cmp    dl,0x1
c0019cb0:	75 05                	jne    c0019cb7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019cb2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019cb5:	eb 32                	jmp    c0019ce9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cb7:	80 fa 02             	cmp    dl,0x2
c0019cba:	75 05                	jne    c0019cc1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019cbc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cbf:	eb 28                	jmp    c0019ce9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cc1:	80 fa 03             	cmp    dl,0x3
c0019cc4:	75 05                	jne    c0019ccb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019cc6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cc9:	eb 1e                	jmp    c0019ce9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ccb:	31 c0                	xor    eax,eax
c0019ccd:	80 fa 04             	cmp    dl,0x4
c0019cd0:	74 17                	je     c0019ce9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cd2:	80 fa 05             	cmp    dl,0x5
c0019cd5:	75 05                	jne    c0019cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019cd7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cda:	eb 0d                	jmp    c0019ce9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cdc:	80 fa 06             	cmp    dl,0x6
c0019cdf:	75 05                	jne    c0019ce6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ce1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ce4:	eb 03                	jmp    c0019ce9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ce6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ce9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cee:	0f 94 c2             	sete   dl
c0019cf1:	80 f9 05             	cmp    cl,0x5
c0019cf4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019cf8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019cfd:	d3 e0                	shl    eax,cl
c0019cff:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019d03:	74 0a                	je     c0019d0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019d05:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d08:	b9 07 00 00 00       	mov    ecx,0x7
c0019d0d:	eb 37                	jmp    c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d0f:	01 f8                	add    eax,edi
c0019d11:	b9 03 00 00 00       	mov    ecx,0x3
c0019d16:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d1b:	74 2b                	je     c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d1d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d22:	75 0d                	jne    c0019d31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019d24:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019d28:	01 c8                	add    eax,ecx
c0019d2a:	b9 04 00 00 00       	mov    ecx,0x4
c0019d2f:	eb 17                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d31:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d34:	b9 07 00 00 00       	mov    ecx,0x7
c0019d39:	eb 0d                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d3b:	b9 02 00 00 00       	mov    ecx,0x2
c0019d40:	b2 01                	mov    dl,0x1
c0019d42:	31 c0                	xor    eax,eax
c0019d44:	eb 02                	jmp    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d46:	31 d2                	xor    edx,edx
c0019d48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d4c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019d4e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d52:	88 11                	mov    BYTE PTR [ecx],dl
c0019d54:	5a                   	pop    edx
c0019d55:	5b                   	pop    ebx
c0019d56:	5e                   	pop    esi
c0019d57:	5f                   	pop    edi
c0019d58:	c3                   	ret    

c0019d59 <Krnl::smpEntry()>:
c0019d59:	eb fe                	jmp    c0019d59 <Krnl::smpEntry()>

c0019d5b <Krnl::startCPU(int)>:
c0019d5b:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0019d60:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d67:	0f 84 36 01 00 00    	je     c0019ea3 <Krnl::startCPU(int)+0x148>
c0019d6d:	53                   	push   ebx
c0019d6e:	83 ec 08             	sub    esp,0x8
c0019d71:	e8 46 3f 00 00       	call   c001dcbc <lockScheduler()>
c0019d76:	52                   	push   edx
c0019d77:	52                   	push   edx
c0019d78:	6a 1b                	push   0x1b
c0019d7a:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0019d80:	e8 63 50 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019d85:	59                   	pop    ecx
c0019d86:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019d8b:	89 c3                	mov    ebx,eax
c0019d8d:	58                   	pop    eax
c0019d8e:	53                   	push   ebx
c0019d8f:	68 80 b9 02 c0       	push   0xc002b980
c0019d94:	e8 5d 90 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0019d99:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019da7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019db1:	c1 e0 18             	shl    eax,0x18
c0019db4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019dba:	83 c4 10             	add    esp,0x10
c0019dbd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019dc3:	09 c2                	or     edx,eax
c0019dc5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019dcb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019dd1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019dd7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ddd:	80 cd c5             	or     ch,0xc5
c0019de0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019de6:	f3 90                	pause  
c0019de8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dea:	0f ba e1 0c          	bt     ecx,0xc
c0019dee:	72 f6                	jb     c0019de6 <Krnl::startCPU(int)+0x8b>
c0019df0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019df6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019dfc:	09 c1                	or     ecx,eax
c0019dfe:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e04:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e0a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e10:	80 cd 85             	or     ch,0x85
c0019e13:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e19:	f3 90                	pause  
c0019e1b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e1d:	0f ba e1 0c          	bt     ecx,0xc
c0019e21:	72 f6                	jb     c0019e19 <Krnl::startCPU(int)+0xbe>
c0019e23:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e2d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e33:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e39:	09 c1                	or     ecx,eax
c0019e3b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e41:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e47:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019e4d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019e53:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e59:	f3 90                	pause  
c0019e5b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e5d:	0f ba e1 0c          	bt     ecx,0xc
c0019e61:	72 f6                	jb     c0019e59 <Krnl::startCPU(int)+0xfe>
c0019e63:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e6d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e73:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e79:	09 c8                	or     eax,ecx
c0019e7b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019e81:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019e87:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019e8c:	0d 02 06 00 00       	or     eax,0x602
c0019e91:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019e97:	f3 90                	pause  
c0019e99:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e9b:	0f ba e0 0c          	bt     eax,0xc
c0019e9f:	72 f6                	jb     c0019e97 <Krnl::startCPU(int)+0x13c>
c0019ea1:	eb fe                	jmp    c0019ea1 <Krnl::startCPU(int)+0x146>
c0019ea3:	c3                   	ret    

c0019ea4 <Krnl::startCPUs()>:
c0019ea4:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0019ea9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019eaf:	88 c2                	mov    dl,al
c0019eb1:	83 e2 0a             	and    edx,0xa
c0019eb4:	80 fa 0a             	cmp    dl,0xa
c0019eb7:	75 09                	jne    c0019ec2 <Krnl::startCPUs()+0x1e>
c0019eb9:	a8 01                	test   al,0x1
c0019ebb:	74 05                	je     c0019ec2 <Krnl::startCPUs()+0x1e>
c0019ebd:	e9 d9 62 fe ff       	jmp    c000019b <prepareTramp>
c0019ec2:	c3                   	ret    
c0019ec3:	90                   	nop

c0019ec4 <EnvVarContainer::getEnv(char const*)>:
c0019ec4:	57                   	push   edi
c0019ec5:	56                   	push   esi
c0019ec6:	53                   	push   ebx
c0019ec7:	31 db                	xor    ebx,ebx
c0019ec9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ecd:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019ecf:	7e 2b                	jle    c0019efc <EnvVarContainer::getEnv(char const*)+0x38>
c0019ed1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019ed8:	50                   	push   eax
c0019ed9:	50                   	push   eax
c0019eda:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019edd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019ee0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019ee4:	e8 d7 69 fe ff       	call   c00008c0 <strcmp>
c0019ee9:	83 c4 10             	add    esp,0x10
c0019eec:	85 c0                	test   eax,eax
c0019eee:	75 09                	jne    c0019ef9 <EnvVarContainer::getEnv(char const*)+0x35>
c0019ef0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ef3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019ef7:	eb 05                	jmp    c0019efe <EnvVarContainer::getEnv(char const*)+0x3a>
c0019ef9:	43                   	inc    ebx
c0019efa:	eb d1                	jmp    c0019ecd <EnvVarContainer::getEnv(char const*)+0x9>
c0019efc:	31 c0                	xor    eax,eax
c0019efe:	5b                   	pop    ebx
c0019eff:	5e                   	pop    esi
c0019f00:	5f                   	pop    edi
c0019f01:	c3                   	ret    

c0019f02 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019f02:	57                   	push   edi
c0019f03:	56                   	push   esi
c0019f04:	53                   	push   ebx
c0019f05:	83 ec 1c             	sub    esp,0x1c
c0019f08:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019f0c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019f10:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019f14:	57                   	push   edi
c0019f15:	e8 7a 68 fe ff       	call   c0000794 <strlen>
c0019f1a:	40                   	inc    eax
c0019f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f1e:	e8 1d 59 ff ff       	call   c000f840 <malloc>
c0019f23:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f2a:	e8 65 68 fe ff       	call   c0000794 <strlen>
c0019f2f:	40                   	inc    eax
c0019f30:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f33:	e8 08 59 ff ff       	call   c000f840 <malloc>
c0019f38:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f3f:	e8 50 68 fe ff       	call   c0000794 <strlen>
c0019f44:	83 c4 0c             	add    esp,0xc
c0019f47:	40                   	inc    eax
c0019f48:	50                   	push   eax
c0019f49:	6a 00                	push   0x0
c0019f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f4f:	e8 24 68 fe ff       	call   c0000778 <memset>
c0019f54:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f57:	e8 38 68 fe ff       	call   c0000794 <strlen>
c0019f5c:	83 c4 0c             	add    esp,0xc
c0019f5f:	40                   	inc    eax
c0019f60:	50                   	push   eax
c0019f61:	57                   	push   edi
c0019f62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f66:	e8 d9 67 fe ff       	call   c0000744 <memcpy>
c0019f6b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f6e:	e8 21 68 fe ff       	call   c0000794 <strlen>
c0019f73:	83 c4 0c             	add    esp,0xc
c0019f76:	40                   	inc    eax
c0019f77:	50                   	push   eax
c0019f78:	6a 00                	push   0x0
c0019f7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f7e:	e8 f5 67 fe ff       	call   c0000778 <memset>
c0019f83:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f86:	e8 09 68 fe ff       	call   c0000794 <strlen>
c0019f8b:	83 c4 0c             	add    esp,0xc
c0019f8e:	40                   	inc    eax
c0019f8f:	50                   	push   eax
c0019f90:	56                   	push   esi
c0019f91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f95:	e8 aa 67 fe ff       	call   c0000744 <memcpy>
c0019f9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f9c:	40                   	inc    eax
c0019f9d:	89 03                	mov    DWORD PTR [ebx],eax
c0019f9f:	c1 e0 03             	shl    eax,0x3
c0019fa2:	5a                   	pop    edx
c0019fa3:	59                   	pop    ecx
c0019fa4:	50                   	push   eax
c0019fa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019fa8:	e8 7f 58 ff ff       	call   c000f82c <realloc>
c0019fad:	83 c4 0c             	add    esp,0xc
c0019fb0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019fb3:	6a 08                	push   0x8
c0019fb5:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019fb9:	52                   	push   edx
c0019fba:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fbc:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019fc0:	50                   	push   eax
c0019fc1:	e8 7e 67 fe ff       	call   c0000744 <memcpy>
c0019fc6:	83 c4 20             	add    esp,0x20
c0019fc9:	5b                   	pop    ebx
c0019fca:	5e                   	pop    esi
c0019fcb:	5f                   	pop    edi
c0019fcc:	c3                   	ret    
c0019fcd:	90                   	nop

c0019fce <EnvVarContainer::deleteEnv(char const*)>:
c0019fce:	c3                   	ret    
c0019fcf:	90                   	nop

c0019fd0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019fd0:	55                   	push   ebp
c0019fd1:	57                   	push   edi
c0019fd2:	56                   	push   esi
c0019fd3:	53                   	push   ebx
c0019fd4:	81 ec 38 01 00 00    	sub    esp,0x138
c0019fda:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019fe1:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019fe8:	68 14 01 00 00       	push   0x114
c0019fed:	e8 4e 58 ff ff       	call   c000f840 <malloc>
c0019ff2:	83 c4 0c             	add    esp,0xc
c0019ff5:	89 c7                	mov    edi,eax
c0019ff7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019ffa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a001:	50                   	push   eax
c001a002:	e8 47 93 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001a007:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a00a:	e8 11 96 ff ff       	call   c0013620 <File::exists()>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	84 c0                	test   al,al
c001a014:	75 31                	jne    c001a047 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a016:	51                   	push   ecx
c001a017:	51                   	push   ecx
c001a018:	6a 12                	push   0x12
c001a01a:	57                   	push   edi
c001a01b:	e8 92 93 ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c001a020:	8b 07                	mov    eax,DWORD PTR [edi]
c001a022:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a025:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a028:	e8 67 67 fe ff       	call   c0000794 <strlen>
c001a02d:	5a                   	pop    edx
c001a02e:	31 d2                	xor    edx,edx
c001a030:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a034:	51                   	push   ecx
c001a035:	55                   	push   ebp
c001a036:	52                   	push   edx
c001a037:	50                   	push   eax
c001a038:	57                   	push   edi
c001a039:	ff d3                	call   ebx
c001a03b:	83 c4 14             	add    esp,0x14
c001a03e:	57                   	push   edi
c001a03f:	e8 cc 93 ff ff       	call   c0013410 <File::close()>
c001a044:	83 c4 10             	add    esp,0x10
c001a047:	31 db                	xor    ebx,ebx
c001a049:	50                   	push   eax
c001a04a:	31 ed                	xor    ebp,ebp
c001a04c:	68 00 01 00 00       	push   0x100
c001a051:	6a 00                	push   0x0
c001a053:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a057:	50                   	push   eax
c001a058:	e8 1b 67 fe ff       	call   c0000778 <memset>
c001a05d:	58                   	pop    eax
c001a05e:	5a                   	pop    edx
c001a05f:	6a 01                	push   0x1
c001a061:	57                   	push   edi
c001a062:	e8 4b 93 ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	83 ec 0c             	sub    esp,0xc
c001a06d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a06f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a073:	51                   	push   ecx
c001a074:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a078:	52                   	push   edx
c001a079:	6a 00                	push   0x0
c001a07b:	6a 01                	push   0x1
c001a07d:	57                   	push   edi
c001a07e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a081:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a085:	83 c4 20             	add    esp,0x20
c001a088:	3c 0d                	cmp    al,0xd
c001a08a:	0f 84 12 01 00 00    	je     c001a1a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a090:	85 db                	test   ebx,ebx
c001a092:	0f 84 fd 00 00 00    	je     c001a195 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a098:	3c 0a                	cmp    al,0xa
c001a09a:	74 13                	je     c001a0af <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a09c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0a1:	74 0c                	je     c001a0af <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a0a3:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a0a9:	0f 8e e6 00 00 00    	jle    c001a195 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a0af:	83 ec 0c             	sub    esp,0xc
c001a0b2:	8d 53 01             	lea    edx,[ebx+0x1]
c001a0b5:	29 dd                	sub    ebp,ebx
c001a0b7:	52                   	push   edx
c001a0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a0bc:	e8 7f 57 ff ff       	call   c000f840 <malloc>
c001a0c1:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a0c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a0c8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a0cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a0cf:	e8 6c 57 ff ff       	call   c000f840 <malloc>
c001a0d4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a0d8:	83 c4 0c             	add    esp,0xc
c001a0db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0df:	52                   	push   edx
c001a0e0:	6a 00                	push   0x0
c001a0e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0e6:	e8 8d 66 fe ff       	call   c0000778 <memset>
c001a0eb:	83 c4 0c             	add    esp,0xc
c001a0ee:	53                   	push   ebx
c001a0ef:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a0f3:	55                   	push   ebp
c001a0f4:	01 eb                	add    ebx,ebp
c001a0f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0fa:	e8 45 66 fe ff       	call   c0000744 <memcpy>
c001a0ff:	83 c4 0c             	add    esp,0xc
c001a102:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a106:	51                   	push   ecx
c001a107:	6a 00                	push   0x0
c001a109:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a10d:	e8 66 66 fe ff       	call   c0000778 <memset>
c001a112:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a115:	e8 7a 66 fe ff       	call   c0000794 <strlen>
c001a11a:	83 c4 0c             	add    esp,0xc
c001a11d:	50                   	push   eax
c001a11e:	53                   	push   ebx
c001a11f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a123:	e8 1c 66 fe ff       	call   c0000744 <memcpy>
c001a128:	5b                   	pop    ebx
c001a129:	58                   	pop    eax
c001a12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a12e:	68 91 b9 02 c0       	push   0xc002b991
c001a133:	e8 be 8c ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001a138:	8b 06                	mov    eax,DWORD PTR [esi]
c001a13a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a13d:	40                   	inc    eax
c001a13e:	83 c4 10             	add    esp,0x10
c001a141:	89 06                	mov    DWORD PTR [esi],eax
c001a143:	85 d2                	test   edx,edx
c001a145:	75 0c                	jne    c001a153 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a147:	83 ec 0c             	sub    esp,0xc
c001a14a:	6a 08                	push   0x8
c001a14c:	e8 ef 56 ff ff       	call   c000f840 <malloc>
c001a151:	eb 0c                	jmp    c001a15f <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a153:	c1 e0 03             	shl    eax,0x3
c001a156:	51                   	push   ecx
c001a157:	51                   	push   ecx
c001a158:	50                   	push   eax
c001a159:	52                   	push   edx
c001a15a:	e8 cd 56 ff ff       	call   c000f82c <realloc>
c001a15f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a162:	83 c4 10             	add    esp,0x10
c001a165:	31 db                	xor    ebx,ebx
c001a167:	52                   	push   edx
c001a168:	6a 08                	push   0x8
c001a16a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a16e:	50                   	push   eax
c001a16f:	8b 16                	mov    edx,DWORD PTR [esi]
c001a171:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a174:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a178:	50                   	push   eax
c001a179:	e8 c6 65 fe ff       	call   c0000744 <memcpy>
c001a17e:	83 c4 0c             	add    esp,0xc
c001a181:	68 00 01 00 00       	push   0x100
c001a186:	6a 00                	push   0x0
c001a188:	55                   	push   ebp
c001a189:	31 ed                	xor    ebp,ebp
c001a18b:	e8 e8 65 fe ff       	call   c0000778 <memset>
c001a190:	83 c4 10             	add    esp,0x10
c001a193:	eb 0d                	jmp    c001a1a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a195:	3c 3d                	cmp    al,0x3d
c001a197:	74 07                	je     c001a1a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a199:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a19d:	45                   	inc    ebp
c001a19e:	eb 02                	jmp    c001a1a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1a0:	89 eb                	mov    ebx,ebp
c001a1a2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1a7:	0f 85 bd fe ff ff    	jne    c001a06a <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a1ad:	50                   	push   eax
c001a1ae:	50                   	push   eax
c001a1af:	ff 36                	push   DWORD PTR [esi]
c001a1b1:	68 9f b9 02 c0       	push   0xc002b99f
c001a1b6:	e8 3b 8c ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001a1bb:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a1c1:	5b                   	pop    ebx
c001a1c2:	5e                   	pop    esi
c001a1c3:	5f                   	pop    edi
c001a1c4:	5d                   	pop    ebp
c001a1c5:	c3                   	ret    

c001a1c6 <EnvVarContainer::__loadSystem()>:
c001a1c6:	83 ec 10             	sub    esp,0x10
c001a1c9:	68 40 d9 02 c0       	push   0xc002d940
c001a1ce:	68 ca b9 02 c0       	push   0xc002b9ca
c001a1d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1d7:	e8 f4 fd ff ff       	call   c0019fd0 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a1dc:	83 c4 1c             	add    esp,0x1c
c001a1df:	c3                   	ret    

c001a1e0 <EnvVarContainer::__loadUser()>:
c001a1e0:	c3                   	ret    
c001a1e1:	90                   	nop

c001a1e2 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a1e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a1ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a1f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a202:	90                   	nop
c001a203:	c3                   	ret    

c001a204 <EnvVarContainer::~EnvVarContainer()>:
c001a204:	83 ec 0c             	sub    esp,0xc
c001a207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a20b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a20e:	85 c0                	test   eax,eax
c001a210:	74 1d                	je     c001a22f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a216:	8b 00                	mov    eax,DWORD PTR [eax]
c001a218:	85 c0                	test   eax,eax
c001a21a:	74 13                	je     c001a22f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a220:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a223:	83 ec 0c             	sub    esp,0xc
c001a226:	50                   	push   eax
c001a227:	e8 24 56 ff ff       	call   c000f850 <free>
c001a22c:	83 c4 10             	add    esp,0x10
c001a22f:	90                   	nop
c001a230:	83 c4 0c             	add    esp,0xc
c001a233:	c3                   	ret    

c001a234 <Krnl::getEnv(Process*, char const*)>:
c001a234:	53                   	push   ebx
c001a235:	83 ec 08             	sub    esp,0x8
c001a238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a23c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a240:	39 05 74 19 03 c0    	cmp    DWORD PTR ds:0xc0031974,eax
c001a246:	74 04                	je     c001a24c <Krnl::getEnv(Process*, char const*)+0x18>
c001a248:	85 c0                	test   eax,eax
c001a24a:	75 0b                	jne    c001a257 <Krnl::getEnv(Process*, char const*)+0x23>
c001a24c:	a1 54 0f 03 c0       	mov    eax,ds:0xc0030f54
c001a251:	85 c0                	test   eax,eax
c001a253:	75 19                	jne    c001a26e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a255:	eb 27                	jmp    c001a27e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a257:	52                   	push   edx
c001a258:	52                   	push   edx
c001a259:	53                   	push   ebx
c001a25a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a260:	e8 5f fc ff ff       	call   c0019ec4 <EnvVarContainer::getEnv(char const*)>
c001a265:	83 c4 10             	add    esp,0x10
c001a268:	85 c0                	test   eax,eax
c001a26a:	75 28                	jne    c001a294 <Krnl::getEnv(Process*, char const*)+0x60>
c001a26c:	eb de                	jmp    c001a24c <Krnl::getEnv(Process*, char const*)+0x18>
c001a26e:	52                   	push   edx
c001a26f:	52                   	push   edx
c001a270:	53                   	push   ebx
c001a271:	50                   	push   eax
c001a272:	e8 4d fc ff ff       	call   c0019ec4 <EnvVarContainer::getEnv(char const*)>
c001a277:	83 c4 10             	add    esp,0x10
c001a27a:	85 c0                	test   eax,eax
c001a27c:	75 16                	jne    c001a294 <Krnl::getEnv(Process*, char const*)+0x60>
c001a27e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a282:	a1 58 0f 03 c0       	mov    eax,ds:0xc0030f58
c001a287:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a28b:	83 c4 08             	add    esp,0x8
c001a28e:	5b                   	pop    ebx
c001a28f:	e9 30 fc ff ff       	jmp    c0019ec4 <EnvVarContainer::getEnv(char const*)>
c001a294:	83 c4 08             	add    esp,0x8
c001a297:	5b                   	pop    ebx
c001a298:	c3                   	ret    

c001a299 <Krnl::setEnvSystem(char const*, char const*)>:
c001a299:	83 ec 10             	sub    esp,0x10
c001a29c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2a4:	ff 35 58 0f 03 c0    	push   DWORD PTR ds:0xc0030f58
c001a2aa:	e8 53 fc ff ff       	call   c0019f02 <EnvVarContainer::setEnv(char const*, char const*)>
c001a2af:	83 c4 1c             	add    esp,0x1c
c001a2b2:	c3                   	ret    

c001a2b3 <Krnl::setEnvUser(char const*, char const*)>:
c001a2b3:	a1 54 0f 03 c0       	mov    eax,ds:0xc0030f54
c001a2b8:	85 c0                	test   eax,eax
c001a2ba:	74 15                	je     c001a2d1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a2bc:	83 ec 10             	sub    esp,0x10
c001a2bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2c7:	50                   	push   eax
c001a2c8:	e8 35 fc ff ff       	call   c0019f02 <EnvVarContainer::setEnv(char const*, char const*)>
c001a2cd:	83 c4 1c             	add    esp,0x1c
c001a2d0:	c3                   	ret    
c001a2d1:	c3                   	ret    

c001a2d2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a2d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a2dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2e0:	e9 1d fc ff ff       	jmp    c0019f02 <EnvVarContainer::setEnv(char const*, char const*)>

c001a2e5 <Krnl::deleteEnvSystem(char const*)>:
c001a2e5:	c3                   	ret    

c001a2e6 <Krnl::deleteEnvUser(char const*)>:
c001a2e6:	c3                   	ret    

c001a2e7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a2e7:	c3                   	ret    

c001a2e8 <Krnl::newProcessEnv(Process*)>:
c001a2e8:	83 ec 28             	sub    esp,0x28
c001a2eb:	6a 0c                	push   0xc
c001a2ed:	e8 4e 55 ff ff       	call   c000f840 <malloc>
c001a2f2:	5a                   	pop    edx
c001a2f3:	59                   	pop    ecx
c001a2f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2f8:	50                   	push   eax
c001a2f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2fd:	e8 e0 fe ff ff       	call   c001a1e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a306:	83 c4 2c             	add    esp,0x2c
c001a309:	c3                   	ret    

c001a30a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a30a:	56                   	push   esi
c001a30b:	53                   	push   ebx
c001a30c:	83 ec 10             	sub    esp,0x10
c001a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a313:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a319:	6a 0c                	push   0xc
c001a31b:	e8 20 55 ff ff       	call   c000f840 <malloc>
c001a320:	89 c3                	mov    ebx,eax
c001a322:	58                   	pop    eax
c001a323:	5a                   	pop    edx
c001a324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a328:	53                   	push   ebx
c001a329:	e8 b4 fe ff ff       	call   c001a1e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a32e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a330:	89 03                	mov    DWORD PTR [ebx],eax
c001a332:	c1 e0 03             	shl    eax,0x3
c001a335:	89 04 24             	mov    DWORD PTR [esp],eax
c001a338:	e8 03 55 ff ff       	call   c000f840 <malloc>
c001a33d:	83 c4 0c             	add    esp,0xc
c001a340:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a343:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a345:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a34c:	52                   	push   edx
c001a34d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a350:	50                   	push   eax
c001a351:	e8 ee 63 fe ff       	call   c0000744 <memcpy>
c001a356:	89 d8                	mov    eax,ebx
c001a358:	83 c4 14             	add    esp,0x14
c001a35b:	5b                   	pop    ebx
c001a35c:	5e                   	pop    esi
c001a35d:	c3                   	ret    

c001a35e <Krnl::loadSystemEnv()>:
c001a35e:	53                   	push   ebx
c001a35f:	83 ec 14             	sub    esp,0x14
c001a362:	6a 0c                	push   0xc
c001a364:	e8 d7 54 ff ff       	call   c000f840 <malloc>
c001a369:	89 c3                	mov    ebx,eax
c001a36b:	58                   	pop    eax
c001a36c:	5a                   	pop    edx
c001a36d:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001a373:	53                   	push   ebx
c001a374:	e8 69 fe ff ff       	call   c001a1e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a379:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a37c:	89 1d 58 0f 03 c0    	mov    DWORD PTR ds:0xc0030f58,ebx
c001a382:	e8 3f fe ff ff       	call   c001a1c6 <EnvVarContainer::__loadSystem()>
c001a387:	83 c4 18             	add    esp,0x18
c001a38a:	5b                   	pop    ebx
c001a38b:	c3                   	ret    

c001a38c <Krnl::loadUserEnv()>:
c001a38c:	53                   	push   ebx
c001a38d:	83 ec 14             	sub    esp,0x14
c001a390:	6a 0c                	push   0xc
c001a392:	e8 a9 54 ff ff       	call   c000f840 <malloc>
c001a397:	89 c3                	mov    ebx,eax
c001a399:	58                   	pop    eax
c001a39a:	5a                   	pop    edx
c001a39b:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001a3a1:	53                   	push   ebx
c001a3a2:	e8 3b fe ff ff       	call   c001a1e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3a7:	89 1d 54 0f 03 c0    	mov    DWORD PTR ds:0xc0030f54,ebx
c001a3ad:	83 c4 18             	add    esp,0x18
c001a3b0:	5b                   	pop    ebx
c001a3b1:	c3                   	ret    

c001a3b2 <Krnl::flushEnv()>:
c001a3b2:	c3                   	ret    

c001a3b3 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a3b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b7:	8b 15 54 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f54
c001a3bd:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a3c3:	a1 58 0f 03 c0       	mov    eax,ds:0xc0030f58
c001a3c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3ca:	03 01                	add    eax,DWORD PTR [ecx]
c001a3cc:	85 d2                	test   edx,edx
c001a3ce:	74 02                	je     c001a3d2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a3d0:	03 02                	add    eax,DWORD PTR [edx]
c001a3d2:	c3                   	ret    

c001a3d3 <Krnl::getProcessEnvPair(Process*, int)>:
c001a3d3:	57                   	push   edi
c001a3d4:	8b 0d 54 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f54
c001a3da:	56                   	push   esi
c001a3db:	85 c9                	test   ecx,ecx
c001a3dd:	53                   	push   ebx
c001a3de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3e6:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a3ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3f0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3f2:	75 47                	jne    c001a43b <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a3f4:	39 c3                	cmp    ebx,eax
c001a3f6:	7c 47                	jl     c001a43f <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a3f8:	8b 15 58 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f58
c001a3fe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a400:	01 c1                	add    ecx,eax
c001a402:	39 d9                	cmp    ecx,ebx
c001a404:	7e 6c                	jle    c001a472 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a406:	51                   	push   ecx
c001a407:	89 d9                	mov    ecx,ebx
c001a409:	29 c1                	sub    ecx,eax
c001a40b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a40e:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a412:	53                   	push   ebx
c001a413:	68 ec b9 02 c0       	push   0xc002b9ec
c001a418:	e8 d9 89 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001a41d:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a423:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a425:	a1 58 0f 03 c0       	mov    eax,ds:0xc0030f58
c001a42a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a42d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a431:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a434:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a437:	89 06                	mov    DWORD PTR [esi],eax
c001a439:	eb 51                	jmp    c001a48c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a43b:	39 c3                	cmp    ebx,eax
c001a43d:	7d 05                	jge    c001a444 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a43f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a442:	eb 20                	jmp    c001a464 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a444:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a446:	8d 14 07             	lea    edx,[edi+eax*1]
c001a449:	39 da                	cmp    edx,ebx
c001a44b:	7e 04                	jle    c001a451 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a44d:	29 c3                	sub    ebx,eax
c001a44f:	eb 10                	jmp    c001a461 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a451:	8b 0d 58 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f58
c001a457:	03 11                	add    edx,DWORD PTR [ecx]
c001a459:	39 da                	cmp    edx,ebx
c001a45b:	7e 15                	jle    c001a472 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a45d:	29 c3                	sub    ebx,eax
c001a45f:	29 fb                	sub    ebx,edi
c001a461:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a464:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a468:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a46b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a46e:	89 06                	mov    DWORD PTR [esi],eax
c001a470:	eb 1d                	jmp    c001a48f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a472:	83 ec 0c             	sub    esp,0xc
c001a475:	68 00 ba 02 c0       	push   0xc002ba00
c001a47a:	e8 18 00 00 00       	call   c001a497 <Krnl::panic(char const*)>
c001a47f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a485:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a48c:	83 c4 10             	add    esp,0x10
c001a48f:	89 f0                	mov    eax,esi
c001a491:	5b                   	pop    ebx
c001a492:	5e                   	pop    esi
c001a493:	5f                   	pop    edi
c001a494:	c2 04 00             	ret    0x4

c001a497 <Krnl::panic(char const*)>:
c001a497:	55                   	push   ebp
c001a498:	89 e5                	mov    ebp,esp
c001a49a:	53                   	push   ebx
c001a49b:	83 ec 0c             	sub    esp,0xc
c001a49e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a4a1:	fa                   	cli    
c001a4a2:	c6 05 64 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f64,0x1
c001a4a9:	53                   	push   ebx
c001a4aa:	c6 05 44 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d344,0x0
c001a4b1:	68 1a ba 02 c0       	push   0xc002ba1a
c001a4b6:	e8 3b 89 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001a4bb:	58                   	pop    eax
c001a4bc:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a4c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4c7:	e8 05 68 ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c001a4cc:	83 c4 0c             	add    esp,0xc
c001a4cf:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a4d4:	6a 01                	push   0x1
c001a4d6:	6a 0f                	push   0xf
c001a4d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4de:	e8 1f 62 ff ff       	call   c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a4e3:	58                   	pop    eax
c001a4e4:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a4e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4ef:	e8 7e 6a ff ff       	call   c0010f72 <VgaText::clearScreen()>
c001a4f4:	58                   	pop    eax
c001a4f5:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a4fa:	5a                   	pop    edx
c001a4fb:	68 33 ba 02 c0       	push   0xc002ba33
c001a500:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a506:	e8 e5 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a50b:	59                   	pop    ecx
c001a50c:	58                   	pop    eax
c001a50d:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a512:	68 d8 ba 02 c0       	push   0xc002bad8
c001a517:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a51d:	e8 ce 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a522:	58                   	pop    eax
c001a523:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a528:	5a                   	pop    edx
c001a529:	68 4f ba 02 c0       	push   0xc002ba4f
c001a52e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a534:	e8 b7 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a539:	59                   	pop    ecx
c001a53a:	58                   	pop    eax
c001a53b:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a540:	53                   	push   ebx
c001a541:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a547:	e8 a4 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a54c:	58                   	pop    eax
c001a54d:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a552:	5a                   	pop    edx
c001a553:	68 6f ba 02 c0       	push   0xc002ba6f
c001a558:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a55e:	e8 8d 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a563:	a1 60 0f 03 c0       	mov    eax,ds:0xc0030f60
c001a568:	83 c4 10             	add    esp,0x10
c001a56b:	85 c0                	test   eax,eax
c001a56d:	74 02                	je     c001a571 <Krnl::panic(char const*)+0xda>
c001a56f:	ff d0                	call   eax
c001a571:	83 ec 0c             	sub    esp,0xc
c001a574:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a577:	e8 47 30 00 00       	call   c001d5c3 <Thr::getDriverNameFromAddress(unsigned long)>
c001a57c:	83 c4 10             	add    esp,0x10
c001a57f:	89 c3                	mov    ebx,eax
c001a581:	85 c0                	test   eax,eax
c001a583:	0f 84 50 02 00 00    	je     c001a7d9 <Krnl::panic(char const*)+0x342>
c001a589:	83 ec 08             	sub    esp,0x8
c001a58c:	8b 15 74 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031974
c001a592:	68 14 bb 02 c0       	push   0xc002bb14
c001a597:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a59d:	e8 4e 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a5a2:	58                   	pop    eax
c001a5a3:	5a                   	pop    edx
c001a5a4:	8b 15 74 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031974
c001a5aa:	68 4f ba 02 c0       	push   0xc002ba4f
c001a5af:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a5b5:	e8 36 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a5ba:	59                   	pop    ecx
c001a5bb:	58                   	pop    eax
c001a5bc:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a5c1:	53                   	push   ebx
c001a5c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5c8:	e8 23 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a5cd:	83 c4 10             	add    esp,0x10
c001a5d0:	83 ec 08             	sub    esp,0x8
c001a5d3:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a5d8:	68 6e ba 02 c0       	push   0xc002ba6e
c001a5dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e3:	e8 08 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a5e8:	58                   	pop    eax
c001a5e9:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a5ee:	5a                   	pop    edx
c001a5ef:	68 6c bb 02 c0       	push   0xc002bb6c
c001a5f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5fa:	e8 f1 6a ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a5ff:	59                   	pop    ecx
c001a600:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a605:	5b                   	pop    ebx
c001a606:	68 ac bb 02 c0       	push   0xc002bbac
c001a60b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a611:	e8 da 6a ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a616:	58                   	pop    eax
c001a617:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a61c:	5a                   	pop    edx
c001a61d:	68 5a ba 02 c0       	push   0xc002ba5a
c001a622:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a628:	e8 c3 6a ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a62d:	59                   	pop    ecx
c001a62e:	5b                   	pop    ebx
c001a62f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a632:	68 72 ba 02 c0       	push   0xc002ba72
c001a637:	e8 ba 87 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001a63c:	58                   	pop    eax
c001a63d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a640:	5a                   	pop    edx
c001a641:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a644:	68 7b ba 02 c0       	push   0xc002ba7b
c001a649:	e8 a8 87 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001a64e:	59                   	pop    ecx
c001a64f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a652:	5b                   	pop    ebx
c001a653:	8b 00                	mov    eax,DWORD PTR [eax]
c001a655:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a658:	68 84 ba 02 c0       	push   0xc002ba84
c001a65d:	e8 94 87 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001a662:	58                   	pop    eax
c001a663:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a668:	5a                   	pop    edx
c001a669:	68 f0 bb 02 c0       	push   0xc002bbf0
c001a66e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a674:	e8 77 6a ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a679:	59                   	pop    ecx
c001a67a:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a67f:	5b                   	pop    ebx
c001a680:	68 8d ba 02 c0       	push   0xc002ba8d
c001a685:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68b:	e8 60 6a ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a690:	0f 20 c0             	mov    eax,cr0
c001a693:	5a                   	pop    edx
c001a694:	59                   	pop    ecx
c001a695:	50                   	push   eax
c001a696:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a69b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a1:	e8 70 6a ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a6a6:	5b                   	pop    ebx
c001a6a7:	58                   	pop    eax
c001a6a8:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a6ad:	68 97 ba 02 c0       	push   0xc002ba97
c001a6b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b8:	e8 33 6a ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a6bd:	0f 20 d0             	mov    eax,cr2
c001a6c0:	5a                   	pop    edx
c001a6c1:	59                   	pop    ecx
c001a6c2:	50                   	push   eax
c001a6c3:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a6c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ce:	e8 43 6a ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a6d3:	5b                   	pop    ebx
c001a6d4:	58                   	pop    eax
c001a6d5:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a6da:	68 a1 ba 02 c0       	push   0xc002baa1
c001a6df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e5:	e8 06 6a ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a6ea:	0f 20 d8             	mov    eax,cr3
c001a6ed:	5a                   	pop    edx
c001a6ee:	59                   	pop    ecx
c001a6ef:	50                   	push   eax
c001a6f0:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a6f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6fb:	e8 16 6a ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a700:	5b                   	pop    ebx
c001a701:	58                   	pop    eax
c001a702:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a707:	68 b4 ba 02 c0       	push   0xc002bab4
c001a70c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a712:	e8 d9 69 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a717:	0f 20 e0             	mov    eax,cr4
c001a71a:	5a                   	pop    edx
c001a71b:	59                   	pop    ecx
c001a71c:	50                   	push   eax
c001a71d:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a722:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a728:	e8 e9 69 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a72d:	5b                   	pop    ebx
c001a72e:	58                   	pop    eax
c001a72f:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a734:	68 be ba 02 c0       	push   0xc002babe
c001a739:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73f:	e8 ac 69 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a744:	5a                   	pop    edx
c001a745:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a74a:	59                   	pop    ecx
c001a74b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a751:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a754:	50                   	push   eax
c001a755:	e8 bc 69 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a75a:	5b                   	pop    ebx
c001a75b:	58                   	pop    eax
c001a75c:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a761:	68 d5 ba 02 c0       	push   0xc002bad5
c001a766:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76c:	e8 7f 69 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a771:	5a                   	pop    edx
c001a772:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a777:	59                   	pop    ecx
c001a778:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a77e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a781:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a784:	50                   	push   eax
c001a785:	e8 8c 69 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a78a:	5b                   	pop    ebx
c001a78b:	58                   	pop    eax
c001a78c:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a791:	68 d5 ba 02 c0       	push   0xc002bad5
c001a796:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a79c:	e8 4f 69 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a7a1:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a7a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a7a9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a7af:	8b 12                	mov    edx,DWORD PTR [edx]
c001a7b1:	59                   	pop    ecx
c001a7b2:	5b                   	pop    ebx
c001a7b3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a7b6:	50                   	push   eax
c001a7b7:	e8 5a 69 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a7bc:	83 c4 10             	add    esp,0x10
c001a7bf:	b2 fe                	mov    dl,0xfe
c001a7c1:	e4 60                	in     al,0x60
c001a7c3:	3c 1c                	cmp    al,0x1c
c001a7c5:	74 04                	je     c001a7cb <Krnl::panic(char const*)+0x334>
c001a7c7:	3c 5a                	cmp    al,0x5a
c001a7c9:	75 f6                	jne    c001a7c1 <Krnl::panic(char const*)+0x32a>
c001a7cb:	e4 64                	in     al,0x64
c001a7cd:	a8 02                	test   al,0x2
c001a7cf:	75 fa                	jne    c001a7cb <Krnl::panic(char const*)+0x334>
c001a7d1:	88 d0                	mov    al,dl
c001a7d3:	e6 64                	out    0x64,al
c001a7d5:	fa                   	cli    
c001a7d6:	f4                   	hlt    
c001a7d7:	eb e8                	jmp    c001a7c1 <Krnl::panic(char const*)+0x32a>
c001a7d9:	50                   	push   eax
c001a7da:	50                   	push   eax
c001a7db:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a7e0:	68 40 bb 02 c0       	push   0xc002bb40
c001a7e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7eb:	e8 00 69 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a7f0:	58                   	pop    eax
c001a7f1:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a7f6:	5a                   	pop    edx
c001a7f7:	68 4f ba 02 c0       	push   0xc002ba4f
c001a7fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a802:	e8 e9 68 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a807:	59                   	pop    ecx
c001a808:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a80d:	5b                   	pop    ebx
c001a80e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a811:	83 c0 0c             	add    eax,0xc
c001a814:	50                   	push   eax
c001a815:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a81a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a820:	e8 cb 68 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	e9 a3 fd ff ff       	jmp    c001a5d0 <Krnl::panic(char const*)+0x139>

c001a82d <Net::switchEndian16(unsigned short)>:
c001a82d:	83 ec 04             	sub    esp,0x4
c001a830:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a834:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a838:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a83c:	c1 f8 08             	sar    eax,0x8
c001a83f:	89 c2                	mov    edx,eax
c001a841:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a845:	c1 e0 08             	shl    eax,0x8
c001a848:	09 d0                	or     eax,edx
c001a84a:	83 c4 04             	add    esp,0x4
c001a84d:	c3                   	ret    

c001a84e <Net::switchEndian32(unsigned int)>:
c001a84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a852:	c1 e8 18             	shr    eax,0x18
c001a855:	89 c2                	mov    edx,eax
c001a857:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a85b:	c1 e0 08             	shl    eax,0x8
c001a85e:	25 00 00 ff 00       	and    eax,0xff0000
c001a863:	09 c2                	or     edx,eax
c001a865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a869:	c1 e8 08             	shr    eax,0x8
c001a86c:	25 00 ff 00 00       	and    eax,0xff00
c001a871:	09 c2                	or     edx,eax
c001a873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a877:	c1 e0 18             	shl    eax,0x18
c001a87a:	09 d0                	or     eax,edx
c001a87c:	c3                   	ret    

c001a87d <Net::crc32Calc(unsigned char*, int)>:
c001a87d:	83 ec 10             	sub    esp,0x10
c001a880:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a885:	75 07                	jne    c001a88e <Net::crc32Calc(unsigned char*, int)+0x11>
c001a887:	b8 00 00 00 00       	mov    eax,0x0
c001a88c:	eb 7c                	jmp    c001a90a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a88e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a893:	7f 07                	jg     c001a89c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a895:	b8 00 00 00 00       	mov    eax,0x0
c001a89a:	eb 6e                	jmp    c001a90a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a89c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a8a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a8ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8b0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a8b4:	7d 4e                	jge    c001a904 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a8b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8be:	01 d0                	add    eax,edx
c001a8c0:	8a 00                	mov    al,BYTE PTR [eax]
c001a8c2:	0f b6 c0             	movzx  eax,al
c001a8c5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a8c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8d1:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a8d6:	7f 26                	jg     c001a8fe <Net::crc32Calc(unsigned char*, int)+0x81>
c001a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8dc:	83 e0 01             	and    eax,0x1
c001a8df:	74 0d                	je     c001a8ee <Net::crc32Calc(unsigned char*, int)+0x71>
c001a8e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8e5:	d1 e8                	shr    eax,1
c001a8e7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a8ec:	eb 06                	jmp    c001a8f4 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8f2:	d1 e8                	shr    eax,1
c001a8f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8f8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8fc:	eb d3                	jmp    c001a8d1 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a8fe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a902:	eb a8                	jmp    c001a8ac <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a908:	f7 d0                	not    eax
c001a90a:	83 c4 10             	add    esp,0x10
c001a90d:	c3                   	ret    

c001a90e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a90e:	83 ec 1c             	sub    esp,0x1c
c001a911:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a915:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a919:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a921:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a926:	7f 14                	jg     c001a93c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a928:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a92c:	8d 50 01             	lea    edx,[eax+0x1]
c001a92f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a933:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a936:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a93a:	eb e5                	jmp    c001a921 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a93c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a940:	8d 50 01             	lea    edx,[eax+0x1]
c001a943:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a947:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a94a:	83 ec 04             	sub    esp,0x4
c001a94d:	6a 06                	push   0x6
c001a94f:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a953:	50                   	push   eax
c001a954:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a958:	e8 e7 5d fe ff       	call   c0000744 <memcpy>
c001a95d:	83 c4 10             	add    esp,0x10
c001a960:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a965:	83 ec 04             	sub    esp,0x4
c001a968:	6a 06                	push   0x6
c001a96a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a96e:	50                   	push   eax
c001a96f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a973:	e8 cc 5d fe ff       	call   c0000744 <memcpy>
c001a978:	83 c4 10             	add    esp,0x10
c001a97b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a980:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a984:	0f b7 c0             	movzx  eax,ax
c001a987:	c1 f8 08             	sar    eax,0x8
c001a98a:	89 c1                	mov    ecx,eax
c001a98c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a990:	8d 50 01             	lea    edx,[eax+0x1]
c001a993:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a997:	88 ca                	mov    dl,cl
c001a999:	88 10                	mov    BYTE PTR [eax],dl
c001a99b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a99f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9a3:	8d 48 01             	lea    ecx,[eax+0x1]
c001a9a6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a9aa:	88 10                	mov    BYTE PTR [eax],dl
c001a9ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9b4:	83 ec 04             	sub    esp,0x4
c001a9b7:	52                   	push   edx
c001a9b8:	50                   	push   eax
c001a9b9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a9bd:	e8 82 5d fe ff       	call   c0000744 <memcpy>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a9c9:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a9cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9d1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a9d5:	83 ec 08             	sub    esp,0x8
c001a9d8:	50                   	push   eax
c001a9d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a9dd:	e8 9b fe ff ff       	call   c001a87d <Net::crc32Calc(unsigned char*, int)>
c001a9e2:	83 c4 10             	add    esp,0x10
c001a9e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ed:	c1 e8 18             	shr    eax,0x18
c001a9f0:	89 c1                	mov    ecx,eax
c001a9f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9f6:	8d 50 01             	lea    edx,[eax+0x1]
c001a9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9fd:	88 ca                	mov    dl,cl
c001a9ff:	88 10                	mov    BYTE PTR [eax],dl
c001aa01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa05:	c1 e8 10             	shr    eax,0x10
c001aa08:	89 c1                	mov    ecx,eax
c001aa0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa0e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa11:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa15:	88 ca                	mov    dl,cl
c001aa17:	88 10                	mov    BYTE PTR [eax],dl
c001aa19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1d:	c1 e8 08             	shr    eax,0x8
c001aa20:	89 c1                	mov    ecx,eax
c001aa22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa26:	8d 50 01             	lea    edx,[eax+0x1]
c001aa29:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa2d:	88 ca                	mov    dl,cl
c001aa2f:	88 10                	mov    BYTE PTR [eax],dl
c001aa31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa35:	8d 50 01             	lea    edx,[eax+0x1]
c001aa38:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa40:	88 10                	mov    BYTE PTR [eax],dl
c001aa42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa46:	83 c4 1c             	add    esp,0x1c
c001aa49:	c3                   	ret    

c001aa4a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa4a:	83 ec 2c             	sub    esp,0x2c
c001aa4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa55:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aa5a:	83 ec 04             	sub    esp,0x4
c001aa5d:	6a 06                	push   0x6
c001aa5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa67:	83 c0 0e             	add    eax,0xe
c001aa6a:	50                   	push   eax
c001aa6b:	e8 d4 5c fe ff       	call   c0000744 <memcpy>
c001aa70:	83 c4 10             	add    esp,0x10
c001aa73:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa78:	83 ec 04             	sub    esp,0x4
c001aa7b:	6a 06                	push   0x6
c001aa7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa85:	83 c0 08             	add    eax,0x8
c001aa88:	50                   	push   eax
c001aa89:	e8 b6 5c fe ff       	call   c0000744 <memcpy>
c001aa8e:	83 c4 10             	add    esp,0x10
c001aa91:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa9a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa9d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aaa1:	8a 00                	mov    al,BYTE PTR [eax]
c001aaa3:	0f b6 c0             	movzx  eax,al
c001aaa6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aaab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaaf:	8d 50 01             	lea    edx,[eax+0x1]
c001aab2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aab6:	8a 00                	mov    al,BYTE PTR [eax]
c001aab8:	0f b6 c0             	movzx  eax,al
c001aabb:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aac0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aac5:	c1 e0 08             	shl    eax,0x8
c001aac8:	89 c2                	mov    edx,eax
c001aaca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aace:	09 d0                	or     eax,edx
c001aad0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aad4:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aad8:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aadd:	75 3a                	jne    c001ab19 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aadf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aae3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aae6:	66 3d dc 05          	cmp    ax,0x5dc
c001aaea:	77 10                	ja     c001aafc <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aaec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aaf0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aaf3:	0f b7 c0             	movzx  eax,ax
c001aaf6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aafa:	eb 1d                	jmp    c001ab19 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aafc:	83 ec 0c             	sub    esp,0xc
c001aaff:	68 18 bc 02 c0       	push   0xc002bc18
c001ab04:	e8 ed 82 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ab09:	83 c4 10             	add    esp,0x10
c001ab0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab10:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab14:	e9 c0 00 00 00       	jmp    c001abd9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ab19:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ab1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab21:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab23:	83 ec 04             	sub    esp,0x4
c001ab26:	52                   	push   edx
c001ab27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab2b:	50                   	push   eax
c001ab2c:	e8 13 5c fe ff       	call   c0000744 <memcpy>
c001ab31:	83 c4 10             	add    esp,0x10
c001ab34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab38:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ab3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab40:	8d 50 01             	lea    edx,[eax+0x1]
c001ab43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab47:	8a 00                	mov    al,BYTE PTR [eax]
c001ab49:	0f b6 c0             	movzx  eax,al
c001ab4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab54:	8d 50 01             	lea    edx,[eax+0x1]
c001ab57:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab5b:	8a 00                	mov    al,BYTE PTR [eax]
c001ab5d:	0f b6 c0             	movzx  eax,al
c001ab60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab68:	8d 50 01             	lea    edx,[eax+0x1]
c001ab6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab6f:	8a 00                	mov    al,BYTE PTR [eax]
c001ab71:	0f b6 c0             	movzx  eax,al
c001ab74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab7c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab7f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab83:	8a 00                	mov    al,BYTE PTR [eax]
c001ab85:	0f b6 c0             	movzx  eax,al
c001ab88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab90:	c1 e0 18             	shl    eax,0x18
c001ab93:	89 c2                	mov    edx,eax
c001ab95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab99:	c1 e0 10             	shl    eax,0x10
c001ab9c:	09 c2                	or     edx,eax
c001ab9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aba2:	c1 e0 08             	shl    eax,0x8
c001aba5:	09 d0                	or     eax,edx
c001aba7:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001abab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abb3:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001abb7:	83 e8 04             	sub    eax,0x4
c001abba:	83 ec 08             	sub    esp,0x8
c001abbd:	50                   	push   eax
c001abbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001abc2:	e8 b6 fc ff ff       	call   c001a87d <Net::crc32Calc(unsigned char*, int)>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001abce:	0f 94 c2             	sete   dl
c001abd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abd5:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001abd8:	90                   	nop
c001abd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abdd:	83 c4 2c             	add    esp,0x2c
c001abe0:	c2 04 00             	ret    0x4

c001abe3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001abe3:	55                   	push   ebp
c001abe4:	57                   	push   edi
c001abe5:	56                   	push   esi
c001abe6:	53                   	push   ebx
c001abe7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001abed:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001abf4:	8a 1e                	mov    bl,BYTE PTR [esi]
c001abf6:	8d 6e 01             	lea    ebp,[esi+0x1]
c001abf9:	80 fb 40             	cmp    bl,0x40
c001abfc:	75 1b                	jne    c001ac19 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001abfe:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac00:	84 d2                	test   dl,dl
c001ac02:	0f 84 f1 00 00 00    	je     c001acf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac08:	8d 46 01             	lea    eax,[esi+0x1]
c001ac0b:	80 fa 3a             	cmp    dl,0x3a
c001ac0e:	74 04                	je     c001ac14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac10:	89 c6                	mov    esi,eax
c001ac12:	eb ea                	jmp    c001abfe <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac14:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac17:	89 c6                	mov    esi,eax
c001ac19:	50                   	push   eax
c001ac1a:	6a 40                	push   0x40
c001ac1c:	6a 00                	push   0x0
c001ac1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac22:	50                   	push   eax
c001ac23:	e8 50 5b fe ff       	call   c0000778 <memset>
c001ac28:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac2f:	31 c0                	xor    eax,eax
c001ac31:	83 c4 10             	add    esp,0x10
c001ac34:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac36:	84 c9                	test   cl,cl
c001ac38:	0f 84 bb 00 00 00    	je     c001acf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac3e:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac43:	0f 8f b0 00 00 00    	jg     c001acf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac49:	80 f9 0a             	cmp    cl,0xa
c001ac4c:	0f 85 98 00 00 00    	jne    c001acea <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac52:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac57:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac5b:	a8 df                	test   al,0xdf
c001ac5d:	0f 94 c1             	sete   cl
c001ac60:	3c 23                	cmp    al,0x23
c001ac62:	0f 94 c2             	sete   dl
c001ac65:	08 d1                	or     cl,dl
c001ac67:	75 4a                	jne    c001acb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac69:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac6c:	80 fa 01             	cmp    dl,0x1
c001ac6f:	76 42                	jbe    c001acb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac71:	3c 5b                	cmp    al,0x5b
c001ac73:	75 42                	jne    c001acb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ac75:	80 fb 40             	cmp    bl,0x40
c001ac78:	75 39                	jne    c001acb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac7a:	83 ec 0c             	sub    esp,0xc
c001ac7d:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ac81:	52                   	push   edx
c001ac82:	e8 0d 5b fe ff       	call   c0000794 <strlen>
c001ac87:	83 c4 10             	add    esp,0x10
c001ac8a:	83 f8 3f             	cmp    eax,0x3f
c001ac8d:	77 6a                	ja     c001acf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac8f:	50                   	push   eax
c001ac90:	50                   	push   eax
c001ac91:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ac95:	52                   	push   edx
c001ac96:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac9a:	52                   	push   edx
c001ac9b:	e8 94 5b fe ff       	call   c0000834 <strcpy>
c001aca0:	58                   	pop    eax
c001aca1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aca5:	52                   	push   edx
c001aca6:	e8 e9 5a fe ff       	call   c0000794 <strlen>
c001acab:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001acb0:	83 c4 10             	add    esp,0x10
c001acb3:	31 d2                	xor    edx,edx
c001acb5:	eb 3a                	jmp    c001acf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001acb7:	80 fb 40             	cmp    bl,0x40
c001acba:	74 06                	je     c001acc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001acbc:	8d 44 24 58          	lea    eax,[esp+0x58]
c001acc0:	eb 20                	jmp    c001ace2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001acc2:	50                   	push   eax
c001acc3:	50                   	push   eax
c001acc4:	55                   	push   ebp
c001acc5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acc9:	50                   	push   eax
c001acca:	e8 f1 5b fe ff       	call   c00008c0 <strcmp>
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	85 c0                	test   eax,eax
c001acd4:	75 dd                	jne    c001acb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acd6:	eb e4                	jmp    c001acbc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001acd8:	8d 50 01             	lea    edx,[eax+0x1]
c001acdb:	80 f9 3d             	cmp    cl,0x3d
c001acde:	74 1d                	je     c001acfd <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ace0:	89 d0                	mov    eax,edx
c001ace2:	8a 08                	mov    cl,BYTE PTR [eax]
c001ace4:	84 c9                	test   cl,cl
c001ace6:	75 f0                	jne    c001acd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ace8:	eb 0f                	jmp    c001acf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acea:	8d 50 01             	lea    edx,[eax+0x1]
c001aced:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001acf1:	47                   	inc    edi
c001acf2:	89 d0                	mov    eax,edx
c001acf4:	e9 3b ff ff ff       	jmp    c001ac34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001acf9:	31 c0                	xor    eax,eax
c001acfb:	eb 33                	jmp    c001ad30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad01:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad04:	50                   	push   eax
c001ad05:	50                   	push   eax
c001ad06:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad0a:	50                   	push   eax
c001ad0b:	56                   	push   esi
c001ad0c:	e8 af 5b fe ff       	call   c00008c0 <strcmp>
c001ad11:	83 c4 10             	add    esp,0x10
c001ad14:	85 c0                	test   eax,eax
c001ad16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad1a:	75 97                	jne    c001acb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad1c:	51                   	push   ecx
c001ad1d:	51                   	push   ecx
c001ad1e:	52                   	push   edx
c001ad1f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad26:	e8 09 5b fe ff       	call   c0000834 <strcpy>
c001ad2b:	83 c4 10             	add    esp,0x10
c001ad2e:	b0 01                	mov    al,0x1
c001ad30:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad36:	5b                   	pop    ebx
c001ad37:	5e                   	pop    esi
c001ad38:	5f                   	pop    edi
c001ad39:	5d                   	pop    ebp
c001ad3a:	c3                   	ret    

c001ad3b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad3b:	57                   	push   edi
c001ad3c:	56                   	push   esi
c001ad3d:	53                   	push   ebx
c001ad3e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad44:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad4b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad52:	53                   	push   ebx
c001ad53:	e8 3c 5a fe ff       	call   c0000794 <strlen>
c001ad58:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad5b:	89 c7                	mov    edi,eax
c001ad5d:	e8 32 5a fe ff       	call   c0000794 <strlen>
c001ad62:	83 c4 10             	add    esp,0x10
c001ad65:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad69:	3d ff 00 00 00       	cmp    eax,0xff
c001ad6e:	0f 87 d3 00 00 00    	ja     c001ae47 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad74:	57                   	push   edi
c001ad75:	57                   	push   edi
c001ad76:	56                   	push   esi
c001ad77:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ad7b:	56                   	push   esi
c001ad7c:	e8 b3 5a fe ff       	call   c0000834 <strcpy>
c001ad81:	58                   	pop    eax
c001ad82:	5a                   	pop    edx
c001ad83:	68 e1 c1 02 c0       	push   0xc002c1e1
c001ad88:	56                   	push   esi
c001ad89:	e8 e6 5b fe ff       	call   c0000974 <strcat>
c001ad8e:	59                   	pop    ecx
c001ad8f:	5f                   	pop    edi
c001ad90:	53                   	push   ebx
c001ad91:	56                   	push   esi
c001ad92:	e8 dd 5b fe ff       	call   c0000974 <strcat>
c001ad97:	58                   	pop    eax
c001ad98:	5a                   	pop    edx
c001ad99:	68 64 bc 02 c0       	push   0xc002bc64
c001ad9e:	56                   	push   esi
c001ad9f:	e8 d0 5b fe ff       	call   c0000974 <strcat>
c001ada4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001adab:	e8 90 4a ff ff       	call   c000f840 <malloc>
c001adb0:	83 c4 0c             	add    esp,0xc
c001adb3:	89 c3                	mov    ebx,eax
c001adb5:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001adbb:	56                   	push   esi
c001adbc:	50                   	push   eax
c001adbd:	e8 8c 85 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001adc2:	83 c4 10             	add    esp,0x10
c001adc5:	85 db                	test   ebx,ebx
c001adc7:	74 7e                	je     c001ae47 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adc9:	51                   	push   ecx
c001adca:	51                   	push   ecx
c001adcb:	6a 01                	push   0x1
c001adcd:	53                   	push   ebx
c001adce:	e8 df 85 ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	85 c0                	test   eax,eax
c001add8:	74 08                	je     c001ade2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001adda:	83 ec 0c             	sub    esp,0xc
c001addd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001addf:	53                   	push   ebx
c001ade0:	eb 5f                	jmp    c001ae41 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ade2:	52                   	push   edx
c001ade3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ade7:	50                   	push   eax
c001ade8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001adec:	50                   	push   eax
c001aded:	53                   	push   ebx
c001adee:	e8 6b 88 ff ff       	call   c001365e <File::stat(unsigned long long*, bool*)>
c001adf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	89 c1                	mov    ecx,eax
c001adfc:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae00:	74 31                	je     c001ae33 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae02:	83 ec 0c             	sub    esp,0xc
c001ae05:	50                   	push   eax
c001ae06:	e8 35 4a ff ff       	call   c000f840 <malloc>
c001ae0b:	89 c6                	mov    esi,eax
c001ae0d:	58                   	pop    eax
c001ae0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae10:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae14:	52                   	push   edx
c001ae15:	56                   	push   esi
c001ae16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae1e:	53                   	push   ebx
c001ae1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae22:	83 c4 20             	add    esp,0x20
c001ae25:	85 c0                	test   eax,eax
c001ae27:	75 0a                	jne    c001ae33 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae2d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae31:	74 18                	je     c001ae4b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae33:	83 ec 0c             	sub    esp,0xc
c001ae36:	53                   	push   ebx
c001ae37:	e8 d4 85 ff ff       	call   c0013410 <File::close()>
c001ae3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae44:	83 c4 10             	add    esp,0x10
c001ae47:	31 c0                	xor    eax,eax
c001ae49:	eb 3b                	jmp    c001ae86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae4b:	83 ec 0c             	sub    esp,0xc
c001ae4e:	53                   	push   ebx
c001ae4f:	e8 bc 85 ff ff       	call   c0013410 <File::close()>
c001ae54:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae5c:	83 c4 0c             	add    esp,0xc
c001ae5f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae66:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae6d:	56                   	push   esi
c001ae6e:	e8 70 fd ff ff       	call   c001abe3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ae73:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae76:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae7a:	e8 d1 49 ff ff       	call   c000f850 <free>
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae86:	81 c4 20 01 00 00    	add    esp,0x120
c001ae8c:	5b                   	pop    ebx
c001ae8d:	5e                   	pop    esi
c001ae8e:	5f                   	pop    edi
c001ae8f:	c3                   	ret    

c001ae90 <Reg::getLine(char*, char*, char*)>:
c001ae90:	57                   	push   edi
c001ae91:	56                   	push   esi
c001ae92:	53                   	push   ebx
c001ae93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae97:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae9f:	57                   	push   edi
c001aea0:	56                   	push   esi
c001aea1:	53                   	push   ebx
c001aea2:	68 69 bc 02 c0       	push   0xc002bc69
c001aea7:	e8 8f fe ff ff       	call   c001ad3b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aeac:	83 c4 10             	add    esp,0x10
c001aeaf:	84 c0                	test   al,al
c001aeb1:	75 10                	jne    c001aec3 <Reg::getLine(char*, char*, char*)+0x33>
c001aeb3:	57                   	push   edi
c001aeb4:	56                   	push   esi
c001aeb5:	53                   	push   ebx
c001aeb6:	68 8e bc 02 c0       	push   0xc002bc8e
c001aebb:	e8 7b fe ff ff       	call   c001ad3b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aec0:	83 c4 10             	add    esp,0x10
c001aec3:	5b                   	pop    ebx
c001aec4:	5e                   	pop    esi
c001aec5:	5f                   	pop    edi
c001aec6:	c3                   	ret    

c001aec7 <Reg::readInt(char*, char*, int*)>:
c001aec7:	55                   	push   ebp
c001aec8:	57                   	push   edi
c001aec9:	56                   	push   esi
c001aeca:	53                   	push   ebx
c001aecb:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aed1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aed5:	57                   	push   edi
c001aed6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aedd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aee4:	e8 a7 ff ff ff       	call   c001ae90 <Reg::getLine(char*, char*, char*)>
c001aee9:	83 c4 10             	add    esp,0x10
c001aeec:	84 c0                	test   al,al
c001aeee:	0f 84 b3 00 00 00    	je     c001afa7 <Reg::readInt(char*, char*, int*)+0xe0>
c001aef4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aef8:	80 fa 2b             	cmp    dl,0x2b
c001aefb:	74 0c                	je     c001af09 <Reg::readInt(char*, char*, int*)+0x42>
c001aefd:	80 fa 2d             	cmp    dl,0x2d
c001af00:	75 0e                	jne    c001af10 <Reg::readInt(char*, char*, int*)+0x49>
c001af02:	ba 01 00 00 00       	mov    edx,0x1
c001af07:	eb 0b                	jmp    c001af14 <Reg::readInt(char*, char*, int*)+0x4d>
c001af09:	ba 01 00 00 00       	mov    edx,0x1
c001af0e:	eb 02                	jmp    c001af12 <Reg::readInt(char*, char*, int*)+0x4b>
c001af10:	31 d2                	xor    edx,edx
c001af12:	31 c0                	xor    eax,eax
c001af14:	be 0a 00 00 00       	mov    esi,0xa
c001af19:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af1e:	75 20                	jne    c001af40 <Reg::readInt(char*, char*, int*)+0x79>
c001af20:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af24:	80 f9 78             	cmp    cl,0x78
c001af27:	75 0a                	jne    c001af33 <Reg::readInt(char*, char*, int*)+0x6c>
c001af29:	83 c2 02             	add    edx,0x2
c001af2c:	be 10 00 00 00       	mov    esi,0x10
c001af31:	eb 0d                	jmp    c001af40 <Reg::readInt(char*, char*, int*)+0x79>
c001af33:	80 f9 62             	cmp    cl,0x62
c001af36:	75 08                	jne    c001af40 <Reg::readInt(char*, char*, int*)+0x79>
c001af38:	83 c2 02             	add    edx,0x2
c001af3b:	be 02 00 00 00       	mov    esi,0x2
c001af40:	01 d7                	add    edi,edx
c001af42:	31 d2                	xor    edx,edx
c001af44:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af46:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af4a:	80 fb 0d             	cmp    bl,0xd
c001af4d:	0f 94 c3             	sete   bl
c001af50:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af55:	0f 94 c1             	sete   cl
c001af58:	08 cb                	or     bl,cl
c001af5a:	75 3a                	jne    c001af96 <Reg::readInt(char*, char*, int*)+0xcf>
c001af5c:	0f af d6             	imul   edx,esi
c001af5f:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af64:	83 fe 10             	cmp    esi,0x10
c001af67:	75 26                	jne    c001af8f <Reg::readInt(char*, char*, int*)+0xc8>
c001af69:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af6d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001af70:	89 e9                	mov    ecx,ebp
c001af72:	80 f9 05             	cmp    cl,0x5
c001af75:	77 06                	ja     c001af7d <Reg::readInt(char*, char*, int*)+0xb6>
c001af77:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001af7b:	eb 16                	jmp    c001af93 <Reg::readInt(char*, char*, int*)+0xcc>
c001af7d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af81:	83 e9 61             	sub    ecx,0x61
c001af84:	80 f9 05             	cmp    cl,0x5
c001af87:	77 06                	ja     c001af8f <Reg::readInt(char*, char*, int*)+0xc8>
c001af89:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001af8d:	eb 04                	jmp    c001af93 <Reg::readInt(char*, char*, int*)+0xcc>
c001af8f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001af93:	47                   	inc    edi
c001af94:	eb ae                	jmp    c001af44 <Reg::readInt(char*, char*, int*)+0x7d>
c001af96:	84 c0                	test   al,al
c001af98:	74 02                	je     c001af9c <Reg::readInt(char*, char*, int*)+0xd5>
c001af9a:	f7 da                	neg    edx
c001af9c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001afa3:	89 10                	mov    DWORD PTR [eax],edx
c001afa5:	88 d8                	mov    al,bl
c001afa7:	81 c4 ec 00 00 00    	add    esp,0xec
c001afad:	5b                   	pop    ebx
c001afae:	5e                   	pop    esi
c001afaf:	5f                   	pop    edi
c001afb0:	5d                   	pop    ebp
c001afb1:	c3                   	ret    

c001afb2 <Reg::readString(char*, char*, char*, int)>:
c001afb2:	57                   	push   edi
c001afb3:	56                   	push   esi
c001afb4:	53                   	push   ebx
c001afb5:	81 ec d4 00 00 00    	sub    esp,0xd4
c001afbb:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001afc2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001afc6:	57                   	push   edi
c001afc7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afce:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afd5:	e8 b6 fe ff ff       	call   c001ae90 <Reg::getLine(char*, char*, char*)>
c001afda:	83 c4 10             	add    esp,0x10
c001afdd:	89 c6                	mov    esi,eax
c001afdf:	84 c0                	test   al,al
c001afe1:	74 44                	je     c001b027 <Reg::readString(char*, char*, char*, int)+0x75>
c001afe3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001afea:	31 c0                	xor    eax,eax
c001afec:	4a                   	dec    edx
c001afed:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001aff0:	84 c9                	test   cl,cl
c001aff2:	74 0f                	je     c001b003 <Reg::readString(char*, char*, char*, int)+0x51>
c001aff4:	39 c2                	cmp    edx,eax
c001aff6:	7e 0b                	jle    c001b003 <Reg::readString(char*, char*, char*, int)+0x51>
c001aff8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001affb:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b000:	40                   	inc    eax
c001b001:	eb ea                	jmp    c001afed <Reg::readString(char*, char*, char*, int)+0x3b>
c001b003:	83 ec 0c             	sub    esp,0xc
c001b006:	53                   	push   ebx
c001b007:	e8 88 57 fe ff       	call   c0000794 <strlen>
c001b00c:	83 c4 10             	add    esp,0x10
c001b00f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b014:	75 11                	jne    c001b027 <Reg::readString(char*, char*, char*, int)+0x75>
c001b016:	83 ec 0c             	sub    esp,0xc
c001b019:	53                   	push   ebx
c001b01a:	e8 75 57 fe ff       	call   c0000794 <strlen>
c001b01f:	83 c4 10             	add    esp,0x10
c001b022:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b027:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b02d:	89 f0                	mov    eax,esi
c001b02f:	5b                   	pop    ebx
c001b030:	5e                   	pop    esi
c001b031:	5f                   	pop    edi
c001b032:	c3                   	ret    

c001b033 <Reg::readBool(char*, char*, bool*)>:
c001b033:	83 ec 20             	sub    esp,0x20
c001b036:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b03a:	50                   	push   eax
c001b03b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b03f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b043:	e8 7f fe ff ff       	call   c001aec7 <Reg::readInt(char*, char*, int*)>
c001b048:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b04d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b051:	0f 95 02             	setne  BYTE PTR [edx]
c001b054:	83 c4 2c             	add    esp,0x2c
c001b057:	c3                   	ret    

c001b058 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b058:	53                   	push   ebx
c001b059:	83 ec 1c             	sub    esp,0x1c
c001b05c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b060:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b064:	50                   	push   eax
c001b065:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b069:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b06d:	e8 c1 ff ff ff       	call   c001b033 <Reg::readBool(char*, char*, bool*)>
c001b072:	83 c4 10             	add    esp,0x10
c001b075:	84 c0                	test   al,al
c001b077:	74 04                	je     c001b07d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b079:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b07d:	88 d8                	mov    al,bl
c001b07f:	83 c4 18             	add    esp,0x18
c001b082:	5b                   	pop    ebx
c001b083:	c3                   	ret    

c001b084 <Reg::readIntWithDefault(char*, char*, int)>:
c001b084:	53                   	push   ebx
c001b085:	83 ec 1c             	sub    esp,0x1c
c001b088:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b08c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b090:	50                   	push   eax
c001b091:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b095:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b099:	e8 29 fe ff ff       	call   c001aec7 <Reg::readInt(char*, char*, int*)>
c001b09e:	83 c4 10             	add    esp,0x10
c001b0a1:	84 c0                	test   al,al
c001b0a3:	74 04                	je     c001b0a9 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b0a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0a9:	89 d8                	mov    eax,ebx
c001b0ab:	83 c4 18             	add    esp,0x18
c001b0ae:	5b                   	pop    ebx
c001b0af:	c3                   	ret    

c001b0b0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b0b0:	57                   	push   edi
c001b0b1:	56                   	push   esi
c001b0b2:	53                   	push   ebx
c001b0b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b0b7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b0bf:	56                   	push   esi
c001b0c0:	53                   	push   ebx
c001b0c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0c9:	e8 e4 fe ff ff       	call   c001afb2 <Reg::readString(char*, char*, char*, int)>
c001b0ce:	83 c4 10             	add    esp,0x10
c001b0d1:	84 c0                	test   al,al
c001b0d3:	75 1b                	jne    c001b0f0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b0d5:	50                   	push   eax
c001b0d6:	56                   	push   esi
c001b0d7:	4e                   	dec    esi
c001b0d8:	6a 00                	push   0x0
c001b0da:	53                   	push   ebx
c001b0db:	e8 98 56 fe ff       	call   c0000778 <memset>
c001b0e0:	83 c4 0c             	add    esp,0xc
c001b0e3:	56                   	push   esi
c001b0e4:	57                   	push   edi
c001b0e5:	53                   	push   ebx
c001b0e6:	89 fb                	mov    ebx,edi
c001b0e8:	e8 57 56 fe ff       	call   c0000744 <memcpy>
c001b0ed:	83 c4 10             	add    esp,0x10
c001b0f0:	89 d8                	mov    eax,ebx
c001b0f2:	5b                   	pop    ebx
c001b0f3:	5e                   	pop    esi
c001b0f4:	5f                   	pop    edi
c001b0f5:	c3                   	ret    

c001b0f6 <Sys::eject(regs*)>:
c001b0f6:	83 ec 0c             	sub    esp,0xc
c001b0f9:	83 ca ff             	or     edx,0xffffffff
c001b0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b100:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b103:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b108:	83 e9 41             	sub    ecx,0x41
c001b10b:	83 f9 19             	cmp    ecx,0x19
c001b10e:	77 18                	ja     c001b128 <Sys::eject(regs*)+0x32>
c001b110:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c001b117:	85 c9                	test   ecx,ecx
c001b119:	74 0d                	je     c001b128 <Sys::eject(regs*)+0x32>
c001b11b:	83 ec 0c             	sub    esp,0xc
c001b11e:	51                   	push   ecx
c001b11f:	e8 78 b4 ff ff       	call   c001659c <LogicalDisk::eject()>
c001b124:	83 c4 10             	add    esp,0x10
c001b127:	99                   	cdq    
c001b128:	83 c4 0c             	add    esp,0xc
c001b12b:	c3                   	ret    

c001b12c <Sys::exit(regs*)>:
c001b12c:	83 ec 18             	sub    esp,0x18
c001b12f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b133:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b136:	e8 c4 35 00 00       	call   c001e6ff <terminateTask(int)>
c001b13b:	83 c8 ff             	or     eax,0xffffffff
c001b13e:	83 c4 1c             	add    esp,0x1c
c001b141:	89 c2                	mov    edx,eax
c001b143:	c3                   	ret    

c001b144 <Sys::getCwd(regs*)>:
c001b144:	83 ec 10             	sub    esp,0x10
c001b147:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b14b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b14e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b151:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b156:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b159:	e8 f2 7f ff ff       	call   c0013150 <Fs::getcwd(Process*, char*, int)>
c001b15e:	83 c4 1c             	add    esp,0x1c
c001b161:	99                   	cdq    
c001b162:	c3                   	ret    

c001b163 <Sys::getPID(regs*)>:
c001b163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b168:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b16b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b16d:	99                   	cdq    
c001b16e:	c3                   	ret    

c001b16f <Sys::getRAMData(regs*)>:
c001b16f:	8b 0d 50 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e450
c001b175:	6b 05 4c e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e44c,0x64
c001b17c:	99                   	cdq    
c001b17d:	f7 f9                	idiv   ecx
c001b17f:	c1 e0 18             	shl    eax,0x18
c001b182:	09 c8                	or     eax,ecx
c001b184:	99                   	cdq    
c001b185:	c3                   	ret    

c001b186 <Sys::loadDLL(regs*)>:
c001b186:	56                   	push   esi
c001b187:	53                   	push   ebx
c001b188:	31 d2                	xor    edx,edx
c001b18a:	51                   	push   ecx
c001b18b:	b8 01 00 00 00       	mov    eax,0x1
c001b190:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b194:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b198:	0f 84 8c 00 00 00    	je     c001b22a <Sys::loadDLL(regs*)+0xa4>
c001b19e:	83 ec 0c             	sub    esp,0xc
c001b1a1:	68 14 01 00 00       	push   0x114
c001b1a6:	e8 95 46 ff ff       	call   c000f840 <malloc>
c001b1ab:	83 c4 0c             	add    esp,0xc
c001b1ae:	89 c3                	mov    ebx,eax
c001b1b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1b5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1bb:	53                   	push   ebx
c001b1bc:	e8 8d 81 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	31 d2                	xor    edx,edx
c001b1c6:	b8 02 00 00 00       	mov    eax,0x2
c001b1cb:	85 db                	test   ebx,ebx
c001b1cd:	74 5b                	je     c001b22a <Sys::loadDLL(regs*)+0xa4>
c001b1cf:	83 ec 0c             	sub    esp,0xc
c001b1d2:	53                   	push   ebx
c001b1d3:	e8 48 84 ff ff       	call   c0013620 <File::exists()>
c001b1d8:	83 c4 10             	add    esp,0x10
c001b1db:	84 c0                	test   al,al
c001b1dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1df:	75 11                	jne    c001b1f2 <Sys::loadDLL(regs*)+0x6c>
c001b1e1:	83 ec 0c             	sub    esp,0xc
c001b1e4:	53                   	push   ebx
c001b1e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1e8:	83 c4 10             	add    esp,0x10
c001b1eb:	b8 03 00 00 00       	mov    eax,0x3
c001b1f0:	eb 36                	jmp    c001b228 <Sys::loadDLL(regs*)+0xa2>
c001b1f2:	83 ec 0c             	sub    esp,0xc
c001b1f5:	53                   	push   ebx
c001b1f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1f9:	58                   	pop    eax
c001b1fa:	5a                   	pop    edx
c001b1fb:	6a 00                	push   0x0
c001b1fd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b200:	e8 0f 24 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c001b205:	83 c4 10             	add    esp,0x10
c001b208:	89 c1                	mov    ecx,eax
c001b20a:	31 d2                	xor    edx,edx
c001b20c:	b8 04 00 00 00       	mov    eax,0x4
c001b211:	85 c9                	test   ecx,ecx
c001b213:	74 15                	je     c001b22a <Sys::loadDLL(regs*)+0xa4>
c001b215:	53                   	push   ebx
c001b216:	53                   	push   ebx
c001b217:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c001b21d:	51                   	push   ecx
c001b21e:	e8 25 26 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c001b223:	83 c4 10             	add    esp,0x10
c001b226:	31 c0                	xor    eax,eax
c001b228:	31 d2                	xor    edx,edx
c001b22a:	59                   	pop    ecx
c001b22b:	5b                   	pop    ebx
c001b22c:	5e                   	pop    esi
c001b22d:	c3                   	ret    

c001b22e <Sys::read(regs*)>:
c001b22e:	57                   	push   edi
c001b22f:	56                   	push   esi
c001b230:	53                   	push   ebx
c001b231:	83 ec 10             	sub    esp,0x10
c001b234:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b238:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b23b:	83 f8 02             	cmp    eax,0x2
c001b23e:	77 10                	ja     c001b250 <Sys::read(regs*)+0x22>
c001b240:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b245:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b248:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b24e:	eb 0e                	jmp    c001b25e <Sys::read(regs*)+0x30>
c001b250:	83 ec 0c             	sub    esp,0xc
c001b253:	50                   	push   eax
c001b254:	e8 70 67 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b259:	83 c4 10             	add    esp,0x10
c001b25c:	89 c1                	mov    ecx,eax
c001b25e:	83 c8 ff             	or     eax,0xffffffff
c001b261:	85 c9                	test   ecx,ecx
c001b263:	89 c2                	mov    edx,eax
c001b265:	74 28                	je     c001b28f <Sys::read(regs*)+0x61>
c001b267:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b26f:	31 ff                	xor    edi,edi
c001b271:	83 ec 0c             	sub    esp,0xc
c001b274:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b276:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b27a:	52                   	push   edx
c001b27b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b27e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b281:	57                   	push   edi
c001b282:	56                   	push   esi
c001b283:	51                   	push   ecx
c001b284:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b287:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b28b:	83 c4 20             	add    esp,0x20
c001b28e:	99                   	cdq    
c001b28f:	83 c4 10             	add    esp,0x10
c001b292:	5b                   	pop    ebx
c001b293:	5e                   	pop    esi
c001b294:	5f                   	pop    edi
c001b295:	c3                   	ret    

c001b296 <Sys::sbrk(regs*)>:
c001b296:	56                   	push   esi
c001b297:	53                   	push   ebx
c001b298:	83 ec 0c             	sub    esp,0xc
c001b29b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b29f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2a7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b2ad:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b2b0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2b3:	68 a9 bc 02 c0       	push   0xc002bca9
c001b2b8:	e8 39 7b ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b2bd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b2c0:	83 c4 10             	add    esp,0x10
c001b2c3:	85 c0                	test   eax,eax
c001b2c5:	75 0a                	jne    c001b2d1 <Sys::sbrk(regs*)+0x3b>
c001b2c7:	50                   	push   eax
c001b2c8:	50                   	push   eax
c001b2c9:	53                   	push   ebx
c001b2ca:	68 c5 bc 02 c0       	push   0xc002bcc5
c001b2cf:	eb 54                	jmp    c001b325 <Sys::sbrk(regs*)+0x8f>
c001b2d1:	79 0a                	jns    c001b2dd <Sys::sbrk(regs*)+0x47>
c001b2d3:	56                   	push   esi
c001b2d4:	56                   	push   esi
c001b2d5:	53                   	push   ebx
c001b2d6:	68 d8 bc 02 c0       	push   0xc002bcd8
c001b2db:	eb 48                	jmp    c001b325 <Sys::sbrk(regs*)+0x8f>
c001b2dd:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b2e2:	76 17                	jbe    c001b2fb <Sys::sbrk(regs*)+0x65>
c001b2e4:	51                   	push   ecx
c001b2e5:	51                   	push   ecx
c001b2e6:	53                   	push   ebx
c001b2e7:	68 ea bc 02 c0       	push   0xc002bcea
c001b2ec:	e8 05 7b ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b2f1:	83 c8 ff             	or     eax,0xffffffff
c001b2f4:	83 c4 10             	add    esp,0x10
c001b2f7:	89 c2                	mov    edx,eax
c001b2f9:	eb 36                	jmp    c001b331 <Sys::sbrk(regs*)+0x9b>
c001b2fb:	05 ff 0f 00 00       	add    eax,0xfff
c001b300:	56                   	push   esi
c001b301:	c1 e8 0c             	shr    eax,0xc
c001b304:	68 07 04 00 00       	push   0x407
c001b309:	50                   	push   eax
c001b30a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b30f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b312:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b318:	e8 85 70 ff ff       	call   c00123a2 <VAS::allocatePages(int, int)>
c001b31d:	58                   	pop    eax
c001b31e:	5a                   	pop    edx
c001b31f:	53                   	push   ebx
c001b320:	68 03 bd 02 c0       	push   0xc002bd03
c001b325:	e8 cc 7a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b32a:	89 d8                	mov    eax,ebx
c001b32c:	31 d2                	xor    edx,edx
c001b32e:	83 c4 10             	add    esp,0x10
c001b331:	59                   	pop    ecx
c001b332:	5b                   	pop    ebx
c001b333:	5e                   	pop    esi
c001b334:	c3                   	ret    

c001b335 <Sys::setCwd(regs*)>:
c001b335:	83 ec 14             	sub    esp,0x14
c001b338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b33c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b33f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b344:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b347:	e8 73 83 ff ff       	call   c00136bf <Fs::setcwd(Process*, char*)>
c001b34c:	83 c4 1c             	add    esp,0x1c
c001b34f:	99                   	cdq    
c001b350:	c3                   	ret    

c001b351 <Sys::setTime(regs*)>:
c001b351:	55                   	push   ebp
c001b352:	31 d2                	xor    edx,edx
c001b354:	57                   	push   edi
c001b355:	bf 18 00 00 00       	mov    edi,0x18
c001b35a:	56                   	push   esi
c001b35b:	53                   	push   ebx
c001b35c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b361:	83 ec 30             	sub    esp,0x30
c001b364:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b368:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b36b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b36e:	f7 f3                	div    ebx
c001b370:	89 d6                	mov    esi,edx
c001b372:	31 d2                	xor    edx,edx
c001b374:	f7 f3                	div    ebx
c001b376:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b379:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b37d:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b382:	31 d2                	xor    edx,edx
c001b384:	f7 f3                	div    ebx
c001b386:	31 d2                	xor    edx,edx
c001b388:	bb 0c 00 00 00       	mov    ebx,0xc
c001b38d:	f7 f7                	div    edi
c001b38f:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b392:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b396:	0f b7 cd             	movzx  ecx,bp
c001b399:	56                   	push   esi
c001b39a:	89 c7                	mov    edi,eax
c001b39c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b3a0:	c1 e6 10             	shl    esi,0x10
c001b3a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3a7:	83 e7 1f             	and    edi,0x1f
c001b3aa:	51                   	push   ecx
c001b3ab:	47                   	inc    edi
c001b3ac:	c1 e8 05             	shr    eax,0x5
c001b3af:	31 d2                	xor    edx,edx
c001b3b1:	f7 f3                	div    ebx
c001b3b3:	31 db                	xor    ebx,ebx
c001b3b5:	52                   	push   edx
c001b3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b3ba:	57                   	push   edi
c001b3bb:	68 29 bd 02 c0       	push   0xc002bd29
c001b3c0:	e8 31 7a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b3c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b3c9:	89 f8                	mov    eax,edi
c001b3cb:	31 c9                	xor    ecx,ecx
c001b3cd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b3d1:	88 c1                	mov    cl,al
c001b3d3:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b3d9:	88 d5                	mov    ch,dl
c001b3db:	c1 e0 10             	shl    eax,0x10
c001b3de:	0f b7 d1             	movzx  edx,cx
c001b3e1:	09 c2                	or     edx,eax
c001b3e3:	89 d8                	mov    eax,ebx
c001b3e5:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b3ea:	09 f0                	or     eax,esi
c001b3ec:	89 c3                	mov    ebx,eax
c001b3ee:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b3f2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b3f6:	83 c4 18             	add    esp,0x18
c001b3f9:	53                   	push   ebx
c001b3fa:	52                   	push   edx
c001b3fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3ff:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b403:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b407:	e8 cd 89 ff ff       	call   c0013dd9 <datetimeToSeconds(datetime_t)>
c001b40c:	83 c4 0c             	add    esp,0xc
c001b40f:	52                   	push   edx
c001b410:	50                   	push   eax
c001b411:	56                   	push   esi
c001b412:	e8 49 8b ff ff       	call   c0013f60 <secondsToDatetime(unsigned long long)>
c001b417:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b41b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b41f:	51                   	push   ecx
c001b420:	89 d6                	mov    esi,edx
c001b422:	51                   	push   ecx
c001b423:	c1 ee 10             	shr    esi,0x10
c001b426:	89 f3                	mov    ebx,esi
c001b428:	0f b6 f3             	movzx  esi,bl
c001b42b:	56                   	push   esi
c001b42c:	0f b6 f6             	movzx  esi,dh
c001b42f:	0f b6 d2             	movzx  edx,dl
c001b432:	56                   	push   esi
c001b433:	52                   	push   edx
c001b434:	89 c2                	mov    edx,eax
c001b436:	c1 ea 10             	shr    edx,0x10
c001b439:	52                   	push   edx
c001b43a:	0f b6 d4             	movzx  edx,ah
c001b43d:	0f b6 c0             	movzx  eax,al
c001b440:	52                   	push   edx
c001b441:	50                   	push   eax
c001b442:	68 45 bd 02 c0       	push   0xc002bd45
c001b447:	e8 aa 79 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b44c:	83 c4 2c             	add    esp,0x2c
c001b44f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b454:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b458:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b45c:	53                   	push   ebx
c001b45d:	51                   	push   ecx
c001b45e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b464:	e8 97 8a ff ff       	call   c0013f00 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b469:	83 f0 01             	xor    eax,0x1
c001b46c:	31 d2                	xor    edx,edx
c001b46e:	0f b6 c0             	movzx  eax,al
c001b471:	83 c4 3c             	add    esp,0x3c
c001b474:	5b                   	pop    ebx
c001b475:	5e                   	pop    esi
c001b476:	5f                   	pop    edi
c001b477:	5d                   	pop    ebp
c001b478:	c3                   	ret    

c001b479 <Sys::timezone(regs*)>:
c001b479:	53                   	push   ebx
c001b47a:	83 ec 08             	sub    esp,0x8
c001b47d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b481:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b485:	75 17                	jne    c001b49e <Sys::timezone(regs*)+0x25>
c001b487:	83 ec 0c             	sub    esp,0xc
c001b48a:	68 61 bd 02 c0       	push   0xc002bd61
c001b48f:	e8 62 79 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b494:	83 c8 ff             	or     eax,0xffffffff
c001b497:	83 c4 10             	add    esp,0x10
c001b49a:	89 c2                	mov    edx,eax
c001b49c:	eb 20                	jmp    c001b4be <Sys::timezone(regs*)+0x45>
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	68 99 bd 02 c0       	push   0xc002bd99
c001b4a6:	e8 4b 79 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b4ab:	58                   	pop    eax
c001b4ac:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b4af:	e8 ae 87 ff ff       	call   c0013c62 <User::loadClockSettings(int)>
c001b4b4:	83 c4 10             	add    esp,0x10
c001b4b7:	b8 01 00 00 00       	mov    eax,0x1
c001b4bc:	31 d2                	xor    edx,edx
c001b4be:	83 c4 08             	add    esp,0x8
c001b4c1:	5b                   	pop    ebx
c001b4c2:	c3                   	ret    

c001b4c3 <Sys::write(regs*)>:
c001b4c3:	57                   	push   edi
c001b4c4:	56                   	push   esi
c001b4c5:	53                   	push   ebx
c001b4c6:	83 ec 10             	sub    esp,0x10
c001b4c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4d0:	83 f8 02             	cmp    eax,0x2
c001b4d3:	77 10                	ja     c001b4e5 <Sys::write(regs*)+0x22>
c001b4d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4dd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b4e3:	eb 0e                	jmp    c001b4f3 <Sys::write(regs*)+0x30>
c001b4e5:	83 ec 0c             	sub    esp,0xc
c001b4e8:	50                   	push   eax
c001b4e9:	e8 db 64 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b4ee:	83 c4 10             	add    esp,0x10
c001b4f1:	89 c1                	mov    ecx,eax
c001b4f3:	83 c8 ff             	or     eax,0xffffffff
c001b4f6:	85 c9                	test   ecx,ecx
c001b4f8:	89 c2                	mov    edx,eax
c001b4fa:	74 28                	je     c001b524 <Sys::write(regs*)+0x61>
c001b4fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b504:	31 ff                	xor    edi,edi
c001b506:	83 ec 0c             	sub    esp,0xc
c001b509:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b50b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b50f:	52                   	push   edx
c001b510:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b513:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b516:	57                   	push   edi
c001b517:	56                   	push   esi
c001b518:	51                   	push   ecx
c001b519:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b51c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b520:	83 c4 20             	add    esp,0x20
c001b523:	99                   	cdq    
c001b524:	83 c4 10             	add    esp,0x10
c001b527:	5b                   	pop    ebx
c001b528:	5e                   	pop    esi
c001b529:	5f                   	pop    edi
c001b52a:	c3                   	ret    

c001b52b <Sys::wsbe(regs*)>:
c001b52b:	57                   	push   edi
c001b52c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b531:	56                   	push   esi
c001b532:	be d8 bd 02 c0       	mov    esi,0xc002bdd8
c001b537:	53                   	push   ebx
c001b538:	83 ec 30             	sub    esp,0x30
c001b53b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b53f:	fc                   	cld    
c001b540:	83 ec 0c             	sub    esp,0xc
c001b543:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b545:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b549:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b54e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b551:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b557:	8b 06                	mov    eax,DWORD PTR [esi]
c001b559:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b55c:	57                   	push   edi
c001b55d:	e8 32 52 fe ff       	call   c0000794 <strlen>
c001b562:	5a                   	pop    edx
c001b563:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b567:	52                   	push   edx
c001b568:	31 d2                	xor    edx,edx
c001b56a:	57                   	push   edi
c001b56b:	52                   	push   edx
c001b56c:	50                   	push   eax
c001b56d:	56                   	push   esi
c001b56e:	ff d3                	call   ebx
c001b570:	83 c4 14             	add    esp,0x14
c001b573:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b577:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b57a:	e8 80 31 00 00       	call   c001e6ff <terminateTask(int)>
c001b57f:	83 c4 40             	add    esp,0x40
c001b582:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b587:	5b                   	pop    ebx
c001b588:	31 d2                	xor    edx,edx
c001b58a:	5e                   	pop    esi
c001b58b:	5f                   	pop    edi
c001b58c:	c3                   	ret    

c001b58d <Sys::yield(regs*)>:
c001b58d:	57                   	push   edi
c001b58e:	56                   	push   esi
c001b58f:	53                   	push   ebx
c001b590:	e8 27 27 00 00       	call   c001dcbc <lockScheduler()>
c001b595:	e8 5e 2a 00 00       	call   c001dff8 <schedule()>
c001b59a:	e8 1f 27 00 00       	call   c001dcbe <unlockScheduler()>
c001b59f:	8b 35 90 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea90
c001b5a5:	8b 3d 94 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea94
c001b5ab:	89 f0                	mov    eax,esi
c001b5ad:	89 fb                	mov    ebx,edi
c001b5af:	89 f1                	mov    ecx,esi
c001b5b1:	c1 e0 07             	shl    eax,0x7
c001b5b4:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b5b8:	25 80 30 0f 00       	and    eax,0xf3080
c001b5bd:	c1 eb 17             	shr    ebx,0x17
c001b5c0:	31 c8                	xor    eax,ecx
c001b5c2:	89 da                	mov    edx,ebx
c001b5c4:	5b                   	pop    ebx
c001b5c5:	5e                   	pop    esi
c001b5c6:	5f                   	pop    edi
c001b5c7:	c3                   	ret    

c001b5c8 <sysCallSeekDir(regs*)>:
c001b5c8:	31 c0                	xor    eax,eax
c001b5ca:	31 d2                	xor    edx,edx
c001b5cc:	c3                   	ret    

c001b5cd <sysCallTellDir(regs*)>:
c001b5cd:	31 c0                	xor    eax,eax
c001b5cf:	31 d2                	xor    edx,edx
c001b5d1:	c3                   	ret    

c001b5d2 <sysCallVerify(regs*)>:
c001b5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5d6:	31 d2                	xor    edx,edx
c001b5d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5db:	c3                   	ret    

c001b5dc <sysFormatDisk(regs*)>:
c001b5dc:	56                   	push   esi
c001b5dd:	53                   	push   ebx
c001b5de:	53                   	push   ebx
c001b5df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5e3:	8b 1d 8c e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e58c
c001b5e9:	eb 25                	jmp    c001b610 <sysFormatDisk(regs*)+0x34>
c001b5eb:	83 ec 0c             	sub    esp,0xc
c001b5ee:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b5f3:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b5f6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b5f9:	50                   	push   eax
c001b5fa:	ff 34 85 20 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15e0]
c001b601:	53                   	push   ebx
c001b602:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b605:	83 c4 20             	add    esp,0x20
c001b608:	83 f8 08             	cmp    eax,0x8
c001b60b:	75 12                	jne    c001b61f <sysFormatDisk(regs*)+0x43>
c001b60d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b610:	85 db                	test   ebx,ebx
c001b612:	75 d7                	jne    c001b5eb <sysFormatDisk(regs*)+0xf>
c001b614:	59                   	pop    ecx
c001b615:	b8 03 00 00 00       	mov    eax,0x3
c001b61a:	31 d2                	xor    edx,edx
c001b61c:	5b                   	pop    ebx
c001b61d:	5e                   	pop    esi
c001b61e:	c3                   	ret    
c001b61f:	85 c0                	test   eax,eax
c001b621:	74 1b                	je     c001b63e <sysFormatDisk(regs*)+0x62>
c001b623:	83 f8 09             	cmp    eax,0x9
c001b626:	74 0b                	je     c001b633 <sysFormatDisk(regs*)+0x57>
c001b628:	59                   	pop    ecx
c001b629:	b8 02 00 00 00       	mov    eax,0x2
c001b62e:	31 d2                	xor    edx,edx
c001b630:	5b                   	pop    ebx
c001b631:	5e                   	pop    esi
c001b632:	c3                   	ret    
c001b633:	59                   	pop    ecx
c001b634:	b8 01 00 00 00       	mov    eax,0x1
c001b639:	31 d2                	xor    edx,edx
c001b63b:	5b                   	pop    ebx
c001b63c:	5e                   	pop    esi
c001b63d:	c3                   	ret    
c001b63e:	59                   	pop    ecx
c001b63f:	31 c0                	xor    eax,eax
c001b641:	31 d2                	xor    edx,edx
c001b643:	5b                   	pop    ebx
c001b644:	5e                   	pop    esi
c001b645:	c3                   	ret    

c001b646 <sysSetDiskVolumeLabel(regs*)>:
c001b646:	56                   	push   esi
c001b647:	53                   	push   ebx
c001b648:	53                   	push   ebx
c001b649:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b64d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b650:	83 f8 19             	cmp    eax,0x19
c001b653:	77 29                	ja     c001b67e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b655:	8b 0c 85 20 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd15e0]
c001b65c:	85 c9                	test   ecx,ecx
c001b65e:	74 1e                	je     c001b67e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b660:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b663:	85 d2                	test   edx,edx
c001b665:	74 17                	je     c001b67e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b667:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b66d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b66f:	52                   	push   edx
c001b670:	50                   	push   eax
c001b671:	51                   	push   ecx
c001b672:	53                   	push   ebx
c001b673:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b676:	83 c4 10             	add    esp,0x10
c001b679:	99                   	cdq    
c001b67a:	59                   	pop    ecx
c001b67b:	5b                   	pop    ebx
c001b67c:	5e                   	pop    esi
c001b67d:	c3                   	ret    
c001b67e:	59                   	pop    ecx
c001b67f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b684:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b689:	5b                   	pop    ebx
c001b68a:	5e                   	pop    esi
c001b68b:	c3                   	ret    

c001b68c <sysGetDiskVolumeLabel(regs*)>:
c001b68c:	57                   	push   edi
c001b68d:	56                   	push   esi
c001b68e:	53                   	push   ebx
c001b68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b693:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b696:	83 fa 19             	cmp    edx,0x19
c001b699:	77 34                	ja     c001b6cf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b69b:	8b 0c 95 20 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd15e0]
c001b6a2:	85 c9                	test   ecx,ecx
c001b6a4:	74 29                	je     c001b6cf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6a6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b6a9:	85 db                	test   ebx,ebx
c001b6ab:	74 22                	je     c001b6cf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6ad:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b6b0:	85 c0                	test   eax,eax
c001b6b2:	74 1b                	je     c001b6cf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6b4:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b6ba:	83 ec 0c             	sub    esp,0xc
c001b6bd:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b6bf:	50                   	push   eax
c001b6c0:	53                   	push   ebx
c001b6c1:	52                   	push   edx
c001b6c2:	51                   	push   ecx
c001b6c3:	56                   	push   esi
c001b6c4:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b6c7:	83 c4 20             	add    esp,0x20
c001b6ca:	99                   	cdq    
c001b6cb:	5b                   	pop    ebx
c001b6cc:	5e                   	pop    esi
c001b6cd:	5f                   	pop    edi
c001b6ce:	c3                   	ret    
c001b6cf:	5b                   	pop    ebx
c001b6d0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6da:	5e                   	pop    esi
c001b6db:	5f                   	pop    edi
c001b6dc:	c3                   	ret    

c001b6dd <sysShutdown(regs*)>:
c001b6dd:	83 ec 0c             	sub    esp,0xc
c001b6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6e7:	85 c0                	test   eax,eax
c001b6e9:	74 18                	je     c001b703 <sysShutdown(regs*)+0x26>
c001b6eb:	83 f8 01             	cmp    eax,0x1
c001b6ee:	74 38                	je     c001b728 <sysShutdown(regs*)+0x4b>
c001b6f0:	83 f8 02             	cmp    eax,0x2
c001b6f3:	74 24                	je     c001b719 <sysShutdown(regs*)+0x3c>
c001b6f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6ff:	83 c4 0c             	add    esp,0xc
c001b702:	c3                   	ret    
c001b703:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b708:	8b 10                	mov    edx,DWORD PTR [eax]
c001b70a:	6a 00                	push   0x0
c001b70c:	6a 00                	push   0x0
c001b70e:	6a 00                	push   0x0
c001b710:	50                   	push   eax
c001b711:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	eb dc                	jmp    c001b6f5 <sysShutdown(regs*)+0x18>
c001b719:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b71e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b720:	6a 00                	push   0x0
c001b722:	6a 00                	push   0x0
c001b724:	6a 01                	push   0x1
c001b726:	eb e8                	jmp    c001b710 <sysShutdown(regs*)+0x33>
c001b728:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001b72d:	85 c0                	test   eax,eax
c001b72f:	74 02                	je     c001b733 <sysShutdown(regs*)+0x56>
c001b731:	ff d0                	call   eax
c001b733:	31 c0                	xor    eax,eax
c001b735:	31 d2                	xor    edx,edx
c001b737:	83 c4 0c             	add    esp,0xc
c001b73a:	c3                   	ret    

c001b73b <sysCallRealpath(regs*)>:
c001b73b:	83 ec 0c             	sub    esp,0xc
c001b73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b742:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b745:	85 d2                	test   edx,edx
c001b747:	74 07                	je     c001b750 <sysCallRealpath(regs*)+0x15>
c001b749:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b74c:	85 c0                	test   eax,eax
c001b74e:	75 0b                	jne    c001b75b <sysCallRealpath(regs*)+0x20>
c001b750:	b8 01 00 00 00       	mov    eax,0x1
c001b755:	31 d2                	xor    edx,edx
c001b757:	83 c4 0c             	add    esp,0xc
c001b75a:	c3                   	ret    
c001b75b:	51                   	push   ecx
c001b75c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b762:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b765:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b76b:	51                   	push   ecx
c001b76c:	52                   	push   edx
c001b76d:	50                   	push   eax
c001b76e:	e8 31 7a ff ff       	call   c00131a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	31 c0                	xor    eax,eax
c001b778:	31 d2                	xor    edx,edx
c001b77a:	83 c4 0c             	add    esp,0xc
c001b77d:	c3                   	ret    

c001b77e <sysCallGetArgc(regs*)>:
c001b77e:	83 ec 14             	sub    esp,0x14
c001b781:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b786:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b789:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b78f:	68 04 be 02 c0       	push   0xc002be04
c001b794:	e8 5d 76 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b799:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b79e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7a1:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b7a7:	83 c4 1c             	add    esp,0x1c
c001b7aa:	99                   	cdq    
c001b7ab:	c3                   	ret    

c001b7ac <sysCallReadDir(regs*)>:
c001b7ac:	53                   	push   ebx
c001b7ad:	83 ec 18             	sub    esp,0x18
c001b7b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7b4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7b7:	83 f8 02             	cmp    eax,0x2
c001b7ba:	76 53                	jbe    c001b80f <sysCallReadDir(regs*)+0x63>
c001b7bc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b7bf:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b7c5:	77 4f                	ja     c001b816 <sysCallReadDir(regs*)+0x6a>
c001b7c7:	83 ec 0c             	sub    esp,0xc
c001b7ca:	50                   	push   eax
c001b7cb:	e8 f9 61 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	85 c0                	test   eax,eax
c001b7d5:	74 50                	je     c001b827 <sysCallReadDir(regs*)+0x7b>
c001b7d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b7df:	83 ec 0c             	sub    esp,0xc
c001b7e2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7e4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b7e8:	51                   	push   ecx
c001b7e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7ec:	6a 00                	push   0x0
c001b7ee:	68 10 01 00 00       	push   0x110
c001b7f3:	50                   	push   eax
c001b7f4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7f7:	83 c4 20             	add    esp,0x20
c001b7fa:	85 c0                	test   eax,eax
c001b7fc:	74 38                	je     c001b836 <sysCallReadDir(regs*)+0x8a>
c001b7fe:	83 f8 07             	cmp    eax,0x7
c001b801:	74 0c                	je     c001b80f <sysCallReadDir(regs*)+0x63>
c001b803:	b8 02 00 00 00       	mov    eax,0x2
c001b808:	31 d2                	xor    edx,edx
c001b80a:	83 c4 18             	add    esp,0x18
c001b80d:	5b                   	pop    ebx
c001b80e:	c3                   	ret    
c001b80f:	b8 01 00 00 00       	mov    eax,0x1
c001b814:	eb f2                	jmp    c001b808 <sysCallReadDir(regs*)+0x5c>
c001b816:	83 ec 08             	sub    esp,0x8
c001b819:	52                   	push   edx
c001b81a:	68 1c bf 02 c0       	push   0xc002bf1c
c001b81f:	e8 d2 75 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b82c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b831:	83 c4 18             	add    esp,0x18
c001b834:	5b                   	pop    ebx
c001b835:	c3                   	ret    
c001b836:	31 c0                	xor    eax,eax
c001b838:	eb ce                	jmp    c001b808 <sysCallReadDir(regs*)+0x5c>

c001b83a <sysCallIsATTY(regs*)>:
c001b83a:	83 ec 0c             	sub    esp,0xc
c001b83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b841:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b844:	83 f8 02             	cmp    eax,0x2
c001b847:	76 07                	jbe    c001b850 <sysCallIsATTY(regs*)+0x16>
c001b849:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b84e:	75 26                	jne    c001b876 <sysCallIsATTY(regs*)+0x3c>
c001b850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b855:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b858:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b85e:	85 c0                	test   eax,eax
c001b860:	74 24                	je     c001b886 <sysCallIsATTY(regs*)+0x4c>
c001b862:	83 ec 0c             	sub    esp,0xc
c001b865:	8b 10                	mov    edx,DWORD PTR [eax]
c001b867:	50                   	push   eax
c001b868:	ff 12                	call   DWORD PTR [edx]
c001b86a:	31 d2                	xor    edx,edx
c001b86c:	0f b6 c0             	movzx  eax,al
c001b86f:	83 c4 10             	add    esp,0x10
c001b872:	83 c4 0c             	add    esp,0xc
c001b875:	c3                   	ret    
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	50                   	push   eax
c001b87a:	e8 4a 61 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b87f:	83 c4 10             	add    esp,0x10
c001b882:	85 c0                	test   eax,eax
c001b884:	75 dc                	jne    c001b862 <sysCallIsATTY(regs*)+0x28>
c001b886:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b88b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b890:	83 c4 0c             	add    esp,0xc
c001b893:	c3                   	ret    

c001b894 <sysCallSeek(regs*)>:
c001b894:	53                   	push   ebx
c001b895:	83 ec 08             	sub    esp,0x8
c001b898:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b89c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b89f:	83 f8 02             	cmp    eax,0x2
c001b8a2:	76 4a                	jbe    c001b8ee <sysCallSeek(regs*)+0x5a>
c001b8a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8a9:	77 32                	ja     c001b8dd <sysCallSeek(regs*)+0x49>
c001b8ab:	83 ec 0c             	sub    esp,0xc
c001b8ae:	50                   	push   eax
c001b8af:	e8 15 61 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b8b4:	83 c4 0c             	add    esp,0xc
c001b8b7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8ba:	31 db                	xor    ebx,ebx
c001b8bc:	53                   	push   ebx
c001b8bd:	51                   	push   ecx
c001b8be:	50                   	push   eax
c001b8bf:	e8 ac 7b ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	85 c0                	test   eax,eax
c001b8c9:	0f 95 c0             	setne  al
c001b8cc:	31 d2                	xor    edx,edx
c001b8ce:	0f b6 c0             	movzx  eax,al
c001b8d1:	f7 d8                	neg    eax
c001b8d3:	83 d2 00             	adc    edx,0x0
c001b8d6:	83 c4 08             	add    esp,0x8
c001b8d9:	f7 da                	neg    edx
c001b8db:	5b                   	pop    ebx
c001b8dc:	c3                   	ret    
c001b8dd:	83 ec 08             	sub    esp,0x8
c001b8e0:	50                   	push   eax
c001b8e1:	68 0f be 02 c0       	push   0xc002be0f
c001b8e6:	e8 0b 75 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b8eb:	83 c4 10             	add    esp,0x10
c001b8ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8f8:	83 c4 08             	add    esp,0x8
c001b8fb:	5b                   	pop    ebx
c001b8fc:	c3                   	ret    

c001b8fd <sysCallTell(regs*)>:
c001b8fd:	53                   	push   ebx
c001b8fe:	83 ec 08             	sub    esp,0x8
c001b901:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b905:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b908:	83 f8 02             	cmp    eax,0x2
c001b90b:	76 5e                	jbe    c001b96b <sysCallTell(regs*)+0x6e>
c001b90d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b912:	77 2d                	ja     c001b941 <sysCallTell(regs*)+0x44>
c001b914:	83 ec 0c             	sub    esp,0xc
c001b917:	50                   	push   eax
c001b918:	e8 ac 60 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b91d:	5a                   	pop    edx
c001b91e:	59                   	pop    ecx
c001b91f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b922:	50                   	push   eax
c001b923:	e8 9e 7b ff ff       	call   c00134c6 <File::tell(unsigned long long*)>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	85 c0                	test   eax,eax
c001b92d:	0f 95 c0             	setne  al
c001b930:	31 d2                	xor    edx,edx
c001b932:	0f b6 c0             	movzx  eax,al
c001b935:	f7 d8                	neg    eax
c001b937:	83 d2 00             	adc    edx,0x0
c001b93a:	83 c4 08             	add    esp,0x8
c001b93d:	f7 da                	neg    edx
c001b93f:	5b                   	pop    ebx
c001b940:	c3                   	ret    
c001b941:	83 ec 08             	sub    esp,0x8
c001b944:	50                   	push   eax
c001b945:	68 29 be 02 c0       	push   0xc002be29
c001b94a:	e8 a7 74 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b94f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b952:	83 c4 10             	add    esp,0x10
c001b955:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b95b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b962:	31 d2                	xor    edx,edx
c001b964:	31 c0                	xor    eax,eax
c001b966:	83 c4 08             	add    esp,0x8
c001b969:	5b                   	pop    ebx
c001b96a:	c3                   	ret    
c001b96b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b970:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b975:	83 c4 08             	add    esp,0x8
c001b978:	5b                   	pop    ebx
c001b979:	c3                   	ret    

c001b97a <sysCallSize(regs*)>:
c001b97a:	53                   	push   ebx
c001b97b:	83 ec 18             	sub    esp,0x18
c001b97e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b982:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b985:	83 f8 02             	cmp    eax,0x2
c001b988:	76 64                	jbe    c001b9ee <sysCallSize(regs*)+0x74>
c001b98a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b98f:	77 33                	ja     c001b9c4 <sysCallSize(regs*)+0x4a>
c001b991:	83 ec 0c             	sub    esp,0xc
c001b994:	50                   	push   eax
c001b995:	e8 2f 60 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b99a:	83 c4 0c             	add    esp,0xc
c001b99d:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9a1:	52                   	push   edx
c001b9a2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9a5:	50                   	push   eax
c001b9a6:	e8 b3 7c ff ff       	call   c001365e <File::stat(unsigned long long*, bool*)>
c001b9ab:	83 c4 10             	add    esp,0x10
c001b9ae:	85 c0                	test   eax,eax
c001b9b0:	0f 95 c0             	setne  al
c001b9b3:	31 d2                	xor    edx,edx
c001b9b5:	0f b6 c0             	movzx  eax,al
c001b9b8:	f7 d8                	neg    eax
c001b9ba:	83 d2 00             	adc    edx,0x0
c001b9bd:	83 c4 18             	add    esp,0x18
c001b9c0:	f7 da                	neg    edx
c001b9c2:	5b                   	pop    ebx
c001b9c3:	c3                   	ret    
c001b9c4:	83 ec 08             	sub    esp,0x8
c001b9c7:	50                   	push   eax
c001b9c8:	68 43 be 02 c0       	push   0xc002be43
c001b9cd:	e8 24 74 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001b9d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9d5:	83 c4 10             	add    esp,0x10
c001b9d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9e5:	31 d2                	xor    edx,edx
c001b9e7:	31 c0                	xor    eax,eax
c001b9e9:	83 c4 18             	add    esp,0x18
c001b9ec:	5b                   	pop    ebx
c001b9ed:	c3                   	ret    
c001b9ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9f8:	83 c4 18             	add    esp,0x18
c001b9fb:	5b                   	pop    ebx
c001b9fc:	c3                   	ret    

c001b9fd <sysCallSizeFromFilename(regs*)>:
c001b9fd:	57                   	push   edi
c001b9fe:	56                   	push   esi
c001b9ff:	53                   	push   ebx
c001ba00:	83 ec 20             	sub    esp,0x20
c001ba03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba07:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba0a:	83 fb 02             	cmp    ebx,0x2
c001ba0d:	0f 86 99 00 00 00    	jbe    c001baac <sysCallSizeFromFilename(regs*)+0xaf>
c001ba13:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba19:	77 65                	ja     c001ba80 <sysCallSizeFromFilename(regs*)+0x83>
c001ba1b:	83 ec 0c             	sub    esp,0xc
c001ba1e:	68 14 01 00 00       	push   0x114
c001ba23:	e8 18 3e ff ff       	call   c000f840 <malloc>
c001ba28:	83 c4 0c             	add    esp,0xc
c001ba2b:	89 c6                	mov    esi,eax
c001ba2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba32:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba35:	53                   	push   ebx
c001ba36:	56                   	push   esi
c001ba37:	e8 12 79 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001ba3c:	83 c4 0c             	add    esp,0xc
c001ba3f:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba43:	50                   	push   eax
c001ba44:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ba47:	56                   	push   esi
c001ba48:	e8 11 7c ff ff       	call   c001365e <File::stat(unsigned long long*, bool*)>
c001ba4d:	83 c4 10             	add    esp,0x10
c001ba50:	85 f6                	test   esi,esi
c001ba52:	74 14                	je     c001ba68 <sysCallSizeFromFilename(regs*)+0x6b>
c001ba54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba58:	8b 16                	mov    edx,DWORD PTR [esi]
c001ba5a:	83 ec 0c             	sub    esp,0xc
c001ba5d:	56                   	push   esi
c001ba5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba61:	83 c4 10             	add    esp,0x10
c001ba64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba68:	85 c0                	test   eax,eax
c001ba6a:	0f 95 c0             	setne  al
c001ba6d:	31 d2                	xor    edx,edx
c001ba6f:	0f b6 c0             	movzx  eax,al
c001ba72:	f7 d8                	neg    eax
c001ba74:	83 d2 00             	adc    edx,0x0
c001ba77:	83 c4 20             	add    esp,0x20
c001ba7a:	f7 da                	neg    edx
c001ba7c:	5b                   	pop    ebx
c001ba7d:	5e                   	pop    esi
c001ba7e:	5f                   	pop    edi
c001ba7f:	c3                   	ret    
c001ba80:	83 ec 08             	sub    esp,0x8
c001ba83:	53                   	push   ebx
c001ba84:	68 43 be 02 c0       	push   0xc002be43
c001ba89:	e8 68 73 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ba8e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ba91:	83 c4 10             	add    esp,0x10
c001ba94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baa1:	31 d2                	xor    edx,edx
c001baa3:	83 c4 20             	add    esp,0x20
c001baa6:	31 c0                	xor    eax,eax
c001baa8:	5b                   	pop    ebx
c001baa9:	5e                   	pop    esi
c001baaa:	5f                   	pop    edi
c001baab:	c3                   	ret    
c001baac:	83 c4 20             	add    esp,0x20
c001baaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bab4:	5b                   	pop    ebx
c001bab5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baba:	5e                   	pop    esi
c001babb:	5f                   	pop    edi
c001babc:	c3                   	ret    

c001babd <sysCallClose(regs*)>:
c001babd:	53                   	push   ebx
c001babe:	83 ec 08             	sub    esp,0x8
c001bac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bac8:	83 f8 02             	cmp    eax,0x2
c001bacb:	76 50                	jbe    c001bb1d <sysCallClose(regs*)+0x60>
c001bacd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bad2:	74 58                	je     c001bb2c <sysCallClose(regs*)+0x6f>
c001bad4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bad9:	74 60                	je     c001bb3b <sysCallClose(regs*)+0x7e>
c001badb:	77 2f                	ja     c001bb0c <sysCallClose(regs*)+0x4f>
c001badd:	83 ec 0c             	sub    esp,0xc
c001bae0:	50                   	push   eax
c001bae1:	e8 e3 5e ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001bae6:	89 c3                	mov    ebx,eax
c001bae8:	89 04 24             	mov    DWORD PTR [esp],eax
c001baeb:	e8 20 79 ff ff       	call   c0013410 <File::close()>
c001baf0:	83 c4 10             	add    esp,0x10
c001baf3:	85 db                	test   ebx,ebx
c001baf5:	74 0c                	je     c001bb03 <sysCallClose(regs*)+0x46>
c001baf7:	83 ec 0c             	sub    esp,0xc
c001bafa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bafc:	53                   	push   ebx
c001bafd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb00:	83 c4 10             	add    esp,0x10
c001bb03:	31 c0                	xor    eax,eax
c001bb05:	31 d2                	xor    edx,edx
c001bb07:	83 c4 08             	add    esp,0x8
c001bb0a:	5b                   	pop    ebx
c001bb0b:	c3                   	ret    
c001bb0c:	83 ec 08             	sub    esp,0x8
c001bb0f:	50                   	push   eax
c001bb10:	68 40 bf 02 c0       	push   0xc002bf40
c001bb15:	e8 dc 72 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bb1a:	83 c4 10             	add    esp,0x10
c001bb1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb22:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb27:	83 c4 08             	add    esp,0x8
c001bb2a:	5b                   	pop    ebx
c001bb2b:	c3                   	ret    
c001bb2c:	83 ec 0c             	sub    esp,0xc
c001bb2f:	68 5e be 02 c0       	push   0xc002be5e
c001bb34:	e8 bd 72 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bb39:	eb c5                	jmp    c001bb00 <sysCallClose(regs*)+0x43>
c001bb3b:	83 ec 0c             	sub    esp,0xc
c001bb3e:	68 6c be 02 c0       	push   0xc002be6c
c001bb43:	eb ef                	jmp    c001bb34 <sysCallClose(regs*)+0x77>

c001bb45 <sysCallOpenDir(regs*)>:
c001bb45:	56                   	push   esi
c001bb46:	53                   	push   ebx
c001bb47:	53                   	push   ebx
c001bb48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb4c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb4f:	85 f6                	test   esi,esi
c001bb51:	74 59                	je     c001bbac <sysCallOpenDir(regs*)+0x67>
c001bb53:	83 ec 0c             	sub    esp,0xc
c001bb56:	68 14 01 00 00       	push   0x114
c001bb5b:	e8 e0 3c ff ff       	call   c000f840 <malloc>
c001bb60:	83 c4 0c             	add    esp,0xc
c001bb63:	89 c6                	mov    esi,eax
c001bb65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb6a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb70:	56                   	push   esi
c001bb71:	e8 84 7c ff ff       	call   c00137fa <Directory::Directory(char const*, Process*)>
c001bb76:	83 c4 10             	add    esp,0x10
c001bb79:	85 f6                	test   esi,esi
c001bb7b:	74 2f                	je     c001bbac <sysCallOpenDir(regs*)+0x67>
c001bb7d:	83 ec 0c             	sub    esp,0xc
c001bb80:	56                   	push   esi
c001bb81:	e8 d8 7c ff ff       	call   c001385e <Directory::open()>
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	85 c0                	test   eax,eax
c001bb8b:	75 1f                	jne    c001bbac <sysCallOpenDir(regs*)+0x67>
c001bb8d:	83 ec 0c             	sub    esp,0xc
c001bb90:	56                   	push   esi
c001bb91:	e8 3e 5b ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001bb96:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb99:	83 c4 10             	add    esp,0x10
c001bb9c:	89 02                	mov    DWORD PTR [edx],eax
c001bb9e:	c1 f8 1f             	sar    eax,0x1f
c001bba1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bba4:	31 c0                	xor    eax,eax
c001bba6:	59                   	pop    ecx
c001bba7:	31 d2                	xor    edx,edx
c001bba9:	5b                   	pop    ebx
c001bbaa:	5e                   	pop    esi
c001bbab:	c3                   	ret    
c001bbac:	59                   	pop    ecx
c001bbad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb7:	5b                   	pop    ebx
c001bbb8:	5e                   	pop    esi
c001bbb9:	c3                   	ret    

c001bbba <sysCallCloseDir(regs*)>:
c001bbba:	53                   	push   ebx
c001bbbb:	83 ec 08             	sub    esp,0x8
c001bbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbc5:	83 f8 02             	cmp    eax,0x2
c001bbc8:	76 47                	jbe    c001bc11 <sysCallCloseDir(regs*)+0x57>
c001bbca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbcf:	77 2f                	ja     c001bc00 <sysCallCloseDir(regs*)+0x46>
c001bbd1:	83 ec 0c             	sub    esp,0xc
c001bbd4:	50                   	push   eax
c001bbd5:	e8 ef 5d ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001bbda:	89 c3                	mov    ebx,eax
c001bbdc:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbdf:	e8 d6 7c ff ff       	call   c00138ba <Directory::close()>
c001bbe4:	83 c4 10             	add    esp,0x10
c001bbe7:	85 db                	test   ebx,ebx
c001bbe9:	74 0c                	je     c001bbf7 <sysCallCloseDir(regs*)+0x3d>
c001bbeb:	83 ec 0c             	sub    esp,0xc
c001bbee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbf0:	53                   	push   ebx
c001bbf1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbf4:	83 c4 10             	add    esp,0x10
c001bbf7:	31 c0                	xor    eax,eax
c001bbf9:	31 d2                	xor    edx,edx
c001bbfb:	83 c4 08             	add    esp,0x8
c001bbfe:	5b                   	pop    ebx
c001bbff:	c3                   	ret    
c001bc00:	83 ec 08             	sub    esp,0x8
c001bc03:	50                   	push   eax
c001bc04:	68 68 bf 02 c0       	push   0xc002bf68
c001bc09:	e8 e8 71 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc16:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc1b:	83 c4 08             	add    esp,0x8
c001bc1e:	5b                   	pop    ebx
c001bc1f:	c3                   	ret    

c001bc20 <sysCallMakeDir(regs*)>:
c001bc20:	56                   	push   esi
c001bc21:	53                   	push   ebx
c001bc22:	83 ec 10             	sub    esp,0x10
c001bc25:	68 14 01 00 00       	push   0x114
c001bc2a:	e8 11 3c ff ff       	call   c000f840 <malloc>
c001bc2f:	83 c4 0c             	add    esp,0xc
c001bc32:	89 c3                	mov    ebx,eax
c001bc34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc39:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc40:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc43:	53                   	push   ebx
c001bc44:	e8 b1 7b ff ff       	call   c00137fa <Directory::Directory(char const*, Process*)>
c001bc49:	83 c4 10             	add    esp,0x10
c001bc4c:	85 db                	test   ebx,ebx
c001bc4e:	74 32                	je     c001bc82 <sysCallMakeDir(regs*)+0x62>
c001bc50:	83 ec 0c             	sub    esp,0xc
c001bc53:	53                   	push   ebx
c001bc54:	e8 e5 7d ff ff       	call   c0013a3e <Directory::create()>
c001bc59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc5c:	89 c6                	mov    esi,eax
c001bc5e:	e8 57 7c ff ff       	call   c00138ba <Directory::close()>
c001bc63:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc6b:	83 c4 10             	add    esp,0x10
c001bc6e:	31 c0                	xor    eax,eax
c001bc70:	59                   	pop    ecx
c001bc71:	85 f6                	test   esi,esi
c001bc73:	5b                   	pop    ebx
c001bc74:	0f 95 c0             	setne  al
c001bc77:	5e                   	pop    esi
c001bc78:	31 d2                	xor    edx,edx
c001bc7a:	f7 d8                	neg    eax
c001bc7c:	83 d2 00             	adc    edx,0x0
c001bc7f:	f7 da                	neg    edx
c001bc81:	c3                   	ret    
c001bc82:	59                   	pop    ecx
c001bc83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc88:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8d:	5b                   	pop    ebx
c001bc8e:	5e                   	pop    esi
c001bc8f:	c3                   	ret    

c001bc90 <sysCallWait(regs*)>:
c001bc90:	83 ec 10             	sub    esp,0x10
c001bc93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc97:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc9a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc9d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bca0:	e8 ce 24 00 00       	call   c001e173 <waitTask(int, int*, int)>
c001bca5:	83 c4 1c             	add    esp,0x1c
c001bca8:	99                   	cdq    
c001bca9:	c3                   	ret    

c001bcaa <sysCallNotImpl(regs*)>:
c001bcaa:	83 ec 18             	sub    esp,0x18
c001bcad:	68 7a be 02 c0       	push   0xc002be7a
c001bcb2:	e8 e0 e7 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001bcb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcbc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcc1:	83 c4 1c             	add    esp,0x1c
c001bcc4:	c3                   	ret    

c001bcc5 <sysPanic(regs*)>:
c001bcc5:	83 ec 18             	sub    esp,0x18
c001bcc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bccc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bccf:	e8 c3 e7 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001bcd4:	c7 04 24 94 be 02 c0 	mov    DWORD PTR [esp],0xc002be94
c001bcdb:	e8 b7 e7 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001bce0:	b8 01 00 00 00       	mov    eax,0x1
c001bce5:	31 d2                	xor    edx,edx
c001bce7:	83 c4 1c             	add    esp,0x1c
c001bcea:	c3                   	ret    

c001bceb <sysCallRmdir(regs*)>:
c001bceb:	56                   	push   esi
c001bcec:	53                   	push   ebx
c001bced:	83 ec 20             	sub    esp,0x20
c001bcf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcf4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcf7:	68 14 01 00 00       	push   0x114
c001bcfc:	e8 3f 3b ff ff       	call   c000f840 <malloc>
c001bd01:	83 c4 0c             	add    esp,0xc
c001bd04:	89 c3                	mov    ebx,eax
c001bd06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd0e:	56                   	push   esi
c001bd0f:	53                   	push   ebx
c001bd10:	e8 39 76 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001bd15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd18:	e8 0d 78 ff ff       	call   c001352a <File::unlink()>
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	85 db                	test   ebx,ebx
c001bd22:	74 14                	je     c001bd38 <sysCallRmdir(regs*)+0x4d>
c001bd24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd28:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd2a:	83 ec 0c             	sub    esp,0xc
c001bd2d:	53                   	push   ebx
c001bd2e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd38:	85 c0                	test   eax,eax
c001bd3a:	0f 95 c0             	setne  al
c001bd3d:	31 d2                	xor    edx,edx
c001bd3f:	0f b6 c0             	movzx  eax,al
c001bd42:	f7 d8                	neg    eax
c001bd44:	83 d2 00             	adc    edx,0x0
c001bd47:	83 c4 14             	add    esp,0x14
c001bd4a:	f7 da                	neg    edx
c001bd4c:	5b                   	pop    ebx
c001bd4d:	5e                   	pop    esi
c001bd4e:	c3                   	ret    

c001bd4f <sysCallUnlink(regs*)>:
c001bd4f:	56                   	push   esi
c001bd50:	53                   	push   ebx
c001bd51:	83 ec 20             	sub    esp,0x20
c001bd54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd58:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd5b:	68 14 01 00 00       	push   0x114
c001bd60:	e8 db 3a ff ff       	call   c000f840 <malloc>
c001bd65:	83 c4 0c             	add    esp,0xc
c001bd68:	89 c3                	mov    ebx,eax
c001bd6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd6f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd72:	56                   	push   esi
c001bd73:	53                   	push   ebx
c001bd74:	e8 d5 75 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001bd79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd7c:	e8 a9 77 ff ff       	call   c001352a <File::unlink()>
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	85 db                	test   ebx,ebx
c001bd86:	74 14                	je     c001bd9c <sysCallUnlink(regs*)+0x4d>
c001bd88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd8e:	83 ec 0c             	sub    esp,0xc
c001bd91:	53                   	push   ebx
c001bd92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd95:	83 c4 10             	add    esp,0x10
c001bd98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd9c:	85 c0                	test   eax,eax
c001bd9e:	0f 95 c0             	setne  al
c001bda1:	31 d2                	xor    edx,edx
c001bda3:	0f b6 c0             	movzx  eax,al
c001bda6:	f7 d8                	neg    eax
c001bda8:	83 d2 00             	adc    edx,0x0
c001bdab:	83 c4 14             	add    esp,0x14
c001bdae:	f7 da                	neg    edx
c001bdb0:	5b                   	pop    ebx
c001bdb1:	5e                   	pop    esi
c001bdb2:	c3                   	ret    

c001bdb3 <sysCallGetArgv(regs*)>:
c001bdb3:	83 ec 0c             	sub    esp,0xc
c001bdb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdba:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bdbd:	85 c0                	test   eax,eax
c001bdbf:	78 2b                	js     c001bdec <sysCallGetArgv(regs*)+0x39>
c001bdc1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bdc7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bdca:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bdd0:	7d 1a                	jge    c001bdec <sysCallGetArgv(regs*)+0x39>
c001bdd2:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bdd9:	85 c0                	test   eax,eax
c001bddb:	74 17                	je     c001bdf4 <sysCallGetArgv(regs*)+0x41>
c001bddd:	83 ec 08             	sub    esp,0x8
c001bde0:	50                   	push   eax
c001bde1:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bde4:	e8 4b 4a fe ff       	call   c0000834 <strcpy>
c001bde9:	83 c4 10             	add    esp,0x10
c001bdec:	31 c0                	xor    eax,eax
c001bdee:	31 d2                	xor    edx,edx
c001bdf0:	83 c4 0c             	add    esp,0xc
c001bdf3:	c3                   	ret    
c001bdf4:	b8 01 00 00 00       	mov    eax,0x1
c001bdf9:	31 d2                	xor    edx,edx
c001bdfb:	83 c4 0c             	add    esp,0xc
c001bdfe:	c3                   	ret    

c001bdff <sysCallTTYName(regs*)>:
c001bdff:	56                   	push   esi
c001be00:	53                   	push   ebx
c001be01:	53                   	push   ebx
c001be02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be06:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be09:	85 c0                	test   eax,eax
c001be0b:	74 5f                	je     c001be6c <sysCallTTYName(regs*)+0x6d>
c001be0d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be10:	83 f8 02             	cmp    eax,0x2
c001be13:	77 3e                	ja     c001be53 <sysCallTTYName(regs*)+0x54>
c001be15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be1d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be23:	85 db                	test   ebx,ebx
c001be25:	74 45                	je     c001be6c <sysCallTTYName(regs*)+0x6d>
c001be27:	83 ec 0c             	sub    esp,0xc
c001be2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be2c:	53                   	push   ebx
c001be2d:	ff 10                	call   DWORD PTR [eax]
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	84 c0                	test   al,al
c001be34:	74 41                	je     c001be77 <sysCallTTYName(regs*)+0x78>
c001be36:	83 ec 08             	sub    esp,0x8
c001be39:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001be3f:	53                   	push   ebx
c001be40:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be43:	e8 ec 49 fe ff       	call   c0000834 <strcpy>
c001be48:	83 c4 10             	add    esp,0x10
c001be4b:	31 c0                	xor    eax,eax
c001be4d:	59                   	pop    ecx
c001be4e:	31 d2                	xor    edx,edx
c001be50:	5b                   	pop    ebx
c001be51:	5e                   	pop    esi
c001be52:	c3                   	ret    
c001be53:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be58:	74 bb                	je     c001be15 <sysCallTTYName(regs*)+0x16>
c001be5a:	83 ec 0c             	sub    esp,0xc
c001be5d:	50                   	push   eax
c001be5e:	e8 66 5b ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	89 c3                	mov    ebx,eax
c001be68:	85 db                	test   ebx,ebx
c001be6a:	75 bb                	jne    c001be27 <sysCallTTYName(regs*)+0x28>
c001be6c:	59                   	pop    ecx
c001be6d:	b8 01 00 00 00       	mov    eax,0x1
c001be72:	31 d2                	xor    edx,edx
c001be74:	5b                   	pop    ebx
c001be75:	5e                   	pop    esi
c001be76:	c3                   	ret    
c001be77:	59                   	pop    ecx
c001be78:	b8 02 00 00 00       	mov    eax,0x2
c001be7d:	31 d2                	xor    edx,edx
c001be7f:	5b                   	pop    ebx
c001be80:	5e                   	pop    esi
c001be81:	c3                   	ret    

c001be82 <sysCallUSleep(regs*)>:
c001be82:	83 ec 14             	sub    esp,0x14
c001be85:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be8a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be8e:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be95:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be98:	01 ca                	add    edx,ecx
c001be9a:	52                   	push   edx
c001be9b:	50                   	push   eax
c001be9c:	e8 6b 23 00 00       	call   c001e20c <nanoSleep(unsigned long long)>
c001bea1:	31 c0                	xor    eax,eax
c001bea3:	31 d2                	xor    edx,edx
c001bea5:	83 c4 1c             	add    esp,0x1c
c001bea8:	c3                   	ret    

c001bea9 <sysCallSpawn(regs*)>:
c001bea9:	56                   	push   esi
c001beaa:	53                   	push   ebx
c001beab:	53                   	push   ebx
c001beac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001beb0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001beb3:	85 f6                	test   esi,esi
c001beb5:	75 08                	jne    c001bebf <sysCallSpawn(regs*)+0x16>
c001beb7:	59                   	pop    ecx
c001beb8:	31 c0                	xor    eax,eax
c001beba:	31 d2                	xor    edx,edx
c001bebc:	5b                   	pop    ebx
c001bebd:	5e                   	pop    esi
c001bebe:	c3                   	ret    
c001bebf:	83 ec 0c             	sub    esp,0xc
c001bec2:	68 3f 07 00 00       	push   0x73f
c001bec7:	e8 74 39 ff ff       	call   c000f840 <malloc>
c001becc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001becf:	89 c6                	mov    esi,eax
c001bed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bedc:	56                   	push   esi
c001bedd:	e8 2a 1a 00 00       	call   c001d90c <Process::Process(char const*, Process*, char**)>
c001bee2:	83 c4 20             	add    esp,0x20
c001bee5:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001beec:	75 c9                	jne    c001beb7 <sysCallSpawn(regs*)+0xe>
c001beee:	83 ec 0c             	sub    esp,0xc
c001bef1:	56                   	push   esi
c001bef2:	e8 db 1f 00 00       	call   c001ded2 <Process::createUserThread()>
c001bef7:	8b 06                	mov    eax,DWORD PTR [esi]
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	99                   	cdq    
c001befd:	59                   	pop    ecx
c001befe:	5b                   	pop    ebx
c001beff:	5e                   	pop    esi
c001bf00:	c3                   	ret    

c001bf01 <sysCallGetEnv(regs*)>:
c001bf01:	55                   	push   ebp
c001bf02:	57                   	push   edi
c001bf03:	56                   	push   esi
c001bf04:	53                   	push   ebx
c001bf05:	83 ec 28             	sub    esp,0x28
c001bf08:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf0c:	68 a3 be 02 c0       	push   0xc002bea3
c001bf11:	e8 e0 6e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bf16:	5f                   	pop    edi
c001bf17:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bf1a:	5d                   	pop    ebp
c001bf1b:	53                   	push   ebx
c001bf1c:	68 d2 c1 02 c0       	push   0xc002c1d2
c001bf21:	e8 d0 6e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bf26:	58                   	pop    eax
c001bf27:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bf2a:	5a                   	pop    edx
c001bf2b:	57                   	push   edi
c001bf2c:	68 ac be 02 c0       	push   0xc002beac
c001bf31:	e8 c0 6e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bf36:	59                   	pop    ecx
c001bf37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf3c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf3f:	e8 6f e4 ff ff       	call   c001a3b3 <Krnl::getProcessTotalEnvCount(Process*)>
c001bf44:	5a                   	pop    edx
c001bf45:	89 c5                	mov    ebp,eax
c001bf47:	59                   	pop    ecx
c001bf48:	50                   	push   eax
c001bf49:	68 b6 be 02 c0       	push   0xc002beb6
c001bf4e:	e8 a3 6e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bf53:	83 c4 10             	add    esp,0x10
c001bf56:	39 ef                	cmp    edi,ebp
c001bf58:	7c 15                	jl     c001bf6f <sysCallGetEnv(regs*)+0x6e>
c001bf5a:	85 db                	test   ebx,ebx
c001bf5c:	75 0c                	jne    c001bf6a <sysCallGetEnv(regs*)+0x69>
c001bf5e:	83 c4 1c             	add    esp,0x1c
c001bf61:	31 c0                	xor    eax,eax
c001bf63:	5b                   	pop    ebx
c001bf64:	31 d2                	xor    edx,edx
c001bf66:	5e                   	pop    esi
c001bf67:	5f                   	pop    edi
c001bf68:	5d                   	pop    ebp
c001bf69:	c3                   	ret    
c001bf6a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf6d:	eb ef                	jmp    c001bf5e <sysCallGetEnv(regs*)+0x5d>
c001bf6f:	83 ec 0c             	sub    esp,0xc
c001bf72:	68 c2 be 02 c0       	push   0xc002bec2
c001bf77:	e8 7a 6e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bf7c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf80:	83 c4 0c             	add    esp,0xc
c001bf83:	57                   	push   edi
c001bf84:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf8a:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf8d:	50                   	push   eax
c001bf8e:	e8 40 e4 ff ff       	call   c001a3d3 <Krnl::getProcessEnvPair(Process*, int)>
c001bf93:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bf97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf9b:	68 51 c2 02 c0       	push   0xc002c251
c001bfa0:	e8 51 6e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bfa5:	83 c4 10             	add    esp,0x10
c001bfa8:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bfab:	85 f6                	test   esi,esi
c001bfad:	75 47                	jne    c001bff6 <sysCallGetEnv(regs*)+0xf5>
c001bfaf:	83 ec 0c             	sub    esp,0xc
c001bfb2:	55                   	push   ebp
c001bfb3:	e8 dc 47 fe ff       	call   c0000794 <strlen>
c001bfb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfbb:	89 c3                	mov    ebx,eax
c001bfbd:	e8 d2 47 fe ff       	call   c0000794 <strlen>
c001bfc2:	5a                   	pop    edx
c001bfc3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bfc7:	59                   	pop    ecx
c001bfc8:	50                   	push   eax
c001bfc9:	68 c5 be 02 c0       	push   0xc002bec5
c001bfce:	e8 23 6e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001bfd3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bfd6:	e8 b9 47 fe ff       	call   c0000794 <strlen>
c001bfdb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfde:	89 c3                	mov    ebx,eax
c001bfe0:	e8 af 47 fe ff       	call   c0000794 <strlen>
c001bfe5:	83 c4 10             	add    esp,0x10
c001bfe8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bfec:	83 c4 1c             	add    esp,0x1c
c001bfef:	31 d2                	xor    edx,edx
c001bff1:	5b                   	pop    ebx
c001bff2:	5e                   	pop    esi
c001bff3:	5f                   	pop    edi
c001bff4:	5d                   	pop    ebp
c001bff5:	c3                   	ret    
c001bff6:	83 ec 0c             	sub    esp,0xc
c001bff9:	68 6b c2 02 c0       	push   0xc002c26b
c001bffe:	e8 f3 6d ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001c003:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c006:	58                   	pop    eax
c001c007:	5a                   	pop    edx
c001c008:	55                   	push   ebp
c001c009:	53                   	push   ebx
c001c00a:	e8 25 48 fe ff       	call   c0000834 <strcpy>
c001c00f:	59                   	pop    ecx
c001c010:	5e                   	pop    esi
c001c011:	68 cf be 02 c0       	push   0xc002becf
c001c016:	53                   	push   ebx
c001c017:	e8 58 49 fe ff       	call   c0000974 <strcat>
c001c01c:	5d                   	pop    ebp
c001c01d:	58                   	pop    eax
c001c01e:	57                   	push   edi
c001c01f:	53                   	push   ebx
c001c020:	e8 4f 49 fe ff       	call   c0000974 <strcat>
c001c025:	c7 04 24 85 c2 02 c0 	mov    DWORD PTR [esp],0xc002c285
c001c02c:	e8 c5 6d ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001c031:	83 c4 10             	add    esp,0x10
c001c034:	e9 25 ff ff ff       	jmp    c001bf5e <sysCallGetEnv(regs*)+0x5d>

c001c039 <sysAppSettings(regs*)>:
c001c039:	53                   	push   ebx
c001c03a:	83 ec 08             	sub    esp,0x8
c001c03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c041:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c044:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c04a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c04f:	66 3d c0 09          	cmp    ax,0x9c0
c001c053:	75 2f                	jne    c001c084 <sysAppSettings(regs*)+0x4b>
c001c055:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c05b:	83 e0 1f             	and    eax,0x1f
c001c05e:	3c 01                	cmp    al,0x1
c001c060:	74 2e                	je     c001c090 <sysAppSettings(regs*)+0x57>
c001c062:	3c 07                	cmp    al,0x7
c001c064:	0f 84 bd 00 00 00    	je     c001c127 <sysAppSettings(regs*)+0xee>
c001c06a:	84 c0                	test   al,al
c001c06c:	0f 84 dc 00 00 00    	je     c001c14e <sysAppSettings(regs*)+0x115>
c001c072:	3c 08                	cmp    al,0x8
c001c074:	74 6d                	je     c001c0e3 <sysAppSettings(regs*)+0xaa>
c001c076:	0f b6 c0             	movzx  eax,al
c001c079:	83 c4 08             	add    esp,0x8
c001c07c:	05 e8 03 00 00       	add    eax,0x3e8
c001c081:	5b                   	pop    ebx
c001c082:	99                   	cdq    
c001c083:	c3                   	ret    
c001c084:	b8 01 00 00 00       	mov    eax,0x1
c001c089:	31 d2                	xor    edx,edx
c001c08b:	83 c4 08             	add    esp,0x8
c001c08e:	5b                   	pop    ebx
c001c08f:	c3                   	ret    
c001c090:	51                   	push   ecx
c001c091:	68 00 01 00 00       	push   0x100
c001c096:	6a 00                	push   0x0
c001c098:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c09d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0a0:	83 c0 0c             	add    eax,0xc
c001c0a3:	50                   	push   eax
c001c0a4:	e8 cf 46 fe ff       	call   c0000778 <memset>
c001c0a9:	83 c4 0c             	add    esp,0xc
c001c0ac:	68 ff 00 00 00       	push   0xff
c001c0b1:	53                   	push   ebx
c001c0b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0ba:	83 c0 0c             	add    eax,0xc
c001c0bd:	50                   	push   eax
c001c0be:	e8 81 46 fe ff       	call   c0000744 <memcpy>
c001c0c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c8:	5b                   	pop    ebx
c001c0c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0cc:	5a                   	pop    edx
c001c0cd:	8d 50 0c             	lea    edx,[eax+0xc]
c001c0d0:	52                   	push   edx
c001c0d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c0d7:	e8 68 4a ff ff       	call   c0010b44 <VgaText::setTitle(char*)>
c001c0dc:	83 c4 10             	add    esp,0x10
c001c0df:	31 c0                	xor    eax,eax
c001c0e1:	eb a6                	jmp    c001c089 <sysAppSettings(regs*)+0x50>
c001c0e3:	83 ec 08             	sub    esp,0x8
c001c0e6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c0ec:	83 e0 0f             	and    eax,0xf
c001c0ef:	50                   	push   eax
c001c0f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c0fe:	e8 31 4a ff ff       	call   c0010b34 <VgaText::setTitleColour(VgaColour)>
c001c103:	58                   	pop    eax
c001c104:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c10a:	5a                   	pop    edx
c001c10b:	c1 e8 04             	shr    eax,0x4
c001c10e:	83 e0 0f             	and    eax,0xf
c001c111:	50                   	push   eax
c001c112:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c117:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c11a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c120:	e8 ff 49 ff ff       	call   c0010b24 <VgaText::setTitleTextColour(VgaColour)>
c001c125:	eb b5                	jmp    c001c0dc <sysAppSettings(regs*)+0xa3>
c001c127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c12c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c12f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c135:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c13b:	c0 e8 06             	shr    al,0x6
c001c13e:	83 e0 01             	and    eax,0x1
c001c141:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c147:	31 c0                	xor    eax,eax
c001c149:	e9 3b ff ff ff       	jmp    c001c089 <sysAppSettings(regs*)+0x50>
c001c14e:	b8 02 00 00 00       	mov    eax,0x2
c001c153:	e9 31 ff ff ff       	jmp    c001c089 <sysAppSettings(regs*)+0x50>

c001c158 <sysSetFatAttrib(regs*)>:
c001c158:	57                   	push   edi
c001c159:	56                   	push   esi
c001c15a:	53                   	push   ebx
c001c15b:	83 ec 1c             	sub    esp,0x1c
c001c15e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c162:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c165:	68 14 01 00 00       	push   0x114
c001c16a:	e8 d1 36 ff ff       	call   c000f840 <malloc>
c001c16f:	83 c4 0c             	add    esp,0xc
c001c172:	89 c3                	mov    ebx,eax
c001c174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c179:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c17c:	57                   	push   edi
c001c17d:	53                   	push   ebx
c001c17e:	e8 cb 71 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001c183:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c186:	83 c4 0c             	add    esp,0xc
c001c189:	0f b6 d4             	movzx  edx,ah
c001c18c:	0f b6 c0             	movzx  eax,al
c001c18f:	52                   	push   edx
c001c190:	50                   	push   eax
c001c191:	53                   	push   ebx
c001c192:	e8 2d 74 ff ff       	call   c00135c4 <File::chfatattr(unsigned char, unsigned char)>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	85 db                	test   ebx,ebx
c001c19c:	74 14                	je     c001c1b2 <sysSetFatAttrib(regs*)+0x5a>
c001c19e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1a4:	83 ec 0c             	sub    esp,0xc
c001c1a7:	53                   	push   ebx
c001c1a8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1ab:	83 c4 10             	add    esp,0x10
c001c1ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1b2:	85 c0                	test   eax,eax
c001c1b4:	0f 95 c0             	setne  al
c001c1b7:	31 d2                	xor    edx,edx
c001c1b9:	0f b6 c0             	movzx  eax,al
c001c1bc:	f7 d8                	neg    eax
c001c1be:	83 d2 00             	adc    edx,0x0
c001c1c1:	83 c4 10             	add    esp,0x10
c001c1c4:	f7 da                	neg    edx
c001c1c6:	5b                   	pop    ebx
c001c1c7:	5e                   	pop    esi
c001c1c8:	5f                   	pop    edi
c001c1c9:	c3                   	ret    

c001c1ca <sysPipe(regs*)>:
c001c1ca:	57                   	push   edi
c001c1cb:	56                   	push   esi
c001c1cc:	53                   	push   ebx
c001c1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d1:	83 ec 0c             	sub    esp,0xc
c001c1d4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c1d7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c1da:	6a 20                	push   0x20
c001c1dc:	e8 5f 36 ff ff       	call   c000f840 <malloc>
c001c1e1:	89 c3                	mov    ebx,eax
c001c1e3:	58                   	pop    eax
c001c1e4:	5a                   	pop    edx
c001c1e5:	68 00 50 00 00       	push   0x5000
c001c1ea:	53                   	push   ebx
c001c1eb:	e8 84 42 ff ff       	call   c0010474 <Pipe::Pipe(int)>
c001c1f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1f3:	e8 dc 54 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001c1f8:	89 07                	mov    DWORD PTR [edi],eax
c001c1fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1fd:	e8 d2 54 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	89 06                	mov    DWORD PTR [esi],eax
c001c207:	31 d2                	xor    edx,edx
c001c209:	5b                   	pop    ebx
c001c20a:	31 c0                	xor    eax,eax
c001c20c:	5e                   	pop    esi
c001c20d:	5f                   	pop    edi
c001c20e:	c3                   	ret    

c001c20f <sysGetUnixTime(regs*)>:
c001c20f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001c214:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c21a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c21e:	e9 15 7b ff ff       	jmp    c0013d38 <Clock::timeInSecondsLocal()>

c001c223 <string_ends_with(char const*, char const*)>:
c001c223:	57                   	push   edi
c001c224:	56                   	push   esi
c001c225:	53                   	push   ebx
c001c226:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c22a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	53                   	push   ebx
c001c232:	e8 5d 45 fe ff       	call   c0000794 <strlen>
c001c237:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c23a:	89 c6                	mov    esi,eax
c001c23c:	e8 53 45 fe ff       	call   c0000794 <strlen>
c001c241:	83 c4 10             	add    esp,0x10
c001c244:	39 c6                	cmp    esi,eax
c001c246:	7d 06                	jge    c001c24e <string_ends_with(char const*, char const*)+0x2b>
c001c248:	5b                   	pop    ebx
c001c249:	31 c0                	xor    eax,eax
c001c24b:	5e                   	pop    esi
c001c24c:	5f                   	pop    edi
c001c24d:	c3                   	ret    
c001c24e:	83 ec 08             	sub    esp,0x8
c001c251:	29 c6                	sub    esi,eax
c001c253:	57                   	push   edi
c001c254:	01 f3                	add    ebx,esi
c001c256:	53                   	push   ebx
c001c257:	e8 64 46 fe ff       	call   c00008c0 <strcmp>
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	85 c0                	test   eax,eax
c001c261:	5b                   	pop    ebx
c001c262:	0f 94 c0             	sete   al
c001c265:	5e                   	pop    esi
c001c266:	0f b6 c0             	movzx  eax,al
c001c269:	5f                   	pop    edi
c001c26a:	c3                   	ret    

c001c26b <sysCallOpen(regs*)>:
c001c26b:	56                   	push   esi
c001c26c:	53                   	push   ebx
c001c26d:	81 ec 04 01 00 00    	sub    esp,0x104
c001c273:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c27a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c27d:	85 c9                	test   ecx,ecx
c001c27f:	0f 84 b3 00 00 00    	je     c001c338 <sysCallOpen(regs*)+0xcd>
c001c285:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c288:	85 c0                	test   eax,eax
c001c28a:	0f 84 a8 00 00 00    	je     c001c338 <sysCallOpen(regs*)+0xcd>
c001c290:	52                   	push   edx
c001c291:	68 d1 be 02 c0       	push   0xc002bed1
c001c296:	50                   	push   eax
c001c297:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c29b:	56                   	push   esi
c001c29c:	e8 03 6f ff ff       	call   c00131a4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c2a1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c2a4:	e8 eb 44 fe ff       	call   c0000794 <strlen>
c001c2a9:	83 c4 10             	add    esp,0x10
c001c2ac:	48                   	dec    eax
c001c2ad:	74 1d                	je     c001c2cc <sysCallOpen(regs*)+0x61>
c001c2af:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c2b2:	eb 0f                	jmp    c001c2c3 <sysCallOpen(regs*)+0x58>
c001c2b4:	80 fa 3a             	cmp    dl,0x3a
c001c2b7:	74 0f                	je     c001c2c8 <sysCallOpen(regs*)+0x5d>
c001c2b9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c2bd:	48                   	dec    eax
c001c2be:	74 0c                	je     c001c2cc <sysCallOpen(regs*)+0x61>
c001c2c0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c2c3:	80 fa 2e             	cmp    dl,0x2e
c001c2c6:	75 ec                	jne    c001c2b4 <sysCallOpen(regs*)+0x49>
c001c2c8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c2cc:	83 ec 08             	sub    esp,0x8
c001c2cf:	68 d5 be 02 c0       	push   0xc002bed5
c001c2d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2d7:	e8 47 ff ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c2dc:	83 c4 10             	add    esp,0x10
c001c2df:	85 c0                	test   eax,eax
c001c2e1:	75 17                	jne    c001c2fa <sysCallOpen(regs*)+0x8f>
c001c2e3:	83 ec 08             	sub    esp,0x8
c001c2e6:	68 f6 be 02 c0       	push   0xc002bef6
c001c2eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2ee:	e8 30 ff ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c2f3:	83 c4 10             	add    esp,0x10
c001c2f6:	85 c0                	test   eax,eax
c001c2f8:	74 51                	je     c001c34b <sysCallOpen(regs*)+0xe0>
c001c2fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2fd:	83 ec 08             	sub    esp,0x8
c001c300:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c306:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c30d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c310:	ff 30                	push   DWORD PTR [eax]
c001c312:	68 da be 02 c0       	push   0xc002beda
c001c317:	e8 da 6a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001c31c:	c7 04 24 e9 be 02 c0 	mov    DWORD PTR [esp],0xc002bee9
c001c323:	e8 ce 6a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	81 c4 04 01 00 00    	add    esp,0x104
c001c331:	31 c0                	xor    eax,eax
c001c333:	31 d2                	xor    edx,edx
c001c335:	5b                   	pop    ebx
c001c336:	5e                   	pop    esi
c001c337:	c3                   	ret    
c001c338:	81 c4 04 01 00 00    	add    esp,0x104
c001c33e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c343:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c348:	5b                   	pop    ebx
c001c349:	5e                   	pop    esi
c001c34a:	c3                   	ret    
c001c34b:	83 ec 08             	sub    esp,0x8
c001c34e:	68 d6 be 02 c0       	push   0xc002bed6
c001c353:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c356:	e8 65 45 fe ff       	call   c00008c0 <strcmp>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	85 c0                	test   eax,eax
c001c360:	74 98                	je     c001c2fa <sysCallOpen(regs*)+0x8f>
c001c362:	83 ec 08             	sub    esp,0x8
c001c365:	68 d5 be 02 c0       	push   0xc002bed5
c001c36a:	56                   	push   esi
c001c36b:	e8 b3 fe ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c370:	83 c4 10             	add    esp,0x10
c001c373:	85 c0                	test   eax,eax
c001c375:	75 83                	jne    c001c2fa <sysCallOpen(regs*)+0x8f>
c001c377:	83 ec 08             	sub    esp,0x8
c001c37a:	68 fb be 02 c0       	push   0xc002befb
c001c37f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c382:	e8 9c fe ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	85 c0                	test   eax,eax
c001c38c:	0f 85 d9 00 00 00    	jne    c001c46b <sysCallOpen(regs*)+0x200>
c001c392:	83 ec 08             	sub    esp,0x8
c001c395:	68 00 bf 02 c0       	push   0xc002bf00
c001c39a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c39d:	e8 81 fe ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c3a2:	83 c4 10             	add    esp,0x10
c001c3a5:	85 c0                	test   eax,eax
c001c3a7:	0f 85 be 00 00 00    	jne    c001c46b <sysCallOpen(regs*)+0x200>
c001c3ad:	83 ec 08             	sub    esp,0x8
c001c3b0:	68 fc be 02 c0       	push   0xc002befc
c001c3b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3b8:	e8 03 45 fe ff       	call   c00008c0 <strcmp>
c001c3bd:	83 c4 10             	add    esp,0x10
c001c3c0:	85 c0                	test   eax,eax
c001c3c2:	0f 84 a3 00 00 00    	je     c001c46b <sysCallOpen(regs*)+0x200>
c001c3c8:	83 ec 08             	sub    esp,0x8
c001c3cb:	68 fb be 02 c0       	push   0xc002befb
c001c3d0:	56                   	push   esi
c001c3d1:	e8 4d fe ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c3d6:	83 c4 10             	add    esp,0x10
c001c3d9:	85 c0                	test   eax,eax
c001c3db:	0f 85 8a 00 00 00    	jne    c001c46b <sysCallOpen(regs*)+0x200>
c001c3e1:	83 ec 0c             	sub    esp,0xc
c001c3e4:	68 14 01 00 00       	push   0x114
c001c3e9:	e8 52 34 ff ff       	call   c000f840 <malloc>
c001c3ee:	83 c4 0c             	add    esp,0xc
c001c3f1:	89 c6                	mov    esi,eax
c001c3f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3f8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3fe:	56                   	push   esi
c001c3ff:	e8 4a 6f ff ff       	call   c001334e <File::File(char const*, Process*)>
c001c404:	83 c4 10             	add    esp,0x10
c001c407:	85 f6                	test   esi,esi
c001c409:	0f 84 29 ff ff ff    	je     c001c338 <sysCallOpen(regs*)+0xcd>
c001c40f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c412:	0f b6 c2             	movzx  eax,dl
c001c415:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c418:	89 d0                	mov    eax,edx
c001c41a:	83 e0 01             	and    eax,0x1
c001c41d:	f6 c2 02             	test   dl,0x2
c001c420:	74 03                	je     c001c425 <sysCallOpen(regs*)+0x1ba>
c001c422:	83 c8 02             	or     eax,0x2
c001c425:	f6 c2 04             	test   dl,0x4
c001c428:	74 03                	je     c001c42d <sysCallOpen(regs*)+0x1c2>
c001c42a:	83 c8 04             	or     eax,0x4
c001c42d:	f6 c2 08             	test   dl,0x8
c001c430:	74 03                	je     c001c435 <sysCallOpen(regs*)+0x1ca>
c001c432:	83 c8 0a             	or     eax,0xa
c001c435:	83 e2 10             	and    edx,0x10
c001c438:	74 03                	je     c001c43d <sysCallOpen(regs*)+0x1d2>
c001c43a:	83 c8 12             	or     eax,0x12
c001c43d:	83 ec 08             	sub    esp,0x8
c001c440:	50                   	push   eax
c001c441:	56                   	push   esi
c001c442:	e8 6b 6f ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	85 c0                	test   eax,eax
c001c44c:	0f 85 e6 fe ff ff    	jne    c001c338 <sysCallOpen(regs*)+0xcd>
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	56                   	push   esi
c001c456:	e8 79 52 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001c45b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c45e:	89 02                	mov    DWORD PTR [edx],eax
c001c460:	c1 f8 1f             	sar    eax,0x1f
c001c463:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c466:	e9 bd fe ff ff       	jmp    c001c328 <sysCallOpen(regs*)+0xbd>
c001c46b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c46e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c474:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c47b:	e9 ab fe ff ff       	jmp    c001c32b <sysCallOpen(regs*)+0xc0>

c001c480 <Sys::loadSyscalls()>:
c001c480:	c7 05 80 0f 03 c0 8d b5 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001b58d
c001c48a:	c7 05 84 0f 03 c0 2c b1 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001b12c
c001c494:	c7 05 88 0f 03 c0 96 b2 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001b296
c001c49e:	c7 05 8c 0f 03 c0 c3 b4 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b4c3
c001c4a8:	c7 05 90 0f 03 c0 2e b2 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001b22e
c001c4b2:	c7 05 94 0f 03 c0 63 b1 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b163
c001c4bc:	c7 05 98 0f 03 c0 44 b1 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001b144
c001c4c6:	c7 05 9c 0f 03 c0 35 b3 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001b335
c001c4d0:	c7 05 a4 0f 03 c0 bd ba 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001babd
c001c4da:	c7 05 a0 0f 03 c0 6b c2 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001c26b
c001c4e4:	c7 05 a8 0f 03 c0 45 bb 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001bb45
c001c4ee:	c7 05 ac 0f 03 c0 ac b7 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b7ac
c001c4f8:	c7 05 b0 0f 03 c0 c8 b5 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001b5c8
c001c502:	c7 05 b4 0f 03 c0 cd b5 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001b5cd
c001c50c:	c7 05 b8 0f 03 c0 20 bc 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001bc20
c001c516:	c7 05 bc 0f 03 c0 ba bb 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001bbba
c001c520:	c7 05 c0 0f 03 c0 94 b8 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001b894
c001c52a:	c7 05 c4 0f 03 c0 fd b8 01 c0 	mov    DWORD PTR ds:0xc0030fc4,0xc001b8fd
c001c534:	c7 05 c8 0f 03 c0 7a b9 01 c0 	mov    DWORD PTR ds:0xc0030fc8,0xc001b97a
c001c53e:	c7 05 cc 0f 03 c0 d2 b5 01 c0 	mov    DWORD PTR ds:0xc0030fcc,0xc001b5d2
c001c548:	c7 05 d0 0f 03 c0 90 bc 01 c0 	mov    DWORD PTR ds:0xc0030fd0,0xc001bc90
c001c552:	c7 05 d4 0f 03 c0 aa bc 01 c0 	mov    DWORD PTR ds:0xc0030fd4,0xc001bcaa
c001c55c:	c7 05 d8 0f 03 c0 aa bc 01 c0 	mov    DWORD PTR ds:0xc0030fd8,0xc001bcaa
c001c566:	c7 05 dc 0f 03 c0 eb bc 01 c0 	mov    DWORD PTR ds:0xc0030fdc,0xc001bceb
c001c570:	c7 05 e0 0f 03 c0 4f bd 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001bd4f
c001c57a:	c7 05 e4 0f 03 c0 7e b7 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001b77e
c001c584:	c7 05 e8 0f 03 c0 b3 bd 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001bdb3
c001c58e:	c7 05 ec 0f 03 c0 3b b7 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b73b
c001c598:	c7 05 f0 0f 03 c0 ff bd 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001bdff
c001c5a2:	c7 05 f4 0f 03 c0 3a b8 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b83a
c001c5ac:	c7 05 f8 0f 03 c0 82 be 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001be82
c001c5b6:	c7 05 fc 0f 03 c0 fd b9 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001b9fd
c001c5c0:	c7 05 00 10 03 c0 a9 be 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001bea9
c001c5ca:	c7 05 04 10 03 c0 01 bf 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001bf01
c001c5d4:	c7 05 08 10 03 c0 39 c0 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001c039
c001c5de:	c7 05 0c 10 03 c0 dc b5 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b5dc
c001c5e8:	c7 05 10 10 03 c0 46 b6 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001b646
c001c5f2:	c7 05 14 10 03 c0 8c b6 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001b68c
c001c5fc:	c7 05 18 10 03 c0 58 c1 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001c158
c001c606:	c7 05 1c 10 03 c0 c5 bc 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001bcc5
c001c610:	c7 05 20 10 03 c0 dd b6 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001b6dd
c001c61a:	c7 05 24 10 03 c0 ca c1 01 c0 	mov    DWORD PTR ds:0xc0031024,0xc001c1ca
c001c624:	c7 05 28 10 03 c0 0f c2 01 c0 	mov    DWORD PTR ds:0xc0031028,0xc001c20f
c001c62e:	c7 05 2c 10 03 c0 86 b1 01 c0 	mov    DWORD PTR ds:0xc003102c,0xc001b186
c001c638:	c7 05 30 10 03 c0 51 b3 01 c0 	mov    DWORD PTR ds:0xc0031030,0xc001b351
c001c642:	c7 05 34 10 03 c0 79 b4 01 c0 	mov    DWORD PTR ds:0xc0031034,0xc001b479
c001c64c:	c7 05 38 10 03 c0 f6 b0 01 c0 	mov    DWORD PTR ds:0xc0031038,0xc001b0f6
c001c656:	c7 05 3c 10 03 c0 2b b5 01 c0 	mov    DWORD PTR ds:0xc003103c,0xc001b52b
c001c660:	c7 05 40 10 03 c0 6f b1 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001b16f
c001c66a:	c3                   	ret    

c001c66b <Sys::systemCall(regs*, void*)>:
c001c66b:	53                   	push   ebx
c001c66c:	83 ec 08             	sub    esp,0x8
c001c66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c673:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c676:	83 f8 7f             	cmp    eax,0x7f
c001c679:	77 16                	ja     c001c691 <Sys::systemCall(regs*, void*)+0x26>
c001c67b:	8b 14 85 80 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf080]
c001c682:	85 d2                	test   edx,edx
c001c684:	74 0b                	je     c001c691 <Sys::systemCall(regs*, void*)+0x26>
c001c686:	83 ec 0c             	sub    esp,0xc
c001c689:	53                   	push   ebx
c001c68a:	ff d2                	call   edx
c001c68c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c68f:	eb 0d                	jmp    c001c69e <Sys::systemCall(regs*, void*)+0x33>
c001c691:	52                   	push   edx
c001c692:	52                   	push   edx
c001c693:	50                   	push   eax
c001c694:	68 05 bf 02 c0       	push   0xc002bf05
c001c699:	e8 58 67 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001c69e:	83 c4 10             	add    esp,0x10
c001c6a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c6a6:	31 d2                	xor    edx,edx
c001c6a8:	83 c4 08             	add    esp,0x8
c001c6ab:	5b                   	pop    ebx
c001c6ac:	c3                   	ret    

c001c6ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c6ad:	55                   	push   ebp
c001c6ae:	57                   	push   edi
c001c6af:	56                   	push   esi
c001c6b0:	53                   	push   ebx
c001c6b1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c6b7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c6be:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c6c5:	85 c0                	test   eax,eax
c001c6c7:	0f 95 c1             	setne  cl
c001c6ca:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c6d2:	0f 94 c2             	sete   dl
c001c6d5:	84 d1                	test   cl,dl
c001c6d7:	74 23                	je     c001c6fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c6d9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c6df:	74 1b                	je     c001c6fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c6e1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c6e7:	89 da                	mov    edx,ebx
c001c6e9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c6ef:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c6f5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c6fc:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c703:	05 ff 0f 00 00       	add    eax,0xfff
c001c708:	83 ec 0c             	sub    esp,0xc
c001c70b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c70f:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c715:	c1 e8 0c             	shr    eax,0xc
c001c718:	89 ef                	mov    edi,ebp
c001c71a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c71e:	c1 ef 0c             	shr    edi,0xc
c001c721:	6a 01                	push   0x1
c001c723:	e8 f7 53 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c001c728:	89 c6                	mov    esi,eax
c001c72a:	58                   	pop    eax
c001c72b:	5a                   	pop    edx
c001c72c:	57                   	push   edi
c001c72d:	68 8b bf 02 c0       	push   0xc002bf8b
c001c732:	e8 bf 66 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001c737:	59                   	pop    ecx
c001c738:	58                   	pop    eax
c001c739:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c73d:	68 9d bf 02 c0       	push   0xc002bf9d
c001c742:	e8 af 66 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c750:	0f 86 24 01 00 00    	jbe    c001c87a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c756:	c1 e7 0c             	shl    edi,0xc
c001c759:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c75c:	89 df                	mov    edi,ebx
c001c75e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c762:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c769:	01 dd                	add    ebp,ebx
c001c76b:	29 fd                	sub    ebp,edi
c001c76d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c771:	0f 84 01 01 00 00    	je     c001c878 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c777:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c77d:	76 05                	jbe    c001c784 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c77f:	bd 00 10 00 00       	mov    ebp,0x1000
c001c784:	83 ec 0c             	sub    esp,0xc
c001c787:	31 d2                	xor    edx,edx
c001c789:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c790:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c792:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c796:	50                   	push   eax
c001c797:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c79b:	50                   	push   eax
c001c79c:	52                   	push   edx
c001c79d:	55                   	push   ebp
c001c79e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c7a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7a8:	83 c4 20             	add    esp,0x20
c001c7ab:	85 c0                	test   eax,eax
c001c7ad:	74 0a                	je     c001c7b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c7af:	53                   	push   ebx
c001c7b0:	53                   	push   ebx
c001c7b1:	50                   	push   eax
c001c7b2:	68 af bf 02 c0       	push   0xc002bfaf
c001c7b7:	eb 0f                	jmp    c001c7c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c7b9:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c7bd:	74 20                	je     c001c7df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c7bf:	51                   	push   ecx
c001c7c0:	51                   	push   ecx
c001c7c1:	6a 00                	push   0x0
c001c7c3:	68 da bf 02 c0       	push   0xc002bfda
c001c7c8:	e8 29 66 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001c7cd:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7d0:	e8 66 57 ff ff       	call   c0011f3b <Virt::freeKernelVirtualPages(unsigned long)>
c001c7d5:	83 c4 10             	add    esp,0x10
c001c7d8:	31 c0                	xor    eax,eax
c001c7da:	e9 55 01 00 00       	jmp    c001c934 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c7df:	e8 d8 14 00 00       	call   c001dcbc <lockScheduler()>
c001c7e4:	e8 f4 36 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c7e9:	6a 07                	push   0x7
c001c7eb:	89 c5                	mov    ebp,eax
c001c7ed:	56                   	push   esi
c001c7ee:	50                   	push   eax
c001c7ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7f7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7fd:	e8 a0 5a ff ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c802:	83 c4 0c             	add    esp,0xc
c001c805:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c80c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c812:	6a 00                	push   0x0
c001c814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c819:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c81c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c822:	e8 e5 58 ff ff       	call   c001210c <VAS::mapOtherVASIn(bool, VAS*)>
c001c827:	58                   	pop    eax
c001c828:	5a                   	pop    edx
c001c829:	68 07 0c 00 00       	push   0xc07
c001c82e:	57                   	push   edi
c001c82f:	81 c7 00 10 00 00    	add    edi,0x1000
c001c835:	55                   	push   ebp
c001c836:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c83d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c843:	6a 00                	push   0x0
c001c845:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c84a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c84d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c853:	e8 04 5e ff ff       	call   c001265c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c858:	83 c4 1c             	add    esp,0x1c
c001c85b:	68 00 10 00 00       	push   0x1000
c001c860:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c864:	50                   	push   eax
c001c865:	56                   	push   esi
c001c866:	e8 d9 3e fe ff       	call   c0000744 <memcpy>
c001c86b:	e8 4e 14 00 00       	call   c001dcbe <unlockScheduler()>
c001c870:	83 c4 10             	add    esp,0x10
c001c873:	e9 ea fe ff ff       	jmp    c001c762 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c878:	89 fb                	mov    ebx,edi
c001c87a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c882:	0f 86 9e 00 00 00    	jbe    c001c926 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c888:	e8 2f 14 00 00       	call   c001dcbc <lockScheduler()>
c001c88d:	51                   	push   ecx
c001c88e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c895:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c89b:	6a 00                	push   0x0
c001c89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8a5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8ab:	e8 5c 58 ff ff       	call   c001210c <VAS::mapOtherVASIn(bool, VAS*)>
c001c8b0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c8b4:	c1 e7 0c             	shl    edi,0xc
c001c8b7:	01 df                	add    edi,ebx
c001c8b9:	83 c4 10             	add    esp,0x10
c001c8bc:	39 fb                	cmp    ebx,edi
c001c8be:	74 61                	je     c001c921 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c8c0:	e8 18 36 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c8c5:	6a 07                	push   0x7
c001c8c7:	89 c5                	mov    ebp,eax
c001c8c9:	56                   	push   esi
c001c8ca:	50                   	push   eax
c001c8cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8d3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8d9:	e8 c4 59 ff ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8de:	58                   	pop    eax
c001c8df:	5a                   	pop    edx
c001c8e0:	68 07 0c 00 00       	push   0xc07
c001c8e5:	53                   	push   ebx
c001c8e6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8ec:	55                   	push   ebp
c001c8ed:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8f4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8fa:	6a 00                	push   0x0
c001c8fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c901:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c904:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c90a:	e8 4d 5d ff ff       	call   c001265c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c90f:	83 c4 1c             	add    esp,0x1c
c001c912:	68 00 10 00 00       	push   0x1000
c001c917:	6a 00                	push   0x0
c001c919:	56                   	push   esi
c001c91a:	e8 59 3e fe ff       	call   c0000778 <memset>
c001c91f:	eb 98                	jmp    c001c8b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c921:	e8 98 13 00 00       	call   c001dcbe <unlockScheduler()>
c001c926:	83 ec 0c             	sub    esp,0xc
c001c929:	56                   	push   esi
c001c92a:	e8 0c 56 ff ff       	call   c0011f3b <Virt::freeKernelVirtualPages(unsigned long)>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	b0 01                	mov    al,0x1
c001c934:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c93a:	5b                   	pop    ebx
c001c93b:	5e                   	pop    esi
c001c93c:	5f                   	pop    edi
c001c93d:	5d                   	pop    ebp
c001c93e:	c3                   	ret    

c001c93f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c93f:	55                   	push   ebp
c001c940:	57                   	push   edi
c001c941:	56                   	push   esi
c001c942:	53                   	push   ebx
c001c943:	83 ec 48             	sub    esp,0x48
c001c946:	68 14 01 00 00       	push   0x114
c001c94b:	e8 f0 2e ff ff       	call   c000f840 <malloc>
c001c950:	83 c4 0c             	add    esp,0xc
c001c953:	89 c6                	mov    esi,eax
c001c955:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c959:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c95d:	50                   	push   eax
c001c95e:	e8 eb 69 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001c963:	58                   	pop    eax
c001c964:	5a                   	pop    edx
c001c965:	6a 01                	push   0x1
c001c967:	56                   	push   esi
c001c968:	e8 45 6a ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c001c96d:	83 c4 10             	add    esp,0x10
c001c970:	85 c0                	test   eax,eax
c001c972:	0f 85 47 01 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c978:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	6a 34                	push   0x34
c001c985:	e8 b6 2e ff ff       	call   c000f840 <malloc>
c001c98a:	89 c3                	mov    ebx,eax
c001c98c:	58                   	pop    eax
c001c98d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c98f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c993:	57                   	push   edi
c001c994:	53                   	push   ebx
c001c995:	6a 00                	push   0x0
c001c997:	6a 34                	push   0x34
c001c999:	56                   	push   esi
c001c99a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c99d:	83 c4 20             	add    esp,0x20
c001c9a0:	85 c0                	test   eax,eax
c001c9a2:	0f 85 17 01 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9a8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c9ae:	0f 85 0b 01 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c9b7:	85 c0                	test   eax,eax
c001c9b9:	0f 84 00 01 00 00    	je     c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9bf:	31 d2                	xor    edx,edx
c001c9c1:	55                   	push   ebp
c001c9c2:	52                   	push   edx
c001c9c3:	50                   	push   eax
c001c9c4:	56                   	push   esi
c001c9c5:	e8 a6 6a ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001c9ca:	83 c4 10             	add    esp,0x10
c001c9cd:	85 c0                	test   eax,eax
c001c9cf:	0f 85 ea 00 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9d5:	83 ec 0c             	sub    esp,0xc
c001c9d8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c9db:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c9df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c9e3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c9e7:	0f af c2             	imul   eax,edx
c001c9ea:	50                   	push   eax
c001c9eb:	e8 50 2e ff ff       	call   c000f840 <malloc>
c001c9f0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9fd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca01:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca05:	0f af c2             	imul   eax,edx
c001ca08:	99                   	cdq    
c001ca09:	52                   	push   edx
c001ca0a:	50                   	push   eax
c001ca0b:	56                   	push   esi
c001ca0c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca0f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ca12:	83 c4 20             	add    esp,0x20
c001ca15:	85 c0                	test   eax,eax
c001ca17:	0f 84 a2 00 00 00    	je     c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca1d:	31 d2                	xor    edx,edx
c001ca1f:	51                   	push   ecx
c001ca20:	52                   	push   edx
c001ca21:	50                   	push   eax
c001ca22:	56                   	push   esi
c001ca23:	e8 48 6a ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001ca28:	83 c4 10             	add    esp,0x10
c001ca2b:	85 c0                	test   eax,eax
c001ca2d:	0f 85 8c 00 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca33:	83 ec 0c             	sub    esp,0xc
c001ca36:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca3a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca3e:	31 ed                	xor    ebp,ebp
c001ca40:	0f af c2             	imul   eax,edx
c001ca43:	50                   	push   eax
c001ca44:	e8 f7 2d ff ff       	call   c000f840 <malloc>
c001ca49:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca56:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca5a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca5e:	0f af c2             	imul   eax,edx
c001ca61:	99                   	cdq    
c001ca62:	52                   	push   edx
c001ca63:	50                   	push   eax
c001ca64:	56                   	push   esi
c001ca65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca68:	83 c4 20             	add    esp,0x20
c001ca6b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ca73:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ca77:	0f 86 80 00 00 00    	jbe    c001cafd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ca7d:	0f b7 fd             	movzx  edi,bp
c001ca80:	c1 e7 05             	shl    edi,0x5
c001ca83:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ca87:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ca8a:	75 6b                	jne    c001caf7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca8c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ca8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca93:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ca96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca9a:	52                   	push   edx
c001ca9b:	31 d2                	xor    edx,edx
c001ca9d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001caa0:	52                   	push   edx
c001caa1:	50                   	push   eax
c001caa2:	56                   	push   esi
c001caa3:	e8 c8 69 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001caa8:	83 c4 10             	add    esp,0x10
c001caab:	85 c0                	test   eax,eax
c001caad:	74 17                	je     c001cac6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001caaf:	83 ec 0c             	sub    esp,0xc
c001cab2:	68 06 c0 02 c0       	push   0xc002c006
c001cab7:	e8 3a 63 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001cabc:	83 c4 10             	add    esp,0x10
c001cabf:	31 c0                	xor    eax,eax
c001cac1:	e9 87 00 00 00       	jmp    c001cb4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cac6:	83 ec 0c             	sub    esp,0xc
c001cac9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cacc:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cacf:	50                   	push   eax
c001cad0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cad4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cad8:	56                   	push   esi
c001cad9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cadd:	e8 cb fb ff ff       	call   c001c6ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cae2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cae6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001caea:	83 c4 20             	add    esp,0x20
c001caed:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001caf1:	73 04                	jae    c001caf7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001caf7:	45                   	inc    ebp
c001caf8:	e9 76 ff ff ff       	jmp    c001ca73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cafd:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cb01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb09:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cb0f:	83 ec 0c             	sub    esp,0xc
c001cb12:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cb18:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cb1d:	05 00 10 00 00       	add    eax,0x1000
c001cb22:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb29:	e8 22 2d ff ff       	call   c000f850 <free>
c001cb2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb31:	e8 1a 2d ff ff       	call   c000f850 <free>
c001cb36:	58                   	pop    eax
c001cb37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb3b:	e8 10 2d ff ff       	call   c000f850 <free>
c001cb40:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb43:	e8 c8 68 ff ff       	call   c0013410 <File::close()>
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	b0 01                	mov    al,0x1
c001cb4d:	83 c4 3c             	add    esp,0x3c
c001cb50:	5b                   	pop    ebx
c001cb51:	5e                   	pop    esi
c001cb52:	5f                   	pop    edi
c001cb53:	5d                   	pop    ebp
c001cb54:	c3                   	ret    

c001cb55 <Thr::runtimeReferenceHelper()>:
c001cb55:	83 ec 18             	sub    esp,0x18
c001cb58:	68 0e c0 02 c0       	push   0xc002c00e
c001cb5d:	e8 94 62 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001cb62:	fa                   	cli    
c001cb63:	83 c4 10             	add    esp,0x10
c001cb66:	eb fe                	jmp    c001cb66 <Thr::runtimeReferenceHelper()+0x11>

c001cb68 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cb68:	57                   	push   edi
c001cb69:	56                   	push   esi
c001cb6a:	53                   	push   ebx
c001cb6b:	31 db                	xor    ebx,ebx
c001cb6d:	39 1d 20 19 03 c0    	cmp    DWORD PTR ds:0xc0031920,ebx
c001cb73:	7e 3c                	jle    c001cbb1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cb75:	8b 34 9d a0 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce760]
c001cb7c:	31 ff                	xor    edi,edi
c001cb7e:	39 3c 9d a0 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce860],edi
c001cb85:	7e 27                	jle    c001cbae <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cb87:	50                   	push   eax
c001cb88:	50                   	push   eax
c001cb89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb8d:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb8f:	03 04 9d 20 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce7e0]
c001cb96:	50                   	push   eax
c001cb97:	e8 24 3d fe ff       	call   c00008c0 <strcmp>
c001cb9c:	83 c4 10             	add    esp,0x10
c001cb9f:	85 c0                	test   eax,eax
c001cba1:	75 05                	jne    c001cba8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cba3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cba6:	eb 0b                	jmp    c001cbb3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cba8:	83 c6 10             	add    esi,0x10
c001cbab:	47                   	inc    edi
c001cbac:	eb d0                	jmp    c001cb7e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cbae:	43                   	inc    ebx
c001cbaf:	eb bc                	jmp    c001cb6d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cbb1:	31 c0                	xor    eax,eax
c001cbb3:	5b                   	pop    ebx
c001cbb4:	5e                   	pop    esi
c001cbb5:	5f                   	pop    edi
c001cbb6:	c3                   	ret    

c001cbb7 <Thr::loadKernelSymbolTable(char const*)>:
c001cbb7:	55                   	push   ebp
c001cbb8:	57                   	push   edi
c001cbb9:	56                   	push   esi
c001cbba:	53                   	push   ebx
c001cbbb:	83 ec 68             	sub    esp,0x68
c001cbbe:	8b 35 74 19 03 c0    	mov    esi,DWORD PTR ds:0xc0031974
c001cbc4:	68 14 01 00 00       	push   0x114
c001cbc9:	e8 72 2c ff ff       	call   c000f840 <malloc>
c001cbce:	83 c4 0c             	add    esp,0xc
c001cbd1:	89 c3                	mov    ebx,eax
c001cbd3:	56                   	push   esi
c001cbd4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cbd8:	50                   	push   eax
c001cbd9:	e8 70 67 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001cbde:	5e                   	pop    esi
c001cbdf:	5f                   	pop    edi
c001cbe0:	6a 01                	push   0x1
c001cbe2:	53                   	push   ebx
c001cbe3:	e8 ca 67 ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c001cbe8:	83 c4 10             	add    esp,0x10
c001cbeb:	85 c0                	test   eax,eax
c001cbed:	74 0a                	je     c001cbf9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cbef:	83 ec 0c             	sub    esp,0xc
c001cbf2:	68 30 c0 02 c0       	push   0xc002c030
c001cbf7:	eb 34                	jmp    c001cc2d <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cbf9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cc01:	83 ec 0c             	sub    esp,0xc
c001cc04:	6a 34                	push   0x34
c001cc06:	e8 35 2c ff ff       	call   c000f840 <malloc>
c001cc0b:	59                   	pop    ecx
c001cc0c:	89 c7                	mov    edi,eax
c001cc0e:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cc12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc14:	56                   	push   esi
c001cc15:	57                   	push   edi
c001cc16:	6a 00                	push   0x0
c001cc18:	6a 34                	push   0x34
c001cc1a:	53                   	push   ebx
c001cc1b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc1e:	83 c4 20             	add    esp,0x20
c001cc21:	85 c0                	test   eax,eax
c001cc23:	74 17                	je     c001cc3c <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cc25:	83 ec 0c             	sub    esp,0xc
c001cc28:	68 47 c0 02 c0       	push   0xc002c047
c001cc2d:	e8 65 d8 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001cc32:	83 c4 10             	add    esp,0x10
c001cc35:	31 c0                	xor    eax,eax
c001cc37:	e9 31 02 00 00       	jmp    c001ce6d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cc3c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc42:	75 e1                	jne    c001cc25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc44:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc47:	85 c0                	test   eax,eax
c001cc49:	74 da                	je     c001cc25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc4b:	52                   	push   edx
c001cc4c:	31 d2                	xor    edx,edx
c001cc4e:	52                   	push   edx
c001cc4f:	50                   	push   eax
c001cc50:	53                   	push   ebx
c001cc51:	e8 1a 68 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001cc56:	83 c4 10             	add    esp,0x10
c001cc59:	85 c0                	test   eax,eax
c001cc5b:	75 c8                	jne    c001cc25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc5d:	83 ec 0c             	sub    esp,0xc
c001cc60:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc64:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc68:	31 ed                	xor    ebp,ebp
c001cc6a:	0f af c2             	imul   eax,edx
c001cc6d:	50                   	push   eax
c001cc6e:	e8 cd 2b ff ff       	call   c000f840 <malloc>
c001cc73:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cc75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc79:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc80:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc84:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc88:	0f af c2             	imul   eax,edx
c001cc8b:	99                   	cdq    
c001cc8c:	52                   	push   edx
c001cc8d:	50                   	push   eax
c001cc8e:	53                   	push   ebx
c001cc8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc92:	83 c4 20             	add    esp,0x20
c001cc95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc9d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cca5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ccad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccb5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ccb9:	0f 86 aa 00 00 00    	jbe    c001cd69 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ccbf:	0f b7 f5             	movzx  esi,bp
c001ccc2:	6b f6 28             	imul   esi,esi,0x28
c001ccc5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ccc9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cccc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccd0:	50                   	push   eax
c001ccd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ccd5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ccd9:	8b 16                	mov    edx,DWORD PTR [esi]
c001ccdb:	6b c0 28             	imul   eax,eax,0x28
c001ccde:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cce2:	89 d0                	mov    eax,edx
c001cce4:	31 d2                	xor    edx,edx
c001cce6:	52                   	push   edx
c001cce7:	50                   	push   eax
c001cce8:	53                   	push   ebx
c001cce9:	e8 82 67 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001ccee:	83 c4 0c             	add    esp,0xc
c001ccf1:	6a 20                	push   0x20
c001ccf3:	6a 00                	push   0x0
c001ccf5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ccf9:	52                   	push   edx
c001ccfa:	e8 79 3a fe ff       	call   c0000778 <memset>
c001ccff:	58                   	pop    eax
c001cd00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd02:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cd06:	51                   	push   ecx
c001cd07:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cd0b:	52                   	push   edx
c001cd0c:	6a 00                	push   0x0
c001cd0e:	6a 1f                	push   0x1f
c001cd10:	53                   	push   ebx
c001cd11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd14:	83 c4 18             	add    esp,0x18
c001cd17:	68 5e c0 02 c0       	push   0xc002c05e
c001cd1c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd20:	52                   	push   edx
c001cd21:	e8 9a 3b fe ff       	call   c00008c0 <strcmp>
c001cd26:	83 c4 10             	add    esp,0x10
c001cd29:	85 c0                	test   eax,eax
c001cd2b:	75 0f                	jne    c001cd3c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cd2d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd3c:	50                   	push   eax
c001cd3d:	50                   	push   eax
c001cd3e:	68 66 c0 02 c0       	push   0xc002c066
c001cd43:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cd47:	50                   	push   eax
c001cd48:	e8 73 3b fe ff       	call   c00008c0 <strcmp>
c001cd4d:	83 c4 10             	add    esp,0x10
c001cd50:	85 c0                	test   eax,eax
c001cd52:	75 0f                	jne    c001cd63 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cd54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd63:	45                   	inc    ebp
c001cd64:	e9 4c ff ff ff       	jmp    c001ccb5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cd69:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cd6e:	75 10                	jne    c001cd80 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	68 6e c0 02 c0       	push   0xc002c06e
c001cd78:	e8 1a d7 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001cd7d:	83 c4 10             	add    esp,0x10
c001cd80:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cd85:	75 10                	jne    c001cd97 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cd87:	83 ec 0c             	sub    esp,0xc
c001cd8a:	68 6e c0 02 c0       	push   0xc002c06e
c001cd8f:	e8 03 d7 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001cd94:	83 c4 10             	add    esp,0x10
c001cd97:	31 d2                	xor    edx,edx
c001cd99:	50                   	push   eax
c001cd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd9e:	52                   	push   edx
c001cd9f:	50                   	push   eax
c001cda0:	53                   	push   ebx
c001cda1:	e8 ca 66 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001cda6:	5a                   	pop    edx
c001cda7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cdab:	e8 90 2a ff ff       	call   c000f840 <malloc>
c001cdb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cdb8:	31 c9                	xor    ecx,ecx
c001cdba:	5e                   	pop    esi
c001cdbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdbd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cdc1:	55                   	push   ebp
c001cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc6:	51                   	push   ecx
c001cdc7:	52                   	push   edx
c001cdc8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cdcc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cdd0:	53                   	push   ebx
c001cdd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdd4:	83 c4 14             	add    esp,0x14
c001cdd7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cddb:	e8 60 2a ff ff       	call   c000f840 <malloc>
c001cde0:	89 c6                	mov    esi,eax
c001cde2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cde4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cde7:	56                   	push   esi
c001cde8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cdf0:	51                   	push   ecx
c001cdf1:	52                   	push   edx
c001cdf2:	53                   	push   ebx
c001cdf3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdf6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdfa:	8b 15 20 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031920
c001ce00:	83 c4 1c             	add    esp,0x1c
c001ce03:	c1 e8 04             	shr    eax,0x4
c001ce06:	89 04 95 a0 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce860],eax
c001ce0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce11:	31 d2                	xor    edx,edx
c001ce13:	52                   	push   edx
c001ce14:	50                   	push   eax
c001ce15:	53                   	push   ebx
c001ce16:	e8 55 66 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001ce1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce1d:	31 d2                	xor    edx,edx
c001ce1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce22:	56                   	push   esi
c001ce23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce27:	52                   	push   edx
c001ce28:	50                   	push   eax
c001ce29:	53                   	push   ebx
c001ce2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce2d:	83 c4 14             	add    esp,0x14
c001ce30:	53                   	push   ebx
c001ce31:	e8 da 65 ff ff       	call   c0013410 <File::close()>
c001ce36:	5d                   	pop    ebp
c001ce37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce3b:	e8 10 2a ff ff       	call   c000f850 <free>
c001ce40:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce43:	e8 08 2a ff ff       	call   c000f850 <free>
c001ce48:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c001ce4d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce51:	8d 50 01             	lea    edx,[eax+0x1]
c001ce54:	89 0c 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],ecx
c001ce5b:	89 34 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],esi
c001ce62:	89 15 20 19 03 c0    	mov    DWORD PTR ds:0xc0031920,edx
c001ce68:	83 c4 10             	add    esp,0x10
c001ce6b:	b0 01                	mov    al,0x1
c001ce6d:	83 c4 5c             	add    esp,0x5c
c001ce70:	5b                   	pop    ebx
c001ce71:	5e                   	pop    esi
c001ce72:	5f                   	pop    edi
c001ce73:	5d                   	pop    ebp
c001ce74:	c3                   	ret    

c001ce75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ce75:	55                   	push   ebp
c001ce76:	57                   	push   edi
c001ce77:	56                   	push   esi
c001ce78:	53                   	push   ebx
c001ce79:	81 ec 68 03 00 00    	sub    esp,0x368
c001ce7f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ce86:	8b 1d 74 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031974
c001ce8c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ce90:	68 14 01 00 00       	push   0x114
c001ce95:	e8 a6 29 ff ff       	call   c000f840 <malloc>
c001ce9a:	83 c4 0c             	add    esp,0xc
c001ce9d:	89 c5                	mov    ebp,eax
c001ce9f:	53                   	push   ebx
c001cea0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cea7:	50                   	push   eax
c001cea8:	e8 a1 64 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001cead:	5e                   	pop    esi
c001ceae:	5f                   	pop    edi
c001ceaf:	6a 01                	push   0x1
c001ceb1:	55                   	push   ebp
c001ceb2:	e8 fb 64 ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c001ceb7:	83 c4 10             	add    esp,0x10
c001ceba:	85 c0                	test   eax,eax
c001cebc:	0f 85 8d 06 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cec2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ceca:	83 ec 0c             	sub    esp,0xc
c001cecd:	6a 34                	push   0x34
c001cecf:	e8 6c 29 ff ff       	call   c000f840 <malloc>
c001ced4:	5b                   	pop    ebx
c001ced5:	89 c7                	mov    edi,eax
c001ced7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cedb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cede:	53                   	push   ebx
c001cedf:	57                   	push   edi
c001cee0:	6a 00                	push   0x0
c001cee2:	6a 34                	push   0x34
c001cee4:	55                   	push   ebp
c001cee5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cee8:	83 c4 20             	add    esp,0x20
c001ceeb:	85 c0                	test   eax,eax
c001ceed:	0f 85 5c 06 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cef3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cef9:	0f 85 50 06 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ceff:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cf02:	85 c0                	test   eax,eax
c001cf04:	0f 84 45 06 00 00    	je     c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf0a:	31 d2                	xor    edx,edx
c001cf0c:	51                   	push   ecx
c001cf0d:	52                   	push   edx
c001cf0e:	50                   	push   eax
c001cf0f:	55                   	push   ebp
c001cf10:	e8 5b 65 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001cf15:	83 c4 10             	add    esp,0x10
c001cf18:	85 c0                	test   eax,eax
c001cf1a:	0f 85 2f 06 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cf26:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf2a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cf2e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf32:	0f af c2             	imul   eax,edx
c001cf35:	50                   	push   eax
c001cf36:	e8 05 29 ff ff       	call   c000f840 <malloc>
c001cf3b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf49:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf4d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf51:	0f af c2             	imul   eax,edx
c001cf54:	99                   	cdq    
c001cf55:	52                   	push   edx
c001cf56:	50                   	push   eax
c001cf57:	55                   	push   ebp
c001cf58:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf5b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cf5e:	83 c4 20             	add    esp,0x20
c001cf61:	85 c0                	test   eax,eax
c001cf63:	0f 84 e6 05 00 00    	je     c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf69:	52                   	push   edx
c001cf6a:	31 d2                	xor    edx,edx
c001cf6c:	52                   	push   edx
c001cf6d:	50                   	push   eax
c001cf6e:	55                   	push   ebp
c001cf6f:	e8 fc 64 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	85 c0                	test   eax,eax
c001cf79:	0f 85 d0 05 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf7f:	83 ec 0c             	sub    esp,0xc
c001cf82:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf86:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf8a:	31 f6                	xor    esi,esi
c001cf8c:	0f af c2             	imul   eax,edx
c001cf8f:	50                   	push   eax
c001cf90:	e8 ab 28 ff ff       	call   c000f840 <malloc>
c001cf95:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfa3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cfa7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cfab:	0f af c2             	imul   eax,edx
c001cfae:	99                   	cdq    
c001cfaf:	52                   	push   edx
c001cfb0:	50                   	push   eax
c001cfb1:	55                   	push   ebp
c001cfb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfb5:	83 c4 20             	add    esp,0x20
c001cfb8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cfbc:	0f 86 8a 00 00 00    	jbe    c001d04c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cfc2:	0f b7 de             	movzx  ebx,si
c001cfc5:	c1 e3 05             	shl    ebx,0x5
c001cfc8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cfcc:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cfcf:	75 75                	jne    c001d046 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cfd1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cfd4:	31 d2                	xor    edx,edx
c001cfd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cfda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cfdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfe1:	50                   	push   eax
c001cfe2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cfe5:	52                   	push   edx
c001cfe6:	50                   	push   eax
c001cfe7:	55                   	push   ebp
c001cfe8:	e8 83 64 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001cfed:	83 c4 10             	add    esp,0x10
c001cff0:	85 c0                	test   eax,eax
c001cff2:	0f 85 57 05 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cff8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cfff:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d002:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d006:	31 d2                	xor    edx,edx
c001d008:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d00c:	83 ec 0c             	sub    esp,0xc
c001d00f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d013:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d01a:	50                   	push   eax
c001d01b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d01f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d023:	52                   	push   edx
c001d024:	50                   	push   eax
c001d025:	55                   	push   ebp
c001d026:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d029:	83 c4 1c             	add    esp,0x1c
c001d02c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d02f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d032:	50                   	push   eax
c001d033:	6a 00                	push   0x0
c001d035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d039:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d03d:	50                   	push   eax
c001d03e:	e8 35 37 fe ff       	call   c0000778 <memset>
c001d043:	83 c4 10             	add    esp,0x10
c001d046:	46                   	inc    esi
c001d047:	e9 6c ff ff ff       	jmp    c001cfb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d04c:	53                   	push   ebx
c001d04d:	31 db                	xor    ebx,ebx
c001d04f:	68 00 01 00 00       	push   0x100
c001d054:	6a 00                	push   0x0
c001d056:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d05a:	50                   	push   eax
c001d05b:	e8 18 37 fe ff       	call   c0000778 <memset>
c001d060:	83 c4 0c             	add    esp,0xc
c001d063:	68 00 01 00 00       	push   0x100
c001d068:	6a 00                	push   0x0
c001d06a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d071:	50                   	push   eax
c001d072:	e8 01 37 fe ff       	call   c0000778 <memset>
c001d077:	83 c4 10             	add    esp,0x10
c001d07a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d082:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d08a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d092:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d09a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d0a2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d0a6:	0f 86 30 01 00 00    	jbe    c001d1dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d0ac:	0f b7 f3             	movzx  esi,bx
c001d0af:	6b f6 28             	imul   esi,esi,0x28
c001d0b2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d0b6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d0b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0bd:	52                   	push   edx
c001d0be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0c2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d0c6:	8b 06                	mov    eax,DWORD PTR [esi]
c001d0c8:	6b d2 28             	imul   edx,edx,0x28
c001d0cb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d0cf:	31 d2                	xor    edx,edx
c001d0d1:	52                   	push   edx
c001d0d2:	50                   	push   eax
c001d0d3:	55                   	push   ebp
c001d0d4:	e8 97 63 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001d0d9:	83 c4 0c             	add    esp,0xc
c001d0dc:	6a 20                	push   0x20
c001d0de:	6a 00                	push   0x0
c001d0e0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d0e7:	51                   	push   ecx
c001d0e8:	e8 8b 36 fe ff       	call   c0000778 <memset>
c001d0ed:	59                   	pop    ecx
c001d0ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d0f5:	52                   	push   edx
c001d0f6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d0fd:	51                   	push   ecx
c001d0fe:	6a 00                	push   0x0
c001d100:	6a 1f                	push   0x1f
c001d102:	55                   	push   ebp
c001d103:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d106:	83 c4 1c             	add    esp,0x1c
c001d109:	6a 09                	push   0x9
c001d10b:	68 88 c0 02 c0       	push   0xc002c088
c001d110:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d117:	51                   	push   ecx
c001d118:	e8 23 35 fe ff       	call   c0000640 <memcmp>
c001d11d:	83 c4 10             	add    esp,0x10
c001d120:	85 c0                	test   eax,eax
c001d122:	75 21                	jne    c001d145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d128:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d12c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d130:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d134:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d137:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d13e:	89 d0                	mov    eax,edx
c001d140:	40                   	inc    eax
c001d141:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d145:	50                   	push   eax
c001d146:	6a 09                	push   0x9
c001d148:	68 92 c0 02 c0       	push   0xc002c092
c001d14d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d154:	50                   	push   eax
c001d155:	e8 e6 34 fe ff       	call   c0000640 <memcmp>
c001d15a:	83 c4 10             	add    esp,0x10
c001d15d:	85 c0                	test   eax,eax
c001d15f:	75 21                	jne    c001d182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d165:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d169:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d16d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d171:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d174:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d17b:	89 d0                	mov    eax,edx
c001d17d:	40                   	inc    eax
c001d17e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d182:	50                   	push   eax
c001d183:	50                   	push   eax
c001d184:	68 5e c0 02 c0       	push   0xc002c05e
c001d189:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d190:	50                   	push   eax
c001d191:	e8 2a 37 fe ff       	call   c00008c0 <strcmp>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	85 c0                	test   eax,eax
c001d19b:	75 0f                	jne    c001d1ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d19d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1ac:	50                   	push   eax
c001d1ad:	50                   	push   eax
c001d1ae:	68 66 c0 02 c0       	push   0xc002c066
c001d1b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1ba:	50                   	push   eax
c001d1bb:	e8 00 37 fe ff       	call   c00008c0 <strcmp>
c001d1c0:	83 c4 10             	add    esp,0x10
c001d1c3:	85 c0                	test   eax,eax
c001d1c5:	75 0f                	jne    c001d1d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d1c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d1d6:	43                   	inc    ebx
c001d1d7:	e9 c6 fe ff ff       	jmp    c001d0a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d1dc:	31 d2                	xor    edx,edx
c001d1de:	50                   	push   eax
c001d1df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d1e3:	52                   	push   edx
c001d1e4:	50                   	push   eax
c001d1e5:	55                   	push   ebp
c001d1e6:	e8 85 62 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001d1eb:	58                   	pop    eax
c001d1ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1f0:	e8 4b 26 ff ff       	call   c000f840 <malloc>
c001d1f5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d1fc:	31 d2                	xor    edx,edx
c001d1fe:	58                   	pop    eax
c001d1ff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d203:	53                   	push   ebx
c001d204:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d208:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d20c:	52                   	push   edx
c001d20d:	50                   	push   eax
c001d20e:	55                   	push   ebp
c001d20f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d212:	83 c4 14             	add    esp,0x14
c001d215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d219:	e8 22 26 ff ff       	call   c000f840 <malloc>
c001d21e:	31 d2                	xor    edx,edx
c001d220:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d224:	83 c4 0c             	add    esp,0xc
c001d227:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d22b:	52                   	push   edx
c001d22c:	50                   	push   eax
c001d22d:	55                   	push   ebp
c001d22e:	e8 3d 62 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001d233:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d236:	31 d2                	xor    edx,edx
c001d238:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d23b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d23f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d243:	52                   	push   edx
c001d244:	50                   	push   eax
c001d245:	55                   	push   ebp
c001d246:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d249:	83 c4 20             	add    esp,0x20
c001d24c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d254:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d258:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d25c:	0f 84 f1 02 00 00    	je     c001d553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d262:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d269:	31 d2                	xor    edx,edx
c001d26b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d26f:	c1 e8 03             	shr    eax,0x3
c001d272:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d276:	51                   	push   ecx
c001d277:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d27b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d27f:	52                   	push   edx
c001d280:	50                   	push   eax
c001d281:	55                   	push   ebp
c001d282:	e8 e9 61 ff ff       	call   c0013470 <File::seek(unsigned long long)>
c001d287:	5b                   	pop    ebx
c001d288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d28c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d293:	e8 a8 25 ff ff       	call   c000f840 <malloc>
c001d298:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d29b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d29f:	31 d2                	xor    edx,edx
c001d2a1:	5e                   	pop    esi
c001d2a2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d2a6:	50                   	push   eax
c001d2a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2af:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d2b6:	52                   	push   edx
c001d2b7:	50                   	push   eax
c001d2b8:	55                   	push   ebp
c001d2b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2bc:	83 c4 20             	add    esp,0x20
c001d2bf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d2c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d2cb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d2cf:	0f 8d 62 02 00 00    	jge    c001d537 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d2d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2dd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d2e2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d2e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d2e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ed:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d2f1:	89 d8                	mov    eax,ebx
c001d2f3:	c1 e8 08             	shr    eax,0x8
c001d2f6:	89 c6                	mov    esi,eax
c001d2f8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d2fc:	c1 e6 04             	shl    esi,0x4
c001d2ff:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d303:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d306:	85 d2                	test   edx,edx
c001d308:	0f 85 bf 00 00 00    	jne    c001d3cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d30e:	83 ec 0c             	sub    esp,0xc
c001d311:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d315:	03 06                	add    eax,DWORD PTR [esi]
c001d317:	50                   	push   eax
c001d318:	e8 4b f8 ff ff       	call   c001cb68 <Thr::getAddressOfKernelSymbol(char const*)>
c001d31d:	83 c4 10             	add    esp,0x10
c001d320:	89 c2                	mov    edx,eax
c001d322:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d327:	85 c0                	test   eax,eax
c001d329:	0f 85 9e 00 00 00    	jne    c001d3cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d32f:	83 ec 0c             	sub    esp,0xc
c001d332:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d336:	03 06                	add    eax,DWORD PTR [esi]
c001d338:	50                   	push   eax
c001d339:	e8 b7 11 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	89 c2                	mov    edx,eax
c001d343:	85 c0                	test   eax,eax
c001d345:	0f 85 82 00 00 00    	jne    c001d3cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d34b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d34f:	50                   	push   eax
c001d350:	50                   	push   eax
c001d351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d355:	03 06                	add    eax,DWORD PTR [esi]
c001d357:	50                   	push   eax
c001d358:	68 9c c0 02 c0       	push   0xc002c09c
c001d35d:	e8 94 5a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001d362:	58                   	pop    eax
c001d363:	5a                   	pop    edx
c001d364:	68 b6 c0 02 c0       	push   0xc002c0b6
c001d369:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d370:	50                   	push   eax
c001d371:	e8 be 34 fe ff       	call   c0000834 <strcpy>
c001d376:	59                   	pop    ecx
c001d377:	58                   	pop    eax
c001d378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d37c:	03 06                	add    eax,DWORD PTR [esi]
c001d37e:	50                   	push   eax
c001d37f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d386:	50                   	push   eax
c001d387:	e8 e8 35 fe ff       	call   c0000974 <strcat>
c001d38c:	58                   	pop    eax
c001d38d:	5a                   	pop    edx
c001d38e:	68 4c c1 02 c0       	push   0xc002c14c
c001d393:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d39a:	50                   	push   eax
c001d39b:	e8 d4 35 fe ff       	call   c0000974 <strcat>
c001d3a0:	83 c4 10             	add    esp,0x10
c001d3a3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3a8:	0f 84 43 01 00 00    	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3ae:	83 ec 0c             	sub    esp,0xc
c001d3b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3b8:	50                   	push   eax
c001d3b9:	e8 d9 d0 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d3be:	83 c4 10             	add    esp,0x10
c001d3c1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d3c5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d3c9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d3cd:	80 fb 01             	cmp    bl,0x1
c001d3d0:	75 7d                	jne    c001d44f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d3d2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d3d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3dd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d3e1:	01 ce                	add    esi,ecx
c001d3e3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3e9:	0f 94 c0             	sete   al
c001d3ec:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3f2:	0f 94 c3             	sete   bl
c001d3f5:	09 c3                	or     ebx,eax
c001d3f7:	8b 06                	mov    eax,DWORD PTR [esi]
c001d3f9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d3fe:	74 36                	je     c001d436 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d400:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d403:	84 db                	test   bl,bl
c001d405:	75 0a                	jne    c001d411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d407:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d40b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d40f:	76 37                	jbe    c001d448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d411:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d415:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d41a:	0f 84 d1 00 00 00    	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d420:	83 ec 0c             	sub    esp,0xc
c001d423:	68 cd c0 02 c0       	push   0xc002c0cd
c001d428:	e8 6a d0 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d42d:	83 c4 10             	add    esp,0x10
c001d430:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d434:	eb 12                	jmp    c001d448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d436:	01 c1                	add    ecx,eax
c001d438:	84 db                	test   bl,bl
c001d43a:	75 0c                	jne    c001d448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d43c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d440:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d444:	77 02                	ja     c001d448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d446:	01 d1                	add    ecx,edx
c001d448:	89 0e                	mov    DWORD PTR [esi],ecx
c001d44a:	e9 df 00 00 00       	jmp    c001d52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d44f:	80 fb 02             	cmp    bl,0x2
c001d452:	75 71                	jne    c001d4c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d454:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d45b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d45f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d463:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d469:	74 15                	je     c001d480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d46b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d471:	74 0d                	je     c001d480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d473:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d477:	83 e8 04             	sub    eax,0x4
c001d47a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d47e:	76 1f                	jbe    c001d49f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d480:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d484:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d489:	74 66                	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d48b:	83 ec 0c             	sub    esp,0xc
c001d48e:	68 e9 c0 02 c0       	push   0xc002c0e9
c001d493:	e8 ff cf ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d498:	83 c4 10             	add    esp,0x10
c001d49b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d49f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4a1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4a6:	74 13                	je     c001d4bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d4a8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d4ac:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d4b3:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d4b7:	01 c8                	add    eax,ecx
c001d4b9:	eb 04                	jmp    c001d4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d4bb:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d4bf:	01 c2                	add    edx,eax
c001d4c1:	89 16                	mov    DWORD PTR [esi],edx
c001d4c3:	eb 69                	jmp    c001d52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4c5:	0f b6 db             	movzx  ebx,bl
c001d4c8:	50                   	push   eax
c001d4c9:	50                   	push   eax
c001d4ca:	53                   	push   ebx
c001d4cb:	68 05 c1 02 c0       	push   0xc002c105
c001d4d0:	e8 21 59 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001d4d5:	83 c4 10             	add    esp,0x10
c001d4d8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4dd:	74 12                	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4df:	83 ec 0c             	sub    esp,0xc
c001d4e2:	68 10 c1 02 c0       	push   0xc002c110
c001d4e7:	e8 ab cf ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d4ec:	83 c4 10             	add    esp,0x10
c001d4ef:	eb 3d                	jmp    c001d52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4f1:	83 ec 0c             	sub    esp,0xc
c001d4f4:	55                   	push   ebp
c001d4f5:	e8 16 5f ff ff       	call   c0013410 <File::close()>
c001d4fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d503:	59                   	pop    ecx
c001d504:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d508:	e8 43 23 ff ff       	call   c000f850 <free>
c001d50d:	5b                   	pop    ebx
c001d50e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d512:	e8 39 23 ff ff       	call   c000f850 <free>
c001d517:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d51a:	e8 31 23 ff ff       	call   c000f850 <free>
c001d51f:	5e                   	pop    esi
c001d520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d524:	e8 27 23 ff ff       	call   c000f850 <free>
c001d529:	83 c4 10             	add    esp,0x10
c001d52c:	eb 21                	jmp    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d52e:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d532:	e9 90 fd ff ff       	jmp    c001d2c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d537:	83 ec 0c             	sub    esp,0xc
c001d53a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d53e:	e8 0d 23 ff ff       	call   c000f850 <free>
c001d543:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d547:	83 c4 10             	add    esp,0x10
c001d54a:	e9 05 fd ff ff       	jmp    c001d254 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d54f:	31 c0                	xor    eax,eax
c001d551:	eb 33                	jmp    c001d586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d553:	83 ec 0c             	sub    esp,0xc
c001d556:	55                   	push   ebp
c001d557:	e8 b4 5e ff ff       	call   c0013410 <File::close()>
c001d55c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d55f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d562:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d565:	58                   	pop    eax
c001d566:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d56a:	e8 e1 22 ff ff       	call   c000f850 <free>
c001d56f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d572:	e8 d9 22 ff ff       	call   c000f850 <free>
c001d577:	5a                   	pop    edx
c001d578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d57c:	e8 cf 22 ff ff       	call   c000f850 <free>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	b0 01                	mov    al,0x1
c001d586:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d58c:	5b                   	pop    ebx
c001d58d:	5e                   	pop    esi
c001d58e:	5f                   	pop    edi
c001d58f:	5d                   	pop    ebp
c001d590:	c3                   	ret    

c001d591 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d591:	56                   	push   esi
c001d592:	31 d2                	xor    edx,edx
c001d594:	53                   	push   ebx
c001d595:	8b 1d 80 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031180
c001d59b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d59f:	39 d3                	cmp    ebx,edx
c001d5a1:	7e 1b                	jle    c001d5be <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d5a3:	8b 04 95 a0 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcec60]
c001d5aa:	39 c8                	cmp    eax,ecx
c001d5ac:	77 0d                	ja     c001d5bb <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d5ae:	8b 34 95 a0 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcee60]
c001d5b5:	01 c6                	add    esi,eax
c001d5b7:	39 ce                	cmp    esi,ecx
c001d5b9:	77 05                	ja     c001d5c0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d5bb:	42                   	inc    edx
c001d5bc:	eb e1                	jmp    c001d59f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d5be:	31 c0                	xor    eax,eax
c001d5c0:	5b                   	pop    ebx
c001d5c1:	5e                   	pop    esi
c001d5c2:	c3                   	ret    

c001d5c3 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d5c3:	53                   	push   ebx
c001d5c4:	31 c0                	xor    eax,eax
c001d5c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d5ca:	8b 1d 80 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031180
c001d5d0:	39 c3                	cmp    ebx,eax
c001d5d2:	7e 22                	jle    c001d5f6 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d5d4:	8b 14 85 a0 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec60]
c001d5db:	39 ca                	cmp    edx,ecx
c001d5dd:	77 14                	ja     c001d5f3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d5df:	03 14 85 a0 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcee60]
c001d5e6:	39 ca                	cmp    edx,ecx
c001d5e8:	76 09                	jbe    c001d5f3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d5ea:	8b 04 85 a0 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcea60]
c001d5f1:	eb 05                	jmp    c001d5f8 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d5f3:	40                   	inc    eax
c001d5f4:	eb da                	jmp    c001d5d0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d5f6:	31 c0                	xor    eax,eax
c001d5f8:	5b                   	pop    ebx
c001d5f9:	c3                   	ret    

c001d5fa <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d5fa:	53                   	push   ebx
c001d5fb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d5ff:	53                   	push   ebx
c001d600:	e8 8c ff ff ff       	call   c001d591 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d605:	5a                   	pop    edx
c001d606:	31 d2                	xor    edx,edx
c001d608:	85 c0                	test   eax,eax
c001d60a:	74 04                	je     c001d610 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d60c:	89 da                	mov    edx,ebx
c001d60e:	29 c2                	sub    edx,eax
c001d610:	89 d0                	mov    eax,edx
c001d612:	5b                   	pop    ebx
c001d613:	c3                   	ret    

c001d614 <Thr::loadDLL(char const*, bool)>:
c001d614:	55                   	push   ebp
c001d615:	57                   	push   edi
c001d616:	56                   	push   esi
c001d617:	53                   	push   ebx
c001d618:	81 ec 34 01 00 00    	sub    esp,0x134
c001d61e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d625:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d62c:	56                   	push   esi
c001d62d:	68 28 c1 02 c0       	push   0xc002c128
c001d632:	e8 bf 57 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001d637:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d63e:	e8 fd 21 ff ff       	call   c000f840 <malloc>
c001d643:	83 c4 0c             	add    esp,0xc
c001d646:	89 c3                	mov    ebx,eax
c001d648:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001d64e:	56                   	push   esi
c001d64f:	50                   	push   eax
c001d650:	e8 f9 5c ff ff       	call   c001334e <File::File(char const*, Process*)>
c001d655:	83 c4 10             	add    esp,0x10
c001d658:	85 db                	test   ebx,ebx
c001d65a:	75 3c                	jne    c001d698 <Thr::loadDLL(char const*, bool)+0x84>
c001d65c:	89 e8                	mov    eax,ebp
c001d65e:	84 c0                	test   al,al
c001d660:	0f 84 d5 01 00 00    	je     c001d83b <Thr::loadDLL(char const*, bool)+0x227>
c001d666:	57                   	push   edi
c001d667:	57                   	push   edi
c001d668:	68 39 c1 02 c0       	push   0xc002c139
c001d66d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d671:	57                   	push   edi
c001d672:	e8 bd 31 fe ff       	call   c0000834 <strcpy>
c001d677:	58                   	pop    eax
c001d678:	5a                   	pop    edx
c001d679:	56                   	push   esi
c001d67a:	57                   	push   edi
c001d67b:	e8 f4 32 fe ff       	call   c0000974 <strcat>
c001d680:	59                   	pop    ecx
c001d681:	58                   	pop    eax
c001d682:	68 4c c1 02 c0       	push   0xc002c14c
c001d687:	57                   	push   edi
c001d688:	e8 e7 32 fe ff       	call   c0000974 <strcat>
c001d68d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d690:	e8 02 ce ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d695:	83 c4 10             	add    esp,0x10
c001d698:	51                   	push   ecx
c001d699:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d69d:	50                   	push   eax
c001d69e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d6a2:	50                   	push   eax
c001d6a3:	53                   	push   ebx
c001d6a4:	e8 b5 5f ff ff       	call   c001365e <File::stat(unsigned long long*, bool*)>
c001d6a9:	83 c4 10             	add    esp,0x10
c001d6ac:	85 db                	test   ebx,ebx
c001d6ae:	74 0c                	je     c001d6bc <Thr::loadDLL(char const*, bool)+0xa8>
c001d6b0:	83 ec 0c             	sub    esp,0xc
c001d6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d6b5:	53                   	push   ebx
c001d6b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6b9:	83 c4 10             	add    esp,0x10
c001d6bc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d6c1:	75 0a                	jne    c001d6cd <Thr::loadDLL(char const*, bool)+0xb9>
c001d6c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6c7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d6cb:	75 3c                	jne    c001d709 <Thr::loadDLL(char const*, bool)+0xf5>
c001d6cd:	89 e8                	mov    eax,ebp
c001d6cf:	84 c0                	test   al,al
c001d6d1:	0f 84 4c 01 00 00    	je     c001d823 <Thr::loadDLL(char const*, bool)+0x20f>
c001d6d7:	51                   	push   ecx
c001d6d8:	51                   	push   ecx
c001d6d9:	68 39 c1 02 c0       	push   0xc002c139
c001d6de:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d6e2:	53                   	push   ebx
c001d6e3:	e8 4c 31 fe ff       	call   c0000834 <strcpy>
c001d6e8:	5f                   	pop    edi
c001d6e9:	58                   	pop    eax
c001d6ea:	56                   	push   esi
c001d6eb:	53                   	push   ebx
c001d6ec:	e8 83 32 fe ff       	call   c0000974 <strcat>
c001d6f1:	58                   	pop    eax
c001d6f2:	5a                   	pop    edx
c001d6f3:	68 4c c1 02 c0       	push   0xc002c14c
c001d6f8:	53                   	push   ebx
c001d6f9:	e8 76 32 fe ff       	call   c0000974 <strcat>
c001d6fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d701:	e8 91 cd ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d706:	83 c4 10             	add    esp,0x10
c001d709:	e8 59 46 ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c001d70e:	51                   	push   ecx
c001d70f:	6a 03                	push   0x3
c001d711:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d715:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d719:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d71f:	83 d3 00             	adc    ebx,0x0
c001d722:	89 ca                	mov    edx,ecx
c001d724:	89 d1                	mov    ecx,edx
c001d726:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d72a:	51                   	push   ecx
c001d72b:	50                   	push   eax
c001d72c:	e8 71 4c ff ff       	call   c00123a2 <VAS::allocatePages(int, int)>
c001d731:	5f                   	pop    edi
c001d732:	89 c3                	mov    ebx,eax
c001d734:	58                   	pop    eax
c001d735:	53                   	push   ebx
c001d736:	68 4e c1 02 c0       	push   0xc002c14e
c001d73b:	e8 b6 56 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001d740:	89 34 24             	mov    DWORD PTR [esp],esi
c001d743:	e8 4c 30 fe ff       	call   c0000794 <strlen>
c001d748:	8b 3d 80 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031180
c001d74e:	40                   	inc    eax
c001d74f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d752:	e8 e9 20 ff ff       	call   c000f840 <malloc>
c001d757:	89 04 bd a0 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffcea60],eax
c001d75e:	58                   	pop    eax
c001d75f:	a1 80 11 03 c0       	mov    eax,ds:0xc0031180
c001d764:	5a                   	pop    edx
c001d765:	56                   	push   esi
c001d766:	ff 34 85 a0 15 03 c0 	push   DWORD PTR [eax*4-0x3ffcea60]
c001d76d:	e8 c2 30 fe ff       	call   c0000834 <strcpy>
c001d772:	a1 80 11 03 c0       	mov    eax,ds:0xc0031180
c001d777:	8d 50 01             	lea    edx,[eax+0x1]
c001d77a:	89 1c 85 a0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec60],ebx
c001d781:	89 15 80 11 03 c0    	mov    DWORD PTR ds:0xc0031180,edx
c001d787:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d78b:	83 c4 0c             	add    esp,0xc
c001d78e:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c001d795:	6a 01                	push   0x1
c001d797:	53                   	push   ebx
c001d798:	56                   	push   esi
c001d799:	e8 d7 f6 ff ff       	call   c001ce75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d79e:	83 c4 10             	add    esp,0x10
c001d7a1:	89 c7                	mov    edi,eax
c001d7a3:	84 c0                	test   al,al
c001d7a5:	0f 85 8c 00 00 00    	jne    c001d837 <Thr::loadDLL(char const*, bool)+0x223>
c001d7ab:	89 e8                	mov    eax,ebp
c001d7ad:	84 c0                	test   al,al
c001d7af:	74 76                	je     c001d827 <Thr::loadDLL(char const*, bool)+0x213>
c001d7b1:	83 ec 0c             	sub    esp,0xc
c001d7b4:	68 5b c1 02 c0       	push   0xc002c15b
c001d7b9:	e8 d9 cc ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d7be:	83 c4 10             	add    esp,0x10
c001d7c1:	eb 64                	jmp    c001d827 <Thr::loadDLL(char const*, bool)+0x213>
c001d7c3:	e8 9f 45 ff ff       	call   c0011d67 <Virt::getAKernelVAS()>
c001d7c8:	89 f5                	mov    ebp,esi
c001d7ca:	c1 e5 0c             	shl    ebp,0xc
c001d7cd:	52                   	push   edx
c001d7ce:	01 dd                	add    ebp,ebx
c001d7d0:	52                   	push   edx
c001d7d1:	55                   	push   ebp
c001d7d2:	50                   	push   eax
c001d7d3:	e8 44 47 ff ff       	call   c0011f1c <VAS::getPageTableEntry(unsigned long)>
c001d7d8:	83 c4 10             	add    esp,0x10
c001d7db:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d7de:	75 0c                	jne    c001d7ec <Thr::loadDLL(char const*, bool)+0x1d8>
c001d7e0:	83 ec 0c             	sub    esp,0xc
c001d7e3:	55                   	push   ebp
c001d7e4:	e8 6a 26 ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	46                   	inc    esi
c001d7ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7f5:	05 ff 0f 00 00       	add    eax,0xfff
c001d7fa:	83 d2 00             	adc    edx,0x0
c001d7fd:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d801:	c1 ea 0c             	shr    edx,0xc
c001d804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d808:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d80c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d810:	ba 00 00 00 00       	mov    edx,0x0
c001d815:	89 d0                	mov    eax,edx
c001d817:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d81b:	72 a6                	jb     c001d7c3 <Thr::loadDLL(char const*, bool)+0x1af>
c001d81d:	89 f8                	mov    eax,edi
c001d81f:	84 c0                	test   al,al
c001d821:	75 18                	jne    c001d83b <Thr::loadDLL(char const*, bool)+0x227>
c001d823:	31 db                	xor    ebx,ebx
c001d825:	eb 14                	jmp    c001d83b <Thr::loadDLL(char const*, bool)+0x227>
c001d827:	83 ec 0c             	sub    esp,0xc
c001d82a:	68 7a c1 02 c0       	push   0xc002c17a
c001d82f:	e8 63 cc ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d834:	83 c4 10             	add    esp,0x10
c001d837:	31 f6                	xor    esi,esi
c001d839:	eb b2                	jmp    c001d7ed <Thr::loadDLL(char const*, bool)+0x1d9>
c001d83b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d841:	89 d8                	mov    eax,ebx
c001d843:	5b                   	pop    ebx
c001d844:	5e                   	pop    esi
c001d845:	5f                   	pop    edi
c001d846:	5d                   	pop    ebp
c001d847:	c3                   	ret    

c001d848 <Thr::executeDLL(unsigned long, void*)>:
c001d848:	56                   	push   esi
c001d849:	53                   	push   ebx
c001d84a:	52                   	push   edx
c001d84b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d84f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d853:	85 db                	test   ebx,ebx
c001d855:	75 10                	jne    c001d867 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d857:	83 ec 0c             	sub    esp,0xc
c001d85a:	68 96 c1 02 c0       	push   0xc002c196
c001d85f:	e8 33 cc ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001d864:	83 c4 10             	add    esp,0x10
c001d867:	50                   	push   eax
c001d868:	50                   	push   eax
c001d869:	53                   	push   ebx
c001d86a:	68 c0 c1 02 c0       	push   0xc002c1c0
c001d86f:	e8 82 55 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001d874:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d878:	89 d8                	mov    eax,ebx
c001d87a:	83 c4 14             	add    esp,0x14
c001d87d:	5b                   	pop    ebx
c001d87e:	5e                   	pop    esi
c001d87f:	ff e0                	jmp    eax
c001d881:	90                   	nop

c001d882 <changeTSS>:
c001d882:	83 ec 14             	sub    esp,0x14
c001d885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d88a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d88d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d892:	c1 e2 15             	shl    edx,0x15
c001d895:	29 d0                	sub    eax,edx
c001d897:	50                   	push   eax
c001d898:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001d89d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d8a3:	05 7c 11 00 00       	add    eax,0x117c
c001d8a8:	50                   	push   eax
c001d8a9:	e8 b0 3b ff ff       	call   c001145e <TSS::setESP(unsigned long)>
c001d8ae:	83 c4 1c             	add    esp,0x1c
c001d8b1:	c3                   	ret    

c001d8b2 <Process::addArgs(char**)>:
c001d8b2:	57                   	push   edi
c001d8b3:	56                   	push   esi
c001d8b4:	53                   	push   ebx
c001d8b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8b9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d8bd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d8c7:	85 ff                	test   edi,edi
c001d8c9:	74 3d                	je     c001d908 <Process::addArgs(char**)+0x56>
c001d8cb:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8cd:	85 c0                	test   eax,eax
c001d8cf:	74 37                	je     c001d908 <Process::addArgs(char**)+0x56>
c001d8d1:	31 db                	xor    ebx,ebx
c001d8d3:	83 ec 0c             	sub    esp,0xc
c001d8d6:	50                   	push   eax
c001d8d7:	e8 b8 2e fe ff       	call   c0000794 <strlen>
c001d8dc:	40                   	inc    eax
c001d8dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8e0:	e8 5b 1f ff ff       	call   c000f840 <malloc>
c001d8e5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d8ec:	5a                   	pop    edx
c001d8ed:	59                   	pop    ecx
c001d8ee:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d8f1:	43                   	inc    ebx
c001d8f2:	50                   	push   eax
c001d8f3:	e8 3c 2f fe ff       	call   c0000834 <strcpy>
c001d8f8:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d904:	85 c0                	test   eax,eax
c001d906:	75 cb                	jne    c001d8d3 <Process::addArgs(char**)+0x21>
c001d908:	5b                   	pop    ebx
c001d909:	5e                   	pop    esi
c001d90a:	5f                   	pop    edi
c001d90b:	c3                   	ret    

c001d90c <Process::Process(char const*, Process*, char**)>:
c001d90c:	56                   	push   esi
c001d90d:	53                   	push   ebx
c001d90e:	83 ec 14             	sub    esp,0x14
c001d911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d915:	05 0c 02 00 00       	add    eax,0x20c
c001d91a:	bb 07 00 00 00       	mov    ebx,0x7
c001d91f:	89 c6                	mov    esi,eax
c001d921:	85 db                	test   ebx,ebx
c001d923:	78 12                	js     c001d937 <Process::Process(char const*, Process*, char**)+0x2b>
c001d925:	83 ec 0c             	sub    esp,0xc
c001d928:	56                   	push   esi
c001d929:	e8 24 b2 00 00       	call   c0028b52 <ThreadControlBlock::ThreadControlBlock()>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	83 c6 63             	add    esi,0x63
c001d934:	4b                   	dec    ebx
c001d935:	eb ea                	jmp    c001d921 <Process::Process(char const*, Process*, char**)+0x15>
c001d937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d93b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d942:	83 ec 0c             	sub    esp,0xc
c001d945:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d949:	e8 9a c9 ff ff       	call   c001a2e8 <Krnl::newProcessEnv(Process*)>
c001d94e:	83 c4 10             	add    esp,0x10
c001d951:	89 c2                	mov    edx,eax
c001d953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d957:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d961:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d96a:	a1 90 d9 02 c0       	mov    eax,ds:0xc002d990
c001d96f:	8d 50 01             	lea    edx,[eax+0x1]
c001d972:	89 15 90 d9 02 c0    	mov    DWORD PTR ds:0xc002d990,edx
c001d978:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d97c:	89 02                	mov    DWORD PTR [edx],eax
c001d97e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d986:	83 ec 0c             	sub    esp,0xc
c001d989:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d98d:	e8 ae 1e ff ff       	call   c000f840 <malloc>
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	89 c3                	mov    ebx,eax
c001d997:	83 ec 08             	sub    esp,0x8
c001d99a:	6a 00                	push   0x0
c001d99c:	53                   	push   ebx
c001d99d:	e8 a8 4d ff ff       	call   c001274a <VAS::VAS(bool)>
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9b3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9c5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d9cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9cf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9d5:	85 c0                	test   eax,eax
c001d9d7:	74 42                	je     c001da1b <Process::Process(char const*, Process*, char**)+0x10f>
c001d9d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9dd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9e3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ed:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9fd:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da07:	05 0c 01 00 00       	add    eax,0x10c
c001da0c:	83 ec 08             	sub    esp,0x8
c001da0f:	52                   	push   edx
c001da10:	50                   	push   eax
c001da11:	e8 1e 2e fe ff       	call   c0000834 <strcpy>
c001da16:	83 c4 10             	add    esp,0x10
c001da19:	eb 63                	jmp    c001da7e <Process::Process(char const*, Process*, char**)+0x172>
c001da1b:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001da23:	83 ec 0c             	sub    esp,0xc
c001da26:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da2a:	e8 11 1e ff ff       	call   c000f840 <malloc>
c001da2f:	83 c4 10             	add    esp,0x10
c001da32:	89 c3                	mov    ebx,eax
c001da34:	83 ec 08             	sub    esp,0x8
c001da37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da3b:	53                   	push   ebx
c001da3c:	e8 1b 37 ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c001da41:	83 c4 10             	add    esp,0x10
c001da44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da48:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001da4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da52:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da58:	83 ec 0c             	sub    esp,0xc
c001da5b:	50                   	push   eax
c001da5c:	e8 ee 2a ff ff       	call   c001054f <addToTerminalCycle(VgaText*)>
c001da61:	83 c4 10             	add    esp,0x10
c001da64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da68:	05 0c 01 00 00       	add    eax,0x10c
c001da6d:	83 ec 08             	sub    esp,0x8
c001da70:	68 df c1 02 c0       	push   0xc002c1df
c001da75:	50                   	push   eax
c001da76:	e8 b9 2d fe ff       	call   c0000834 <strcpy>
c001da7b:	83 c4 10             	add    esp,0x10
c001da7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da82:	83 c0 0c             	add    eax,0xc
c001da85:	83 ec 08             	sub    esp,0x8
c001da88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da8c:	50                   	push   eax
c001da8d:	e8 a2 2d fe ff       	call   c0000834 <strcpy>
c001da92:	83 c4 10             	add    esp,0x10
c001da95:	83 ec 08             	sub    esp,0x8
c001da98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daa0:	e8 0d fe ff ff       	call   c001d8b2 <Process::addArgs(char**)>
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	83 ec 08             	sub    esp,0x8
c001daab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dab3:	e8 87 ee ff ff       	call   c001c93f <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dab8:	83 c4 10             	add    esp,0x10
c001dabb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dabf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dac3:	83 f0 01             	xor    eax,0x1
c001dac6:	88 c2                	mov    dl,al
c001dac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacc:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dad2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dad7:	83 ec 08             	sub    esp,0x8
c001dada:	50                   	push   eax
c001dadb:	68 dc c2 02 c0       	push   0xc002c2dc
c001dae0:	e8 11 53 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001dae5:	83 c4 10             	add    esp,0x10
c001dae8:	90                   	nop
c001dae9:	83 c4 14             	add    esp,0x14
c001daec:	5b                   	pop    ebx
c001daed:	5e                   	pop    esi
c001daee:	c3                   	ret    
c001daef:	90                   	nop

c001daf0 <Process::Process(bool, char const*, Process*, char**)>:
c001daf0:	56                   	push   esi
c001daf1:	53                   	push   ebx
c001daf2:	83 ec 24             	sub    esp,0x24
c001daf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001daf9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db01:	05 0c 02 00 00       	add    eax,0x20c
c001db06:	bb 07 00 00 00       	mov    ebx,0x7
c001db0b:	89 c6                	mov    esi,eax
c001db0d:	85 db                	test   ebx,ebx
c001db0f:	78 12                	js     c001db23 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001db11:	83 ec 0c             	sub    esp,0xc
c001db14:	56                   	push   esi
c001db15:	e8 38 b0 00 00       	call   c0028b52 <ThreadControlBlock::ThreadControlBlock()>
c001db1a:	83 c4 10             	add    esp,0x10
c001db1d:	83 c6 63             	add    esi,0x63
c001db20:	4b                   	dec    ebx
c001db21:	eb ea                	jmp    c001db0d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db27:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db2e:	83 ec 0c             	sub    esp,0xc
c001db31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db35:	e8 ae c7 ff ff       	call   c001a2e8 <Krnl::newProcessEnv(Process*)>
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	89 c2                	mov    edx,eax
c001db3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db43:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db4d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db56:	a1 90 d9 02 c0       	mov    eax,ds:0xc002d990
c001db5b:	8d 50 01             	lea    edx,[eax+0x1]
c001db5e:	89 15 90 d9 02 c0    	mov    DWORD PTR ds:0xc002d990,edx
c001db64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db68:	89 02                	mov    DWORD PTR [edx],eax
c001db6a:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001db72:	83 ec 0c             	sub    esp,0xc
c001db75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db79:	e8 c2 1c ff ff       	call   c000f840 <malloc>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	89 c3                	mov    ebx,eax
c001db83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db88:	83 ec 08             	sub    esp,0x8
c001db8b:	50                   	push   eax
c001db8c:	53                   	push   ebx
c001db8d:	e8 b8 4b ff ff       	call   c001274a <VAS::VAS(bool)>
c001db92:	83 c4 10             	add    esp,0x10
c001db95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db99:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dbb5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbbf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbc5:	85 c0                	test   eax,eax
c001dbc7:	74 42                	je     c001dc0b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dbc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbcd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbd3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbdd:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbe7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbed:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf7:	05 0c 01 00 00       	add    eax,0x10c
c001dbfc:	83 ec 08             	sub    esp,0x8
c001dbff:	52                   	push   edx
c001dc00:	50                   	push   eax
c001dc01:	e8 2e 2c fe ff       	call   c0000834 <strcpy>
c001dc06:	83 c4 10             	add    esp,0x10
c001dc09:	eb 63                	jmp    c001dc6e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dc0b:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dc13:	83 ec 0c             	sub    esp,0xc
c001dc16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dc1a:	e8 21 1c ff ff       	call   c000f840 <malloc>
c001dc1f:	83 c4 10             	add    esp,0x10
c001dc22:	89 c3                	mov    ebx,eax
c001dc24:	83 ec 08             	sub    esp,0x8
c001dc27:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc2b:	53                   	push   ebx
c001dc2c:	e8 2b 35 ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc38:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc42:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc48:	83 ec 0c             	sub    esp,0xc
c001dc4b:	50                   	push   eax
c001dc4c:	e8 fe 28 ff ff       	call   c001054f <addToTerminalCycle(VgaText*)>
c001dc51:	83 c4 10             	add    esp,0x10
c001dc54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc58:	05 0c 01 00 00       	add    eax,0x10c
c001dc5d:	83 ec 08             	sub    esp,0x8
c001dc60:	68 df c1 02 c0       	push   0xc002c1df
c001dc65:	50                   	push   eax
c001dc66:	e8 c9 2b fe ff       	call   c0000834 <strcpy>
c001dc6b:	83 c4 10             	add    esp,0x10
c001dc6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc72:	83 c0 0c             	add    eax,0xc
c001dc75:	83 ec 08             	sub    esp,0x8
c001dc78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc7c:	50                   	push   eax
c001dc7d:	e8 b2 2b fe ff       	call   c0000834 <strcpy>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	83 ec 08             	sub    esp,0x8
c001dc88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc90:	e8 1d fc ff ff       	call   c001d8b2 <Process::addArgs(char**)>
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	90                   	nop
c001dc99:	83 c4 24             	add    esp,0x24
c001dc9c:	5b                   	pop    ebx
c001dc9d:	5e                   	pop    esi
c001dc9e:	c3                   	ret    

c001dc9f <disableIRQs()>:
c001dc9f:	fa                   	cli    
c001dca0:	ff 05 4c 19 03 c0    	inc    DWORD PTR ds:0xc003194c
c001dca6:	c3                   	ret    

c001dca7 <getIRQNestingLevel()>:
c001dca7:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c001dcac:	c3                   	ret    

c001dcad <enableIRQs()>:
c001dcad:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c001dcb2:	48                   	dec    eax
c001dcb3:	a3 4c 19 03 c0       	mov    ds:0xc003194c,eax
c001dcb8:	75 01                	jne    c001dcbb <enableIRQs()+0xe>
c001dcba:	fb                   	sti    
c001dcbb:	c3                   	ret    

c001dcbc <lockScheduler()>:
c001dcbc:	eb e1                	jmp    c001dc9f <disableIRQs()>

c001dcbe <unlockScheduler()>:
c001dcbe:	eb ed                	jmp    c001dcad <enableIRQs()>

c001dcc0 <userModeEntryPoint(void*)>:
c001dcc0:	83 ec 0c             	sub    esp,0xc
c001dcc3:	e8 f6 ff ff ff       	call   c001dcbe <unlockScheduler()>
c001dcc8:	fb                   	sti    
c001dcc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dcd1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dcd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dcdb:	83 c4 0c             	add    esp,0xc
c001dcde:	e9 47 26 fe ff       	jmp    c000032a <goToUsermode>

c001dce3 <lockStuff()>:
c001dce3:	e8 b7 ff ff ff       	call   c001dc9f <disableIRQs()>
c001dce8:	ff 05 48 19 03 c0    	inc    DWORD PTR ds:0xc0031948
c001dcee:	c3                   	ret    

c001dcef <taskStartupFunction>:
c001dcef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcf4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dcf7:	c3                   	ret    

c001dcf8 <updateTimeUsed()>:
c001dcf8:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001dcfd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd03:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dd0a:	74 50                	je     c001dd5c <updateTimeUsed()+0x64>
c001dd0c:	57                   	push   edi
c001dd0d:	56                   	push   esi
c001dd0e:	53                   	push   ebx
c001dd0f:	0f 31                	rdtsc  
c001dd11:	89 c1                	mov    ecx,eax
c001dd13:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c001dd18:	2b 0d 78 19 03 c0    	sub    ecx,DWORD PTR ds:0xc0031978
c001dd1e:	89 d3                	mov    ebx,edx
c001dd20:	89 0d 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,ecx
c001dd26:	1b 1d 7c 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc003197c
c001dd2c:	a3 78 19 03 c0       	mov    ds:0xc0031978,eax
c001dd31:	89 1d 84 19 03 c0    	mov    DWORD PTR ds:0xc0031984,ebx
c001dd37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd3c:	89 15 8c 19 03 c0    	mov    DWORD PTR ds:0xc003198c,edx
c001dd42:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dd45:	89 15 7c 19 03 c0    	mov    DWORD PTR ds:0xc003197c,edx
c001dd4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dd4e:	01 f1                	add    ecx,esi
c001dd50:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dd53:	11 fb                	adc    ebx,edi
c001dd55:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dd58:	5b                   	pop    ebx
c001dd59:	5e                   	pop    esi
c001dd5a:	5f                   	pop    edi
c001dd5b:	c3                   	ret    
c001dd5c:	c3                   	ret    

c001dd5d <switchToThread(ThreadControlBlock*)>:
c001dd5d:	53                   	push   ebx
c001dd5e:	83 ec 08             	sub    esp,0x8
c001dd61:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c001dd66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd6a:	85 c0                	test   eax,eax
c001dd6c:	75 30                	jne    c001dd9e <switchToThread(ThreadControlBlock*)+0x41>
c001dd6e:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dd71:	3c ff                	cmp    al,0xff
c001dd73:	74 25                	je     c001dd9a <switchToThread(ThreadControlBlock*)+0x3d>
c001dd75:	0f b6 d0             	movzx  edx,al
c001dd78:	b8 84 03 00 00       	mov    eax,0x384
c001dd7d:	29 d0                	sub    eax,edx
c001dd7f:	c1 e0 10             	shl    eax,0x10
c001dd82:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dd85:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dd88:	e8 6b ff ff ff       	call   c001dcf8 <updateTimeUsed()>
c001dd8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dd91:	83 c4 08             	add    esp,0x8
c001dd94:	5b                   	pop    ebx
c001dd95:	e9 c8 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd9a:	31 c0                	xor    eax,eax
c001dd9c:	eb e7                	jmp    c001dd85 <switchToThread(ThreadControlBlock*)+0x28>
c001dd9e:	c7 05 44 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031944,0x1
c001dda8:	83 c4 08             	add    esp,0x8
c001ddab:	5b                   	pop    ebx
c001ddac:	c3                   	ret    
c001ddad:	90                   	nop

c001ddae <Semaphore::Semaphore(int)>:
c001ddae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ddb6:	89 10                	mov    DWORD PTR [eax],edx
c001ddb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddbc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ddc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddc7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ddce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddd2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddd9:	90                   	nop
c001ddda:	c3                   	ret    
c001dddb:	90                   	nop

c001dddc <Mutex::Mutex()>:
c001dddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dde0:	6a 01                	push   0x1
c001dde2:	50                   	push   eax
c001dde3:	e8 c6 ff ff ff       	call   c001ddae <Semaphore::Semaphore(int)>
c001dde8:	83 c4 08             	add    esp,0x8
c001ddeb:	90                   	nop
c001ddec:	c3                   	ret    
c001dded:	90                   	nop

c001ddee <Process::createThread(void (*)(void*), void*, int)>:
c001ddee:	55                   	push   ebp
c001ddef:	31 c9                	xor    ecx,ecx
c001ddf1:	57                   	push   edi
c001ddf2:	56                   	push   esi
c001ddf3:	53                   	push   ebx
c001ddf4:	83 ec 1c             	sub    esp,0x1c
c001ddf7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ddfb:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001de02:	89 f2                	mov    edx,esi
c001de04:	0f b7 c2             	movzx  eax,dx
c001de07:	83 e2 01             	and    edx,0x1
c001de0a:	74 14                	je     c001de20 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001de0c:	d1 f8                	sar    eax,1
c001de0e:	41                   	inc    ecx
c001de0f:	89 c2                	mov    edx,eax
c001de11:	83 f9 10             	cmp    ecx,0x10
c001de14:	75 ee                	jne    c001de04 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001de16:	83 c4 1c             	add    esp,0x1c
c001de19:	31 c0                	xor    eax,eax
c001de1b:	5b                   	pop    ebx
c001de1c:	5e                   	pop    esi
c001de1d:	5f                   	pop    edi
c001de1e:	5d                   	pop    ebp
c001de1f:	c3                   	ret    
c001de20:	83 ec 08             	sub    esp,0x8
c001de23:	b8 01 00 00 00       	mov    eax,0x1
c001de28:	d3 e0                	shl    eax,cl
c001de2a:	09 c6                	or     esi,eax
c001de2c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001de32:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001de39:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001de3c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001de3f:	01 ce                	add    esi,ecx
c001de41:	89 f0                	mov    eax,esi
c001de43:	c1 e0 05             	shl    eax,0x5
c001de46:	01 c6                	add    esi,eax
c001de48:	8d 04 33             	lea    eax,[ebx+esi*1]
c001de4b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001de51:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001de57:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001de5b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001de61:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001de67:	89 ca                	mov    edx,ecx
c001de69:	f7 da                	neg    edx
c001de6b:	c1 e2 15             	shl    edx,0x15
c001de6e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001de74:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001de7a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001de7e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001de88:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001de8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de92:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001de98:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dea2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001deac:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001deb3:	50                   	push   eax
c001deb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001deb8:	68 68 19 03 c0       	push   0xc0031968
c001debd:	e8 1e ab 00 00       	call   c00289e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dec2:	83 c4 10             	add    esp,0x10
c001dec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dec9:	83 c4 1c             	add    esp,0x1c
c001decc:	5b                   	pop    ebx
c001decd:	5e                   	pop    esi
c001dece:	5f                   	pop    edi
c001decf:	5d                   	pop    ebp
c001ded0:	c3                   	ret    
c001ded1:	90                   	nop

c001ded2 <Process::createUserThread()>:
c001ded2:	83 ec 0c             	sub    esp,0xc
c001ded5:	68 80 00 00 00       	push   0x80
c001deda:	6a 00                	push   0x0
c001dedc:	68 c0 dc 01 c0       	push   0xc001dcc0
c001dee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dee5:	e8 04 ff ff ff       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c001deea:	83 c4 1c             	add    esp,0x1c
c001deed:	c3                   	ret    

c001deee <setupMultitasking(void (*)())>:
c001deee:	56                   	push   esi
c001deef:	53                   	push   ebx
c001def0:	53                   	push   ebx
c001def1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001def5:	eb 10                	jmp    c001df07 <setupMultitasking(void (*)())+0x19>
c001def7:	83 ec 0c             	sub    esp,0xc
c001defa:	68 68 19 03 c0       	push   0xc0031968
c001deff:	e8 2e aa 00 00       	call   c0028932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df04:	83 c4 10             	add    esp,0x10
c001df07:	83 ec 0c             	sub    esp,0xc
c001df0a:	68 68 19 03 c0       	push   0xc0031968
c001df0f:	e8 02 aa 00 00       	call   c0028916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df14:	83 c4 10             	add    esp,0x10
c001df17:	84 c0                	test   al,al
c001df19:	74 dc                	je     c001def7 <setupMultitasking(void (*)())+0x9>
c001df1b:	83 ec 0c             	sub    esp,0xc
c001df1e:	68 3f 07 00 00       	push   0x73f
c001df23:	e8 18 19 ff ff       	call   c000f840 <malloc>
c001df28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df2f:	89 c3                	mov    ebx,eax
c001df31:	6a 00                	push   0x0
c001df33:	68 e3 c1 02 c0       	push   0xc002c1e3
c001df38:	6a 01                	push   0x1
c001df3a:	50                   	push   eax
c001df3b:	e8 b0 fb ff ff       	call   c001daf0 <Process::Process(bool, char const*, Process*, char**)>
c001df40:	83 c4 18             	add    esp,0x18
c001df43:	89 1d 74 19 03 c0    	mov    DWORD PTR ds:0xc0031974,ebx
c001df49:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001df4f:	68 04 c3 02 c0       	push   0xc002c304
c001df54:	e8 9d 4e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001df59:	58                   	pop    eax
c001df5a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001df60:	e8 6c 2d ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c001df65:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001df6d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df76:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001df80:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001df86:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001df8c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001df96:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dfa0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dfaa:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dfb0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dfb6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dfc0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dfc6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dfd0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dfd6:	5a                   	pop    edx
c001dfd7:	59                   	pop    ecx
c001dfd8:	68 df c1 02 c0       	push   0xc002c1df
c001dfdd:	50                   	push   eax
c001dfde:	e8 51 28 fe ff       	call   c0000834 <strcpy>
c001dfe3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dfea:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dfee:	83 c4 14             	add    esp,0x14
c001dff1:	5b                   	pop    ebx
c001dff2:	5e                   	pop    esi
c001dff3:	e9 5c 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dff8 <schedule()>:
c001dff8:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c001dffd:	85 c0                	test   eax,eax
c001dfff:	74 0b                	je     c001e00c <schedule()+0x14>
c001e001:	c7 05 44 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031944,0x1
c001e00b:	c3                   	ret    
c001e00c:	53                   	push   ebx
c001e00d:	83 ec 14             	sub    esp,0x14
c001e010:	68 68 19 03 c0       	push   0xc0031968
c001e015:	e8 fc a8 00 00       	call   c0028916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e01a:	83 c4 10             	add    esp,0x10
c001e01d:	84 c0                	test   al,al
c001e01f:	75 38                	jne    c001e059 <schedule()+0x61>
c001e021:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e026:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e029:	4a                   	dec    edx
c001e02a:	74 32                	je     c001e05e <schedule()+0x66>
c001e02c:	83 ec 0c             	sub    esp,0xc
c001e02f:	68 68 19 03 c0       	push   0xc0031968
c001e034:	e8 d5 a8 00 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e039:	c7 04 24 68 19 03 c0 	mov    DWORD PTR [esp],0xc0031968
c001e040:	89 c3                	mov    ebx,eax
c001e042:	e8 eb a8 00 00       	call   c0028932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e047:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e04e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e051:	e8 07 fd ff ff       	call   c001dd5d <switchToThread(ThreadControlBlock*)>
c001e056:	83 c4 10             	add    esp,0x10
c001e059:	83 c4 08             	add    esp,0x8
c001e05c:	5b                   	pop    ebx
c001e05d:	c3                   	ret    
c001e05e:	83 ec 08             	sub    esp,0x8
c001e061:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e068:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e06e:	68 68 19 03 c0       	push   0xc0031968
c001e073:	e8 68 a9 00 00       	call   c00289e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e078:	83 c4 10             	add    esp,0x10
c001e07b:	eb af                	jmp    c001e02c <schedule()+0x34>

c001e07d <unlockStuff()>:
c001e07d:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c001e082:	48                   	dec    eax
c001e083:	a3 48 19 03 c0       	mov    ds:0xc0031948,eax
c001e088:	75 09                	jne    c001e093 <unlockStuff()+0x16>
c001e08a:	a1 44 19 03 c0       	mov    eax,ds:0xc0031944
c001e08f:	85 c0                	test   eax,eax
c001e091:	75 05                	jne    c001e098 <unlockStuff()+0x1b>
c001e093:	e9 15 fc ff ff       	jmp    c001dcad <enableIRQs()>
c001e098:	83 ec 0c             	sub    esp,0xc
c001e09b:	c7 05 44 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031944,0x0
c001e0a5:	e8 4e ff ff ff       	call   c001dff8 <schedule()>
c001e0aa:	83 c4 0c             	add    esp,0xc
c001e0ad:	e9 fb fb ff ff       	jmp    c001dcad <enableIRQs()>

c001e0b2 <Semaphore::tryAcquire()>:
c001e0b2:	83 ec 0c             	sub    esp,0xc
c001e0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b9:	e8 25 fc ff ff       	call   c001dce3 <lockStuff()>
c001e0be:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e0c1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e0c3:	7c 0b                	jl     c001e0d0 <Semaphore::tryAcquire()+0x1e>
c001e0c5:	e8 b3 ff ff ff       	call   c001e07d <unlockStuff()>
c001e0ca:	31 c0                	xor    eax,eax
c001e0cc:	83 c4 0c             	add    esp,0xc
c001e0cf:	c3                   	ret    
c001e0d0:	42                   	inc    edx
c001e0d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e0d4:	e8 a4 ff ff ff       	call   c001e07d <unlockStuff()>
c001e0d9:	b0 01                	mov    al,0x1
c001e0db:	83 c4 0c             	add    esp,0xc
c001e0de:	c3                   	ret    
c001e0df:	90                   	nop

c001e0e0 <Semaphore::assertLocked(char const*)>:
c001e0e0:	83 ec 0c             	sub    esp,0xc
c001e0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0eb:	e8 f3 fb ff ff       	call   c001dce3 <lockStuff()>
c001e0f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0f2:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e0f5:	7c 05                	jl     c001e0fc <Semaphore::assertLocked(char const*)+0x1c>
c001e0f7:	83 c4 0c             	add    esp,0xc
c001e0fa:	eb 81                	jmp    c001e07d <unlockStuff()>
c001e0fc:	83 ec 0c             	sub    esp,0xc
c001e0ff:	52                   	push   edx
c001e100:	e8 92 c3 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001e105:	83 c4 10             	add    esp,0x10
c001e108:	83 c4 0c             	add    esp,0xc
c001e10b:	e9 6d ff ff ff       	jmp    c001e07d <unlockStuff()>

c001e110 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e110:	83 ec 0c             	sub    esp,0xc
c001e113:	e8 8f fb ff ff       	call   c001dca7 <getIRQNestingLevel()>
c001e118:	83 ec 08             	sub    esp,0x8
c001e11b:	50                   	push   eax
c001e11c:	68 38 c3 02 c0       	push   0xc002c338
c001e121:	e8 d0 4c ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e12a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e12f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e132:	e8 c1 fe ff ff       	call   c001dff8 <schedule()>
c001e137:	e8 82 fb ff ff       	call   c001dcbe <unlockScheduler()>
c001e13c:	e8 66 fb ff ff       	call   c001dca7 <getIRQNestingLevel()>
c001e141:	5a                   	pop    edx
c001e142:	59                   	pop    ecx
c001e143:	50                   	push   eax
c001e144:	68 6c c3 02 c0       	push   0xc002c36c
c001e149:	e8 a8 4c ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e14e:	83 c4 1c             	add    esp,0x1c
c001e151:	c3                   	ret    

c001e152 <blockTask(TaskState)>:
c001e152:	83 ec 0c             	sub    esp,0xc
c001e155:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e159:	e8 5e fb ff ff       	call   c001dcbc <lockScheduler()>
c001e15e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e163:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e166:	e8 8d fe ff ff       	call   c001dff8 <schedule()>
c001e16b:	83 c4 0c             	add    esp,0xc
c001e16e:	e9 4b fb ff ff       	jmp    c001dcbe <unlockScheduler()>

c001e173 <waitTask(int, int*, int)>:
c001e173:	83 ec 18             	sub    esp,0x18
c001e176:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e17b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e17f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e182:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e186:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e18b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e18e:	6a 07                	push   0x7
c001e190:	e8 bd ff ff ff       	call   c001e152 <blockTask(TaskState)>
c001e195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e19a:	83 c4 10             	add    esp,0x10
c001e19d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e1a0:	85 d2                	test   edx,edx
c001e1a2:	74 0a                	je     c001e1ae <waitTask(int, int*, int)+0x3b>
c001e1a4:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e1a7:	89 02                	mov    DWORD PTR [edx],eax
c001e1a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1ae:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e1b1:	83 c4 0c             	add    esp,0xc
c001e1b4:	c3                   	ret    

c001e1b5 <nanoSleepUntil(unsigned long long)>:
c001e1b5:	83 ec 0c             	sub    esp,0xc
c001e1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1c0:	3b 05 90 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea90
c001e1c6:	89 d1                	mov    ecx,edx
c001e1c8:	1b 0d 94 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea94
c001e1ce:	73 04                	jae    c001e1d4 <nanoSleepUntil(unsigned long long)+0x1f>
c001e1d0:	83 c4 0c             	add    esp,0xc
c001e1d3:	c3                   	ret    
c001e1d4:	e8 0a fb ff ff       	call   c001dce3 <lockStuff()>
c001e1d9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e1df:	83 ec 08             	sub    esp,0x8
c001e1e2:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e1e5:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e1e8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1ee:	68 5c 19 03 c0       	push   0xc003195c
c001e1f3:	e8 e8 a7 00 00       	call   c00289e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1f8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e1ff:	e8 4e ff ff ff       	call   c001e152 <blockTask(TaskState)>
c001e204:	83 c4 1c             	add    esp,0x1c
c001e207:	e9 71 fe ff ff       	jmp    c001e07d <unlockStuff()>

c001e20c <nanoSleep(unsigned long long)>:
c001e20c:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c001e211:	8b 15 94 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea94
c001e217:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e21b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e21f:	eb 94                	jmp    c001e1b5 <nanoSleepUntil(unsigned long long)>

c001e221 <sleep(unsigned long long)>:
c001e221:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e229:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e22e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e232:	01 ca                	add    edx,ecx
c001e234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e238:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e23c:	eb ce                	jmp    c001e20c <nanoSleep(unsigned long long)>

c001e23e <Semaphore::acquire()>:
c001e23e:	83 ec 0c             	sub    esp,0xc
c001e241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e245:	e8 99 fa ff ff       	call   c001dce3 <lockStuff()>
c001e24a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e24d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e24f:	7d 0c                	jge    c001e25d <Semaphore::acquire()+0x1f>
c001e251:	42                   	inc    edx
c001e252:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e255:	83 c4 0c             	add    esp,0xc
c001e258:	e9 20 fe ff ff       	jmp    c001e07d <unlockStuff()>
c001e25d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e263:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e26a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e26d:	85 d2                	test   edx,edx
c001e26f:	74 2a                	je     c001e29b <Semaphore::acquire()+0x5d>
c001e271:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e274:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e27a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e27d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e283:	83 ec 0c             	sub    esp,0xc
c001e286:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e289:	6a 05                	push   0x5
c001e28b:	e8 c2 fe ff ff       	call   c001e152 <blockTask(TaskState)>
c001e290:	83 c4 10             	add    esp,0x10
c001e293:	83 c4 0c             	add    esp,0xc
c001e296:	e9 e2 fd ff ff       	jmp    c001e07d <unlockStuff()>
c001e29b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e2a4:	eb d7                	jmp    c001e27d <Semaphore::acquire()+0x3f>

c001e2a6 <taskReturned>:
c001e2a6:	83 ec 18             	sub    esp,0x18
c001e2a9:	68 a0 c3 02 c0       	push   0xc002c3a0
c001e2ae:	e8 e4 c1 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001e2b3:	83 c4 10             	add    esp,0x10
c001e2b6:	83 ec 0c             	sub    esp,0xc
c001e2b9:	6a 02                	push   0x2
c001e2bb:	e8 92 fe ff ff       	call   c001e152 <blockTask(TaskState)>
c001e2c0:	e8 f7 f9 ff ff       	call   c001dcbc <lockScheduler()>
c001e2c5:	e8 2e fd ff ff       	call   c001dff8 <schedule()>
c001e2ca:	e8 ef f9 ff ff       	call   c001dcbe <unlockScheduler()>
c001e2cf:	83 c4 10             	add    esp,0x10
c001e2d2:	eb e2                	jmp    c001e2b6 <taskReturned+0x10>

c001e2d4 <unblockTask(ThreadControlBlock*)>:
c001e2d4:	53                   	push   ebx
c001e2d5:	83 ec 08             	sub    esp,0x8
c001e2d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e2dc:	e8 db f9 ff ff       	call   c001dcbc <lockScheduler()>
c001e2e1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e2e4:	85 c0                	test   eax,eax
c001e2e6:	74 5c                	je     c001e344 <unblockTask(ThreadControlBlock*)+0x70>
c001e2e8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e2eb:	48                   	dec    eax
c001e2ec:	74 31                	je     c001e31f <unblockTask(ThreadControlBlock*)+0x4b>
c001e2ee:	83 ec 0c             	sub    esp,0xc
c001e2f1:	68 68 19 03 c0       	push   0xc0031968
c001e2f6:	e8 13 a6 00 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2fb:	83 c4 10             	add    esp,0x10
c001e2fe:	85 c0                	test   eax,eax
c001e300:	75 17                	jne    c001e319 <unblockTask(ThreadControlBlock*)+0x45>
c001e302:	eb 65                	jmp    c001e369 <unblockTask(ThreadControlBlock*)+0x95>
c001e304:	83 ec 08             	sub    esp,0x8
c001e307:	50                   	push   eax
c001e308:	68 68 19 03 c0       	push   0xc0031968
c001e30d:	e8 d6 a8 00 00       	call   c0028be8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e312:	83 c4 10             	add    esp,0x10
c001e315:	85 c0                	test   eax,eax
c001e317:	74 50                	je     c001e369 <unblockTask(ThreadControlBlock*)+0x95>
c001e319:	39 c3                	cmp    ebx,eax
c001e31b:	75 e7                	jne    c001e304 <unblockTask(ThreadControlBlock*)+0x30>
c001e31d:	eb 1c                	jmp    c001e33b <unblockTask(ThreadControlBlock*)+0x67>
c001e31f:	83 ec 0c             	sub    esp,0xc
c001e322:	68 90 c4 02 c0       	push   0xc002c490
c001e327:	e8 ca 4a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e32c:	c7 04 24 1c c4 02 c0 	mov    DWORD PTR [esp],0xc002c41c
c001e333:	e8 be 4a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	83 c4 08             	add    esp,0x8
c001e33e:	5b                   	pop    ebx
c001e33f:	e9 7a f9 ff ff       	jmp    c001dcbe <unlockScheduler()>
c001e344:	83 ec 0c             	sub    esp,0xc
c001e347:	68 d4 c3 02 c0       	push   0xc002c3d4
c001e34c:	e8 a5 4a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e351:	c7 04 24 1c c4 02 c0 	mov    DWORD PTR [esp],0xc002c41c
c001e358:	e8 99 4a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e35d:	83 c4 10             	add    esp,0x10
c001e360:	83 c4 08             	add    esp,0x8
c001e363:	5b                   	pop    ebx
c001e364:	e9 55 f9 ff ff       	jmp    c001dcbe <unlockScheduler()>
c001e369:	83 ec 08             	sub    esp,0x8
c001e36c:	53                   	push   ebx
c001e36d:	68 68 19 03 c0       	push   0xc0031968
c001e372:	e8 69 a6 00 00       	call   c00289e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e377:	83 c4 10             	add    esp,0x10
c001e37a:	83 c4 08             	add    esp,0x8
c001e37d:	5b                   	pop    ebx
c001e37e:	e9 3b f9 ff ff       	jmp    c001dcbe <unlockScheduler()>

c001e383 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e383:	55                   	push   ebp
c001e384:	57                   	push   edi
c001e385:	56                   	push   esi
c001e386:	53                   	push   ebx
c001e387:	83 ec 1c             	sub    esp,0x1c
c001e38a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e38e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e391:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e397:	85 ff                	test   edi,edi
c001e399:	7e 20                	jle    c001e3bb <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e39b:	31 f6                	xor    esi,esi
c001e39d:	83 ec 0c             	sub    esp,0xc
c001e3a0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e3a7:	46                   	inc    esi
c001e3a8:	e8 a3 14 ff ff       	call   c000f850 <free>
c001e3ad:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3b0:	83 c4 10             	add    esp,0x10
c001e3b3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e3b9:	7f e2                	jg     c001e39d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e3bb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e3c5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e3ca:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e3cd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e3d0:	d3 c0                	rol    eax,cl
c001e3d2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e3d9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e3dc:	89 f7                	mov    edi,esi
c001e3de:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e3e6:	0f 85 74 01 00 00    	jne    c001e560 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e3ec:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e3f2:	85 ed                	test   ebp,ebp
c001e3f4:	74 1b                	je     c001e411 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e3f6:	83 ec 0c             	sub    esp,0xc
c001e3f9:	55                   	push   ebp
c001e3fa:	e8 05 be ff ff       	call   c001a204 <EnvVarContainer::~EnvVarContainer()>
c001e3ff:	59                   	pop    ecx
c001e400:	5e                   	pop    esi
c001e401:	6a 0c                	push   0xc
c001e403:	55                   	push   ebp
c001e404:	e8 0d 49 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c001e409:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e40c:	83 c4 10             	add    esp,0x10
c001e40f:	89 f7                	mov    edi,esi
c001e411:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e417:	85 c0                	test   eax,eax
c001e419:	0f 84 aa 00 00 00    	je     c001e4c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e41f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e422:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e426:	31 c9                	xor    ecx,ecx
c001e428:	eb 10                	jmp    c001e43a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e42a:	41                   	inc    ecx
c001e42b:	83 f9 10             	cmp    ecx,0x10
c001e42e:	0f 84 95 00 00 00    	je     c001e4c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e434:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e43a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e441:	d3 fa                	sar    edx,cl
c001e443:	83 e2 01             	and    edx,0x1
c001e446:	74 e2                	je     c001e42a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e448:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e44b:	01 ca                	add    edx,ecx
c001e44d:	89 d5                	mov    ebp,edx
c001e44f:	c1 e5 05             	shl    ebp,0x5
c001e452:	01 ea                	add    edx,ebp
c001e454:	01 d0                	add    eax,edx
c001e456:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e45c:	83 fd 07             	cmp    ebp,0x7
c001e45f:	75 c9                	jne    c001e42a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e461:	05 40 02 00 00       	add    eax,0x240
c001e466:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e469:	83 fd ff             	cmp    ebp,0xffffffff
c001e46c:	0f 8c 08 01 00 00    	jl     c001e57a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e472:	0f 84 b9 01 00 00    	je     c001e631 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e478:	85 ed                	test   ebp,ebp
c001e47a:	0f 84 a0 01 00 00    	je     c001e620 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e480:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e482:	75 a6                	jne    c001e42a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e484:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e48a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e48e:	01 d0                	add    eax,edx
c001e490:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e494:	83 ec 0c             	sub    esp,0xc
c001e497:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e49d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4a0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e4a6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e4ad:	50                   	push   eax
c001e4ae:	e8 21 fe ff ff       	call   c001e2d4 <unblockTask(ThreadControlBlock*)>
c001e4b3:	83 c4 10             	add    esp,0x10
c001e4b6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4bd:	89 f7                	mov    edi,esi
c001e4bf:	41                   	inc    ecx
c001e4c0:	83 f9 10             	cmp    ecx,0x10
c001e4c3:	0f 85 6b ff ff ff    	jne    c001e434 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e4c9:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e4cf:	85 c0                	test   eax,eax
c001e4d1:	74 5d                	je     c001e530 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e4d3:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e4d9:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e4df:	74 4f                	je     c001e530 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e4e1:	83 ec 0c             	sub    esp,0xc
c001e4e4:	68 68 19 03 c0       	push   0xc0031968
c001e4e9:	e8 20 a4 00 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4ee:	c7 04 24 68 19 03 c0 	mov    DWORD PTR [esp],0xc0031968
c001e4f5:	89 c7                	mov    edi,eax
c001e4f7:	e8 1a a4 00 00       	call   c0028916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4fc:	83 c4 10             	add    esp,0x10
c001e4ff:	84 c0                	test   al,al
c001e501:	0f 84 e4 00 00 00    	je     c001e5eb <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e507:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e50a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e510:	85 d2                	test   edx,edx
c001e512:	74 0f                	je     c001e523 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e514:	83 ec 0c             	sub    esp,0xc
c001e517:	8b 02                	mov    eax,DWORD PTR [edx]
c001e519:	52                   	push   edx
c001e51a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e51d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e520:	83 c4 10             	add    esp,0x10
c001e523:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e52d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e530:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e536:	85 db                	test   ebx,ebx
c001e538:	74 16                	je     c001e550 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e53a:	83 ec 0c             	sub    esp,0xc
c001e53d:	53                   	push   ebx
c001e53e:	e8 f3 3b ff ff       	call   c0012136 <VAS::~VAS()>
c001e543:	58                   	pop    eax
c001e544:	5a                   	pop    edx
c001e545:	6a 10                	push   0x10
c001e547:	53                   	push   ebx
c001e548:	e8 c9 47 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c001e54d:	83 c4 10             	add    esp,0x10
c001e550:	83 ec 0c             	sub    esp,0xc
c001e553:	68 ea c1 02 c0       	push   0xc002c1ea
c001e558:	e8 99 48 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e55d:	83 c4 10             	add    esp,0x10
c001e560:	83 ec 08             	sub    esp,0x8
c001e563:	68 3f 07 00 00       	push   0x73f
c001e568:	68 f8 c1 02 c0       	push   0xc002c1f8
c001e56d:	e8 84 48 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e572:	83 c4 2c             	add    esp,0x2c
c001e575:	5b                   	pop    ebx
c001e576:	5e                   	pop    esi
c001e577:	5f                   	pop    edi
c001e578:	5d                   	pop    ebp
c001e579:	c3                   	ret    
c001e57a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e57e:	83 ec 0c             	sub    esp,0xc
c001e581:	68 d4 c4 02 c0       	push   0xc002c4d4
c001e586:	e8 0c bf ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001e58b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e58e:	83 c4 10             	add    esp,0x10
c001e591:	89 f7                	mov    edi,esi
c001e593:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e597:	e9 8e fe ff ff       	jmp    c001e42a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e59c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e5a2:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e5a8:	75 1c                	jne    c001e5c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e5aa:	83 ec 0c             	sub    esp,0xc
c001e5ad:	68 3c c5 02 c0       	push   0xc002c53c
c001e5b2:	e8 3f 48 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e5b7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e5be:	e8 8f fb ff ff       	call   c001e152 <blockTask(TaskState)>
c001e5c3:	83 c4 10             	add    esp,0x10
c001e5c6:	83 ec 08             	sub    esp,0x8
c001e5c9:	56                   	push   esi
c001e5ca:	68 68 19 03 c0       	push   0xc0031968
c001e5cf:	e8 0c a4 00 00       	call   c00289e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5d4:	c7 04 24 68 19 03 c0 	mov    DWORD PTR [esp],0xc0031968
c001e5db:	e8 2e a3 00 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5e0:	83 c4 10             	add    esp,0x10
c001e5e3:	39 f8                	cmp    eax,edi
c001e5e5:	0f 84 1c ff ff ff    	je     c001e507 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e5eb:	83 ec 0c             	sub    esp,0xc
c001e5ee:	68 68 19 03 c0       	push   0xc0031968
c001e5f3:	e8 16 a3 00 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5f8:	c7 04 24 68 19 03 c0 	mov    DWORD PTR [esp],0xc0031968
c001e5ff:	89 c6                	mov    esi,eax
c001e601:	e8 2c a3 00 00       	call   c0028932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e606:	83 c4 10             	add    esp,0x10
c001e609:	39 f3                	cmp    ebx,esi
c001e60b:	74 b9                	je     c001e5c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e60d:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e610:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e613:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e619:	75 ab                	jne    c001e5c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e61b:	e9 7c ff ff ff       	jmp    c001e59c <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e620:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e624:	83 ec 0c             	sub    esp,0xc
c001e627:	68 08 c5 02 c0       	push   0xc002c508
c001e62c:	e9 55 ff ff ff       	jmp    c001e586 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e631:	8b 36                	mov    esi,DWORD PTR [esi]
c001e633:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e637:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e63a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e63d:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e643:	01 d7                	add    edi,edx
c001e645:	89 f8                	mov    eax,edi
c001e647:	e9 44 fe ff ff       	jmp    c001e490 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e64c <cleanerTaskFunction(void*)>:
c001e64c:	53                   	push   ebx
c001e64d:	83 ec 08             	sub    esp,0x8
c001e650:	e8 69 f6 ff ff       	call   c001dcbe <unlockScheduler()>
c001e655:	e8 62 f6 ff ff       	call   c001dcbc <lockScheduler()>
c001e65a:	80 3d 2c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003192c,0x0
c001e661:	0f 85 8e 00 00 00    	jne    c001e6f5 <cleanerTaskFunction(void*)+0xa9>
c001e667:	83 ec 0c             	sub    esp,0xc
c001e66a:	6a 02                	push   0x2
c001e66c:	e8 9f fa ff ff       	call   c001e110 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e671:	83 c4 10             	add    esp,0x10
c001e674:	c6 05 2c 19 03 c0 00 	mov    BYTE PTR ds:0xc003192c,0x0
c001e67b:	e8 63 f6 ff ff       	call   c001dce3 <lockStuff()>
c001e680:	e8 37 f6 ff ff       	call   c001dcbc <lockScheduler()>
c001e685:	83 ec 0c             	sub    esp,0xc
c001e688:	68 50 19 03 c0       	push   0xc0031950
c001e68d:	e8 84 a2 00 00       	call   c0028916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e692:	83 c4 10             	add    esp,0x10
c001e695:	84 c0                	test   al,al
c001e697:	75 40                	jne    c001e6d9 <cleanerTaskFunction(void*)+0x8d>
c001e699:	83 ec 0c             	sub    esp,0xc
c001e69c:	68 50 19 03 c0       	push   0xc0031950
c001e6a1:	e8 68 a2 00 00       	call   c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6a6:	c7 04 24 50 19 03 c0 	mov    DWORD PTR [esp],0xc0031950
c001e6ad:	89 c3                	mov    ebx,eax
c001e6af:	e8 7e a2 00 00       	call   c0028932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6b4:	c7 04 24 0e c2 02 c0 	mov    DWORD PTR [esp],0xc002c20e
c001e6bb:	e8 36 47 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e6c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e6c3:	e8 bb fc ff ff       	call   c001e383 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e6c8:	c7 04 24 27 c2 02 c0 	mov    DWORD PTR [esp],0xc002c227
c001e6cf:	e8 22 47 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e6d4:	83 c4 10             	add    esp,0x10
c001e6d7:	eb ac                	jmp    c001e685 <cleanerTaskFunction(void*)+0x39>
c001e6d9:	e8 e0 f5 ff ff       	call   c001dcbe <unlockScheduler()>
c001e6de:	e8 9a f9 ff ff       	call   c001e07d <unlockStuff()>
c001e6e3:	e8 d4 f5 ff ff       	call   c001dcbc <lockScheduler()>
c001e6e8:	80 3d 2c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003192c,0x0
c001e6ef:	0f 84 72 ff ff ff    	je     c001e667 <cleanerTaskFunction(void*)+0x1b>
c001e6f5:	e8 c4 f5 ff ff       	call   c001dcbe <unlockScheduler()>
c001e6fa:	e9 75 ff ff ff       	jmp    c001e674 <cleanerTaskFunction(void*)+0x28>

c001e6ff <terminateTask(int)>:
c001e6ff:	83 ec 14             	sub    esp,0x14
c001e702:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e707:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e70a:	83 c0 0c             	add    eax,0xc
c001e70d:	50                   	push   eax
c001e70e:	68 64 c5 02 c0       	push   0xc002c564
c001e713:	e8 de 46 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e718:	e8 c6 f5 ff ff       	call   c001dce3 <lockStuff()>
c001e71d:	e8 9a f5 ff ff       	call   c001dcbc <lockScheduler()>
c001e722:	c7 04 24 3a c2 02 c0 	mov    DWORD PTR [esp],0xc002c23a
c001e729:	e8 c8 46 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e72e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e732:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e737:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e73a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e73f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e742:	5a                   	pop    edx
c001e743:	59                   	pop    ecx
c001e744:	50                   	push   eax
c001e745:	68 50 19 03 c0       	push   0xc0031950
c001e74a:	e8 91 a2 00 00       	call   c00289e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e74f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e754:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e75b:	c7 04 24 54 c2 02 c0 	mov    DWORD PTR [esp],0xc002c254
c001e762:	e8 8f 46 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e767:	83 c4 10             	add    esp,0x10
c001e76a:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001e76f:	85 c0                	test   eax,eax
c001e771:	74 5a                	je     c001e7cd <terminateTask(int)+0xce>
c001e773:	83 ec 0c             	sub    esp,0xc
c001e776:	68 6e c2 02 c0       	push   0xc002c26e
c001e77b:	e8 76 46 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e780:	58                   	pop    eax
c001e781:	c6 05 2c 19 03 c0 01 	mov    BYTE PTR ds:0xc003192c,0x1
c001e788:	ff 35 28 19 03 c0    	push   DWORD PTR ds:0xc0031928
c001e78e:	e8 41 fb ff ff       	call   c001e2d4 <unblockTask(ThreadControlBlock*)>
c001e793:	c7 04 24 88 c2 02 c0 	mov    DWORD PTR [esp],0xc002c288
c001e79a:	e8 57 46 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e79f:	83 c4 10             	add    esp,0x10
c001e7a2:	e8 17 f5 ff ff       	call   c001dcbe <unlockScheduler()>
c001e7a7:	e8 d1 f8 ff ff       	call   c001e07d <unlockStuff()>
c001e7ac:	83 ec 0c             	sub    esp,0xc
c001e7af:	68 c0 c2 02 c0       	push   0xc002c2c0
c001e7b4:	e8 3d 46 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e7b9:	83 c4 10             	add    esp,0x10
c001e7bc:	e8 fb f4 ff ff       	call   c001dcbc <lockScheduler()>
c001e7c1:	e8 32 f8 ff ff       	call   c001dff8 <schedule()>
c001e7c6:	e8 f3 f4 ff ff       	call   c001dcbe <unlockScheduler()>
c001e7cb:	eb ef                	jmp    c001e7bc <terminateTask(int)+0xbd>
c001e7cd:	83 ec 0c             	sub    esp,0xc
c001e7d0:	68 a2 c2 02 c0       	push   0xc002c2a2
c001e7d5:	e8 1c 46 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e7da:	83 c4 10             	add    esp,0x10
c001e7dd:	eb c3                	jmp    c001e7a2 <terminateTask(int)+0xa3>

c001e7df <Thr::terminateFromIRQ(int)>:
c001e7df:	83 ec 18             	sub    esp,0x18
c001e7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7e6:	e8 14 ff ff ff       	call   c001e6ff <terminateTask(int)>
c001e7eb:	90                   	nop

c001e7ec <Semaphore::release()>:
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f3:	e8 eb f4 ff ff       	call   c001dce3 <lockStuff()>
c001e7f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e7fb:	85 d2                	test   edx,edx
c001e7fd:	74 1a                	je     c001e819 <Semaphore::release()+0x2d>
c001e7ff:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e802:	83 ec 0c             	sub    esp,0xc
c001e805:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e808:	52                   	push   edx
c001e809:	e8 c6 fa ff ff       	call   c001e2d4 <unblockTask(ThreadControlBlock*)>
c001e80e:	83 c4 10             	add    esp,0x10
c001e811:	83 c4 0c             	add    esp,0xc
c001e814:	e9 64 f8 ff ff       	jmp    c001e07d <unlockStuff()>
c001e819:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e81c:	83 c4 0c             	add    esp,0xc
c001e81f:	e9 59 f8 ff ff       	jmp    c001e07d <unlockStuff()>

c001e824 <__static_initialization_and_destruction_0(int, int)>:
c001e824:	83 ec 0c             	sub    esp,0xc
c001e827:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e82c:	0f 85 88 00 00 00    	jne    c001e8ba <__static_initialization_and_destruction_0(int, int)+0x96>
c001e832:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e83a:	75 7e                	jne    c001e8ba <__static_initialization_and_destruction_0(int, int)+0x96>
c001e83c:	83 ec 0c             	sub    esp,0xc
c001e83f:	68 68 19 03 c0       	push   0xc0031968
c001e844:	e8 47 a3 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	83 ec 04             	sub    esp,0x4
c001e84f:	68 1c d3 02 c0       	push   0xc002d31c
c001e854:	68 68 19 03 c0       	push   0xc0031968
c001e859:	68 50 8b 02 c0       	push   0xc0028b50
c001e85e:	e8 2d 44 ff ff       	call   c0012c90 <__cxa_atexit>
c001e863:	83 c4 10             	add    esp,0x10
c001e866:	83 ec 0c             	sub    esp,0xc
c001e869:	68 5c 19 03 c0       	push   0xc003195c
c001e86e:	e8 1d a3 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e873:	83 c4 10             	add    esp,0x10
c001e876:	83 ec 04             	sub    esp,0x4
c001e879:	68 1c d3 02 c0       	push   0xc002d31c
c001e87e:	68 5c 19 03 c0       	push   0xc003195c
c001e883:	68 50 8b 02 c0       	push   0xc0028b50
c001e888:	e8 03 44 ff ff       	call   c0012c90 <__cxa_atexit>
c001e88d:	83 c4 10             	add    esp,0x10
c001e890:	83 ec 0c             	sub    esp,0xc
c001e893:	68 50 19 03 c0       	push   0xc0031950
c001e898:	e8 f3 a2 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e89d:	83 c4 10             	add    esp,0x10
c001e8a0:	83 ec 04             	sub    esp,0x4
c001e8a3:	68 1c d3 02 c0       	push   0xc002d31c
c001e8a8:	68 50 19 03 c0       	push   0xc0031950
c001e8ad:	68 50 8b 02 c0       	push   0xc0028b50
c001e8b2:	e8 d9 43 ff ff       	call   c0012c90 <__cxa_atexit>
c001e8b7:	83 c4 10             	add    esp,0x10
c001e8ba:	90                   	nop
c001e8bb:	83 c4 0c             	add    esp,0xc
c001e8be:	c3                   	ret    

c001e8bf <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e8bf:	83 ec 0c             	sub    esp,0xc
c001e8c2:	83 ec 08             	sub    esp,0x8
c001e8c5:	68 ff ff 00 00       	push   0xffff
c001e8ca:	6a 01                	push   0x1
c001e8cc:	e8 53 ff ff ff       	call   c001e824 <__static_initialization_and_destruction_0(int, int)>
c001e8d1:	83 c4 10             	add    esp,0x10
c001e8d4:	83 c4 0c             	add    esp,0xc
c001e8d7:	c3                   	ret    

c001e8d8 <Vm::inbv(unsigned short)>:
c001e8d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e8dc:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e8e1:	75 06                	jne    c001e8e9 <Vm::inbv(unsigned short)+0x11>
c001e8e3:	a0 ac 19 03 c0       	mov    al,ds:0xc00319ac
c001e8e8:	c3                   	ret    
c001e8e9:	ec                   	in     al,dx
c001e8ea:	c3                   	ret    

c001e8eb <Vm::outbv(unsigned short, unsigned char)>:
c001e8eb:	53                   	push   ebx
c001e8ec:	83 ec 08             	sub    esp,0x8
c001e8ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8f7:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e8fc:	75 38                	jne    c001e936 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e8fe:	0f b6 c3             	movzx  eax,bl
c001e901:	51                   	push   ecx
c001e902:	51                   	push   ecx
c001e903:	50                   	push   eax
c001e904:	68 83 c5 02 c0       	push   0xc002c583
c001e909:	e8 e8 44 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001e90e:	8b 15 ac 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319ac
c001e914:	83 c4 10             	add    esp,0x10
c001e917:	8d 42 01             	lea    eax,[edx+0x1]
c001e91a:	88 9a c0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce640],bl
c001e920:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c001e925:	83 f8 20             	cmp    eax,0x20
c001e928:	75 0f                	jne    c001e939 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e92a:	c7 05 ac 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00319ac,0x1f
c001e934:	eb 03                	jmp    c001e939 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e936:	88 d8                	mov    al,bl
c001e938:	ee                   	out    dx,al
c001e939:	83 c4 08             	add    esp,0x8
c001e93c:	5b                   	pop    ebx
c001e93d:	c3                   	ret    

c001e93e <Vm::realToLinear(unsigned short, unsigned short)>:
c001e93e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e943:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e948:	c1 e0 04             	shl    eax,0x4
c001e94b:	01 d0                	add    eax,edx
c001e94d:	c3                   	ret    

c001e94e <Vm::getSegment(unsigned int)>:
c001e94e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e952:	c1 e8 10             	shr    eax,0x10
c001e955:	c3                   	ret    

c001e956 <Vm::getOffset(unsigned int)>:
c001e956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e95a:	c3                   	ret    

c001e95b <Vm::mainloop2()>:
c001e95b:	83 ec 0c             	sub    esp,0xc
c001e95e:	e8 59 f3 ff ff       	call   c001dcbc <lockScheduler()>
c001e963:	83 ec 0c             	sub    esp,0xc
c001e966:	c6 05 a5 19 03 c0 01 	mov    BYTE PTR ds:0xc00319a5,0x1
c001e96d:	6a 02                	push   0x2
c001e96f:	e8 9c f7 ff ff       	call   c001e110 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e979:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e97d:	52                   	push   edx
c001e97e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e982:	52                   	push   edx
c001e983:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e987:	52                   	push   edx
c001e988:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e98c:	50                   	push   eax
c001e98d:	e8 68 19 fe ff       	call   c00002fa <goToVM86>
c001e992:	83 c4 2c             	add    esp,0x2c
c001e995:	c3                   	ret    

c001e996 <Vm::mainVm8086Loop(void*)>:
c001e996:	83 ec 0c             	sub    esp,0xc
c001e999:	e8 20 f3 ff ff       	call   c001dcbe <unlockScheduler()>
c001e99e:	83 c4 0c             	add    esp,0xc
c001e9a1:	eb b8                	jmp    c001e95b <Vm::mainloop2()>

c001e9a3 <Vm::mainloop3(unsigned long)>:
c001e9a3:	53                   	push   ebx
c001e9a4:	83 ec 08             	sub    esp,0x8
c001e9a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e9ab:	e8 0c f3 ff ff       	call   c001dcbc <lockScheduler()>
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	89 1d a0 19 03 c0    	mov    DWORD PTR ds:0xc00319a0,ebx
c001e9b9:	6a 02                	push   0x2
c001e9bb:	c6 05 a4 19 03 c0 01 	mov    BYTE PTR ds:0xc00319a4,0x1
c001e9c2:	e8 49 f7 ff ff       	call   c001e110 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9c7:	83 c4 18             	add    esp,0x18
c001e9ca:	5b                   	pop    ebx
c001e9cb:	eb 8e                	jmp    c001e95b <Vm::mainloop2()>

c001e9cd <Vm::initialise8086()>:
c001e9cd:	83 ec 0c             	sub    esp,0xc
c001e9d0:	68 80 00 00 00       	push   0x80
c001e9d5:	6a 00                	push   0x0
c001e9d7:	68 96 e9 01 c0       	push   0xc001e996
c001e9dc:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001e9e2:	e8 07 f4 ff ff       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c001e9e7:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e9ee:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c001e9f3:	68 00 01 00 00       	push   0x100
c001e9f8:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001e9fd:	6a 00                	push   0x0
c001e9ff:	6a 00                	push   0x0
c001ea01:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ea07:	e8 8a 3b ff ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ea0c:	83 c4 2c             	add    esp,0x2c
c001ea0f:	c3                   	ret    

c001ea10 <Vm::finish8086()>:
c001ea10:	53                   	push   ebx
c001ea11:	83 ec 08             	sub    esp,0x8
c001ea14:	e8 a3 f2 ff ff       	call   c001dcbc <lockScheduler()>
c001ea19:	80 3d a4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319a4,0x0
c001ea20:	75 0c                	jne    c001ea2e <Vm::finish8086()+0x1e>
c001ea22:	e8 d1 f5 ff ff       	call   c001dff8 <schedule()>
c001ea27:	e8 92 f2 ff ff       	call   c001dcbe <unlockScheduler()>
c001ea2c:	eb e6                	jmp    c001ea14 <Vm::finish8086()+0x4>
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	8b 1d a0 19 03 c0    	mov    ebx,DWORD PTR ds:0xc00319a0
c001ea37:	ff 35 a8 19 03 c0    	push   DWORD PTR ds:0xc00319a8
c001ea3d:	c6 05 a4 19 03 c0 00 	mov    BYTE PTR ds:0xc00319a4,0x0
c001ea44:	e8 8b f8 ff ff       	call   c001e2d4 <unblockTask(ThreadControlBlock*)>
c001ea49:	e8 70 f2 ff ff       	call   c001dcbe <unlockScheduler()>
c001ea4e:	89 d8                	mov    eax,ebx
c001ea50:	83 c4 18             	add    esp,0x18
c001ea53:	5b                   	pop    ebx
c001ea54:	c3                   	ret    

c001ea55 <Vm::getOutput8086(unsigned char*)>:
c001ea55:	83 ec 10             	sub    esp,0x10
c001ea58:	ff 35 ac 19 03 c0    	push   DWORD PTR ds:0xc00319ac
c001ea5e:	68 c0 19 03 c0       	push   0xc00319c0
c001ea63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea67:	e8 d8 1c fe ff       	call   c0000744 <memcpy>
c001ea6c:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c001ea71:	c7 05 ac 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319ac,0x0
c001ea7b:	83 c4 1c             	add    esp,0x1c
c001ea7e:	c3                   	ret    

c001ea7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ea7f:	55                   	push   ebp
c001ea80:	57                   	push   edi
c001ea81:	56                   	push   esi
c001ea82:	53                   	push   ebx
c001ea83:	83 ec 2c             	sub    esp,0x2c
c001ea86:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ea8a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ea8e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ea92:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ea96:	e8 21 f2 ff ff       	call   c001dcbc <lockScheduler()>
c001ea9b:	a0 a5 19 03 c0       	mov    al,ds:0xc00319a5
c001eaa0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eaa4:	84 c0                	test   al,al
c001eaa6:	75 0c                	jne    c001eab4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eaa8:	e8 4b f5 ff ff       	call   c001dff8 <schedule()>
c001eaad:	e8 0c f2 ff ff       	call   c001dcbe <unlockScheduler()>
c001eab2:	eb e2                	jmp    c001ea96 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eab4:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001eab9:	c7 05 ac 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319ac,0x0
c001eac3:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eac7:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eacb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eacf:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ead3:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ead7:	50                   	push   eax
c001ead8:	6a 20                	push   0x20
c001eada:	6a 00                	push   0x0
c001eadc:	68 c0 19 03 c0       	push   0xc00319c0
c001eae1:	e8 92 1c fe ff       	call   c0000778 <memset>
c001eae6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eaed:	e8 4e 0d ff ff       	call   c000f840 <malloc>
c001eaf2:	83 c4 0c             	add    esp,0xc
c001eaf5:	89 c7                	mov    edi,eax
c001eaf7:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001eafd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eb01:	50                   	push   eax
c001eb02:	e8 47 48 ff ff       	call   c001334e <File::File(char const*, Process*)>
c001eb07:	83 c4 10             	add    esp,0x10
c001eb0a:	85 ff                	test   edi,edi
c001eb0c:	75 0a                	jne    c001eb18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eb0e:	83 ec 0c             	sub    esp,0xc
c001eb11:	68 9f c5 02 c0       	push   0xc002c59f
c001eb16:	eb 27                	jmp    c001eb3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eb18:	50                   	push   eax
c001eb19:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eb1d:	50                   	push   eax
c001eb1e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb22:	50                   	push   eax
c001eb23:	57                   	push   edi
c001eb24:	e8 35 4b ff ff       	call   c001365e <File::stat(unsigned long long*, bool*)>
c001eb29:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eb2e:	83 c4 10             	add    esp,0x10
c001eb31:	89 e8                	mov    eax,ebp
c001eb33:	84 c0                	test   al,al
c001eb35:	74 19                	je     c001eb50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eb37:	83 ec 0c             	sub    esp,0xc
c001eb3a:	68 b3 c5 02 c0       	push   0xc002c5b3
c001eb3f:	e8 53 b9 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001eb44:	31 ed                	xor    ebp,ebp
c001eb46:	e8 73 f1 ff ff       	call   c001dcbe <unlockScheduler()>
c001eb4b:	83 c4 10             	add    esp,0x10
c001eb4e:	eb 75                	jmp    c001ebc5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb50:	50                   	push   eax
c001eb51:	50                   	push   eax
c001eb52:	6a 01                	push   0x1
c001eb54:	57                   	push   edi
c001eb55:	e8 58 48 ff ff       	call   c00133b2 <File::open(FileOpenMode)>
c001eb5a:	83 c4 10             	add    esp,0x10
c001eb5d:	85 c0                	test   eax,eax
c001eb5f:	74 17                	je     c001eb78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eb61:	83 ec 0c             	sub    esp,0xc
c001eb64:	68 cc c5 02 c0       	push   0xc002c5cc
c001eb69:	e8 29 b9 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001eb6e:	e8 4b f1 ff ff       	call   c001dcbe <unlockScheduler()>
c001eb73:	83 c4 10             	add    esp,0x10
c001eb76:	eb 4d                	jmp    c001ebc5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb78:	0f b7 f6             	movzx  esi,si
c001eb7b:	50                   	push   eax
c001eb7c:	0f b7 db             	movzx  ebx,bx
c001eb7f:	50                   	push   eax
c001eb80:	56                   	push   esi
c001eb81:	53                   	push   ebx
c001eb82:	e8 b7 fd ff ff       	call   c001e93e <Vm::realToLinear(unsigned short, unsigned short)>
c001eb87:	5a                   	pop    edx
c001eb88:	8b 17                	mov    edx,DWORD PTR [edi]
c001eb8a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb8e:	51                   	push   ecx
c001eb8f:	50                   	push   eax
c001eb90:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb98:	57                   	push   edi
c001eb99:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb9c:	83 c4 14             	add    esp,0x14
c001eb9f:	57                   	push   edi
c001eba0:	e8 6b 48 ff ff       	call   c0013410 <File::close()>
c001eba5:	c6 05 a5 19 03 c0 00 	mov    BYTE PTR ds:0xc00319a5,0x0
c001ebac:	e8 0d f1 ff ff       	call   c001dcbe <unlockScheduler()>
c001ebb1:	59                   	pop    ecx
c001ebb2:	ff 35 a8 19 03 c0    	push   DWORD PTR ds:0xc00319a8
c001ebb8:	e8 17 f7 ff ff       	call   c001e2d4 <unblockTask(ThreadControlBlock*)>
c001ebbd:	83 c4 10             	add    esp,0x10
c001ebc0:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ebc5:	83 c4 2c             	add    esp,0x2c
c001ebc8:	89 e8                	mov    eax,ebp
c001ebca:	5b                   	pop    ebx
c001ebcb:	5e                   	pop    esi
c001ebcc:	5f                   	pop    edi
c001ebcd:	5d                   	pop    ebp
c001ebce:	c3                   	ret    

c001ebcf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ebcf:	57                   	push   edi
c001ebd0:	56                   	push   esi
c001ebd1:	53                   	push   ebx
c001ebd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebda:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ebde:	83 e8 06             	sub    eax,0x6
c001ebe1:	0f b7 c0             	movzx  eax,ax
c001ebe4:	50                   	push   eax
c001ebe5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ebea:	50                   	push   eax
c001ebeb:	e8 4e fd ff ff       	call   c001e93e <Vm::realToLinear(unsigned short, unsigned short)>
c001ebf0:	5a                   	pop    edx
c001ebf1:	5e                   	pop    esi
c001ebf2:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ebf5:	8d 56 fa             	lea    edx,[esi-0x6]
c001ebf8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ebfe:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ec01:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ec04:	83 c2 02             	add    edx,0x2
c001ec07:	66 89 10             	mov    WORD PTR [eax],dx
c001ec0a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ec0d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ec11:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ec14:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ec18:	89 d6                	mov    esi,edx
c001ec1a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ec20:	66 81 e6 ff fd       	and    si,0xfdff
c001ec25:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ec29:	74 07                	je     c001ec32 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ec2b:	89 d6                	mov    esi,edx
c001ec2d:	66 81 ce 00 02       	or     si,0x200
c001ec32:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ec36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec3b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec3f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ec47:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ec4a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ec52:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ec55:	5b                   	pop    ebx
c001ec56:	5e                   	pop    esi
c001ec57:	5f                   	pop    edi
c001ec58:	c3                   	ret    

c001ec59 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ec59:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec5e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec63:	c1 e0 04             	shl    eax,0x4
c001ec66:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ec69:	c3                   	ret    

c001ec6a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ec6a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec6f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec74:	c1 e0 04             	shl    eax,0x4
c001ec77:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ec7b:	c3                   	ret    

c001ec7c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ec7c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec81:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec86:	c1 e0 04             	shl    eax,0x4
c001ec89:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec8c:	c3                   	ret    

c001ec8d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec8d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec92:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec97:	c1 e0 04             	shl    eax,0x4
c001ec9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec9e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eca1:	c3                   	ret    

c001eca2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eca2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eca7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecac:	c1 e0 04             	shl    eax,0x4
c001ecaf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ecb3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ecb7:	c3                   	ret    

c001ecb8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ecb8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecbd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecc2:	c1 e0 04             	shl    eax,0x4
c001ecc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ecc9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eccc:	c3                   	ret    

c001eccd <Vm::faultHandler(regs*)>:
c001eccd:	55                   	push   ebp
c001ecce:	57                   	push   edi
c001eccf:	56                   	push   esi
c001ecd0:	53                   	push   ebx
c001ecd1:	83 ec 1c             	sub    esp,0x1c
c001ecd4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ecd8:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ecdb:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ecde:	0f b7 c1             	movzx  eax,cx
c001ece1:	50                   	push   eax
c001ece2:	0f b7 c3             	movzx  eax,bx
c001ece5:	c1 e3 04             	shl    ebx,0x4
c001ece8:	50                   	push   eax
c001ece9:	e8 50 fc ff ff       	call   c001e93e <Vm::realToLinear(unsigned short, unsigned short)>
c001ecee:	5a                   	pop    edx
c001ecef:	89 c5                	mov    ebp,eax
c001ecf1:	5e                   	pop    esi
c001ecf2:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ecf6:	50                   	push   eax
c001ecf7:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ecfb:	50                   	push   eax
c001ecfc:	e8 3d fc ff ff       	call   c001e93e <Vm::realToLinear(unsigned short, unsigned short)>
c001ed01:	01 cb                	add    ebx,ecx
c001ed03:	89 c6                	mov    esi,eax
c001ed05:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ed09:	50                   	push   eax
c001ed0a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed0e:	50                   	push   eax
c001ed0f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed13:	50                   	push   eax
c001ed14:	55                   	push   ebp
c001ed15:	53                   	push   ebx
c001ed16:	b3 06                	mov    bl,0x6
c001ed18:	68 e5 c5 02 c0       	push   0xc002c5e5
c001ed1d:	e8 d4 40 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ed22:	83 c4 20             	add    esp,0x20
c001ed25:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ed2a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ed2f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed33:	3c 9d                	cmp    al,0x9d
c001ed35:	0f 84 d7 02 00 00    	je     c001f012 <Vm::faultHandler(regs*)+0x345>
c001ed3b:	0f 87 a3 00 00 00    	ja     c001ede4 <Vm::faultHandler(regs*)+0x117>
c001ed41:	3c 66                	cmp    al,0x66
c001ed43:	0f 84 15 02 00 00    	je     c001ef5e <Vm::faultHandler(regs*)+0x291>
c001ed49:	77 5f                	ja     c001edaa <Vm::faultHandler(regs*)+0xdd>
c001ed4b:	3c 36                	cmp    al,0x36
c001ed4d:	0f 84 f1 01 00 00    	je     c001ef44 <Vm::faultHandler(regs*)+0x277>
c001ed53:	77 28                	ja     c001ed7d <Vm::faultHandler(regs*)+0xb0>
c001ed55:	3c 26                	cmp    al,0x26
c001ed57:	0f 84 99 01 00 00    	je     c001eef6 <Vm::faultHandler(regs*)+0x229>
c001ed5d:	3c 2e                	cmp    al,0x2e
c001ed5f:	0f 85 3b 07 00 00    	jne    c001f4a0 <Vm::faultHandler(regs*)+0x7d3>
c001ed65:	83 ec 0c             	sub    esp,0xc
c001ed68:	31 db                	xor    ebx,ebx
c001ed6a:	68 fa c5 02 c0       	push   0xc002c5fa
c001ed6f:	e8 82 40 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ed74:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed77:	83 c4 10             	add    esp,0x10
c001ed7a:	45                   	inc    ebp
c001ed7b:	eb b2                	jmp    c001ed2f <Vm::faultHandler(regs*)+0x62>
c001ed7d:	3c 64                	cmp    al,0x64
c001ed7f:	0f 84 8b 01 00 00    	je     c001ef10 <Vm::faultHandler(regs*)+0x243>
c001ed85:	0f 87 9f 01 00 00    	ja     c001ef2a <Vm::faultHandler(regs*)+0x25d>
c001ed8b:	3c 3e                	cmp    al,0x3e
c001ed8d:	0f 85 0d 07 00 00    	jne    c001f4a0 <Vm::faultHandler(regs*)+0x7d3>
c001ed93:	83 ec 0c             	sub    esp,0xc
c001ed96:	b3 01                	mov    bl,0x1
c001ed98:	68 fe c5 02 c0       	push   0xc002c5fe
c001ed9d:	e8 54 40 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001eda2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eda5:	83 c4 10             	add    esp,0x10
c001eda8:	eb d0                	jmp    c001ed7a <Vm::faultHandler(regs*)+0xad>
c001edaa:	3c 6d                	cmp    al,0x6d
c001edac:	0f 84 af 03 00 00    	je     c001f161 <Vm::faultHandler(regs*)+0x494>
c001edb2:	77 15                	ja     c001edc9 <Vm::faultHandler(regs*)+0xfc>
c001edb4:	3c 67                	cmp    al,0x67
c001edb6:	0f 84 bf 01 00 00    	je     c001ef7b <Vm::faultHandler(regs*)+0x2ae>
c001edbc:	3c 6c                	cmp    al,0x6c
c001edbe:	0f 84 3f 03 00 00    	je     c001f103 <Vm::faultHandler(regs*)+0x436>
c001edc4:	e9 d7 06 00 00       	jmp    c001f4a0 <Vm::faultHandler(regs*)+0x7d3>
c001edc9:	3c 6f                	cmp    al,0x6f
c001edcb:	0f 84 a4 04 00 00    	je     c001f275 <Vm::faultHandler(regs*)+0x5a8>
c001edd1:	0f 82 11 04 00 00    	jb     c001f1e8 <Vm::faultHandler(regs*)+0x51b>
c001edd7:	3c 9c                	cmp    al,0x9c
c001edd9:	0f 84 ba 01 00 00    	je     c001ef99 <Vm::faultHandler(regs*)+0x2cc>
c001eddf:	e9 bc 06 00 00       	jmp    c001f4a0 <Vm::faultHandler(regs*)+0x7d3>
c001ede4:	3c ec                	cmp    al,0xec
c001ede6:	0f 84 24 06 00 00    	je     c001f410 <Vm::faultHandler(regs*)+0x743>
c001edec:	0f 87 93 00 00 00    	ja     c001ee85 <Vm::faultHandler(regs*)+0x1b8>
c001edf2:	3c e4                	cmp    al,0xe4
c001edf4:	0f 84 5c 05 00 00    	je     c001f356 <Vm::faultHandler(regs*)+0x689>
c001edfa:	77 6a                	ja     c001ee66 <Vm::faultHandler(regs*)+0x199>
c001edfc:	3c cd                	cmp    al,0xcd
c001edfe:	0f 84 7e 02 00 00    	je     c001f082 <Vm::faultHandler(regs*)+0x3b5>
c001ee04:	3c cf                	cmp    al,0xcf
c001ee06:	0f 85 94 06 00 00    	jne    c001f4a0 <Vm::faultHandler(regs*)+0x7d3>
c001ee0c:	83 ec 0c             	sub    esp,0xc
c001ee0f:	68 42 c6 02 c0       	push   0xc002c642
c001ee14:	e8 dd 3f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ee19:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ee1c:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ee1f:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ee23:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ee26:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ee2a:	0d 00 02 02 00       	or     eax,0x20200
c001ee2f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ee32:	56                   	push   esi
c001ee33:	53                   	push   ebx
c001ee34:	52                   	push   edx
c001ee35:	68 48 c6 02 c0       	push   0xc002c648
c001ee3a:	e8 b7 3f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ee3f:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ee43:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ee49:	66 c1 e8 09          	shr    ax,0x9
c001ee4d:	83 e0 01             	and    eax,0x1
c001ee50:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee53:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ee56:	83 c0 06             	add    eax,0x6
c001ee59:	25 ff ff 00 00       	and    eax,0xffff
c001ee5e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ee61:	e9 95 02 00 00       	jmp    c001f0fb <Vm::faultHandler(regs*)+0x42e>
c001ee66:	3c e6                	cmp    al,0xe6
c001ee68:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ee6c:	0f 84 4e 05 00 00    	je     c001f3c0 <Vm::faultHandler(regs*)+0x6f3>
c001ee72:	0f 82 0a 05 00 00    	jb     c001f382 <Vm::faultHandler(regs*)+0x6b5>
c001ee78:	3c e7                	cmp    al,0xe7
c001ee7a:	0f 84 69 05 00 00    	je     c001f3e9 <Vm::faultHandler(regs*)+0x71c>
c001ee80:	e9 1b 06 00 00       	jmp    c001f4a0 <Vm::faultHandler(regs*)+0x7d3>
c001ee85:	3c ef                	cmp    al,0xef
c001ee87:	0f 84 e6 05 00 00    	je     c001f473 <Vm::faultHandler(regs*)+0x7a6>
c001ee8d:	77 37                	ja     c001eec6 <Vm::faultHandler(regs*)+0x1f9>
c001ee8f:	3c ed                	cmp    al,0xed
c001ee91:	0f 84 a3 05 00 00    	je     c001f43a <Vm::faultHandler(regs*)+0x76d>
c001ee97:	3c ee                	cmp    al,0xee
c001ee99:	0f 85 01 06 00 00    	jne    c001f4a0 <Vm::faultHandler(regs*)+0x7d3>
c001ee9f:	52                   	push   edx
c001eea0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001eea3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001eea6:	68 e3 c6 02 c0       	push   0xc002c6e3
c001eeab:	e8 46 3f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001eeb0:	59                   	pop    ecx
c001eeb1:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001eeb5:	5b                   	pop    ebx
c001eeb6:	50                   	push   eax
c001eeb7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eebb:	50                   	push   eax
c001eebc:	e8 2a fa ff ff       	call   c001e8eb <Vm::outbv(unsigned short, unsigned char)>
c001eec1:	e9 a5 05 00 00       	jmp    c001f46b <Vm::faultHandler(regs*)+0x79e>
c001eec6:	3c fa                	cmp    al,0xfa
c001eec8:	0f 84 f7 01 00 00    	je     c001f0c5 <Vm::faultHandler(regs*)+0x3f8>
c001eece:	3c fb                	cmp    al,0xfb
c001eed0:	0f 84 0a 02 00 00    	je     c001f0e0 <Vm::faultHandler(regs*)+0x413>
c001eed6:	3c f3                	cmp    al,0xf3
c001eed8:	0f 85 c2 05 00 00    	jne    c001f4a0 <Vm::faultHandler(regs*)+0x7d3>
c001eede:	83 ec 0c             	sub    esp,0xc
c001eee1:	68 1b c6 02 c0       	push   0xc002c61b
c001eee6:	e8 0b 3f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001eeeb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeee:	83 c4 10             	add    esp,0x10
c001eef1:	e9 84 fe ff ff       	jmp    c001ed7a <Vm::faultHandler(regs*)+0xad>
c001eef6:	83 ec 0c             	sub    esp,0xc
c001eef9:	b3 02                	mov    bl,0x2
c001eefb:	68 f6 c5 02 c0       	push   0xc002c5f6
c001ef00:	e8 f1 3e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ef05:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef08:	83 c4 10             	add    esp,0x10
c001ef0b:	e9 6a fe ff ff       	jmp    c001ed7a <Vm::faultHandler(regs*)+0xad>
c001ef10:	83 ec 0c             	sub    esp,0xc
c001ef13:	b3 03                	mov    bl,0x3
c001ef15:	68 02 c6 02 c0       	push   0xc002c602
c001ef1a:	e8 d7 3e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ef1f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef22:	83 c4 10             	add    esp,0x10
c001ef25:	e9 50 fe ff ff       	jmp    c001ed7a <Vm::faultHandler(regs*)+0xad>
c001ef2a:	83 ec 0c             	sub    esp,0xc
c001ef2d:	b3 04                	mov    bl,0x4
c001ef2f:	68 06 c6 02 c0       	push   0xc002c606
c001ef34:	e8 bd 3e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ef39:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef3c:	83 c4 10             	add    esp,0x10
c001ef3f:	e9 36 fe ff ff       	jmp    c001ed7a <Vm::faultHandler(regs*)+0xad>
c001ef44:	83 ec 0c             	sub    esp,0xc
c001ef47:	b3 05                	mov    bl,0x5
c001ef49:	68 0a c6 02 c0       	push   0xc002c60a
c001ef4e:	e8 a3 3e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ef53:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	e9 1c fe ff ff       	jmp    c001ed7a <Vm::faultHandler(regs*)+0xad>
c001ef5e:	83 ec 0c             	sub    esp,0xc
c001ef61:	68 0e c6 02 c0       	push   0xc002c60e
c001ef66:	e8 8b 3e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ef6b:	83 c4 10             	add    esp,0x10
c001ef6e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef71:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ef76:	e9 ff fd ff ff       	jmp    c001ed7a <Vm::faultHandler(regs*)+0xad>
c001ef7b:	50                   	push   eax
c001ef7c:	50                   	push   eax
c001ef7d:	6a 01                	push   0x1
c001ef7f:	68 13 c6 02 c0       	push   0xc002c613
c001ef84:	e8 6d 3e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001ef89:	83 c4 10             	add    esp,0x10
c001ef8c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef8f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ef94:	e9 e1 fd ff ff       	jmp    c001ed7a <Vm::faultHandler(regs*)+0xad>
c001ef99:	83 ec 0c             	sub    esp,0xc
c001ef9c:	68 21 c6 02 c0       	push   0xc002c621
c001efa1:	e8 50 3e ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001efa6:	83 c4 10             	add    esp,0x10
c001efa9:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001efac:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efb1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001efb4:	74 2f                	je     c001efe5 <Vm::faultHandler(regs*)+0x318>
c001efb6:	83 ea 04             	sub    edx,0x4
c001efb9:	25 ff 0d 00 00       	and    eax,0xdff
c001efbe:	81 e2 ff ff 00 00    	and    edx,0xffff
c001efc4:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001efc7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001efca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efd0:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001efd4:	0f 84 bf 04 00 00    	je     c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001efda:	80 cc 02             	or     ah,0x2
c001efdd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001efe0:	e9 b4 04 00 00       	jmp    c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001efe5:	83 ea 02             	sub    edx,0x2
c001efe8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001efee:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001eff1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001eff5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001effb:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001efff:	74 05                	je     c001f006 <Vm::faultHandler(regs*)+0x339>
c001f001:	80 cc 02             	or     ah,0x2
c001f004:	eb 03                	jmp    c001f009 <Vm::faultHandler(regs*)+0x33c>
c001f006:	80 e4 fd             	and    ah,0xfd
c001f009:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f00d:	e9 87 04 00 00       	jmp    c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001f012:	83 ec 0c             	sub    esp,0xc
c001f015:	68 28 c6 02 c0       	push   0xc002c628
c001f01a:	e8 d7 3d ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f01f:	83 c4 10             	add    esp,0x10
c001f022:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f027:	74 28                	je     c001f051 <Vm::faultHandler(regs*)+0x384>
c001f029:	8b 06                	mov    eax,DWORD PTR [esi]
c001f02b:	25 ff 0d 00 00       	and    eax,0xdff
c001f030:	0d 00 02 02 00       	or     eax,0x20200
c001f035:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f038:	8b 06                	mov    eax,DWORD PTR [esi]
c001f03a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f040:	c1 e8 09             	shr    eax,0x9
c001f043:	83 e0 01             	and    eax,0x1
c001f046:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f049:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f04c:	83 c0 04             	add    eax,0x4
c001f04f:	eb 24                	jmp    c001f075 <Vm::faultHandler(regs*)+0x3a8>
c001f051:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f054:	0d 00 02 02 00       	or     eax,0x20200
c001f059:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f05c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f05f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f065:	66 c1 e8 09          	shr    ax,0x9
c001f069:	83 e0 01             	and    eax,0x1
c001f06c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f06f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f072:	83 c0 02             	add    eax,0x2
c001f075:	25 ff ff 00 00       	and    eax,0xffff
c001f07a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f07d:	e9 17 04 00 00       	jmp    c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001f082:	53                   	push   ebx
c001f083:	53                   	push   ebx
c001f084:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f088:	50                   	push   eax
c001f089:	68 2e c6 02 c0       	push   0xc002c62e
c001f08e:	e8 63 3d ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f093:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	3c ee                	cmp    al,0xee
c001f09c:	75 10                	jne    c001f0ae <Vm::faultHandler(regs*)+0x3e1>
c001f09e:	83 ec 0c             	sub    esp,0xc
c001f0a1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0a4:	e8 fa f8 ff ff       	call   c001e9a3 <Vm::mainloop3(unsigned long)>
c001f0a9:	e9 c0 03 00 00       	jmp    c001f46e <Vm::faultHandler(regs*)+0x7a1>
c001f0ae:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f0b2:	83 ec 0c             	sub    esp,0xc
c001f0b5:	53                   	push   ebx
c001f0b6:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f0ba:	53                   	push   ebx
c001f0bb:	55                   	push   ebp
c001f0bc:	50                   	push   eax
c001f0bd:	57                   	push   edi
c001f0be:	e8 0c fb ff ff       	call   c001ebcf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f0c3:	eb 36                	jmp    c001f0fb <Vm::faultHandler(regs*)+0x42e>
c001f0c5:	83 ec 0c             	sub    esp,0xc
c001f0c8:	68 38 c6 02 c0       	push   0xc002c638
c001f0cd:	e8 24 3d ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f0d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0d7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f0db:	e9 8b 03 00 00       	jmp    c001f46b <Vm::faultHandler(regs*)+0x79e>
c001f0e0:	83 ec 0c             	sub    esp,0xc
c001f0e3:	68 3d c6 02 c0       	push   0xc002c63d
c001f0e8:	e8 09 3d ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f0ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0f2:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f0f6:	e9 70 03 00 00       	jmp    c001f46b <Vm::faultHandler(regs*)+0x79e>
c001f0fb:	83 c4 20             	add    esp,0x20
c001f0fe:	e9 99 03 00 00       	jmp    c001f49c <Vm::faultHandler(regs*)+0x7cf>
c001f103:	83 ec 0c             	sub    esp,0xc
c001f106:	68 7b c6 02 c0       	push   0xc002c67b
c001f10b:	e8 e6 3c ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f110:	83 c4 10             	add    esp,0x10
c001f113:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f116:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f11b:	74 0d                	je     c001f12a <Vm::faultHandler(regs*)+0x45d>
c001f11d:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f124:	0f 87 9e 01 00 00    	ja     c001f2c8 <Vm::faultHandler(regs*)+0x5fb>
c001f12a:	83 ec 0c             	sub    esp,0xc
c001f12d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f131:	0f b7 db             	movzx  ebx,bx
c001f134:	50                   	push   eax
c001f135:	e8 9e f7 ff ff       	call   c001e8d8 <Vm::inbv(unsigned short)>
c001f13a:	83 c4 0c             	add    esp,0xc
c001f13d:	0f b6 c0             	movzx  eax,al
c001f140:	50                   	push   eax
c001f141:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f145:	50                   	push   eax
c001f146:	53                   	push   ebx
c001f147:	e8 41 fb ff ff       	call   c001ec8d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f14c:	83 c4 10             	add    esp,0x10
c001f14f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f152:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f156:	74 03                	je     c001f15b <Vm::faultHandler(regs*)+0x48e>
c001f158:	48                   	dec    eax
c001f159:	eb 01                	jmp    c001f15c <Vm::faultHandler(regs*)+0x48f>
c001f15b:	40                   	inc    eax
c001f15c:	0f b7 c0             	movzx  eax,ax
c001f15f:	eb 7f                	jmp    c001f1e0 <Vm::faultHandler(regs*)+0x513>
c001f161:	83 ec 0c             	sub    esp,0xc
c001f164:	68 ad c6 02 c0       	push   0xc002c6ad
c001f169:	e8 88 3c ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f16e:	83 c4 10             	add    esp,0x10
c001f171:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f174:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f179:	74 0d                	je     c001f188 <Vm::faultHandler(regs*)+0x4bb>
c001f17b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f182:	0f 87 40 01 00 00    	ja     c001f2c8 <Vm::faultHandler(regs*)+0x5fb>
c001f188:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f18b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f18f:	0f b7 db             	movzx  ebx,bx
c001f192:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f197:	74 20                	je     c001f1b9 <Vm::faultHandler(regs*)+0x4ec>
c001f199:	ed                   	in     eax,dx
c001f19a:	51                   	push   ecx
c001f19b:	50                   	push   eax
c001f19c:	56                   	push   esi
c001f19d:	53                   	push   ebx
c001f19e:	e8 15 fb ff ff       	call   c001ecb8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f1a3:	83 c4 10             	add    esp,0x10
c001f1a6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1a9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1ad:	74 05                	je     c001f1b4 <Vm::faultHandler(regs*)+0x4e7>
c001f1af:	83 e8 04             	sub    eax,0x4
c001f1b2:	eb 27                	jmp    c001f1db <Vm::faultHandler(regs*)+0x50e>
c001f1b4:	83 c0 04             	add    eax,0x4
c001f1b7:	eb 22                	jmp    c001f1db <Vm::faultHandler(regs*)+0x50e>
c001f1b9:	66 ed                	in     ax,dx
c001f1bb:	0f b7 c0             	movzx  eax,ax
c001f1be:	52                   	push   edx
c001f1bf:	50                   	push   eax
c001f1c0:	56                   	push   esi
c001f1c1:	53                   	push   ebx
c001f1c2:	e8 db fa ff ff       	call   c001eca2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f1c7:	83 c4 10             	add    esp,0x10
c001f1ca:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1cd:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1d1:	74 05                	je     c001f1d8 <Vm::faultHandler(regs*)+0x50b>
c001f1d3:	83 e8 02             	sub    eax,0x2
c001f1d6:	eb 03                	jmp    c001f1db <Vm::faultHandler(regs*)+0x50e>
c001f1d8:	83 c0 02             	add    eax,0x2
c001f1db:	25 ff ff 00 00       	and    eax,0xffff
c001f1e0:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f1e3:	e9 b1 02 00 00       	jmp    c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	4b                   	dec    ebx
c001f1ec:	68 b3 c6 02 c0       	push   0xc002c6b3
c001f1f1:	e8 00 3c ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f1f6:	83 c4 10             	add    esp,0x10
c001f1f9:	80 fb 05             	cmp    bl,0x5
c001f1fc:	77 0a                	ja     c001f208 <Vm::faultHandler(regs*)+0x53b>
c001f1fe:	0f b6 db             	movzx  ebx,bl
c001f201:	ff 24 9d 24 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd38dc]
c001f208:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f20c:	eb 1b                	jmp    c001f229 <Vm::faultHandler(regs*)+0x55c>
c001f20e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f212:	eb 15                	jmp    c001f229 <Vm::faultHandler(regs*)+0x55c>
c001f214:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f218:	eb 0f                	jmp    c001f229 <Vm::faultHandler(regs*)+0x55c>
c001f21a:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f21e:	eb 09                	jmp    c001f229 <Vm::faultHandler(regs*)+0x55c>
c001f220:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f223:	eb 04                	jmp    c001f229 <Vm::faultHandler(regs*)+0x55c>
c001f225:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f229:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f22e:	74 0d                	je     c001f23d <Vm::faultHandler(regs*)+0x570>
c001f230:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f237:	0f 87 8b 00 00 00    	ja     c001f2c8 <Vm::faultHandler(regs*)+0x5fb>
c001f23d:	53                   	push   ebx
c001f23e:	53                   	push   ebx
c001f23f:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f243:	52                   	push   edx
c001f244:	50                   	push   eax
c001f245:	e8 0f fa ff ff       	call   c001ec59 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f24a:	5e                   	pop    esi
c001f24b:	0f b6 c0             	movzx  eax,al
c001f24e:	5d                   	pop    ebp
c001f24f:	50                   	push   eax
c001f250:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f254:	50                   	push   eax
c001f255:	e8 91 f6 ff ff       	call   c001e8eb <Vm::outbv(unsigned short, unsigned char)>
c001f25a:	83 c4 10             	add    esp,0x10
c001f25d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f260:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f264:	74 03                	je     c001f269 <Vm::faultHandler(regs*)+0x59c>
c001f266:	48                   	dec    eax
c001f267:	eb 01                	jmp    c001f26a <Vm::faultHandler(regs*)+0x59d>
c001f269:	40                   	inc    eax
c001f26a:	0f b7 c0             	movzx  eax,ax
c001f26d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f270:	e9 24 02 00 00       	jmp    c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001f275:	83 ec 0c             	sub    esp,0xc
c001f278:	4b                   	dec    ebx
c001f279:	68 b3 c6 02 c0       	push   0xc002c6b3
c001f27e:	e8 73 3b ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f283:	83 c4 10             	add    esp,0x10
c001f286:	80 fb 05             	cmp    bl,0x5
c001f289:	77 0a                	ja     c001f295 <Vm::faultHandler(regs*)+0x5c8>
c001f28b:	0f b6 db             	movzx  ebx,bl
c001f28e:	ff 24 9d 3c c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd38c4]
c001f295:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f299:	eb 1b                	jmp    c001f2b6 <Vm::faultHandler(regs*)+0x5e9>
c001f29b:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f29f:	eb 15                	jmp    c001f2b6 <Vm::faultHandler(regs*)+0x5e9>
c001f2a1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2a5:	eb 0f                	jmp    c001f2b6 <Vm::faultHandler(regs*)+0x5e9>
c001f2a7:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f2ab:	eb 09                	jmp    c001f2b6 <Vm::faultHandler(regs*)+0x5e9>
c001f2ad:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f2b0:	eb 04                	jmp    c001f2b6 <Vm::faultHandler(regs*)+0x5e9>
c001f2b2:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f2b6:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f2b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2be:	74 39                	je     c001f2f9 <Vm::faultHandler(regs*)+0x62c>
c001f2c0:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f2c6:	76 31                	jbe    c001f2f9 <Vm::faultHandler(regs*)+0x62c>
c001f2c8:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f2cc:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f2d0:	51                   	push   ecx
c001f2d1:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f2d5:	51                   	push   ecx
c001f2d6:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f2da:	51                   	push   ecx
c001f2db:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f2df:	51                   	push   ecx
c001f2e0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f2e4:	52                   	push   edx
c001f2e5:	50                   	push   eax
c001f2e6:	50                   	push   eax
c001f2e7:	68 80 c6 02 c0       	push   0xc002c680
c001f2ec:	e8 05 3b ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f2f1:	83 c4 20             	add    esp,0x20
c001f2f4:	e9 fb 01 00 00       	jmp    c001f4f4 <Vm::faultHandler(regs*)+0x827>
c001f2f9:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f2fc:	0f b7 d3             	movzx  edx,bx
c001f2ff:	81 e6 00 04 00 00    	and    esi,0x400
c001f305:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f308:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f30d:	74 1d                	je     c001f32c <Vm::faultHandler(regs*)+0x65f>
c001f30f:	51                   	push   ecx
c001f310:	51                   	push   ecx
c001f311:	52                   	push   edx
c001f312:	50                   	push   eax
c001f313:	e8 64 f9 ff ff       	call   c001ec7c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f318:	83 c4 10             	add    esp,0x10
c001f31b:	89 ea                	mov    edx,ebp
c001f31d:	ef                   	out    dx,eax
c001f31e:	85 f6                	test   esi,esi
c001f320:	74 05                	je     c001f327 <Vm::faultHandler(regs*)+0x65a>
c001f322:	83 eb 04             	sub    ebx,0x4
c001f325:	eb 21                	jmp    c001f348 <Vm::faultHandler(regs*)+0x67b>
c001f327:	83 c3 04             	add    ebx,0x4
c001f32a:	eb 1c                	jmp    c001f348 <Vm::faultHandler(regs*)+0x67b>
c001f32c:	51                   	push   ecx
c001f32d:	51                   	push   ecx
c001f32e:	52                   	push   edx
c001f32f:	50                   	push   eax
c001f330:	e8 35 f9 ff ff       	call   c001ec6a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f335:	83 c4 10             	add    esp,0x10
c001f338:	89 ea                	mov    edx,ebp
c001f33a:	66 ef                	out    dx,ax
c001f33c:	85 f6                	test   esi,esi
c001f33e:	74 05                	je     c001f345 <Vm::faultHandler(regs*)+0x678>
c001f340:	83 eb 02             	sub    ebx,0x2
c001f343:	eb 03                	jmp    c001f348 <Vm::faultHandler(regs*)+0x67b>
c001f345:	83 c3 02             	add    ebx,0x2
c001f348:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f34e:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f351:	e9 43 01 00 00       	jmp    c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001f356:	53                   	push   ebx
c001f357:	53                   	push   ebx
c001f358:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f35c:	50                   	push   eax
c001f35d:	68 b9 c6 02 c0       	push   0xc002c6b9
c001f362:	e8 8f 3a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f367:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f36e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f372:	89 04 24             	mov    DWORD PTR [esp],eax
c001f375:	e8 5e f5 ff ff       	call   c001e8d8 <Vm::inbv(unsigned short)>
c001f37a:	0f b6 c0             	movzx  eax,al
c001f37d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f380:	eb 5e                	jmp    c001f3e0 <Vm::faultHandler(regs*)+0x713>
c001f382:	51                   	push   ecx
c001f383:	51                   	push   ecx
c001f384:	53                   	push   ebx
c001f385:	68 bf c6 02 c0       	push   0xc002c6bf
c001f38a:	e8 67 3a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f38f:	83 c4 10             	add    esp,0x10
c001f392:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f397:	74 07                	je     c001f3a0 <Vm::faultHandler(regs*)+0x6d3>
c001f399:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f39d:	ed                   	in     eax,dx
c001f39e:	eb 14                	jmp    c001f3b4 <Vm::faultHandler(regs*)+0x6e7>
c001f3a0:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f3a3:	66 31 db             	xor    bx,bx
c001f3a6:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f3a9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3ad:	66 ed                	in     ax,dx
c001f3af:	0f b7 c0             	movzx  eax,ax
c001f3b2:	09 d8                	or     eax,ebx
c001f3b4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f3b7:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f3bb:	e9 dc 00 00 00       	jmp    c001f49c <Vm::faultHandler(regs*)+0x7cf>
c001f3c0:	50                   	push   eax
c001f3c1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3c4:	53                   	push   ebx
c001f3c5:	68 c5 c6 02 c0       	push   0xc002c6c5
c001f3ca:	e8 27 3a ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f3cf:	58                   	pop    eax
c001f3d0:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f3d4:	5a                   	pop    edx
c001f3d5:	50                   	push   eax
c001f3d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3da:	50                   	push   eax
c001f3db:	e8 0b f5 ff ff       	call   c001e8eb <Vm::outbv(unsigned short, unsigned char)>
c001f3e0:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f3e4:	e9 85 00 00 00       	jmp    c001f46e <Vm::faultHandler(regs*)+0x7a1>
c001f3e9:	50                   	push   eax
c001f3ea:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3ed:	53                   	push   ebx
c001f3ee:	68 ce c6 02 c0       	push   0xc002c6ce
c001f3f3:	e8 fe 39 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f3f8:	83 c4 10             	add    esp,0x10
c001f3fb:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3ff:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f404:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f407:	74 03                	je     c001f40c <Vm::faultHandler(regs*)+0x73f>
c001f409:	ef                   	out    dx,eax
c001f40a:	eb ab                	jmp    c001f3b7 <Vm::faultHandler(regs*)+0x6ea>
c001f40c:	66 ef                	out    dx,ax
c001f40e:	eb a7                	jmp    c001f3b7 <Vm::faultHandler(regs*)+0x6ea>
c001f410:	55                   	push   ebp
c001f411:	55                   	push   ebp
c001f412:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f415:	68 d7 c6 02 c0       	push   0xc002c6d7
c001f41a:	e8 d7 39 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f41f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f426:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f42a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f42d:	e8 a6 f4 ff ff       	call   c001e8d8 <Vm::inbv(unsigned short)>
c001f432:	0f b6 c0             	movzx  eax,al
c001f435:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f438:	eb 31                	jmp    c001f46b <Vm::faultHandler(regs*)+0x79e>
c001f43a:	56                   	push   esi
c001f43b:	56                   	push   esi
c001f43c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f43f:	68 dd c6 02 c0       	push   0xc002c6dd
c001f444:	e8 ad 39 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f449:	83 c4 10             	add    esp,0x10
c001f44c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f44f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f454:	74 03                	je     c001f459 <Vm::faultHandler(regs*)+0x78c>
c001f456:	ed                   	in     eax,dx
c001f457:	eb 0d                	jmp    c001f466 <Vm::faultHandler(regs*)+0x799>
c001f459:	66 ed                	in     ax,dx
c001f45b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f45e:	0f b7 c0             	movzx  eax,ax
c001f461:	66 31 d2             	xor    dx,dx
c001f464:	09 d0                	or     eax,edx
c001f466:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f469:	eb 2e                	jmp    c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001f46b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f46e:	83 c4 10             	add    esp,0x10
c001f471:	eb 29                	jmp    c001f49c <Vm::faultHandler(regs*)+0x7cf>
c001f473:	50                   	push   eax
c001f474:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f477:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f47a:	68 ec c6 02 c0       	push   0xc002c6ec
c001f47f:	e8 72 39 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f484:	83 c4 10             	add    esp,0x10
c001f487:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f48a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f48f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f492:	74 03                	je     c001f497 <Vm::faultHandler(regs*)+0x7ca>
c001f494:	ef                   	out    dx,eax
c001f495:	eb 02                	jmp    c001f499 <Vm::faultHandler(regs*)+0x7cc>
c001f497:	66 ef                	out    dx,ax
c001f499:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f49c:	b0 01                	mov    al,0x1
c001f49e:	eb 56                	jmp    c001f4f6 <Vm::faultHandler(regs*)+0x829>
c001f4a0:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4a4:	51                   	push   ecx
c001f4a5:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4a9:	51                   	push   ecx
c001f4aa:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4ae:	51                   	push   ecx
c001f4af:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4b3:	51                   	push   ecx
c001f4b4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4b8:	52                   	push   edx
c001f4b9:	50                   	push   eax
c001f4ba:	50                   	push   eax
c001f4bb:	68 f5 c6 02 c0       	push   0xc002c6f5
c001f4c0:	e8 31 39 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c001f4c5:	83 c4 20             	add    esp,0x20
c001f4c8:	83 ec 0c             	sub    esp,0xc
c001f4cb:	6a 60                	push   0x60
c001f4cd:	e8 06 f4 ff ff       	call   c001e8d8 <Vm::inbv(unsigned short)>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	3c 1c                	cmp    al,0x1c
c001f4d7:	74 04                	je     c001f4dd <Vm::faultHandler(regs*)+0x810>
c001f4d9:	3c 5a                	cmp    al,0x5a
c001f4db:	75 eb                	jne    c001f4c8 <Vm::faultHandler(regs*)+0x7fb>
c001f4dd:	3c 1c                	cmp    al,0x1c
c001f4df:	74 04                	je     c001f4e5 <Vm::faultHandler(regs*)+0x818>
c001f4e1:	3c 5a                	cmp    al,0x5a
c001f4e3:	75 0f                	jne    c001f4f4 <Vm::faultHandler(regs*)+0x827>
c001f4e5:	83 ec 0c             	sub    esp,0xc
c001f4e8:	6a 60                	push   0x60
c001f4ea:	e8 e9 f3 ff ff       	call   c001e8d8 <Vm::inbv(unsigned short)>
c001f4ef:	83 c4 10             	add    esp,0x10
c001f4f2:	eb e9                	jmp    c001f4dd <Vm::faultHandler(regs*)+0x810>
c001f4f4:	31 c0                	xor    eax,eax
c001f4f6:	83 c4 1c             	add    esp,0x1c
c001f4f9:	5b                   	pop    ebx
c001f4fa:	5e                   	pop    esi
c001f4fb:	5f                   	pop    edi
c001f4fc:	5d                   	pop    ebp
c001f4fd:	c3                   	ret    

c001f4fe <Vm::fpuInternalTo32(unsigned long long)>:
c001f4fe:	57                   	push   edi
c001f4ff:	56                   	push   esi
c001f500:	53                   	push   ebx
c001f501:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f509:	89 d6                	mov    esi,edx
c001f50b:	89 d7                	mov    edi,edx
c001f50d:	89 c1                	mov    ecx,eax
c001f50f:	c1 ef 14             	shr    edi,0x14
c001f512:	89 d3                	mov    ebx,edx
c001f514:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f51a:	31 d2                	xor    edx,edx
c001f51c:	89 f8                	mov    eax,edi
c001f51e:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f524:	bf ff 00 00 00       	mov    edi,0xff
c001f529:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f52e:	83 d2 ff             	adc    edx,0xffffffff
c001f531:	39 c7                	cmp    edi,eax
c001f533:	bf 00 00 00 00       	mov    edi,0x0
c001f538:	19 d7                	sbb    edi,edx
c001f53a:	72 15                	jb     c001f551 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f53c:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f540:	c1 e0 17             	shl    eax,0x17
c001f543:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f549:	09 f1                	or     ecx,esi
c001f54b:	09 c1                	or     ecx,eax
c001f54d:	89 cf                	mov    edi,ecx
c001f54f:	eb 02                	jmp    c001f553 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f551:	31 ff                	xor    edi,edi
c001f553:	89 f8                	mov    eax,edi
c001f555:	5b                   	pop    ebx
c001f556:	5e                   	pop    esi
c001f557:	5f                   	pop    edi
c001f558:	c3                   	ret    

c001f559 <Vm::fpuInternalTo64(unsigned long long)>:
c001f559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f55d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f561:	c3                   	ret    

c001f562 <Vm::fpu32ToInternal(unsigned int)>:
c001f562:	57                   	push   edi
c001f563:	31 ff                	xor    edi,edi
c001f565:	56                   	push   esi
c001f566:	53                   	push   ebx
c001f567:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f56b:	89 cb                	mov    ebx,ecx
c001f56d:	89 ce                	mov    esi,ecx
c001f56f:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f575:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f57b:	c1 e9 17             	shr    ecx,0x17
c001f57e:	89 f0                	mov    eax,esi
c001f580:	0f b6 d1             	movzx  edx,cl
c001f583:	81 c2 80 03 00 00    	add    edx,0x380
c001f589:	89 d1                	mov    ecx,edx
c001f58b:	89 fa                	mov    edx,edi
c001f58d:	c1 e1 14             	shl    ecx,0x14
c001f590:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f594:	c1 e0 1d             	shl    eax,0x1d
c001f597:	89 d7                	mov    edi,edx
c001f599:	89 c6                	mov    esi,eax
c001f59b:	89 ca                	mov    edx,ecx
c001f59d:	89 f0                	mov    eax,esi
c001f59f:	09 fa                	or     edx,edi
c001f5a1:	09 da                	or     edx,ebx
c001f5a3:	5b                   	pop    ebx
c001f5a4:	5e                   	pop    esi
c001f5a5:	5f                   	pop    edi
c001f5a6:	c3                   	ret    

c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>:
c001f5a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5af:	c3                   	ret    

c001f5b0 <Vm::fpuFloatToLong(unsigned long long)>:
c001f5b0:	57                   	push   edi
c001f5b1:	31 c0                	xor    eax,eax
c001f5b3:	56                   	push   esi
c001f5b4:	31 d2                	xor    edx,edx
c001f5b6:	53                   	push   ebx
c001f5b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f5bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5bf:	89 d9                	mov    ecx,ebx
c001f5c1:	c1 e9 14             	shr    ecx,0x14
c001f5c4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f5ca:	89 cf                	mov    edi,ecx
c001f5cc:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f5d2:	78 33                	js     c001f607 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5d4:	89 d9                	mov    ecx,ebx
c001f5d6:	89 f0                	mov    eax,esi
c001f5d8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f5de:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f5e4:	89 ca                	mov    edx,ecx
c001f5e6:	b9 34 00 00 00       	mov    ecx,0x34
c001f5eb:	29 f9                	sub    ecx,edi
c001f5ed:	0f ad d0             	shrd   eax,edx,cl
c001f5f0:	d3 fa                	sar    edx,cl
c001f5f2:	f6 c1 20             	test   cl,0x20
c001f5f5:	74 05                	je     c001f5fc <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5f7:	89 d0                	mov    eax,edx
c001f5f9:	c1 fa 1f             	sar    edx,0x1f
c001f5fc:	85 db                	test   ebx,ebx
c001f5fe:	79 07                	jns    c001f607 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f600:	f7 d8                	neg    eax
c001f602:	83 d2 00             	adc    edx,0x0
c001f605:	f7 da                	neg    edx
c001f607:	5b                   	pop    ebx
c001f608:	5e                   	pop    esi
c001f609:	5f                   	pop    edi
c001f60a:	c3                   	ret    

c001f60b <Vm::fpuULongToFloat(unsigned long long)>:
c001f60b:	57                   	push   edi
c001f60c:	31 c9                	xor    ecx,ecx
c001f60e:	56                   	push   esi
c001f60f:	53                   	push   ebx
c001f610:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f614:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f618:	0f ba e7 14          	bt     edi,0x14
c001f61c:	72 07                	jb     c001f625 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f61e:	01 f6                	add    esi,esi
c001f620:	11 ff                	adc    edi,edi
c001f622:	41                   	inc    ecx
c001f623:	eb f3                	jmp    c001f618 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f625:	89 fa                	mov    edx,edi
c001f627:	89 f0                	mov    eax,esi
c001f629:	bb 33 04 00 00       	mov    ebx,0x433
c001f62e:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f634:	29 cb                	sub    ebx,ecx
c001f636:	89 d9                	mov    ecx,ebx
c001f638:	5b                   	pop    ebx
c001f639:	c1 e1 14             	shl    ecx,0x14
c001f63c:	5e                   	pop    esi
c001f63d:	09 ca                	or     edx,ecx
c001f63f:	5f                   	pop    edi
c001f640:	c3                   	ret    

c001f641 <Vm::fpuLongToFloat(long long)>:
c001f641:	56                   	push   esi
c001f642:	31 c0                	xor    eax,eax
c001f644:	53                   	push   ebx
c001f645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f649:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f64d:	39 c8                	cmp    eax,ecx
c001f64f:	19 d8                	sbb    eax,ebx
c001f651:	7d 04                	jge    c001f657 <Vm::fpuLongToFloat(long long)+0x16>
c001f653:	31 f6                	xor    esi,esi
c001f655:	eb 0c                	jmp    c001f663 <Vm::fpuLongToFloat(long long)+0x22>
c001f657:	f7 d9                	neg    ecx
c001f659:	be 01 00 00 00       	mov    esi,0x1
c001f65e:	83 d3 00             	adc    ebx,0x0
c001f661:	f7 db                	neg    ebx
c001f663:	31 c0                	xor    eax,eax
c001f665:	0f ba e3 14          	bt     ebx,0x14
c001f669:	72 07                	jb     c001f672 <Vm::fpuLongToFloat(long long)+0x31>
c001f66b:	01 c9                	add    ecx,ecx
c001f66d:	11 db                	adc    ebx,ebx
c001f66f:	40                   	inc    eax
c001f670:	eb f3                	jmp    c001f665 <Vm::fpuLongToFloat(long long)+0x24>
c001f672:	ba 33 04 00 00       	mov    edx,0x433
c001f677:	29 c2                	sub    edx,eax
c001f679:	89 c8                	mov    eax,ecx
c001f67b:	c1 e2 14             	shl    edx,0x14
c001f67e:	89 d9                	mov    ecx,ebx
c001f680:	89 f3                	mov    ebx,esi
c001f682:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f688:	09 ca                	or     edx,ecx
c001f68a:	84 db                	test   bl,bl
c001f68c:	74 06                	je     c001f694 <Vm::fpuLongToFloat(long long)+0x53>
c001f68e:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f694:	5b                   	pop    ebx
c001f695:	5e                   	pop    esi
c001f696:	c3                   	ret    

c001f697 <Vm::fpuGet0()>:
c001f697:	31 c0                	xor    eax,eax
c001f699:	31 d2                	xor    edx,edx
c001f69b:	c3                   	ret    

c001f69c <Vm::fpuGet1()>:
c001f69c:	b8 01 00 00 00       	mov    eax,0x1
c001f6a1:	31 d2                	xor    edx,edx
c001f6a3:	c3                   	ret    

c001f6a4 <Vm::fpuGetPi()>:
c001f6a4:	b8 03 00 00 00       	mov    eax,0x3
c001f6a9:	31 d2                	xor    edx,edx
c001f6ab:	c3                   	ret    

c001f6ac <Vm::fpuGetLog2E()>:
c001f6ac:	83 ec 18             	sub    esp,0x18
c001f6af:	68 54 c7 02 c0       	push   0xc002c754
c001f6b4:	e8 de ad ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001f6b9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6be:	31 d2                	xor    edx,edx
c001f6c0:	83 c4 1c             	add    esp,0x1c
c001f6c3:	c3                   	ret    

c001f6c4 <Vm::fpuGetLogE2()>:
c001f6c4:	83 ec 18             	sub    esp,0x18
c001f6c7:	68 60 c7 02 c0       	push   0xc002c760
c001f6cc:	e8 c6 ad ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001f6d1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6d6:	31 d2                	xor    edx,edx
c001f6d8:	83 c4 1c             	add    esp,0x1c
c001f6db:	c3                   	ret    

c001f6dc <Vm::fpuGetLog210()>:
c001f6dc:	83 ec 18             	sub    esp,0x18
c001f6df:	68 6c c7 02 c0       	push   0xc002c76c
c001f6e4:	e8 ae ad ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001f6e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6ee:	31 d2                	xor    edx,edx
c001f6f0:	83 c4 1c             	add    esp,0x1c
c001f6f3:	c3                   	ret    

c001f6f4 <Vm::fpuGetLog102()>:
c001f6f4:	83 ec 18             	sub    esp,0x18
c001f6f7:	68 79 c7 02 c0       	push   0xc002c779
c001f6fc:	e8 96 ad ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001f701:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f706:	31 d2                	xor    edx,edx
c001f708:	83 c4 1c             	add    esp,0x1c
c001f70b:	c3                   	ret    

c001f70c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f70c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f710:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f718:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f71c:	0f 92 c0             	setb   al
c001f71f:	c3                   	ret    

c001f720 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f720:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f728:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f72c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f730:	09 c2                	or     edx,eax
c001f732:	0f 94 c0             	sete   al
c001f735:	c3                   	ret    

c001f736 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f736:	57                   	push   edi
c001f737:	56                   	push   esi
c001f738:	53                   	push   ebx
c001f739:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f73d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f741:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f745:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f749:	57                   	push   edi
c001f74a:	56                   	push   esi
c001f74b:	53                   	push   ebx
c001f74c:	51                   	push   ecx
c001f74d:	e8 ce ff ff ff       	call   c001f720 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f752:	83 c4 10             	add    esp,0x10
c001f755:	88 c2                	mov    dl,al
c001f757:	31 c0                	xor    eax,eax
c001f759:	84 d2                	test   dl,dl
c001f75b:	75 0c                	jne    c001f769 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f75d:	57                   	push   edi
c001f75e:	56                   	push   esi
c001f75f:	53                   	push   ebx
c001f760:	51                   	push   ecx
c001f761:	e8 a6 ff ff ff       	call   c001f70c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f766:	83 c4 10             	add    esp,0x10
c001f769:	83 e0 01             	and    eax,0x1
c001f76c:	5b                   	pop    ebx
c001f76d:	88 c1                	mov    cl,al
c001f76f:	83 e2 01             	and    edx,0x1
c001f772:	a0 e1 19 03 c0       	mov    al,ds:0xc00319e1
c001f777:	c1 e2 06             	shl    edx,0x6
c001f77a:	83 e0 ba             	and    eax,0xffffffba
c001f77d:	5e                   	pop    esi
c001f77e:	09 c8                	or     eax,ecx
c001f780:	5f                   	pop    edi
c001f781:	09 d0                	or     eax,edx
c001f783:	a2 e1 19 03 c0       	mov    ds:0xc00319e1,al
c001f788:	c3                   	ret    

c001f789 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f789:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f78d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f791:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f795:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f799:	c3                   	ret    

c001f79a <Vm::fpuAbs(unsigned long long)>:
c001f79a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f79e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7a2:	c3                   	ret    

c001f7a3 <Vm::fpuChs(unsigned long long)>:
c001f7a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7ab:	f7 d8                	neg    eax
c001f7ad:	83 d2 00             	adc    edx,0x0
c001f7b0:	f7 da                	neg    edx
c001f7b2:	c3                   	ret    

c001f7b3 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f7b3:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f7b7:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f7bc:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f7c0:	eb c7                	jmp    c001f789 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f7c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f7c2:	53                   	push   ebx
c001f7c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7d3:	0f af ca             	imul   ecx,edx
c001f7d6:	0f af d8             	imul   ebx,eax
c001f7d9:	f7 e2                	mul    edx
c001f7db:	01 d9                	add    ecx,ebx
c001f7dd:	5b                   	pop    ebx
c001f7de:	01 ca                	add    edx,ecx
c001f7e0:	c3                   	ret    

c001f7e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f7e1:	83 ec 0c             	sub    esp,0xc
c001f7e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7f4:	e8 a3 70 00 00       	call   c002689c <__udivdi3>
c001f7f9:	83 c4 1c             	add    esp,0x1c
c001f7fc:	c3                   	ret    

c001f7fd <Vm::fpuSquare(unsigned long long)>:
c001f7fd:	50                   	push   eax
c001f7fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f802:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f806:	52                   	push   edx
c001f807:	50                   	push   eax
c001f808:	52                   	push   edx
c001f809:	50                   	push   eax
c001f80a:	e8 b3 ff ff ff       	call   c001f7c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f80f:	83 c4 14             	add    esp,0x14
c001f812:	c3                   	ret    

c001f813 <Vm::fpuGetReg(int)>:
c001f813:	83 ec 0c             	sub    esp,0xc
c001f816:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f81b:	76 10                	jbe    c001f82d <Vm::fpuGetReg(int)+0x1a>
c001f81d:	83 ec 0c             	sub    esp,0xc
c001f820:	68 86 c7 02 c0       	push   0xc002c786
c001f825:	e8 6d ac ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001f82a:	83 c4 10             	add    esp,0x10
c001f82d:	a0 e1 19 03 c0       	mov    al,ds:0xc00319e1
c001f832:	b9 08 00 00 00       	mov    ecx,0x8
c001f837:	c0 e8 03             	shr    al,0x3
c001f83a:	83 e0 07             	and    eax,0x7
c001f83d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f841:	99                   	cdq    
c001f842:	f7 f9                	idiv   ecx
c001f844:	8b 04 d5 e4 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce61c]
c001f84b:	8b 14 d5 e8 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce618]
c001f852:	83 c4 0c             	add    esp,0xc
c001f855:	c3                   	ret    

c001f856 <Vm::fpuSetReg(int, unsigned long long)>:
c001f856:	57                   	push   edi
c001f857:	56                   	push   esi
c001f858:	52                   	push   edx
c001f859:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f85d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f861:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f866:	76 10                	jbe    c001f878 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f868:	83 ec 0c             	sub    esp,0xc
c001f86b:	68 99 c7 02 c0       	push   0xc002c799
c001f870:	e8 22 ac ff ff       	call   c001a497 <Krnl::panic(char const*)>
c001f875:	83 c4 10             	add    esp,0x10
c001f878:	a0 e1 19 03 c0       	mov    al,ds:0xc00319e1
c001f87d:	b9 08 00 00 00       	mov    ecx,0x8
c001f882:	c0 e8 03             	shr    al,0x3
c001f885:	83 e0 07             	and    eax,0x7
c001f888:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f88c:	99                   	cdq    
c001f88d:	f7 f9                	idiv   ecx
c001f88f:	89 34 d5 e4 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce61c],esi
c001f896:	89 3c d5 e8 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce618],edi
c001f89d:	58                   	pop    eax
c001f89e:	5e                   	pop    esi
c001f89f:	5f                   	pop    edi
c001f8a0:	c3                   	ret    

c001f8a1 <Vm::fpuPush(unsigned long long)>:
c001f8a1:	a0 e1 19 03 c0       	mov    al,ds:0xc00319e1
c001f8a6:	c0 e8 03             	shr    al,0x3
c001f8a9:	83 e0 07             	and    eax,0x7
c001f8ac:	83 c0 07             	add    eax,0x7
c001f8af:	88 c2                	mov    dl,al
c001f8b1:	83 e0 07             	and    eax,0x7
c001f8b4:	83 e2 07             	and    edx,0x7
c001f8b7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f8be:	8a 15 e1 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319e1
c001f8c4:	83 e2 c7             	and    edx,0xffffffc7
c001f8c7:	09 ca                	or     edx,ecx
c001f8c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8cd:	88 15 e1 19 03 c0    	mov    BYTE PTR ds:0xc00319e1,dl
c001f8d3:	89 0c c5 e8 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce618],ecx
c001f8da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8de:	89 14 c5 e4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce61c],edx
c001f8e5:	a1 24 1a 03 c0       	mov    eax,ds:0xc0031a24
c001f8ea:	83 f8 08             	cmp    eax,0x8
c001f8ed:	75 08                	jne    c001f8f7 <Vm::fpuPush(unsigned long long)+0x56>
c001f8ef:	80 0d e0 19 03 c0 40 	or     BYTE PTR ds:0xc00319e0,0x40
c001f8f6:	c3                   	ret    
c001f8f7:	40                   	inc    eax
c001f8f8:	a3 24 1a 03 c0       	mov    ds:0xc0031a24,eax
c001f8fd:	c3                   	ret    

c001f8fe <Vm::fpuPop()>:
c001f8fe:	8a 0d e1 19 03 c0    	mov    cl,BYTE PTR ds:0xc00319e1
c001f904:	53                   	push   ebx
c001f905:	c0 e9 03             	shr    cl,0x3
c001f908:	8a 1d e1 19 03 c0    	mov    bl,BYTE PTR ds:0xc00319e1
c001f90e:	83 e1 07             	and    ecx,0x7
c001f911:	83 e3 c7             	and    ebx,0xffffffc7
c001f914:	8b 04 cd e4 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce61c]
c001f91b:	8b 14 cd e8 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce618]
c001f922:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f929:	83 e1 38             	and    ecx,0x38
c001f92c:	09 d9                	or     ecx,ebx
c001f92e:	88 0d e1 19 03 c0    	mov    BYTE PTR ds:0xc00319e1,cl
c001f934:	8b 0d 24 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a24
c001f93a:	85 c9                	test   ecx,ecx
c001f93c:	74 09                	je     c001f947 <Vm::fpuPop()+0x49>
c001f93e:	49                   	dec    ecx
c001f93f:	89 0d 24 1a 03 c0    	mov    DWORD PTR ds:0xc0031a24,ecx
c001f945:	eb 07                	jmp    c001f94e <Vm::fpuPop()+0x50>
c001f947:	80 0d e0 19 03 c0 40 	or     BYTE PTR ds:0xc00319e0,0x40
c001f94e:	5b                   	pop    ebx
c001f94f:	c3                   	ret    

c001f950 <Vm::x87Handler(regs*)>:
c001f950:	55                   	push   ebp
c001f951:	57                   	push   edi
c001f952:	56                   	push   esi
c001f953:	53                   	push   ebx
c001f954:	83 ec 1c             	sub    esp,0x1c
c001f957:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f95b:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f960:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f963:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f96b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f96f:	50                   	push   eax
c001f970:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f974:	50                   	push   eax
c001f975:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f979:	50                   	push   eax
c001f97a:	53                   	push   ebx
c001f97b:	e8 de a1 ff ff       	call   c0019b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f980:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f983:	83 c4 10             	add    esp,0x10
c001f986:	89 c6                	mov    esi,eax
c001f988:	80 fa d9             	cmp    dl,0xd9
c001f98b:	0f 85 52 01 00 00    	jne    c001fae3 <Vm::x87Handler(regs*)+0x193>
c001f991:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f995:	8d 50 20             	lea    edx,[eax+0x20]
c001f998:	80 fa 0e             	cmp    dl,0xe
c001f99b:	0f 87 86 00 00 00    	ja     c001fa27 <Vm::x87Handler(regs*)+0xd7>
c001f9a1:	0f b6 d2             	movzx  edx,dl
c001f9a4:	ff 24 95 ac c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3854]
c001f9ab:	e8 e7 fc ff ff       	call   c001f697 <Vm::fpuGet0()>
c001f9b0:	eb 05                	jmp    c001f9b7 <Vm::x87Handler(regs*)+0x67>
c001f9b2:	e8 e5 fc ff ff       	call   c001f69c <Vm::fpuGet1()>
c001f9b7:	57                   	push   edi
c001f9b8:	57                   	push   edi
c001f9b9:	52                   	push   edx
c001f9ba:	50                   	push   eax
c001f9bb:	e8 e1 fe ff ff       	call   c001f8a1 <Vm::fpuPush(unsigned long long)>
c001f9c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9c4:	83 c4 10             	add    esp,0x10
c001f9c7:	b0 01                	mov    al,0x1
c001f9c9:	e9 e3 09 00 00       	jmp    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c001f9ce:	83 ec 0c             	sub    esp,0xc
c001f9d1:	6a 00                	push   0x0
c001f9d3:	e8 3b fe ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001f9d8:	59                   	pop    ecx
c001f9d9:	5e                   	pop    esi
c001f9da:	52                   	push   edx
c001f9db:	50                   	push   eax
c001f9dc:	e8 c2 fd ff ff       	call   c001f7a3 <Vm::fpuChs(unsigned long long)>
c001f9e1:	eb 13                	jmp    c001f9f6 <Vm::x87Handler(regs*)+0xa6>
c001f9e3:	83 ec 0c             	sub    esp,0xc
c001f9e6:	6a 00                	push   0x0
c001f9e8:	e8 26 fe ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001f9ed:	5f                   	pop    edi
c001f9ee:	5d                   	pop    ebp
c001f9ef:	52                   	push   edx
c001f9f0:	50                   	push   eax
c001f9f1:	e8 a4 fd ff ff       	call   c001f79a <Vm::fpuAbs(unsigned long long)>
c001f9f6:	83 c4 0c             	add    esp,0xc
c001f9f9:	52                   	push   edx
c001f9fa:	50                   	push   eax
c001f9fb:	6a 00                	push   0x0
c001f9fd:	e8 54 fe ff ff       	call   c001f856 <Vm::fpuSetReg(int, unsigned long long)>
c001fa02:	eb bc                	jmp    c001f9c0 <Vm::x87Handler(regs*)+0x70>
c001fa04:	e8 d3 fc ff ff       	call   c001f6dc <Vm::fpuGetLog210()>
c001fa09:	eb ac                	jmp    c001f9b7 <Vm::x87Handler(regs*)+0x67>
c001fa0b:	e8 9c fc ff ff       	call   c001f6ac <Vm::fpuGetLog2E()>
c001fa10:	eb a5                	jmp    c001f9b7 <Vm::x87Handler(regs*)+0x67>
c001fa12:	e8 8d fc ff ff       	call   c001f6a4 <Vm::fpuGetPi()>
c001fa17:	eb 9e                	jmp    c001f9b7 <Vm::x87Handler(regs*)+0x67>
c001fa19:	e8 d6 fc ff ff       	call   c001f6f4 <Vm::fpuGetLog102()>
c001fa1e:	eb 97                	jmp    c001f9b7 <Vm::x87Handler(regs*)+0x67>
c001fa20:	e8 9f fc ff ff       	call   c001f6c4 <Vm::fpuGetLogE2()>
c001fa25:	eb 90                	jmp    c001f9b7 <Vm::x87Handler(regs*)+0x67>
c001fa27:	8d 50 40             	lea    edx,[eax+0x40]
c001fa2a:	80 fa 07             	cmp    dl,0x7
c001fa2d:	77 15                	ja     c001fa44 <Vm::x87Handler(regs*)+0xf4>
c001fa2f:	83 ec 0c             	sub    esp,0xc
c001fa32:	2d c0 00 00 00       	sub    eax,0xc0
c001fa37:	50                   	push   eax
c001fa38:	e8 d6 fd ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fa3d:	59                   	pop    ecx
c001fa3e:	5e                   	pop    esi
c001fa3f:	e9 75 ff ff ff       	jmp    c001f9b9 <Vm::x87Handler(regs*)+0x69>
c001fa44:	8d 50 38             	lea    edx,[eax+0x38]
c001fa47:	80 fa 07             	cmp    dl,0x7
c001fa4a:	77 3c                	ja     c001fa88 <Vm::x87Handler(regs*)+0x138>
c001fa4c:	83 ec 0c             	sub    esp,0xc
c001fa4f:	2d c8 00 00 00       	sub    eax,0xc8
c001fa54:	50                   	push   eax
c001fa55:	e8 b9 fd ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fa5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa61:	89 c6                	mov    esi,eax
c001fa63:	89 d7                	mov    edi,edx
c001fa65:	e8 a9 fd ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fa6a:	83 c4 0c             	add    esp,0xc
c001fa6d:	52                   	push   edx
c001fa6e:	50                   	push   eax
c001fa6f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa73:	2d c8 00 00 00       	sub    eax,0xc8
c001fa78:	50                   	push   eax
c001fa79:	e8 d8 fd ff ff       	call   c001f856 <Vm::fpuSetReg(int, unsigned long long)>
c001fa7e:	83 c4 0c             	add    esp,0xc
c001fa81:	57                   	push   edi
c001fa82:	56                   	push   esi
c001fa83:	e9 73 ff ff ff       	jmp    c001f9fb <Vm::x87Handler(regs*)+0xab>
c001fa88:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa8c:	84 d2                	test   dl,dl
c001fa8e:	75 0f                	jne    c001fa9f <Vm::x87Handler(regs*)+0x14f>
c001fa90:	83 ec 0c             	sub    esp,0xc
c001fa93:	ff 36                	push   DWORD PTR [esi]
c001fa95:	e8 c8 fa ff ff       	call   c001f562 <Vm::fpu32ToInternal(unsigned int)>
c001fa9a:	e9 bf 00 00 00       	jmp    c001fb5e <Vm::x87Handler(regs*)+0x20e>
c001fa9f:	80 fa 03             	cmp    dl,0x3
c001faa2:	75 13                	jne    c001fab7 <Vm::x87Handler(regs*)+0x167>
c001faa4:	e8 55 fe ff ff       	call   c001f8fe <Vm::fpuPop()>
c001faa9:	55                   	push   ebp
c001faaa:	55                   	push   ebp
c001faab:	52                   	push   edx
c001faac:	50                   	push   eax
c001faad:	e8 4c fa ff ff       	call   c001f4fe <Vm::fpuInternalTo32(unsigned long long)>
c001fab2:	e9 88 00 00 00       	jmp    c001fb3f <Vm::x87Handler(regs*)+0x1ef>
c001fab7:	80 fa 05             	cmp    dl,0x5
c001faba:	75 0e                	jne    c001faca <Vm::x87Handler(regs*)+0x17a>
c001fabc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fabf:	66 a3 e2 19 03 c0    	mov    ds:0xc00319e2,ax
c001fac5:	e9 df 00 00 00       	jmp    c001fba9 <Vm::x87Handler(regs*)+0x259>
c001faca:	31 c0                	xor    eax,eax
c001facc:	80 fa 07             	cmp    dl,0x7
c001facf:	0f 85 dc 08 00 00    	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c001fad5:	66 a1 e2 19 03 c0    	mov    ax,ds:0xc00319e2
c001fadb:	66 89 06             	mov    WORD PTR [esi],ax
c001fade:	e9 c6 00 00 00       	jmp    c001fba9 <Vm::x87Handler(regs*)+0x259>
c001fae3:	80 fa d8             	cmp    dl,0xd8
c001fae6:	0f 84 c9 00 00 00    	je     c001fbb5 <Vm::x87Handler(regs*)+0x265>
c001faec:	80 fa dc             	cmp    dl,0xdc
c001faef:	0f 84 0d 02 00 00    	je     c001fd02 <Vm::x87Handler(regs*)+0x3b2>
c001faf5:	80 fa de             	cmp    dl,0xde
c001faf8:	0f 84 cd 02 00 00    	je     c001fdcb <Vm::x87Handler(regs*)+0x47b>
c001fafe:	80 fa dd             	cmp    dl,0xdd
c001fb01:	0f 84 5f 04 00 00    	je     c001ff66 <Vm::x87Handler(regs*)+0x616>
c001fb07:	80 fa da             	cmp    dl,0xda
c001fb0a:	0f 84 24 05 00 00    	je     c0020034 <Vm::x87Handler(regs*)+0x6e4>
c001fb10:	80 fa df             	cmp    dl,0xdf
c001fb13:	0f 84 68 05 00 00    	je     c0020081 <Vm::x87Handler(regs*)+0x731>
c001fb19:	31 c0                	xor    eax,eax
c001fb1b:	80 fa db             	cmp    dl,0xdb
c001fb1e:	0f 85 8d 08 00 00    	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c001fb24:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb28:	80 fa 03             	cmp    dl,0x3
c001fb2b:	0f 85 70 06 00 00    	jne    c00201a1 <Vm::x87Handler(regs*)+0x851>
c001fb31:	e8 c8 fd ff ff       	call   c001f8fe <Vm::fpuPop()>
c001fb36:	55                   	push   ebp
c001fb37:	55                   	push   ebp
c001fb38:	52                   	push   edx
c001fb39:	50                   	push   eax
c001fb3a:	e8 71 fa ff ff       	call   c001f5b0 <Vm::fpuFloatToLong(unsigned long long)>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	89 06                	mov    DWORD PTR [esi],eax
c001fb44:	eb 63                	jmp    c001fba9 <Vm::x87Handler(regs*)+0x259>
c001fb46:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb4a:	84 d2                	test   dl,dl
c001fb4c:	0f 85 e6 05 00 00    	jne    c0020138 <Vm::x87Handler(regs*)+0x7e8>
c001fb52:	57                   	push   edi
c001fb53:	57                   	push   edi
c001fb54:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb57:	ff 36                	push   DWORD PTR [esi]
c001fb59:	e8 49 fa ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c001fb5e:	5e                   	pop    esi
c001fb5f:	5f                   	pop    edi
c001fb60:	52                   	push   edx
c001fb61:	50                   	push   eax
c001fb62:	e8 3a fd ff ff       	call   c001f8a1 <Vm::fpuPush(unsigned long long)>
c001fb67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb6b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb6e:	e9 51 fe ff ff       	jmp    c001f9c4 <Vm::x87Handler(regs*)+0x74>
c001fb73:	80 fa 03             	cmp    dl,0x3
c001fb76:	0f 85 d7 06 00 00    	jne    c0020253 <Vm::x87Handler(regs*)+0x903>
c001fb7c:	57                   	push   edi
c001fb7d:	57                   	push   edi
c001fb7e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb81:	ff 36                	push   DWORD PTR [esi]
c001fb83:	e8 1f fa ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c001fb88:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb8f:	89 c6                	mov    esi,eax
c001fb91:	89 d7                	mov    edi,edx
c001fb93:	e8 7b fc ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fb98:	57                   	push   edi
c001fb99:	56                   	push   esi
c001fb9a:	52                   	push   edx
c001fb9b:	50                   	push   eax
c001fb9c:	e8 95 fb ff ff       	call   c001f736 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fba1:	83 c4 20             	add    esp,0x20
c001fba4:	e8 55 fd ff ff       	call   c001f8fe <Vm::fpuPop()>
c001fba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbad:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fbb0:	e9 12 fe ff ff       	jmp    c001f9c7 <Vm::x87Handler(regs*)+0x77>
c001fbb5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbb9:	8d 50 40             	lea    edx,[eax+0x40]
c001fbbc:	80 fa 07             	cmp    dl,0x7
c001fbbf:	77 29                	ja     c001fbea <Vm::x87Handler(regs*)+0x29a>
c001fbc1:	83 ec 0c             	sub    esp,0xc
c001fbc4:	2d c0 00 00 00       	sub    eax,0xc0
c001fbc9:	50                   	push   eax
c001fbca:	e8 44 fc ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fbcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbd6:	89 c6                	mov    esi,eax
c001fbd8:	89 d7                	mov    edi,edx
c001fbda:	e8 34 fc ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fbdf:	57                   	push   edi
c001fbe0:	56                   	push   esi
c001fbe1:	52                   	push   edx
c001fbe2:	50                   	push   eax
c001fbe3:	e8 a1 fb ff ff       	call   c001f789 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fbe8:	eb 2f                	jmp    c001fc19 <Vm::x87Handler(regs*)+0x2c9>
c001fbea:	8d 50 38             	lea    edx,[eax+0x38]
c001fbed:	80 fa 07             	cmp    dl,0x7
c001fbf0:	77 2f                	ja     c001fc21 <Vm::x87Handler(regs*)+0x2d1>
c001fbf2:	83 ec 0c             	sub    esp,0xc
c001fbf5:	2d c8 00 00 00       	sub    eax,0xc8
c001fbfa:	50                   	push   eax
c001fbfb:	e8 13 fc ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fc00:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc07:	89 c6                	mov    esi,eax
c001fc09:	89 d7                	mov    edi,edx
c001fc0b:	e8 03 fc ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fc10:	57                   	push   edi
c001fc11:	56                   	push   esi
c001fc12:	52                   	push   edx
c001fc13:	50                   	push   eax
c001fc14:	e8 a9 fb ff ff       	call   c001f7c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc19:	83 c4 1c             	add    esp,0x1c
c001fc1c:	e9 d8 fd ff ff       	jmp    c001f9f9 <Vm::x87Handler(regs*)+0xa9>
c001fc21:	8d 50 30             	lea    edx,[eax+0x30]
c001fc24:	80 fa 07             	cmp    dl,0x7
c001fc27:	77 0d                	ja     c001fc36 <Vm::x87Handler(regs*)+0x2e6>
c001fc29:	83 ec 0c             	sub    esp,0xc
c001fc2c:	2d d0 00 00 00       	sub    eax,0xd0
c001fc31:	e9 99 03 00 00       	jmp    c001ffcf <Vm::x87Handler(regs*)+0x67f>
c001fc36:	8d 50 28             	lea    edx,[eax+0x28]
c001fc39:	80 fa 07             	cmp    dl,0x7
c001fc3c:	77 0d                	ja     c001fc4b <Vm::x87Handler(regs*)+0x2fb>
c001fc3e:	83 ec 0c             	sub    esp,0xc
c001fc41:	2d d8 00 00 00       	sub    eax,0xd8
c001fc46:	e9 c0 03 00 00       	jmp    c002000b <Vm::x87Handler(regs*)+0x6bb>
c001fc4b:	8d 50 20             	lea    edx,[eax+0x20]
c001fc4e:	80 fa 07             	cmp    dl,0x7
c001fc51:	77 1b                	ja     c001fc6e <Vm::x87Handler(regs*)+0x31e>
c001fc53:	83 ec 0c             	sub    esp,0xc
c001fc56:	2d e0 00 00 00       	sub    eax,0xe0
c001fc5b:	50                   	push   eax
c001fc5c:	e8 b2 fb ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fc61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc68:	89 c6                	mov    esi,eax
c001fc6a:	89 d7                	mov    edi,edx
c001fc6c:	eb 22                	jmp    c001fc90 <Vm::x87Handler(regs*)+0x340>
c001fc6e:	8d 50 18             	lea    edx,[eax+0x18]
c001fc71:	80 fa 07             	cmp    dl,0x7
c001fc74:	77 2d                	ja     c001fca3 <Vm::x87Handler(regs*)+0x353>
c001fc76:	83 ec 0c             	sub    esp,0xc
c001fc79:	6a 00                	push   0x0
c001fc7b:	e8 93 fb ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fc80:	89 c6                	mov    esi,eax
c001fc82:	89 d7                	mov    edi,edx
c001fc84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc88:	2d e8 00 00 00       	sub    eax,0xe8
c001fc8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc90:	e8 7e fb ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fc95:	57                   	push   edi
c001fc96:	56                   	push   esi
c001fc97:	52                   	push   edx
c001fc98:	50                   	push   eax
c001fc99:	e8 15 fb ff ff       	call   c001f7b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc9e:	e9 76 ff ff ff       	jmp    c001fc19 <Vm::x87Handler(regs*)+0x2c9>
c001fca3:	8d 50 10             	lea    edx,[eax+0x10]
c001fca6:	80 fa 07             	cmp    dl,0x7
c001fca9:	77 1b                	ja     c001fcc6 <Vm::x87Handler(regs*)+0x376>
c001fcab:	83 ec 0c             	sub    esp,0xc
c001fcae:	2d f0 00 00 00       	sub    eax,0xf0
c001fcb3:	50                   	push   eax
c001fcb4:	e8 5a fb ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fcb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcc0:	89 c6                	mov    esi,eax
c001fcc2:	89 d7                	mov    edi,edx
c001fcc4:	eb 22                	jmp    c001fce8 <Vm::x87Handler(regs*)+0x398>
c001fcc6:	3c f7                	cmp    al,0xf7
c001fcc8:	0f 86 d1 03 00 00    	jbe    c002009f <Vm::x87Handler(regs*)+0x74f>
c001fcce:	83 ec 0c             	sub    esp,0xc
c001fcd1:	6a 00                	push   0x0
c001fcd3:	e8 3b fb ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fcd8:	89 c6                	mov    esi,eax
c001fcda:	89 d7                	mov    edi,edx
c001fcdc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fce0:	2d f8 00 00 00       	sub    eax,0xf8
c001fce5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fce8:	e8 26 fb ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fced:	57                   	push   edi
c001fcee:	56                   	push   esi
c001fcef:	52                   	push   edx
c001fcf0:	50                   	push   eax
c001fcf1:	e8 eb fa ff ff       	call   c001f7e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcf6:	83 c4 1c             	add    esp,0x1c
c001fcf9:	52                   	push   edx
c001fcfa:	50                   	push   eax
c001fcfb:	6a 00                	push   0x0
c001fcfd:	e9 51 02 00 00       	jmp    c001ff53 <Vm::x87Handler(regs*)+0x603>
c001fd02:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd06:	8d 50 40             	lea    edx,[eax+0x40]
c001fd09:	80 fa 07             	cmp    dl,0x7
c001fd0c:	77 37                	ja     c001fd45 <Vm::x87Handler(regs*)+0x3f5>
c001fd0e:	83 ec 0c             	sub    esp,0xc
c001fd11:	2d c0 00 00 00       	sub    eax,0xc0
c001fd16:	50                   	push   eax
c001fd17:	e8 f7 fa ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fd1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd23:	89 c6                	mov    esi,eax
c001fd25:	89 d7                	mov    edi,edx
c001fd27:	e8 e7 fa ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fd2c:	57                   	push   edi
c001fd2d:	56                   	push   esi
c001fd2e:	52                   	push   edx
c001fd2f:	50                   	push   eax
c001fd30:	e8 54 fa ff ff       	call   c001f789 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd35:	83 c4 1c             	add    esp,0x1c
c001fd38:	52                   	push   edx
c001fd39:	50                   	push   eax
c001fd3a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd3e:	2d c0 00 00 00       	sub    eax,0xc0
c001fd43:	eb 3d                	jmp    c001fd82 <Vm::x87Handler(regs*)+0x432>
c001fd45:	8d 50 38             	lea    edx,[eax+0x38]
c001fd48:	80 fa 07             	cmp    dl,0x7
c001fd4b:	77 3b                	ja     c001fd88 <Vm::x87Handler(regs*)+0x438>
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	2d c8 00 00 00       	sub    eax,0xc8
c001fd55:	50                   	push   eax
c001fd56:	e8 b8 fa ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fd5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd62:	89 c6                	mov    esi,eax
c001fd64:	89 d7                	mov    edi,edx
c001fd66:	e8 a8 fa ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fd6b:	57                   	push   edi
c001fd6c:	56                   	push   esi
c001fd6d:	52                   	push   edx
c001fd6e:	50                   	push   eax
c001fd6f:	e8 4e fa ff ff       	call   c001f7c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd74:	83 c4 1c             	add    esp,0x1c
c001fd77:	52                   	push   edx
c001fd78:	50                   	push   eax
c001fd79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd7d:	2d c8 00 00 00       	sub    eax,0xc8
c001fd82:	50                   	push   eax
c001fd83:	e9 75 fc ff ff       	jmp    c001f9fd <Vm::x87Handler(regs*)+0xad>
c001fd88:	83 c0 18             	add    eax,0x18
c001fd8b:	3c 07                	cmp    al,0x7
c001fd8d:	0f 87 3b 04 00 00    	ja     c00201ce <Vm::x87Handler(regs*)+0x87e>
c001fd93:	83 ec 0c             	sub    esp,0xc
c001fd96:	6a 00                	push   0x0
c001fd98:	e8 76 fa ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fd9d:	89 c6                	mov    esi,eax
c001fd9f:	89 d7                	mov    edi,edx
c001fda1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda5:	2d e8 00 00 00       	sub    eax,0xe8
c001fdaa:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdad:	e8 61 fa ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fdb2:	57                   	push   edi
c001fdb3:	56                   	push   esi
c001fdb4:	52                   	push   edx
c001fdb5:	50                   	push   eax
c001fdb6:	e8 f8 f9 ff ff       	call   c001f7b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdbb:	83 c4 1c             	add    esp,0x1c
c001fdbe:	52                   	push   edx
c001fdbf:	50                   	push   eax
c001fdc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdc4:	2d e8 00 00 00       	sub    eax,0xe8
c001fdc9:	eb b7                	jmp    c001fd82 <Vm::x87Handler(regs*)+0x432>
c001fdcb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdcf:	8d 50 40             	lea    edx,[eax+0x40]
c001fdd2:	80 fa 07             	cmp    dl,0x7
c001fdd5:	77 3a                	ja     c001fe11 <Vm::x87Handler(regs*)+0x4c1>
c001fdd7:	83 ec 0c             	sub    esp,0xc
c001fdda:	2d c0 00 00 00       	sub    eax,0xc0
c001fddf:	50                   	push   eax
c001fde0:	e8 2e fa ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fde5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdec:	89 c6                	mov    esi,eax
c001fdee:	89 d7                	mov    edi,edx
c001fdf0:	e8 1e fa ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fdf5:	57                   	push   edi
c001fdf6:	56                   	push   esi
c001fdf7:	52                   	push   edx
c001fdf8:	50                   	push   eax
c001fdf9:	e8 8b f9 ff ff       	call   c001f789 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdfe:	83 c4 1c             	add    esp,0x1c
c001fe01:	52                   	push   edx
c001fe02:	50                   	push   eax
c001fe03:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe07:	2d c0 00 00 00       	sub    eax,0xc0
c001fe0c:	e9 9e 01 00 00       	jmp    c001ffaf <Vm::x87Handler(regs*)+0x65f>
c001fe11:	8d 50 20             	lea    edx,[eax+0x20]
c001fe14:	80 fa 07             	cmp    dl,0x7
c001fe17:	77 3a                	ja     c001fe53 <Vm::x87Handler(regs*)+0x503>
c001fe19:	83 ec 0c             	sub    esp,0xc
c001fe1c:	2d e0 00 00 00       	sub    eax,0xe0
c001fe21:	50                   	push   eax
c001fe22:	e8 ec f9 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fe27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe2e:	89 c6                	mov    esi,eax
c001fe30:	89 d7                	mov    edi,edx
c001fe32:	e8 dc f9 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fe37:	57                   	push   edi
c001fe38:	56                   	push   esi
c001fe39:	52                   	push   edx
c001fe3a:	50                   	push   eax
c001fe3b:	e8 73 f9 ff ff       	call   c001f7b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe40:	83 c4 1c             	add    esp,0x1c
c001fe43:	52                   	push   edx
c001fe44:	50                   	push   eax
c001fe45:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe49:	2d e0 00 00 00       	sub    eax,0xe0
c001fe4e:	e9 5c 01 00 00       	jmp    c001ffaf <Vm::x87Handler(regs*)+0x65f>
c001fe53:	8d 50 18             	lea    edx,[eax+0x18]
c001fe56:	80 fa 07             	cmp    dl,0x7
c001fe59:	77 3b                	ja     c001fe96 <Vm::x87Handler(regs*)+0x546>
c001fe5b:	83 ec 0c             	sub    esp,0xc
c001fe5e:	6a 00                	push   0x0
c001fe60:	e8 ae f9 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fe65:	89 c6                	mov    esi,eax
c001fe67:	89 d7                	mov    edi,edx
c001fe69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6d:	2d e8 00 00 00       	sub    eax,0xe8
c001fe72:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe75:	e8 99 f9 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fe7a:	57                   	push   edi
c001fe7b:	56                   	push   esi
c001fe7c:	52                   	push   edx
c001fe7d:	50                   	push   eax
c001fe7e:	e8 30 f9 ff ff       	call   c001f7b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe83:	83 c4 1c             	add    esp,0x1c
c001fe86:	52                   	push   edx
c001fe87:	50                   	push   eax
c001fe88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe8c:	2d e8 00 00 00       	sub    eax,0xe8
c001fe91:	e9 19 01 00 00       	jmp    c001ffaf <Vm::x87Handler(regs*)+0x65f>
c001fe96:	8d 50 38             	lea    edx,[eax+0x38]
c001fe99:	80 fa 07             	cmp    dl,0x7
c001fe9c:	77 37                	ja     c001fed5 <Vm::x87Handler(regs*)+0x585>
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	2d c8 00 00 00       	sub    eax,0xc8
c001fea6:	50                   	push   eax
c001fea7:	e8 67 f9 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001feac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feb3:	89 c6                	mov    esi,eax
c001feb5:	89 d7                	mov    edi,edx
c001feb7:	e8 57 f9 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001febc:	57                   	push   edi
c001febd:	56                   	push   esi
c001febe:	52                   	push   edx
c001febf:	50                   	push   eax
c001fec0:	e8 fd f8 ff ff       	call   c001f7c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fec5:	83 c4 1c             	add    esp,0x1c
c001fec8:	52                   	push   edx
c001fec9:	50                   	push   eax
c001feca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fece:	2d c8 00 00 00       	sub    eax,0xc8
c001fed3:	eb 7d                	jmp    c001ff52 <Vm::x87Handler(regs*)+0x602>
c001fed5:	3c f7                	cmp    al,0xf7
c001fed7:	76 38                	jbe    c001ff11 <Vm::x87Handler(regs*)+0x5c1>
c001fed9:	83 ec 0c             	sub    esp,0xc
c001fedc:	6a 00                	push   0x0
c001fede:	e8 30 f9 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fee3:	89 c6                	mov    esi,eax
c001fee5:	89 d7                	mov    edi,edx
c001fee7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feeb:	2d f8 00 00 00       	sub    eax,0xf8
c001fef0:	89 04 24             	mov    DWORD PTR [esp],eax
c001fef3:	e8 1b f9 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001fef8:	57                   	push   edi
c001fef9:	56                   	push   esi
c001fefa:	52                   	push   edx
c001fefb:	50                   	push   eax
c001fefc:	e8 e0 f8 ff ff       	call   c001f7e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff01:	83 c4 1c             	add    esp,0x1c
c001ff04:	52                   	push   edx
c001ff05:	50                   	push   eax
c001ff06:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0a:	2d f8 00 00 00       	sub    eax,0xf8
c001ff0f:	eb 41                	jmp    c001ff52 <Vm::x87Handler(regs*)+0x602>
c001ff11:	8d 50 10             	lea    edx,[eax+0x10]
c001ff14:	80 fa 07             	cmp    dl,0x7
c001ff17:	0f 87 5a 01 00 00    	ja     c0020077 <Vm::x87Handler(regs*)+0x727>
c001ff1d:	83 ec 0c             	sub    esp,0xc
c001ff20:	2d f0 00 00 00       	sub    eax,0xf0
c001ff25:	50                   	push   eax
c001ff26:	e8 e8 f8 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001ff2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff32:	89 c6                	mov    esi,eax
c001ff34:	89 d7                	mov    edi,edx
c001ff36:	e8 d8 f8 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001ff3b:	57                   	push   edi
c001ff3c:	56                   	push   esi
c001ff3d:	52                   	push   edx
c001ff3e:	50                   	push   eax
c001ff3f:	e8 9d f8 ff ff       	call   c001f7e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff44:	83 c4 1c             	add    esp,0x1c
c001ff47:	52                   	push   edx
c001ff48:	50                   	push   eax
c001ff49:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff4d:	2d f0 00 00 00       	sub    eax,0xf0
c001ff52:	50                   	push   eax
c001ff53:	e8 fe f8 ff ff       	call   c001f856 <Vm::fpuSetReg(int, unsigned long long)>
c001ff58:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff5c:	e8 9d f9 ff ff       	call   c001f8fe <Vm::fpuPop()>
c001ff61:	e9 5e fa ff ff       	jmp    c001f9c4 <Vm::x87Handler(regs*)+0x74>
c001ff66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6a:	8d 50 30             	lea    edx,[eax+0x30]
c001ff6d:	80 fa 07             	cmp    dl,0x7
c001ff70:	77 1d                	ja     c001ff8f <Vm::x87Handler(regs*)+0x63f>
c001ff72:	83 ec 0c             	sub    esp,0xc
c001ff75:	6a 00                	push   0x0
c001ff77:	e8 97 f8 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001ff7c:	83 c4 0c             	add    esp,0xc
c001ff7f:	52                   	push   edx
c001ff80:	50                   	push   eax
c001ff81:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff85:	2d d0 00 00 00       	sub    eax,0xd0
c001ff8a:	e9 f3 fd ff ff       	jmp    c001fd82 <Vm::x87Handler(regs*)+0x432>
c001ff8f:	8d 50 28             	lea    edx,[eax+0x28]
c001ff92:	80 fa 07             	cmp    dl,0x7
c001ff95:	77 28                	ja     c001ffbf <Vm::x87Handler(regs*)+0x66f>
c001ff97:	83 ec 0c             	sub    esp,0xc
c001ff9a:	6a 00                	push   0x0
c001ff9c:	e8 72 f8 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001ffa1:	83 c4 0c             	add    esp,0xc
c001ffa4:	52                   	push   edx
c001ffa5:	50                   	push   eax
c001ffa6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffaa:	2d d8 00 00 00       	sub    eax,0xd8
c001ffaf:	50                   	push   eax
c001ffb0:	e8 a1 f8 ff ff       	call   c001f856 <Vm::fpuSetReg(int, unsigned long long)>
c001ffb5:	e8 44 f9 ff ff       	call   c001f8fe <Vm::fpuPop()>
c001ffba:	e9 01 fa ff ff       	jmp    c001f9c0 <Vm::x87Handler(regs*)+0x70>
c001ffbf:	8d 50 20             	lea    edx,[eax+0x20]
c001ffc2:	80 fa 07             	cmp    dl,0x7
c001ffc5:	77 30                	ja     c001fff7 <Vm::x87Handler(regs*)+0x6a7>
c001ffc7:	83 ec 0c             	sub    esp,0xc
c001ffca:	2d e0 00 00 00       	sub    eax,0xe0
c001ffcf:	50                   	push   eax
c001ffd0:	e8 3e f8 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001ffd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffdc:	89 c6                	mov    esi,eax
c001ffde:	89 d7                	mov    edi,edx
c001ffe0:	e8 2e f8 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c001ffe5:	57                   	push   edi
c001ffe6:	56                   	push   esi
c001ffe7:	52                   	push   edx
c001ffe8:	50                   	push   eax
c001ffe9:	e8 48 f7 ff ff       	call   c001f736 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fff2:	e9 54 02 00 00       	jmp    c002024b <Vm::x87Handler(regs*)+0x8fb>
c001fff7:	8d 50 18             	lea    edx,[eax+0x18]
c001fffa:	80 fa 07             	cmp    dl,0x7
c001fffd:	0f 87 43 fb ff ff    	ja     c001fb46 <Vm::x87Handler(regs*)+0x1f6>
c0020003:	83 ec 0c             	sub    esp,0xc
c0020006:	2d e8 00 00 00       	sub    eax,0xe8
c002000b:	50                   	push   eax
c002000c:	e8 02 f8 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c0020011:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020018:	89 c6                	mov    esi,eax
c002001a:	89 d7                	mov    edi,edx
c002001c:	e8 f2 f7 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c0020021:	57                   	push   edi
c0020022:	56                   	push   esi
c0020023:	52                   	push   edx
c0020024:	50                   	push   eax
c0020025:	e8 0c f7 ff ff       	call   c001f736 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002002a:	83 c4 20             	add    esp,0x20
c002002d:	e8 cc f8 ff ff       	call   c001f8fe <Vm::fpuPop()>
c0020032:	eb 62                	jmp    c0020096 <Vm::x87Handler(regs*)+0x746>
c0020034:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020038:	0f 85 0f 01 00 00    	jne    c002014d <Vm::x87Handler(regs*)+0x7fd>
c002003e:	83 ec 0c             	sub    esp,0xc
c0020041:	6a 01                	push   0x1
c0020043:	e8 cb f7 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c0020048:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002004f:	89 c6                	mov    esi,eax
c0020051:	89 d7                	mov    edi,edx
c0020053:	e8 bb f7 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c0020058:	57                   	push   edi
c0020059:	56                   	push   esi
c002005a:	52                   	push   edx
c002005b:	50                   	push   eax
c002005c:	e8 d5 f6 ff ff       	call   c001f736 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020061:	83 c4 20             	add    esp,0x20
c0020064:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020068:	e8 91 f8 ff ff       	call   c001f8fe <Vm::fpuPop()>
c002006d:	e8 8c f8 ff ff       	call   c001f8fe <Vm::fpuPop()>
c0020072:	e9 50 f9 ff ff       	jmp    c001f9c7 <Vm::x87Handler(regs*)+0x77>
c0020077:	3c d9                	cmp    al,0xd9
c0020079:	0f 85 b5 02 00 00    	jne    c0020334 <Vm::x87Handler(regs*)+0x9e4>
c002007f:	eb bd                	jmp    c002003e <Vm::x87Handler(regs*)+0x6ee>
c0020081:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020085:	0f 85 ea 02 00 00    	jne    c0020375 <Vm::x87Handler(regs*)+0xa25>
c002008b:	0f b7 05 e0 19 03 c0 	movzx  eax,WORD PTR ds:0xc00319e0
c0020092:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020096:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002009a:	e9 28 f9 ff ff       	jmp    c001f9c7 <Vm::x87Handler(regs*)+0x77>
c002009f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200a3:	84 d2                	test   dl,dl
c00200a5:	75 0f                	jne    c00200b6 <Vm::x87Handler(regs*)+0x766>
c00200a7:	83 ec 0c             	sub    esp,0xc
c00200aa:	ff 36                	push   DWORD PTR [esi]
c00200ac:	e8 b1 f4 ff ff       	call   c001f562 <Vm::fpu32ToInternal(unsigned int)>
c00200b1:	e9 2c 01 00 00       	jmp    c00201e2 <Vm::x87Handler(regs*)+0x892>
c00200b6:	80 fa 01             	cmp    dl,0x1
c00200b9:	75 0f                	jne    c00200ca <Vm::x87Handler(regs*)+0x77a>
c00200bb:	83 ec 0c             	sub    esp,0xc
c00200be:	ff 36                	push   DWORD PTR [esi]
c00200c0:	e8 9d f4 ff ff       	call   c001f562 <Vm::fpu32ToInternal(unsigned int)>
c00200c5:	e9 81 02 00 00       	jmp    c002034b <Vm::x87Handler(regs*)+0x9fb>
c00200ca:	80 fa 04             	cmp    dl,0x4
c00200cd:	75 0f                	jne    c00200de <Vm::x87Handler(regs*)+0x78e>
c00200cf:	83 ec 0c             	sub    esp,0xc
c00200d2:	ff 36                	push   DWORD PTR [esi]
c00200d4:	e8 89 f4 ff ff       	call   c001f562 <Vm::fpu32ToInternal(unsigned int)>
c00200d9:	e9 86 01 00 00       	jmp    c0020264 <Vm::x87Handler(regs*)+0x914>
c00200de:	80 fa 05             	cmp    dl,0x5
c00200e1:	75 1b                	jne    c00200fe <Vm::x87Handler(regs*)+0x7ae>
c00200e3:	83 ec 0c             	sub    esp,0xc
c00200e6:	6a 00                	push   0x0
c00200e8:	e8 26 f7 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c00200ed:	89 c7                	mov    edi,eax
c00200ef:	89 d5                	mov    ebp,edx
c00200f1:	58                   	pop    eax
c00200f2:	ff 36                	push   DWORD PTR [esi]
c00200f4:	e8 69 f4 ff ff       	call   c001f562 <Vm::fpu32ToInternal(unsigned int)>
c00200f9:	e9 a3 01 00 00       	jmp    c00202a1 <Vm::x87Handler(regs*)+0x951>
c00200fe:	80 fa 06             	cmp    dl,0x6
c0020101:	75 0f                	jne    c0020112 <Vm::x87Handler(regs*)+0x7c2>
c0020103:	83 ec 0c             	sub    esp,0xc
c0020106:	ff 36                	push   DWORD PTR [esi]
c0020108:	e8 55 f4 ff ff       	call   c001f562 <Vm::fpu32ToInternal(unsigned int)>
c002010d:	e9 ae 01 00 00       	jmp    c00202c0 <Vm::x87Handler(regs*)+0x970>
c0020112:	31 c0                	xor    eax,eax
c0020114:	80 fa 07             	cmp    dl,0x7
c0020117:	0f 85 94 02 00 00    	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c002011d:	83 ec 0c             	sub    esp,0xc
c0020120:	6a 00                	push   0x0
c0020122:	e8 ec f6 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c0020127:	89 c7                	mov    edi,eax
c0020129:	89 d5                	mov    ebp,edx
c002012b:	58                   	pop    eax
c002012c:	ff 36                	push   DWORD PTR [esi]
c002012e:	e8 2f f4 ff ff       	call   c001f562 <Vm::fpu32ToInternal(unsigned int)>
c0020133:	e9 cb 01 00 00       	jmp    c0020303 <Vm::x87Handler(regs*)+0x9b3>
c0020138:	80 fa 03             	cmp    dl,0x3
c002013b:	0f 85 d3 01 00 00    	jne    c0020314 <Vm::x87Handler(regs*)+0x9c4>
c0020141:	e8 b8 f7 ff ff       	call   c001f8fe <Vm::fpuPop()>
c0020146:	51                   	push   ecx
c0020147:	51                   	push   ecx
c0020148:	e9 de 01 00 00       	jmp    c002032b <Vm::x87Handler(regs*)+0x9db>
c002014d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020151:	80 fa 01             	cmp    dl,0x1
c0020154:	75 09                	jne    c002015f <Vm::x87Handler(regs*)+0x80f>
c0020156:	57                   	push   edi
c0020157:	57                   	push   edi
c0020158:	8b 06                	mov    eax,DWORD PTR [esi]
c002015a:	e9 e3 01 00 00       	jmp    c0020342 <Vm::x87Handler(regs*)+0x9f2>
c002015f:	80 fa 04             	cmp    dl,0x4
c0020162:	75 12                	jne    c0020176 <Vm::x87Handler(regs*)+0x826>
c0020164:	31 d2                	xor    edx,edx
c0020166:	51                   	push   ecx
c0020167:	51                   	push   ecx
c0020168:	8b 06                	mov    eax,DWORD PTR [esi]
c002016a:	52                   	push   edx
c002016b:	50                   	push   eax
c002016c:	e8 d0 f4 ff ff       	call   c001f641 <Vm::fpuLongToFloat(long long)>
c0020171:	e9 ee 00 00 00       	jmp    c0020264 <Vm::x87Handler(regs*)+0x914>
c0020176:	31 c0                	xor    eax,eax
c0020178:	80 fa 07             	cmp    dl,0x7
c002017b:	0f 85 30 02 00 00    	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c0020181:	83 ec 0c             	sub    esp,0xc
c0020184:	6a 00                	push   0x0
c0020186:	e8 88 f6 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c002018b:	89 c7                	mov    edi,eax
c002018d:	89 d5                	mov    ebp,edx
c002018f:	58                   	pop    eax
c0020190:	8b 06                	mov    eax,DWORD PTR [esi]
c0020192:	5a                   	pop    edx
c0020193:	31 d2                	xor    edx,edx
c0020195:	52                   	push   edx
c0020196:	50                   	push   eax
c0020197:	e8 a5 f4 ff ff       	call   c001f641 <Vm::fpuLongToFloat(long long)>
c002019c:	e9 62 01 00 00       	jmp    c0020303 <Vm::x87Handler(regs*)+0x9b3>
c00201a1:	84 d2                	test   dl,dl
c00201a3:	75 0d                	jne    c00201b2 <Vm::x87Handler(regs*)+0x862>
c00201a5:	31 d2                	xor    edx,edx
c00201a7:	55                   	push   ebp
c00201a8:	55                   	push   ebp
c00201a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00201ab:	52                   	push   edx
c00201ac:	50                   	push   eax
c00201ad:	e9 d3 01 00 00       	jmp    c0020385 <Vm::x87Handler(regs*)+0xa35>
c00201b2:	31 c0                	xor    eax,eax
c00201b4:	80 fa 02             	cmp    dl,0x2
c00201b7:	0f 85 f4 01 00 00    	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c00201bd:	83 ec 0c             	sub    esp,0xc
c00201c0:	6a 00                	push   0x0
c00201c2:	e8 4c f6 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c00201c7:	59                   	pop    ecx
c00201c8:	5f                   	pop    edi
c00201c9:	e9 6a f9 ff ff       	jmp    c001fb38 <Vm::x87Handler(regs*)+0x1e8>
c00201ce:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201d2:	84 d2                	test   dl,dl
c00201d4:	75 2a                	jne    c0020200 <Vm::x87Handler(regs*)+0x8b0>
c00201d6:	50                   	push   eax
c00201d7:	50                   	push   eax
c00201d8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201db:	ff 36                	push   DWORD PTR [esi]
c00201dd:	e8 c5 f3 ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c00201e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e9:	89 c6                	mov    esi,eax
c00201eb:	89 d7                	mov    edi,edx
c00201ed:	e8 21 f6 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c00201f2:	57                   	push   edi
c00201f3:	56                   	push   esi
c00201f4:	52                   	push   edx
c00201f5:	50                   	push   eax
c00201f6:	e8 8e f5 ff ff       	call   c001f789 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201fb:	e9 64 01 00 00       	jmp    c0020364 <Vm::x87Handler(regs*)+0xa14>
c0020200:	80 fa 01             	cmp    dl,0x1
c0020203:	75 11                	jne    c0020216 <Vm::x87Handler(regs*)+0x8c6>
c0020205:	50                   	push   eax
c0020206:	50                   	push   eax
c0020207:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002020a:	ff 36                	push   DWORD PTR [esi]
c002020c:	e8 96 f3 ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c0020211:	e9 35 01 00 00       	jmp    c002034b <Vm::x87Handler(regs*)+0x9fb>
c0020216:	80 fa 02             	cmp    dl,0x2
c0020219:	0f 85 54 f9 ff ff    	jne    c001fb73 <Vm::x87Handler(regs*)+0x223>
c002021f:	55                   	push   ebp
c0020220:	55                   	push   ebp
c0020221:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020224:	ff 36                	push   DWORD PTR [esi]
c0020226:	e8 7c f3 ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c002022b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020232:	89 c6                	mov    esi,eax
c0020234:	89 d7                	mov    edi,edx
c0020236:	e8 d8 f5 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c002023b:	57                   	push   edi
c002023c:	56                   	push   esi
c002023d:	52                   	push   edx
c002023e:	50                   	push   eax
c002023f:	e8 f2 f4 ff ff       	call   c001f736 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020244:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020248:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002024b:	83 c4 20             	add    esp,0x20
c002024e:	e9 74 f7 ff ff       	jmp    c001f9c7 <Vm::x87Handler(regs*)+0x77>
c0020253:	80 fa 04             	cmp    dl,0x4
c0020256:	75 2a                	jne    c0020282 <Vm::x87Handler(regs*)+0x932>
c0020258:	51                   	push   ecx
c0020259:	51                   	push   ecx
c002025a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002025d:	ff 36                	push   DWORD PTR [esi]
c002025f:	e8 43 f3 ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c0020264:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002026b:	89 c6                	mov    esi,eax
c002026d:	89 d7                	mov    edi,edx
c002026f:	e8 9f f5 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c0020274:	57                   	push   edi
c0020275:	56                   	push   esi
c0020276:	52                   	push   edx
c0020277:	50                   	push   eax
c0020278:	e8 36 f5 ff ff       	call   c001f7b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002027d:	e9 e2 00 00 00       	jmp    c0020364 <Vm::x87Handler(regs*)+0xa14>
c0020282:	80 fa 05             	cmp    dl,0x5
c0020285:	75 28                	jne    c00202af <Vm::x87Handler(regs*)+0x95f>
c0020287:	83 ec 0c             	sub    esp,0xc
c002028a:	6a 00                	push   0x0
c002028c:	e8 82 f5 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c0020291:	89 c7                	mov    edi,eax
c0020293:	89 d5                	mov    ebp,edx
c0020295:	58                   	pop    eax
c0020296:	5a                   	pop    edx
c0020297:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002029a:	ff 36                	push   DWORD PTR [esi]
c002029c:	e8 06 f3 ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c00202a1:	83 c4 10             	add    esp,0x10
c00202a4:	55                   	push   ebp
c00202a5:	57                   	push   edi
c00202a6:	52                   	push   edx
c00202a7:	50                   	push   eax
c00202a8:	e8 06 f5 ff ff       	call   c001f7b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00202ad:	eb 60                	jmp    c002030f <Vm::x87Handler(regs*)+0x9bf>
c00202af:	80 fa 06             	cmp    dl,0x6
c00202b2:	75 2a                	jne    c00202de <Vm::x87Handler(regs*)+0x98e>
c00202b4:	51                   	push   ecx
c00202b5:	51                   	push   ecx
c00202b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202b9:	ff 36                	push   DWORD PTR [esi]
c00202bb:	e8 e7 f2 ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c00202c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202c7:	89 c6                	mov    esi,eax
c00202c9:	89 d7                	mov    edi,edx
c00202cb:	e8 43 f5 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c00202d0:	57                   	push   edi
c00202d1:	56                   	push   esi
c00202d2:	52                   	push   edx
c00202d3:	50                   	push   eax
c00202d4:	e8 08 f5 ff ff       	call   c001f7e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202d9:	e9 86 00 00 00       	jmp    c0020364 <Vm::x87Handler(regs*)+0xa14>
c00202de:	31 c0                	xor    eax,eax
c00202e0:	80 fa 07             	cmp    dl,0x7
c00202e3:	0f 85 c8 00 00 00    	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c00202e9:	83 ec 0c             	sub    esp,0xc
c00202ec:	6a 00                	push   0x0
c00202ee:	e8 20 f5 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c00202f3:	89 c7                	mov    edi,eax
c00202f5:	89 d5                	mov    ebp,edx
c00202f7:	58                   	pop    eax
c00202f8:	5a                   	pop    edx
c00202f9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202fc:	ff 36                	push   DWORD PTR [esi]
c00202fe:	e8 a4 f2 ff ff       	call   c001f5a7 <Vm::fpu64ToInternal(unsigned long long)>
c0020303:	83 c4 10             	add    esp,0x10
c0020306:	55                   	push   ebp
c0020307:	57                   	push   edi
c0020308:	52                   	push   edx
c0020309:	50                   	push   eax
c002030a:	e8 d2 f4 ff ff       	call   c001f7e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002030f:	83 c4 0c             	add    esp,0xc
c0020312:	eb 53                	jmp    c0020367 <Vm::x87Handler(regs*)+0xa17>
c0020314:	31 c0                	xor    eax,eax
c0020316:	80 fa 02             	cmp    dl,0x2
c0020319:	0f 85 92 00 00 00    	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	6a 00                	push   0x0
c0020324:	e8 ea f4 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c0020329:	59                   	pop    ecx
c002032a:	5f                   	pop    edi
c002032b:	52                   	push   edx
c002032c:	50                   	push   eax
c002032d:	e8 27 f2 ff ff       	call   c001f559 <Vm::fpuInternalTo64(unsigned long long)>
c0020332:	eb 70                	jmp    c00203a4 <Vm::x87Handler(regs*)+0xa54>
c0020334:	31 c0                	xor    eax,eax
c0020336:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002033b:	75 74                	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c002033d:	50                   	push   eax
c002033e:	50                   	push   eax
c002033f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020342:	31 d2                	xor    edx,edx
c0020344:	52                   	push   edx
c0020345:	50                   	push   eax
c0020346:	e8 f6 f2 ff ff       	call   c001f641 <Vm::fpuLongToFloat(long long)>
c002034b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020352:	89 c6                	mov    esi,eax
c0020354:	89 d7                	mov    edi,edx
c0020356:	e8 b8 f4 ff ff       	call   c001f813 <Vm::fpuGetReg(int)>
c002035b:	57                   	push   edi
c002035c:	56                   	push   esi
c002035d:	52                   	push   edx
c002035e:	50                   	push   eax
c002035f:	e8 5e f4 ff ff       	call   c001f7c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020364:	83 c4 1c             	add    esp,0x1c
c0020367:	52                   	push   edx
c0020368:	50                   	push   eax
c0020369:	6a 00                	push   0x0
c002036b:	e8 e6 f4 ff ff       	call   c001f856 <Vm::fpuSetReg(int, unsigned long long)>
c0020370:	e9 f2 f7 ff ff       	jmp    c001fb67 <Vm::x87Handler(regs*)+0x217>
c0020375:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020379:	80 fa 05             	cmp    dl,0x5
c002037c:	75 11                	jne    c002038f <Vm::x87Handler(regs*)+0xa3f>
c002037e:	55                   	push   ebp
c002037f:	55                   	push   ebp
c0020380:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020383:	ff 36                	push   DWORD PTR [esi]
c0020385:	e8 81 f2 ff ff       	call   c001f60b <Vm::fpuULongToFloat(unsigned long long)>
c002038a:	e9 cf f7 ff ff       	jmp    c001fb5e <Vm::x87Handler(regs*)+0x20e>
c002038f:	31 c0                	xor    eax,eax
c0020391:	80 fa 07             	cmp    dl,0x7
c0020394:	75 1b                	jne    c00203b1 <Vm::x87Handler(regs*)+0xa61>
c0020396:	e8 63 f5 ff ff       	call   c001f8fe <Vm::fpuPop()>
c002039b:	51                   	push   ecx
c002039c:	51                   	push   ecx
c002039d:	52                   	push   edx
c002039e:	50                   	push   eax
c002039f:	e8 0c f2 ff ff       	call   c001f5b0 <Vm::fpuFloatToLong(unsigned long long)>
c00203a4:	83 c4 10             	add    esp,0x10
c00203a7:	89 06                	mov    DWORD PTR [esi],eax
c00203a9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00203ac:	e9 f8 f7 ff ff       	jmp    c001fba9 <Vm::x87Handler(regs*)+0x259>
c00203b1:	83 c4 1c             	add    esp,0x1c
c00203b4:	5b                   	pop    ebx
c00203b5:	5e                   	pop    esi
c00203b6:	5f                   	pop    edi
c00203b7:	5d                   	pop    ebp
c00203b8:	c3                   	ret    

c00203b9 <__static_initialization_and_destruction_0(int, int)>:
c00203b9:	83 ec 0c             	sub    esp,0xc
c00203bc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00203c1:	75 1a                	jne    c00203dd <__static_initialization_and_destruction_0(int, int)+0x24>
c00203c3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00203cb:	75 10                	jne    c00203dd <__static_initialization_and_destruction_0(int, int)+0x24>
c00203cd:	83 ec 0c             	sub    esp,0xc
c00203d0:	68 e0 19 03 c0       	push   0xc00319e0
c00203d5:	e8 16 88 00 00       	call   c0028bf0 <Vm::_FPUState::_FPUState()>
c00203da:	83 c4 10             	add    esp,0x10
c00203dd:	90                   	nop
c00203de:	83 c4 0c             	add    esp,0xc
c00203e1:	c3                   	ret    

c00203e2 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00203e2:	83 ec 0c             	sub    esp,0xc
c00203e5:	83 ec 08             	sub    esp,0x8
c00203e8:	68 ff ff 00 00       	push   0xffff
c00203ed:	6a 01                	push   0x1
c00203ef:	e8 c5 ff ff ff       	call   c00203b9 <__static_initialization_and_destruction_0(int, int)>
c00203f4:	83 c4 10             	add    esp,0x10
c00203f7:	83 c4 0c             	add    esp,0xc
c00203fa:	c3                   	ret    
c00203fb:	90                   	nop

c00203fc <FAT::getName()>:
c00203fc:	b8 e8 c7 02 c0       	mov    eax,0xc002c7e8
c0020401:	c3                   	ret    

c0020402 <FAT::tell(void*, unsigned long long*)>:
c0020402:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020407:	75 06                	jne    c002040f <FAT::tell(void*, unsigned long long*)+0xd>
c0020409:	b8 04 00 00 00       	mov    eax,0x4
c002040e:	c3                   	ret    
c002040f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020414:	75 06                	jne    c002041c <FAT::tell(void*, unsigned long long*)+0x1a>
c0020416:	b8 04 00 00 00       	mov    eax,0x4
c002041b:	c3                   	ret    
c002041c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020420:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020423:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002042a:	89 01                	mov    DWORD PTR [ecx],eax
c002042c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002042f:	b8 00 00 00 00       	mov    eax,0x0
c0020434:	c3                   	ret    
c0020435:	90                   	nop

c0020436 <FAT::stat(void*, unsigned long long*)>:
c0020436:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002043b:	75 06                	jne    c0020443 <FAT::stat(void*, unsigned long long*)+0xd>
c002043d:	b8 04 00 00 00       	mov    eax,0x4
c0020442:	c3                   	ret    
c0020443:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020448:	75 06                	jne    c0020450 <FAT::stat(void*, unsigned long long*)+0x1a>
c002044a:	b8 04 00 00 00       	mov    eax,0x4
c002044f:	c3                   	ret    
c0020450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020454:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020457:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002045a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002045e:	89 01                	mov    DWORD PTR [ecx],eax
c0020460:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020463:	b8 00 00 00 00       	mov    eax,0x0
c0020468:	c3                   	ret    
c0020469:	90                   	nop

c002046a <FAT::~FAT()>:
c002046a:	83 ec 0c             	sub    esp,0xc
c002046d:	ba 6c c8 02 c0       	mov    edx,0xc002c86c
c0020472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020476:	89 10                	mov    DWORD PTR [eax],edx
c0020478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047c:	83 ec 0c             	sub    esp,0xc
c002047f:	50                   	push   eax
c0020480:	e8 99 2c ff ff       	call   c001311e <Filesystem::~Filesystem()>
c0020485:	83 c4 10             	add    esp,0x10
c0020488:	90                   	nop
c0020489:	83 c4 0c             	add    esp,0xc
c002048c:	c3                   	ret    
c002048d:	90                   	nop

c002048e <FAT::~FAT()>:
c002048e:	83 ec 0c             	sub    esp,0xc
c0020491:	83 ec 0c             	sub    esp,0xc
c0020494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020498:	e8 cd ff ff ff       	call   c002046a <FAT::~FAT()>
c002049d:	83 c4 10             	add    esp,0x10
c00204a0:	83 ec 08             	sub    esp,0x8
c00204a3:	6a 08                	push   0x8
c00204a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204a9:	e8 68 28 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c00204ae:	83 c4 10             	add    esp,0x10
c00204b1:	83 c4 0c             	add    esp,0xc
c00204b4:	c3                   	ret    
c00204b5:	90                   	nop

c00204b6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00204b6:	83 ec 1c             	sub    esp,0x1c
c00204b9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00204c0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00204c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204c9:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c00204d0:	83 f8 ff             	cmp    eax,0xffffffff
c00204d3:	75 34                	jne    c0020509 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00204d5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204d9:	88 c2                	mov    dl,al
c00204db:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00204e0:	01 d0                	add    eax,edx
c00204e2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204e6:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c00204ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204f0:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c00204f7:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00204fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020500:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c0020507:	eb 17                	jmp    c0020520 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020509:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002050d:	88 c2                	mov    dl,al
c002050f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020513:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c002051a:	01 d0                	add    eax,edx
c002051c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020520:	83 ec 04             	sub    esp,0x4
c0020523:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020527:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002052b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002052f:	50                   	push   eax
c0020530:	e8 03 68 fe ff       	call   c0006d38 <f_getlabel>
c0020535:	83 c4 10             	add    esp,0x10
c0020538:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002053c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020541:	75 07                	jne    c002054a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020543:	b8 00 00 00 00       	mov    eax,0x0
c0020548:	eb 05                	jmp    c002054f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002054a:	b8 01 00 00 00       	mov    eax,0x1
c002054f:	83 c4 1c             	add    esp,0x1c
c0020552:	c3                   	ret    
c0020553:	90                   	nop

c0020554 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020554:	57                   	push   edi
c0020555:	83 ec 58             	sub    esp,0x58
c0020558:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020560:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020564:	b9 0f 00 00 00       	mov    ecx,0xf
c0020569:	b8 00 00 00 00       	mov    eax,0x0
c002056e:	fc                   	cld    
c002056f:	89 d7                	mov    edi,edx
c0020571:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020573:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020577:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c002057e:	83 f8 ff             	cmp    eax,0xffffffff
c0020581:	75 34                	jne    c00205b7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020583:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020587:	88 c2                	mov    dl,al
c0020589:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c002058e:	01 d0                	add    eax,edx
c0020590:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020594:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c002059a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002059e:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c00205a5:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00205aa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00205ae:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c00205b5:	eb 17                	jmp    c00205ce <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00205b7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205bb:	88 c2                	mov    dl,al
c00205bd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205c1:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c00205c8:	01 d0                	add    eax,edx
c00205ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205ce:	83 ec 08             	sub    esp,0x8
c00205d1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00205d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205d9:	50                   	push   eax
c00205da:	e8 95 03 fe ff       	call   c0000974 <strcat>
c00205df:	83 c4 10             	add    esp,0x10
c00205e2:	83 ec 0c             	sub    esp,0xc
c00205e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205e9:	50                   	push   eax
c00205ea:	e8 37 69 fe ff       	call   c0006f26 <f_setlabel>
c00205ef:	83 c4 10             	add    esp,0x10
c00205f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205f6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205fb:	75 07                	jne    c0020604 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205fd:	b8 00 00 00 00       	mov    eax,0x0
c0020602:	eb 05                	jmp    c0020609 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020604:	b8 01 00 00 00       	mov    eax,0x1
c0020609:	83 c4 58             	add    esp,0x58
c002060c:	5f                   	pop    edi
c002060d:	c3                   	ret    

c002060e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002060e:	83 ec 2c             	sub    esp,0x2c
c0020611:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020619:	83 ec 08             	sub    esp,0x8
c002061c:	68 0c c8 02 c0       	push   0xc002c80c
c0020621:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020625:	e8 96 02 fe ff       	call   c00008c0 <strcmp>
c002062a:	83 c4 10             	add    esp,0x10
c002062d:	85 c0                	test   eax,eax
c002062f:	0f 94 c0             	sete   al
c0020632:	84 c0                	test   al,al
c0020634:	74 0d                	je     c0020643 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020636:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002063e:	e9 a6 00 00 00       	jmp    c00206e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020643:	83 ec 08             	sub    esp,0x8
c0020646:	68 fe c7 02 c0       	push   0xc002c7fe
c002064b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002064f:	e8 6c 02 fe ff       	call   c00008c0 <strcmp>
c0020654:	83 c4 10             	add    esp,0x10
c0020657:	85 c0                	test   eax,eax
c0020659:	0f 94 c0             	sete   al
c002065c:	84 c0                	test   al,al
c002065e:	74 0a                	je     c002066a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020660:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020668:	eb 7f                	jmp    c00206e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002066a:	83 ec 08             	sub    esp,0x8
c002066d:	68 04 c8 02 c0       	push   0xc002c804
c0020672:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020676:	e8 45 02 fe ff       	call   c00008c0 <strcmp>
c002067b:	83 c4 10             	add    esp,0x10
c002067e:	85 c0                	test   eax,eax
c0020680:	0f 94 c0             	sete   al
c0020683:	84 c0                	test   al,al
c0020685:	74 0a                	je     c0020691 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020687:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002068f:	eb 58                	jmp    c00206e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020691:	83 ec 08             	sub    esp,0x8
c0020694:	68 4c 93 02 c0       	push   0xc002934c
c0020699:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002069d:	e8 1e 02 fe ff       	call   c00008c0 <strcmp>
c00206a2:	83 c4 10             	add    esp,0x10
c00206a5:	85 c0                	test   eax,eax
c00206a7:	0f 94 c0             	sete   al
c00206aa:	84 c0                	test   al,al
c00206ac:	74 0a                	je     c00206b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00206ae:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00206b6:	eb 31                	jmp    c00206e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206b8:	83 ec 08             	sub    esp,0x8
c00206bb:	68 0a c8 02 c0       	push   0xc002c80a
c00206c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206c4:	e8 f7 01 fe ff       	call   c00008c0 <strcmp>
c00206c9:	83 c4 10             	add    esp,0x10
c00206cc:	85 c0                	test   eax,eax
c00206ce:	0f 94 c0             	sete   al
c00206d1:	84 c0                	test   al,al
c00206d3:	74 0a                	je     c00206df <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00206d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00206dd:	eb 0a                	jmp    c00206e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206df:	b8 08 00 00 00       	mov    eax,0x8
c00206e4:	e9 04 01 00 00       	jmp    c00207ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00206e9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00206f0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206f9:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c0020700:	83 f8 ff             	cmp    eax,0xffffffff
c0020703:	75 34                	jne    c0020739 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020705:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020709:	88 c2                	mov    dl,al
c002070b:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c0020710:	01 d0                	add    eax,edx
c0020712:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020716:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c002071c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020720:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0020727:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c002072c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020730:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c0020737:	eb 17                	jmp    c0020750 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020739:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002073d:	88 c2                	mov    dl,al
c002073f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020743:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c002074a:	01 d0                	add    eax,edx
c002074c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020754:	88 04 24             	mov    BYTE PTR [esp],al
c0020757:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002075b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002075f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020767:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002076c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020774:	83 ec 0c             	sub    esp,0xc
c0020777:	68 00 20 00 00       	push   0x2000
c002077c:	e8 bf f0 fe ff       	call   c000f840 <malloc>
c0020781:	83 c4 10             	add    esp,0x10
c0020784:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020788:	68 00 20 00 00       	push   0x2000
c002078d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020791:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020795:	50                   	push   eax
c0020796:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002079a:	50                   	push   eax
c002079b:	e8 d1 6b fe ff       	call   c0007371 <f_mkfs>
c00207a0:	83 c4 10             	add    esp,0x10
c00207a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00207a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00207ac:	75 07                	jne    c00207b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00207ae:	b8 00 00 00 00       	mov    eax,0x0
c00207b3:	eb 38                	jmp    c00207ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207b5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00207ba:	75 17                	jne    c00207d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00207bc:	83 ec 0c             	sub    esp,0xc
c00207bf:	68 3c c8 02 c0       	push   0xc002c83c
c00207c4:	e8 2d 26 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00207c9:	83 c4 10             	add    esp,0x10
c00207cc:	b8 09 00 00 00       	mov    eax,0x9
c00207d1:	eb 1a                	jmp    c00207ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207d7:	83 ec 08             	sub    esp,0x8
c00207da:	50                   	push   eax
c00207db:	68 10 c8 02 c0       	push   0xc002c810
c00207e0:	e8 11 26 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00207e5:	83 c4 10             	add    esp,0x10
c00207e8:	b8 01 00 00 00       	mov    eax,0x1
c00207ed:	83 c4 2c             	add    esp,0x2c
c00207f0:	c3                   	ret    
c00207f1:	90                   	nop

c00207f2 <FAT::tryMount(LogicalDisk*, int)>:
c00207f2:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00207f8:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00207fd:	83 f8 14             	cmp    eax,0x14
c0020800:	75 17                	jne    c0020819 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020802:	83 ec 0c             	sub    esp,0xc
c0020805:	68 22 c8 02 c0       	push   0xc002c822
c002080a:	e8 88 9c ff ff       	call   c001a497 <Krnl::panic(char const*)>
c002080f:	83 c4 10             	add    esp,0x10
c0020812:	b0 00                	mov    al,0x0
c0020814:	e9 d7 01 00 00       	jmp    c00209f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020819:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020820:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020826:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002082c:	3d 00 02 00 00       	cmp    eax,0x200
c0020831:	74 07                	je     c002083a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020833:	b0 00                	mov    al,0x0
c0020835:	e9 b6 01 00 00       	jmp    c00209f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002083a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020842:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020849:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c0020850:	83 f8 ff             	cmp    eax,0xffffffff
c0020853:	74 07                	je     c002085c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020855:	b0 01                	mov    al,0x1
c0020857:	e9 94 01 00 00       	jmp    c00209f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002085c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020866:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002086e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020875:	88 c2                	mov    dl,al
c0020877:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c002087c:	01 d0                	add    eax,edx
c002087e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020885:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c002088b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020892:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0020899:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c002089e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00208a5:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c00208ac:	83 ec 0c             	sub    esp,0xc
c00208af:	68 54 02 00 00       	push   0x254
c00208b4:	e8 87 ef fe ff       	call   c000f840 <malloc>
c00208b9:	83 c4 10             	add    esp,0x10
c00208bc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00208c3:	83 ec 04             	sub    esp,0x4
c00208c6:	6a 00                	push   0x0
c00208c8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208cf:	50                   	push   eax
c00208d0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208d7:	e8 53 46 fe ff       	call   c0004f2f <f_mount>
c00208dc:	83 c4 10             	add    esp,0x10
c00208df:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208e6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00208ee:	74 19                	je     c0020909 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00208f0:	83 ec 0c             	sub    esp,0xc
c00208f3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208fa:	e8 61 ef fe ff       	call   c000f860 <rfree>
c00208ff:	83 c4 10             	add    esp,0x10
c0020902:	b0 00                	mov    al,0x0
c0020904:	e9 e7 00 00 00       	jmp    c00209f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020909:	83 ec 04             	sub    esp,0x4
c002090c:	68 00 01 00 00       	push   0x100
c0020911:	6a 00                	push   0x0
c0020913:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002091a:	50                   	push   eax
c002091b:	e8 58 fe fd ff       	call   c0000778 <memset>
c0020920:	83 c4 10             	add    esp,0x10
c0020923:	83 ec 08             	sub    esp,0x8
c0020926:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002092d:	50                   	push   eax
c002092e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020935:	50                   	push   eax
c0020936:	e8 39 00 fe ff       	call   c0000974 <strcat>
c002093b:	83 c4 10             	add    esp,0x10
c002093e:	83 ec 08             	sub    esp,0x8
c0020941:	68 30 c8 02 c0       	push   0xc002c830
c0020946:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002094d:	50                   	push   eax
c002094e:	e8 21 00 fe ff       	call   c0000974 <strcat>
c0020953:	83 c4 10             	add    esp,0x10
c0020956:	83 ec 04             	sub    esp,0x4
c0020959:	6a 01                	push   0x1
c002095b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020962:	50                   	push   eax
c0020963:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020967:	50                   	push   eax
c0020968:	e8 24 46 fe ff       	call   c0004f91 <f_open>
c002096d:	83 c4 10             	add    esp,0x10
c0020970:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020977:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002097e:	85 c0                	test   eax,eax
c0020980:	74 0a                	je     c002098c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020982:	78 2d                	js     c00209b1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020984:	83 e8 04             	sub    eax,0x4
c0020987:	83 f8 01             	cmp    eax,0x1
c002098a:	77 25                	ja     c00209b1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002098c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020994:	83 ec 0c             	sub    esp,0xc
c0020997:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002099b:	50                   	push   eax
c002099c:	e8 42 51 fe ff       	call   c0005ae3 <f_close>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	90                   	nop
c00209a5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00209ad:	74 3a                	je     c00209e9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00209af:	eb 2d                	jmp    c00209de <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00209b1:	83 ec 0c             	sub    esp,0xc
c00209b4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209bb:	e8 a0 ee fe ff       	call   c000f860 <rfree>
c00209c0:	83 c4 10             	add    esp,0x10
c00209c3:	83 ec 04             	sub    esp,0x4
c00209c6:	6a 00                	push   0x0
c00209c8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209cf:	50                   	push   eax
c00209d0:	6a 00                	push   0x0
c00209d2:	e8 58 45 fe ff       	call   c0004f2f <f_mount>
c00209d7:	83 c4 10             	add    esp,0x10
c00209da:	b0 00                	mov    al,0x0
c00209dc:	eb 12                	jmp    c00209f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209de:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00209e3:	40                   	inc    eax
c00209e4:	a3 40 1a 03 c0       	mov    ds:0xc0031a40,eax
c00209e9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00209f0:	81 c4 6c 03 00 00    	add    esp,0x36c
c00209f6:	c3                   	ret    
c00209f7:	90                   	nop

c00209f8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00209f8:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00209fe:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020a06:	74 0a                	je     c0020a12 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020a08:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020a10:	75 0a                	jne    c0020a1c <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020a12:	b8 04 00 00 00       	mov    eax,0x4
c0020a17:	e9 db 00 00 00       	jmp    c0020af7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020a1c:	83 ec 08             	sub    esp,0x8
c0020a1f:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a26:	50                   	push   eax
c0020a27:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020a2e:	e8 ba 56 fe ff       	call   c00060ed <f_readdir>
c0020a33:	83 c4 10             	add    esp,0x10
c0020a36:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020a3d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020a43:	83 ec 0c             	sub    esp,0xc
c0020a46:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a4d:	83 c0 1a             	add    eax,0x1a
c0020a50:	50                   	push   eax
c0020a51:	e8 3e fd fd ff       	call   c0000794 <strlen>
c0020a56:	83 c4 10             	add    esp,0x10
c0020a59:	ba 00 00 00 00       	mov    edx,0x0
c0020a5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020a66:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020a6d:	0f b6 c0             	movzx  eax,al
c0020a70:	83 e0 10             	and    eax,0x10
c0020a73:	74 07                	je     c0020a7c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020a75:	b8 02 00 00 00       	mov    eax,0x2
c0020a7a:	eb 05                	jmp    c0020a81 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020a7c:	b8 01 00 00 00       	mov    eax,0x1
c0020a81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a85:	83 ec 08             	sub    esp,0x8
c0020a88:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a8f:	83 c0 1a             	add    eax,0x1a
c0020a92:	50                   	push   eax
c0020a93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a97:	83 c0 10             	add    eax,0x10
c0020a9a:	50                   	push   eax
c0020a9b:	e8 94 fd fd ff       	call   c0000834 <strcpy>
c0020aa0:	83 c4 10             	add    esp,0x10
c0020aa3:	83 ec 04             	sub    esp,0x4
c0020aa6:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020aad:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ab1:	50                   	push   eax
c0020ab2:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020ab9:	e8 86 fc fd ff       	call   c0000744 <memcpy>
c0020abe:	83 c4 10             	add    esp,0x10
c0020ac1:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ac8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ace:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020ad5:	84 c0                	test   al,al
c0020ad7:	75 07                	jne    c0020ae0 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020ad9:	b8 07 00 00 00       	mov    eax,0x7
c0020ade:	eb 17                	jmp    c0020af7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ae0:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020ae7:	85 c0                	test   eax,eax
c0020ae9:	75 07                	jne    c0020af2 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020aeb:	b8 00 00 00 00       	mov    eax,0x0
c0020af0:	eb 05                	jmp    c0020af7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020af2:	b8 01 00 00 00       	mov    eax,0x1
c0020af7:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020afd:	c3                   	ret    

c0020afe <FAT::read(void*, unsigned long, void*, int*)>:
c0020afe:	83 ec 1c             	sub    esp,0x1c
c0020b01:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b06:	74 07                	je     c0020b0f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020b08:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b0d:	75 07                	jne    c0020b16 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020b0f:	b8 04 00 00 00       	mov    eax,0x4
c0020b14:	eb 3d                	jmp    c0020b53 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b16:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b1a:	50                   	push   eax
c0020b1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b27:	e8 a1 48 fe ff       	call   c00053cd <f_read>
c0020b2c:	83 c4 10             	add    esp,0x10
c0020b2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b37:	89 c2                	mov    edx,eax
c0020b39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b3d:	89 10                	mov    DWORD PTR [eax],edx
c0020b3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b43:	85 c0                	test   eax,eax
c0020b45:	75 07                	jne    c0020b4e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020b47:	b8 00 00 00 00       	mov    eax,0x0
c0020b4c:	eb 05                	jmp    c0020b53 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b4e:	b8 01 00 00 00       	mov    eax,0x1
c0020b53:	83 c4 1c             	add    esp,0x1c
c0020b56:	c3                   	ret    
c0020b57:	90                   	nop

c0020b58 <FAT::write(void*, unsigned long, void*, int*)>:
c0020b58:	83 ec 1c             	sub    esp,0x1c
c0020b5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b60:	74 07                	je     c0020b69 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b62:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b67:	75 07                	jne    c0020b70 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b69:	b8 04 00 00 00       	mov    eax,0x4
c0020b6e:	eb 3d                	jmp    c0020bad <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b70:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b74:	50                   	push   eax
c0020b75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b81:	e8 c7 4a fe ff       	call   c000564d <f_write>
c0020b86:	83 c4 10             	add    esp,0x10
c0020b89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b91:	89 c2                	mov    edx,eax
c0020b93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b97:	89 10                	mov    DWORD PTR [eax],edx
c0020b99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b9d:	85 c0                	test   eax,eax
c0020b9f:	75 07                	jne    c0020ba8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020ba1:	b8 00 00 00 00       	mov    eax,0x0
c0020ba6:	eb 05                	jmp    c0020bad <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ba8:	b8 01 00 00 00       	mov    eax,0x1
c0020bad:	83 c4 1c             	add    esp,0x1c
c0020bb0:	c3                   	ret    
c0020bb1:	90                   	nop

c0020bb2 <FAT::close(void*)>:
c0020bb2:	83 ec 1c             	sub    esp,0x1c
c0020bb5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bba:	75 07                	jne    c0020bc3 <FAT::close(void*)+0x11>
c0020bbc:	b8 04 00 00 00       	mov    eax,0x4
c0020bc1:	eb 36                	jmp    c0020bf9 <FAT::close(void*)+0x47>
c0020bc3:	83 ec 0c             	sub    esp,0xc
c0020bc6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bca:	e8 14 4f fe ff       	call   c0005ae3 <f_close>
c0020bcf:	83 c4 10             	add    esp,0x10
c0020bd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bd6:	83 ec 0c             	sub    esp,0xc
c0020bd9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bdd:	e8 6e ec fe ff       	call   c000f850 <free>
c0020be2:	83 c4 10             	add    esp,0x10
c0020be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020be9:	85 c0                	test   eax,eax
c0020beb:	75 07                	jne    c0020bf4 <FAT::close(void*)+0x42>
c0020bed:	b8 00 00 00 00       	mov    eax,0x0
c0020bf2:	eb 05                	jmp    c0020bf9 <FAT::close(void*)+0x47>
c0020bf4:	b8 01 00 00 00       	mov    eax,0x1
c0020bf9:	83 c4 1c             	add    esp,0x1c
c0020bfc:	c3                   	ret    
c0020bfd:	90                   	nop

c0020bfe <FAT::closeDir(void*)>:
c0020bfe:	83 ec 1c             	sub    esp,0x1c
c0020c01:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c06:	75 07                	jne    c0020c0f <FAT::closeDir(void*)+0x11>
c0020c08:	b8 04 00 00 00       	mov    eax,0x4
c0020c0d:	eb 36                	jmp    c0020c45 <FAT::closeDir(void*)+0x47>
c0020c0f:	83 ec 0c             	sub    esp,0xc
c0020c12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c16:	e8 b0 54 fe ff       	call   c00060cb <f_closedir>
c0020c1b:	83 c4 10             	add    esp,0x10
c0020c1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c22:	83 ec 0c             	sub    esp,0xc
c0020c25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c29:	e8 22 ec fe ff       	call   c000f850 <free>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c35:	85 c0                	test   eax,eax
c0020c37:	75 07                	jne    c0020c40 <FAT::closeDir(void*)+0x42>
c0020c39:	b8 00 00 00 00       	mov    eax,0x0
c0020c3e:	eb 05                	jmp    c0020c45 <FAT::closeDir(void*)+0x47>
c0020c40:	b8 01 00 00 00       	mov    eax,0x1
c0020c45:	83 c4 1c             	add    esp,0x1c
c0020c48:	c3                   	ret    
c0020c49:	90                   	nop

c0020c4a <FAT::seek(void*, unsigned long long)>:
c0020c4a:	83 ec 2c             	sub    esp,0x2c
c0020c4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c5d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c62:	75 07                	jne    c0020c6b <FAT::seek(void*, unsigned long long)+0x21>
c0020c64:	b8 04 00 00 00       	mov    eax,0x4
c0020c69:	eb 2f                	jmp    c0020c9a <FAT::seek(void*, unsigned long long)+0x50>
c0020c6b:	83 ec 04             	sub    esp,0x4
c0020c6e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c7a:	e8 93 4e fe ff       	call   c0005b12 <f_lseek>
c0020c7f:	83 c4 10             	add    esp,0x10
c0020c82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c8a:	85 c0                	test   eax,eax
c0020c8c:	75 07                	jne    c0020c95 <FAT::seek(void*, unsigned long long)+0x4b>
c0020c8e:	b8 00 00 00 00       	mov    eax,0x0
c0020c93:	eb 05                	jmp    c0020c9a <FAT::seek(void*, unsigned long long)+0x50>
c0020c95:	b8 01 00 00 00       	mov    eax,0x1
c0020c9a:	83 c4 2c             	add    esp,0x2c
c0020c9d:	c3                   	ret    

c0020c9e <fatWrapperReadDisk>:
c0020c9e:	83 ec 1c             	sub    esp,0x1c
c0020ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ca5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ca9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cad:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020cb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cbd:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0020cc4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cc8:	83 ec 0c             	sub    esp,0xc
c0020ccb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ccf:	52                   	push   edx
c0020cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cd8:	50                   	push   eax
c0020cd9:	e8 28 59 ff ff       	call   c0016606 <LogicalDisk::read(unsigned long long, int, void*)>
c0020cde:	83 c4 20             	add    esp,0x20
c0020ce1:	83 c4 1c             	add    esp,0x1c
c0020ce4:	c3                   	ret    

c0020ce5 <fatWrapperWriteDisk>:
c0020ce5:	83 ec 1c             	sub    esp,0x1c
c0020ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cf0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cf4:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020cfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d04:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0020d0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d0f:	83 ec 0c             	sub    esp,0xc
c0020d12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d16:	52                   	push   edx
c0020d17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d1f:	50                   	push   eax
c0020d20:	e8 4d 59 ff ff       	call   c0016672 <LogicalDisk::write(unsigned long long, int, void*)>
c0020d25:	83 c4 20             	add    esp,0x20
c0020d28:	83 c4 1c             	add    esp,0x1c
c0020d2b:	c3                   	ret    

c0020d2c <fatWrapperIoctl>:
c0020d2c:	53                   	push   ebx
c0020d2d:	83 ec 28             	sub    esp,0x28
c0020d30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020d38:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d40:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020d45:	75 31                	jne    c0020d78 <fatWrapperIoctl+0x4c>
c0020d47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d4f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d54:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0020d5b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d6b:	66 89 02             	mov    WORD PTR [edx],ax
c0020d6e:	b8 00 00 00 00       	mov    eax,0x0
c0020d73:	e9 b2 00 00 00       	jmp    c0020e2a <fatWrapperIoctl+0xfe>
c0020d78:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d7d:	75 6a                	jne    c0020de9 <fatWrapperIoctl+0xbd>
c0020d7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d87:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d8c:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0020d93:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d99:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020d9f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020da5:	89 c8                	mov    eax,ecx
c0020da7:	89 da                	mov    edx,ebx
c0020da9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020dad:	c1 e0 0a             	shl    eax,0xa
c0020db0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020db5:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0020dbc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020dc2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020dc8:	89 cb                	mov    ebx,ecx
c0020dca:	c1 fb 1f             	sar    ebx,0x1f
c0020dcd:	53                   	push   ebx
c0020dce:	51                   	push   ecx
c0020dcf:	52                   	push   edx
c0020dd0:	50                   	push   eax
c0020dd1:	e8 c6 5a 00 00       	call   c002689c <__udivdi3>
c0020dd6:	83 c4 10             	add    esp,0x10
c0020dd9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ddd:	89 01                	mov    DWORD PTR [ecx],eax
c0020ddf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020de2:	b8 00 00 00 00       	mov    eax,0x0
c0020de7:	eb 41                	jmp    c0020e2a <fatWrapperIoctl+0xfe>
c0020de9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020dee:	75 07                	jne    c0020df7 <fatWrapperIoctl+0xcb>
c0020df0:	b8 00 00 00 00       	mov    eax,0x0
c0020df5:	eb 33                	jmp    c0020e2a <fatWrapperIoctl+0xfe>
c0020df7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020dfc:	75 19                	jne    c0020e17 <fatWrapperIoctl+0xeb>
c0020dfe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e0a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020e10:	b8 00 00 00 00       	mov    eax,0x0
c0020e15:	eb 13                	jmp    c0020e2a <fatWrapperIoctl+0xfe>
c0020e17:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020e1c:	75 07                	jne    c0020e25 <fatWrapperIoctl+0xf9>
c0020e1e:	b8 00 00 00 00       	mov    eax,0x0
c0020e23:	eb 05                	jmp    c0020e2a <fatWrapperIoctl+0xfe>
c0020e25:	b8 04 00 00 00       	mov    eax,0x4
c0020e2a:	83 c4 28             	add    esp,0x28
c0020e2d:	5b                   	pop    ebx
c0020e2e:	c3                   	ret    
c0020e2f:	90                   	nop

c0020e30 <FAT::FAT()>:
c0020e30:	83 ec 1c             	sub    esp,0x1c
c0020e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e37:	83 ec 0c             	sub    esp,0xc
c0020e3a:	50                   	push   eax
c0020e3b:	e8 ba 22 ff ff       	call   c00130fa <Filesystem::Filesystem()>
c0020e40:	83 c4 10             	add    esp,0x10
c0020e43:	ba 6c c8 02 c0       	mov    edx,0xc002c86c
c0020e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e4c:	89 10                	mov    DWORD PTR [eax],edx
c0020e4e:	c7 05 40 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a40,0x0
c0020e58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e60:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e65:	7f 15                	jg     c0020e7c <FAT::FAT()+0x4c>
c0020e67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e6b:	c7 04 85 60 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce5a0],0xffffffff
c0020e76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e7a:	eb e4                	jmp    c0020e60 <FAT::FAT()+0x30>
c0020e7c:	90                   	nop
c0020e7d:	83 c4 1c             	add    esp,0x1c
c0020e80:	c3                   	ret    
c0020e81:	90                   	nop

c0020e82 <FAT::fixFilepath(char*)>:
c0020e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e86:	8a 00                	mov    al,BYTE PTR [eax]
c0020e88:	3c 40                	cmp    al,0x40
c0020e8a:	7e 2c                	jle    c0020eb8 <FAT::fixFilepath(char*)+0x36>
c0020e8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e90:	8a 00                	mov    al,BYTE PTR [eax]
c0020e92:	83 e8 41             	sub    eax,0x41
c0020e95:	88 c2                	mov    dl,al
c0020e97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e9b:	88 10                	mov    BYTE PTR [eax],dl
c0020e9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0020ea3:	0f be c0             	movsx  eax,al
c0020ea6:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c0020ead:	83 c0 30             	add    eax,0x30
c0020eb0:	88 c2                	mov    dl,al
c0020eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020eb6:	88 10                	mov    BYTE PTR [eax],dl
c0020eb8:	90                   	nop
c0020eb9:	c3                   	ret    

c0020eba <FAT::open(char const*, void**, FileOpenMode)>:
c0020eba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ec0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ec8:	74 0a                	je     c0020ed4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020eca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ed2:	75 0a                	jne    c0020ede <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020ed4:	b8 04 00 00 00       	mov    eax,0x4
c0020ed9:	e9 fd 00 00 00       	jmp    c0020fdb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ede:	83 ec 08             	sub    esp,0x8
c0020ee1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ee8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eec:	50                   	push   eax
c0020eed:	e8 42 f9 fd ff       	call   c0000834 <strcpy>
c0020ef2:	83 c4 10             	add    esp,0x10
c0020ef5:	83 ec 08             	sub    esp,0x8
c0020ef8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020efc:	50                   	push   eax
c0020efd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f04:	e8 79 ff ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c0020f09:	83 c4 10             	add    esp,0x10
c0020f0c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020f14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f1b:	83 e0 01             	and    eax,0x1
c0020f1e:	74 08                	je     c0020f28 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020f20:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020f28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f2f:	83 e0 04             	and    eax,0x4
c0020f32:	74 10                	je     c0020f44 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020f34:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020f3c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f4b:	83 e0 02             	and    eax,0x2
c0020f4e:	74 08                	je     c0020f58 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020f50:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f5f:	83 e0 08             	and    eax,0x8
c0020f62:	74 08                	je     c0020f6c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f64:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f6c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f73:	83 e0 10             	and    eax,0x10
c0020f76:	74 08                	je     c0020f80 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f78:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f80:	83 ec 0c             	sub    esp,0xc
c0020f83:	68 50 02 00 00       	push   0x250
c0020f88:	e8 b3 e8 fe ff       	call   c000f840 <malloc>
c0020f8d:	83 c4 10             	add    esp,0x10
c0020f90:	89 c2                	mov    edx,eax
c0020f92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f99:	89 10                	mov    DWORD PTR [eax],edx
c0020f9b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020fa3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020faa:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fac:	83 ec 04             	sub    esp,0x4
c0020faf:	52                   	push   edx
c0020fb0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020fb4:	52                   	push   edx
c0020fb5:	50                   	push   eax
c0020fb6:	e8 d6 3f fe ff       	call   c0004f91 <f_open>
c0020fbb:	83 c4 10             	add    esp,0x10
c0020fbe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020fc5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020fcd:	74 07                	je     c0020fd6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020fcf:	b8 01 00 00 00       	mov    eax,0x1
c0020fd4:	eb 05                	jmp    c0020fdb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fd6:	b8 00 00 00 00       	mov    eax,0x0
c0020fdb:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fe1:	c3                   	ret    

c0020fe2 <FAT::openDir(char const*, void**)>:
c0020fe2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fe8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ff0:	74 0a                	je     c0020ffc <FAT::openDir(char const*, void**)+0x1a>
c0020ff2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ffa:	75 07                	jne    c0021003 <FAT::openDir(char const*, void**)+0x21>
c0020ffc:	b8 04 00 00 00       	mov    eax,0x4
c0021001:	eb 7d                	jmp    c0021080 <FAT::openDir(char const*, void**)+0x9e>
c0021003:	83 ec 08             	sub    esp,0x8
c0021006:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002100d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021011:	50                   	push   eax
c0021012:	e8 1d f8 fd ff       	call   c0000834 <strcpy>
c0021017:	83 c4 10             	add    esp,0x10
c002101a:	83 ec 08             	sub    esp,0x8
c002101d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021021:	50                   	push   eax
c0021022:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021029:	e8 54 fe ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c002102e:	83 c4 10             	add    esp,0x10
c0021031:	83 ec 0c             	sub    esp,0xc
c0021034:	6a 4c                	push   0x4c
c0021036:	e8 05 e8 fe ff       	call   c000f840 <malloc>
c002103b:	83 c4 10             	add    esp,0x10
c002103e:	89 c2                	mov    edx,eax
c0021040:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021047:	89 10                	mov    DWORD PTR [eax],edx
c0021049:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021050:	8b 00                	mov    eax,DWORD PTR [eax]
c0021052:	83 ec 08             	sub    esp,0x8
c0021055:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021059:	52                   	push   edx
c002105a:	50                   	push   eax
c002105b:	e8 69 4f fe ff       	call   c0005fc9 <f_opendir>
c0021060:	83 c4 10             	add    esp,0x10
c0021063:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002106a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021072:	74 07                	je     c002107b <FAT::openDir(char const*, void**)+0x99>
c0021074:	b8 01 00 00 00       	mov    eax,0x1
c0021079:	eb 05                	jmp    c0021080 <FAT::openDir(char const*, void**)+0x9e>
c002107b:	b8 00 00 00 00       	mov    eax,0x0
c0021080:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021086:	c3                   	ret    
c0021087:	90                   	nop

c0021088 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021088:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002108e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021096:	75 0a                	jne    c00210a2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021098:	b8 04 00 00 00       	mov    eax,0x4
c002109d:	e9 c9 00 00 00       	jmp    c002116b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210a2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00210aa:	75 0a                	jne    c00210b6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00210ac:	b8 04 00 00 00       	mov    eax,0x4
c00210b1:	e9 b5 00 00 00       	jmp    c002116b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210b6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00210be:	75 0a                	jne    c00210ca <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00210c0:	b8 04 00 00 00       	mov    eax,0x4
c00210c5:	e9 a1 00 00 00       	jmp    c002116b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210ca:	83 ec 08             	sub    esp,0x8
c00210cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210d4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210db:	50                   	push   eax
c00210dc:	e8 53 f7 fd ff       	call   c0000834 <strcpy>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	83 ec 08             	sub    esp,0x8
c00210e7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00210ee:	50                   	push   eax
c00210ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210f6:	e8 87 fd ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c00210fb:	83 c4 10             	add    esp,0x10
c00210fe:	83 ec 08             	sub    esp,0x8
c0021101:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021105:	50                   	push   eax
c0021106:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002110d:	50                   	push   eax
c002110e:	e8 75 50 fe ff       	call   c0006188 <f_stat>
c0021113:	83 c4 10             	add    esp,0x10
c0021116:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002111d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021124:	85 c0                	test   eax,eax
c0021126:	74 07                	je     c002112f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021128:	83 f8 04             	cmp    eax,0x4
c002112b:	74 32                	je     c002115f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002112d:	eb 37                	jmp    c0021166 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002112f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021133:	0f b6 c0             	movzx  eax,al
c0021136:	83 e0 10             	and    eax,0x10
c0021139:	0f 95 c2             	setne  dl
c002113c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021143:	88 10                	mov    BYTE PTR [eax],dl
c0021145:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021148:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002114c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021153:	89 01                	mov    DWORD PTR [ecx],eax
c0021155:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021158:	b8 00 00 00 00       	mov    eax,0x0
c002115d:	eb 0c                	jmp    c002116b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002115f:	b8 02 00 00 00       	mov    eax,0x2
c0021164:	eb 05                	jmp    c002116b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021166:	b8 01 00 00 00       	mov    eax,0x1
c002116b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021171:	c3                   	ret    

c0021172 <FAT::unlink(char const*)>:
c0021172:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021178:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021180:	75 07                	jne    c0021189 <FAT::unlink(char const*)+0x17>
c0021182:	b8 04 00 00 00       	mov    eax,0x4
c0021187:	eb 5c                	jmp    c00211e5 <FAT::unlink(char const*)+0x73>
c0021189:	83 ec 08             	sub    esp,0x8
c002118c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021193:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021197:	50                   	push   eax
c0021198:	e8 97 f6 fd ff       	call   c0000834 <strcpy>
c002119d:	83 c4 10             	add    esp,0x10
c00211a0:	83 ec 08             	sub    esp,0x8
c00211a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211a7:	50                   	push   eax
c00211a8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211af:	e8 ce fc ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c00211b4:	83 c4 10             	add    esp,0x10
c00211b7:	83 ec 0c             	sub    esp,0xc
c00211ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211be:	50                   	push   eax
c00211bf:	e8 16 53 fe ff       	call   c00064da <f_unlink>
c00211c4:	83 c4 10             	add    esp,0x10
c00211c7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211ce:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00211d5:	85 c0                	test   eax,eax
c00211d7:	75 07                	jne    c00211e0 <FAT::unlink(char const*)+0x6e>
c00211d9:	b8 00 00 00 00       	mov    eax,0x0
c00211de:	eb 05                	jmp    c00211e5 <FAT::unlink(char const*)+0x73>
c00211e0:	b8 01 00 00 00       	mov    eax,0x1
c00211e5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211eb:	c3                   	ret    

c00211ec <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00211ec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00211f2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00211f9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021200:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021204:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021208:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021210:	75 0a                	jne    c002121c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021212:	b8 04 00 00 00       	mov    eax,0x4
c0021217:	e9 1c 01 00 00       	jmp    c0021338 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002121c:	83 ec 08             	sub    esp,0x8
c002121f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021226:	8d 44 24 24          	lea    eax,[esp+0x24]
c002122a:	50                   	push   eax
c002122b:	e8 04 f6 fd ff       	call   c0000834 <strcpy>
c0021230:	83 c4 10             	add    esp,0x10
c0021233:	83 ec 08             	sub    esp,0x8
c0021236:	8d 44 24 20          	lea    eax,[esp+0x20]
c002123a:	50                   	push   eax
c002123b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021242:	e8 3b fc ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c0021247:	83 c4 10             	add    esp,0x10
c002124a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021252:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002125a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002125f:	83 e0 01             	and    eax,0x1
c0021262:	74 08                	je     c002126c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021264:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002126c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021271:	83 e0 02             	and    eax,0x2
c0021274:	74 08                	je     c002127e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021276:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002127e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021283:	83 e0 04             	and    eax,0x4
c0021286:	74 08                	je     c0021290 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021288:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021290:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021295:	83 e0 08             	and    eax,0x8
c0021298:	74 08                	je     c00212a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002129a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00212a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212a7:	83 e0 01             	and    eax,0x1
c00212aa:	74 08                	je     c00212b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00212ac:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00212b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212b9:	83 e0 02             	and    eax,0x2
c00212bc:	74 08                	je     c00212c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00212be:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00212c6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212cb:	83 e0 04             	and    eax,0x4
c00212ce:	74 08                	je     c00212d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00212d0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00212d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212dd:	83 e0 08             	and    eax,0x8
c00212e0:	74 08                	je     c00212ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00212e2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00212ea:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00212f1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00212f8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021300:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021308:	83 ec 04             	sub    esp,0x4
c002130b:	52                   	push   edx
c002130c:	50                   	push   eax
c002130d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021311:	50                   	push   eax
c0021312:	e8 65 58 fe ff       	call   c0006b7c <f_chmod>
c0021317:	83 c4 10             	add    esp,0x10
c002131a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021321:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021328:	85 c0                	test   eax,eax
c002132a:	75 07                	jne    c0021333 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002132c:	b8 00 00 00 00       	mov    eax,0x0
c0021331:	eb 05                	jmp    c0021338 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021333:	b8 01 00 00 00       	mov    eax,0x1
c0021338:	81 c4 2c 01 00 00    	add    esp,0x12c
c002133e:	c3                   	ret    
c002133f:	90                   	nop

c0021340 <FAT::rename(char const*, char const*)>:
c0021340:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021346:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002134e:	74 0a                	je     c002135a <FAT::rename(char const*, char const*)+0x1a>
c0021350:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021358:	75 0a                	jne    c0021364 <FAT::rename(char const*, char const*)+0x24>
c002135a:	b8 04 00 00 00       	mov    eax,0x4
c002135f:	e9 98 00 00 00       	jmp    c00213fc <FAT::rename(char const*, char const*)+0xbc>
c0021364:	83 ec 08             	sub    esp,0x8
c0021367:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002136e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021375:	50                   	push   eax
c0021376:	e8 b9 f4 fd ff       	call   c0000834 <strcpy>
c002137b:	83 c4 10             	add    esp,0x10
c002137e:	83 ec 08             	sub    esp,0x8
c0021381:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021388:	50                   	push   eax
c0021389:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021390:	e8 ed fa ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c0021395:	83 c4 10             	add    esp,0x10
c0021398:	83 ec 08             	sub    esp,0x8
c002139b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00213a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213a6:	50                   	push   eax
c00213a7:	e8 88 f4 fd ff       	call   c0000834 <strcpy>
c00213ac:	83 c4 10             	add    esp,0x10
c00213af:	83 ec 08             	sub    esp,0x8
c00213b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213b6:	50                   	push   eax
c00213b7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213be:	e8 bf fa ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c00213c3:	83 c4 10             	add    esp,0x10
c00213c6:	83 ec 08             	sub    esp,0x8
c00213c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213cd:	50                   	push   eax
c00213ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00213d5:	50                   	push   eax
c00213d6:	e8 ae 54 fe ff       	call   c0006889 <f_rename>
c00213db:	83 c4 10             	add    esp,0x10
c00213de:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00213e5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00213ec:	85 c0                	test   eax,eax
c00213ee:	75 07                	jne    c00213f7 <FAT::rename(char const*, char const*)+0xb7>
c00213f0:	b8 00 00 00 00       	mov    eax,0x0
c00213f5:	eb 05                	jmp    c00213fc <FAT::rename(char const*, char const*)+0xbc>
c00213f7:	b8 01 00 00 00       	mov    eax,0x1
c00213fc:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021402:	c3                   	ret    
c0021403:	90                   	nop

c0021404 <FAT::mkdir(char const*)>:
c0021404:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002140a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021412:	75 07                	jne    c002141b <FAT::mkdir(char const*)+0x17>
c0021414:	b8 04 00 00 00       	mov    eax,0x4
c0021419:	eb 5c                	jmp    c0021477 <FAT::mkdir(char const*)+0x73>
c002141b:	83 ec 08             	sub    esp,0x8
c002141e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021425:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021429:	50                   	push   eax
c002142a:	e8 05 f4 fd ff       	call   c0000834 <strcpy>
c002142f:	83 c4 10             	add    esp,0x10
c0021432:	83 ec 08             	sub    esp,0x8
c0021435:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021439:	50                   	push   eax
c002143a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021441:	e8 3c fa ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c0021446:	83 c4 10             	add    esp,0x10
c0021449:	83 ec 0c             	sub    esp,0xc
c002144c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021450:	50                   	push   eax
c0021451:	e8 07 52 fe ff       	call   c000665d <f_mkdir>
c0021456:	83 c4 10             	add    esp,0x10
c0021459:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021460:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021467:	85 c0                	test   eax,eax
c0021469:	75 07                	jne    c0021472 <FAT::mkdir(char const*)+0x6e>
c002146b:	b8 00 00 00 00       	mov    eax,0x0
c0021470:	eb 05                	jmp    c0021477 <FAT::mkdir(char const*)+0x73>
c0021472:	b8 01 00 00 00       	mov    eax,0x1
c0021477:	81 c4 1c 01 00 00    	add    esp,0x11c
c002147d:	c3                   	ret    

c002147e <FAT::exists(char const*)>:
c002147e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021484:	83 ec 08             	sub    esp,0x8
c0021487:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002148e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021492:	50                   	push   eax
c0021493:	e8 9c f3 fd ff       	call   c0000834 <strcpy>
c0021498:	83 c4 10             	add    esp,0x10
c002149b:	83 ec 08             	sub    esp,0x8
c002149e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00214a2:	50                   	push   eax
c00214a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214aa:	e8 d3 f9 ff ff       	call   c0020e82 <FAT::fixFilepath(char*)>
c00214af:	83 c4 10             	add    esp,0x10
c00214b2:	83 ec 08             	sub    esp,0x8
c00214b5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00214bc:	50                   	push   eax
c00214bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00214c1:	50                   	push   eax
c00214c2:	e8 c1 4c fe ff       	call   c0006188 <f_stat>
c00214c7:	83 c4 10             	add    esp,0x10
c00214ca:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00214d1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00214d8:	85 c0                	test   eax,eax
c00214da:	75 04                	jne    c00214e0 <FAT::exists(char const*)+0x62>
c00214dc:	b0 01                	mov    al,0x1
c00214de:	eb 02                	jmp    c00214e2 <FAT::exists(char const*)+0x64>
c00214e0:	b0 00                	mov    al,0x0
c00214e2:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214e8:	c3                   	ret    
c00214e9:	90                   	nop

c00214ea <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00214ea:	b8 08 00 00 00       	mov    eax,0x8
c00214ef:	c3                   	ret    

c00214f0 <ISO9660::seek(void*, unsigned long long)>:
c00214f0:	53                   	push   ebx
c00214f1:	b8 04 00 00 00       	mov    eax,0x4
c00214f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021502:	85 d2                	test   edx,edx
c0021504:	74 17                	je     c002151d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021506:	89 c8                	mov    eax,ecx
c0021508:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002150b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002150e:	b8 01 00 00 00       	mov    eax,0x1
c0021513:	73 08                	jae    c002151d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021515:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021518:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002151b:	31 c0                	xor    eax,eax
c002151d:	5b                   	pop    ebx
c002151e:	c3                   	ret    
c002151f:	90                   	nop

c0021520 <ISO9660::tell(void*, unsigned long long*)>:
c0021520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021528:	85 d2                	test   edx,edx
c002152a:	74 12                	je     c002153e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002152c:	85 c0                	test   eax,eax
c002152e:	74 0e                	je     c002153e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021530:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021533:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021536:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021539:	89 10                	mov    DWORD PTR [eax],edx
c002153b:	31 c0                	xor    eax,eax
c002153d:	c3                   	ret    
c002153e:	b8 04 00 00 00       	mov    eax,0x4
c0021543:	c3                   	ret    

c0021544 <ISO9660::getName()>:
c0021544:	b8 c8 c8 02 c0       	mov    eax,0xc002c8c8
c0021549:	c3                   	ret    

c002154a <ISO9660::stat(void*, unsigned long long*)>:
c002154a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002154e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021552:	85 d2                	test   edx,edx
c0021554:	74 12                	je     c0021568 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021556:	85 c0                	test   eax,eax
c0021558:	74 0e                	je     c0021568 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002155a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002155d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021560:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021563:	89 10                	mov    DWORD PTR [eax],edx
c0021565:	31 c0                	xor    eax,eax
c0021567:	c3                   	ret    
c0021568:	b8 04 00 00 00       	mov    eax,0x4
c002156d:	c3                   	ret    

c002156e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002156e:	b8 01 00 00 00       	mov    eax,0x1
c0021573:	c3                   	ret    

c0021574 <ISO9660::unlink(char const*)>:
c0021574:	b8 01 00 00 00       	mov    eax,0x1
c0021579:	c3                   	ret    

c002157a <ISO9660::write(void*, unsigned long, void*, int*)>:
c002157a:	b8 01 00 00 00       	mov    eax,0x1
c002157f:	c3                   	ret    

c0021580 <ISO9660::rename(char const*, char const*)>:
c0021580:	b8 01 00 00 00       	mov    eax,0x1
c0021585:	c3                   	ret    

c0021586 <ISO9660::mkdir(char const*)>:
c0021586:	b8 01 00 00 00       	mov    eax,0x1
c002158b:	c3                   	ret    

c002158c <ISO9660::close(void*)>:
c002158c:	83 ec 0c             	sub    esp,0xc
c002158f:	b8 04 00 00 00       	mov    eax,0x4
c0021594:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021598:	85 d2                	test   edx,edx
c002159a:	74 0e                	je     c00215aa <ISO9660::close(void*)+0x1e>
c002159c:	83 ec 0c             	sub    esp,0xc
c002159f:	52                   	push   edx
c00215a0:	e8 ab e2 fe ff       	call   c000f850 <free>
c00215a5:	83 c4 10             	add    esp,0x10
c00215a8:	31 c0                	xor    eax,eax
c00215aa:	83 c4 0c             	add    esp,0xc
c00215ad:	c3                   	ret    

c00215ae <ISO9660::closeDir(void*)>:
c00215ae:	83 ec 0c             	sub    esp,0xc
c00215b1:	b8 04 00 00 00       	mov    eax,0x4
c00215b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215ba:	85 d2                	test   edx,edx
c00215bc:	74 0e                	je     c00215cc <ISO9660::closeDir(void*)+0x1e>
c00215be:	83 ec 0c             	sub    esp,0xc
c00215c1:	52                   	push   edx
c00215c2:	e8 89 e2 fe ff       	call   c000f850 <free>
c00215c7:	83 c4 10             	add    esp,0x10
c00215ca:	31 c0                	xor    eax,eax
c00215cc:	83 c4 0c             	add    esp,0xc
c00215cf:	c3                   	ret    

c00215d0 <ISO9660::~ISO9660()>:
c00215d0:	83 ec 0c             	sub    esp,0xc
c00215d3:	ba 2c c9 02 c0       	mov    edx,0xc002c92c
c00215d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215dc:	89 10                	mov    DWORD PTR [eax],edx
c00215de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e2:	83 ec 0c             	sub    esp,0xc
c00215e5:	50                   	push   eax
c00215e6:	e8 33 1b ff ff       	call   c001311e <Filesystem::~Filesystem()>
c00215eb:	83 c4 10             	add    esp,0x10
c00215ee:	90                   	nop
c00215ef:	83 c4 0c             	add    esp,0xc
c00215f2:	c3                   	ret    
c00215f3:	90                   	nop

c00215f4 <ISO9660::~ISO9660()>:
c00215f4:	83 ec 0c             	sub    esp,0xc
c00215f7:	83 ec 0c             	sub    esp,0xc
c00215fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215fe:	e8 cd ff ff ff       	call   c00215d0 <ISO9660::~ISO9660()>
c0021603:	83 c4 10             	add    esp,0x10
c0021606:	83 ec 08             	sub    esp,0x8
c0021609:	6a 08                	push   0x8
c002160b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002160f:	e8 02 17 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0021614:	83 c4 10             	add    esp,0x10
c0021617:	83 c4 0c             	add    esp,0xc
c002161a:	c3                   	ret    

c002161b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002161b:	55                   	push   ebp
c002161c:	31 c9                	xor    ecx,ecx
c002161e:	57                   	push   edi
c002161f:	56                   	push   esi
c0021620:	53                   	push   ebx
c0021621:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021625:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021629:	89 eb                	mov    ebx,ebp
c002162b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002162f:	39 ce                	cmp    esi,ecx
c0021631:	7e 17                	jle    c002164a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021633:	31 d2                	xor    edx,edx
c0021635:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021639:	7d 13                	jge    c002164e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002163b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002163f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021642:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021645:	75 0d                	jne    c0021654 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021647:	42                   	inc    edx
c0021648:	eb eb                	jmp    c0021635 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002164a:	31 c0                	xor    eax,eax
c002164c:	eb 0a                	jmp    c0021658 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002164e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021652:	eb 04                	jmp    c0021658 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021654:	41                   	inc    ecx
c0021655:	43                   	inc    ebx
c0021656:	eb d7                	jmp    c002162f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021658:	5b                   	pop    ebx
c0021659:	5e                   	pop    esi
c002165a:	5f                   	pop    edi
c002165b:	5d                   	pop    ebp
c002165c:	c3                   	ret    

c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002165d:	56                   	push   esi
c002165e:	53                   	push   ebx
c002165f:	52                   	push   edx
c0021660:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021668:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002166c:	39 0d 40 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b40,ecx
c0021672:	75 08                	jne    c002167c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021674:	38 05 94 d9 02 c0    	cmp    BYTE PTR ds:0xc002d994,al
c002167a:	74 2b                	je     c00216a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002167c:	83 ec 0c             	sub    esp,0xc
c002167f:	a2 94 d9 02 c0       	mov    ds:0xc002d994,al
c0021684:	68 60 1b 03 c0       	push   0xc0031b60
c0021689:	0f be c0             	movsx  eax,al
c002168c:	6a 01                	push   0x1
c002168e:	89 0d 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,ecx
c0021694:	31 db                	xor    ebx,ebx
c0021696:	53                   	push   ebx
c0021697:	51                   	push   ecx
c0021698:	ff 34 85 1c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16e4]
c002169f:	e8 62 4f ff ff       	call   c0016606 <LogicalDisk::read(unsigned long long, int, void*)>
c00216a4:	83 c4 20             	add    esp,0x20
c00216a7:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00216af:	c7 44 24 14 60 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031b60
c00216b7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00216bb:	58                   	pop    eax
c00216bc:	5b                   	pop    ebx
c00216bd:	5e                   	pop    esi
c00216be:	e9 81 f0 fd ff       	jmp    c0000744 <memcpy>
c00216c3:	90                   	nop

c00216c4 <ISO9660::tryMount(LogicalDisk*, int)>:
c00216c4:	81 ec 10 08 00 00    	sub    esp,0x810
c00216ca:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00216d1:	83 c0 41             	add    eax,0x41
c00216d4:	0f be c0             	movsx  eax,al
c00216d7:	50                   	push   eax
c00216d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216dc:	50                   	push   eax
c00216dd:	6a 10                	push   0x10
c00216df:	e8 79 ff ff ff       	call   c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216e4:	83 c4 10             	add    esp,0x10
c00216e7:	31 c0                	xor    eax,eax
c00216e9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00216ee:	75 1d                	jne    c002170d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216f0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00216f5:	75 16                	jne    c002170d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216f7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00216fc:	75 0f                	jne    c002170d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216fe:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021703:	75 08                	jne    c002170d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021705:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002170a:	0f 94 c0             	sete   al
c002170d:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021713:	c3                   	ret    

c0021714 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021714:	55                   	push   ebp
c0021715:	57                   	push   edi
c0021716:	56                   	push   esi
c0021717:	53                   	push   ebx
c0021718:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002171e:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021725:	85 ed                	test   ebp,ebp
c0021727:	0f 84 d6 01 00 00    	je     c0021903 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002172d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021735:	0f 84 c8 01 00 00    	je     c0021903 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002173b:	b8 01 00 00 00       	mov    eax,0x1
c0021740:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021744:	0f 85 be 01 00 00    	jne    c0021908 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002174a:	31 d2                	xor    edx,edx
c002174c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021753:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021756:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021759:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002175d:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021760:	89 04 24             	mov    DWORD PTR [esp],eax
c0021763:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021767:	01 f0                	add    eax,esi
c0021769:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002176c:	11 fa                	adc    edx,edi
c002176e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021772:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021776:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002177a:	19 d1                	sbb    ecx,edx
c002177c:	72 0a                	jb     c0021788 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002177e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021782:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021786:	eb 13                	jmp    c002179b <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002178c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021790:	29 f0                	sub    eax,esi
c0021792:	19 fa                	sbb    edx,edi
c0021794:	89 04 24             	mov    DWORD PTR [esp],eax
c0021797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002179b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002179e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00217a1:	0f a4 c2 0b          	shld   edx,eax,0xb
c00217a5:	51                   	push   ecx
c00217a6:	c1 e0 0b             	shl    eax,0xb
c00217a9:	01 c6                	add    esi,eax
c00217ab:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00217af:	11 d7                	adc    edi,edx
c00217b1:	50                   	push   eax
c00217b2:	89 fa                	mov    edx,edi
c00217b4:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00217b8:	89 f0                	mov    eax,esi
c00217ba:	53                   	push   ebx
c00217bb:	0f ac d0 0b          	shrd   eax,edx,0xb
c00217bf:	50                   	push   eax
c00217c0:	e8 98 fe ff ff       	call   c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217c9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00217cc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00217d0:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00217d6:	83 c4 10             	add    esp,0x10
c00217d9:	b8 00 08 00 00       	mov    eax,0x800
c00217de:	29 d0                	sub    eax,edx
c00217e0:	39 c1                	cmp    ecx,eax
c00217e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00217e6:	83 d9 00             	sbb    ecx,0x0
c00217e9:	7d 1c                	jge    c0021807 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00217eb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00217f0:	75 12                	jne    c0021804 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00217f2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00217f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217ff:	e9 fb 00 00 00       	jmp    c00218ff <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021804:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021807:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002180a:	31 d2                	xor    edx,edx
c002180c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021810:	39 c2                	cmp    edx,eax
c0021812:	7d 14                	jge    c0021828 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021814:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002181b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002181f:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021822:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021825:	42                   	inc    edx
c0021826:	eb e8                	jmp    c0021810 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021828:	89 c3                	mov    ebx,eax
c002182a:	85 c0                	test   eax,eax
c002182c:	79 02                	jns    c0021830 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002182e:	31 db                	xor    ebx,ebx
c0021830:	99                   	cdq    
c0021831:	01 c3                	add    ebx,eax
c0021833:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002183a:	01 c6                	add    esi,eax
c002183c:	11 d7                	adc    edi,edx
c002183e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021842:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021846:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021849:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002184d:	29 c6                	sub    esi,eax
c002184f:	19 d7                	sbb    edi,edx
c0021851:	89 34 24             	mov    DWORD PTR [esp],esi
c0021854:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021858:	b8 ff 07 00 00       	mov    eax,0x7ff
c002185d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021860:	b8 00 00 00 00       	mov    eax,0x0
c0021865:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021869:	7d 3e                	jge    c00218a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c002186b:	52                   	push   edx
c002186c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021870:	50                   	push   eax
c0021871:	53                   	push   ebx
c0021872:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002187a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002187e:	50                   	push   eax
c002187f:	e8 d9 fd ff ff       	call   c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021884:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002188c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021891:	81 c3 00 08 00 00    	add    ebx,0x800
c0021897:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002189f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00218a4:	83 c4 10             	add    esp,0x10
c00218a7:	eb af                	jmp    c0021858 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00218a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ad:	0b 04 24             	or     eax,DWORD PTR [esp]
c00218b0:	74 32                	je     c00218e4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00218b2:	50                   	push   eax
c00218b3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218b7:	50                   	push   eax
c00218b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00218bc:	50                   	push   eax
c00218bd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00218c1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00218c5:	0f ac fe 0b          	shrd   esi,edi,0xb
c00218c9:	56                   	push   esi
c00218ca:	e8 8e fd ff ff       	call   c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218cf:	83 c4 0c             	add    esp,0xc
c00218d2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00218d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00218da:	50                   	push   eax
c00218db:	53                   	push   ebx
c00218dc:	e8 63 ee fd ff       	call   c0000744 <memcpy>
c00218e1:	83 c4 10             	add    esp,0x10
c00218e4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218eb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218f3:	89 38                	mov    DWORD PTR [eax],edi
c00218f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218f9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00218fc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00218ff:	31 c0                	xor    eax,eax
c0021901:	eb 05                	jmp    c0021908 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021903:	b8 04 00 00 00       	mov    eax,0x4
c0021908:	81 c4 2c 08 00 00    	add    esp,0x82c
c002190e:	5b                   	pop    ebx
c002190f:	5e                   	pop    esi
c0021910:	5f                   	pop    edi
c0021911:	5d                   	pop    ebp
c0021912:	c3                   	ret    
c0021913:	90                   	nop

c0021914 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021914:	55                   	push   ebp
c0021915:	57                   	push   edi
c0021916:	56                   	push   esi
c0021917:	53                   	push   ebx
c0021918:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002191e:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021925:	85 f6                	test   esi,esi
c0021927:	0f 84 64 02 00 00    	je     c0021b91 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002192d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021935:	0f 84 56 02 00 00    	je     c0021b91 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002193b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c002193e:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021941:	75 0a                	jne    c002194d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021943:	b8 07 00 00 00       	mov    eax,0x7
c0021948:	e9 49 02 00 00       	jmp    c0021b96 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002194d:	50                   	push   eax
c002194e:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021952:	50                   	push   eax
c0021953:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002195a:	53                   	push   ebx
c002195b:	8b 06                	mov    eax,DWORD PTR [esi]
c002195d:	c1 e0 0b             	shl    eax,0xb
c0021960:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021963:	c1 e8 0b             	shr    eax,0xb
c0021966:	50                   	push   eax
c0021967:	e8 f1 fc ff ff       	call   c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002196c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002196f:	83 c4 10             	add    esp,0x10
c0021972:	89 c1                	mov    ecx,eax
c0021974:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021977:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002197d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021980:	84 db                	test   bl,bl
c0021982:	0f 85 90 00 00 00    	jne    c0021a18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021988:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c002198e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021994:	29 c7                	sub    edi,eax
c0021996:	89 fb                	mov    ebx,edi
c0021998:	c1 fb 1f             	sar    ebx,0x1f
c002199b:	01 f8                	add    eax,edi
c002199d:	11 da                	adc    edx,ebx
c002199f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00219a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00219a7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00219aa:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00219ad:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00219b0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00219b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00219b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219ba:	89 d8                	mov    eax,ebx
c00219bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00219bf:	ba 00 00 00 00       	mov    edx,0x0
c00219c4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219c8:	b8 00 00 00 00       	mov    eax,0x0
c00219cd:	73 0b                	jae    c00219da <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00219cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219d6:	29 f8                	sub    eax,edi
c00219d8:	19 da                	sbb    edx,ebx
c00219da:	89 d3                	mov    ebx,edx
c00219dc:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00219df:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00219e2:	09 c3                	or     ebx,eax
c00219e4:	0f 84 59 ff ff ff    	je     c0021943 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00219ea:	55                   	push   ebp
c00219eb:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00219ef:	50                   	push   eax
c00219f0:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00219f7:	53                   	push   ebx
c00219f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00219fa:	c1 e0 0b             	shl    eax,0xb
c00219fd:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021a01:	c1 e8 0b             	shr    eax,0xb
c0021a04:	50                   	push   eax
c0021a05:	e8 53 fc ff ff       	call   c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a0a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a0d:	83 c4 10             	add    esp,0x10
c0021a10:	25 ff 07 00 00       	and    eax,0x7ff
c0021a15:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021a18:	57                   	push   edi
c0021a19:	6a 28                	push   0x28
c0021a1b:	6a 00                	push   0x0
c0021a1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a21:	50                   	push   eax
c0021a22:	e8 51 ed fd ff       	call   c0000778 <memset>
c0021a27:	31 d2                	xor    edx,edx
c0021a29:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021a2c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a32:	89 f8                	mov    eax,edi
c0021a34:	83 c0 21             	add    eax,0x21
c0021a37:	83 d2 00             	adc    edx,0x0
c0021a3a:	89 c7                	mov    edi,eax
c0021a3c:	89 d5                	mov    ebp,edx
c0021a3e:	83 c4 10             	add    esp,0x10
c0021a41:	31 c9                	xor    ecx,ecx
c0021a43:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021a4a:	83 f9 28             	cmp    ecx,0x28
c0021a4d:	88 04 24             	mov    BYTE PTR [esp],al
c0021a50:	0f 94 c2             	sete   dl
c0021a53:	88 d0                	mov    al,dl
c0021a55:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a5a:	39 fa                	cmp    edx,edi
c0021a5c:	ba 00 00 00 00       	mov    edx,0x0
c0021a61:	19 ea                	sbb    edx,ebp
c0021a63:	0f 92 c2             	setb   dl
c0021a66:	09 c2                	or     edx,eax
c0021a68:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a6c:	0f 94 c0             	sete   al
c0021a6f:	08 d0                	or     al,dl
c0021a71:	75 16                	jne    c0021a89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a73:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a77:	74 10                	je     c0021a89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a79:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a7c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a80:	41                   	inc    ecx
c0021a81:	83 c7 01             	add    edi,0x1
c0021a84:	83 d5 00             	adc    ebp,0x0
c0021a87:	eb ba                	jmp    c0021a43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021a89:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a90:	83 ec 0c             	sub    esp,0xc
c0021a93:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021a97:	57                   	push   edi
c0021a98:	e8 f7 ec fd ff       	call   c0000794 <strlen>
c0021a9d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021aa5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021aa9:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021ab0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ab3:	5a                   	pop    edx
c0021ab4:	25 ff 07 00 00       	and    eax,0x7ff
c0021ab9:	01 c8                	add    eax,ecx
c0021abb:	59                   	pop    ecx
c0021abc:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021ac2:	83 e0 02             	and    eax,0x2
c0021ac5:	3c 01                	cmp    al,0x1
c0021ac7:	19 c0                	sbb    eax,eax
c0021ac9:	83 c0 02             	add    eax,0x2
c0021acc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ad0:	57                   	push   edi
c0021ad1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021ad5:	50                   	push   eax
c0021ad6:	e8 59 ed fd ff       	call   c0000834 <strcpy>
c0021adb:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021adf:	83 c4 10             	add    esp,0x10
c0021ae2:	84 c0                	test   al,al
c0021ae4:	75 21                	jne    c0021b07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021ae6:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021aee:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021af6:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021afe:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021b05:	eb 28                	jmp    c0021b2f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021b07:	fe c8                	dec    al
c0021b09:	75 24                	jne    c0021b2f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021b0b:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021b13:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b1b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b23:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021b2a:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021b2f:	0f b6 fb             	movzx  edi,bl
c0021b32:	31 db                	xor    ebx,ebx
c0021b34:	50                   	push   eax
c0021b35:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021b3c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021b40:	50                   	push   eax
c0021b41:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021b48:	e8 f7 eb fd ff       	call   c0000744 <memcpy>
c0021b4d:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021b54:	89 f9                	mov    ecx,edi
c0021b56:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b5c:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021b5f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b62:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021b65:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b68:	83 c4 10             	add    esp,0x10
c0021b6b:	39 c7                	cmp    edi,eax
c0021b6d:	89 df                	mov    edi,ebx
c0021b6f:	19 d7                	sbb    edi,edx
c0021b71:	72 10                	jb     c0021b83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b73:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021b7a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021b81:	eb 0a                	jmp    c0021b8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021b83:	29 c8                	sub    eax,ecx
c0021b85:	19 da                	sbb    edx,ebx
c0021b87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b8d:	31 c0                	xor    eax,eax
c0021b8f:	eb 05                	jmp    c0021b96 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b91:	b8 04 00 00 00       	mov    eax,0x4
c0021b96:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021b9c:	5b                   	pop    ebx
c0021b9d:	5e                   	pop    esi
c0021b9e:	5f                   	pop    edi
c0021b9f:	5d                   	pop    ebp
c0021ba0:	c3                   	ret    

c0021ba1 <readRoot(unsigned int*, unsigned int*, char)>:
c0021ba1:	81 ec 40 08 00 00    	sub    esp,0x840
c0021ba7:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021baf:	50                   	push   eax
c0021bb0:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021bb4:	50                   	push   eax
c0021bb5:	6a 10                	push   0x10
c0021bb7:	e8 a1 fa ff ff       	call   c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bbc:	83 c4 0c             	add    esp,0xc
c0021bbf:	6a 22                	push   0x22
c0021bc1:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021bc8:	50                   	push   eax
c0021bc9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021bcd:	50                   	push   eax
c0021bce:	e8 71 eb fd ff       	call   c0000744 <memcpy>
c0021bd3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bda:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bde:	89 10                	mov    DWORD PTR [eax],edx
c0021be0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021be7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021beb:	89 10                	mov    DWORD PTR [eax],edx
c0021bed:	b0 01                	mov    al,0x1
c0021bef:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021bf5:	c3                   	ret    

c0021bf6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021bf6:	55                   	push   ebp
c0021bf7:	57                   	push   edi
c0021bf8:	56                   	push   esi
c0021bf9:	53                   	push   ebx
c0021bfa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c00:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021c07:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021c0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c12:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021c16:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021c1a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021c1e:	75 03                	jne    c0021c23 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c20:	83 c3 02             	add    ebx,0x2
c0021c23:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021c26:	75 03                	jne    c0021c2b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021c28:	43                   	inc    ebx
c0021c29:	eb f8                	jmp    c0021c23 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c2b:	51                   	push   ecx
c0021c2c:	68 00 01 00 00       	push   0x100
c0021c31:	6a 00                	push   0x0
c0021c33:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c37:	50                   	push   eax
c0021c38:	e8 3b eb fd ff       	call   c0000778 <memset>
c0021c3d:	83 c4 10             	add    esp,0x10
c0021c40:	31 d2                	xor    edx,edx
c0021c42:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021c45:	84 c0                	test   al,al
c0021c47:	74 21                	je     c0021c6a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021c49:	3c 2f                	cmp    al,0x2f
c0021c4b:	75 0b                	jne    c0021c58 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021c4d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021c51:	bd 01 00 00 00       	mov    ebp,0x1
c0021c56:	eb 14                	jmp    c0021c6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c58:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c5b:	80 f9 19             	cmp    cl,0x19
c0021c5e:	77 03                	ja     c0021c63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c60:	83 e8 20             	sub    eax,0x20
c0021c63:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c67:	42                   	inc    edx
c0021c68:	eb d8                	jmp    c0021c42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c6a:	31 ed                	xor    ebp,ebp
c0021c6c:	83 ec 0c             	sub    esp,0xc
c0021c6f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c76:	e8 c5 db fe ff       	call   c000f840 <malloc>
c0021c7b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c82:	89 c6                	mov    esi,eax
c0021c84:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c8a:	c1 ef 0b             	shr    edi,0xb
c0021c8d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c94:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c98:	83 c4 10             	add    esp,0x10
c0021c9b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021ca0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ca4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021cab:	74 28                	je     c0021cd5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021cad:	52                   	push   edx
c0021cae:	57                   	push   edi
c0021caf:	50                   	push   eax
c0021cb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cb4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021cbb:	e8 9d f9 ff ff       	call   c002165d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021cc4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ccb:	05 00 08 00 00       	add    eax,0x800
c0021cd0:	83 c4 10             	add    esp,0x10
c0021cd3:	eb cb                	jmp    c0021ca0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021cd5:	83 ec 0c             	sub    esp,0xc
c0021cd8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021cdc:	57                   	push   edi
c0021cdd:	e8 b2 ea fd ff       	call   c0000794 <strlen>
c0021ce2:	50                   	push   eax
c0021ce3:	57                   	push   edi
c0021ce4:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ceb:	56                   	push   esi
c0021cec:	e8 2a f9 ff ff       	call   c002161b <__memmem(unsigned char*, int, unsigned char*, int)>
c0021cf1:	83 c4 20             	add    esp,0x20
c0021cf4:	85 c0                	test   eax,eax
c0021cf6:	75 13                	jne    c0021d0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021cf8:	83 ec 0c             	sub    esp,0xc
c0021cfb:	56                   	push   esi
c0021cfc:	e8 4f db fe ff       	call   c000f850 <free>
c0021d01:	83 c4 10             	add    esp,0x10
c0021d04:	31 c0                	xor    eax,eax
c0021d06:	e9 b3 00 00 00       	jmp    c0021dbe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d0b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021d0f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021d13:	c1 e7 08             	shl    edi,0x8
c0021d16:	c1 e2 10             	shl    edx,0x10
c0021d19:	09 d7                	or     edi,edx
c0021d1b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021d1f:	09 d7                	or     edi,edx
c0021d21:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021d25:	c1 e2 18             	shl    edx,0x18
c0021d28:	09 d7                	or     edi,edx
c0021d2a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021d2e:	89 d1                	mov    ecx,edx
c0021d30:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021d34:	c1 e1 08             	shl    ecx,0x8
c0021d37:	c1 e2 10             	shl    edx,0x10
c0021d3a:	09 ca                	or     edx,ecx
c0021d3c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021d40:	09 ca                	or     edx,ecx
c0021d42:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021d46:	c1 e1 18             	shl    ecx,0x18
c0021d49:	09 ca                	or     edx,ecx
c0021d4b:	89 e9                	mov    ecx,ebp
c0021d4d:	84 c9                	test   cl,cl
c0021d4f:	74 3c                	je     c0021d8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021d51:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d55:	83 ec 0c             	sub    esp,0xc
c0021d58:	56                   	push   esi
c0021d59:	e8 f2 da fe ff       	call   c000f850 <free>
c0021d5e:	83 c4 0c             	add    esp,0xc
c0021d61:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d68:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d6d:	50                   	push   eax
c0021d6e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d75:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d80:	52                   	push   edx
c0021d81:	57                   	push   edi
c0021d82:	53                   	push   ebx
c0021d83:	e8 6e fe ff ff       	call   c0021bf6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d88:	83 c4 20             	add    esp,0x20
c0021d8b:	eb 31                	jmp    c0021dbe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d8d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d90:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d97:	d0 e8                	shr    al,1
c0021d99:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d9b:	83 e0 01             	and    eax,0x1
c0021d9e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021da5:	83 ec 0c             	sub    esp,0xc
c0021da8:	89 13                	mov    DWORD PTR [ebx],edx
c0021daa:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021db1:	89 03                	mov    DWORD PTR [ebx],eax
c0021db3:	56                   	push   esi
c0021db4:	e8 97 da fe ff       	call   c000f850 <free>
c0021db9:	83 c4 10             	add    esp,0x10
c0021dbc:	b0 01                	mov    al,0x1
c0021dbe:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021dc4:	5b                   	pop    ebx
c0021dc5:	5e                   	pop    esi
c0021dc6:	5f                   	pop    edi
c0021dc7:	5d                   	pop    ebp
c0021dc8:	c3                   	ret    

c0021dc9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021dc9:	55                   	push   ebp
c0021dca:	57                   	push   edi
c0021dcb:	56                   	push   esi
c0021dcc:	53                   	push   ebx
c0021dcd:	83 ec 20             	sub    esp,0x20
c0021dd0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021dd4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021dd8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ddc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021de4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021dec:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021df1:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021df7:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021dfd:	57                   	push   edi
c0021dfe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e02:	50                   	push   eax
c0021e03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e07:	50                   	push   eax
c0021e08:	e8 94 fd ff ff       	call   c0021ba1 <readRoot(unsigned int*, unsigned int*, char)>
c0021e0d:	5a                   	pop    edx
c0021e0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021e12:	e8 7d e9 fd ff       	call   c0000794 <strlen>
c0021e17:	83 c4 10             	add    esp,0x10
c0021e1a:	83 f8 03             	cmp    eax,0x3
c0021e1d:	77 17                	ja     c0021e36 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e23:	89 03                	mov    DWORD PTR [ebx],eax
c0021e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e29:	89 06                	mov    DWORD PTR [esi],eax
c0021e2b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021e32:	b0 01                	mov    al,0x1
c0021e34:	eb 19                	jmp    c0021e4f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021e36:	50                   	push   eax
c0021e37:	55                   	push   ebp
c0021e38:	57                   	push   edi
c0021e39:	56                   	push   esi
c0021e3a:	53                   	push   ebx
c0021e3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e43:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e47:	e8 aa fd ff ff       	call   c0021bf6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e4c:	83 c4 20             	add    esp,0x20
c0021e4f:	83 c4 1c             	add    esp,0x1c
c0021e52:	5b                   	pop    ebx
c0021e53:	5e                   	pop    esi
c0021e54:	5f                   	pop    edi
c0021e55:	5d                   	pop    ebp
c0021e56:	c3                   	ret    
c0021e57:	90                   	nop

c0021e58 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e58:	57                   	push   edi
c0021e59:	56                   	push   esi
c0021e5a:	53                   	push   ebx
c0021e5b:	83 ec 10             	sub    esp,0x10
c0021e5e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e62:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e66:	85 ff                	test   edi,edi
c0021e68:	0f 84 9d 00 00 00    	je     c0021f0b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e6e:	85 f6                	test   esi,esi
c0021e70:	0f 84 95 00 00 00    	je     c0021f0b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e76:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e7b:	74 17                	je     c0021e94 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021e7d:	83 ec 0c             	sub    esp,0xc
c0021e80:	68 e3 c8 02 c0       	push   0xc002c8e3
c0021e85:	e8 6c 0f ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0021e8a:	83 c4 10             	add    esp,0x10
c0021e8d:	b8 03 00 00 00       	mov    eax,0x3
c0021e92:	eb 7c                	jmp    c0021f10 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021e94:	83 ec 0c             	sub    esp,0xc
c0021e97:	6a 1c                	push   0x1c
c0021e99:	e8 a2 d9 fe ff       	call   c000f840 <malloc>
c0021e9e:	89 07                	mov    DWORD PTR [edi],eax
c0021ea0:	89 c3                	mov    ebx,eax
c0021ea2:	58                   	pop    eax
c0021ea3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ea7:	50                   	push   eax
c0021ea8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021eab:	50                   	push   eax
c0021eac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021eb0:	50                   	push   eax
c0021eb1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021eb5:	50                   	push   eax
c0021eb6:	56                   	push   esi
c0021eb7:	e8 0d ff ff ff       	call   c0021dc9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ebc:	83 c4 20             	add    esp,0x20
c0021ebf:	84 c0                	test   al,al
c0021ec1:	74 07                	je     c0021eca <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021ec3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ec8:	74 0b                	je     c0021ed5 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021eca:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ece:	b8 01 00 00 00       	mov    eax,0x1
c0021ed3:	eb 3b                	jmp    c0021f10 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ed5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ed9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021edd:	89 03                	mov    DWORD PTR [ebx],eax
c0021edf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021eea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021ef1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ef8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021efb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021f02:	8a 06                	mov    al,BYTE PTR [esi]
c0021f04:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021f07:	31 c0                	xor    eax,eax
c0021f09:	eb 05                	jmp    c0021f10 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f0b:	b8 04 00 00 00       	mov    eax,0x4
c0021f10:	83 c4 10             	add    esp,0x10
c0021f13:	5b                   	pop    ebx
c0021f14:	5e                   	pop    esi
c0021f15:	5f                   	pop    edi
c0021f16:	c3                   	ret    
c0021f17:	90                   	nop

c0021f18 <ISO9660::exists(char const*)>:
c0021f18:	83 ec 28             	sub    esp,0x28
c0021f1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f1f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021f23:	52                   	push   edx
c0021f24:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021f27:	52                   	push   edx
c0021f28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f2c:	52                   	push   edx
c0021f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f31:	52                   	push   edx
c0021f32:	50                   	push   eax
c0021f33:	e8 91 fe ff ff       	call   c0021dc9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f38:	83 c4 3c             	add    esp,0x3c
c0021f3b:	c3                   	ret    

c0021f3c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021f3c:	56                   	push   esi
c0021f3d:	53                   	push   ebx
c0021f3e:	83 ec 14             	sub    esp,0x14
c0021f41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021f45:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021f49:	85 db                	test   ebx,ebx
c0021f4b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f4f:	0f 94 c2             	sete   dl
c0021f52:	85 f6                	test   esi,esi
c0021f54:	0f 94 c0             	sete   al
c0021f57:	08 c2                	or     dl,al
c0021f59:	75 68                	jne    c0021fc3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f5b:	85 c9                	test   ecx,ecx
c0021f5d:	74 64                	je     c0021fc3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f5f:	83 ec 0c             	sub    esp,0xc
c0021f62:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f69:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f6f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f76:	50                   	push   eax
c0021f77:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f7a:	50                   	push   eax
c0021f7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f7f:	50                   	push   eax
c0021f80:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f84:	50                   	push   eax
c0021f85:	51                   	push   ecx
c0021f86:	e8 3e fe ff ff       	call   c0021dc9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f8b:	83 c4 20             	add    esp,0x20
c0021f8e:	ba 01 00 00 00       	mov    edx,0x1
c0021f93:	84 c0                	test   al,al
c0021f95:	74 31                	je     c0021fc8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f9b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fa2:	89 03                	mov    DWORD PTR [ebx],eax
c0021fa4:	ba 00 00 00 00       	mov    edx,0x0
c0021fa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fad:	85 c0                	test   eax,eax
c0021faf:	0f 95 06             	setne  BYTE PTR [esi]
c0021fb2:	74 14                	je     c0021fc8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fb4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021fba:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fc1:	eb 05                	jmp    c0021fc8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fc3:	ba 04 00 00 00       	mov    edx,0x4
c0021fc8:	83 c4 14             	add    esp,0x14
c0021fcb:	89 d0                	mov    eax,edx
c0021fcd:	5b                   	pop    ebx
c0021fce:	5e                   	pop    esi
c0021fcf:	c3                   	ret    

c0021fd0 <ISO9660::openDir(char const*, void**)>:
c0021fd0:	57                   	push   edi
c0021fd1:	56                   	push   esi
c0021fd2:	53                   	push   ebx
c0021fd3:	83 ec 10             	sub    esp,0x10
c0021fd6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fda:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fde:	85 ff                	test   edi,edi
c0021fe0:	0f 84 95 00 00 00    	je     c002207b <ISO9660::openDir(char const*, void**)+0xab>
c0021fe6:	85 f6                	test   esi,esi
c0021fe8:	0f 84 8d 00 00 00    	je     c002207b <ISO9660::openDir(char const*, void**)+0xab>
c0021fee:	83 ec 0c             	sub    esp,0xc
c0021ff1:	6a 1c                	push   0x1c
c0021ff3:	e8 48 d8 fe ff       	call   c000f840 <malloc>
c0021ff8:	89 07                	mov    DWORD PTR [edi],eax
c0021ffa:	89 c3                	mov    ebx,eax
c0021ffc:	59                   	pop    ecx
c0021ffd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022001:	50                   	push   eax
c0022002:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022005:	50                   	push   eax
c0022006:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002200a:	50                   	push   eax
c002200b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002200f:	50                   	push   eax
c0022010:	56                   	push   esi
c0022011:	e8 b3 fd ff ff       	call   c0021dc9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022016:	83 c4 20             	add    esp,0x20
c0022019:	84 c0                	test   al,al
c002201b:	74 07                	je     c0022024 <ISO9660::openDir(char const*, void**)+0x54>
c002201d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022022:	75 21                	jne    c0022045 <ISO9660::openDir(char const*, void**)+0x75>
c0022024:	0f b6 c0             	movzx  eax,al
c0022027:	52                   	push   edx
c0022028:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002202c:	50                   	push   eax
c002202d:	68 09 c9 02 c0       	push   0xc002c909
c0022032:	e8 bf 0d ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0022037:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002203b:	83 c4 10             	add    esp,0x10
c002203e:	b8 01 00 00 00       	mov    eax,0x1
c0022043:	eb 3b                	jmp    c0022080 <ISO9660::openDir(char const*, void**)+0xb0>
c0022045:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022049:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002204d:	89 03                	mov    DWORD PTR [ebx],eax
c002204f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022056:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002205a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022061:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022068:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002206b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022072:	8a 06                	mov    al,BYTE PTR [esi]
c0022074:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022077:	31 c0                	xor    eax,eax
c0022079:	eb 05                	jmp    c0022080 <ISO9660::openDir(char const*, void**)+0xb0>
c002207b:	b8 04 00 00 00       	mov    eax,0x4
c0022080:	83 c4 10             	add    esp,0x10
c0022083:	5b                   	pop    ebx
c0022084:	5e                   	pop    esi
c0022085:	5f                   	pop    edi
c0022086:	c3                   	ret    
c0022087:	90                   	nop

c0022088 <ISO9660::ISO9660()>:
c0022088:	83 ec 0c             	sub    esp,0xc
c002208b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208f:	83 ec 0c             	sub    esp,0xc
c0022092:	50                   	push   eax
c0022093:	e8 62 10 ff ff       	call   c00130fa <Filesystem::Filesystem()>
c0022098:	83 c4 10             	add    esp,0x10
c002209b:	ba 2c c9 02 c0       	mov    edx,0xc002c92c
c00220a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a4:	89 10                	mov    DWORD PTR [eax],edx
c00220a6:	90                   	nop
c00220a7:	83 c4 0c             	add    esp,0xc
c00220aa:	c3                   	ret    
c00220ab:	90                   	nop

c00220ac <SoundChannel::~SoundChannel()>:
c00220ac:	83 ec 0c             	sub    esp,0xc
c00220af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00220b6:	83 ec 0c             	sub    esp,0xc
c00220b9:	50                   	push   eax
c00220ba:	e8 91 d7 fe ff       	call   c000f850 <free>
c00220bf:	83 c4 10             	add    esp,0x10
c00220c2:	90                   	nop
c00220c3:	83 c4 0c             	add    esp,0xc
c00220c6:	c3                   	ret    
c00220c7:	90                   	nop

c00220c8 <SoundChannel::setSpeed(float)>:
c00220c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220d0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00220d3:	c3                   	ret    

c00220d4 <SoundChannel::getSpeed()>:
c00220d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00220db:	c3                   	ret    

c00220dc <SoundChannel::setVolume(int)>:
c00220dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220e0:	83 f8 64             	cmp    eax,0x64
c00220e3:	7e 05                	jle    c00220ea <SoundChannel::setVolume(int)+0xe>
c00220e5:	b8 64 00 00 00       	mov    eax,0x64
c00220ea:	85 c0                	test   eax,eax
c00220ec:	79 02                	jns    c00220f0 <SoundChannel::setVolume(int)+0x14>
c00220ee:	31 c0                	xor    eax,eax
c00220f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220f4:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00220f7:	c3                   	ret    

c00220f8 <SoundChannel::getVolume()>:
c00220f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220fc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00220ff:	c3                   	ret    

c0022100 <SoundChannel::pause()>:
c0022100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022104:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022108:	c3                   	ret    
c0022109:	90                   	nop

c002210a <SoundChannel::SoundChannel(int, int, int, int)>:
c002210a:	83 ec 1c             	sub    esp,0x1c
c002210d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022111:	e8 ea ff ff ff       	call   c0022100 <SoundChannel::pause()>
c0022116:	83 c4 04             	add    esp,0x4
c0022119:	6a 50                	push   0x50
c002211b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002211f:	e8 b8 ff ff ff       	call   c00220dc <SoundChannel::setVolume(int)>
c0022124:	83 c4 08             	add    esp,0x8
c0022127:	a1 a4 c9 02 c0       	mov    eax,ds:0xc002c9a4
c002212c:	50                   	push   eax
c002212d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022131:	e8 92 ff ff ff       	call   c00220c8 <SoundChannel::setSpeed(float)>
c0022136:	83 c4 08             	add    esp,0x8
c0022139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002213d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022141:	89 10                	mov    DWORD PTR [eax],edx
c0022143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022147:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002214b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002214e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022152:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022156:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022159:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002215e:	75 23                	jne    c0022183 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022164:	8b 10                	mov    edx,DWORD PTR [eax]
c0022166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002216a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002216d:	0f af c2             	imul   eax,edx
c0022170:	85 c0                	test   eax,eax
c0022172:	79 03                	jns    c0022177 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022174:	83 c0 03             	add    eax,0x3
c0022177:	c1 f8 02             	sar    eax,0x2
c002217a:	05 a0 0f 00 00       	add    eax,0xfa0
c002217f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022187:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002218b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002218e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022192:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022199:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002219d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00221a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00221ab:	c1 e0 02             	shl    eax,0x2
c00221ae:	83 ec 0c             	sub    esp,0xc
c00221b1:	50                   	push   eax
c00221b2:	e8 89 d6 fe ff       	call   c000f840 <malloc>
c00221b7:	83 c4 10             	add    esp,0x10
c00221ba:	89 c2                	mov    edx,eax
c00221bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00221c3:	83 ec 04             	sub    esp,0x4
c00221c6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221ca:	50                   	push   eax
c00221cb:	6a 01                	push   0x1
c00221cd:	6a 04                	push   0x4
c00221cf:	e8 cb 69 fe ff       	call   c0008b9f <src_new>
c00221d4:	83 c4 10             	add    esp,0x10
c00221d7:	89 c2                	mov    edx,eax
c00221d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00221e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e4:	85 c0                	test   eax,eax
c00221e6:	74 10                	je     c00221f8 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00221e8:	83 ec 0c             	sub    esp,0xc
c00221eb:	68 88 c9 02 c0       	push   0xc002c988
c00221f0:	e8 a2 82 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00221f5:	83 c4 10             	add    esp,0x10
c00221f8:	a0 60 27 03 c0       	mov    al,ds:0xc0032760
c00221fd:	83 f0 01             	xor    eax,0x1
c0022200:	84 c0                	test   al,al
c0022202:	74 57                	je     c002225b <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022204:	a1 a8 c9 02 c0       	mov    eax,ds:0xc002c9a8
c0022209:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002220d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022215:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002221d:	7f 35                	jg     c0022254 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002221f:	83 ec 0c             	sub    esp,0xc
c0022222:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022226:	e8 9c 4f 00 00       	call   c00271c7 <__floatsisf>
c002222b:	83 c4 10             	add    esp,0x10
c002222e:	8b 15 a8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9a8
c0022234:	83 ec 08             	sub    esp,0x8
c0022237:	52                   	push   edx
c0022238:	50                   	push   eax
c0022239:	e8 9b 4b 00 00       	call   c0026dd9 <__mulsf3>
c002223e:	83 c4 10             	add    esp,0x10
c0022241:	89 c2                	mov    edx,eax
c0022243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022247:	89 14 85 60 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdca0],edx
c002224e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022252:	eb c1                	jmp    c0022215 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022254:	c6 05 60 27 03 c0 01 	mov    BYTE PTR ds:0xc0032760,0x1
c002225b:	90                   	nop
c002225c:	83 c4 1c             	add    esp,0x1c
c002225f:	c3                   	ret    

c0022260 <SoundChannel::play()>:
c0022260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022264:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022268:	c3                   	ret    
c0022269:	90                   	nop

c002226a <SoundChannel::paused()>:
c002226a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002226e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022271:	c3                   	ret    

c0022272 <SoundChannel::getSampleRate()>:
c0022272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022276:	8b 00                	mov    eax,DWORD PTR [eax]
c0022278:	c3                   	ret    
c0022279:	90                   	nop

c002227a <SoundChannel::getBits()>:
c002227a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002227e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022281:	c3                   	ret    

c0022282 <SoundChannel::getBufferUsed()>:
c0022282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022286:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022289:	c3                   	ret    

c002228a <SoundChannel::getBufferSize()>:
c002228a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002228e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022291:	c3                   	ret    

c0022292 <SoundChannel::unbuffer(float*, int, int)>:
c0022292:	56                   	push   esi
c0022293:	53                   	push   ebx
c0022294:	83 ec 40             	sub    esp,0x40
c0022297:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002229b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002229e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222a2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00222a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00222a9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00222ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00222b1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00222b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00222b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00222bd:	e8 05 4f 00 00       	call   c00271c7 <__floatsisf>
c00222c2:	5a                   	pop    edx
c00222c3:	89 c6                	mov    esi,eax
c00222c5:	ff 33                	push   DWORD PTR [ebx]
c00222c7:	e8 fb 4e 00 00       	call   c00271c7 <__floatsisf>
c00222cc:	59                   	pop    ecx
c00222cd:	5a                   	pop    edx
c00222ce:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00222d1:	50                   	push   eax
c00222d2:	e8 02 4b 00 00       	call   c0026dd9 <__mulsf3>
c00222d7:	59                   	pop    ecx
c00222d8:	5a                   	pop    edx
c00222d9:	50                   	push   eax
c00222da:	56                   	push   esi
c00222db:	e8 bc 4c 00 00       	call   c0026f9c <__divsf3>
c00222e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00222e3:	e8 af 61 00 00       	call   c0028497 <__extendsfdf2>
c00222e8:	59                   	pop    ecx
c00222e9:	5e                   	pop    esi
c00222ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00222f2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00222fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00222fe:	50                   	push   eax
c00222ff:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022302:	e8 8d 64 fe ff       	call   c0008794 <src_process>
c0022307:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002230b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002230e:	83 c4 0c             	add    esp,0xc
c0022311:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022314:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022317:	29 d0                	sub    eax,edx
c0022319:	c1 e0 02             	shl    eax,0x2
c002231c:	50                   	push   eax
c002231d:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022320:	50                   	push   eax
c0022321:	51                   	push   ecx
c0022322:	e8 55 e3 fd ff       	call   c000067c <memmove>
c0022327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002232b:	83 c4 44             	add    esp,0x44
c002232e:	5b                   	pop    ebx
c002232f:	5e                   	pop    esi
c0022330:	c3                   	ret    
c0022331:	90                   	nop

c0022332 <SoundChannel::buffer8(unsigned char*, int)>:
c0022332:	55                   	push   ebp
c0022333:	57                   	push   edi
c0022334:	56                   	push   esi
c0022335:	53                   	push   ebx
c0022336:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002233a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002233e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022341:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022345:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022348:	74 7a                	je     c00223c4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002234a:	85 ff                	test   edi,edi
c002234c:	7e 76                	jle    c00223c4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002234e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022352:	8d 70 01             	lea    esi,[eax+0x1]
c0022355:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022358:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002235b:	8b 1c 9d 60 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdca0]
c0022362:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022365:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022368:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002236b:	74 5e                	je     c00223cb <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002236d:	83 ff 01             	cmp    edi,0x1
c0022370:	74 4b                	je     c00223bd <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022372:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022376:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022379:	8d 70 01             	lea    esi,[eax+0x1]
c002237c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002237f:	8b 1c 9d 60 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdca0]
c0022386:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022389:	b8 02 00 00 00       	mov    eax,0x2
c002238e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022391:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022394:	75 23                	jne    c00223b9 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022396:	eb 27                	jmp    c00223bf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022398:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002239d:	8d 71 01             	lea    esi,[ecx+0x1]
c00223a0:	40                   	inc    eax
c00223a1:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00223a4:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00223a7:	8b 1c 9d 60 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdca0]
c00223ae:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00223b1:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00223b4:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00223b7:	74 06                	je     c00223bf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00223b9:	39 c7                	cmp    edi,eax
c00223bb:	75 db                	jne    c0022398 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00223bd:	89 f8                	mov    eax,edi
c00223bf:	5b                   	pop    ebx
c00223c0:	5e                   	pop    esi
c00223c1:	5f                   	pop    edi
c00223c2:	5d                   	pop    ebp
c00223c3:	c3                   	ret    
c00223c4:	5b                   	pop    ebx
c00223c5:	31 c0                	xor    eax,eax
c00223c7:	5e                   	pop    esi
c00223c8:	5f                   	pop    edi
c00223c9:	5d                   	pop    ebp
c00223ca:	c3                   	ret    
c00223cb:	b8 01 00 00 00       	mov    eax,0x1
c00223d0:	eb ed                	jmp    c00223bf <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00223d2 <SoundDevice::SoundDevice(char const*)>:
c00223d2:	83 ec 1c             	sub    esp,0x1c
c00223d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223d9:	83 ec 08             	sub    esp,0x8
c00223dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00223e0:	50                   	push   eax
c00223e1:	e8 26 20 ff ff       	call   c001440c <Device::Device(char const*)>
c00223e6:	83 c4 10             	add    esp,0x10
c00223e9:	ba b4 c9 02 c0       	mov    edx,0xc002c9b4
c00223ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f2:	89 10                	mov    DWORD PTR [eax],edx
c00223f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f8:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022406:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022410:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022418:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002241d:	7f 19                	jg     c0022438 <SoundDevice::SoundDevice(char const*)+0x66>
c002241f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022423:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022427:	83 c2 54             	add    edx,0x54
c002242a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022432:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022436:	eb e0                	jmp    c0022418 <SoundDevice::SoundDevice(char const*)+0x46>
c0022438:	90                   	nop
c0022439:	83 c4 1c             	add    esp,0x1c
c002243c:	c3                   	ret    
c002243d:	90                   	nop

c002243e <SoundDevice::~SoundDevice()>:
c002243e:	53                   	push   ebx
c002243f:	83 ec 18             	sub    esp,0x18
c0022442:	ba b4 c9 02 c0       	mov    edx,0xc002c9b4
c0022447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002244b:	89 10                	mov    DWORD PTR [eax],edx
c002244d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022455:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002245a:	7f 46                	jg     c00224a2 <SoundDevice::~SoundDevice()+0x64>
c002245c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022460:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022464:	83 c2 54             	add    edx,0x54
c0022467:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002246b:	85 c0                	test   eax,eax
c002246d:	74 2d                	je     c002249c <SoundDevice::~SoundDevice()+0x5e>
c002246f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022473:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022477:	83 c2 54             	add    edx,0x54
c002247a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002247e:	85 db                	test   ebx,ebx
c0022480:	74 1a                	je     c002249c <SoundDevice::~SoundDevice()+0x5e>
c0022482:	83 ec 0c             	sub    esp,0xc
c0022485:	53                   	push   ebx
c0022486:	e8 21 fc ff ff       	call   c00220ac <SoundChannel::~SoundChannel()>
c002248b:	83 c4 10             	add    esp,0x10
c002248e:	83 ec 08             	sub    esp,0x8
c0022491:	6a 2c                	push   0x2c
c0022493:	53                   	push   ebx
c0022494:	e8 7d 08 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0022499:	83 c4 10             	add    esp,0x10
c002249c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00224a0:	eb b3                	jmp    c0022455 <SoundDevice::~SoundDevice()+0x17>
c00224a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224a6:	83 ec 0c             	sub    esp,0xc
c00224a9:	50                   	push   eax
c00224aa:	e8 3f 1c ff ff       	call   c00140ee <Device::~Device()>
c00224af:	83 c4 10             	add    esp,0x10
c00224b2:	90                   	nop
c00224b3:	83 c4 18             	add    esp,0x18
c00224b6:	5b                   	pop    ebx
c00224b7:	c3                   	ret    

c00224b8 <SoundDevice::~SoundDevice()>:
c00224b8:	83 ec 0c             	sub    esp,0xc
c00224bb:	83 ec 0c             	sub    esp,0xc
c00224be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224c2:	e8 77 ff ff ff       	call   c002243e <SoundDevice::~SoundDevice()>
c00224c7:	83 c4 10             	add    esp,0x10
c00224ca:	83 ec 08             	sub    esp,0x8
c00224cd:	68 e4 01 00 00       	push   0x1e4
c00224d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224d6:	e8 3b 08 ff ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c00224db:	83 c4 10             	add    esp,0x10
c00224de:	83 c4 0c             	add    esp,0xc
c00224e1:	c3                   	ret    

c00224e2 <SoundDevice::getFreeChannelNum()>:
c00224e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224e6:	31 c0                	xor    eax,eax
c00224e8:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00224f0:	74 09                	je     c00224fb <SoundDevice::getFreeChannelNum()+0x19>
c00224f2:	40                   	inc    eax
c00224f3:	83 f8 20             	cmp    eax,0x20
c00224f6:	75 f0                	jne    c00224e8 <SoundDevice::getFreeChannelNum()+0x6>
c00224f8:	83 c8 ff             	or     eax,0xffffffff
c00224fb:	c3                   	ret    

c00224fc <SoundDevice::addChannel(SoundChannel*)>:
c00224fc:	56                   	push   esi
c00224fd:	53                   	push   ebx
c00224fe:	51                   	push   ecx
c00224ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022503:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022507:	53                   	push   ebx
c0022508:	e8 d5 ff ff ff       	call   c00224e2 <SoundDevice::getFreeChannelNum()>
c002250d:	5a                   	pop    edx
c002250e:	83 f8 ff             	cmp    eax,0xffffffff
c0022511:	74 51                	je     c0022564 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022513:	85 f6                	test   esi,esi
c0022515:	74 4d                	je     c0022564 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022517:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002251e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022525:	75 30                	jne    c0022557 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022527:	83 ec 0c             	sub    esp,0xc
c002252a:	56                   	push   esi
c002252b:	e8 42 fd ff ff       	call   c0022272 <SoundChannel::getSampleRate()>
c0022530:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022536:	89 34 24             	mov    DWORD PTR [esp],esi
c0022539:	e8 3c fd ff ff       	call   c002227a <SoundChannel::getBits()>
c002253e:	83 c4 0c             	add    esp,0xc
c0022541:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022547:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022549:	50                   	push   eax
c002254a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022550:	53                   	push   ebx
c0022551:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022554:	83 c4 10             	add    esp,0x10
c0022557:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002255d:	b8 01 00 00 00       	mov    eax,0x1
c0022562:	eb 03                	jmp    c0022567 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022564:	83 c8 ff             	or     eax,0xffffffff
c0022567:	5a                   	pop    edx
c0022568:	5b                   	pop    ebx
c0022569:	5e                   	pop    esi
c002256a:	c3                   	ret    
c002256b:	90                   	nop

c002256c <SoundDevice::removeChannel(int)>:
c002256c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022574:	83 fa 1f             	cmp    edx,0x1f
c0022577:	77 23                	ja     c002259c <SoundDevice::removeChannel(int)+0x30>
c0022579:	8d 14 90             	lea    edx,[eax+edx*4]
c002257c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022583:	74 17                	je     c002259c <SoundDevice::removeChannel(int)+0x30>
c0022585:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002258f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022595:	75 05                	jne    c002259c <SoundDevice::removeChannel(int)+0x30>
c0022597:	8b 00                	mov    eax,DWORD PTR [eax]
c0022599:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002259c:	c3                   	ret    
c002259d:	90                   	nop

c002259e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002259e:	57                   	push   edi
c002259f:	56                   	push   esi
c00225a0:	53                   	push   ebx
c00225a1:	31 db                	xor    ebx,ebx
c00225a3:	83 ec 10             	sub    esp,0x10
c00225a6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00225aa:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00225ae:	0f 8d cb 00 00 00    	jge    c002267f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00225b4:	83 ec 0c             	sub    esp,0xc
c00225b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225bb:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00225be:	e8 d4 5e 00 00       	call   c0028497 <__extendsfdf2>
c00225c3:	83 c4 10             	add    esp,0x10
c00225c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ce:	68 00 00 f0 3f       	push   0x3ff00000
c00225d3:	6a 00                	push   0x0
c00225d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225dd:	e8 41 4e 00 00       	call   c0027423 <__adddf3>
c00225e2:	83 c4 10             	add    esp,0x10
c00225e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ed:	68 00 00 e0 3f       	push   0x3fe00000
c00225f2:	6a 00                	push   0x0
c00225f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225fc:	e8 9f 54 00 00       	call   c0027aa0 <__muldf3>
c0022601:	83 c4 10             	add    esp,0x10
c0022604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022608:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002260c:	68 00 00 60 40       	push   0x40600000
c0022611:	6a 00                	push   0x0
c0022613:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022617:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002261b:	e8 80 54 00 00       	call   c0027aa0 <__muldf3>
c0022620:	59                   	pop    ecx
c0022621:	5f                   	pop    edi
c0022622:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022626:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002262a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002262e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022632:	e8 3c 5d 00 00       	call   c0028373 <__truncdfsf2>
c0022637:	5a                   	pop    edx
c0022638:	89 c7                	mov    edi,eax
c002263a:	59                   	pop    ecx
c002263b:	68 00 00 fe 42       	push   0x42fe0000
c0022640:	50                   	push   eax
c0022641:	e8 d7 4d 00 00       	call   c002741d <__gesf2>
c0022646:	83 c4 10             	add    esp,0x10
c0022649:	85 c0                	test   eax,eax
c002264b:	78 06                	js     c0022653 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002264d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022651:	eb 26                	jmp    c0022679 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022653:	50                   	push   eax
c0022654:	50                   	push   eax
c0022655:	6a 00                	push   0x0
c0022657:	57                   	push   edi
c0022658:	e8 c4 4d 00 00       	call   c0027421 <__lesf2>
c002265d:	83 c4 10             	add    esp,0x10
c0022660:	85 c0                	test   eax,eax
c0022662:	7f 06                	jg     c002266a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022664:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022668:	eb 0f                	jmp    c0022679 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002266a:	83 ec 0c             	sub    esp,0xc
c002266d:	57                   	push   edi
c002266e:	e8 b9 5e 00 00       	call   c002852c <lrintf>
c0022673:	83 c4 10             	add    esp,0x10
c0022676:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022679:	43                   	inc    ebx
c002267a:	e9 2b ff ff ff       	jmp    c00225aa <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002267f:	83 c4 10             	add    esp,0x10
c0022682:	5b                   	pop    ebx
c0022683:	5e                   	pop    esi
c0022684:	5f                   	pop    edi
c0022685:	c3                   	ret    

c0022686 <SoundDevice::getAudio(int, float*, float*)>:
c0022686:	55                   	push   ebp
c0022687:	57                   	push   edi
c0022688:	56                   	push   esi
c0022689:	53                   	push   ebx
c002268a:	31 db                	xor    ebx,ebx
c002268c:	83 ec 20             	sub    esp,0x20
c002268f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022693:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022697:	c1 e0 02             	shl    eax,0x2
c002269a:	50                   	push   eax
c002269b:	6a 00                	push   0x0
c002269d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00226a1:	e8 d2 e0 fd ff       	call   c0000778 <memset>
c00226a6:	83 c4 10             	add    esp,0x10
c00226a9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00226ad:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00226b4:	85 c0                	test   eax,eax
c00226b6:	0f 84 d7 00 00 00    	je     c0022793 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226bc:	83 ec 0c             	sub    esp,0xc
c00226bf:	50                   	push   eax
c00226c0:	e8 a5 fb ff ff       	call   c002226a <SoundChannel::paused()>
c00226c5:	83 c4 10             	add    esp,0x10
c00226c8:	84 c0                	test   al,al
c00226ca:	0f 85 c3 00 00 00    	jne    c0022793 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226d0:	83 ec 0c             	sub    esp,0xc
c00226d3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226da:	e8 19 fa ff ff       	call   c00220f8 <SoundChannel::getVolume()>
c00226df:	83 c4 10             	add    esp,0x10
c00226e2:	85 c0                	test   eax,eax
c00226e4:	0f 84 a9 00 00 00    	je     c0022793 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226ea:	83 ec 0c             	sub    esp,0xc
c00226ed:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226f4:	e8 ff f9 ff ff       	call   c00220f8 <SoundChannel::getVolume()>
c00226f9:	83 ec 0c             	sub    esp,0xc
c00226fc:	50                   	push   eax
c00226fd:	e8 c5 4a 00 00       	call   c00271c7 <__floatsisf>
c0022702:	59                   	pop    ecx
c0022703:	5d                   	pop    ebp
c0022704:	31 ed                	xor    ebp,ebp
c0022706:	68 00 00 c8 42       	push   0x42c80000
c002270b:	50                   	push   eax
c002270c:	e8 8b 48 00 00       	call   c0026f9c <__divsf3>
c0022711:	83 c4 10             	add    esp,0x10
c0022714:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022718:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002271c:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022722:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022726:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002272d:	e8 60 fb ff ff       	call   c0022292 <SoundChannel::unbuffer(float*, int, int)>
c0022732:	83 c4 20             	add    esp,0x20
c0022735:	89 c1                	mov    ecx,eax
c0022737:	39 cd                	cmp    ebp,ecx
c0022739:	7d 52                	jge    c002278d <SoundDevice::getAudio(int, float*, float*)+0x107>
c002273b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002273f:	50                   	push   eax
c0022740:	50                   	push   eax
c0022741:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022745:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022748:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002274c:	e8 88 46 00 00       	call   c0026dd9 <__mulsf3>
c0022751:	5a                   	pop    edx
c0022752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022756:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002275c:	e8 66 4a 00 00       	call   c00271c7 <__floatsisf>
c0022761:	59                   	pop    ecx
c0022762:	5a                   	pop    edx
c0022763:	50                   	push   eax
c0022764:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022768:	e8 2f 48 00 00       	call   c0026f9c <__divsf3>
c002276d:	59                   	pop    ecx
c002276e:	5a                   	pop    edx
c002276f:	50                   	push   eax
c0022770:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022774:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022777:	e8 3a 43 00 00       	call   c0026ab6 <__addsf3>
c002277c:	83 c4 10             	add    esp,0x10
c002277f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022783:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022787:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002278a:	45                   	inc    ebp
c002278b:	eb aa                	jmp    c0022737 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002278d:	39 cf                	cmp    edi,ecx
c002278f:	7e 02                	jle    c0022793 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022791:	89 cf                	mov    edi,ecx
c0022793:	43                   	inc    ebx
c0022794:	83 fb 20             	cmp    ebx,0x20
c0022797:	0f 85 10 ff ff ff    	jne    c00226ad <SoundDevice::getAudio(int, float*, float*)+0x27>
c002279d:	83 c4 1c             	add    esp,0x1c
c00227a0:	89 f8                	mov    eax,edi
c00227a2:	5b                   	pop    ebx
c00227a3:	5e                   	pop    esi
c00227a4:	5f                   	pop    edi
c00227a5:	5d                   	pop    ebp
c00227a6:	c3                   	ret    
c00227a7:	90                   	nop

c00227a8 <PCI::open(int, int, void*)>:
c00227a8:	83 ec 18             	sub    esp,0x18
c00227ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00227af:	8b 10                	mov    edx,DWORD PTR [eax]
c00227b1:	50                   	push   eax
c00227b2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00227b5:	31 c0                	xor    eax,eax
c00227b7:	83 c4 1c             	add    esp,0x1c
c00227ba:	c3                   	ret    
c00227bb:	90                   	nop

c00227bc <PCI::close(int, int, void*)>:
c00227bc:	31 c0                	xor    eax,eax
c00227be:	c3                   	ret    
c00227bf:	90                   	nop

c00227c0 <PCI::PCI()>:
c00227c0:	83 ec 0c             	sub    esp,0xc
c00227c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c7:	83 ec 08             	sub    esp,0x8
c00227ca:	68 e4 c9 02 c0       	push   0xc002c9e4
c00227cf:	50                   	push   eax
c00227d0:	e8 bb 12 ff ff       	call   c0013a90 <Bus::Bus(char const*)>
c00227d5:	83 c4 10             	add    esp,0x10
c00227d8:	ba 50 ca 02 c0       	mov    edx,0xc002ca50
c00227dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e1:	89 10                	mov    DWORD PTR [eax],edx
c00227e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227ed:	0f b6 d0             	movzx  edx,al
c00227f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f4:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00227fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022805:	0f b6 d0             	movzx  edx,al
c0022808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002280c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002281b:	8d 50 01             	lea    edx,[eax+0x1]
c002281e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022828:	0f b6 d0             	movzx  edx,al
c002282b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022833:	83 c9 c0             	or     ecx,0xffffffc0
c0022836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002283a:	90                   	nop
c002283b:	83 c4 0c             	add    esp,0xc
c002283e:	c3                   	ret    
c002283f:	90                   	nop

c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022840:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022844:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022849:	89 ca                	mov    edx,ecx
c002284b:	c1 e0 10             	shl    eax,0x10
c002284e:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022854:	09 d0                	or     eax,edx
c0022856:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002285b:	c1 e2 08             	shl    edx,0x8
c002285e:	09 d0                	or     eax,edx
c0022860:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022865:	c1 e2 0b             	shl    edx,0xb
c0022868:	09 d0                	or     eax,edx
c002286a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002286f:	0d 00 00 00 80       	or     eax,0x80000000
c0022874:	ef                   	out    dx,eax
c0022875:	ba fc 0c 00 00       	mov    edx,0xcfc
c002287a:	ed                   	in     eax,dx
c002287b:	83 e1 02             	and    ecx,0x2
c002287e:	0f b6 c9             	movzx  ecx,cl
c0022881:	c1 e1 03             	shl    ecx,0x3
c0022884:	d3 e8                	shr    eax,cl
c0022886:	c3                   	ret    
c0022887:	90                   	nop

c0022888 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022888:	6a 00                	push   0x0
c002288a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002288f:	50                   	push   eax
c0022890:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022895:	50                   	push   eax
c0022896:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002289b:	50                   	push   eax
c002289c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228a0:	e8 9b ff ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228a5:	83 c4 14             	add    esp,0x14
c00228a8:	c3                   	ret    
c00228a9:	90                   	nop

c00228aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00228aa:	6a 0e                	push   0xe
c00228ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228b1:	50                   	push   eax
c00228b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228b7:	50                   	push   eax
c00228b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228bd:	50                   	push   eax
c00228be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228c2:	e8 79 ff ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228c7:	83 c4 14             	add    esp,0x14
c00228ca:	0f b6 c0             	movzx  eax,al
c00228cd:	c3                   	ret    

c00228ce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00228ce:	55                   	push   ebp
c00228cf:	57                   	push   edi
c00228d0:	56                   	push   esi
c00228d1:	53                   	push   ebx
c00228d2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00228d7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00228dc:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00228e1:	6a 0a                	push   0xa
c00228e3:	56                   	push   esi
c00228e4:	55                   	push   ebp
c00228e5:	57                   	push   edi
c00228e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00228ea:	e8 51 ff ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228ef:	6a 0a                	push   0xa
c00228f1:	89 c3                	mov    ebx,eax
c00228f3:	56                   	push   esi
c00228f4:	0f b6 db             	movzx  ebx,bl
c00228f7:	55                   	push   ebp
c00228f8:	57                   	push   edi
c00228f9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228fd:	e8 3e ff ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022902:	83 c4 28             	add    esp,0x28
c0022905:	25 00 ff 00 00       	and    eax,0xff00
c002290a:	09 d8                	or     eax,ebx
c002290c:	5b                   	pop    ebx
c002290d:	5e                   	pop    esi
c002290e:	5f                   	pop    edi
c002290f:	5d                   	pop    ebp
c0022910:	c3                   	ret    
c0022911:	90                   	nop

c0022912 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022912:	6a 08                	push   0x8
c0022914:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022919:	50                   	push   eax
c002291a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002291f:	50                   	push   eax
c0022920:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022925:	50                   	push   eax
c0022926:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002292a:	e8 11 ff ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002292f:	83 c4 14             	add    esp,0x14
c0022932:	0f b6 c4             	movzx  eax,ah
c0022935:	c3                   	ret    

c0022936 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022936:	6a 08                	push   0x8
c0022938:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002293d:	50                   	push   eax
c002293e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022943:	50                   	push   eax
c0022944:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022949:	50                   	push   eax
c002294a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002294e:	e8 ed fe ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022953:	83 c4 14             	add    esp,0x14
c0022956:	c3                   	ret    
c0022957:	90                   	nop

c0022958 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022958:	6a 3c                	push   0x3c
c002295a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002295f:	50                   	push   eax
c0022960:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022965:	50                   	push   eax
c0022966:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002296b:	50                   	push   eax
c002296c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022970:	e8 cb fe ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022975:	83 c4 14             	add    esp,0x14
c0022978:	c3                   	ret    
c0022979:	90                   	nop

c002297a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002297a:	6a 18                	push   0x18
c002297c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022981:	50                   	push   eax
c0022982:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022987:	50                   	push   eax
c0022988:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002298d:	50                   	push   eax
c002298e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022992:	e8 a9 fe ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022997:	83 c4 14             	add    esp,0x14
c002299a:	0f b6 c4             	movzx  eax,ah
c002299d:	c3                   	ret    

c002299e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002299e:	55                   	push   ebp
c002299f:	57                   	push   edi
c00229a0:	56                   	push   esi
c00229a1:	53                   	push   ebx
c00229a2:	50                   	push   eax
c00229a3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00229a7:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00229ac:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00229b1:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00229b6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00229bd:	8d 43 12             	lea    eax,[ebx+0x12]
c00229c0:	83 c3 10             	add    ebx,0x10
c00229c3:	0f b6 c0             	movzx  eax,al
c00229c6:	0f b6 db             	movzx  ebx,bl
c00229c9:	50                   	push   eax
c00229ca:	51                   	push   ecx
c00229cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00229cf:	57                   	push   edi
c00229d0:	55                   	push   ebp
c00229d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00229d5:	e8 66 fe ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229da:	53                   	push   ebx
c00229db:	89 c6                	mov    esi,eax
c00229dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00229e1:	c1 e6 10             	shl    esi,0x10
c00229e4:	51                   	push   ecx
c00229e5:	57                   	push   edi
c00229e6:	55                   	push   ebp
c00229e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00229eb:	e8 50 fe ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229f0:	83 c4 2c             	add    esp,0x2c
c00229f3:	0f b7 c0             	movzx  eax,ax
c00229f6:	5b                   	pop    ebx
c00229f7:	09 f0                	or     eax,esi
c00229f9:	5e                   	pop    esi
c00229fa:	5f                   	pop    edi
c00229fb:	5d                   	pop    ebp
c00229fc:	c3                   	ret    
c00229fd:	90                   	nop

c00229fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00229fe:	53                   	push   ebx
c00229ff:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a04:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022a09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a0d:	c1 e1 10             	shl    ecx,0x10
c0022a10:	25 fc 00 00 00       	and    eax,0xfc
c0022a15:	09 c1                	or     ecx,eax
c0022a17:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1c:	c1 e0 08             	shl    eax,0x8
c0022a1f:	09 c1                	or     ecx,eax
c0022a21:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022a26:	c1 e0 0b             	shl    eax,0xb
c0022a29:	09 c1                	or     ecx,eax
c0022a2b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022a31:	89 c8                	mov    eax,ecx
c0022a33:	ef                   	out    dx,eax
c0022a34:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a39:	ed                   	in     eax,dx
c0022a3a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022a3f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022a44:	74 0a                	je     c0022a50 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022a46:	0f b7 d8             	movzx  ebx,ax
c0022a49:	89 d0                	mov    eax,edx
c0022a4b:	c1 e0 10             	shl    eax,0x10
c0022a4e:	eb 05                	jmp    c0022a55 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022a50:	66 31 c0             	xor    ax,ax
c0022a53:	89 d3                	mov    ebx,edx
c0022a55:	09 c3                	or     ebx,eax
c0022a57:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a5c:	89 c8                	mov    eax,ecx
c0022a5e:	ef                   	out    dx,eax
c0022a5f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a64:	89 d8                	mov    eax,ebx
c0022a66:	ef                   	out    dx,eax
c0022a67:	5b                   	pop    ebx
c0022a68:	c3                   	ret    
c0022a69:	90                   	nop

c0022a6a <PCI::checkBus(unsigned char)>:
c0022a6a:	56                   	push   esi
c0022a6b:	53                   	push   ebx
c0022a6c:	31 db                	xor    ebx,ebx
c0022a6e:	51                   	push   ecx
c0022a6f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a74:	52                   	push   edx
c0022a75:	53                   	push   ebx
c0022a76:	43                   	inc    ebx
c0022a77:	56                   	push   esi
c0022a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a7c:	e8 2b 03 00 00       	call   c0022dac <PCI::checkDevice(unsigned char, unsigned char)>
c0022a81:	83 c4 10             	add    esp,0x10
c0022a84:	83 fb 20             	cmp    ebx,0x20
c0022a87:	75 eb                	jne    c0022a74 <PCI::checkBus(unsigned char)+0xa>
c0022a89:	58                   	pop    eax
c0022a8a:	5b                   	pop    ebx
c0022a8b:	5e                   	pop    esi
c0022a8c:	c3                   	ret    
c0022a8d:	90                   	nop

c0022a8e <PCI::foundDevice(PCIDeviceInfo)>:
c0022a8e:	55                   	push   ebp
c0022a8f:	57                   	push   edi
c0022a90:	56                   	push   esi
c0022a91:	53                   	push   ebx
c0022a92:	83 ec 1c             	sub    esp,0x1c
c0022a95:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022a99:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022a9f:	0f 84 52 01 00 00    	je     c0022bf7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022aa5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022aa9:	66 81 f9 06 04       	cmp    cx,0x406
c0022aae:	75 2c                	jne    c0022adc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022ab0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022ab5:	50                   	push   eax
c0022ab6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022abb:	50                   	push   eax
c0022abc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022ac1:	50                   	push   eax
c0022ac2:	56                   	push   esi
c0022ac3:	e8 b2 fe ff ff       	call   c002297a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ac8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022acc:	0f b6 c0             	movzx  eax,al
c0022acf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022ad3:	83 c4 2c             	add    esp,0x2c
c0022ad6:	5b                   	pop    ebx
c0022ad7:	5e                   	pop    esi
c0022ad8:	5f                   	pop    edi
c0022ad9:	5d                   	pop    ebp
c0022ada:	eb 8e                	jmp    c0022a6a <PCI::checkBus(unsigned char)>
c0022adc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ae0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022ae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022aea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022aee:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022af2:	88 d3                	mov    bl,dl
c0022af4:	85 c0                	test   eax,eax
c0022af6:	74 33                	je     c0022b2b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022af8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022afb:	85 d2                	test   edx,edx
c0022afd:	74 28                	je     c0022b27 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022aff:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b05:	31 ef                	xor    edi,ebp
c0022b07:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b0d:	75 18                	jne    c0022b27 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b0f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b13:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b19:	75 0c                	jne    c0022b27 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b1b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b21:	0f 84 d0 00 00 00    	je     c0022bf7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b29:	eb c9                	jmp    c0022af4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b2b:	66 81 f9 01 06       	cmp    cx,0x601
c0022b30:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b34:	75 19                	jne    c0022b4f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b36:	83 ec 0c             	sub    esp,0xc
c0022b39:	68 64 01 00 00       	push   0x164
c0022b3e:	e8 fd cc fe ff       	call   c000f840 <malloc>
c0022b43:	89 c5                	mov    ebp,eax
c0022b45:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b48:	e8 95 0f 00 00       	call   c0023ae2 <SATABus::SATABus()>
c0022b4d:	eb 1e                	jmp    c0022b6d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b4f:	66 81 f9 01 01       	cmp    cx,0x101
c0022b54:	75 60                	jne    c0022bb6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b56:	83 ec 0c             	sub    esp,0xc
c0022b59:	68 70 02 00 00       	push   0x270
c0022b5e:	e8 dd cc fe ff       	call   c000f840 <malloc>
c0022b63:	89 c5                	mov    ebp,eax
c0022b65:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b68:	e8 03 03 00 00       	call   c0022e70 <IDE::IDE()>
c0022b6d:	58                   	pop    eax
c0022b6e:	5a                   	pop    edx
c0022b6f:	55                   	push   ebp
c0022b70:	56                   	push   esi
c0022b71:	e8 a6 16 ff ff       	call   c001421c <Device::addChild(Device*)>
c0022b76:	83 ec 1c             	sub    esp,0x1c
c0022b79:	b9 09 00 00 00       	mov    ecx,0x9
c0022b7e:	fc                   	cld    
c0022b7f:	89 e7                	mov    edi,esp
c0022b81:	89 de                	mov    esi,ebx
c0022b83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b85:	55                   	push   ebp
c0022b86:	e8 9b 15 ff ff       	call   c0014126 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022b8e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022b92:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022b9a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022ba2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022baa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bad:	83 c4 4c             	add    esp,0x4c
c0022bb0:	5b                   	pop    ebx
c0022bb1:	5e                   	pop    esi
c0022bb2:	5f                   	pop    edi
c0022bb3:	5d                   	pop    ebp
c0022bb4:	ff e0                	jmp    eax
c0022bb6:	83 ec 0c             	sub    esp,0xc
c0022bb9:	68 58 01 00 00       	push   0x158
c0022bbe:	e8 7d cc fe ff       	call   c000f840 <malloc>
c0022bc3:	89 c5                	mov    ebp,eax
c0022bc5:	58                   	pop    eax
c0022bc6:	5a                   	pop    edx
c0022bc7:	68 ec c9 02 c0       	push   0xc002c9ec
c0022bcc:	55                   	push   ebp
c0022bcd:	e8 40 19 ff ff       	call   c0014512 <DriverlessDevice::DriverlessDevice(char const*)>
c0022bd2:	59                   	pop    ecx
c0022bd3:	5f                   	pop    edi
c0022bd4:	55                   	push   ebp
c0022bd5:	56                   	push   esi
c0022bd6:	e8 41 16 ff ff       	call   c001421c <Device::addChild(Device*)>
c0022bdb:	b9 09 00 00 00       	mov    ecx,0x9
c0022be0:	fc                   	cld    
c0022be1:	89 df                	mov    edi,ebx
c0022be3:	89 de                	mov    esi,ebx
c0022be5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022be7:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022beb:	83 c4 2c             	add    esp,0x2c
c0022bee:	5b                   	pop    ebx
c0022bef:	5e                   	pop    esi
c0022bf0:	5f                   	pop    edi
c0022bf1:	5d                   	pop    ebp
c0022bf2:	e9 2f 15 ff ff       	jmp    c0014126 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bf7:	83 c4 1c             	add    esp,0x1c
c0022bfa:	5b                   	pop    ebx
c0022bfb:	5e                   	pop    esi
c0022bfc:	5f                   	pop    edi
c0022bfd:	5d                   	pop    ebp
c0022bfe:	c3                   	ret    
c0022bff:	90                   	nop

c0022c00 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c00:	55                   	push   ebp
c0022c01:	57                   	push   edi
c0022c02:	56                   	push   esi
c0022c03:	53                   	push   ebx
c0022c04:	83 ec 5c             	sub    esp,0x5c
c0022c07:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022c0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c0f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022c13:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022c18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022c1c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022c20:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022c25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c29:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022c2e:	6a 0c                	push   0xc
c0022c30:	55                   	push   ebp
c0022c31:	53                   	push   ebx
c0022c32:	57                   	push   edi
c0022c33:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022c3a:	e8 01 fc ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c3f:	55                   	push   ebp
c0022c40:	53                   	push   ebx
c0022c41:	57                   	push   edi
c0022c42:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c49:	e8 80 fc ff ff       	call   c00228ce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c4e:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022c53:	83 c4 24             	add    esp,0x24
c0022c56:	55                   	push   ebp
c0022c57:	53                   	push   ebx
c0022c58:	57                   	push   edi
c0022c59:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022c5d:	e8 f6 fc ff ff       	call   c0022958 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c62:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022c66:	6a 3c                	push   0x3c
c0022c68:	55                   	push   ebp
c0022c69:	53                   	push   ebx
c0022c6a:	57                   	push   edi
c0022c6b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c72:	e8 c9 fb ff ff       	call   c0022840 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c77:	0f b6 c4             	movzx  eax,ah
c0022c7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c7e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c82:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022c86:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0022c8b:	83 c4 24             	add    esp,0x24
c0022c8e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022c94:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022c9b:	74 6c                	je     c0022d09 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c9d:	31 f6                	xor    esi,esi
c0022c9f:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0022ca5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cab:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022cb1:	7e 56                	jle    c0022d09 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022cb3:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022cb6:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022cbd:	39 cb                	cmp    ebx,ecx
c0022cbf:	75 45                	jne    c0022d06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022cc1:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022cc8:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ccc:	75 38                	jne    c0022d06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022cce:	83 ec 0c             	sub    esp,0xc
c0022cd1:	68 06 ca 02 c0       	push   0xc002ca06
c0022cd6:	e8 1b 01 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0022cdb:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0022ce1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ce7:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022cef:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022cf3:	52                   	push   edx
c0022cf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022cf8:	53                   	push   ebx
c0022cf9:	68 2b ca 02 c0       	push   0xc002ca2b
c0022cfe:	e8 f3 00 ff ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0022d03:	83 c4 20             	add    esp,0x20
c0022d06:	46                   	inc    esi
c0022d07:	eb 96                	jmp    c0022c9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022d09:	31 d2                	xor    edx,edx
c0022d0b:	83 ec 0c             	sub    esp,0xc
c0022d0e:	55                   	push   ebp
c0022d0f:	53                   	push   ebx
c0022d10:	57                   	push   edi
c0022d11:	52                   	push   edx
c0022d12:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022d16:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d1d:	e8 7c fc ff ff       	call   c002299e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d22:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022d26:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d2a:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d2e:	42                   	inc    edx
c0022d2f:	83 c4 20             	add    esp,0x20
c0022d32:	83 fa 06             	cmp    edx,0x6
c0022d35:	75 d4                	jne    c0022d0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022d37:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022d3b:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022d3f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022d43:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022d47:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022d4b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022d4f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022d54:	86 e0                	xchg   al,ah
c0022d56:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022d5b:	55                   	push   ebp
c0022d5c:	53                   	push   ebx
c0022d5d:	57                   	push   edi
c0022d5e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d62:	e8 ab fb ff ff       	call   c0022912 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d67:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d6b:	55                   	push   ebp
c0022d6c:	53                   	push   ebx
c0022d6d:	57                   	push   edi
c0022d6e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d75:	e8 0e fb ff ff       	call   c0022888 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d7a:	83 ec 0c             	sub    esp,0xc
c0022d7d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022d82:	b9 09 00 00 00       	mov    ecx,0x9
c0022d87:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022d8b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022d8f:	fc                   	cld    
c0022d90:	89 e7                	mov    edi,esp
c0022d92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d94:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022d9b:	e8 ee fc ff ff       	call   c0022a8e <PCI::foundDevice(PCIDeviceInfo)>
c0022da0:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022da6:	5b                   	pop    ebx
c0022da7:	5e                   	pop    esi
c0022da8:	5f                   	pop    edi
c0022da9:	5d                   	pop    ebp
c0022daa:	c3                   	ret    
c0022dab:	90                   	nop

c0022dac <PCI::checkDevice(unsigned char, unsigned char)>:
c0022dac:	55                   	push   ebp
c0022dad:	57                   	push   edi
c0022dae:	56                   	push   esi
c0022daf:	53                   	push   ebx
c0022db0:	83 ec 0c             	sub    esp,0xc
c0022db3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022db7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022dbc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022dc1:	6a 00                	push   0x0
c0022dc3:	56                   	push   esi
c0022dc4:	57                   	push   edi
c0022dc5:	55                   	push   ebp
c0022dc6:	e8 bd fa ff ff       	call   c0022888 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dcb:	6a 00                	push   0x0
c0022dcd:	56                   	push   esi
c0022dce:	57                   	push   edi
c0022dcf:	55                   	push   ebp
c0022dd0:	e8 2b fe ff ff       	call   c0022c00 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022dd5:	83 c4 20             	add    esp,0x20
c0022dd8:	6a 00                	push   0x0
c0022dda:	56                   	push   esi
c0022ddb:	57                   	push   edi
c0022ddc:	55                   	push   ebp
c0022ddd:	e8 c8 fa ff ff       	call   c00228aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022de2:	83 c4 10             	add    esp,0x10
c0022de5:	84 c0                	test   al,al
c0022de7:	79 27                	jns    c0022e10 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022de9:	bb 01 00 00 00       	mov    ebx,0x1
c0022dee:	53                   	push   ebx
c0022def:	56                   	push   esi
c0022df0:	57                   	push   edi
c0022df1:	55                   	push   ebp
c0022df2:	e8 91 fa ff ff       	call   c0022888 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022df7:	83 c4 10             	add    esp,0x10
c0022dfa:	66 40                	inc    ax
c0022dfc:	74 0c                	je     c0022e0a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022dfe:	53                   	push   ebx
c0022dff:	56                   	push   esi
c0022e00:	57                   	push   edi
c0022e01:	55                   	push   ebp
c0022e02:	e8 f9 fd ff ff       	call   c0022c00 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e07:	83 c4 10             	add    esp,0x10
c0022e0a:	43                   	inc    ebx
c0022e0b:	83 fb 08             	cmp    ebx,0x8
c0022e0e:	75 de                	jne    c0022dee <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e10:	83 c4 0c             	add    esp,0xc
c0022e13:	5b                   	pop    ebx
c0022e14:	5e                   	pop    esi
c0022e15:	5f                   	pop    edi
c0022e16:	5d                   	pop    ebp
c0022e17:	c3                   	ret    

c0022e18 <PCI::detect()>:
c0022e18:	56                   	push   esi
c0022e19:	53                   	push   ebx
c0022e1a:	53                   	push   ebx
c0022e1b:	31 db                	xor    ebx,ebx
c0022e1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e21:	6a 00                	push   0x0
c0022e23:	6a 00                	push   0x0
c0022e25:	6a 00                	push   0x0
c0022e27:	56                   	push   esi
c0022e28:	e8 7d fa ff ff       	call   c00228aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e2d:	83 c4 10             	add    esp,0x10
c0022e30:	a8 80                	test   al,0x80
c0022e32:	75 21                	jne    c0022e55 <PCI::detect()+0x3d>
c0022e34:	51                   	push   ecx
c0022e35:	51                   	push   ecx
c0022e36:	6a 00                	push   0x0
c0022e38:	56                   	push   esi
c0022e39:	e8 2c fc ff ff       	call   c0022a6a <PCI::checkBus(unsigned char)>
c0022e3e:	83 c4 10             	add    esp,0x10
c0022e41:	eb 24                	jmp    c0022e67 <PCI::detect()+0x4f>
c0022e43:	52                   	push   edx
c0022e44:	52                   	push   edx
c0022e45:	53                   	push   ebx
c0022e46:	43                   	inc    ebx
c0022e47:	56                   	push   esi
c0022e48:	e8 1d fc ff ff       	call   c0022a6a <PCI::checkBus(unsigned char)>
c0022e4d:	83 c4 10             	add    esp,0x10
c0022e50:	83 fb 08             	cmp    ebx,0x8
c0022e53:	74 12                	je     c0022e67 <PCI::detect()+0x4f>
c0022e55:	53                   	push   ebx
c0022e56:	6a 00                	push   0x0
c0022e58:	6a 00                	push   0x0
c0022e5a:	56                   	push   esi
c0022e5b:	e8 28 fa ff ff       	call   c0022888 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e60:	83 c4 10             	add    esp,0x10
c0022e63:	66 40                	inc    ax
c0022e65:	74 dc                	je     c0022e43 <PCI::detect()+0x2b>
c0022e67:	58                   	pop    eax
c0022e68:	5b                   	pop    ebx
c0022e69:	5e                   	pop    esi
c0022e6a:	c3                   	ret    
c0022e6b:	90                   	nop

c0022e6c <IDE::close(int, int, void*)>:
c0022e6c:	83 c8 ff             	or     eax,0xffffffff
c0022e6f:	c3                   	ret    

c0022e70 <IDE::IDE()>:
c0022e70:	83 ec 0c             	sub    esp,0xc
c0022e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e77:	83 ec 08             	sub    esp,0x8
c0022e7a:	68 74 ca 02 c0       	push   0xc002ca74
c0022e7f:	50                   	push   eax
c0022e80:	e8 23 17 ff ff       	call   c00145a8 <HardDiskController::HardDiskController(char const*)>
c0022e85:	83 c4 10             	add    esp,0x10
c0022e88:	ba b4 cc 02 c0       	mov    edx,0xc002ccb4
c0022e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e91:	89 10                	mov    DWORD PTR [eax],edx
c0022e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e97:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e9e:	90                   	nop
c0022e9f:	83 c4 0c             	add    esp,0xc
c0022ea2:	c3                   	ret    
c0022ea3:	90                   	nop

c0022ea4 <IDE::prepareInterrupt(unsigned char)>:
c0022ea4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ea9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022ead:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022eb5:	c3                   	ret    

c0022eb6 <selectDrive(unsigned char, unsigned char)>:
c0022eb6:	c3                   	ret    
c0022eb7:	90                   	nop

c0022eb8 <IDE::getBase(unsigned char)>:
c0022eb8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ebd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ec1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022ec9:	c3                   	ret    

c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022eca:	55                   	push   ebp
c0022ecb:	57                   	push   edi
c0022ecc:	56                   	push   esi
c0022ecd:	53                   	push   ebx
c0022ece:	83 ec 1c             	sub    esp,0x1c
c0022ed1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ed5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ed9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022edc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ee4:	80 f9 03             	cmp    cl,0x3
c0022ee7:	77 51                	ja     c0022f3a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022eed:	0f b6 f2             	movzx  esi,dl
c0022ef0:	0f b6 db             	movzx  ebx,bl
c0022ef3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ef6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022efa:	83 ca 80             	or     edx,0xffffff80
c0022efd:	0f b6 d2             	movzx  edx,dl
c0022f00:	52                   	push   edx
c0022f01:	6a 0c                	push   0xc
c0022f03:	56                   	push   esi
c0022f04:	57                   	push   edi
c0022f05:	e8 c0 ff ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f0a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f13:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f17:	ee                   	out    dx,al
c0022f18:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f1d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f21:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f25:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f29:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f31:	83 c4 2c             	add    esp,0x2c
c0022f34:	5b                   	pop    ebx
c0022f35:	5e                   	pop    esi
c0022f36:	5f                   	pop    edi
c0022f37:	5d                   	pop    ebp
c0022f38:	eb 90                	jmp    c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f3a:	80 fb 07             	cmp    bl,0x7
c0022f3d:	77 12                	ja     c0022f51 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f3f:	0f b6 d2             	movzx  edx,dl
c0022f42:	0f b6 db             	movzx  ebx,bl
c0022f45:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f4d:	89 da                	mov    edx,ebx
c0022f4f:	eb 2f                	jmp    c0022f80 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f51:	80 fb 0d             	cmp    bl,0xd
c0022f54:	77 13                	ja     c0022f69 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f56:	0f b6 d2             	movzx  edx,dl
c0022f59:	0f b6 db             	movzx  ebx,bl
c0022f5c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f63:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f67:	eb 17                	jmp    c0022f80 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f69:	80 fb 15             	cmp    bl,0x15
c0022f6c:	77 13                	ja     c0022f81 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f6e:	0f b6 d2             	movzx  edx,dl
c0022f71:	0f b6 db             	movzx  ebx,bl
c0022f74:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f7c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f80:	ee                   	out    dx,al
c0022f81:	83 c4 1c             	add    esp,0x1c
c0022f84:	5b                   	pop    ebx
c0022f85:	5e                   	pop    esi
c0022f86:	5f                   	pop    edi
c0022f87:	5d                   	pop    ebp
c0022f88:	c3                   	ret    
c0022f89:	90                   	nop

c0022f8a <IDE::read(unsigned char, unsigned char)>:
c0022f8a:	55                   	push   ebp
c0022f8b:	57                   	push   edi
c0022f8c:	56                   	push   esi
c0022f8d:	53                   	push   ebx
c0022f8e:	83 ec 1c             	sub    esp,0x1c
c0022f91:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f99:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022f9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fa0:	3c 03                	cmp    al,0x3
c0022fa2:	77 43                	ja     c0022fe7 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022fa4:	0f b6 f2             	movzx  esi,dl
c0022fa7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022faa:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022fae:	83 c8 80             	or     eax,0xffffff80
c0022fb1:	0f b6 c0             	movzx  eax,al
c0022fb4:	50                   	push   eax
c0022fb5:	6a 0c                	push   0xc
c0022fb7:	56                   	push   esi
c0022fb8:	57                   	push   edi
c0022fb9:	e8 0c ff ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fbe:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022fc3:	0f b6 c3             	movzx  eax,bl
c0022fc6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022fca:	ec                   	in     al,dx
c0022fcb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022fcf:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022fd4:	52                   	push   edx
c0022fd5:	6a 0c                	push   0xc
c0022fd7:	56                   	push   esi
c0022fd8:	57                   	push   edi
c0022fd9:	e8 ec fe ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fde:	83 c4 20             	add    esp,0x20
c0022fe1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022fe5:	eb 49                	jmp    c0023030 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fe7:	80 fb 07             	cmp    bl,0x7
c0022fea:	77 12                	ja     c0022ffe <IDE::read(unsigned char, unsigned char)+0x74>
c0022fec:	0f b6 d2             	movzx  edx,dl
c0022fef:	0f b6 c3             	movzx  eax,bl
c0022ff2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022ffa:	89 c2                	mov    edx,eax
c0022ffc:	eb 31                	jmp    c002302f <IDE::read(unsigned char, unsigned char)+0xa5>
c0022ffe:	80 fb 0d             	cmp    bl,0xd
c0023001:	77 13                	ja     c0023016 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023003:	0f b6 d2             	movzx  edx,dl
c0023006:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002300d:	0f b6 d3             	movzx  edx,bl
c0023010:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023014:	eb 19                	jmp    c002302f <IDE::read(unsigned char, unsigned char)+0xa5>
c0023016:	31 c0                	xor    eax,eax
c0023018:	80 fb 15             	cmp    bl,0x15
c002301b:	77 13                	ja     c0023030 <IDE::read(unsigned char, unsigned char)+0xa6>
c002301d:	0f b6 d2             	movzx  edx,dl
c0023020:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023028:	0f b6 d3             	movzx  edx,bl
c002302b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002302f:	ec                   	in     al,dx
c0023030:	83 c4 1c             	add    esp,0x1c
c0023033:	5b                   	pop    ebx
c0023034:	5e                   	pop    esi
c0023035:	5f                   	pop    edi
c0023036:	5d                   	pop    ebp
c0023037:	c3                   	ret    

c0023038 <IDE::waitInterrupt(unsigned char)>:
c0023038:	55                   	push   ebp
c0023039:	57                   	push   edi
c002303a:	56                   	push   esi
c002303b:	53                   	push   ebx
c002303c:	31 db                	xor    ebx,ebx
c002303e:	83 ec 0c             	sub    esp,0xc
c0023041:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023045:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002304a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023052:	89 e8                	mov    eax,ebp
c0023054:	84 c0                	test   al,al
c0023056:	75 34                	jne    c002308c <IDE::waitInterrupt(unsigned char)+0x54>
c0023058:	52                   	push   edx
c0023059:	6a 0c                	push   0xc
c002305b:	56                   	push   esi
c002305c:	57                   	push   edi
c002305d:	e8 28 ff ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023062:	83 c4 10             	add    esp,0x10
c0023065:	a8 01                	test   al,0x1
c0023067:	75 2b                	jne    c0023094 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023069:	f6 c3 04             	test   bl,0x4
c002306c:	75 16                	jne    c0023084 <IDE::waitInterrupt(unsigned char)+0x4c>
c002306e:	83 fb 32             	cmp    ebx,0x32
c0023071:	7e 11                	jle    c0023084 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023073:	50                   	push   eax
c0023074:	50                   	push   eax
c0023075:	6a 00                	push   0x0
c0023077:	68 80 96 98 00       	push   0x989680
c002307c:	e8 8b b1 ff ff       	call   c001e20c <nanoSleep(unsigned long long)>
c0023081:	83 c4 10             	add    esp,0x10
c0023084:	83 fb 3c             	cmp    ebx,0x3c
c0023087:	74 0b                	je     c0023094 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023089:	43                   	inc    ebx
c002308a:	eb be                	jmp    c002304a <IDE::waitInterrupt(unsigned char)+0x12>
c002308c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023094:	83 c4 0c             	add    esp,0xc
c0023097:	89 e8                	mov    eax,ebp
c0023099:	5b                   	pop    ebx
c002309a:	5e                   	pop    esi
c002309b:	5f                   	pop    edi
c002309c:	5d                   	pop    ebp
c002309d:	c3                   	ret    

c002309e <ideChannel0IRQHandler(regs*, void*)>:
c002309e:	83 ec 10             	sub    esp,0x10
c00230a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230a5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00230ac:	6a 07                	push   0x7
c00230ae:	6a 00                	push   0x0
c00230b0:	50                   	push   eax
c00230b1:	e8 d4 fe ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00230b6:	83 c4 1c             	add    esp,0x1c
c00230b9:	c3                   	ret    

c00230ba <ideChannel1IRQHandler(regs*, void*)>:
c00230ba:	83 ec 10             	sub    esp,0x10
c00230bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230c1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230c8:	6a 07                	push   0x7
c00230ca:	6a 01                	push   0x1
c00230cc:	50                   	push   eax
c00230cd:	e8 b8 fe ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00230d2:	83 c4 1c             	add    esp,0x1c
c00230d5:	c3                   	ret    

c00230d6 <IDE::enableIRQs(unsigned char, bool)>:
c00230d6:	57                   	push   edi
c00230d7:	56                   	push   esi
c00230d8:	be 04 00 00 00       	mov    esi,0x4
c00230dd:	53                   	push   ebx
c00230de:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00230e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00230e7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00230ec:	0f 94 c0             	sete   al
c00230ef:	d1 e0                	shl    eax,1
c00230f1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00230f8:	0f b6 c0             	movzx  eax,al
c00230fb:	50                   	push   eax
c00230fc:	6a 0c                	push   0xc
c00230fe:	57                   	push   edi
c00230ff:	53                   	push   ebx
c0023100:	e8 c5 fd ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023105:	83 c4 10             	add    esp,0x10
c0023108:	50                   	push   eax
c0023109:	6a 0c                	push   0xc
c002310b:	57                   	push   edi
c002310c:	53                   	push   ebx
c002310d:	e8 78 fe ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023112:	83 c4 10             	add    esp,0x10
c0023115:	4e                   	dec    esi
c0023116:	75 f0                	jne    c0023108 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023118:	5b                   	pop    ebx
c0023119:	5e                   	pop    esi
c002311a:	5f                   	pop    edi
c002311b:	c3                   	ret    

c002311c <IDE::open(int, int, void*)>:
c002311c:	55                   	push   ebp
c002311d:	57                   	push   edi
c002311e:	56                   	push   esi
c002311f:	53                   	push   ebx
c0023120:	83 ec 1c             	sub    esp,0x1c
c0023123:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023127:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023130:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023139:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023140:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023147:	0f 85 b0 02 00 00    	jne    c00233fd <IDE::open(int, int, void*)+0x2e1>
c002314d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023153:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023157:	83 e0 7f             	and    eax,0x7f
c002315a:	3c 05                	cmp    al,0x5
c002315c:	74 04                	je     c0023162 <IDE::open(int, int, void*)+0x46>
c002315e:	3c 0f                	cmp    al,0xf
c0023160:	75 32                	jne    c0023194 <IDE::open(int, int, void*)+0x78>
c0023162:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023168:	83 e0 fc             	and    eax,0xfffffffc
c002316b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023172:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023178:	83 e0 fc             	and    eax,0xfffffffc
c002317b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023182:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023188:	83 e0 fc             	and    eax,0xfffffffc
c002318b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023192:	eb 14                	jmp    c00231a8 <IDE::open(int, int, void*)+0x8c>
c0023194:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002319e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231a8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00231af:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00231b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231ba:	89 c6                	mov    esi,eax
c00231bc:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231c1:	c1 e6 10             	shl    esi,0x10
c00231c4:	89 e8                	mov    eax,ebp
c00231c6:	89 fa                	mov    edx,edi
c00231c8:	c1 e0 0b             	shl    eax,0xb
c00231cb:	09 f0                	or     eax,esi
c00231cd:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00231d4:	c1 e6 08             	shl    esi,0x8
c00231d7:	09 c6                	or     esi,eax
c00231d9:	89 f0                	mov    eax,esi
c00231db:	0d 08 00 00 80       	or     eax,0x80000008
c00231e0:	ef                   	out    dx,eax
c00231e1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00231e6:	89 ca                	mov    edx,ecx
c00231e8:	ed                   	in     eax,dx
c00231e9:	c1 e8 10             	shr    eax,0x10
c00231ec:	3d ff ff 00 00       	cmp    eax,0xffff
c00231f1:	0f 84 f5 00 00 00    	je     c00232ec <IDE::open(int, int, void*)+0x1d0>
c00231f7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00231fd:	89 fa                	mov    edx,edi
c00231ff:	89 f0                	mov    eax,esi
c0023201:	ef                   	out    dx,eax
c0023202:	b0 fe                	mov    al,0xfe
c0023204:	89 ca                	mov    edx,ecx
c0023206:	ee                   	out    dx,al
c0023207:	89 f0                	mov    eax,esi
c0023209:	89 fa                	mov    edx,edi
c002320b:	ef                   	out    dx,eax
c002320c:	89 ca                	mov    edx,ecx
c002320e:	ed                   	in     eax,dx
c002320f:	3c fe                	cmp    al,0xfe
c0023211:	0f 85 a9 00 00 00    	jne    c00232c0 <IDE::open(int, int, void*)+0x1a4>
c0023217:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c002321d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023224:	74 33                	je     c0023259 <IDE::open(int, int, void*)+0x13d>
c0023226:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002322c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023230:	40                   	inc    eax
c0023231:	83 ec 0c             	sub    esp,0xc
c0023234:	0f b6 c0             	movzx  eax,al
c0023237:	50                   	push   eax
c0023238:	55                   	push   ebp
c0023239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002323d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023243:	51                   	push   ecx
c0023244:	e8 a7 4e ff ff       	call   c00180f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023249:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002324e:	83 c4 1c             	add    esp,0x1c
c0023251:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023257:	eb 0a                	jmp    c0023263 <IDE::open(int, int, void*)+0x147>
c0023259:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023263:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002326a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023271:	c1 e1 10             	shl    ecx,0x10
c0023274:	c1 e0 08             	shl    eax,0x8
c0023277:	bf f8 0c 00 00       	mov    edi,0xcf8
c002327c:	09 c1                	or     ecx,eax
c002327e:	89 fa                	mov    edx,edi
c0023280:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023287:	c1 e0 0b             	shl    eax,0xb
c002328a:	09 c1                	or     ecx,eax
c002328c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023292:	89 c8                	mov    eax,ecx
c0023294:	ef                   	out    dx,eax
c0023295:	be fc 0c 00 00       	mov    esi,0xcfc
c002329a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232a0:	89 f2                	mov    edx,esi
c00232a2:	ee                   	out    dx,al
c00232a3:	89 c8                	mov    eax,ecx
c00232a5:	89 fa                	mov    edx,edi
c00232a7:	ef                   	out    dx,eax
c00232a8:	89 f2                	mov    edx,esi
c00232aa:	ed                   	in     eax,dx
c00232ab:	0f b6 c0             	movzx  eax,al
c00232ae:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00232b4:	74 46                	je     c00232fc <IDE::open(int, int, void*)+0x1e0>
c00232b6:	83 ec 0c             	sub    esp,0xc
c00232b9:	68 8c ca 02 c0       	push   0xc002ca8c
c00232be:	eb 34                	jmp    c00232f4 <IDE::open(int, int, void*)+0x1d8>
c00232c0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232c9:	75 17                	jne    c00232e2 <IDE::open(int, int, void*)+0x1c6>
c00232cb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00232d0:	74 07                	je     c00232d9 <IDE::open(int, int, void*)+0x1bd>
c00232d2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00232d7:	75 09                	jne    c00232e2 <IDE::open(int, int, void*)+0x1c6>
c00232d9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232e0:	eb 1a                	jmp    c00232fc <IDE::open(int, int, void*)+0x1e0>
c00232e2:	83 ec 0c             	sub    esp,0xc
c00232e5:	68 94 ca 02 c0       	push   0xc002ca94
c00232ea:	eb 08                	jmp    c00232f4 <IDE::open(int, int, void*)+0x1d8>
c00232ec:	83 ec 0c             	sub    esp,0xc
c00232ef:	68 c5 ca 02 c0       	push   0xc002cac5
c00232f4:	e8 9e 71 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00232f9:	83 c4 10             	add    esp,0x10
c00232fc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023303:	79 1a                	jns    c002331f <IDE::open(int, int, void*)+0x203>
c0023305:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002330b:	83 e0 fc             	and    eax,0xfffffffc
c002330e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023315:	83 c0 08             	add    eax,0x8
c0023318:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002331f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023325:	89 c2                	mov    edx,eax
c0023327:	83 e2 0f             	and    edx,0xf
c002332a:	66 83 fa 08          	cmp    dx,0x8
c002332e:	75 0a                	jne    c002333a <IDE::open(int, int, void*)+0x21e>
c0023330:	83 e8 02             	sub    eax,0x2
c0023333:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002333a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023340:	89 c2                	mov    edx,eax
c0023342:	83 e2 0f             	and    edx,0xf
c0023345:	66 83 fa 08          	cmp    dx,0x8
c0023349:	75 0a                	jne    c0023355 <IDE::open(int, int, void*)+0x239>
c002334b:	83 e8 02             	sub    eax,0x2
c002334e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023355:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002335c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023363:	89 d0                	mov    eax,edx
c0023365:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023368:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002336c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023370:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023373:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023378:	0f b6 c9             	movzx  ecx,cl
c002337b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023382:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023385:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023389:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002338d:	8d 50 02             	lea    edx,[eax+0x2]
c0023390:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023395:	0f b6 d2             	movzx  edx,dl
c0023398:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002339e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233a1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233a5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00233a9:	8d 48 03             	lea    ecx,[eax+0x3]
c00233ac:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233b1:	0f b6 c9             	movzx  ecx,cl
c00233b4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00233ba:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233bd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233c1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233c5:	8d 50 04             	lea    edx,[eax+0x4]
c00233c8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00233ce:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233d3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00233da:	66 85 f6             	test   si,si
c00233dd:	74 3e                	je     c002341d <IDE::open(int, int, void*)+0x301>
c00233df:	0f b6 d2             	movzx  edx,dl
c00233e2:	83 c0 05             	add    eax,0x5
c00233e5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233e8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233ec:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00233f0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00233f6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233fb:	eb 20                	jmp    c002341d <IDE::open(int, int, void*)+0x301>
c00233fd:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023407:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023411:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023418:	e9 02 ff ff ff       	jmp    c002331f <IDE::open(int, int, void*)+0x203>
c002341d:	52                   	push   edx
c002341e:	52                   	push   edx
c002341f:	6a 00                	push   0x0
c0023421:	53                   	push   ebx
c0023422:	e8 7d fa ff ff       	call   c0022ea4 <IDE::prepareInterrupt(unsigned char)>
c0023427:	59                   	pop    ecx
c0023428:	5e                   	pop    esi
c0023429:	6a 01                	push   0x1
c002342b:	53                   	push   ebx
c002342c:	e8 73 fa ff ff       	call   c0022ea4 <IDE::prepareInterrupt(unsigned char)>
c0023431:	83 c4 0c             	add    esp,0xc
c0023434:	6a 00                	push   0x0
c0023436:	6a 00                	push   0x0
c0023438:	53                   	push   ebx
c0023439:	e8 98 fc ff ff       	call   c00230d6 <IDE::enableIRQs(unsigned char, bool)>
c002343e:	83 c4 0c             	add    esp,0xc
c0023441:	6a 00                	push   0x0
c0023443:	6a 01                	push   0x1
c0023445:	53                   	push   ebx
c0023446:	e8 8b fc ff ff       	call   c00230d6 <IDE::enableIRQs(unsigned char, bool)>
c002344b:	83 c4 10             	add    esp,0x10
c002344e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023455:	74 40                	je     c0023497 <IDE::open(int, int, void*)+0x37b>
c0023457:	83 ec 0c             	sub    esp,0xc
c002345a:	68 ef ca 02 c0       	push   0xc002caef
c002345f:	e8 92 f9 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023464:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023467:	6a 01                	push   0x1
c0023469:	68 9e 30 02 c0       	push   0xc002309e
c002346e:	6a 0e                	push   0xe
c0023470:	53                   	push   ebx
c0023471:	e8 2a 0d ff ff       	call   c00141a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023476:	83 c4 14             	add    esp,0x14
c0023479:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002347f:	53                   	push   ebx
c0023480:	6a 01                	push   0x1
c0023482:	68 ba 30 02 c0       	push   0xc00230ba
c0023487:	6a 0f                	push   0xf
c0023489:	53                   	push   ebx
c002348a:	e8 11 0d ff ff       	call   c00141a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002348f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023495:	eb 4a                	jmp    c00234e1 <IDE::open(int, int, void*)+0x3c5>
c0023497:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00234a1:	50                   	push   eax
c00234a2:	6a 0f                	push   0xf
c00234a4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234aa:	68 0b cb 02 c0       	push   0xc002cb0b
c00234af:	e8 42 f9 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00234b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00234b7:	6a 00                	push   0x0
c00234b9:	68 9e 30 02 c0       	push   0xc002309e
c00234be:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234c4:	53                   	push   ebx
c00234c5:	e8 d6 0c ff ff       	call   c00141a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234ca:	83 c4 14             	add    esp,0x14
c00234cd:	53                   	push   ebx
c00234ce:	6a 00                	push   0x0
c00234d0:	68 ba 30 02 c0       	push   0xc00230ba
c00234d5:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00234db:	53                   	push   ebx
c00234dc:	e8 bf 0c ff ff       	call   c00141a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234e3:	83 c4 20             	add    esp,0x20
c00234e6:	83 ec 0c             	sub    esp,0xc
c00234e9:	53                   	push   ebx
c00234ea:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00234ed:	83 c4 0c             	add    esp,0xc
c00234f0:	6a 07                	push   0x7
c00234f2:	6a 00                	push   0x0
c00234f4:	53                   	push   ebx
c00234f5:	e8 90 fa ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00234fa:	83 c4 0c             	add    esp,0xc
c00234fd:	6a 07                	push   0x7
c00234ff:	6a 01                	push   0x1
c0023501:	53                   	push   ebx
c0023502:	e8 83 fa ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023507:	83 c4 0c             	add    esp,0xc
c002350a:	6a 01                	push   0x1
c002350c:	6a 00                	push   0x0
c002350e:	53                   	push   ebx
c002350f:	e8 c2 fb ff ff       	call   c00230d6 <IDE::enableIRQs(unsigned char, bool)>
c0023514:	83 c4 0c             	add    esp,0xc
c0023517:	6a 01                	push   0x1
c0023519:	6a 01                	push   0x1
c002351b:	53                   	push   ebx
c002351c:	e8 b5 fb ff ff       	call   c00230d6 <IDE::enableIRQs(unsigned char, bool)>
c0023521:	83 c4 2c             	add    esp,0x2c
c0023524:	31 c0                	xor    eax,eax
c0023526:	5b                   	pop    ebx
c0023527:	5e                   	pop    esi
c0023528:	5f                   	pop    edi
c0023529:	5d                   	pop    ebp
c002352a:	c3                   	ret    
c002352b:	90                   	nop

c002352c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002352c:	55                   	push   ebp
c002352d:	57                   	push   edi
c002352e:	56                   	push   esi
c002352f:	53                   	push   ebx
c0023530:	83 ec 1c             	sub    esp,0x1c
c0023533:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023537:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002353b:	8d 50 f8             	lea    edx,[eax-0x8]
c002353e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023542:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023546:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002354a:	80 fa 03             	cmp    dl,0x3
c002354d:	77 5d                	ja     c00235ac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002354f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023557:	0f b6 db             	movzx  ebx,bl
c002355a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002355d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023561:	83 ca 80             	or     edx,0xffffff80
c0023564:	0f b6 d2             	movzx  edx,dl
c0023567:	52                   	push   edx
c0023568:	6a 0c                	push   0xc
c002356a:	53                   	push   ebx
c002356b:	56                   	push   esi
c002356c:	e8 59 f9 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023571:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023576:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002357a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002357e:	0f b6 c0             	movzx  eax,al
c0023581:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023585:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023587:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002358c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023590:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023594:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023598:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235a0:	83 c4 2c             	add    esp,0x2c
c00235a3:	5b                   	pop    ebx
c00235a4:	5e                   	pop    esi
c00235a5:	5f                   	pop    edi
c00235a6:	5d                   	pop    ebp
c00235a7:	e9 1e f9 ff ff       	jmp    c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235ac:	3c 07                	cmp    al,0x7
c00235ae:	77 10                	ja     c00235c0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00235b0:	0f b6 db             	movzx  ebx,bl
c00235b3:	0f b6 d0             	movzx  edx,al
c00235b6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00235be:	eb 2d                	jmp    c00235ed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235c0:	3c 0d                	cmp    al,0xd
c00235c2:	77 13                	ja     c00235d7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235c4:	0f b6 db             	movzx  ebx,bl
c00235c7:	0f b6 c0             	movzx  eax,al
c00235ca:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00235d1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00235d5:	eb 16                	jmp    c00235ed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235d7:	3c 15                	cmp    al,0x15
c00235d9:	77 14                	ja     c00235ef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00235db:	0f b6 db             	movzx  ebx,bl
c00235de:	0f b6 c0             	movzx  eax,al
c00235e1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00235e9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00235ed:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235ef:	83 c4 1c             	add    esp,0x1c
c00235f2:	5b                   	pop    ebx
c00235f3:	5e                   	pop    esi
c00235f4:	5f                   	pop    edi
c00235f5:	5d                   	pop    ebp
c00235f6:	c3                   	ret    
c00235f7:	90                   	nop

c00235f8 <IDE::detect()>:
c00235f8:	55                   	push   ebp
c00235f9:	57                   	push   edi
c00235fa:	56                   	push   esi
c00235fb:	53                   	push   ebx
c00235fc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023602:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023609:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023610:	0f 85 be 02 00 00    	jne    c00238d4 <IDE::detect()+0x2dc>
c0023616:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002361d:	31 f6                	xor    esi,esi
c002361f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023627:	31 ed                	xor    ebp,ebp
c0023629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002362d:	c1 e0 06             	shl    eax,0x6
c0023630:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023638:	89 e8                	mov    eax,ebp
c002363a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002363e:	c1 e0 04             	shl    eax,0x4
c0023641:	83 c8 a0             	or     eax,0xffffffa0
c0023644:	0f b6 c0             	movzx  eax,al
c0023647:	50                   	push   eax
c0023648:	6a 06                	push   0x6
c002364a:	56                   	push   esi
c002364b:	53                   	push   ebx
c002364c:	e8 79 f8 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023651:	83 c4 0c             	add    esp,0xc
c0023654:	6a 0c                	push   0xc
c0023656:	56                   	push   esi
c0023657:	53                   	push   ebx
c0023658:	e8 2d f9 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c002365d:	83 c4 0c             	add    esp,0xc
c0023660:	6a 0c                	push   0xc
c0023662:	56                   	push   esi
c0023663:	53                   	push   ebx
c0023664:	e8 21 f9 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023669:	83 c4 0c             	add    esp,0xc
c002366c:	6a 0c                	push   0xc
c002366e:	56                   	push   esi
c002366f:	53                   	push   ebx
c0023670:	e8 15 f9 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023675:	83 c4 0c             	add    esp,0xc
c0023678:	6a 0c                	push   0xc
c002367a:	56                   	push   esi
c002367b:	53                   	push   ebx
c002367c:	e8 09 f9 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023681:	68 ec 00 00 00       	push   0xec
c0023686:	6a 07                	push   0x7
c0023688:	56                   	push   esi
c0023689:	53                   	push   ebx
c002368a:	e8 3b f8 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368f:	83 c4 1c             	add    esp,0x1c
c0023692:	6a 0c                	push   0xc
c0023694:	56                   	push   esi
c0023695:	53                   	push   ebx
c0023696:	e8 ef f8 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c002369b:	83 c4 0c             	add    esp,0xc
c002369e:	6a 0c                	push   0xc
c00236a0:	56                   	push   esi
c00236a1:	53                   	push   ebx
c00236a2:	e8 e3 f8 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00236a7:	83 c4 0c             	add    esp,0xc
c00236aa:	6a 0c                	push   0xc
c00236ac:	56                   	push   esi
c00236ad:	53                   	push   ebx
c00236ae:	e8 d7 f8 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00236b3:	83 c4 0c             	add    esp,0xc
c00236b6:	6a 0c                	push   0xc
c00236b8:	56                   	push   esi
c00236b9:	53                   	push   ebx
c00236ba:	e8 cb f8 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00236bf:	83 c4 0c             	add    esp,0xc
c00236c2:	6a 0c                	push   0xc
c00236c4:	56                   	push   esi
c00236c5:	53                   	push   ebx
c00236c6:	e8 bf f8 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00236cb:	83 c4 10             	add    esp,0x10
c00236ce:	84 c0                	test   al,al
c00236d0:	0f 84 8b 01 00 00    	je     c0023861 <IDE::detect()+0x269>
c00236d6:	31 ff                	xor    edi,edi
c00236d8:	50                   	push   eax
c00236d9:	6a 0c                	push   0xc
c00236db:	56                   	push   esi
c00236dc:	53                   	push   ebx
c00236dd:	e8 a8 f8 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00236e2:	83 c4 10             	add    esp,0x10
c00236e5:	a8 01                	test   al,0x1
c00236e7:	0f 85 8e 01 00 00    	jne    c002387b <IDE::detect()+0x283>
c00236ed:	84 c0                	test   al,al
c00236ef:	78 04                	js     c00236f5 <IDE::detect()+0xfd>
c00236f1:	a8 08                	test   al,0x8
c00236f3:	75 27                	jne    c002371c <IDE::detect()+0x124>
c00236f5:	47                   	inc    edi
c00236f6:	81 ff 17 01 00 00    	cmp    edi,0x117
c00236fc:	7e da                	jle    c00236d8 <IDE::detect()+0xe0>
c00236fe:	50                   	push   eax
c00236ff:	50                   	push   eax
c0023700:	6a 00                	push   0x0
c0023702:	68 40 4b 4c 00       	push   0x4c4b40
c0023707:	e8 00 ab ff ff       	call   c001e20c <nanoSleep(unsigned long long)>
c002370c:	83 c4 10             	add    esp,0x10
c002370f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023715:	75 c1                	jne    c00236d8 <IDE::detect()+0xe0>
c0023717:	e9 5f 01 00 00       	jmp    c002387b <IDE::detect()+0x283>
c002371c:	31 c9                	xor    ecx,ecx
c002371e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023722:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023726:	83 ec 0c             	sub    esp,0xc
c0023729:	68 80 00 00 00       	push   0x80
c002372e:	57                   	push   edi
c002372f:	6a 00                	push   0x0
c0023731:	56                   	push   esi
c0023732:	53                   	push   ebx
c0023733:	e8 f4 fd ff ff       	call   c002352c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023738:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002373d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023741:	89 d1                	mov    ecx,edx
c0023743:	c1 e0 06             	shl    eax,0x6
c0023746:	01 d8                	add    eax,ebx
c0023748:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002374f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023756:	89 f2                	mov    edx,esi
c0023758:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002375e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023762:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023768:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002376c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023773:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002377b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023782:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002378a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023790:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023797:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002379d:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237a1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237a5:	83 c4 20             	add    esp,0x20
c00237a8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00237ab:	83 c0 02             	add    eax,0x2
c00237ae:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00237b4:	83 c7 02             	add    edi,0x2
c00237b7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00237ba:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00237c0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237c4:	75 e2                	jne    c00237a8 <IDE::detect()+0x1b0>
c00237c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237ca:	c1 e0 06             	shl    eax,0x6
c00237cd:	01 d8                	add    eax,ebx
c00237cf:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00237d5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00237dc:	66 c1 ea 09          	shr    dx,0x9
c00237e0:	83 e2 01             	and    edx,0x1
c00237e3:	84 c9                	test   cl,cl
c00237e5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00237eb:	75 2f                	jne    c002381c <IDE::detect()+0x224>
c00237ed:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00237f3:	85 c0                	test   eax,eax
c00237f5:	74 66                	je     c002385d <IDE::detect()+0x265>
c00237f7:	50                   	push   eax
c00237f8:	55                   	push   ebp
c00237f9:	56                   	push   esi
c00237fa:	68 27 cb 02 c0       	push   0xc002cb27
c00237ff:	e8 f2 f5 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023804:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002380b:	e8 30 c0 fe ff       	call   c000f840 <malloc>
c0023810:	89 c7                	mov    edi,eax
c0023812:	89 04 24             	mov    DWORD PTR [esp],eax
c0023815:	e8 78 06 00 00       	call   c0023e92 <ATA::ATA()>
c002381a:	eb 28                	jmp    c0023844 <IDE::detect()+0x24c>
c002381c:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023822:	55                   	push   ebp
c0023823:	56                   	push   esi
c0023824:	68 56 cb 02 c0       	push   0xc002cb56
c0023829:	e8 c8 f5 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c002382e:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023835:	e8 06 c0 fe ff       	call   c000f840 <malloc>
c002383a:	89 c7                	mov    edi,eax
c002383c:	89 04 24             	mov    DWORD PTR [esp],eax
c002383f:	e8 8e 0c 00 00       	call   c00244d2 <ATAPI::ATAPI()>
c0023844:	5a                   	pop    edx
c0023845:	59                   	pop    ecx
c0023846:	57                   	push   edi
c0023847:	53                   	push   ebx
c0023848:	e8 cf 09 ff ff       	call   c001421c <Device::addChild(Device*)>
c002384d:	8b 07                	mov    eax,DWORD PTR [edi]
c002384f:	53                   	push   ebx
c0023850:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023854:	6a 00                	push   0x0
c0023856:	57                   	push   edi
c0023857:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002385a:	83 c4 20             	add    esp,0x20
c002385d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023861:	4d                   	dec    ebp
c0023862:	74 0a                	je     c002386e <IDE::detect()+0x276>
c0023864:	bd 01 00 00 00       	mov    ebp,0x1
c0023869:	e9 bb fd ff ff       	jmp    c0023629 <IDE::detect()+0x31>
c002386e:	4e                   	dec    esi
c002386f:	74 63                	je     c00238d4 <IDE::detect()+0x2dc>
c0023871:	be 01 00 00 00       	mov    esi,0x1
c0023876:	e9 ac fd ff ff       	jmp    c0023627 <IDE::detect()+0x2f>
c002387b:	50                   	push   eax
c002387c:	6a 04                	push   0x4
c002387e:	56                   	push   esi
c002387f:	53                   	push   ebx
c0023880:	e8 05 f7 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023885:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023889:	83 c4 0c             	add    esp,0xc
c002388c:	6a 05                	push   0x5
c002388e:	56                   	push   esi
c002388f:	53                   	push   ebx
c0023890:	e8 f5 f6 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023895:	83 c4 10             	add    esp,0x10
c0023898:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002389c:	80 fa 14             	cmp    dl,0x14
c002389f:	75 04                	jne    c00238a5 <IDE::detect()+0x2ad>
c00238a1:	3c eb                	cmp    al,0xeb
c00238a3:	eb 07                	jmp    c00238ac <IDE::detect()+0x2b4>
c00238a5:	3c 96                	cmp    al,0x96
c00238a7:	75 b8                	jne    c0023861 <IDE::detect()+0x269>
c00238a9:	80 fa 69             	cmp    dl,0x69
c00238ac:	75 b3                	jne    c0023861 <IDE::detect()+0x269>
c00238ae:	68 a1 00 00 00       	push   0xa1
c00238b3:	6a 07                	push   0x7
c00238b5:	56                   	push   esi
c00238b6:	53                   	push   ebx
c00238b7:	e8 0e f6 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238bc:	5f                   	pop    edi
c00238bd:	58                   	pop    eax
c00238be:	6a 00                	push   0x0
c00238c0:	68 40 42 0f 00       	push   0xf4240
c00238c5:	e8 42 a9 ff ff       	call   c001e20c <nanoSleep(unsigned long long)>
c00238ca:	83 c4 10             	add    esp,0x10
c00238cd:	b1 01                	mov    cl,0x1
c00238cf:	e9 4a fe ff ff       	jmp    c002371e <IDE::detect()+0x126>
c00238d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238da:	5b                   	pop    ebx
c00238db:	5e                   	pop    esi
c00238dc:	5f                   	pop    edi
c00238dd:	5d                   	pop    ebp
c00238de:	c3                   	ret    
c00238df:	90                   	nop

c00238e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238e0:	55                   	push   ebp
c00238e1:	57                   	push   edi
c00238e2:	56                   	push   esi
c00238e3:	53                   	push   ebx
c00238e4:	83 ec 1c             	sub    esp,0x1c
c00238e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00238f3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00238f7:	88 c3                	mov    bl,al
c00238f9:	84 c0                	test   al,al
c00238fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238ff:	0f 84 67 01 00 00    	je     c0023a6c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023905:	83 ec 0c             	sub    esp,0xc
c0023908:	68 87 cb 02 c0       	push   0xc002cb87
c002390d:	e8 e4 f4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023912:	83 c4 10             	add    esp,0x10
c0023915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023919:	3c 01                	cmp    al,0x1
c002391b:	75 17                	jne    c0023934 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002391d:	83 ec 0c             	sub    esp,0xc
c0023920:	b3 13                	mov    bl,0x13
c0023922:	68 93 cb 02 c0       	push   0xc002cb93
c0023927:	e8 ca f4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c002392c:	83 c4 10             	add    esp,0x10
c002392f:	e9 25 01 00 00       	jmp    c0023a59 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023934:	3c 02                	cmp    al,0x2
c0023936:	0f 85 ef 00 00 00    	jne    c0023a2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002393c:	d1 e6                	shl    esi,1
c002393e:	09 ee                	or     esi,ebp
c0023940:	52                   	push   edx
c0023941:	89 f0                	mov    eax,esi
c0023943:	6a 01                	push   0x1
c0023945:	0f b6 f0             	movzx  esi,al
c0023948:	c1 e6 06             	shl    esi,0x6
c002394b:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023953:	50                   	push   eax
c0023954:	57                   	push   edi
c0023955:	e8 30 f6 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c002395a:	83 c4 10             	add    esp,0x10
c002395d:	89 c6                	mov    esi,eax
c002395f:	a8 01                	test   al,0x1
c0023961:	74 12                	je     c0023975 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023963:	83 ec 0c             	sub    esp,0xc
c0023966:	b3 07                	mov    bl,0x7
c0023968:	68 a8 cb 02 c0       	push   0xc002cba8
c002396d:	e8 84 f4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023972:	83 c4 10             	add    esp,0x10
c0023975:	f7 c6 02 00 00 00    	test   esi,0x2
c002397b:	74 12                	je     c002398f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002397d:	83 ec 0c             	sub    esp,0xc
c0023980:	b3 03                	mov    bl,0x3
c0023982:	68 c6 cb 02 c0       	push   0xc002cbc6
c0023987:	e8 6a f4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c002398c:	83 c4 10             	add    esp,0x10
c002398f:	f7 c6 04 00 00 00    	test   esi,0x4
c0023995:	74 12                	je     c00239a9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023997:	83 ec 0c             	sub    esp,0xc
c002399a:	b3 14                	mov    bl,0x14
c002399c:	68 e6 cb 02 c0       	push   0xc002cbe6
c00239a1:	e8 50 f4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00239a6:	83 c4 10             	add    esp,0x10
c00239a9:	f7 c6 08 00 00 00    	test   esi,0x8
c00239af:	74 12                	je     c00239c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00239b1:	83 ec 0c             	sub    esp,0xc
c00239b4:	b3 03                	mov    bl,0x3
c00239b6:	68 c6 cb 02 c0       	push   0xc002cbc6
c00239bb:	e8 36 f4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00239c0:	83 c4 10             	add    esp,0x10
c00239c3:	f7 c6 10 00 00 00    	test   esi,0x10
c00239c9:	74 12                	je     c00239dd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00239cb:	83 ec 0c             	sub    esp,0xc
c00239ce:	b3 15                	mov    bl,0x15
c00239d0:	68 fe cb 02 c0       	push   0xc002cbfe
c00239d5:	e8 1c f4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00239da:	83 c4 10             	add    esp,0x10
c00239dd:	f7 c6 20 00 00 00    	test   esi,0x20
c00239e3:	74 12                	je     c00239f7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00239e5:	83 ec 0c             	sub    esp,0xc
c00239e8:	b3 03                	mov    bl,0x3
c00239ea:	68 c6 cb 02 c0       	push   0xc002cbc6
c00239ef:	e8 02 f4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c00239f4:	83 c4 10             	add    esp,0x10
c00239f7:	f7 c6 40 00 00 00    	test   esi,0x40
c00239fd:	74 12                	je     c0023a11 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00239ff:	83 ec 0c             	sub    esp,0xc
c0023a02:	b3 16                	mov    bl,0x16
c0023a04:	68 18 cc 02 c0       	push   0xc002cc18
c0023a09:	e8 e8 f3 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023a0e:	83 c4 10             	add    esp,0x10
c0023a11:	89 f0                	mov    eax,esi
c0023a13:	84 c0                	test   al,al
c0023a15:	79 42                	jns    c0023a59 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a17:	83 ec 0c             	sub    esp,0xc
c0023a1a:	b3 0d                	mov    bl,0xd
c0023a1c:	68 39 cc 02 c0       	push   0xc002cc39
c0023a21:	e8 d0 f3 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023a26:	83 c4 10             	add    esp,0x10
c0023a29:	eb 2e                	jmp    c0023a59 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a2b:	3c 03                	cmp    al,0x3
c0023a2d:	75 14                	jne    c0023a43 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023a2f:	83 ec 0c             	sub    esp,0xc
c0023a32:	b3 17                	mov    bl,0x17
c0023a34:	68 4d cc 02 c0       	push   0xc002cc4d
c0023a39:	e8 b8 f3 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023a3e:	83 c4 10             	add    esp,0x10
c0023a41:	eb 16                	jmp    c0023a59 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a43:	3c 04                	cmp    al,0x4
c0023a45:	75 12                	jne    c0023a59 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a47:	83 ec 0c             	sub    esp,0xc
c0023a4a:	b3 08                	mov    bl,0x8
c0023a4c:	68 63 cc 02 c0       	push   0xc002cc63
c0023a51:	e8 a0 f3 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023a56:	83 c4 10             	add    esp,0x10
c0023a59:	50                   	push   eax
c0023a5a:	50                   	push   eax
c0023a5b:	0f b6 c3             	movzx  eax,bl
c0023a5e:	50                   	push   eax
c0023a5f:	68 7b cc 02 c0       	push   0xc002cc7b
c0023a64:	e8 8d f3 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023a69:	83 c4 10             	add    esp,0x10
c0023a6c:	83 c4 1c             	add    esp,0x1c
c0023a6f:	88 d8                	mov    al,bl
c0023a71:	5b                   	pop    ebx
c0023a72:	5e                   	pop    esi
c0023a73:	5f                   	pop    edi
c0023a74:	5d                   	pop    ebp
c0023a75:	c3                   	ret    

c0023a76 <IDE::polling(unsigned char, unsigned int)>:
c0023a76:	57                   	push   edi
c0023a77:	56                   	push   esi
c0023a78:	53                   	push   ebx
c0023a79:	bb 04 00 00 00       	mov    ebx,0x4
c0023a7e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a82:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a87:	52                   	push   edx
c0023a88:	6a 0c                	push   0xc
c0023a8a:	56                   	push   esi
c0023a8b:	57                   	push   edi
c0023a8c:	e8 f9 f4 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023a91:	83 c4 10             	add    esp,0x10
c0023a94:	4b                   	dec    ebx
c0023a95:	75 f0                	jne    c0023a87 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a97:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a9c:	50                   	push   eax
c0023a9d:	6a 0c                	push   0xc
c0023a9f:	56                   	push   esi
c0023aa0:	57                   	push   edi
c0023aa1:	e8 e4 f4 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023aa6:	83 c4 10             	add    esp,0x10
c0023aa9:	a8 01                	test   al,0x1
c0023aab:	74 12                	je     c0023abf <IDE::polling(unsigned char, unsigned int)+0x49>
c0023aad:	83 ec 0c             	sub    esp,0xc
c0023ab0:	68 95 cc 02 c0       	push   0xc002cc95
c0023ab5:	e8 3c f3 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023aba:	83 c4 10             	add    esp,0x10
c0023abd:	eb 17                	jmp    c0023ad6 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023abf:	a8 20                	test   al,0x20
c0023ac1:	75 0f                	jne    c0023ad2 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023ac3:	4b                   	dec    ebx
c0023ac4:	74 10                	je     c0023ad6 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ac6:	84 c0                	test   al,al
c0023ac8:	78 d2                	js     c0023a9c <IDE::polling(unsigned char, unsigned int)+0x26>
c0023aca:	a8 08                	test   al,0x8
c0023acc:	74 ce                	je     c0023a9c <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ace:	31 c0                	xor    eax,eax
c0023ad0:	eb 06                	jmp    c0023ad8 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ad2:	b0 01                	mov    al,0x1
c0023ad4:	eb 02                	jmp    c0023ad8 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ad6:	b0 02                	mov    al,0x2
c0023ad8:	5b                   	pop    ebx
c0023ad9:	5e                   	pop    esi
c0023ada:	5f                   	pop    edi
c0023adb:	c3                   	ret    

c0023adc <SATABus::close(int, int, void*)>:
c0023adc:	31 c0                	xor    eax,eax
c0023ade:	c3                   	ret    
c0023adf:	90                   	nop

c0023ae0 <SATABus::detect()>:
c0023ae0:	c3                   	ret    
c0023ae1:	90                   	nop

c0023ae2 <SATABus::SATABus()>:
c0023ae2:	83 ec 0c             	sub    esp,0xc
c0023ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ae9:	83 ec 08             	sub    esp,0x8
c0023aec:	68 d8 cc 02 c0       	push   0xc002ccd8
c0023af1:	50                   	push   eax
c0023af2:	e8 b1 0a ff ff       	call   c00145a8 <HardDiskController::HardDiskController(char const*)>
c0023af7:	83 c4 10             	add    esp,0x10
c0023afa:	ba 94 cd 02 c0       	mov    edx,0xc002cd94
c0023aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b03:	89 10                	mov    DWORD PTR [eax],edx
c0023b05:	83 ec 0c             	sub    esp,0xc
c0023b08:	6a 50                	push   0x50
c0023b0a:	e8 96 c4 fe ff       	call   c000ffa5 <Phys::allocateContiguousPages(int)>
c0023b0f:	83 c4 10             	add    esp,0x10
c0023b12:	89 c2                	mov    edx,eax
c0023b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b18:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023b1e:	83 ec 0c             	sub    esp,0xc
c0023b21:	6a 50                	push   0x50
c0023b23:	e8 f7 df fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0023b28:	83 c4 10             	add    esp,0x10
c0023b2b:	89 c2                	mov    edx,eax
c0023b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b31:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b37:	e8 2b e2 fe ff       	call   c0011d67 <Virt::getAKernelVAS()>
c0023b3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b40:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b4a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b50:	83 ec 0c             	sub    esp,0xc
c0023b53:	6a 03                	push   0x3
c0023b55:	6a 50                	push   0x50
c0023b57:	51                   	push   ecx
c0023b58:	52                   	push   edx
c0023b59:	50                   	push   eax
c0023b5a:	e8 37 ea fe ff       	call   c0012596 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b5f:	83 c4 20             	add    esp,0x20
c0023b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b66:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b70:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023b76:	83 ec 04             	sub    esp,0x4
c0023b79:	52                   	push   edx
c0023b7a:	50                   	push   eax
c0023b7b:	68 fc cc 02 c0       	push   0xc002ccfc
c0023b80:	e8 71 f2 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023b85:	83 c4 10             	add    esp,0x10
c0023b88:	90                   	nop
c0023b89:	83 c4 0c             	add    esp,0xc
c0023b8c:	c3                   	ret    
c0023b8d:	90                   	nop

c0023b8e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b8e:	83 ec 0c             	sub    esp,0xc
c0023b91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b95:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b9b:	09 c2                	or     edx,eax
c0023b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ba1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ba7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ba9:	31 c0                	xor    eax,eax
c0023bab:	c1 e9 08             	shr    ecx,0x8
c0023bae:	83 e1 0f             	and    ecx,0xf
c0023bb1:	39 c8                	cmp    eax,ecx
c0023bb3:	74 0a                	je     c0023bbf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023bb5:	f6 c2 01             	test   dl,0x1
c0023bb8:	74 18                	je     c0023bd2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bba:	d1 ea                	shr    edx,1
c0023bbc:	40                   	inc    eax
c0023bbd:	eb f2                	jmp    c0023bb1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023bbf:	83 ec 0c             	sub    esp,0xc
c0023bc2:	68 20 cd 02 c0       	push   0xc002cd20
c0023bc7:	e8 cb 68 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0023bcc:	83 c4 10             	add    esp,0x10
c0023bcf:	83 c8 ff             	or     eax,0xffffffff
c0023bd2:	83 c4 0c             	add    esp,0xc
c0023bd5:	c3                   	ret    

c0023bd6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023bd6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023bda:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023bdd:	89 c2                	mov    edx,eax
c0023bdf:	c1 ea 08             	shr    edx,0x8
c0023be2:	83 e2 0f             	and    edx,0xf
c0023be5:	fe ca                	dec    dl
c0023be7:	75 31                	jne    c0023c1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023be9:	83 e0 0f             	and    eax,0xf
c0023bec:	3c 03                	cmp    al,0x3
c0023bee:	75 2a                	jne    c0023c1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bf0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023bf3:	b8 02 00 00 00       	mov    eax,0x2
c0023bf8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023bfe:	74 1c                	je     c0023c1c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c00:	b8 04 00 00 00       	mov    eax,0x4
c0023c05:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023c0b:	74 0f                	je     c0023c1c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c0d:	31 c0                	xor    eax,eax
c0023c0f:	83 fa 03             	cmp    edx,0x3
c0023c12:	0f 94 c0             	sete   al
c0023c15:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023c19:	c3                   	ret    
c0023c1a:	31 c0                	xor    eax,eax
c0023c1c:	c3                   	ret    
c0023c1d:	90                   	nop

c0023c1e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c22:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c25:	0f ba e2 0f          	bt     edx,0xf
c0023c29:	72 f7                	jb     c0023c22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c2b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c2e:	83 ca 10             	or     edx,0x10
c0023c31:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c34:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c37:	83 ca 01             	or     edx,0x1
c0023c3a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c3d:	c3                   	ret    

c0023c3e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c45:	83 e2 fe             	and    edx,0xfffffffe
c0023c48:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c4b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c4e:	83 e2 ef             	and    edx,0xffffffef
c0023c51:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c54:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c57:	0f ba e2 0e          	bt     edx,0xe
c0023c5b:	72 f7                	jb     c0023c54 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c5d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c60:	0f ba e2 0f          	bt     edx,0xf
c0023c64:	72 ee                	jb     c0023c54 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c66:	c3                   	ret    
c0023c67:	90                   	nop

c0023c68 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c68:	55                   	push   ebp
c0023c69:	57                   	push   edi
c0023c6a:	56                   	push   esi
c0023c6b:	53                   	push   ebx
c0023c6c:	83 ec 1c             	sub    esp,0x1c
c0023c6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c77:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c7b:	53                   	push   ebx
c0023c7c:	89 fd                	mov    ebp,edi
c0023c7e:	56                   	push   esi
c0023c7f:	c1 e5 0a             	shl    ebp,0xa
c0023c82:	e8 b7 ff ff ff       	call   c0023c3e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c87:	83 ec 0c             	sub    esp,0xc
c0023c8a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c90:	01 e8                	add    eax,ebp
c0023c92:	89 03                	mov    DWORD PTR [ebx],eax
c0023c94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c96:	68 00 04 00 00       	push   0x400
c0023c9b:	6a 00                	push   0x0
c0023c9d:	50                   	push   eax
c0023c9e:	e8 d5 ca fd ff       	call   c0000778 <memset>
c0023ca3:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ca9:	89 fa                	mov    edx,edi
c0023cab:	01 e8                	add    eax,ebp
c0023cad:	c1 e7 0d             	shl    edi,0xd
c0023cb0:	89 03                	mov    DWORD PTR [ebx],eax
c0023cb2:	c1 e2 08             	shl    edx,0x8
c0023cb5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023cbc:	81 c2 00 80 00 00    	add    edx,0x8000
c0023cc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023cc6:	89 d0                	mov    eax,edx
c0023cc8:	83 c4 1c             	add    esp,0x1c
c0023ccb:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cd1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023cd4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023cd7:	68 00 01 00 00       	push   0x100
c0023cdc:	6a 00                	push   0x0
c0023cde:	50                   	push   eax
c0023cdf:	e8 94 ca fd ff       	call   c0000778 <memset>
c0023ce4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ce8:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023cee:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023cf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023cf8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023cfb:	83 c4 10             	add    esp,0x10
c0023cfe:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023d05:	31 ff                	xor    edi,edi
c0023d07:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023d0d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023d13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d17:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d1d:	83 c5 20             	add    ebp,0x20
c0023d20:	01 f8                	add    eax,edi
c0023d22:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d25:	52                   	push   edx
c0023d26:	68 00 01 00 00       	push   0x100
c0023d2b:	6a 00                	push   0x0
c0023d2d:	50                   	push   eax
c0023d2e:	e8 45 ca fd ff       	call   c0000778 <memset>
c0023d33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d37:	83 c4 10             	add    esp,0x10
c0023d3a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023d40:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023d47:	01 f8                	add    eax,edi
c0023d49:	81 c7 00 01 00 00    	add    edi,0x100
c0023d4f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d52:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d58:	75 b3                	jne    c0023d0d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d5a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d5e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d62:	83 c4 1c             	add    esp,0x1c
c0023d65:	5b                   	pop    ebx
c0023d66:	5e                   	pop    esi
c0023d67:	5f                   	pop    edi
c0023d68:	5d                   	pop    ebp
c0023d69:	e9 b0 fe ff ff       	jmp    c0023c1e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d6e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d6e:	55                   	push   ebp
c0023d6f:	57                   	push   edi
c0023d70:	56                   	push   esi
c0023d71:	53                   	push   ebx
c0023d72:	31 db                	xor    ebx,ebx
c0023d74:	83 ec 0c             	sub    esp,0xc
c0023d77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d7b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d7f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d82:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d88:	0f 84 aa 00 00 00    	je     c0023e38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023d8e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023d92:	89 d8                	mov    eax,ebx
c0023d94:	c1 e0 07             	shl    eax,0x7
c0023d97:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023d9e:	55                   	push   ebp
c0023d9f:	56                   	push   esi
c0023da0:	e8 31 fe ff ff       	call   c0023bd6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023da5:	5a                   	pop    edx
c0023da6:	83 f8 01             	cmp    eax,0x1
c0023da9:	59                   	pop    ecx
c0023daa:	75 30                	jne    c0023ddc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023dac:	50                   	push   eax
c0023dad:	50                   	push   eax
c0023dae:	53                   	push   ebx
c0023daf:	68 45 cd 02 c0       	push   0xc002cd45
c0023db4:	e8 3d f0 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023db9:	83 c4 0c             	add    esp,0xc
c0023dbc:	53                   	push   ebx
c0023dbd:	55                   	push   ebp
c0023dbe:	56                   	push   esi
c0023dbf:	e8 a4 fe ff ff       	call   c0023c68 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023dc4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023dcb:	e8 70 ba fe ff       	call   c000f840 <malloc>
c0023dd0:	89 c5                	mov    ebp,eax
c0023dd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0023dd5:	e8 60 0d 00 00       	call   c0024b3a <SATA::SATA()>
c0023dda:	eb 33                	jmp    c0023e0f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ddc:	83 f8 04             	cmp    eax,0x4
c0023ddf:	75 47                	jne    c0023e28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023de1:	50                   	push   eax
c0023de2:	50                   	push   eax
c0023de3:	53                   	push   ebx
c0023de4:	68 5c cd 02 c0       	push   0xc002cd5c
c0023de9:	e8 08 f0 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023dee:	83 c4 0c             	add    esp,0xc
c0023df1:	53                   	push   ebx
c0023df2:	55                   	push   ebp
c0023df3:	56                   	push   esi
c0023df4:	e8 6f fe ff ff       	call   c0023c68 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023df9:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023e00:	e8 3b ba fe ff       	call   c000f840 <malloc>
c0023e05:	89 c5                	mov    ebp,eax
c0023e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e0a:	e8 d7 10 00 00       	call   c0024ee6 <SATAPI::SATAPI()>
c0023e0f:	5a                   	pop    edx
c0023e10:	59                   	pop    ecx
c0023e11:	55                   	push   ebp
c0023e12:	56                   	push   esi
c0023e13:	e8 04 04 ff ff       	call   c001421c <Device::addChild(Device*)>
c0023e18:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023e1b:	56                   	push   esi
c0023e1c:	6a 00                	push   0x0
c0023e1e:	53                   	push   ebx
c0023e1f:	55                   	push   ebp
c0023e20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e23:	83 c4 20             	add    esp,0x20
c0023e26:	eb 10                	jmp    c0023e38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e28:	50                   	push   eax
c0023e29:	50                   	push   eax
c0023e2a:	53                   	push   ebx
c0023e2b:	68 75 cd 02 c0       	push   0xc002cd75
c0023e30:	e8 c1 ef fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0023e35:	83 c4 10             	add    esp,0x10
c0023e38:	d1 ef                	shr    edi,1
c0023e3a:	43                   	inc    ebx
c0023e3b:	83 fb 20             	cmp    ebx,0x20
c0023e3e:	0f 85 3e ff ff ff    	jne    c0023d82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e44:	83 c4 0c             	add    esp,0xc
c0023e47:	5b                   	pop    ebx
c0023e48:	5e                   	pop    esi
c0023e49:	5f                   	pop    edi
c0023e4a:	5d                   	pop    ebp
c0023e4b:	c3                   	ret    

c0023e4c <SATABus::open(int, int, void*)>:
c0023e4c:	83 ec 14             	sub    esp,0x14
c0023e4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e53:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e59:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e5f:	52                   	push   edx
c0023e60:	50                   	push   eax
c0023e61:	e8 08 ff ff ff       	call   c0023d6e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e66:	31 c0                	xor    eax,eax
c0023e68:	83 c4 1c             	add    esp,0x1c
c0023e6b:	c3                   	ret    

c0023e6c <ATA::close(int, int, void*)>:
c0023e6c:	83 ec 0c             	sub    esp,0xc
c0023e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e79:	85 c0                	test   eax,eax
c0023e7b:	74 0c                	je     c0023e89 <ATA::close(int, int, void*)+0x1d>
c0023e7d:	83 ec 0c             	sub    esp,0xc
c0023e80:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e82:	50                   	push   eax
c0023e83:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e86:	83 c4 10             	add    esp,0x10
c0023e89:	31 c0                	xor    eax,eax
c0023e8b:	83 c4 0c             	add    esp,0xc
c0023e8e:	c3                   	ret    
c0023e8f:	90                   	nop

c0023e90 <ATA::powerSaving(PowerSavingLevel)>:
c0023e90:	c3                   	ret    
c0023e91:	90                   	nop

c0023e92 <ATA::ATA()>:
c0023e92:	83 ec 0c             	sub    esp,0xc
c0023e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e99:	83 ec 04             	sub    esp,0x4
c0023e9c:	68 00 02 00 00       	push   0x200
c0023ea1:	68 5d ce 02 c0       	push   0xc002ce5d
c0023ea6:	50                   	push   eax
c0023ea7:	e8 94 07 ff ff       	call   c0014640 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023eac:	83 c4 10             	add    esp,0x10
c0023eaf:	ba e0 cd 02 c0       	mov    edx,0xc002cde0
c0023eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023eb8:	89 10                	mov    DWORD PTR [eax],edx
c0023eba:	90                   	nop
c0023ebb:	83 c4 0c             	add    esp,0xc
c0023ebe:	c3                   	ret    
c0023ebf:	90                   	nop

c0023ec0 <ATA::flush(bool)>:
c0023ec0:	53                   	push   ebx
c0023ec1:	83 ec 08             	sub    esp,0x8
c0023ec4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023ec9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ecd:	19 c0                	sbb    eax,eax
c0023ecf:	83 e0 fd             	and    eax,0xfffffffd
c0023ed2:	05 ea 00 00 00       	add    eax,0xea
c0023ed7:	50                   	push   eax
c0023ed8:	6a 07                	push   0x7
c0023eda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ee1:	50                   	push   eax
c0023ee2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ee8:	e8 dd ef ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eed:	83 c4 0c             	add    esp,0xc
c0023ef0:	6a 00                	push   0x0
c0023ef2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ef9:	50                   	push   eax
c0023efa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f00:	e8 71 fb ff ff       	call   c0023a76 <IDE::polling(unsigned char, unsigned int)>
c0023f05:	83 c4 18             	add    esp,0x18
c0023f08:	5b                   	pop    ebx
c0023f09:	c3                   	ret    

c0023f0a <ATA::readyForCommand()>:
c0023f0a:	56                   	push   esi
c0023f0b:	53                   	push   ebx
c0023f0c:	31 db                	xor    ebx,ebx
c0023f0e:	50                   	push   eax
c0023f0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023f13:	50                   	push   eax
c0023f14:	6a 0c                	push   0xc
c0023f16:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023f1d:	50                   	push   eax
c0023f1e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f24:	e8 61 f0 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0023f29:	83 c4 10             	add    esp,0x10
c0023f2c:	a8 88                	test   al,0x88
c0023f2e:	74 23                	je     c0023f53 <ATA::readyForCommand()+0x49>
c0023f30:	43                   	inc    ebx
c0023f31:	83 fb 63             	cmp    ebx,0x63
c0023f34:	7e dd                	jle    c0023f13 <ATA::readyForCommand()+0x9>
c0023f36:	51                   	push   ecx
c0023f37:	51                   	push   ecx
c0023f38:	6a 00                	push   0x0
c0023f3a:	68 40 42 0f 00       	push   0xf4240
c0023f3f:	e8 c8 a2 ff ff       	call   c001e20c <nanoSleep(unsigned long long)>
c0023f44:	83 c4 10             	add    esp,0x10
c0023f47:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f4d:	75 c4                	jne    c0023f13 <ATA::readyForCommand()+0x9>
c0023f4f:	31 c0                	xor    eax,eax
c0023f51:	eb 02                	jmp    c0023f55 <ATA::readyForCommand()+0x4b>
c0023f53:	b0 01                	mov    al,0x1
c0023f55:	5a                   	pop    edx
c0023f56:	5b                   	pop    ebx
c0023f57:	5e                   	pop    esi
c0023f58:	c3                   	ret    
c0023f59:	90                   	nop

c0023f5a <ATA::access(unsigned long long, int, void*, bool)>:
c0023f5a:	55                   	push   ebp
c0023f5b:	57                   	push   edi
c0023f5c:	56                   	push   esi
c0023f5d:	53                   	push   ebx
c0023f5e:	83 ec 2c             	sub    esp,0x2c
c0023f61:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f69:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f71:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f75:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f79:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f7d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f87:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f91:	c1 e0 06             	shl    eax,0x6
c0023f94:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f9c:	74 5d                	je     c0023ffb <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f9e:	89 fa                	mov    edx,edi
c0023fa0:	89 f0                	mov    eax,esi
c0023fa2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023fa6:	c1 ea 1c             	shr    edx,0x1c
c0023fa9:	89 d1                	mov    ecx,edx
c0023fab:	09 c1                	or     ecx,eax
c0023fad:	74 25                	je     c0023fd4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023faf:	31 ed                	xor    ebp,ebp
c0023fb1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023fb8:	89 fa                	mov    edx,edi
c0023fba:	89 f0                	mov    eax,esi
c0023fbc:	0f ad d0             	shrd   eax,edx,cl
c0023fbf:	d3 ea                	shr    edx,cl
c0023fc1:	f6 c1 20             	test   cl,0x20
c0023fc4:	74 02                	je     c0023fc8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023fc6:	89 d0                	mov    eax,edx
c0023fc8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023fcc:	45                   	inc    ebp
c0023fcd:	83 fd 06             	cmp    ebp,0x6
c0023fd0:	75 df                	jne    c0023fb1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023fd2:	eb 76                	jmp    c002404a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023fd4:	89 f0                	mov    eax,esi
c0023fd6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023fdb:	89 fa                	mov    edx,edi
c0023fdd:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fe4:	0f ac d0 10          	shrd   eax,edx,0x10
c0023fe8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fed:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023ff1:	c1 ee 18             	shr    esi,0x18
c0023ff4:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023ff9:	eb 56                	jmp    c0024051 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ffb:	6a 00                	push   0x0
c0023ffd:	6a 3f                	push   0x3f
c0023fff:	57                   	push   edi
c0024000:	56                   	push   esi
c0024001:	e8 96 29 00 00       	call   c002699c <__umoddi3>
c0024006:	83 c4 10             	add    esp,0x10
c0024009:	40                   	inc    eax
c002400a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002400e:	6a 00                	push   0x0
c0024010:	68 f0 03 00 00       	push   0x3f0
c0024015:	57                   	push   edi
c0024016:	56                   	push   esi
c0024017:	e8 80 28 00 00       	call   c002689c <__udivdi3>
c002401c:	83 c4 10             	add    esp,0x10
c002401f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024024:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002402b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024030:	6a 00                	push   0x0
c0024032:	6a 3f                	push   0x3f
c0024034:	57                   	push   edi
c0024035:	56                   	push   esi
c0024036:	e8 61 28 00 00       	call   c002689c <__udivdi3>
c002403b:	83 c4 10             	add    esp,0x10
c002403e:	89 c6                	mov    esi,eax
c0024040:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024045:	83 e6 0f             	and    esi,0xf
c0024048:	eb 07                	jmp    c0024051 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002404a:	31 f6                	xor    esi,esi
c002404c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024051:	bf 01 00 00 00       	mov    edi,0x1
c0024056:	50                   	push   eax
c0024057:	6a 00                	push   0x0
c0024059:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024060:	50                   	push   eax
c0024061:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024065:	e8 6c f0 ff ff       	call   c00230d6 <IDE::enableIRQs(unsigned char, bool)>
c002406a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002406d:	e8 98 fe ff ff       	call   c0023f0a <ATA::readyForCommand()>
c0024072:	83 c4 10             	add    esp,0x10
c0024075:	84 c0                	test   al,al
c0024077:	0f 84 5a 02 00 00    	je     c00242d7 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002407d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024083:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024089:	c1 e0 04             	shl    eax,0x4
c002408c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024093:	09 c6                	or     esi,eax
c0024095:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002409a:	75 05                	jne    c00240a1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002409c:	83 ce a0             	or     esi,0xffffffa0
c002409f:	eb 03                	jmp    c00240a4 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00240a1:	83 ce e0             	or     esi,0xffffffe0
c00240a4:	89 f0                	mov    eax,esi
c00240a6:	0f b6 f0             	movzx  esi,al
c00240a9:	56                   	push   esi
c00240aa:	6a 06                	push   0x6
c00240ac:	51                   	push   ecx
c00240ad:	52                   	push   edx
c00240ae:	e8 17 ee ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b3:	83 c4 10             	add    esp,0x10
c00240b6:	6a 00                	push   0x0
c00240b8:	6a 01                	push   0x1
c00240ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c1:	50                   	push   eax
c00240c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c8:	e8 fd ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240cd:	83 c4 10             	add    esp,0x10
c00240d0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240d5:	75 6e                	jne    c0024145 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00240d7:	6a 00                	push   0x0
c00240d9:	6a 08                	push   0x8
c00240db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e2:	50                   	push   eax
c00240e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e9:	e8 dc ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ee:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00240f3:	50                   	push   eax
c00240f4:	6a 09                	push   0x9
c00240f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240fd:	50                   	push   eax
c00240fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024104:	e8 c1 ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024109:	83 c4 20             	add    esp,0x20
c002410c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024111:	50                   	push   eax
c0024112:	6a 0a                	push   0xa
c0024114:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002411b:	50                   	push   eax
c002411c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024122:	e8 a3 ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024127:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002412c:	50                   	push   eax
c002412d:	6a 0b                	push   0xb
c002412f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024136:	50                   	push   eax
c0024137:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002413d:	e8 88 ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024142:	83 c4 20             	add    esp,0x20
c0024145:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002414a:	50                   	push   eax
c002414b:	6a 02                	push   0x2
c002414d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024154:	50                   	push   eax
c0024155:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002415b:	e8 6a ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024160:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024165:	50                   	push   eax
c0024166:	6a 03                	push   0x3
c0024168:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002416f:	50                   	push   eax
c0024170:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024176:	e8 4f ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c002417b:	83 c4 20             	add    esp,0x20
c002417e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024183:	50                   	push   eax
c0024184:	6a 04                	push   0x4
c0024186:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002418d:	50                   	push   eax
c002418e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024194:	e8 31 ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024199:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002419e:	50                   	push   eax
c002419f:	6a 05                	push   0x5
c00241a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a8:	50                   	push   eax
c00241a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241af:	e8 16 ed ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241b4:	83 c4 20             	add    esp,0x20
c00241b7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241bc:	0f 94 c0             	sete   al
c00241bf:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241c4:	74 09                	je     c00241cf <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00241c6:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00241cd:	eb 07                	jmp    c00241d6 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00241cf:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00241d6:	0f b6 c0             	movzx  eax,al
c00241d9:	50                   	push   eax
c00241da:	6a 07                	push   0x7
c00241dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e3:	50                   	push   eax
c00241e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ea:	e8 db ec ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ef:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00241f3:	83 c4 10             	add    esp,0x10
c00241f6:	85 f6                	test   esi,esi
c00241f8:	0f 84 ba 00 00 00    	je     c00242b8 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00241fe:	50                   	push   eax
c00241ff:	6a 01                	push   0x1
c0024201:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024208:	50                   	push   eax
c0024209:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002420f:	e8 62 f8 ff ff       	call   c0023a76 <IDE::polling(unsigned char, unsigned int)>
c0024214:	83 c4 10             	add    esp,0x10
c0024217:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002421d:	84 c0                	test   al,al
c002421f:	74 2c                	je     c002424d <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024221:	0f b6 f8             	movzx  edi,al
c0024224:	0f b6 d2             	movzx  edx,dl
c0024227:	57                   	push   edi
c0024228:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002422f:	50                   	push   eax
c0024230:	52                   	push   edx
c0024231:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024237:	e8 a4 f6 ff ff       	call   c00238e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002423c:	c7 04 24 b8 cd 02 c0 	mov    DWORD PTR [esp],0xc002cdb8
c0024243:	e8 ae eb fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0024248:	e9 87 00 00 00       	jmp    c00242d4 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002424d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024252:	74 33                	je     c0024287 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024254:	31 ed                	xor    ebp,ebp
c0024256:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002425a:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002425e:	50                   	push   eax
c002425f:	50                   	push   eax
c0024260:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024267:	50                   	push   eax
c0024268:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002426e:	e8 45 ec ff ff       	call   c0022eb8 <IDE::getBase(unsigned char)>
c0024273:	89 c2                	mov    edx,eax
c0024275:	89 f8                	mov    eax,edi
c0024277:	66 ef                	out    dx,ax
c0024279:	45                   	inc    ebp
c002427a:	83 c4 10             	add    esp,0x10
c002427d:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024283:	75 d1                	jne    c0024256 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024285:	eb 23                	jmp    c00242aa <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024287:	0f b6 d2             	movzx  edx,dl
c002428a:	51                   	push   ecx
c002428b:	51                   	push   ecx
c002428c:	52                   	push   edx
c002428d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024293:	e8 20 ec ff ff       	call   c0022eb8 <IDE::getBase(unsigned char)>
c0024298:	b9 00 01 00 00       	mov    ecx,0x100
c002429d:	89 c2                	mov    edx,eax
c002429f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00242a3:	fc                   	cld    
c00242a4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00242a7:	83 c4 10             	add    esp,0x10
c00242aa:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00242b2:	4e                   	dec    esi
c00242b3:	e9 3e ff ff ff       	jmp    c00241f6 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00242b8:	31 ff                	xor    edi,edi
c00242ba:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242bf:	74 16                	je     c00242d7 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00242c1:	50                   	push   eax
c00242c2:	50                   	push   eax
c00242c3:	31 c0                	xor    eax,eax
c00242c5:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00242ca:	0f 94 c0             	sete   al
c00242cd:	50                   	push   eax
c00242ce:	53                   	push   ebx
c00242cf:	e8 ec fb ff ff       	call   c0023ec0 <ATA::flush(bool)>
c00242d4:	83 c4 10             	add    esp,0x10
c00242d7:	83 c4 2c             	add    esp,0x2c
c00242da:	89 f8                	mov    eax,edi
c00242dc:	5b                   	pop    ebx
c00242dd:	5e                   	pop    esi
c00242de:	5f                   	pop    edi
c00242df:	5d                   	pop    ebp
c00242e0:	c3                   	ret    
c00242e1:	90                   	nop

c00242e2 <ATA::read(unsigned long long, int, void*)>:
c00242e2:	57                   	push   edi
c00242e3:	b8 04 00 00 00       	mov    eax,0x4
c00242e8:	56                   	push   esi
c00242e9:	53                   	push   ebx
c00242ea:	83 ec 10             	sub    esp,0x10
c00242ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00242f1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00242f5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00242f8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00242fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024300:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024306:	77 3b                	ja     c0024343 <ATA::read(unsigned long long, int, void*)+0x61>
c0024308:	b8 06 00 00 00       	mov    eax,0x6
c002430d:	85 d2                	test   edx,edx
c002430f:	74 32                	je     c0024343 <ATA::read(unsigned long long, int, void*)+0x61>
c0024311:	50                   	push   eax
c0024312:	50                   	push   eax
c0024313:	6a 00                	push   0x0
c0024315:	52                   	push   edx
c0024316:	53                   	push   ebx
c0024317:	57                   	push   edi
c0024318:	56                   	push   esi
c0024319:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002431d:	e8 38 fc ff ff       	call   c0023f5a <ATA::access(unsigned long long, int, void*, bool)>
c0024322:	83 c4 20             	add    esp,0x20
c0024325:	85 c0                	test   eax,eax
c0024327:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002432b:	75 11                	jne    c002433e <ATA::read(unsigned long long, int, void*)+0x5c>
c002432d:	01 1d 68 27 03 c0    	add    DWORD PTR ds:0xc0032768,ebx
c0024333:	e8 3c c6 fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0024338:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002433c:	eb 05                	jmp    c0024343 <ATA::read(unsigned long long, int, void*)+0x61>
c002433e:	b8 01 00 00 00       	mov    eax,0x1
c0024343:	83 c4 10             	add    esp,0x10
c0024346:	5b                   	pop    ebx
c0024347:	5e                   	pop    esi
c0024348:	5f                   	pop    edi
c0024349:	c3                   	ret    

c002434a <ATA::write(unsigned long long, int, void*)>:
c002434a:	57                   	push   edi
c002434b:	b8 04 00 00 00       	mov    eax,0x4
c0024350:	56                   	push   esi
c0024351:	53                   	push   ebx
c0024352:	83 ec 10             	sub    esp,0x10
c0024355:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024359:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002435d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024360:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024364:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024368:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002436e:	77 3b                	ja     c00243ab <ATA::write(unsigned long long, int, void*)+0x61>
c0024370:	b8 06 00 00 00       	mov    eax,0x6
c0024375:	85 d2                	test   edx,edx
c0024377:	74 32                	je     c00243ab <ATA::write(unsigned long long, int, void*)+0x61>
c0024379:	50                   	push   eax
c002437a:	50                   	push   eax
c002437b:	6a 01                	push   0x1
c002437d:	52                   	push   edx
c002437e:	53                   	push   ebx
c002437f:	57                   	push   edi
c0024380:	56                   	push   esi
c0024381:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024385:	e8 d0 fb ff ff       	call   c0023f5a <ATA::access(unsigned long long, int, void*, bool)>
c002438a:	83 c4 20             	add    esp,0x20
c002438d:	85 c0                	test   eax,eax
c002438f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024393:	75 11                	jne    c00243a6 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024395:	01 1d 64 27 03 c0    	add    DWORD PTR ds:0xc0032764,ebx
c002439b:	e8 d4 c5 fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c00243a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243a4:	eb 05                	jmp    c00243ab <ATA::write(unsigned long long, int, void*)+0x61>
c00243a6:	b8 01 00 00 00       	mov    eax,0x1
c00243ab:	83 c4 10             	add    esp,0x10
c00243ae:	5b                   	pop    ebx
c00243af:	5e                   	pop    esi
c00243b0:	5f                   	pop    edi
c00243b1:	c3                   	ret    

c00243b2 <ATA::detectCHS()>:
c00243b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00243b6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00243bc:	c1 e0 06             	shl    eax,0x6
c00243bf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00243c5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00243cf:	c7 44 24 04 c3 cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cdc3
c00243d7:	e9 bb 60 ff ff       	jmp    c001a497 <Krnl::panic(char const*)>

c00243dc <ATA::open(int, int, void*)>:
c00243dc:	53                   	push   ebx
c00243dd:	83 ec 08             	sub    esp,0x8
c00243e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00243e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243ec:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00243f2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00243f8:	c1 e0 06             	shl    eax,0x6
c00243fb:	01 d0                	add    eax,edx
c00243fd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024404:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002440a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024411:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002441b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024421:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024428:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002442f:	75 0c                	jne    c002443d <ATA::open(int, int, void*)+0x61>
c0024431:	83 ec 0c             	sub    esp,0xc
c0024434:	53                   	push   ebx
c0024435:	e8 78 ff ff ff       	call   c00243b2 <ATA::detectCHS()>
c002443a:	83 c4 10             	add    esp,0x10
c002443d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024443:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024449:	c1 e0 06             	shl    eax,0x6
c002444c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024453:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002445d:	d1 e8                	shr    eax,1
c002445f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024465:	6a 04                	push   0x4
c0024467:	6a 0c                	push   0xc
c0024469:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024470:	50                   	push   eax
c0024471:	52                   	push   edx
c0024472:	e8 53 ea ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024477:	90                   	nop
c0024478:	90                   	nop
c0024479:	6a 00                	push   0x0
c002447b:	6a 0c                	push   0xc
c002447d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024484:	50                   	push   eax
c0024485:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002448b:	e8 3a ea ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024490:	83 c4 14             	add    esp,0x14
c0024493:	53                   	push   ebx
c0024494:	e8 0f 02 ff ff       	call   c00146a8 <PhysicalDisk::startCache()>
c0024499:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002449c:	e8 7d 23 ff ff       	call   c001681e <createPartitionsForDisk(PhysicalDisk*)>
c00244a1:	31 c0                	xor    eax,eax
c00244a3:	83 c4 18             	add    esp,0x18
c00244a6:	5b                   	pop    ebx
c00244a7:	c3                   	ret    

c00244a8 <ATAPI::write(unsigned long long, int, void*)>:
c00244a8:	b8 03 00 00 00       	mov    eax,0x3
c00244ad:	c3                   	ret    

c00244ae <ATAPI::close(int, int, void*)>:
c00244ae:	83 ec 0c             	sub    esp,0xc
c00244b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244bb:	85 c0                	test   eax,eax
c00244bd:	74 0c                	je     c00244cb <ATAPI::close(int, int, void*)+0x1d>
c00244bf:	83 ec 0c             	sub    esp,0xc
c00244c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00244c4:	50                   	push   eax
c00244c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00244c8:	83 c4 10             	add    esp,0x10
c00244cb:	31 c0                	xor    eax,eax
c00244cd:	83 c4 0c             	add    esp,0xc
c00244d0:	c3                   	ret    
c00244d1:	90                   	nop

c00244d2 <ATAPI::ATAPI()>:
c00244d2:	83 ec 0c             	sub    esp,0xc
c00244d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244d9:	83 ec 04             	sub    esp,0x4
c00244dc:	68 00 08 00 00       	push   0x800
c00244e1:	68 fd ce 02 c0       	push   0xc002cefd
c00244e6:	50                   	push   eax
c00244e7:	e8 54 01 ff ff       	call   c0014640 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00244ec:	83 c4 10             	add    esp,0x10
c00244ef:	ba 18 ce 02 c0       	mov    edx,0xc002ce18
c00244f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244f8:	89 10                	mov    DWORD PTR [eax],edx
c00244fa:	90                   	nop
c00244fb:	83 c4 0c             	add    esp,0xc
c00244fe:	c3                   	ret    
c00244ff:	90                   	nop

c0024500 <ATAPI::readyForCommand()>:
c0024500:	56                   	push   esi
c0024501:	53                   	push   ebx
c0024502:	31 db                	xor    ebx,ebx
c0024504:	50                   	push   eax
c0024505:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024509:	50                   	push   eax
c002450a:	6a 0c                	push   0xc
c002450c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024513:	50                   	push   eax
c0024514:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002451a:	e8 6b ea ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c002451f:	83 c4 10             	add    esp,0x10
c0024522:	a8 88                	test   al,0x88
c0024524:	74 23                	je     c0024549 <ATAPI::readyForCommand()+0x49>
c0024526:	43                   	inc    ebx
c0024527:	83 fb 63             	cmp    ebx,0x63
c002452a:	7e dd                	jle    c0024509 <ATAPI::readyForCommand()+0x9>
c002452c:	51                   	push   ecx
c002452d:	51                   	push   ecx
c002452e:	6a 00                	push   0x0
c0024530:	68 40 42 0f 00       	push   0xf4240
c0024535:	e8 d2 9c ff ff       	call   c001e20c <nanoSleep(unsigned long long)>
c002453a:	83 c4 10             	add    esp,0x10
c002453d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024543:	75 c4                	jne    c0024509 <ATAPI::readyForCommand()+0x9>
c0024545:	31 c0                	xor    eax,eax
c0024547:	eb 02                	jmp    c002454b <ATAPI::readyForCommand()+0x4b>
c0024549:	b0 01                	mov    al,0x1
c002454b:	5a                   	pop    edx
c002454c:	5b                   	pop    ebx
c002454d:	5e                   	pop    esi
c002454e:	c3                   	ret    
c002454f:	90                   	nop

c0024550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024550:	55                   	push   ebp
c0024551:	57                   	push   edi
c0024552:	56                   	push   esi
c0024553:	53                   	push   ebx
c0024554:	83 ec 20             	sub    esp,0x20
c0024557:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002455b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002455f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024563:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024567:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002456b:	6a 01                	push   0x1
c002456d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024574:	50                   	push   eax
c0024575:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002457b:	e8 56 eb ff ff       	call   c00230d6 <IDE::enableIRQs(unsigned char, bool)>
c0024580:	5e                   	pop    esi
c0024581:	58                   	pop    eax
c0024582:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024589:	50                   	push   eax
c002458a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024590:	e8 0f e9 ff ff       	call   c0022ea4 <IDE::prepareInterrupt(unsigned char)>
c0024595:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024598:	e8 63 ff ff ff       	call   c0024500 <ATAPI::readyForCommand()>
c002459d:	83 c4 10             	add    esp,0x10
c00245a0:	84 c0                	test   al,al
c00245a2:	75 0a                	jne    c00245ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00245a4:	bb 01 00 00 00       	mov    ebx,0x1
c00245a9:	e9 57 02 00 00       	jmp    c0024805 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245ae:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00245b4:	c1 e0 04             	shl    eax,0x4
c00245b7:	0f b6 c0             	movzx  eax,al
c00245ba:	50                   	push   eax
c00245bb:	6a 06                	push   0x6
c00245bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245c4:	50                   	push   eax
c00245c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245cb:	e8 fa e8 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245d0:	6a 00                	push   0x0
c00245d2:	6a 01                	push   0x1
c00245d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245db:	50                   	push   eax
c00245dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245e2:	e8 e3 e8 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245e7:	83 c4 20             	add    esp,0x20
c00245ea:	0f b6 c3             	movzx  eax,bl
c00245ed:	0f b6 df             	movzx  ebx,bh
c00245f0:	50                   	push   eax
c00245f1:	6a 04                	push   0x4
c00245f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245fa:	50                   	push   eax
c00245fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024601:	e8 c4 e8 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024606:	53                   	push   ebx
c0024607:	6a 05                	push   0x5
c0024609:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024610:	50                   	push   eax
c0024611:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024617:	e8 ae e8 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c002461c:	83 c4 20             	add    esp,0x20
c002461f:	68 a0 00 00 00       	push   0xa0
c0024624:	6a 07                	push   0x7
c0024626:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002462d:	50                   	push   eax
c002462e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024634:	e8 91 e8 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024639:	83 c4 0c             	add    esp,0xc
c002463c:	6a 01                	push   0x1
c002463e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024645:	50                   	push   eax
c0024646:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002464c:	e8 25 f4 ff ff       	call   c0023a76 <IDE::polling(unsigned char, unsigned int)>
c0024651:	83 c4 10             	add    esp,0x10
c0024654:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002465a:	84 c0                	test   al,al
c002465c:	74 23                	je     c0024681 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002465e:	0f b6 d8             	movzx  ebx,al
c0024661:	0f b6 d2             	movzx  edx,dl
c0024664:	53                   	push   ebx
c0024665:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002466c:	50                   	push   eax
c002466d:	52                   	push   edx
c002466e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024674:	e8 67 f2 ff ff       	call   c00238e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024679:	83 c4 10             	add    esp,0x10
c002467c:	e9 84 01 00 00       	jmp    c0024805 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024681:	0f b6 d2             	movzx  edx,dl
c0024684:	53                   	push   ebx
c0024685:	53                   	push   ebx
c0024686:	52                   	push   edx
c0024687:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002468d:	e8 26 e8 ff ff       	call   c0022eb8 <IDE::getBase(unsigned char)>
c0024692:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024696:	b9 06 00 00 00       	mov    ecx,0x6
c002469b:	89 c2                	mov    edx,eax
c002469d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00246a0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00246a4:	83 c4 10             	add    esp,0x10
c00246a7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246ad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00246b4:	85 db                	test   ebx,ebx
c00246b6:	0f 84 ec 00 00 00    	je     c00247a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00246bc:	51                   	push   ecx
c00246bd:	51                   	push   ecx
c00246be:	52                   	push   edx
c00246bf:	50                   	push   eax
c00246c0:	e8 73 e9 ff ff       	call   c0023038 <IDE::waitInterrupt(unsigned char)>
c00246c5:	83 c4 10             	add    esp,0x10
c00246c8:	84 c0                	test   al,al
c00246ca:	0f 84 d4 fe ff ff    	je     c00245a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00246d0:	56                   	push   esi
c00246d1:	56                   	push   esi
c00246d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d9:	50                   	push   eax
c00246da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e0:	e8 bf e7 ff ff       	call   c0022ea4 <IDE::prepareInterrupt(unsigned char)>
c00246e5:	83 c4 0c             	add    esp,0xc
c00246e8:	6a 04                	push   0x4
c00246ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f1:	50                   	push   eax
c00246f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f8:	e8 8d e8 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c00246fd:	83 c4 0c             	add    esp,0xc
c0024700:	89 c6                	mov    esi,eax
c0024702:	6a 05                	push   0x5
c0024704:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470b:	50                   	push   eax
c002470c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024712:	e8 73 e8 ff ff       	call   c0022f8a <IDE::read(unsigned char, unsigned char)>
c0024717:	89 f1                	mov    ecx,esi
c0024719:	0f b6 c0             	movzx  eax,al
c002471c:	0f b6 f1             	movzx  esi,cl
c002471f:	c1 e0 08             	shl    eax,0x8
c0024722:	09 c6                	or     esi,eax
c0024724:	d1 fe                	sar    esi,1
c0024726:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002472a:	83 c4 10             	add    esp,0x10
c002472d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024732:	74 41                	je     c0024775 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024734:	31 c9                	xor    ecx,ecx
c0024736:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002473c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024743:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024747:	75 0a                	jne    c0024753 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024749:	01 c9                	add    ecx,ecx
c002474b:	01 cd                	add    ebp,ecx
c002474d:	4b                   	dec    ebx
c002474e:	e9 54 ff ff ff       	jmp    c00246a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024753:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024758:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002475c:	51                   	push   ecx
c002475d:	51                   	push   ecx
c002475e:	52                   	push   edx
c002475f:	50                   	push   eax
c0024760:	e8 53 e7 ff ff       	call   c0022eb8 <IDE::getBase(unsigned char)>
c0024765:	89 c2                	mov    edx,eax
c0024767:	89 f0                	mov    eax,esi
c0024769:	66 ef                	out    dx,ax
c002476b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002476f:	83 c4 10             	add    esp,0x10
c0024772:	41                   	inc    ecx
c0024773:	eb c1                	jmp    c0024736 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024775:	31 f6                	xor    esi,esi
c0024777:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002477d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024784:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024788:	75 06                	jne    c0024790 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002478a:	01 f6                	add    esi,esi
c002478c:	01 f5                	add    ebp,esi
c002478e:	eb bd                	jmp    c002474d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024790:	51                   	push   ecx
c0024791:	51                   	push   ecx
c0024792:	52                   	push   edx
c0024793:	50                   	push   eax
c0024794:	e8 1f e7 ff ff       	call   c0022eb8 <IDE::getBase(unsigned char)>
c0024799:	89 c2                	mov    edx,eax
c002479b:	66 ed                	in     ax,dx
c002479d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00247a2:	83 c4 10             	add    esp,0x10
c00247a5:	46                   	inc    esi
c00247a6:	eb cf                	jmp    c0024777 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00247a8:	51                   	push   ecx
c00247a9:	51                   	push   ecx
c00247aa:	52                   	push   edx
c00247ab:	50                   	push   eax
c00247ac:	e8 87 e8 ff ff       	call   c0023038 <IDE::waitInterrupt(unsigned char)>
c00247b1:	83 c4 10             	add    esp,0x10
c00247b4:	84 c0                	test   al,al
c00247b6:	0f 84 e8 fd ff ff    	je     c00245a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247bc:	bb a0 86 01 00       	mov    ebx,0x186a0
c00247c1:	52                   	push   edx
c00247c2:	52                   	push   edx
c00247c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ca:	50                   	push   eax
c00247cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d1:	e8 ce e6 ff ff       	call   c0022ea4 <IDE::prepareInterrupt(unsigned char)>
c00247d6:	83 c4 10             	add    esp,0x10
c00247d9:	50                   	push   eax
c00247da:	50                   	push   eax
c00247db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e2:	50                   	push   eax
c00247e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e9:	e8 ca e6 ff ff       	call   c0022eb8 <IDE::getBase(unsigned char)>
c00247ee:	8d 50 07             	lea    edx,[eax+0x7]
c00247f1:	ec                   	in     al,dx
c00247f2:	83 c4 10             	add    esp,0x10
c00247f5:	a8 88                	test   al,0x88
c00247f7:	74 0a                	je     c0024803 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00247f9:	4b                   	dec    ebx
c00247fa:	75 dd                	jne    c00247d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00247fc:	bb 02 00 00 00       	mov    ebx,0x2
c0024801:	eb 02                	jmp    c0024805 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024803:	31 db                	xor    ebx,ebx
c0024805:	83 c4 1c             	add    esp,0x1c
c0024808:	89 d8                	mov    eax,ebx
c002480a:	5b                   	pop    ebx
c002480b:	5e                   	pop    esi
c002480c:	5f                   	pop    edi
c002480d:	5d                   	pop    ebp
c002480e:	c3                   	ret    
c002480f:	90                   	nop

c0024810 <ATAPI::diskRemoved()>:
c0024810:	83 ec 18             	sub    esp,0x18
c0024813:	68 09 cf 02 c0       	push   0xc002cf09
c0024818:	e8 d9 e5 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c002481d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024821:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024828:	83 c4 1c             	add    esp,0x1c
c002482b:	c3                   	ret    

c002482c <ATAPI::eject()>:
c002482c:	57                   	push   edi
c002482d:	b9 03 00 00 00       	mov    ecx,0x3
c0024832:	53                   	push   ebx
c0024833:	83 ec 14             	sub    esp,0x14
c0024836:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002483a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002483e:	fc                   	cld    
c002483f:	31 c0                	xor    eax,eax
c0024841:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024843:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024848:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002484d:	50                   	push   eax
c002484e:	50                   	push   eax
c002484f:	6a 00                	push   0x0
c0024851:	6a 00                	push   0x0
c0024853:	6a 00                	push   0x0
c0024855:	6a 02                	push   0x2
c0024857:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002485b:	50                   	push   eax
c002485c:	53                   	push   ebx
c002485d:	e8 ee fc ff ff       	call   c0024550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024862:	83 c4 14             	add    esp,0x14
c0024865:	53                   	push   ebx
c0024866:	e8 a5 ff ff ff       	call   c0024810 <ATAPI::diskRemoved()>
c002486b:	83 c4 24             	add    esp,0x24
c002486e:	31 c0                	xor    eax,eax
c0024870:	5b                   	pop    ebx
c0024871:	5f                   	pop    edi
c0024872:	c3                   	ret    
c0024873:	90                   	nop

c0024874 <ATAPI::diskInserted()>:
c0024874:	53                   	push   ebx
c0024875:	83 ec 14             	sub    esp,0x14
c0024878:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002487c:	68 20 cf 02 c0       	push   0xc002cf20
c0024881:	e8 70 e5 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0024886:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002488d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024890:	e8 13 fe fe ff       	call   c00146a8 <PhysicalDisk::startCache()>
c0024895:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024899:	83 c4 18             	add    esp,0x18
c002489c:	5b                   	pop    ebx
c002489d:	e9 7c 1f ff ff       	jmp    c001681e <createPartitionsForDisk(PhysicalDisk*)>

c00248a2 <ATAPI::detectMedia()>:
c00248a2:	56                   	push   esi
c00248a3:	53                   	push   ebx
c00248a4:	83 ec 28             	sub    esp,0x28
c00248a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00248ab:	6a 0c                	push   0xc
c00248ad:	6a 00                	push   0x0
c00248af:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00248b3:	56                   	push   esi
c00248b4:	e8 bf be fd ff       	call   c0000778 <memset>
c00248b9:	58                   	pop    eax
c00248ba:	5a                   	pop    edx
c00248bb:	6a 00                	push   0x0
c00248bd:	6a 00                	push   0x0
c00248bf:	6a 00                	push   0x0
c00248c1:	6a 00                	push   0x0
c00248c3:	56                   	push   esi
c00248c4:	53                   	push   ebx
c00248c5:	e8 86 fc ff ff       	call   c0024550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248ca:	83 c4 1c             	add    esp,0x1c
c00248cd:	6a 0c                	push   0xc
c00248cf:	6a 00                	push   0x0
c00248d1:	56                   	push   esi
c00248d2:	e8 a1 be fd ff       	call   c0000778 <memset>
c00248d7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00248dc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00248e1:	59                   	pop    ecx
c00248e2:	58                   	pop    eax
c00248e3:	6a 01                	push   0x1
c00248e5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00248e9:	50                   	push   eax
c00248ea:	6a 00                	push   0x0
c00248ec:	6a 12                	push   0x12
c00248ee:	56                   	push   esi
c00248ef:	53                   	push   ebx
c00248f0:	e8 5b fc ff ff       	call   c0024550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248f5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00248f9:	83 c4 20             	add    esp,0x20
c00248fc:	83 e0 7f             	and    eax,0x7f
c00248ff:	3c 70                	cmp    al,0x70
c0024901:	74 15                	je     c0024918 <ATAPI::detectMedia()+0x76>
c0024903:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002490a:	75 0c                	jne    c0024918 <ATAPI::detectMedia()+0x76>
c002490c:	83 ec 0c             	sub    esp,0xc
c002490f:	53                   	push   ebx
c0024910:	e8 5f ff ff ff       	call   c0024874 <ATAPI::diskInserted()>
c0024915:	83 c4 10             	add    esp,0x10
c0024918:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002491c:	83 e0 0f             	and    eax,0xf
c002491f:	3c 02                	cmp    al,0x2
c0024921:	75 1b                	jne    c002493e <ATAPI::detectMedia()+0x9c>
c0024923:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024928:	75 2d                	jne    c0024957 <ATAPI::detectMedia()+0xb5>
c002492a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024931:	74 24                	je     c0024957 <ATAPI::detectMedia()+0xb5>
c0024933:	83 ec 0c             	sub    esp,0xc
c0024936:	53                   	push   ebx
c0024937:	e8 d4 fe ff ff       	call   c0024810 <ATAPI::diskRemoved()>
c002493c:	eb 16                	jmp    c0024954 <ATAPI::detectMedia()+0xb2>
c002493e:	84 c0                	test   al,al
c0024940:	75 15                	jne    c0024957 <ATAPI::detectMedia()+0xb5>
c0024942:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024949:	75 0c                	jne    c0024957 <ATAPI::detectMedia()+0xb5>
c002494b:	83 ec 0c             	sub    esp,0xc
c002494e:	53                   	push   ebx
c002494f:	e8 20 ff ff ff       	call   c0024874 <ATAPI::diskInserted()>
c0024954:	83 c4 10             	add    esp,0x10
c0024957:	83 c4 24             	add    esp,0x24
c002495a:	5b                   	pop    ebx
c002495b:	5e                   	pop    esi
c002495c:	c3                   	ret    
c002495d:	90                   	nop

c002495e <ATAPI::open(int, int, void*)>:
c002495e:	53                   	push   ebx
c002495f:	83 ec 08             	sub    esp,0x8
c0024962:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002496a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002496e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024974:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002497a:	c1 e0 06             	shl    eax,0x6
c002497d:	01 d0                	add    eax,edx
c002497f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024986:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002498c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024993:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002499d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00249a3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00249aa:	6a 04                	push   0x4
c00249ac:	6a 0c                	push   0xc
c00249ae:	51                   	push   ecx
c00249af:	52                   	push   edx
c00249b0:	e8 15 e5 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249b5:	90                   	nop
c00249b6:	90                   	nop
c00249b7:	6a 00                	push   0x0
c00249b9:	6a 0c                	push   0xc
c00249bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249c2:	50                   	push   eax
c00249c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249c9:	e8 fc e4 ff ff       	call   c0022eca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249ce:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00249d5:	83 c4 14             	add    esp,0x14
c00249d8:	53                   	push   ebx
c00249d9:	e8 c4 fe ff ff       	call   c00248a2 <ATAPI::detectMedia()>
c00249de:	31 c0                	xor    eax,eax
c00249e0:	83 c4 18             	add    esp,0x18
c00249e3:	5b                   	pop    ebx
c00249e4:	c3                   	ret    
c00249e5:	90                   	nop

c00249e6 <ATAPI::read(unsigned long long, int, void*)>:
c00249e6:	55                   	push   ebp
c00249e7:	57                   	push   edi
c00249e8:	56                   	push   esi
c00249e9:	53                   	push   ebx
c00249ea:	83 ec 1c             	sub    esp,0x1c
c00249ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00249f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249f5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00249f9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a00:	74 41                	je     c0024a43 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024a02:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a06:	b9 03 00 00 00       	mov    ecx,0x3
c0024a0b:	fc                   	cld    
c0024a0c:	31 c0                	xor    eax,eax
c0024a0e:	86 fb                	xchg   bl,bh
c0024a10:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a12:	c1 c3 10             	rol    ebx,0x10
c0024a15:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024a1a:	89 e8                	mov    eax,ebp
c0024a1c:	86 fb                	xchg   bl,bh
c0024a1e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024a22:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024a26:	50                   	push   eax
c0024a27:	50                   	push   eax
c0024a28:	55                   	push   ebp
c0024a29:	c1 e5 0b             	shl    ebp,0xb
c0024a2c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024a30:	6a 00                	push   0x0
c0024a32:	55                   	push   ebp
c0024a33:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a37:	50                   	push   eax
c0024a38:	56                   	push   esi
c0024a39:	e8 12 fb ff ff       	call   c0024550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a3e:	83 c4 20             	add    esp,0x20
c0024a41:	eb 1a                	jmp    c0024a5d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024a43:	83 ec 0c             	sub    esp,0xc
c0024a46:	56                   	push   esi
c0024a47:	e8 56 fe ff ff       	call   c00248a2 <ATAPI::detectMedia()>
c0024a4c:	83 c4 10             	add    esp,0x10
c0024a4f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a56:	75 aa                	jne    c0024a02 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024a58:	b8 02 00 00 00       	mov    eax,0x2
c0024a5d:	83 c4 1c             	add    esp,0x1c
c0024a60:	5b                   	pop    ebx
c0024a61:	5e                   	pop    esi
c0024a62:	5f                   	pop    edi
c0024a63:	5d                   	pop    ebp
c0024a64:	c3                   	ret    
c0024a65:	90                   	nop

c0024a66 <SATA::close(int, int, void*)>:
c0024a66:	83 ec 0c             	sub    esp,0xc
c0024a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a73:	85 c0                	test   eax,eax
c0024a75:	74 0c                	je     c0024a83 <SATA::close(int, int, void*)+0x1d>
c0024a77:	83 ec 0c             	sub    esp,0xc
c0024a7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a7c:	50                   	push   eax
c0024a7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a80:	83 c4 10             	add    esp,0x10
c0024a83:	31 c0                	xor    eax,eax
c0024a85:	83 c4 0c             	add    esp,0xc
c0024a88:	c3                   	ret    
c0024a89:	90                   	nop

c0024a8a <SATA::powerSaving(PowerSavingLevel)>:
c0024a8a:	c3                   	ret    
c0024a8b:	90                   	nop

c0024a8c <SATA::open(int, int, void*)>:
c0024a8c:	56                   	push   esi
c0024a8d:	53                   	push   ebx
c0024a8e:	50                   	push   eax
c0024a8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a97:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024aa1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024aa7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024ab1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ab5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024abf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ac5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024acc:	e8 0c b4 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024ad1:	89 c6                	mov    esi,eax
c0024ad3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ad9:	81 c6 00 10 00 00    	add    esi,0x1000
c0024adf:	e8 f9 b3 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024ae4:	39 c6                	cmp    esi,eax
c0024ae6:	74 10                	je     c0024af8 <SATA::open(int, int, void*)+0x6c>
c0024ae8:	83 ec 0c             	sub    esp,0xc
c0024aeb:	68 48 ce 02 c0       	push   0xc002ce48
c0024af0:	e8 a2 59 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0024af5:	83 c4 10             	add    esp,0x10
c0024af8:	83 ec 0c             	sub    esp,0xc
c0024afb:	6a 02                	push   0x2
c0024afd:	e8 1d d0 fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0024b02:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b08:	e8 5a d2 fe ff       	call   c0011d67 <Virt::getAKernelVAS()>
c0024b0d:	6a 03                	push   0x3
c0024b0f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024b15:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024b1b:	50                   	push   eax
c0024b1c:	e8 81 d7 fe ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024b21:	83 c4 14             	add    esp,0x14
c0024b24:	53                   	push   ebx
c0024b25:	e8 7e fb fe ff       	call   c00146a8 <PhysicalDisk::startCache()>
c0024b2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b2d:	e8 ec 1c ff ff       	call   c001681e <createPartitionsForDisk(PhysicalDisk*)>
c0024b32:	83 c4 14             	add    esp,0x14
c0024b35:	31 c0                	xor    eax,eax
c0024b37:	5b                   	pop    ebx
c0024b38:	5e                   	pop    esi
c0024b39:	c3                   	ret    

c0024b3a <SATA::SATA()>:
c0024b3a:	83 ec 0c             	sub    esp,0xc
c0024b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b41:	83 ec 04             	sub    esp,0x4
c0024b44:	68 00 02 00 00       	push   0x200
c0024b49:	68 5c ce 02 c0       	push   0xc002ce5c
c0024b4e:	50                   	push   eax
c0024b4f:	e8 ec fa fe ff       	call   c0014640 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b54:	83 c4 10             	add    esp,0x10
c0024b57:	ba cc ce 02 c0       	mov    edx,0xc002cecc
c0024b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b60:	89 10                	mov    DWORD PTR [eax],edx
c0024b62:	90                   	nop
c0024b63:	83 c4 0c             	add    esp,0xc
c0024b66:	c3                   	ret    
c0024b67:	90                   	nop

c0024b68 <SATA::access(unsigned long long, int, void*, bool)>:
c0024b68:	55                   	push   ebp
c0024b69:	57                   	push   edi
c0024b6a:	56                   	push   esi
c0024b6b:	53                   	push   ebx
c0024b6c:	83 ec 2c             	sub    esp,0x2c
c0024b6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024b73:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024b77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b7b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024b7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b83:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024b88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b8c:	7e 10                	jle    c0024b9e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024b8e:	83 ec 0c             	sub    esp,0xc
c0024b91:	68 6c ce 02 c0       	push   0xc002ce6c
c0024b96:	e8 fc 58 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0024b9b:	83 c4 10             	add    esp,0x10
c0024b9e:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024ba4:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024baa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024bb4:	89 f0                	mov    eax,esi
c0024bb6:	c1 e0 07             	shl    eax,0x7
c0024bb9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024bbd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024bc7:	53                   	push   ebx
c0024bc8:	8d 46 02             	lea    eax,[esi+0x2]
c0024bcb:	53                   	push   ebx
c0024bcc:	c1 e0 07             	shl    eax,0x7
c0024bcf:	bb 01 00 00 00       	mov    ebx,0x1
c0024bd4:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024bd8:	50                   	push   eax
c0024bd9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024bdf:	e8 aa ef ff ff       	call   c0023b8e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024be4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024be8:	83 c4 10             	add    esp,0x10
c0024beb:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024bf0:	0f 84 ce 01 00 00    	je     c0024dc4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024bf6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bfa:	c1 e0 09             	shl    eax,0x9
c0024bfd:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024c02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024c06:	74 17                	je     c0024c1f <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024c08:	51                   	push   ecx
c0024c09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c0d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024c11:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024c17:	e8 28 bb fd ff       	call   c0000744 <memcpy>
c0024c1c:	83 c4 10             	add    esp,0x10
c0024c1f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c25:	8d 46 02             	lea    eax,[esi+0x2]
c0024c28:	c1 e0 07             	shl    eax,0x7
c0024c2b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c31:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c37:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c3d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c41:	c1 e1 05             	shl    ecx,0x5
c0024c44:	01 c8                	add    eax,ecx
c0024c46:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c4a:	8a 18                	mov    bl,BYTE PTR [eax]
c0024c4c:	83 e1 01             	and    ecx,0x1
c0024c4f:	83 e3 bf             	and    ebx,0xffffffbf
c0024c52:	c1 e1 06             	shl    ecx,0x6
c0024c55:	09 d9                	or     ecx,ebx
c0024c57:	88 08                	mov    BYTE PTR [eax],cl
c0024c59:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c5b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024c61:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024c67:	89 08                	mov    DWORD PTR [eax],ecx
c0024c69:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c6f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c75:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c7b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c7e:	52                   	push   edx
c0024c7f:	68 90 00 00 00       	push   0x90
c0024c84:	6a 00                	push   0x0
c0024c86:	53                   	push   ebx
c0024c87:	e8 ec ba fd ff       	call   c0000778 <memset>
c0024c8c:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024c92:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024c96:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024c9c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ca0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024ca4:	83 c4 10             	add    esp,0x10
c0024ca7:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024caa:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024cb0:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024cb6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024cbb:	09 c8                	or     eax,ecx
c0024cbd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024cc3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024cc6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ccd:	66 25 00 7f          	and    ax,0x7f00
c0024cd1:	66 0d 27 80          	or     ax,0x8027
c0024cd5:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024cda:	66 89 03             	mov    WORD PTR [ebx],ax
c0024cdd:	19 c0                	sbb    eax,eax
c0024cdf:	83 e0 f0             	and    eax,0xfffffff0
c0024ce2:	83 c0 35             	add    eax,0x35
c0024ce5:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024ce8:	89 f8                	mov    eax,edi
c0024cea:	c1 e8 10             	shr    eax,0x10
c0024ced:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024cf0:	89 f8                	mov    eax,edi
c0024cf2:	c1 e8 18             	shr    eax,0x18
c0024cf5:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024cf8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024cfc:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024cff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d03:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024d06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d0a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024d0e:	89 f3                	mov    ebx,esi
c0024d10:	31 c0                	xor    eax,eax
c0024d12:	c1 e3 07             	shl    ebx,0x7
c0024d15:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024d19:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024d1f:	80 e1 88             	and    cl,0x88
c0024d22:	74 0a                	je     c0024d2e <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024d24:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d29:	74 0a                	je     c0024d35 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024d2b:	40                   	inc    eax
c0024d2c:	eb eb                	jmp    c0024d19 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024d2e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d33:	75 0a                	jne    c0024d3f <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024d35:	83 ec 0c             	sub    esp,0xc
c0024d38:	68 a5 ce 02 c0       	push   0xc002cea5
c0024d3d:	eb 56                	jmp    c0024d95 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024d3f:	b8 01 00 00 00       	mov    eax,0x1
c0024d44:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024d48:	c1 e6 07             	shl    esi,0x7
c0024d4b:	d3 e0                	shl    eax,cl
c0024d4d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024d51:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024d57:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024d5d:	85 c8                	test   eax,ecx
c0024d5f:	74 20                	je     c0024d81 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024d61:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024d67:	0f ba e1 1e          	bt     ecx,0x1e
c0024d6b:	73 ea                	jae    c0024d57 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024d6d:	83 ec 0c             	sub    esp,0xc
c0024d70:	31 db                	xor    ebx,ebx
c0024d72:	68 b3 ce 02 c0       	push   0xc002ceb3
c0024d77:	e8 1b 57 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0024d7c:	83 c4 10             	add    esp,0x10
c0024d7f:	eb 43                	jmp    c0024dc4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d81:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024d87:	0f ba e0 1e          	bt     eax,0x1e
c0024d8b:	73 17                	jae    c0024da4 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024d8d:	83 ec 0c             	sub    esp,0xc
c0024d90:	68 b3 ce 02 c0       	push   0xc002ceb3
c0024d95:	e8 fd 56 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0024d9a:	bb 01 00 00 00       	mov    ebx,0x1
c0024d9f:	83 c4 10             	add    esp,0x10
c0024da2:	eb 20                	jmp    c0024dc4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024da4:	31 db                	xor    ebx,ebx
c0024da6:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024dab:	75 17                	jne    c0024dc4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dad:	50                   	push   eax
c0024dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024db2:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024db8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024dbc:	e8 83 b9 fd ff       	call   c0000744 <memcpy>
c0024dc1:	83 c4 10             	add    esp,0x10
c0024dc4:	83 c4 2c             	add    esp,0x2c
c0024dc7:	89 d8                	mov    eax,ebx
c0024dc9:	5b                   	pop    ebx
c0024dca:	5e                   	pop    esi
c0024dcb:	5f                   	pop    edi
c0024dcc:	5d                   	pop    ebp
c0024dcd:	c3                   	ret    

c0024dce <SATA::read(unsigned long long, int, void*)>:
c0024dce:	57                   	push   edi
c0024dcf:	b8 04 00 00 00       	mov    eax,0x4
c0024dd4:	56                   	push   esi
c0024dd5:	53                   	push   ebx
c0024dd6:	83 ec 10             	sub    esp,0x10
c0024dd9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ddd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024de1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024de4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024de8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024dec:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024df2:	77 3b                	ja     c0024e2f <SATA::read(unsigned long long, int, void*)+0x61>
c0024df4:	b8 06 00 00 00       	mov    eax,0x6
c0024df9:	85 d2                	test   edx,edx
c0024dfb:	74 32                	je     c0024e2f <SATA::read(unsigned long long, int, void*)+0x61>
c0024dfd:	50                   	push   eax
c0024dfe:	50                   	push   eax
c0024dff:	6a 00                	push   0x0
c0024e01:	52                   	push   edx
c0024e02:	53                   	push   ebx
c0024e03:	57                   	push   edi
c0024e04:	56                   	push   esi
c0024e05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e09:	e8 5a fd ff ff       	call   c0024b68 <SATA::access(unsigned long long, int, void*, bool)>
c0024e0e:	83 c4 20             	add    esp,0x20
c0024e11:	85 c0                	test   eax,eax
c0024e13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e17:	75 11                	jne    c0024e2a <SATA::read(unsigned long long, int, void*)+0x5c>
c0024e19:	01 1d 68 27 03 c0    	add    DWORD PTR ds:0xc0032768,ebx
c0024e1f:	e8 50 bb fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0024e24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e28:	eb 05                	jmp    c0024e2f <SATA::read(unsigned long long, int, void*)+0x61>
c0024e2a:	b8 01 00 00 00       	mov    eax,0x1
c0024e2f:	83 c4 10             	add    esp,0x10
c0024e32:	5b                   	pop    ebx
c0024e33:	5e                   	pop    esi
c0024e34:	5f                   	pop    edi
c0024e35:	c3                   	ret    

c0024e36 <SATA::write(unsigned long long, int, void*)>:
c0024e36:	55                   	push   ebp
c0024e37:	b8 04 00 00 00       	mov    eax,0x4
c0024e3c:	57                   	push   edi
c0024e3d:	56                   	push   esi
c0024e3e:	53                   	push   ebx
c0024e3f:	83 ec 1c             	sub    esp,0x1c
c0024e42:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024e46:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024e4a:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024e4d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024e51:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024e55:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024e5b:	77 56                	ja     c0024eb3 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e5d:	b8 06 00 00 00       	mov    eax,0x6
c0024e62:	85 ff                	test   edi,edi
c0024e64:	74 4d                	je     c0024eb3 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e66:	89 ee                	mov    esi,ebp
c0024e68:	c1 e6 09             	shl    esi,0x9
c0024e6b:	01 fe                	add    esi,edi
c0024e6d:	89 c8                	mov    eax,ecx
c0024e6f:	89 da                	mov    edx,ebx
c0024e71:	83 c0 01             	add    eax,0x1
c0024e74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e78:	83 d2 00             	adc    edx,0x0
c0024e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024e7f:	50                   	push   eax
c0024e80:	50                   	push   eax
c0024e81:	6a 01                	push   0x1
c0024e83:	57                   	push   edi
c0024e84:	81 c7 00 02 00 00    	add    edi,0x200
c0024e8a:	6a 01                	push   0x1
c0024e8c:	53                   	push   ebx
c0024e8d:	51                   	push   ecx
c0024e8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024e92:	e8 d1 fc ff ff       	call   c0024b68 <SATA::access(unsigned long long, int, void*, bool)>
c0024e97:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024e9b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e9f:	83 c4 20             	add    esp,0x20
c0024ea2:	39 f7                	cmp    edi,esi
c0024ea4:	75 c7                	jne    c0024e6d <SATA::write(unsigned long long, int, void*)+0x37>
c0024ea6:	01 2d 64 27 03 c0    	add    DWORD PTR ds:0xc0032764,ebp
c0024eac:	e8 c3 ba fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0024eb1:	31 c0                	xor    eax,eax
c0024eb3:	83 c4 1c             	add    esp,0x1c
c0024eb6:	5b                   	pop    ebx
c0024eb7:	5e                   	pop    esi
c0024eb8:	5f                   	pop    edi
c0024eb9:	5d                   	pop    ebp
c0024eba:	c3                   	ret    
c0024ebb:	90                   	nop

c0024ebc <SATAPI::write(unsigned long long, int, void*)>:
c0024ebc:	b8 03 00 00 00       	mov    eax,0x3
c0024ec1:	c3                   	ret    

c0024ec2 <SATAPI::close(int, int, void*)>:
c0024ec2:	83 ec 0c             	sub    esp,0xc
c0024ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ec9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ecf:	85 c0                	test   eax,eax
c0024ed1:	74 0c                	je     c0024edf <SATAPI::close(int, int, void*)+0x1d>
c0024ed3:	83 ec 0c             	sub    esp,0xc
c0024ed6:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ed8:	50                   	push   eax
c0024ed9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024edc:	83 c4 10             	add    esp,0x10
c0024edf:	31 c0                	xor    eax,eax
c0024ee1:	83 c4 0c             	add    esp,0xc
c0024ee4:	c3                   	ret    
c0024ee5:	90                   	nop

c0024ee6 <SATAPI::SATAPI()>:
c0024ee6:	83 ec 0c             	sub    esp,0xc
c0024ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eed:	83 ec 04             	sub    esp,0x4
c0024ef0:	68 00 08 00 00       	push   0x800
c0024ef5:	68 fc ce 02 c0       	push   0xc002cefc
c0024efa:	50                   	push   eax
c0024efb:	e8 40 f7 fe ff       	call   c0014640 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f00:	83 c4 10             	add    esp,0x10
c0024f03:	ba a8 cf 02 c0       	mov    edx,0xc002cfa8
c0024f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f0c:	89 10                	mov    DWORD PTR [eax],edx
c0024f0e:	90                   	nop
c0024f0f:	83 c4 0c             	add    esp,0xc
c0024f12:	c3                   	ret    
c0024f13:	90                   	nop

c0024f14 <SATAPI::diskRemoved()>:
c0024f14:	83 ec 18             	sub    esp,0x18
c0024f17:	68 08 cf 02 c0       	push   0xc002cf08
c0024f1c:	e8 d5 de fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0024f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f25:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024f2c:	83 c4 1c             	add    esp,0x1c
c0024f2f:	c3                   	ret    

c0024f30 <SATAPI::diskInserted()>:
c0024f30:	53                   	push   ebx
c0024f31:	83 ec 14             	sub    esp,0x14
c0024f34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024f38:	68 1f cf 02 c0       	push   0xc002cf1f
c0024f3d:	e8 b4 de fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0024f42:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024f49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f4c:	e8 57 f7 fe ff       	call   c00146a8 <PhysicalDisk::startCache()>
c0024f51:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024f55:	83 c4 18             	add    esp,0x18
c0024f58:	5b                   	pop    ebx
c0024f59:	e9 c0 18 ff ff       	jmp    c001681e <createPartitionsForDisk(PhysicalDisk*)>

c0024f5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024f5e:	55                   	push   ebp
c0024f5f:	57                   	push   edi
c0024f60:	56                   	push   esi
c0024f61:	53                   	push   ebx
c0024f62:	83 ec 24             	sub    esp,0x24
c0024f65:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024f69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f6d:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024f73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f77:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f7b:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024f81:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024f84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f8a:	c1 e3 07             	shl    ebx,0x7
c0024f8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f91:	89 f8                	mov    eax,edi
c0024f93:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024f97:	c1 e0 07             	shl    eax,0x7
c0024f9a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024fa2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024fac:	53                   	push   ebx
c0024fad:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024fb3:	e8 d6 eb ff ff       	call   c0023b8e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024fb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024fbc:	83 c4 10             	add    esp,0x10
c0024fbf:	b8 01 00 00 00       	mov    eax,0x1
c0024fc4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024fc9:	0f 84 8a 01 00 00    	je     c0025159 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024fcf:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024fd7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024fdd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024fe3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024fe7:	c1 e1 05             	shl    ecx,0x5
c0024fea:	01 c8                	add    eax,ecx
c0024fec:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024fee:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024ff4:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024ffa:	89 08                	mov    DWORD PTR [eax],ecx
c0024ffc:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025002:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025008:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002500e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025011:	52                   	push   edx
c0025012:	68 90 00 00 00       	push   0x90
c0025017:	6a 00                	push   0x0
c0025019:	53                   	push   ebx
c002501a:	e8 59 b7 fd ff       	call   c0000778 <memset>
c002501f:	83 c4 0c             	add    esp,0xc
c0025022:	8d 43 40             	lea    eax,[ebx+0x40]
c0025025:	6a 0c                	push   0xc
c0025027:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002502b:	50                   	push   eax
c002502c:	e8 13 b7 fd ff       	call   c0000744 <memcpy>
c0025031:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025037:	89 ea                	mov    edx,ebp
c0025039:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002503f:	c1 ea 18             	shr    edx,0x18
c0025042:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025046:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025049:	8d 48 ff             	lea    ecx,[eax-0x1]
c002504c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025050:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025056:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002505c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025061:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025065:	09 c8                	or     eax,ecx
c0025067:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002506b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025071:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025074:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002507b:	66 25 00 7f          	and    ax,0x7f00
c002507f:	66 0d 27 80          	or     ax,0x8027
c0025083:	66 89 03             	mov    WORD PTR [ebx],ax
c0025086:	89 e8                	mov    eax,ebp
c0025088:	c1 e8 10             	shr    eax,0x10
c002508b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002508e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025092:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025099:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002509c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00250a0:	83 c4 10             	add    esp,0x10
c00250a3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00250a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00250ab:	31 c0                	xor    eax,eax
c00250ad:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00250b3:	80 e1 88             	and    cl,0x88
c00250b6:	74 0a                	je     c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00250b8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250bd:	74 0a                	je     c00250c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00250bf:	40                   	inc    eax
c00250c0:	eb eb                	jmp    c00250ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00250c2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250c7:	75 0f                	jne    c00250d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00250c9:	83 ec 0c             	sub    esp,0xc
c00250cc:	68 a5 ce 02 c0       	push   0xc002cea5
c00250d1:	e8 c1 53 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00250d6:	eb 3a                	jmp    c0025112 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00250d8:	b8 01 00 00 00       	mov    eax,0x1
c00250dd:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00250e1:	c1 e7 07             	shl    edi,0x7
c00250e4:	d3 e0                	shl    eax,cl
c00250e6:	03 3c 24             	add    edi,DWORD PTR [esp]
c00250e9:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00250ef:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00250f5:	85 d0                	test   eax,edx
c00250f7:	74 23                	je     c002511c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00250f9:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00250ff:	0f ba e2 1e          	bt     edx,0x1e
c0025103:	73 ea                	jae    c00250ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025105:	83 ec 0c             	sub    esp,0xc
c0025108:	68 37 cf 02 c0       	push   0xc002cf37
c002510d:	e8 e4 dc fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0025112:	83 c4 10             	add    esp,0x10
c0025115:	b8 01 00 00 00       	mov    eax,0x1
c002511a:	eb 3d                	jmp    c0025159 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002511c:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025122:	0f ba e0 1e          	bt     eax,0x1e
c0025126:	73 0a                	jae    c0025132 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025128:	83 ec 0c             	sub    esp,0xc
c002512b:	68 4a cf 02 c0       	push   0xc002cf4a
c0025130:	eb db                	jmp    c002510d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025132:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025137:	74 1e                	je     c0025157 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025139:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002513e:	74 17                	je     c0025157 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025140:	50                   	push   eax
c0025141:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025145:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c002514b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002514f:	e8 f0 b5 fd ff       	call   c0000744 <memcpy>
c0025154:	83 c4 10             	add    esp,0x10
c0025157:	31 c0                	xor    eax,eax
c0025159:	83 c4 1c             	add    esp,0x1c
c002515c:	5b                   	pop    ebx
c002515d:	5e                   	pop    esi
c002515e:	5f                   	pop    edi
c002515f:	5d                   	pop    ebp
c0025160:	c3                   	ret    
c0025161:	90                   	nop

c0025162 <SATAPI::eject()>:
c0025162:	57                   	push   edi
c0025163:	b9 03 00 00 00       	mov    ecx,0x3
c0025168:	53                   	push   ebx
c0025169:	83 ec 14             	sub    esp,0x14
c002516c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025170:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025174:	fc                   	cld    
c0025175:	31 c0                	xor    eax,eax
c0025177:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025179:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002517e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025183:	50                   	push   eax
c0025184:	6a 00                	push   0x0
c0025186:	6a 00                	push   0x0
c0025188:	6a 00                	push   0x0
c002518a:	6a 00                	push   0x0
c002518c:	6a 02                	push   0x2
c002518e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025192:	50                   	push   eax
c0025193:	53                   	push   ebx
c0025194:	e8 c5 fd ff ff       	call   c0024f5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025199:	83 c4 14             	add    esp,0x14
c002519c:	53                   	push   ebx
c002519d:	e8 72 fd ff ff       	call   c0024f14 <SATAPI::diskRemoved()>
c00251a2:	83 c4 24             	add    esp,0x24
c00251a5:	31 c0                	xor    eax,eax
c00251a7:	5b                   	pop    ebx
c00251a8:	5f                   	pop    edi
c00251a9:	c3                   	ret    

c00251aa <SATAPI::detectMedia()>:
c00251aa:	56                   	push   esi
c00251ab:	53                   	push   ebx
c00251ac:	83 ec 28             	sub    esp,0x28
c00251af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251b3:	6a 0c                	push   0xc
c00251b5:	6a 00                	push   0x0
c00251b7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251bb:	56                   	push   esi
c00251bc:	e8 b7 b5 fd ff       	call   c0000778 <memset>
c00251c1:	83 c4 0c             	add    esp,0xc
c00251c4:	6a 00                	push   0x0
c00251c6:	6a 00                	push   0x0
c00251c8:	6a 00                	push   0x0
c00251ca:	6a 00                	push   0x0
c00251cc:	6a 00                	push   0x0
c00251ce:	56                   	push   esi
c00251cf:	53                   	push   ebx
c00251d0:	e8 89 fd ff ff       	call   c0024f5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251d5:	83 c4 1c             	add    esp,0x1c
c00251d8:	6a 0c                	push   0xc
c00251da:	6a 00                	push   0x0
c00251dc:	56                   	push   esi
c00251dd:	e8 96 b5 fd ff       	call   c0000778 <memset>
c00251e2:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00251e7:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00251ec:	83 c4 0c             	add    esp,0xc
c00251ef:	6a 01                	push   0x1
c00251f1:	8d 44 24 16          	lea    eax,[esp+0x16]
c00251f5:	50                   	push   eax
c00251f6:	6a 00                	push   0x0
c00251f8:	6a 00                	push   0x0
c00251fa:	6a 12                	push   0x12
c00251fc:	56                   	push   esi
c00251fd:	53                   	push   ebx
c00251fe:	e8 5b fd ff ff       	call   c0024f5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025203:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025207:	83 c4 20             	add    esp,0x20
c002520a:	83 e0 7f             	and    eax,0x7f
c002520d:	3c 70                	cmp    al,0x70
c002520f:	74 15                	je     c0025226 <SATAPI::detectMedia()+0x7c>
c0025211:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025218:	75 0c                	jne    c0025226 <SATAPI::detectMedia()+0x7c>
c002521a:	83 ec 0c             	sub    esp,0xc
c002521d:	53                   	push   ebx
c002521e:	e8 0d fd ff ff       	call   c0024f30 <SATAPI::diskInserted()>
c0025223:	83 c4 10             	add    esp,0x10
c0025226:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002522a:	83 e0 0f             	and    eax,0xf
c002522d:	3c 02                	cmp    al,0x2
c002522f:	75 1b                	jne    c002524c <SATAPI::detectMedia()+0xa2>
c0025231:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025236:	75 2d                	jne    c0025265 <SATAPI::detectMedia()+0xbb>
c0025238:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002523f:	74 24                	je     c0025265 <SATAPI::detectMedia()+0xbb>
c0025241:	83 ec 0c             	sub    esp,0xc
c0025244:	53                   	push   ebx
c0025245:	e8 ca fc ff ff       	call   c0024f14 <SATAPI::diskRemoved()>
c002524a:	eb 16                	jmp    c0025262 <SATAPI::detectMedia()+0xb8>
c002524c:	84 c0                	test   al,al
c002524e:	75 15                	jne    c0025265 <SATAPI::detectMedia()+0xbb>
c0025250:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025257:	75 0c                	jne    c0025265 <SATAPI::detectMedia()+0xbb>
c0025259:	83 ec 0c             	sub    esp,0xc
c002525c:	53                   	push   ebx
c002525d:	e8 ce fc ff ff       	call   c0024f30 <SATAPI::diskInserted()>
c0025262:	83 c4 10             	add    esp,0x10
c0025265:	83 c4 24             	add    esp,0x24
c0025268:	5b                   	pop    ebx
c0025269:	5e                   	pop    esi
c002526a:	c3                   	ret    
c002526b:	90                   	nop

c002526c <SATAPI::open(int, int, void*)>:
c002526c:	56                   	push   esi
c002526d:	53                   	push   ebx
c002526e:	50                   	push   eax
c002526f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025273:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025277:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025281:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025287:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025291:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025295:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002529f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00252a5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252ac:	e8 2c ac fe ff       	call   c000fedd <Phys::allocatePage()>
c00252b1:	89 c6                	mov    esi,eax
c00252b3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00252b9:	81 c6 00 10 00 00    	add    esi,0x1000
c00252bf:	e8 19 ac fe ff       	call   c000fedd <Phys::allocatePage()>
c00252c4:	39 c6                	cmp    esi,eax
c00252c6:	74 10                	je     c00252d8 <SATAPI::open(int, int, void*)+0x6c>
c00252c8:	83 ec 0c             	sub    esp,0xc
c00252cb:	68 5f cf 02 c0       	push   0xc002cf5f
c00252d0:	e8 c2 51 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00252d5:	83 c4 10             	add    esp,0x10
c00252d8:	83 ec 0c             	sub    esp,0xc
c00252db:	6a 02                	push   0x2
c00252dd:	e8 3d c8 fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00252e2:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00252e8:	e8 7a ca fe ff       	call   c0011d67 <Virt::getAKernelVAS()>
c00252ed:	6a 03                	push   0x3
c00252ef:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00252f5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00252fb:	50                   	push   eax
c00252fc:	e8 a1 cf fe ff       	call   c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025301:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025308:	83 c4 14             	add    esp,0x14
c002530b:	53                   	push   ebx
c002530c:	e8 99 fe ff ff       	call   c00251aa <SATAPI::detectMedia()>
c0025311:	83 c4 14             	add    esp,0x14
c0025314:	31 c0                	xor    eax,eax
c0025316:	5b                   	pop    ebx
c0025317:	5e                   	pop    esi
c0025318:	c3                   	ret    
c0025319:	90                   	nop

c002531a <SATAPI::read(unsigned long long, int, void*)>:
c002531a:	55                   	push   ebp
c002531b:	57                   	push   edi
c002531c:	56                   	push   esi
c002531d:	53                   	push   ebx
c002531e:	83 ec 1c             	sub    esp,0x1c
c0025321:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025325:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025329:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002532d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025334:	74 19                	je     c002534f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025336:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002533b:	7e 2e                	jle    c002536b <SATAPI::read(unsigned long long, int, void*)+0x51>
c002533d:	83 ec 0c             	sub    esp,0xc
c0025340:	68 75 cf 02 c0       	push   0xc002cf75
c0025345:	e8 4d 51 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c002534a:	83 c4 10             	add    esp,0x10
c002534d:	eb 1c                	jmp    c002536b <SATAPI::read(unsigned long long, int, void*)+0x51>
c002534f:	83 ec 0c             	sub    esp,0xc
c0025352:	55                   	push   ebp
c0025353:	e8 52 fe ff ff       	call   c00251aa <SATAPI::detectMedia()>
c0025358:	83 c4 10             	add    esp,0x10
c002535b:	b8 02 00 00 00       	mov    eax,0x2
c0025360:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025367:	75 cd                	jne    c0025336 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025369:	eb 49                	jmp    c00253b4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002536b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002536f:	b9 03 00 00 00       	mov    ecx,0x3
c0025374:	fc                   	cld    
c0025375:	31 c0                	xor    eax,eax
c0025377:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025379:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002537e:	89 d8                	mov    eax,ebx
c0025380:	86 e0                	xchg   al,ah
c0025382:	c1 c0 10             	rol    eax,0x10
c0025385:	86 e0                	xchg   al,ah
c0025387:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002538b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002538f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025393:	50                   	push   eax
c0025394:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025398:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002539c:	56                   	push   esi
c002539d:	53                   	push   ebx
c002539e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00253a2:	c1 e0 0b             	shl    eax,0xb
c00253a5:	50                   	push   eax
c00253a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253aa:	50                   	push   eax
c00253ab:	55                   	push   ebp
c00253ac:	e8 ad fb ff ff       	call   c0024f5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253b1:	83 c4 20             	add    esp,0x20
c00253b4:	83 c4 1c             	add    esp,0x1c
c00253b7:	5b                   	pop    ebx
c00253b8:	5e                   	pop    esi
c00253b9:	5f                   	pop    edi
c00253ba:	5d                   	pop    ebp
c00253bb:	c3                   	ret    

c00253bc <AVX::open(int, int, void*)>:
c00253bc:	83 ec 0c             	sub    esp,0xc
c00253bf:	e8 44 11 00 00       	call   c0026508 <avxInit>
c00253c4:	b8 00 00 00 00       	mov    eax,0x0
c00253c9:	83 c4 0c             	add    esp,0xc
c00253cc:	c3                   	ret    
c00253cd:	90                   	nop

c00253ce <AVX::close(int, int, void*)>:
c00253ce:	83 ec 0c             	sub    esp,0xc
c00253d1:	e8 33 11 00 00       	call   c0026509 <avxClose>
c00253d6:	b8 00 00 00 00       	mov    eax,0x0
c00253db:	83 c4 0c             	add    esp,0xc
c00253de:	c3                   	ret    
c00253df:	90                   	nop

c00253e0 <AVX::available()>:
c00253e0:	83 ec 0c             	sub    esp,0xc
c00253e3:	e8 18 11 00 00       	call   c0026500 <avxDetect>
c00253e8:	85 c0                	test   eax,eax
c00253ea:	0f 95 c0             	setne  al
c00253ed:	83 c4 0c             	add    esp,0xc
c00253f0:	c3                   	ret    
c00253f1:	90                   	nop

c00253f2 <AVX::save(void*)>:
c00253f2:	83 ec 0c             	sub    esp,0xc
c00253f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253f9:	83 ec 0c             	sub    esp,0xc
c00253fc:	50                   	push   eax
c00253fd:	e8 04 11 00 00       	call   c0026506 <avxSave>
c0025402:	83 c4 10             	add    esp,0x10
c0025405:	90                   	nop
c0025406:	83 c4 0c             	add    esp,0xc
c0025409:	c3                   	ret    

c002540a <AVX::load(void*)>:
c002540a:	83 ec 0c             	sub    esp,0xc
c002540d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025411:	83 ec 0c             	sub    esp,0xc
c0025414:	50                   	push   eax
c0025415:	e8 ed 10 00 00       	call   c0026507 <avxLoad>
c002541a:	83 c4 10             	add    esp,0x10
c002541d:	90                   	nop
c002541e:	83 c4 0c             	add    esp,0xc
c0025421:	c3                   	ret    

c0025422 <AVX::AVX()>:
c0025422:	83 ec 0c             	sub    esp,0xc
c0025425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025429:	83 ec 08             	sub    esp,0x8
c002542c:	68 d8 cf 02 c0       	push   0xc002cfd8
c0025431:	50                   	push   eax
c0025432:	e8 e7 f2 fe ff       	call   c001471e <FPU::FPU(char const*)>
c0025437:	83 c4 10             	add    esp,0x10
c002543a:	ba e8 cf 02 c0       	mov    edx,0xc002cfe8
c002543f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025443:	89 10                	mov    DWORD PTR [eax],edx
c0025445:	90                   	nop
c0025446:	83 c4 0c             	add    esp,0xc
c0025449:	c3                   	ret    

c002544a <MMX::available()>:
c002544a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c002544f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025455:	83 e0 20             	and    eax,0x20
c0025458:	84 c0                	test   al,al
c002545a:	0f 95 c0             	setne  al
c002545d:	c3                   	ret    

c002545e <MMX::open(int, int, void*)>:
c002545e:	83 ec 0c             	sub    esp,0xc
c0025461:	e8 26 11 00 00       	call   c002658c <x87Init>
c0025466:	b8 00 00 00 00       	mov    eax,0x0
c002546b:	83 c4 0c             	add    esp,0xc
c002546e:	c3                   	ret    
c002546f:	90                   	nop

c0025470 <MMX::close(int, int, void*)>:
c0025470:	83 ec 0c             	sub    esp,0xc
c0025473:	e8 2e 11 00 00       	call   c00265a6 <x87Close>
c0025478:	b8 00 00 00 00       	mov    eax,0x0
c002547d:	83 c4 0c             	add    esp,0xc
c0025480:	c3                   	ret    
c0025481:	90                   	nop

c0025482 <MMX::save(void*)>:
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025489:	83 ec 0c             	sub    esp,0xc
c002548c:	50                   	push   eax
c002548d:	e8 ef 10 00 00       	call   c0026581 <x87Save>
c0025492:	83 c4 10             	add    esp,0x10
c0025495:	90                   	nop
c0025496:	83 c4 0c             	add    esp,0xc
c0025499:	c3                   	ret    

c002549a <MMX::load(void*)>:
c002549a:	83 ec 0c             	sub    esp,0xc
c002549d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	50                   	push   eax
c00254a5:	e8 dd 10 00 00       	call   c0026587 <x87Load>
c00254aa:	83 c4 10             	add    esp,0x10
c00254ad:	90                   	nop
c00254ae:	83 c4 0c             	add    esp,0xc
c00254b1:	c3                   	ret    

c00254b2 <MMX::MMX()>:
c00254b2:	83 ec 0c             	sub    esp,0xc
c00254b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254b9:	83 ec 08             	sub    esp,0x8
c00254bc:	68 18 d0 02 c0       	push   0xc002d018
c00254c1:	50                   	push   eax
c00254c2:	e8 57 f2 fe ff       	call   c001471e <FPU::FPU(char const*)>
c00254c7:	83 c4 10             	add    esp,0x10
c00254ca:	ba 28 d0 02 c0       	mov    edx,0xc002d028
c00254cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d3:	89 10                	mov    DWORD PTR [eax],edx
c00254d5:	90                   	nop
c00254d6:	83 c4 0c             	add    esp,0xc
c00254d9:	c3                   	ret    

c00254da <SSE::open(int, int, void*)>:
c00254da:	83 ec 0c             	sub    esp,0xc
c00254dd:	e8 62 10 00 00       	call   c0026544 <sseInit>
c00254e2:	b8 00 00 00 00       	mov    eax,0x0
c00254e7:	83 c4 0c             	add    esp,0xc
c00254ea:	c3                   	ret    
c00254eb:	90                   	nop

c00254ec <SSE::close(int, int, void*)>:
c00254ec:	83 ec 0c             	sub    esp,0xc
c00254ef:	e8 60 10 00 00       	call   c0026554 <sseClose>
c00254f4:	b8 00 00 00 00       	mov    eax,0x0
c00254f9:	83 c4 0c             	add    esp,0xc
c00254fc:	c3                   	ret    
c00254fd:	90                   	nop

c00254fe <SSE::available()>:
c00254fe:	83 ec 1c             	sub    esp,0x1c
c0025501:	e8 1a 10 00 00       	call   c0026520 <absolutelyNoChanceInHell>
c0025506:	85 c0                	test   eax,eax
c0025508:	0f 95 c0             	setne  al
c002550b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002550f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025513:	83 c4 1c             	add    esp,0x1c
c0025516:	c3                   	ret    
c0025517:	90                   	nop

c0025518 <SSE::save(void*)>:
c0025518:	83 ec 0c             	sub    esp,0xc
c002551b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002551f:	83 ec 0c             	sub    esp,0xc
c0025522:	50                   	push   eax
c0025523:	e8 10 10 00 00       	call   c0026538 <sseSave>
c0025528:	83 c4 10             	add    esp,0x10
c002552b:	90                   	nop
c002552c:	83 c4 0c             	add    esp,0xc
c002552f:	c3                   	ret    

c0025530 <SSE::load(void*)>:
c0025530:	83 ec 0c             	sub    esp,0xc
c0025533:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025537:	83 ec 0c             	sub    esp,0xc
c002553a:	50                   	push   eax
c002553b:	e8 fe 0f 00 00       	call   c002653e <sseLoad>
c0025540:	83 c4 10             	add    esp,0x10
c0025543:	90                   	nop
c0025544:	83 c4 0c             	add    esp,0xc
c0025547:	c3                   	ret    

c0025548 <SSE::SSE()>:
c0025548:	83 ec 0c             	sub    esp,0xc
c002554b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002554f:	83 ec 08             	sub    esp,0x8
c0025552:	68 58 d0 02 c0       	push   0xc002d058
c0025557:	50                   	push   eax
c0025558:	e8 c1 f1 fe ff       	call   c001471e <FPU::FPU(char const*)>
c002555d:	83 c4 10             	add    esp,0x10
c0025560:	ba 68 d0 02 c0       	mov    edx,0xc002d068
c0025565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025569:	89 10                	mov    DWORD PTR [eax],edx
c002556b:	90                   	nop
c002556c:	83 c4 0c             	add    esp,0xc
c002556f:	c3                   	ret    

c0025570 <x87::open(int, int, void*)>:
c0025570:	83 ec 0c             	sub    esp,0xc
c0025573:	e8 14 10 00 00       	call   c002658c <x87Init>
c0025578:	b8 00 00 00 00       	mov    eax,0x0
c002557d:	83 c4 0c             	add    esp,0xc
c0025580:	c3                   	ret    
c0025581:	90                   	nop

c0025582 <x87::close(int, int, void*)>:
c0025582:	83 ec 0c             	sub    esp,0xc
c0025585:	e8 1c 10 00 00       	call   c00265a6 <x87Close>
c002558a:	b8 00 00 00 00       	mov    eax,0x0
c002558f:	83 c4 0c             	add    esp,0xc
c0025592:	c3                   	ret    
c0025593:	90                   	nop

c0025594 <x87::available()>:
c0025594:	83 ec 0c             	sub    esp,0xc
c0025597:	e8 ca 0f 00 00       	call   c0026566 <x87Detect>
c002559c:	85 c0                	test   eax,eax
c002559e:	0f 95 c0             	setne  al
c00255a1:	83 c4 0c             	add    esp,0xc
c00255a4:	c3                   	ret    
c00255a5:	90                   	nop

c00255a6 <x87::save(void*)>:
c00255a6:	83 ec 0c             	sub    esp,0xc
c00255a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ad:	83 ec 0c             	sub    esp,0xc
c00255b0:	50                   	push   eax
c00255b1:	e8 cb 0f 00 00       	call   c0026581 <x87Save>
c00255b6:	83 c4 10             	add    esp,0x10
c00255b9:	90                   	nop
c00255ba:	83 c4 0c             	add    esp,0xc
c00255bd:	c3                   	ret    

c00255be <x87::load(void*)>:
c00255be:	83 ec 0c             	sub    esp,0xc
c00255c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255c5:	83 ec 0c             	sub    esp,0xc
c00255c8:	50                   	push   eax
c00255c9:	e8 b9 0f 00 00       	call   c0026587 <x87Load>
c00255ce:	83 c4 10             	add    esp,0x10
c00255d1:	90                   	nop
c00255d2:	83 c4 0c             	add    esp,0xc
c00255d5:	c3                   	ret    

c00255d6 <x87::x87()>:
c00255d6:	83 ec 0c             	sub    esp,0xc
c00255d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255dd:	83 ec 08             	sub    esp,0x8
c00255e0:	68 98 d0 02 c0       	push   0xc002d098
c00255e5:	50                   	push   eax
c00255e6:	e8 33 f1 fe ff       	call   c001471e <FPU::FPU(char const*)>
c00255eb:	83 c4 10             	add    esp,0x10
c00255ee:	ba a8 d0 02 c0       	mov    edx,0xc002d0a8
c00255f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f7:	89 10                	mov    DWORD PTR [eax],edx
c00255f9:	90                   	nop
c00255fa:	83 c4 0c             	add    esp,0xc
c00255fd:	c3                   	ret    

c00255fe <APIC::disable()>:
c00255fe:	90                   	nop
c00255ff:	c3                   	ret    

c0025600 <APIC::close(int, int, void*)>:
c0025600:	55                   	push   ebp
c0025601:	89 e5                	mov    ebp,esp
c0025603:	83 ec 08             	sub    esp,0x8
c0025606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025609:	8b 00                	mov    eax,DWORD PTR [eax]
c002560b:	83 c0 3c             	add    eax,0x3c
c002560e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025610:	83 ec 0c             	sub    esp,0xc
c0025613:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025616:	ff d0                	call   eax
c0025618:	83 c4 10             	add    esp,0x10
c002561b:	b8 00 00 00 00       	mov    eax,0x0
c0025620:	c9                   	leave  
c0025621:	c3                   	ret    

c0025622 <IOAPIC::close(int, int, void*)>:
c0025622:	b8 00 00 00 00       	mov    eax,0x0
c0025627:	c3                   	ret    

c0025628 <APIC::io_wait()>:
c0025628:	eb 00                	jmp    c002562a <APIC::io_wait()+0x2>
c002562a:	eb 00                	jmp    c002562c <APIC::io_wait()+0x4>
c002562c:	90                   	nop
c002562d:	c3                   	ret    

c002562e <APIC::getBase()>:
c002562e:	55                   	push   ebp
c002562f:	89 e5                	mov    ebp,esp
c0025631:	83 ec 18             	sub    esp,0x18
c0025634:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0025639:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002563f:	83 e0 08             	and    eax,0x8
c0025642:	84 c0                	test   al,al
c0025644:	75 07                	jne    c002564d <APIC::getBase()+0x1f>
c0025646:	b8 00 00 00 00       	mov    eax,0x0
c002564b:	eb 21                	jmp    c002566e <APIC::getBase()+0x40>
c002564d:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0025652:	83 ec 08             	sub    esp,0x8
c0025655:	6a 1b                	push   0x1b
c0025657:	50                   	push   eax
c0025658:	e8 8b 97 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002565d:	83 c4 10             	add    esp,0x10
c0025660:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025663:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025666:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025669:	25 00 f0 ff ff       	and    eax,0xfffff000
c002566e:	c9                   	leave  
c002566f:	c3                   	ret    

c0025670 <APIC::eoi(unsigned char)>:
c0025670:	55                   	push   ebp
c0025671:	89 e5                	mov    ebp,esp
c0025673:	83 ec 28             	sub    esp,0x28
c0025676:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025679:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002567c:	83 ec 0c             	sub    esp,0xc
c002567f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025682:	e8 a7 ff ff ff       	call   c002562e <APIC::getBase()>
c0025687:	83 c4 10             	add    esp,0x10
c002568a:	05 b0 00 00 00       	add    eax,0xb0
c002568f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025695:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002569b:	90                   	nop
c002569c:	c9                   	leave  
c002569d:	c3                   	ret    

c002569e <APIC::open(int, int, void*)>:
c002569e:	55                   	push   ebp
c002569f:	89 e5                	mov    ebp,esp
c00256a1:	57                   	push   edi
c00256a2:	56                   	push   esi
c00256a3:	53                   	push   ebx
c00256a4:	83 ec 2c             	sub    esp,0x2c
c00256a7:	83 ec 0c             	sub    esp,0xc
c00256aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256ad:	e8 7c ff ff ff       	call   c002562e <APIC::getBase()>
c00256b2:	83 c4 10             	add    esp,0x10
c00256b5:	89 c2                	mov    edx,eax
c00256b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ba:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256c0:	0f b6 f8             	movzx  edi,al
c00256c3:	89 d0                	mov    eax,edx
c00256c5:	ba 00 00 00 00       	mov    edx,0x0
c00256ca:	89 c1                	mov    ecx,eax
c00256cc:	80 e5 ff             	and    ch,0xff
c00256cf:	89 cb                	mov    ebx,ecx
c00256d1:	0f b6 f2             	movzx  esi,dl
c00256d4:	89 d8                	mov    eax,ebx
c00256d6:	89 f2                	mov    edx,esi
c00256d8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256db:	8d 5f 08             	lea    ebx,[edi+0x8]
c00256de:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00256e2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00256e6:	83 e0 00             	and    eax,0x0
c00256e9:	09 d0                	or     eax,edx
c00256eb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00256ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256f2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256f8:	8d 50 01             	lea    edx,[eax+0x1]
c00256fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256fe:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025704:	0f b6 d0             	movzx  edx,al
c0025707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002570a:	83 c2 08             	add    edx,0x8
c002570d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025711:	0f b6 c9             	movzx  ecx,cl
c0025714:	81 c9 00 00 01 00    	or     ecx,0x10000
c002571a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002571e:	83 ec 0c             	sub    esp,0xc
c0025721:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025724:	e8 05 ff ff ff       	call   c002562e <APIC::getBase()>
c0025729:	83 c4 10             	add    esp,0x10
c002572c:	05 f0 00 00 00       	add    eax,0xf0
c0025731:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025734:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025737:	8b 00                	mov    eax,DWORD PTR [eax]
c0025739:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002573c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025743:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002574a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002574d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025750:	89 10                	mov    DWORD PTR [eax],edx
c0025752:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025759:	a1 f0 0c 03 c0       	mov    eax,ds:0xc0030cf0
c002575e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025761:	7d 7c                	jge    c00257df <APIC::open(int, int, void*)+0x141>
c0025763:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025766:	8b 04 85 00 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf300]
c002576d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025770:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025773:	8b 04 85 00 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf300]
c002577a:	c1 e8 08             	shr    eax,0x8
c002577d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025781:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025784:	8b 04 85 00 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf300]
c002578b:	c1 e8 18             	shr    eax,0x18
c002578e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025791:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025795:	75 40                	jne    c00257d7 <APIC::open(int, int, void*)+0x139>
c0025797:	83 ec 0c             	sub    esp,0xc
c002579a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002579d:	e8 8c fe ff ff       	call   c002562e <APIC::getBase()>
c00257a2:	83 c4 10             	add    esp,0x10
c00257a5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00257a9:	75 07                	jne    c00257b2 <APIC::open(int, int, void*)+0x114>
c00257ab:	ba 60 03 00 00       	mov    edx,0x360
c00257b0:	eb 05                	jmp    c00257b7 <APIC::open(int, int, void*)+0x119>
c00257b2:	ba 50 03 00 00       	mov    edx,0x350
c00257b7:	01 d0                	add    eax,edx
c00257b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00257bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00257c1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00257c4:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00257cb:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00257cf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257d2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00257d5:	89 10                	mov    DWORD PTR [eax],edx
c00257d7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00257da:	e9 7a ff ff ff       	jmp    c0025759 <APIC::open(int, int, void*)+0xbb>
c00257df:	b8 00 00 00 00       	mov    eax,0x0
c00257e4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257e7:	5b                   	pop    ebx
c00257e8:	5e                   	pop    esi
c00257e9:	5f                   	pop    edi
c00257ea:	5d                   	pop    ebp
c00257eb:	c3                   	ret    

c00257ec <IOAPIC::IOAPIC()>:
c00257ec:	83 ec 0c             	sub    esp,0xc
c00257ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f3:	83 ec 08             	sub    esp,0x8
c00257f6:	68 d8 d0 02 c0       	push   0xc002d0d8
c00257fb:	50                   	push   eax
c00257fc:	e8 0b ec fe ff       	call   c001440c <Device::Device(char const*)>
c0025801:	83 c4 10             	add    esp,0x10
c0025804:	ba 00 d2 02 c0       	mov    edx,0xc002d200
c0025809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002580d:	89 10                	mov    DWORD PTR [eax],edx
c002580f:	90                   	nop
c0025810:	83 c4 0c             	add    esp,0xc
c0025813:	c3                   	ret    

c0025814 <APIC::APIC()>:
c0025814:	53                   	push   ebx
c0025815:	83 ec 18             	sub    esp,0x18
c0025818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002581c:	83 ec 08             	sub    esp,0x8
c002581f:	68 e0 d0 02 c0       	push   0xc002d0e0
c0025824:	50                   	push   eax
c0025825:	e8 4e f3 fe ff       	call   c0014b78 <InterruptController::InterruptController(char const*)>
c002582a:	83 c4 10             	add    esp,0x10
c002582d:	ba b8 d1 02 c0       	mov    edx,0xc002d1b8
c0025832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025836:	89 10                	mov    DWORD PTR [eax],edx
c0025838:	a0 c0 27 03 c0       	mov    al,ds:0xc00327c0
c002583d:	83 f0 01             	xor    eax,0x1
c0025840:	84 c0                	test   al,al
c0025842:	0f 84 a1 00 00 00    	je     c00258e9 <APIC::APIC()+0xd5>
c0025848:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002584d:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0025852:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025856:	0f 83 86 00 00 00    	jae    c00258e2 <APIC::APIC()+0xce>
c002585c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025864:	83 ec 0c             	sub    esp,0xc
c0025867:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002586b:	e8 d0 9f fe ff       	call   c000f840 <malloc>
c0025870:	83 c4 10             	add    esp,0x10
c0025873:	89 c3                	mov    ebx,eax
c0025875:	83 ec 0c             	sub    esp,0xc
c0025878:	53                   	push   ebx
c0025879:	e8 6e ff ff ff       	call   c00257ec <IOAPIC::IOAPIC()>
c002587e:	83 c4 10             	add    esp,0x10
c0025881:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025885:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002588a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002588e:	89 14 85 a0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd860],edx
c0025895:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c002589a:	40                   	inc    eax
c002589b:	a3 80 27 03 c0       	mov    ds:0xc0032780,eax
c00258a0:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00258a5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00258ab:	83 ec 08             	sub    esp,0x8
c00258ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00258b2:	50                   	push   eax
c00258b3:	e8 64 e9 fe ff       	call   c001421c <Device::addChild(Device*)>
c00258b8:	83 c4 10             	add    esp,0x10
c00258bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00258bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00258c1:	83 c0 08             	add    eax,0x8
c00258c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00258c6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00258cb:	6a 00                	push   0x0
c00258cd:	6a 00                	push   0x0
c00258cf:	52                   	push   edx
c00258d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00258d4:	ff d0                	call   eax
c00258d6:	83 c4 10             	add    esp,0x10
c00258d9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00258dd:	e9 6b ff ff ff       	jmp    c002584d <APIC::APIC()+0x39>
c00258e2:	c6 05 c0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327c0,0x1
c00258e9:	90                   	nop
c00258ea:	83 c4 18             	add    esp,0x18
c00258ed:	5b                   	pop    ebx
c00258ee:	c3                   	ret    
c00258ef:	90                   	nop

c00258f0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00258f0:	55                   	push   ebp
c00258f1:	89 e5                	mov    ebp,esp
c00258f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258fc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258ff:	72 1d                	jb     c002591e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025904:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002590a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002590d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025913:	01 d0                	add    eax,edx
c0025915:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025918:	73 04                	jae    c002591e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002591a:	b0 01                	mov    al,0x1
c002591c:	eb 02                	jmp    c0025920 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002591e:	b0 00                	mov    al,0x0
c0025920:	5d                   	pop    ebp
c0025921:	c3                   	ret    

c0025922 <IOAPIC::read(int)>:
c0025922:	55                   	push   ebp
c0025923:	89 e5                	mov    ebp,esp
c0025925:	83 ec 10             	sub    esp,0x10
c0025928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002592b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025931:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025934:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025937:	0f b6 d0             	movzx  edx,al
c002593a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002593d:	89 10                	mov    DWORD PTR [eax],edx
c002593f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025942:	83 c0 10             	add    eax,0x10
c0025945:	8b 00                	mov    eax,DWORD PTR [eax]
c0025947:	c9                   	leave  
c0025948:	c3                   	ret    
c0025949:	90                   	nop

c002594a <IOAPIC::open(int, int, void*)>:
c002594a:	55                   	push   ebp
c002594b:	89 e5                	mov    ebp,esp
c002594d:	57                   	push   edi
c002594e:	56                   	push   esi
c002594f:	53                   	push   ebx
c0025950:	83 ec 0c             	sub    esp,0xc
c0025953:	83 ec 0c             	sub    esp,0xc
c0025956:	68 0b d1 02 c0       	push   0xc002d10b
c002595b:	e8 96 d4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0025960:	83 c4 10             	add    esp,0x10
c0025963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025966:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025969:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002596f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025972:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025978:	8b 14 85 e0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf220]
c002597f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025982:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025991:	8b 14 85 60 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1a0]
c0025998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002599b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00259a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259a4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00259aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259b3:	0f b6 f8             	movzx  edi,al
c00259b6:	89 d0                	mov    eax,edx
c00259b8:	ba 00 00 00 00       	mov    edx,0x0
c00259bd:	89 c1                	mov    ecx,eax
c00259bf:	80 e5 ff             	and    ch,0xff
c00259c2:	89 cb                	mov    ebx,ecx
c00259c4:	0f b6 f2             	movzx  esi,dl
c00259c7:	89 d8                	mov    eax,ebx
c00259c9:	89 f2                	mov    edx,esi
c00259cb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259ce:	8d 5f 08             	lea    ebx,[edi+0x8]
c00259d1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00259d5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00259d9:	83 e0 00             	and    eax,0x0
c00259dc:	09 d0                	or     eax,edx
c00259de:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00259e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259eb:	8d 50 01             	lea    edx,[eax+0x1]
c00259ee:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259f1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00259f7:	0f b6 d0             	movzx  edx,al
c00259fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259fd:	83 c2 08             	add    edx,0x8
c0025a00:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025a04:	0f b6 c9             	movzx  ecx,cl
c0025a07:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025a0d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025a11:	83 ec 08             	sub    esp,0x8
c0025a14:	6a 01                	push   0x1
c0025a16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a19:	e8 04 ff ff ff       	call   c0025922 <IOAPIC::read(int)>
c0025a1e:	83 c4 10             	add    esp,0x10
c0025a21:	c1 f8 10             	sar    eax,0x10
c0025a24:	0f b6 c0             	movzx  eax,al
c0025a27:	8d 50 01             	lea    edx,[eax+0x1]
c0025a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025a33:	b8 00 00 00 00       	mov    eax,0x0
c0025a38:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a3b:	5b                   	pop    ebx
c0025a3c:	5e                   	pop    esi
c0025a3d:	5f                   	pop    edi
c0025a3e:	5d                   	pop    ebp
c0025a3f:	c3                   	ret    

c0025a40 <IOAPIC::write(int, int)>:
c0025a40:	55                   	push   ebp
c0025a41:	89 e5                	mov    ebp,esp
c0025a43:	83 ec 10             	sub    esp,0x10
c0025a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a4f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a55:	0f b6 d0             	movzx  edx,al
c0025a58:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a5b:	89 10                	mov    DWORD PTR [eax],edx
c0025a5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a60:	8d 50 10             	lea    edx,[eax+0x10]
c0025a63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a66:	89 02                	mov    DWORD PTR [edx],eax
c0025a68:	90                   	nop
c0025a69:	c9                   	leave  
c0025a6a:	c3                   	ret    
c0025a6b:	90                   	nop

c0025a6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025a6c:	55                   	push   ebp
c0025a6d:	89 e5                	mov    ebp,esp
c0025a6f:	53                   	push   ebx
c0025a70:	83 ec 2c             	sub    esp,0x2c
c0025a73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a76:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025a79:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025a7c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025a7f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025a88:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a8b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a8e:	88 d8                	mov    al,bl
c0025a90:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025a93:	88 c8                	mov    al,cl
c0025a95:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a98:	88 d0                	mov    al,dl
c0025a9a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025a9d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025aa1:	83 c0 08             	add    eax,0x8
c0025aa4:	01 c0                	add    eax,eax
c0025aa6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025aa9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025aad:	83 c0 08             	add    eax,0x8
c0025ab0:	01 c0                	add    eax,eax
c0025ab2:	40                   	inc    eax
c0025ab3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025ab6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ab9:	50                   	push   eax
c0025aba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025abd:	e8 60 fe ff ff       	call   c0025922 <IOAPIC::read(int)>
c0025ac2:	83 c4 08             	add    esp,0x8
c0025ac5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ac8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025acf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025ad2:	c1 e0 18             	shl    eax,0x18
c0025ad5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025ad8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025adb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ade:	52                   	push   edx
c0025adf:	50                   	push   eax
c0025ae0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ae3:	e8 58 ff ff ff       	call   c0025a40 <IOAPIC::write(int, int)>
c0025ae8:	83 c4 0c             	add    esp,0xc
c0025aeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025aee:	50                   	push   eax
c0025aef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025af2:	e8 2b fe ff ff       	call   c0025922 <IOAPIC::read(int)>
c0025af7:	83 c4 08             	add    esp,0x8
c0025afa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025afd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025b04:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025b0b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025b12:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b16:	74 09                	je     c0025b21 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025b18:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025b1f:	eb 07                	jmp    c0025b28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025b21:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025b28:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025b2c:	74 09                	je     c0025b37 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025b2e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025b35:	eb 07                	jmp    c0025b3e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025b37:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025b3e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025b45:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025b49:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025b4c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025b4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b52:	52                   	push   edx
c0025b53:	50                   	push   eax
c0025b54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b57:	e8 e4 fe ff ff       	call   c0025a40 <IOAPIC::write(int, int)>
c0025b5c:	83 c4 0c             	add    esp,0xc
c0025b5f:	90                   	nop
c0025b60:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025b63:	c9                   	leave  
c0025b64:	c3                   	ret    
c0025b65:	90                   	nop

c0025b66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025b66:	55                   	push   ebp
c0025b67:	89 e5                	mov    ebp,esp
c0025b69:	57                   	push   edi
c0025b6a:	56                   	push   esi
c0025b6b:	53                   	push   ebx
c0025b6c:	83 ec 2c             	sub    esp,0x2c
c0025b6f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b72:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b75:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b79:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025b7d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b81:	74 5a                	je     c0025bdd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b83:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025b87:	7f 44                	jg     c0025bcd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b8c:	05 60 d6 02 c0       	add    eax,0xc002d660
c0025b91:	8a 00                	mov    al,BYTE PTR [eax]
c0025b93:	0f b6 c0             	movzx  eax,al
c0025b96:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025b99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b9c:	66 8b 84 00 80 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf280]
c0025ba4:	0f b7 c0             	movzx  eax,ax
c0025ba7:	83 e0 02             	and    eax,0x2
c0025baa:	85 c0                	test   eax,eax
c0025bac:	74 04                	je     c0025bb2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025bae:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025bb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bb5:	66 8b 84 00 80 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf280]
c0025bbd:	0f b7 c0             	movzx  eax,ax
c0025bc0:	83 e0 08             	and    eax,0x8
c0025bc3:	85 c0                	test   eax,eax
c0025bc5:	74 16                	je     c0025bdd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025bc7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025bcb:	eb 10                	jmp    c0025bdd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025bcd:	83 ec 0c             	sub    esp,0xc
c0025bd0:	68 1c d1 02 c0       	push   0xc002d11c
c0025bd5:	e8 bd 48 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0025bda:	83 c4 10             	add    esp,0x10
c0025bdd:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025be1:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c0025be6:	83 ec 08             	sub    esp,0x8
c0025be9:	50                   	push   eax
c0025bea:	68 54 d1 02 c0       	push   0xc002d154
c0025bef:	e8 02 d2 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0025bf4:	83 c4 10             	add    esp,0x10
c0025bf7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025bfe:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c0025c03:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025c06:	7d 67                	jge    c0025c6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c08:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c0b:	8b 04 85 a0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd860]
c0025c12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c15:	83 ec 08             	sub    esp,0x8
c0025c18:	52                   	push   edx
c0025c19:	50                   	push   eax
c0025c1a:	e8 d1 fc ff ff       	call   c00258f0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025c1f:	83 c4 10             	add    esp,0x10
c0025c22:	84 c0                	test   al,al
c0025c24:	74 44                	je     c0025c6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025c26:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c29:	8b 1c 85 a0 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd860]
c0025c30:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025c34:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c37:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025c3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c3e:	83 c0 20             	add    eax,0x20
c0025c41:	0f b6 f0             	movzx  esi,al
c0025c44:	b8 00 00 00 00       	mov    eax,0x0
c0025c49:	99                   	cdq    
c0025c4a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025c4d:	0f b6 c9             	movzx  ecx,cl
c0025c50:	83 ec 04             	sub    esp,0x4
c0025c53:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025c56:	57                   	push   edi
c0025c57:	56                   	push   esi
c0025c58:	52                   	push   edx
c0025c59:	50                   	push   eax
c0025c5a:	51                   	push   ecx
c0025c5b:	53                   	push   ebx
c0025c5c:	e8 0b fe ff ff       	call   c0025a6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025c61:	83 c4 20             	add    esp,0x20
c0025c64:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025c68:	eb 05                	jmp    c0025c6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c6a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025c6d:	eb 8f                	jmp    c0025bfe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025c6f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025c72:	83 f0 01             	xor    eax,0x1
c0025c75:	84 c0                	test   al,al
c0025c77:	74 10                	je     c0025c89 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025c79:	83 ec 0c             	sub    esp,0xc
c0025c7c:	68 6b d1 02 c0       	push   0xc002d16b
c0025c81:	e8 11 48 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0025c86:	83 c4 10             	add    esp,0x10
c0025c89:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025c8d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025c94:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025c98:	7f 65                	jg     c0025cff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025c9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c9d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ca0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ca7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025caa:	01 ca                	add    edx,ecx
c0025cac:	83 c2 54             	add    edx,0x54
c0025caf:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025cb3:	85 c0                	test   eax,eax
c0025cb5:	75 43                	jne    c0025cfa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cbd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cc4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cc7:	01 ca                	add    edx,ecx
c0025cc9:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ccc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ccf:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cd6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cd9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ce0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ce3:	01 ca                	add    edx,ecx
c0025ce5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ceb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025cee:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf5:	83 e8 20             	sub    eax,0x20
c0025cf8:	eb 1a                	jmp    c0025d14 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025cfa:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025cfd:	eb 95                	jmp    c0025c94 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025cff:	83 ec 0c             	sub    esp,0xc
c0025d02:	68 78 d1 02 c0       	push   0xc002d178
c0025d07:	e8 8b 47 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0025d0c:	83 c4 10             	add    esp,0x10
c0025d0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025d14:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d17:	5b                   	pop    ebx
c0025d18:	5e                   	pop    esi
c0025d19:	5f                   	pop    edi
c0025d1a:	5d                   	pop    ebp
c0025d1b:	c3                   	ret    

c0025d1c <PIC::disable()>:
c0025d1c:	55                   	push   ebp
c0025d1d:	89 e5                	mov    ebp,esp
c0025d1f:	83 ec 10             	sub    esp,0x10
c0025d22:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025d28:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025d2c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d2f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d33:	ee                   	out    dx,al
c0025d34:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025d3a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025d3e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d41:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025d45:	ee                   	out    dx,al
c0025d46:	90                   	nop
c0025d47:	c9                   	leave  
c0025d48:	c3                   	ret    
c0025d49:	90                   	nop

c0025d4a <PIC::close(int, int, void*)>:
c0025d4a:	55                   	push   ebp
c0025d4b:	89 e5                	mov    ebp,esp
c0025d4d:	83 ec 08             	sub    esp,0x8
c0025d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d53:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d55:	83 c0 3c             	add    eax,0x3c
c0025d58:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d5a:	83 ec 0c             	sub    esp,0xc
c0025d5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d60:	ff d0                	call   eax
c0025d62:	83 c4 10             	add    esp,0x10
c0025d65:	b8 00 00 00 00       	mov    eax,0x0
c0025d6a:	c9                   	leave  
c0025d6b:	c3                   	ret    

c0025d6c <PIC::PIC()>:
c0025d6c:	83 ec 0c             	sub    esp,0xc
c0025d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d73:	83 ec 08             	sub    esp,0x8
c0025d76:	68 24 d2 02 c0       	push   0xc002d224
c0025d7b:	50                   	push   eax
c0025d7c:	e8 f7 ed fe ff       	call   c0014b78 <InterruptController::InterruptController(char const*)>
c0025d81:	83 c4 10             	add    esp,0x10
c0025d84:	ba 50 d2 02 c0       	mov    edx,0xc002d250
c0025d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d8d:	89 10                	mov    DWORD PTR [eax],edx
c0025d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d99:	0f b6 d0             	movzx  edx,al
c0025d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025db1:	0f b6 d0             	movzx  edx,al
c0025db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0025dca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025dce:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025dd4:	0f b6 d0             	movzx  edx,al
c0025dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ddf:	83 e1 3f             	and    ecx,0x3f
c0025de2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025df0:	0f b6 d0             	movzx  edx,al
c0025df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e08:	0f b6 d0             	movzx  edx,al
c0025e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e0f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e1e:	8d 50 01             	lea    edx,[eax+0x1]
c0025e21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e25:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e2b:	0f b6 d0             	movzx  edx,al
c0025e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e32:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e36:	83 e1 3f             	and    ecx,0x3f
c0025e39:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e3d:	90                   	nop
c0025e3e:	83 c4 0c             	add    esp,0xc
c0025e41:	c3                   	ret    

c0025e42 <PIC::ioWait()>:
c0025e42:	eb 00                	jmp    c0025e44 <PIC::ioWait()+0x2>
c0025e44:	eb 00                	jmp    c0025e46 <PIC::ioWait()+0x4>
c0025e46:	90                   	nop
c0025e47:	c3                   	ret    

c0025e48 <PIC::getIRQReg(int)>:
c0025e48:	55                   	push   ebp
c0025e49:	89 e5                	mov    ebp,esp
c0025e4b:	83 ec 10             	sub    esp,0x10
c0025e4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e51:	0f b6 c0             	movzx  eax,al
c0025e54:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e5a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025e5d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e60:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e64:	ee                   	out    dx,al
c0025e65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e68:	0f b6 c0             	movzx  eax,al
c0025e6b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e71:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025e74:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e77:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e7b:	ee                   	out    dx,al
c0025e7c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025e82:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025e86:	89 c2                	mov    edx,eax
c0025e88:	ec                   	in     al,dx
c0025e89:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025e8c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e8f:	0f b6 c0             	movzx  eax,al
c0025e92:	c1 e0 08             	shl    eax,0x8
c0025e95:	89 c1                	mov    ecx,eax
c0025e97:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025e9d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ea1:	89 c2                	mov    edx,eax
c0025ea3:	ec                   	in     al,dx
c0025ea4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025ea7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025eaa:	0f b6 c0             	movzx  eax,al
c0025ead:	09 c8                	or     eax,ecx
c0025eaf:	c9                   	leave  
c0025eb0:	c3                   	ret    
c0025eb1:	90                   	nop

c0025eb2 <PIC::eoi(unsigned char)>:
c0025eb2:	55                   	push   ebp
c0025eb3:	89 e5                	mov    ebp,esp
c0025eb5:	83 ec 14             	sub    esp,0x14
c0025eb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ebb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025ebe:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ec2:	75 1e                	jne    c0025ee2 <PIC::eoi(unsigned char)+0x30>
c0025ec4:	6a 0b                	push   0xb
c0025ec6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec9:	e8 7a ff ff ff       	call   c0025e48 <PIC::getIRQReg(int)>
c0025ece:	83 c4 08             	add    esp,0x8
c0025ed1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025ed5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ed9:	25 80 00 00 00       	and    eax,0x80
c0025ede:	85 c0                	test   eax,eax
c0025ee0:	74 5f                	je     c0025f41 <PIC::eoi(unsigned char)+0x8f>
c0025ee2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025ee6:	75 2d                	jne    c0025f15 <PIC::eoi(unsigned char)+0x63>
c0025ee8:	6a 0b                	push   0xb
c0025eea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eed:	e8 56 ff ff ff       	call   c0025e48 <PIC::getIRQReg(int)>
c0025ef2:	83 c4 08             	add    esp,0x8
c0025ef5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025ef9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025efc:	66 85 c0             	test   ax,ax
c0025eff:	78 14                	js     c0025f15 <PIC::eoi(unsigned char)+0x63>
c0025f01:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025f07:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025f0b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f0e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f12:	ee                   	out    dx,al
c0025f13:	eb 2d                	jmp    c0025f42 <PIC::eoi(unsigned char)+0x90>
c0025f15:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f19:	76 12                	jbe    c0025f2d <PIC::eoi(unsigned char)+0x7b>
c0025f1b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f21:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025f25:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f28:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f2c:	ee                   	out    dx,al
c0025f2d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f33:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025f37:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f3a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f3e:	ee                   	out    dx,al
c0025f3f:	eb 01                	jmp    c0025f42 <PIC::eoi(unsigned char)+0x90>
c0025f41:	90                   	nop
c0025f42:	c9                   	leave  
c0025f43:	c3                   	ret    

c0025f44 <PIC::remap()>:
c0025f44:	55                   	push   ebp
c0025f45:	89 e5                	mov    ebp,esp
c0025f47:	83 ec 48             	sub    esp,0x48
c0025f4a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025f51:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025f58:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025f5e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025f61:	89 c2                	mov    edx,eax
c0025f63:	ec                   	in     al,dx
c0025f64:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025f67:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025f6a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025f6d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025f73:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025f76:	89 c2                	mov    edx,eax
c0025f78:	ec                   	in     al,dx
c0025f79:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025f7c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025f7f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025f82:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025f88:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025f8c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025f8f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025f92:	ee                   	out    dx,al
c0025f93:	83 ec 0c             	sub    esp,0xc
c0025f96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f99:	e8 a4 fe ff ff       	call   c0025e42 <PIC::ioWait()>
c0025f9e:	83 c4 10             	add    esp,0x10
c0025fa1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025fa7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025fab:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025fae:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025fb1:	ee                   	out    dx,al
c0025fb2:	83 ec 0c             	sub    esp,0xc
c0025fb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb8:	e8 85 fe ff ff       	call   c0025e42 <PIC::ioWait()>
c0025fbd:	83 c4 10             	add    esp,0x10
c0025fc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fc3:	0f b6 c0             	movzx  eax,al
c0025fc6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025fcc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025fcf:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025fd2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025fd5:	ee                   	out    dx,al
c0025fd6:	83 ec 0c             	sub    esp,0xc
c0025fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fdc:	e8 61 fe ff ff       	call   c0025e42 <PIC::ioWait()>
c0025fe1:	83 c4 10             	add    esp,0x10
c0025fe4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fe7:	0f b6 c0             	movzx  eax,al
c0025fea:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025ff0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025ff3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025ff6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025ff9:	ee                   	out    dx,al
c0025ffa:	83 ec 0c             	sub    esp,0xc
c0025ffd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026000:	e8 3d fe ff ff       	call   c0025e42 <PIC::ioWait()>
c0026005:	83 c4 10             	add    esp,0x10
c0026008:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002600e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026012:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026015:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026018:	ee                   	out    dx,al
c0026019:	83 ec 0c             	sub    esp,0xc
c002601c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002601f:	e8 1e fe ff ff       	call   c0025e42 <PIC::ioWait()>
c0026024:	83 c4 10             	add    esp,0x10
c0026027:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002602d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026031:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026034:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026037:	ee                   	out    dx,al
c0026038:	83 ec 0c             	sub    esp,0xc
c002603b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002603e:	e8 ff fd ff ff       	call   c0025e42 <PIC::ioWait()>
c0026043:	83 c4 10             	add    esp,0x10
c0026046:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002604c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026050:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026053:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026056:	ee                   	out    dx,al
c0026057:	83 ec 0c             	sub    esp,0xc
c002605a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002605d:	e8 e0 fd ff ff       	call   c0025e42 <PIC::ioWait()>
c0026062:	83 c4 10             	add    esp,0x10
c0026065:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002606b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002606f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026072:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026075:	ee                   	out    dx,al
c0026076:	83 ec 0c             	sub    esp,0xc
c0026079:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002607c:	e8 c1 fd ff ff       	call   c0025e42 <PIC::ioWait()>
c0026081:	83 c4 10             	add    esp,0x10
c0026084:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026088:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002608e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026091:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026094:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026097:	ee                   	out    dx,al
c0026098:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002609c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00260a2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00260a5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00260a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00260ab:	ee                   	out    dx,al
c00260ac:	90                   	nop
c00260ad:	c9                   	leave  
c00260ae:	c3                   	ret    
c00260af:	90                   	nop

c00260b0 <PIC::open(int, int, void*)>:
c00260b0:	55                   	push   ebp
c00260b1:	89 e5                	mov    ebp,esp
c00260b3:	83 ec 18             	sub    esp,0x18
c00260b6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00260bc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00260c0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260c3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260c7:	ee                   	out    dx,al
c00260c8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00260ce:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00260d2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260d5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260d9:	ee                   	out    dx,al
c00260da:	83 ec 0c             	sub    esp,0xc
c00260dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e0:	e8 5f fe ff ff       	call   c0025f44 <PIC::remap()>
c00260e5:	83 c4 10             	add    esp,0x10
c00260e8:	b8 00 00 00 00       	mov    eax,0x0
c00260ed:	c9                   	leave  
c00260ee:	c3                   	ret    
c00260ef:	90                   	nop

c00260f0 <APICTimer::close(int, int, void*)>:
c00260f0:	b8 00 00 00 00       	mov    eax,0x0
c00260f5:	c3                   	ret    

c00260f6 <apicTimerHandler(regs*, void*)>:
c00260f6:	83 ec 0c             	sub    esp,0xc
c00260f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00260ff:	99                   	cdq    
c0026100:	52                   	push   edx
c0026101:	50                   	push   eax
c0026102:	6a 00                	push   0x0
c0026104:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026109:	e8 8e 07 00 00       	call   c002689c <__udivdi3>
c002610e:	83 c4 10             	add    esp,0x10
c0026111:	83 ec 08             	sub    esp,0x8
c0026114:	52                   	push   edx
c0026115:	50                   	push   eax
c0026116:	e8 a8 0a ff ff       	call   c0016bc3 <timerHandler(unsigned long long)>
c002611b:	83 c4 10             	add    esp,0x10
c002611e:	90                   	nop
c002611f:	83 c4 0c             	add    esp,0xc
c0026122:	c3                   	ret    
c0026123:	90                   	nop

c0026124 <APICTimer::write(int)>:
c0026124:	53                   	push   ebx
c0026125:	83 ec 28             	sub    esp,0x28
c0026128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002612c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026130:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026136:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c002613b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026141:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026147:	83 ec 0c             	sub    esp,0xc
c002614a:	50                   	push   eax
c002614b:	e8 de f4 ff ff       	call   c002562e <APIC::getBase()>
c0026150:	83 c4 10             	add    esp,0x10
c0026153:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026157:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c002615c:	8b 15 94 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea94
c0026162:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026166:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002616a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002616e:	05 e0 03 00 00       	add    eax,0x3e0
c0026173:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002617d:	05 80 03 00 00       	add    eax,0x380
c0026182:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026188:	fb                   	sti    
c0026189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002618d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026191:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026196:	83 d2 00             	adc    edx,0x0
c0026199:	89 c1                	mov    ecx,eax
c002619b:	89 d3                	mov    ebx,edx
c002619d:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c00261a2:	8b 15 94 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea94
c00261a8:	39 c8                	cmp    eax,ecx
c00261aa:	89 d0                	mov    eax,edx
c00261ac:	19 d8                	sbb    eax,ebx
c00261ae:	73 02                	jae    c00261b2 <APICTimer::write(int)+0x8e>
c00261b0:	eb d7                	jmp    c0026189 <APICTimer::write(int)+0x65>
c00261b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261b6:	05 20 03 00 00       	add    eax,0x320
c00261bb:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00261c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261c5:	05 90 03 00 00       	add    eax,0x390
c00261ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00261cc:	f7 d0                	not    eax
c00261ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00261d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261da:	ba 00 00 00 00       	mov    edx,0x0
c00261df:	f7 f3                	div    ebx
c00261e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00261e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00261e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00261ef:	0d 00 00 02 00       	or     eax,0x20000
c00261f4:	89 c2                	mov    edx,eax
c00261f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261fa:	05 20 03 00 00       	add    eax,0x320
c00261ff:	89 10                	mov    DWORD PTR [eax],edx
c0026201:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026205:	05 e0 03 00 00       	add    eax,0x3e0
c002620a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026210:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026214:	05 80 03 00 00       	add    eax,0x380
c0026219:	89 c2                	mov    edx,eax
c002621b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002621f:	89 02                	mov    DWORD PTR [edx],eax
c0026221:	90                   	nop
c0026222:	83 c4 28             	add    esp,0x28
c0026225:	5b                   	pop    ebx
c0026226:	c3                   	ret    
c0026227:	90                   	nop

c0026228 <APICTimer::open(int, int, void*)>:
c0026228:	57                   	push   edi
c0026229:	56                   	push   esi
c002622a:	53                   	push   ebx
c002622b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026231:	83 c0 24             	add    eax,0x24
c0026234:	8b 00                	mov    eax,DWORD PTR [eax]
c0026236:	83 ec 08             	sub    esp,0x8
c0026239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002623d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026241:	ff d0                	call   eax
c0026243:	83 c4 10             	add    esp,0x10
c0026246:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c002624b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026251:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026257:	83 ec 0c             	sub    esp,0xc
c002625a:	50                   	push   eax
c002625b:	e8 ce f3 ff ff       	call   c002562e <APIC::getBase()>
c0026260:	83 c4 10             	add    esp,0x10
c0026263:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002626d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026273:	0f b6 f8             	movzx  edi,al
c0026276:	89 d0                	mov    eax,edx
c0026278:	ba 00 00 00 00       	mov    edx,0x0
c002627d:	89 c1                	mov    ecx,eax
c002627f:	80 e5 ff             	and    ch,0xff
c0026282:	89 cb                	mov    ebx,ecx
c0026284:	0f b6 f2             	movzx  esi,dl
c0026287:	89 d8                	mov    eax,ebx
c0026289:	89 f2                	mov    edx,esi
c002628b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002628f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026292:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026296:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002629a:	83 e0 00             	and    eax,0x0
c002629d:	09 d0                	or     eax,edx
c002629f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262ad:	8d 50 01             	lea    edx,[eax+0x1]
c00262b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262b4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262ba:	0f b6 d0             	movzx  edx,al
c00262bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c1:	83 c2 08             	add    edx,0x8
c00262c4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262c8:	0f b6 c9             	movzx  ecx,cl
c00262cb:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262d1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00262d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00262dd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262eb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00262f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262f5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00262fb:	83 ec 0c             	sub    esp,0xc
c00262fe:	51                   	push   ecx
c00262ff:	6a 01                	push   0x1
c0026301:	68 f6 60 02 c0       	push   0xc00260f6
c0026306:	52                   	push   edx
c0026307:	50                   	push   eax
c0026308:	e8 93 de fe ff       	call   c00141a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002630d:	83 c4 20             	add    esp,0x20
c0026310:	89 c2                	mov    edx,eax
c0026312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026316:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002631c:	b8 00 00 00 00       	mov    eax,0x0
c0026321:	5b                   	pop    ebx
c0026322:	5e                   	pop    esi
c0026323:	5f                   	pop    edi
c0026324:	c3                   	ret    
c0026325:	90                   	nop

c0026326 <APICTimer::APICTimer()>:
c0026326:	83 ec 0c             	sub    esp,0xc
c0026329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632d:	83 ec 08             	sub    esp,0x8
c0026330:	68 90 d2 02 c0       	push   0xc002d290
c0026335:	50                   	push   eax
c0026336:	e8 f9 07 ff ff       	call   c0016b34 <Timer::Timer(char const*)>
c002633b:	83 c4 10             	add    esp,0x10
c002633e:	ba a4 d2 02 c0       	mov    edx,0xc002d2a4
c0026343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026347:	89 10                	mov    DWORD PTR [eax],edx
c0026349:	90                   	nop
c002634a:	83 c4 0c             	add    esp,0xc
c002634d:	c3                   	ret    

c002634e <PIT::write(int)>:
c002634e:	83 ec 10             	sub    esp,0x10
c0026351:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026355:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026359:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002635f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026363:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c0026368:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002636d:	99                   	cdq    
c002636e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026372:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026376:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002637d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026382:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026386:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002638b:	ee                   	out    dx,al
c002638c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026390:	0f b6 c0             	movzx  eax,al
c0026393:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002639a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002639e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00263a2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00263a7:	ee                   	out    dx,al
c00263a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263ac:	c1 f8 08             	sar    eax,0x8
c00263af:	0f b6 c0             	movzx  eax,al
c00263b2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00263b9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00263bd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00263c1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00263c6:	ee                   	out    dx,al
c00263c7:	90                   	nop
c00263c8:	83 c4 10             	add    esp,0x10
c00263cb:	c3                   	ret    

c00263cc <pitHandler(regs*, void*)>:
c00263cc:	83 ec 0c             	sub    esp,0xc
c00263cf:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c00263d4:	99                   	cdq    
c00263d5:	52                   	push   edx
c00263d6:	50                   	push   eax
c00263d7:	6a 00                	push   0x0
c00263d9:	68 00 ca 9a 3b       	push   0x3b9aca00
c00263de:	e8 b9 04 00 00       	call   c002689c <__udivdi3>
c00263e3:	83 c4 10             	add    esp,0x10
c00263e6:	83 ec 08             	sub    esp,0x8
c00263e9:	52                   	push   edx
c00263ea:	50                   	push   eax
c00263eb:	e8 d3 07 ff ff       	call   c0016bc3 <timerHandler(unsigned long long)>
c00263f0:	83 c4 10             	add    esp,0x10
c00263f3:	90                   	nop
c00263f4:	83 c4 0c             	add    esp,0xc
c00263f7:	c3                   	ret    

c00263f8 <PIT::open(int, int, void*)>:
c00263f8:	83 ec 0c             	sub    esp,0xc
c00263fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0026401:	83 c0 24             	add    eax,0x24
c0026404:	8b 00                	mov    eax,DWORD PTR [eax]
c0026406:	83 ec 08             	sub    esp,0x8
c0026409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002640d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026411:	ff d0                	call   eax
c0026413:	83 c4 10             	add    esp,0x10
c0026416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641a:	83 ec 0c             	sub    esp,0xc
c002641d:	6a 00                	push   0x0
c002641f:	6a 01                	push   0x1
c0026421:	68 cc 63 02 c0       	push   0xc00263cc
c0026426:	6a 00                	push   0x0
c0026428:	50                   	push   eax
c0026429:	e8 72 dd fe ff       	call   c00141a0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002642e:	83 c4 20             	add    esp,0x20
c0026431:	89 c2                	mov    edx,eax
c0026433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026437:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002643d:	b8 00 00 00 00       	mov    eax,0x0
c0026442:	83 c4 0c             	add    esp,0xc
c0026445:	c3                   	ret    

c0026446 <PIT::close(int, int, void*)>:
c0026446:	83 ec 0c             	sub    esp,0xc
c0026449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645b:	6a 01                	push   0x1
c002645d:	68 cc 63 02 c0       	push   0xc00263cc
c0026462:	6a 00                	push   0x0
c0026464:	50                   	push   eax
c0026465:	e8 74 dd fe ff       	call   c00141de <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002646a:	83 c4 10             	add    esp,0x10
c002646d:	b8 00 00 00 00       	mov    eax,0x0
c0026472:	83 c4 0c             	add    esp,0xc
c0026475:	c3                   	ret    

c0026476 <PIT::PIT()>:
c0026476:	83 ec 0c             	sub    esp,0xc
c0026479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647d:	83 ec 08             	sub    esp,0x8
c0026480:	68 cc d2 02 c0       	push   0xc002d2cc
c0026485:	50                   	push   eax
c0026486:	e8 a9 06 ff ff       	call   c0016b34 <Timer::Timer(char const*)>
c002648b:	83 c4 10             	add    esp,0x10
c002648e:	ba f4 d2 02 c0       	mov    edx,0xc002d2f4
c0026493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026497:	89 10                	mov    DWORD PTR [eax],edx
c0026499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002649d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264a3:	0f b6 d0             	movzx  edx,al
c00264a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264aa:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00264b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264bb:	0f b6 d0             	movzx  edx,al
c00264be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00264c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264d1:	8d 50 01             	lea    edx,[eax+0x1]
c00264d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264d8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00264de:	0f b6 d0             	movzx  edx,al
c00264e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00264e9:	83 e1 3f             	and    ecx,0x3f
c00264ec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00264f0:	90                   	nop
c00264f1:	83 c4 0c             	add    esp,0xc
c00264f4:	c3                   	ret    
c00264f5:	66 90                	xchg   ax,ax
c00264f7:	66 90                	xchg   ax,ax
c00264f9:	66 90                	xchg   ax,ax
c00264fb:	66 90                	xchg   ax,ax
c00264fd:	66 90                	xchg   ax,ax
c00264ff:	90                   	nop

c0026500 <avxDetect>:
c0026500:	b8 00 00 00 00       	mov    eax,0x0
c0026505:	c3                   	ret    

c0026506 <avxSave>:
c0026506:	c3                   	ret    

c0026507 <avxLoad>:
c0026507:	c3                   	ret    

c0026508 <avxInit>:
c0026508:	c3                   	ret    

c0026509 <avxClose>:
c0026509:	c3                   	ret    

c002650a <wouldSheSayYes>:
c002650a:	c3                   	ret    
c002650b:	49                   	dec    ecx
c002650c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026510:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026514:	75 20                	jne    c0026536 <sseDetect.noSSE+0x1>
c0026516:	4e                   	dec    esi
c0026517:	79 61                	jns    c002657a <x87Detect+0x14>
c0026519:	68 2e 2e 2e 00       	push   0x2e2e2e
c002651e:	66 90                	xchg   ax,ax

c0026520 <absolutelyNoChanceInHell>:
c0026520:	b8 01 00 00 00       	mov    eax,0x1
c0026525:	0f a2                	cpuid  
c0026527:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002652d:	74 06                	je     c0026535 <sseDetect.noSSE>
c002652f:	b8 01 00 00 00       	mov    eax,0x1
c0026534:	c3                   	ret    

c0026535 <sseDetect.noSSE>:
c0026535:	31 c0                	xor    eax,eax
c0026537:	c3                   	ret    

c0026538 <sseSave>:
c0026538:	0f ae 44 24 08       	fxsave [esp+0x8]
c002653d:	c3                   	ret    

c002653e <sseLoad>:
c002653e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026543:	c3                   	ret    

c0026544 <sseInit>:
c0026544:	e8 43 00 00 00       	call   c002658c <x87Init>
c0026549:	0f 20 e0             	mov    eax,cr4
c002654c:	66 0d 00 06          	or     ax,0x600
c0026550:	0f 22 e0             	mov    cr4,eax
c0026553:	c3                   	ret    

c0026554 <sseClose>:
c0026554:	c3                   	ret    
c0026555:	66 90                	xchg   ax,ax
c0026557:	66 90                	xchg   ax,ax
c0026559:	66 90                	xchg   ax,ax
c002655b:	66 90                	xchg   ax,ax
c002655d:	66 90                	xchg   ax,ax
c002655f:	90                   	nop

c0026560 <value_37F>:
c0026560:	7f 03                	jg     c0026565 <value_37A+0x1>

c0026562 <value_37E>:
c0026562:	7e 03                	jle    c0026567 <x87Detect+0x1>

c0026564 <value_37A>:
c0026564:	7a 03                	jp     c0026569 <x87Detect+0x3>

c0026566 <x87Detect>:
c0026566:	b8 01 00 00 00       	mov    eax,0x1
c002656b:	0f a2                	cpuid  
c002656d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026573:	74 06                	je     c002657b <x87Detect.nox87>
c0026575:	b8 01 00 00 00       	mov    eax,0x1
c002657a:	c3                   	ret    

c002657b <x87Detect.nox87>:
c002657b:	b8 00 00 00 00       	mov    eax,0x0
c0026580:	c3                   	ret    

c0026581 <x87Save>:
c0026581:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026586:	c3                   	ret    

c0026587 <x87Load>:
c0026587:	dd 64 24 08          	frstor [esp+0x8]
c002658b:	c3                   	ret    

c002658c <x87Init>:
c002658c:	9b db e3             	finit  
c002658f:	0f 20 c0             	mov    eax,cr0
c0026592:	66 25 fb ff          	and    ax,0xfffb
c0026596:	66 0d 22 00          	or     ax,0x22
c002659a:	0f 22 c0             	mov    cr0,eax
c002659d:	0f 06                	clts   
c002659f:	d9 2d 64 65 02 c0    	fldcw  WORD PTR ds:0xc0026564
c00265a5:	c3                   	ret    

c00265a6 <x87Close>:
c00265a6:	c3                   	ret    
c00265a7:	90                   	nop

c00265a8 <__do_global_ctors_aux>:
c00265a8:	a1 ec 90 02 c0       	mov    eax,ds:0xc00290ec
c00265ad:	83 f8 ff             	cmp    eax,0xffffffff
c00265b0:	74 1a                	je     c00265cc <__do_global_ctors_aux+0x24>
c00265b2:	55                   	push   ebp
c00265b3:	89 e5                	mov    ebp,esp
c00265b5:	53                   	push   ebx
c00265b6:	52                   	push   edx
c00265b7:	bb ec 90 02 c0       	mov    ebx,0xc00290ec
c00265bc:	ff d0                	call   eax
c00265be:	83 eb 04             	sub    ebx,0x4
c00265c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00265c3:	83 f8 ff             	cmp    eax,0xffffffff
c00265c6:	75 f4                	jne    c00265bc <__do_global_ctors_aux+0x14>
c00265c8:	58                   	pop    eax
c00265c9:	5b                   	pop    ebx
c00265ca:	5d                   	pop    ebp
c00265cb:	c3                   	ret    
c00265cc:	c3                   	ret    
c00265cd:	66 90                	xchg   ax,ax
c00265cf:	90                   	nop

c00265d0 <__divdi3>:
c00265d0:	55                   	push   ebp
c00265d1:	57                   	push   edi
c00265d2:	56                   	push   esi
c00265d3:	53                   	push   ebx
c00265d4:	83 ec 1c             	sub    esp,0x1c
c00265d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00265db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00265df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00265e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00265e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00265ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00265ee:	85 db                	test   ebx,ebx
c00265f0:	0f 88 8e 00 00 00    	js     c0026684 <__divdi3+0xb4>
c00265f6:	89 dd                	mov    ebp,ebx
c00265f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026600:	89 d3                	mov    ebx,edx
c0026602:	85 d2                	test   edx,edx
c0026604:	79 0d                	jns    c0026613 <__divdi3+0x43>
c0026606:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002660a:	f7 d8                	neg    eax
c002660c:	83 d2 00             	adc    edx,0x0
c002660f:	f7 da                	neg    edx
c0026611:	89 d3                	mov    ebx,edx
c0026613:	89 c7                	mov    edi,eax
c0026615:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026618:	85 db                	test   ebx,ebx
c002661a:	75 48                	jne    c0026664 <__divdi3+0x94>
c002661c:	39 ef                	cmp    edi,ebp
c002661e:	76 24                	jbe    c0026644 <__divdi3+0x74>
c0026620:	89 ea                	mov    edx,ebp
c0026622:	f7 f7                	div    edi
c0026624:	89 c1                	mov    ecx,eax
c0026626:	31 f6                	xor    esi,esi
c0026628:	89 c8                	mov    eax,ecx
c002662a:	89 f2                	mov    edx,esi
c002662c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026630:	85 c9                	test   ecx,ecx
c0026632:	74 07                	je     c002663b <__divdi3+0x6b>
c0026634:	f7 d8                	neg    eax
c0026636:	83 d2 00             	adc    edx,0x0
c0026639:	f7 da                	neg    edx
c002663b:	83 c4 1c             	add    esp,0x1c
c002663e:	5b                   	pop    ebx
c002663f:	5e                   	pop    esi
c0026640:	5f                   	pop    edi
c0026641:	5d                   	pop    ebp
c0026642:	c3                   	ret    
c0026643:	90                   	nop
c0026644:	85 ff                	test   edi,edi
c0026646:	75 0b                	jne    c0026653 <__divdi3+0x83>
c0026648:	b8 01 00 00 00       	mov    eax,0x1
c002664d:	31 d2                	xor    edx,edx
c002664f:	f7 f3                	div    ebx
c0026651:	89 c7                	mov    edi,eax
c0026653:	31 d2                	xor    edx,edx
c0026655:	89 e8                	mov    eax,ebp
c0026657:	f7 f7                	div    edi
c0026659:	89 c6                	mov    esi,eax
c002665b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002665e:	f7 f7                	div    edi
c0026660:	89 c1                	mov    ecx,eax
c0026662:	eb c4                	jmp    c0026628 <__divdi3+0x58>
c0026664:	39 eb                	cmp    ebx,ebp
c0026666:	77 3c                	ja     c00266a4 <__divdi3+0xd4>
c0026668:	0f bd f3             	bsr    esi,ebx
c002666b:	83 f6 1f             	xor    esi,0x1f
c002666e:	75 40                	jne    c00266b0 <__divdi3+0xe0>
c0026670:	39 eb                	cmp    ebx,ebp
c0026672:	72 09                	jb     c002667d <__divdi3+0xad>
c0026674:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026677:	0f 87 97 00 00 00    	ja     c0026714 <__divdi3+0x144>
c002667d:	b9 01 00 00 00       	mov    ecx,0x1
c0026682:	eb a4                	jmp    c0026628 <__divdi3+0x58>
c0026684:	f7 d9                	neg    ecx
c0026686:	83 d3 00             	adc    ebx,0x0
c0026689:	f7 db                	neg    ebx
c002668b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002668e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026692:	89 dd                	mov    ebp,ebx
c0026694:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002669c:	e9 5f ff ff ff       	jmp    c0026600 <__divdi3+0x30>
c00266a1:	8d 76 00             	lea    esi,[esi+0x0]
c00266a4:	31 f6                	xor    esi,esi
c00266a6:	31 c9                	xor    ecx,ecx
c00266a8:	e9 7b ff ff ff       	jmp    c0026628 <__divdi3+0x58>
c00266ad:	8d 76 00             	lea    esi,[esi+0x0]
c00266b0:	b8 20 00 00 00       	mov    eax,0x20
c00266b5:	29 f0                	sub    eax,esi
c00266b7:	89 f1                	mov    ecx,esi
c00266b9:	d3 e3                	shl    ebx,cl
c00266bb:	89 fa                	mov    edx,edi
c00266bd:	88 c1                	mov    cl,al
c00266bf:	d3 ea                	shr    edx,cl
c00266c1:	09 da                	or     edx,ebx
c00266c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00266c7:	89 f1                	mov    ecx,esi
c00266c9:	d3 e7                	shl    edi,cl
c00266cb:	89 eb                	mov    ebx,ebp
c00266cd:	88 c1                	mov    cl,al
c00266cf:	d3 eb                	shr    ebx,cl
c00266d1:	89 f1                	mov    ecx,esi
c00266d3:	d3 e5                	shl    ebp,cl
c00266d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00266d8:	88 c1                	mov    cl,al
c00266da:	d3 ea                	shr    edx,cl
c00266dc:	09 d5                	or     ebp,edx
c00266de:	89 e8                	mov    eax,ebp
c00266e0:	89 da                	mov    edx,ebx
c00266e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00266e6:	89 d3                	mov    ebx,edx
c00266e8:	89 c5                	mov    ebp,eax
c00266ea:	f7 e7                	mul    edi
c00266ec:	39 d3                	cmp    ebx,edx
c00266ee:	72 18                	jb     c0026708 <__divdi3+0x138>
c00266f0:	74 0a                	je     c00266fc <__divdi3+0x12c>
c00266f2:	89 e9                	mov    ecx,ebp
c00266f4:	31 f6                	xor    esi,esi
c00266f6:	e9 2d ff ff ff       	jmp    c0026628 <__divdi3+0x58>
c00266fb:	90                   	nop
c00266fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00266ff:	89 f1                	mov    ecx,esi
c0026701:	d3 e7                	shl    edi,cl
c0026703:	39 c7                	cmp    edi,eax
c0026705:	73 eb                	jae    c00266f2 <__divdi3+0x122>
c0026707:	90                   	nop
c0026708:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002670b:	31 f6                	xor    esi,esi
c002670d:	e9 16 ff ff ff       	jmp    c0026628 <__divdi3+0x58>
c0026712:	66 90                	xchg   ax,ax
c0026714:	31 c9                	xor    ecx,ecx
c0026716:	e9 0d ff ff ff       	jmp    c0026628 <__divdi3+0x58>
c002671b:	90                   	nop

c002671c <__moddi3>:
c002671c:	55                   	push   ebp
c002671d:	57                   	push   edi
c002671e:	56                   	push   esi
c002671f:	53                   	push   ebx
c0026720:	83 ec 2c             	sub    esp,0x2c
c0026723:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026727:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002672b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002672f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026733:	85 db                	test   ebx,ebx
c0026735:	0f 88 85 00 00 00    	js     c00267c0 <__moddi3+0xa4>
c002673b:	89 de                	mov    esi,ebx
c002673d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026745:	89 d7                	mov    edi,edx
c0026747:	85 d2                	test   edx,edx
c0026749:	79 09                	jns    c0026754 <__moddi3+0x38>
c002674b:	f7 d8                	neg    eax
c002674d:	83 d2 00             	adc    edx,0x0
c0026750:	f7 da                	neg    edx
c0026752:	89 d7                	mov    edi,edx
c0026754:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026758:	89 cd                	mov    ebp,ecx
c002675a:	85 ff                	test   edi,edi
c002675c:	75 52                	jne    c00267b0 <__moddi3+0x94>
c002675e:	89 c3                	mov    ebx,eax
c0026760:	39 f0                	cmp    eax,esi
c0026762:	76 24                	jbe    c0026788 <__moddi3+0x6c>
c0026764:	89 c8                	mov    eax,ecx
c0026766:	89 f2                	mov    edx,esi
c0026768:	f7 f3                	div    ebx
c002676a:	89 d6                	mov    esi,edx
c002676c:	89 f0                	mov    eax,esi
c002676e:	31 d2                	xor    edx,edx
c0026770:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026774:	85 c9                	test   ecx,ecx
c0026776:	74 07                	je     c002677f <__moddi3+0x63>
c0026778:	f7 d8                	neg    eax
c002677a:	83 d2 00             	adc    edx,0x0
c002677d:	f7 da                	neg    edx
c002677f:	83 c4 2c             	add    esp,0x2c
c0026782:	5b                   	pop    ebx
c0026783:	5e                   	pop    esi
c0026784:	5f                   	pop    edi
c0026785:	5d                   	pop    ebp
c0026786:	c3                   	ret    
c0026787:	90                   	nop
c0026788:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002678c:	85 db                	test   ebx,ebx
c002678e:	75 0d                	jne    c002679d <__moddi3+0x81>
c0026790:	b8 01 00 00 00       	mov    eax,0x1
c0026795:	31 d2                	xor    edx,edx
c0026797:	f7 f7                	div    edi
c0026799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002679d:	89 f0                	mov    eax,esi
c002679f:	31 d2                	xor    edx,edx
c00267a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00267a5:	f7 f7                	div    edi
c00267a7:	89 e8                	mov    eax,ebp
c00267a9:	f7 f7                	div    edi
c00267ab:	89 d6                	mov    esi,edx
c00267ad:	eb bd                	jmp    c002676c <__moddi3+0x50>
c00267af:	90                   	nop
c00267b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00267b4:	39 f7                	cmp    edi,esi
c00267b6:	76 20                	jbe    c00267d8 <__moddi3+0xbc>
c00267b8:	89 c8                	mov    eax,ecx
c00267ba:	89 f2                	mov    edx,esi
c00267bc:	eb b2                	jmp    c0026770 <__moddi3+0x54>
c00267be:	66 90                	xchg   ax,ax
c00267c0:	f7 d9                	neg    ecx
c00267c2:	83 d3 00             	adc    ebx,0x0
c00267c5:	f7 db                	neg    ebx
c00267c7:	89 de                	mov    esi,ebx
c00267c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00267d1:	e9 6f ff ff ff       	jmp    c0026745 <__moddi3+0x29>
c00267d6:	66 90                	xchg   ax,ax
c00267d8:	0f bd c7             	bsr    eax,edi
c00267db:	83 f0 1f             	xor    eax,0x1f
c00267de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00267e2:	75 24                	jne    c0026808 <__moddi3+0xec>
c00267e4:	39 f7                	cmp    edi,esi
c00267e6:	72 06                	jb     c00267ee <__moddi3+0xd2>
c00267e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00267ec:	77 0c                	ja     c00267fa <__moddi3+0xde>
c00267ee:	89 e9                	mov    ecx,ebp
c00267f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00267f4:	19 fe                	sbb    esi,edi
c00267f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00267fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00267fe:	89 f2                	mov    edx,esi
c0026800:	e9 6b ff ff ff       	jmp    c0026770 <__moddi3+0x54>
c0026805:	8d 76 00             	lea    esi,[esi+0x0]
c0026808:	b8 20 00 00 00       	mov    eax,0x20
c002680d:	89 c2                	mov    edx,eax
c002680f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026813:	29 da                	sub    edx,ebx
c0026815:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026819:	88 d9                	mov    cl,bl
c002681b:	d3 e7                	shl    edi,cl
c002681d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026821:	88 d1                	mov    cl,dl
c0026823:	d3 e8                	shr    eax,cl
c0026825:	09 c7                	or     edi,eax
c0026827:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002682b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002682f:	89 d8                	mov    eax,ebx
c0026831:	88 d9                	mov    cl,bl
c0026833:	d3 e7                	shl    edi,cl
c0026835:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026839:	89 f3                	mov    ebx,esi
c002683b:	88 d1                	mov    cl,dl
c002683d:	d3 eb                	shr    ebx,cl
c002683f:	89 c7                	mov    edi,eax
c0026841:	88 c1                	mov    cl,al
c0026843:	d3 e6                	shl    esi,cl
c0026845:	89 e8                	mov    eax,ebp
c0026847:	88 d1                	mov    cl,dl
c0026849:	d3 e8                	shr    eax,cl
c002684b:	09 f0                	or     eax,esi
c002684d:	89 f9                	mov    ecx,edi
c002684f:	d3 e5                	shl    ebp,cl
c0026851:	89 da                	mov    edx,ebx
c0026853:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026857:	89 d3                	mov    ebx,edx
c0026859:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002685d:	89 c6                	mov    esi,eax
c002685f:	89 d1                	mov    ecx,edx
c0026861:	39 d3                	cmp    ebx,edx
c0026863:	72 27                	jb     c002688c <__moddi3+0x170>
c0026865:	74 21                	je     c0026888 <__moddi3+0x16c>
c0026867:	29 f5                	sub    ebp,esi
c0026869:	19 cb                	sbb    ebx,ecx
c002686b:	89 de                	mov    esi,ebx
c002686d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026871:	d3 e6                	shl    esi,cl
c0026873:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026877:	89 f9                	mov    ecx,edi
c0026879:	d3 ed                	shr    ebp,cl
c002687b:	09 ee                	or     esi,ebp
c002687d:	89 f0                	mov    eax,esi
c002687f:	d3 eb                	shr    ebx,cl
c0026881:	89 da                	mov    edx,ebx
c0026883:	e9 e8 fe ff ff       	jmp    c0026770 <__moddi3+0x54>
c0026888:	39 c5                	cmp    ebp,eax
c002688a:	73 db                	jae    c0026867 <__moddi3+0x14b>
c002688c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026890:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026894:	89 d1                	mov    ecx,edx
c0026896:	89 c6                	mov    esi,eax
c0026898:	eb cd                	jmp    c0026867 <__moddi3+0x14b>
c002689a:	66 90                	xchg   ax,ax

c002689c <__udivdi3>:
c002689c:	55                   	push   ebp
c002689d:	57                   	push   edi
c002689e:	56                   	push   esi
c002689f:	53                   	push   ebx
c00268a0:	83 ec 1c             	sub    esp,0x1c
c00268a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00268a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00268ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00268af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00268b3:	85 d2                	test   edx,edx
c00268b5:	75 41                	jne    c00268f8 <__udivdi3+0x5c>
c00268b7:	39 f7                	cmp    edi,esi
c00268b9:	76 15                	jbe    c00268d0 <__udivdi3+0x34>
c00268bb:	89 e8                	mov    eax,ebp
c00268bd:	89 f2                	mov    edx,esi
c00268bf:	f7 f7                	div    edi
c00268c1:	31 db                	xor    ebx,ebx
c00268c3:	89 da                	mov    edx,ebx
c00268c5:	83 c4 1c             	add    esp,0x1c
c00268c8:	5b                   	pop    ebx
c00268c9:	5e                   	pop    esi
c00268ca:	5f                   	pop    edi
c00268cb:	5d                   	pop    ebp
c00268cc:	c3                   	ret    
c00268cd:	8d 76 00             	lea    esi,[esi+0x0]
c00268d0:	89 f9                	mov    ecx,edi
c00268d2:	85 ff                	test   edi,edi
c00268d4:	75 0b                	jne    c00268e1 <__udivdi3+0x45>
c00268d6:	b8 01 00 00 00       	mov    eax,0x1
c00268db:	31 d2                	xor    edx,edx
c00268dd:	f7 f7                	div    edi
c00268df:	89 c1                	mov    ecx,eax
c00268e1:	31 d2                	xor    edx,edx
c00268e3:	89 f0                	mov    eax,esi
c00268e5:	f7 f1                	div    ecx
c00268e7:	89 c3                	mov    ebx,eax
c00268e9:	89 e8                	mov    eax,ebp
c00268eb:	f7 f1                	div    ecx
c00268ed:	89 da                	mov    edx,ebx
c00268ef:	83 c4 1c             	add    esp,0x1c
c00268f2:	5b                   	pop    ebx
c00268f3:	5e                   	pop    esi
c00268f4:	5f                   	pop    edi
c00268f5:	5d                   	pop    ebp
c00268f6:	c3                   	ret    
c00268f7:	90                   	nop
c00268f8:	39 f2                	cmp    edx,esi
c00268fa:	77 1c                	ja     c0026918 <__udivdi3+0x7c>
c00268fc:	0f bd da             	bsr    ebx,edx
c00268ff:	83 f3 1f             	xor    ebx,0x1f
c0026902:	75 24                	jne    c0026928 <__udivdi3+0x8c>
c0026904:	39 f2                	cmp    edx,esi
c0026906:	72 08                	jb     c0026910 <__udivdi3+0x74>
c0026908:	39 ef                	cmp    edi,ebp
c002690a:	0f 87 84 00 00 00    	ja     c0026994 <__udivdi3+0xf8>
c0026910:	b8 01 00 00 00       	mov    eax,0x1
c0026915:	eb ac                	jmp    c00268c3 <__udivdi3+0x27>
c0026917:	90                   	nop
c0026918:	31 db                	xor    ebx,ebx
c002691a:	31 c0                	xor    eax,eax
c002691c:	89 da                	mov    edx,ebx
c002691e:	83 c4 1c             	add    esp,0x1c
c0026921:	5b                   	pop    ebx
c0026922:	5e                   	pop    esi
c0026923:	5f                   	pop    edi
c0026924:	5d                   	pop    ebp
c0026925:	c3                   	ret    
c0026926:	66 90                	xchg   ax,ax
c0026928:	b8 20 00 00 00       	mov    eax,0x20
c002692d:	29 d8                	sub    eax,ebx
c002692f:	88 d9                	mov    cl,bl
c0026931:	d3 e2                	shl    edx,cl
c0026933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026937:	89 fa                	mov    edx,edi
c0026939:	88 c1                	mov    cl,al
c002693b:	d3 ea                	shr    edx,cl
c002693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026941:	09 d1                	or     ecx,edx
c0026943:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026947:	88 d9                	mov    cl,bl
c0026949:	d3 e7                	shl    edi,cl
c002694b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002694f:	89 f7                	mov    edi,esi
c0026951:	88 c1                	mov    cl,al
c0026953:	d3 ef                	shr    edi,cl
c0026955:	88 d9                	mov    cl,bl
c0026957:	d3 e6                	shl    esi,cl
c0026959:	89 ea                	mov    edx,ebp
c002695b:	88 c1                	mov    cl,al
c002695d:	d3 ea                	shr    edx,cl
c002695f:	09 d6                	or     esi,edx
c0026961:	89 f0                	mov    eax,esi
c0026963:	89 fa                	mov    edx,edi
c0026965:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026969:	89 d7                	mov    edi,edx
c002696b:	89 c6                	mov    esi,eax
c002696d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026971:	39 d7                	cmp    edi,edx
c0026973:	72 13                	jb     c0026988 <__udivdi3+0xec>
c0026975:	74 09                	je     c0026980 <__udivdi3+0xe4>
c0026977:	89 f0                	mov    eax,esi
c0026979:	31 db                	xor    ebx,ebx
c002697b:	e9 43 ff ff ff       	jmp    c00268c3 <__udivdi3+0x27>
c0026980:	88 d9                	mov    cl,bl
c0026982:	d3 e5                	shl    ebp,cl
c0026984:	39 c5                	cmp    ebp,eax
c0026986:	73 ef                	jae    c0026977 <__udivdi3+0xdb>
c0026988:	8d 46 ff             	lea    eax,[esi-0x1]
c002698b:	31 db                	xor    ebx,ebx
c002698d:	e9 31 ff ff ff       	jmp    c00268c3 <__udivdi3+0x27>
c0026992:	66 90                	xchg   ax,ax
c0026994:	31 c0                	xor    eax,eax
c0026996:	e9 28 ff ff ff       	jmp    c00268c3 <__udivdi3+0x27>
c002699b:	90                   	nop

c002699c <__umoddi3>:
c002699c:	55                   	push   ebp
c002699d:	57                   	push   edi
c002699e:	56                   	push   esi
c002699f:	53                   	push   ebx
c00269a0:	83 ec 1c             	sub    esp,0x1c
c00269a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00269a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00269ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00269b3:	89 da                	mov    edx,ebx
c00269b5:	85 c0                	test   eax,eax
c00269b7:	75 37                	jne    c00269f0 <__umoddi3+0x54>
c00269b9:	39 df                	cmp    edi,ebx
c00269bb:	76 13                	jbe    c00269d0 <__umoddi3+0x34>
c00269bd:	89 f0                	mov    eax,esi
c00269bf:	f7 f7                	div    edi
c00269c1:	89 d0                	mov    eax,edx
c00269c3:	31 d2                	xor    edx,edx
c00269c5:	83 c4 1c             	add    esp,0x1c
c00269c8:	5b                   	pop    ebx
c00269c9:	5e                   	pop    esi
c00269ca:	5f                   	pop    edi
c00269cb:	5d                   	pop    ebp
c00269cc:	c3                   	ret    
c00269cd:	8d 76 00             	lea    esi,[esi+0x0]
c00269d0:	89 fd                	mov    ebp,edi
c00269d2:	85 ff                	test   edi,edi
c00269d4:	75 0b                	jne    c00269e1 <__umoddi3+0x45>
c00269d6:	b8 01 00 00 00       	mov    eax,0x1
c00269db:	31 d2                	xor    edx,edx
c00269dd:	f7 f7                	div    edi
c00269df:	89 c5                	mov    ebp,eax
c00269e1:	89 d8                	mov    eax,ebx
c00269e3:	31 d2                	xor    edx,edx
c00269e5:	f7 f5                	div    ebp
c00269e7:	89 f0                	mov    eax,esi
c00269e9:	f7 f5                	div    ebp
c00269eb:	89 d0                	mov    eax,edx
c00269ed:	eb d4                	jmp    c00269c3 <__umoddi3+0x27>
c00269ef:	90                   	nop
c00269f0:	89 f1                	mov    ecx,esi
c00269f2:	39 d8                	cmp    eax,ebx
c00269f4:	76 0a                	jbe    c0026a00 <__umoddi3+0x64>
c00269f6:	89 f0                	mov    eax,esi
c00269f8:	83 c4 1c             	add    esp,0x1c
c00269fb:	5b                   	pop    ebx
c00269fc:	5e                   	pop    esi
c00269fd:	5f                   	pop    edi
c00269fe:	5d                   	pop    ebp
c00269ff:	c3                   	ret    
c0026a00:	0f bd e8             	bsr    ebp,eax
c0026a03:	83 f5 1f             	xor    ebp,0x1f
c0026a06:	75 1c                	jne    c0026a24 <__umoddi3+0x88>
c0026a08:	39 d8                	cmp    eax,ebx
c0026a0a:	72 04                	jb     c0026a10 <__umoddi3+0x74>
c0026a0c:	39 f7                	cmp    edi,esi
c0026a0e:	77 08                	ja     c0026a18 <__umoddi3+0x7c>
c0026a10:	89 da                	mov    edx,ebx
c0026a12:	29 fe                	sub    esi,edi
c0026a14:	19 c2                	sbb    edx,eax
c0026a16:	89 f1                	mov    ecx,esi
c0026a18:	89 c8                	mov    eax,ecx
c0026a1a:	83 c4 1c             	add    esp,0x1c
c0026a1d:	5b                   	pop    ebx
c0026a1e:	5e                   	pop    esi
c0026a1f:	5f                   	pop    edi
c0026a20:	5d                   	pop    ebp
c0026a21:	c3                   	ret    
c0026a22:	66 90                	xchg   ax,ax
c0026a24:	ba 20 00 00 00       	mov    edx,0x20
c0026a29:	29 ea                	sub    edx,ebp
c0026a2b:	89 e9                	mov    ecx,ebp
c0026a2d:	d3 e0                	shl    eax,cl
c0026a2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a33:	89 f8                	mov    eax,edi
c0026a35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026a39:	88 d1                	mov    cl,dl
c0026a3b:	d3 e8                	shr    eax,cl
c0026a3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a41:	09 c1                	or     ecx,eax
c0026a43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a47:	89 e9                	mov    ecx,ebp
c0026a49:	d3 e7                	shl    edi,cl
c0026a4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a4f:	89 d8                	mov    eax,ebx
c0026a51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026a55:	88 d1                	mov    cl,dl
c0026a57:	d3 e8                	shr    eax,cl
c0026a59:	89 c7                	mov    edi,eax
c0026a5b:	89 e9                	mov    ecx,ebp
c0026a5d:	d3 e3                	shl    ebx,cl
c0026a5f:	89 f0                	mov    eax,esi
c0026a61:	88 d1                	mov    cl,dl
c0026a63:	d3 e8                	shr    eax,cl
c0026a65:	09 d8                	or     eax,ebx
c0026a67:	89 e9                	mov    ecx,ebp
c0026a69:	d3 e6                	shl    esi,cl
c0026a6b:	89 f3                	mov    ebx,esi
c0026a6d:	89 fa                	mov    edx,edi
c0026a6f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a73:	89 d1                	mov    ecx,edx
c0026a75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a79:	89 c6                	mov    esi,eax
c0026a7b:	89 d7                	mov    edi,edx
c0026a7d:	39 d1                	cmp    ecx,edx
c0026a7f:	72 27                	jb     c0026aa8 <__umoddi3+0x10c>
c0026a81:	74 21                	je     c0026aa4 <__umoddi3+0x108>
c0026a83:	89 ca                	mov    edx,ecx
c0026a85:	29 f3                	sub    ebx,esi
c0026a87:	19 fa                	sbb    edx,edi
c0026a89:	89 d0                	mov    eax,edx
c0026a8b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026a8f:	d3 e0                	shl    eax,cl
c0026a91:	89 e9                	mov    ecx,ebp
c0026a93:	d3 eb                	shr    ebx,cl
c0026a95:	09 d8                	or     eax,ebx
c0026a97:	d3 ea                	shr    edx,cl
c0026a99:	83 c4 1c             	add    esp,0x1c
c0026a9c:	5b                   	pop    ebx
c0026a9d:	5e                   	pop    esi
c0026a9e:	5f                   	pop    edi
c0026a9f:	5d                   	pop    ebp
c0026aa0:	c3                   	ret    
c0026aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0026aa4:	39 c3                	cmp    ebx,eax
c0026aa6:	73 db                	jae    c0026a83 <__umoddi3+0xe7>
c0026aa8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026aac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026ab0:	89 d7                	mov    edi,edx
c0026ab2:	89 c6                	mov    esi,eax
c0026ab4:	eb cd                	jmp    c0026a83 <__umoddi3+0xe7>

c0026ab6 <__addsf3>:
c0026ab6:	55                   	push   ebp
c0026ab7:	89 e5                	mov    ebp,esp
c0026ab9:	57                   	push   edi
c0026aba:	56                   	push   esi
c0026abb:	53                   	push   ebx
c0026abc:	83 ec 08             	sub    esp,0x8
c0026abf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026ac2:	89 fa                	mov    edx,edi
c0026ac4:	89 f8                	mov    eax,edi
c0026ac6:	c1 f8 17             	sar    eax,0x17
c0026ac9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026acc:	c1 e2 08             	shl    edx,0x8
c0026acf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ad5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ad8:	89 de                	mov    esi,ebx
c0026ada:	c1 fe 17             	sar    esi,0x17
c0026add:	c1 e3 08             	shl    ebx,0x8
c0026ae0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ae6:	31 f0                	xor    eax,esi
c0026ae8:	0f 88 3b 01 00 00    	js     c0026c29 <__addsf3+0x173>
c0026aee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026af1:	29 f1                	sub    ecx,esi
c0026af3:	85 c9                	test   ecx,ecx
c0026af5:	7e 54                	jle    c0026b4b <__addsf3+0x95>
c0026af7:	89 f0                	mov    eax,esi
c0026af9:	84 c0                	test   al,al
c0026afb:	75 10                	jne    c0026b0d <__addsf3+0x57>
c0026afd:	85 db                	test   ebx,ebx
c0026aff:	0f 84 aa 02 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026b05:	49                   	dec    ecx
c0026b06:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b09:	74 38                	je     c0026b43 <__addsf3+0x8d>
c0026b0b:	eb 13                	jmp    c0026b20 <__addsf3+0x6a>
c0026b0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b10:	f7 d0                	not    eax
c0026b12:	84 c0                	test   al,al
c0026b14:	0f 84 95 02 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026b1a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b20:	83 f9 1f             	cmp    ecx,0x1f
c0026b23:	0f 8f 86 02 00 00    	jg     c0026daf <__addsf3+0x2f9>
c0026b29:	89 de                	mov    esi,ebx
c0026b2b:	d3 ee                	shr    esi,cl
c0026b2d:	b8 20 00 00 00       	mov    eax,0x20
c0026b32:	29 c8                	sub    eax,ecx
c0026b34:	89 c1                	mov    ecx,eax
c0026b36:	d3 e3                	shl    ebx,cl
c0026b38:	31 c0                	xor    eax,eax
c0026b3a:	85 db                	test   ebx,ebx
c0026b3c:	0f 95 c0             	setne  al
c0026b3f:	09 f0                	or     eax,esi
c0026b41:	01 d0                	add    eax,edx
c0026b43:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b46:	e9 b6 00 00 00       	jmp    c0026c01 <__addsf3+0x14b>
c0026b4b:	74 5c                	je     c0026ba9 <__addsf3+0xf3>
c0026b4d:	89 f1                	mov    ecx,esi
c0026b4f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026b52:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b55:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b59:	75 14                	jne    c0026b6f <__addsf3+0xb9>
c0026b5b:	85 d2                	test   edx,edx
c0026b5d:	0f 84 4c 02 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026b63:	49                   	dec    ecx
c0026b64:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b67:	0f 84 94 00 00 00    	je     c0026c01 <__addsf3+0x14b>
c0026b6d:	eb 12                	jmp    c0026b81 <__addsf3+0xcb>
c0026b6f:	89 f0                	mov    eax,esi
c0026b71:	f7 d0                	not    eax
c0026b73:	84 c0                	test   al,al
c0026b75:	0f 84 34 02 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026b7b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b81:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b84:	83 f9 1f             	cmp    ecx,0x1f
c0026b87:	0f 8f 22 02 00 00    	jg     c0026daf <__addsf3+0x2f9>
c0026b8d:	89 d7                	mov    edi,edx
c0026b8f:	d3 ef                	shr    edi,cl
c0026b91:	b8 20 00 00 00       	mov    eax,0x20
c0026b96:	29 c8                	sub    eax,ecx
c0026b98:	89 c1                	mov    ecx,eax
c0026b9a:	d3 e2                	shl    edx,cl
c0026b9c:	31 c0                	xor    eax,eax
c0026b9e:	85 d2                	test   edx,edx
c0026ba0:	0f 95 c0             	setne  al
c0026ba3:	09 f8                	or     eax,edi
c0026ba5:	01 d8                	add    eax,ebx
c0026ba7:	eb 58                	jmp    c0026c01 <__addsf3+0x14b>
c0026ba9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bac:	8d 70 01             	lea    esi,[eax+0x1]
c0026baf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026bb5:	75 32                	jne    c0026be9 <__addsf3+0x133>
c0026bb7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026bbb:	75 1f                	jne    c0026bdc <__addsf3+0x126>
c0026bbd:	85 d2                	test   edx,edx
c0026bbf:	0f 84 e0 01 00 00    	je     c0026da5 <__addsf3+0x2ef>
c0026bc5:	85 db                	test   ebx,ebx
c0026bc7:	0f 84 e2 01 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026bcd:	89 d0                	mov    eax,edx
c0026bcf:	01 d8                	add    eax,ebx
c0026bd1:	0f 89 a9 01 00 00    	jns    c0026d80 <__addsf3+0x2ca>
c0026bd7:	e9 9d 01 00 00       	jmp    c0026d79 <__addsf3+0x2c3>
c0026bdc:	85 d2                	test   edx,edx
c0026bde:	0f 85 cb 01 00 00    	jne    c0026daf <__addsf3+0x2f9>
c0026be4:	e9 bc 01 00 00       	jmp    c0026da5 <__addsf3+0x2ef>
c0026be9:	31 c0                	xor    eax,eax
c0026beb:	89 f1                	mov    ecx,esi
c0026bed:	f7 d1                	not    ecx
c0026bef:	84 c9                	test   cl,cl
c0026bf1:	0f 84 90 01 00 00    	je     c0026d87 <__addsf3+0x2d1>
c0026bf7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bfa:	d1 e8                	shr    eax,1
c0026bfc:	e9 86 01 00 00       	jmp    c0026d87 <__addsf3+0x2d1>
c0026c01:	85 c0                	test   eax,eax
c0026c03:	0f 89 7e 01 00 00    	jns    c0026d87 <__addsf3+0x2d1>
c0026c09:	46                   	inc    esi
c0026c0a:	89 f2                	mov    edx,esi
c0026c0c:	f7 d2                	not    edx
c0026c0e:	84 d2                	test   dl,dl
c0026c10:	0f 84 6f 01 00 00    	je     c0026d85 <__addsf3+0x2cf>
c0026c16:	89 c2                	mov    edx,eax
c0026c18:	83 e2 01             	and    edx,0x1
c0026c1b:	d1 e8                	shr    eax,1
c0026c1d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026c22:	09 d0                	or     eax,edx
c0026c24:	e9 5e 01 00 00       	jmp    c0026d87 <__addsf3+0x2d1>
c0026c29:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026c2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c30:	89 f0                	mov    eax,esi
c0026c32:	0f b6 c0             	movzx  eax,al
c0026c35:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c38:	29 c1                	sub    ecx,eax
c0026c3a:	85 c9                	test   ecx,ecx
c0026c3c:	7e 55                	jle    c0026c93 <__addsf3+0x1dd>
c0026c3e:	85 c0                	test   eax,eax
c0026c40:	75 11                	jne    c0026c53 <__addsf3+0x19d>
c0026c42:	85 db                	test   ebx,ebx
c0026c44:	0f 84 65 01 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026c4a:	49                   	dec    ecx
c0026c4b:	75 19                	jne    c0026c66 <__addsf3+0x1b0>
c0026c4d:	89 d0                	mov    eax,edx
c0026c4f:	29 d8                	sub    eax,ebx
c0026c51:	eb 38                	jmp    c0026c8b <__addsf3+0x1d5>
c0026c53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c56:	f7 d0                	not    eax
c0026c58:	84 c0                	test   al,al
c0026c5a:	0f 84 4f 01 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026c60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c66:	83 f9 1f             	cmp    ecx,0x1f
c0026c69:	0f 8f 40 01 00 00    	jg     c0026daf <__addsf3+0x2f9>
c0026c6f:	89 de                	mov    esi,ebx
c0026c71:	d3 ee                	shr    esi,cl
c0026c73:	b8 20 00 00 00       	mov    eax,0x20
c0026c78:	29 c8                	sub    eax,ecx
c0026c7a:	89 c1                	mov    ecx,eax
c0026c7c:	d3 e3                	shl    ebx,cl
c0026c7e:	31 c0                	xor    eax,eax
c0026c80:	85 db                	test   ebx,ebx
c0026c82:	0f 95 c0             	setne  al
c0026c85:	09 f0                	or     eax,esi
c0026c87:	29 c2                	sub    edx,eax
c0026c89:	89 d0                	mov    eax,edx
c0026c8b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c8e:	e9 af 00 00 00       	jmp    c0026d42 <__addsf3+0x28c>
c0026c93:	74 5c                	je     c0026cf1 <__addsf3+0x23b>
c0026c95:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026c98:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c9b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c9f:	75 14                	jne    c0026cb5 <__addsf3+0x1ff>
c0026ca1:	85 d2                	test   edx,edx
c0026ca3:	0f 84 06 01 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026ca9:	48                   	dec    eax
c0026caa:	75 1b                	jne    c0026cc7 <__addsf3+0x211>
c0026cac:	89 d8                	mov    eax,ebx
c0026cae:	29 d0                	sub    eax,edx
c0026cb0:	e9 8d 00 00 00       	jmp    c0026d42 <__addsf3+0x28c>
c0026cb5:	89 f1                	mov    ecx,esi
c0026cb7:	f7 d1                	not    ecx
c0026cb9:	84 c9                	test   cl,cl
c0026cbb:	0f 84 ee 00 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026cc1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cc7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cca:	83 f8 1f             	cmp    eax,0x1f
c0026ccd:	0f 8f dc 00 00 00    	jg     c0026daf <__addsf3+0x2f9>
c0026cd3:	89 d7                	mov    edi,edx
c0026cd5:	88 c1                	mov    cl,al
c0026cd7:	d3 ef                	shr    edi,cl
c0026cd9:	b9 20 00 00 00       	mov    ecx,0x20
c0026cde:	29 c1                	sub    ecx,eax
c0026ce0:	d3 e2                	shl    edx,cl
c0026ce2:	31 c0                	xor    eax,eax
c0026ce4:	85 d2                	test   edx,edx
c0026ce6:	0f 95 c0             	setne  al
c0026ce9:	09 f8                	or     eax,edi
c0026ceb:	29 c3                	sub    ebx,eax
c0026ced:	89 d8                	mov    eax,ebx
c0026cef:	eb 51                	jmp    c0026d42 <__addsf3+0x28c>
c0026cf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cf4:	40                   	inc    eax
c0026cf5:	a8 fe                	test   al,0xfe
c0026cf7:	75 3d                	jne    c0026d36 <__addsf3+0x280>
c0026cf9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026cfd:	0f 85 a7 00 00 00    	jne    c0026daa <__addsf3+0x2f4>
c0026d03:	85 d2                	test   edx,edx
c0026d05:	75 12                	jne    c0026d19 <__addsf3+0x263>
c0026d07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d0a:	85 db                	test   ebx,ebx
c0026d0c:	0f 85 9d 00 00 00    	jne    c0026daf <__addsf3+0x2f9>
c0026d12:	31 ff                	xor    edi,edi
c0026d14:	e9 96 00 00 00       	jmp    c0026daf <__addsf3+0x2f9>
c0026d19:	85 db                	test   ebx,ebx
c0026d1b:	0f 84 8e 00 00 00    	je     c0026daf <__addsf3+0x2f9>
c0026d21:	89 d0                	mov    eax,edx
c0026d23:	29 d8                	sub    eax,ebx
c0026d25:	79 06                	jns    c0026d2d <__addsf3+0x277>
c0026d27:	89 d8                	mov    eax,ebx
c0026d29:	29 d0                	sub    eax,edx
c0026d2b:	eb 5a                	jmp    c0026d87 <__addsf3+0x2d1>
c0026d2d:	bf 00 00 00 00       	mov    edi,0x0
c0026d32:	74 7b                	je     c0026daf <__addsf3+0x2f9>
c0026d34:	eb 4a                	jmp    c0026d80 <__addsf3+0x2ca>
c0026d36:	89 d0                	mov    eax,edx
c0026d38:	29 d8                	sub    eax,ebx
c0026d3a:	79 12                	jns    c0026d4e <__addsf3+0x298>
c0026d3c:	89 d8                	mov    eax,ebx
c0026d3e:	29 d0                	sub    eax,edx
c0026d40:	eb 09                	jmp    c0026d4b <__addsf3+0x295>
c0026d42:	85 c0                	test   eax,eax
c0026d44:	79 41                	jns    c0026d87 <__addsf3+0x2d1>
c0026d46:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d4b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026d4e:	31 f6                	xor    esi,esi
c0026d50:	85 c0                	test   eax,eax
c0026d52:	74 33                	je     c0026d87 <__addsf3+0x2d1>
c0026d54:	0f bd c8             	bsr    ecx,eax
c0026d57:	83 f1 1f             	xor    ecx,0x1f
c0026d5a:	d3 e0                	shl    eax,cl
c0026d5c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026d60:	39 ca                	cmp    edx,ecx
c0026d62:	7f 10                	jg     c0026d74 <__addsf3+0x2be>
c0026d64:	29 d1                	sub    ecx,edx
c0026d66:	41                   	inc    ecx
c0026d67:	d3 e8                	shr    eax,cl
c0026d69:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d6c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026d72:	eb 13                	jmp    c0026d87 <__addsf3+0x2d1>
c0026d74:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d77:	29 ce                	sub    esi,ecx
c0026d79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d7e:	eb 07                	jmp    c0026d87 <__addsf3+0x2d1>
c0026d80:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d83:	eb 02                	jmp    c0026d87 <__addsf3+0x2d1>
c0026d85:	31 c0                	xor    eax,eax
c0026d87:	89 c2                	mov    edx,eax
c0026d89:	c1 ea 08             	shr    edx,0x8
c0026d8c:	a8 7f                	test   al,0x7f
c0026d8e:	0f 95 c1             	setne  cl
c0026d91:	09 d1                	or     ecx,edx
c0026d93:	83 e1 01             	and    ecx,0x1
c0026d96:	c1 e8 07             	shr    eax,0x7
c0026d99:	21 c8                	and    eax,ecx
c0026d9b:	c1 e6 17             	shl    esi,0x17
c0026d9e:	09 d6                	or     esi,edx
c0026da0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026da3:	eb 0a                	jmp    c0026daf <__addsf3+0x2f9>
c0026da5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026da8:	eb 05                	jmp    c0026daf <__addsf3+0x2f9>
c0026daa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026daf:	89 f8                	mov    eax,edi
c0026db1:	5a                   	pop    edx
c0026db2:	59                   	pop    ecx
c0026db3:	5b                   	pop    ebx
c0026db4:	5e                   	pop    esi
c0026db5:	5f                   	pop    edi
c0026db6:	5d                   	pop    ebp
c0026db7:	c3                   	ret    

c0026db8 <__subsf3>:
c0026db8:	55                   	push   ebp
c0026db9:	89 e5                	mov    ebp,esp
c0026dbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026dbe:	05 00 00 00 80       	add    eax,0x80000000
c0026dc3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026dc6:	5d                   	pop    ebp
c0026dc7:	e9 ea fc ff ff       	jmp    c0026ab6 <__addsf3>

c0026dcc <__negsf2>:
c0026dcc:	55                   	push   ebp
c0026dcd:	89 e5                	mov    ebp,esp
c0026dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026dd2:	05 00 00 00 80       	add    eax,0x80000000
c0026dd7:	5d                   	pop    ebp
c0026dd8:	c3                   	ret    

c0026dd9 <__mulsf3>:
c0026dd9:	55                   	push   ebp
c0026dda:	89 e5                	mov    ebp,esp
c0026ddc:	57                   	push   edi
c0026ddd:	56                   	push   esi
c0026dde:	53                   	push   ebx
c0026ddf:	83 ec 1c             	sub    esp,0x1c
c0026de2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026de5:	89 f0                	mov    eax,esi
c0026de7:	89 f1                	mov    ecx,esi
c0026de9:	c1 f9 17             	sar    ecx,0x17
c0026dec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026def:	c1 e0 08             	shl    eax,0x8
c0026df2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026df7:	89 c1                	mov    ecx,eax
c0026df9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026dfc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026dff:	89 c7                	mov    edi,eax
c0026e01:	c1 ff 17             	sar    edi,0x17
c0026e04:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e08:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e0b:	89 f8                	mov    eax,edi
c0026e0d:	0f b6 c0             	movzx  eax,al
c0026e10:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026e13:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026e17:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e1a:	42                   	inc    edx
c0026e1b:	80 e2 fe             	and    dl,0xfe
c0026e1e:	75 7b                	jne    c0026e9b <__mulsf3+0xc2>
c0026e20:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e24:	74 54                	je     c0026e7a <__mulsf3+0xa1>
c0026e26:	85 c9                	test   ecx,ecx
c0026e28:	0f 85 64 01 00 00    	jne    c0026f92 <__mulsf3+0x1b9>
c0026e2e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e31:	80 e2 fe             	and    dl,0xfe
c0026e34:	75 1f                	jne    c0026e55 <__mulsf3+0x7c>
c0026e36:	85 c0                	test   eax,eax
c0026e38:	b8 00 00 00 00       	mov    eax,0x0
c0026e3d:	74 29                	je     c0026e68 <__mulsf3+0x8f>
c0026e3f:	53                   	push   ebx
c0026e40:	53                   	push   ebx
c0026e41:	50                   	push   eax
c0026e42:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e45:	e8 96 05 00 00       	call   c00273e0 <__nesf2>
c0026e4a:	83 c4 10             	add    esp,0x10
c0026e4d:	85 c0                	test   eax,eax
c0026e4f:	0f 85 3a 01 00 00    	jne    c0026f8f <__mulsf3+0x1b6>
c0026e55:	85 ff                	test   edi,edi
c0026e57:	0f 89 35 01 00 00    	jns    c0026f92 <__mulsf3+0x1b9>
c0026e5d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026e63:	e9 2a 01 00 00       	jmp    c0026f92 <__mulsf3+0x1b9>
c0026e68:	51                   	push   ecx
c0026e69:	51                   	push   ecx
c0026e6a:	50                   	push   eax
c0026e6b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e6e:	e8 6d 05 00 00       	call   c00273e0 <__nesf2>
c0026e73:	83 c4 10             	add    esp,0x10
c0026e76:	85 c0                	test   eax,eax
c0026e78:	eb 15                	jmp    c0026e8f <__mulsf3+0xb6>
c0026e7a:	85 c9                	test   ecx,ecx
c0026e7c:	74 0b                	je     c0026e89 <__mulsf3+0xb0>
c0026e7e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026e81:	01 c9                	add    ecx,ecx
c0026e83:	78 16                	js     c0026e9b <__mulsf3+0xc2>
c0026e85:	89 d3                	mov    ebx,edx
c0026e87:	eb f5                	jmp    c0026e7e <__mulsf3+0xa5>
c0026e89:	89 f8                	mov    eax,edi
c0026e8b:	f7 d0                	not    eax
c0026e8d:	84 c0                	test   al,al
c0026e8f:	75 c4                	jne    c0026e55 <__mulsf3+0x7c>
c0026e91:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026e96:	e9 f7 00 00 00       	jmp    c0026f92 <__mulsf3+0x1b9>
c0026e9b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e9e:	c1 e6 08             	shl    esi,0x8
c0026ea1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026ea7:	8d 57 01             	lea    edx,[edi+0x1]
c0026eaa:	80 e2 fe             	and    dl,0xfe
c0026ead:	75 63                	jne    c0026f12 <__mulsf3+0x139>
c0026eaf:	85 c0                	test   eax,eax
c0026eb1:	74 2f                	je     c0026ee2 <__mulsf3+0x109>
c0026eb3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026eb7:	0f 89 d2 00 00 00    	jns    c0026f8f <__mulsf3+0x1b6>
c0026ebd:	52                   	push   edx
c0026ebe:	52                   	push   edx
c0026ebf:	6a 00                	push   0x0
c0026ec1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ec4:	e8 dc 04 00 00       	call   c00273a5 <__eqsf2>
c0026ec9:	83 c4 10             	add    esp,0x10
c0026ecc:	85 c0                	test   eax,eax
c0026ece:	0f 85 bb 00 00 00    	jne    c0026f8f <__mulsf3+0x1b6>
c0026ed4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ed7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026edd:	e9 b0 00 00 00       	jmp    c0026f92 <__mulsf3+0x1b9>
c0026ee2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ee5:	50                   	push   eax
c0026ee6:	50                   	push   eax
c0026ee7:	6a 00                	push   0x0
c0026ee9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eec:	e8 b4 04 00 00       	call   c00273a5 <__eqsf2>
c0026ef1:	83 c4 10             	add    esp,0x10
c0026ef4:	85 c0                	test   eax,eax
c0026ef6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ef9:	75 0c                	jne    c0026f07 <__mulsf3+0x12e>
c0026efb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026eff:	0f 89 8a 00 00 00    	jns    c0026f8f <__mulsf3+0x1b6>
c0026f05:	eb cd                	jmp    c0026ed4 <__mulsf3+0xfb>
c0026f07:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026f0a:	01 f6                	add    esi,esi
c0026f0c:	78 04                	js     c0026f12 <__mulsf3+0x139>
c0026f0e:	89 c3                	mov    ebx,eax
c0026f10:	eb f5                	jmp    c0026f07 <__mulsf3+0x12e>
c0026f12:	89 c8                	mov    eax,ecx
c0026f14:	0d 00 00 00 80       	or     eax,0x80000000
c0026f19:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026f1f:	f7 e6                	mul    esi
c0026f21:	85 c0                	test   eax,eax
c0026f23:	0f 95 c0             	setne  al
c0026f26:	0f b6 c0             	movzx  eax,al
c0026f29:	09 c2                	or     edx,eax
c0026f2b:	78 03                	js     c0026f30 <__mulsf3+0x157>
c0026f2d:	01 d2                	add    edx,edx
c0026f2f:	4b                   	dec    ebx
c0026f30:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026f36:	7f 22                	jg     c0026f5a <__mulsf3+0x181>
c0026f38:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f3e:	85 db                	test   ebx,ebx
c0026f40:	7f 23                	jg     c0026f65 <__mulsf3+0x18c>
c0026f42:	83 fb e9             	cmp    ebx,0xffffffe9
c0026f45:	7c 1a                	jl     c0026f61 <__mulsf3+0x188>
c0026f47:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f4d:	b9 01 00 00 00       	mov    ecx,0x1
c0026f52:	29 d9                	sub    ecx,ebx
c0026f54:	d3 ea                	shr    edx,cl
c0026f56:	31 db                	xor    ebx,ebx
c0026f58:	eb 0b                	jmp    c0026f65 <__mulsf3+0x18c>
c0026f5a:	bb ff 00 00 00       	mov    ebx,0xff
c0026f5f:	eb 02                	jmp    c0026f63 <__mulsf3+0x18a>
c0026f61:	31 db                	xor    ebx,ebx
c0026f63:	31 d2                	xor    edx,edx
c0026f65:	89 d0                	mov    eax,edx
c0026f67:	c1 e8 08             	shr    eax,0x8
c0026f6a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f6d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f73:	09 fb                	or     ebx,edi
c0026f75:	c1 e3 17             	shl    ebx,0x17
c0026f78:	09 c3                	or     ebx,eax
c0026f7a:	f6 c2 7f             	test   dl,0x7f
c0026f7d:	0f 95 c1             	setne  cl
c0026f80:	09 c8                	or     eax,ecx
c0026f82:	83 e0 01             	and    eax,0x1
c0026f85:	c1 ea 07             	shr    edx,0x7
c0026f88:	21 c2                	and    edx,eax
c0026f8a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026f8d:	eb 03                	jmp    c0026f92 <__mulsf3+0x1b9>
c0026f8f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026f92:	89 f0                	mov    eax,esi
c0026f94:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f97:	5b                   	pop    ebx
c0026f98:	5e                   	pop    esi
c0026f99:	5f                   	pop    edi
c0026f9a:	5d                   	pop    ebp
c0026f9b:	c3                   	ret    

c0026f9c <__divsf3>:
c0026f9c:	55                   	push   ebp
c0026f9d:	89 e5                	mov    ebp,esp
c0026f9f:	57                   	push   edi
c0026fa0:	56                   	push   esi
c0026fa1:	53                   	push   ebx
c0026fa2:	83 ec 1c             	sub    esp,0x1c
c0026fa5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026fa8:	89 d8                	mov    eax,ebx
c0026faa:	89 d9                	mov    ecx,ebx
c0026fac:	c1 f9 17             	sar    ecx,0x17
c0026faf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fb2:	c1 e0 08             	shl    eax,0x8
c0026fb5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fba:	89 c1                	mov    ecx,eax
c0026fbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fbf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fc2:	89 c7                	mov    edi,eax
c0026fc4:	c1 ff 17             	sar    edi,0x17
c0026fc7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fcb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fce:	89 f8                	mov    eax,edi
c0026fd0:	0f b6 c0             	movzx  eax,al
c0026fd3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026fd6:	29 c6                	sub    esi,eax
c0026fd8:	83 c6 7f             	add    esi,0x7f
c0026fdb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fde:	42                   	inc    edx
c0026fdf:	80 e2 fe             	and    dl,0xfe
c0026fe2:	0f 85 9c 00 00 00    	jne    c0027084 <__divsf3+0xe8>
c0026fe8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fec:	74 33                	je     c0027021 <__divsf3+0x85>
c0026fee:	85 c9                	test   ecx,ecx
c0026ff0:	0f 85 c7 01 00 00    	jne    c00271bd <__divsf3+0x221>
c0026ff6:	8d 57 01             	lea    edx,[edi+0x1]
c0026ff9:	80 e2 fe             	and    dl,0xfe
c0026ffc:	75 2f                	jne    c002702d <__divsf3+0x91>
c0026ffe:	85 c0                	test   eax,eax
c0027000:	74 2b                	je     c002702d <__divsf3+0x91>
c0027002:	51                   	push   ecx
c0027003:	51                   	push   ecx
c0027004:	6a 00                	push   0x0
c0027006:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027009:	e8 d2 03 00 00       	call   c00273e0 <__nesf2>
c002700e:	83 c4 10             	add    esp,0x10
c0027011:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027014:	85 c0                	test   eax,eax
c0027016:	0f 85 a1 01 00 00    	jne    c00271bd <__divsf3+0x221>
c002701c:	e9 92 01 00 00       	jmp    c00271b3 <__divsf3+0x217>
c0027021:	85 c9                	test   ecx,ecx
c0027023:	75 1b                	jne    c0027040 <__divsf3+0xa4>
c0027025:	8d 57 01             	lea    edx,[edi+0x1]
c0027028:	80 e2 fe             	and    dl,0xfe
c002702b:	74 1e                	je     c002704b <__divsf3+0xaf>
c002702d:	85 ff                	test   edi,edi
c002702f:	0f 89 88 01 00 00    	jns    c00271bd <__divsf3+0x221>
c0027035:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002703b:	e9 7d 01 00 00       	jmp    c00271bd <__divsf3+0x221>
c0027040:	8d 56 ff             	lea    edx,[esi-0x1]
c0027043:	01 c9                	add    ecx,ecx
c0027045:	78 3d                	js     c0027084 <__divsf3+0xe8>
c0027047:	89 d6                	mov    esi,edx
c0027049:	eb f5                	jmp    c0027040 <__divsf3+0xa4>
c002704b:	85 c0                	test   eax,eax
c002704d:	b8 00 00 00 00       	mov    eax,0x0
c0027052:	74 18                	je     c002706c <__divsf3+0xd0>
c0027054:	52                   	push   edx
c0027055:	52                   	push   edx
c0027056:	50                   	push   eax
c0027057:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002705a:	e8 81 03 00 00       	call   c00273e0 <__nesf2>
c002705f:	83 c4 10             	add    esp,0x10
c0027062:	85 c0                	test   eax,eax
c0027064:	0f 85 50 01 00 00    	jne    c00271ba <__divsf3+0x21e>
c002706a:	eb c1                	jmp    c002702d <__divsf3+0x91>
c002706c:	56                   	push   esi
c002706d:	56                   	push   esi
c002706e:	50                   	push   eax
c002706f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027072:	e8 69 03 00 00       	call   c00273e0 <__nesf2>
c0027077:	83 c4 10             	add    esp,0x10
c002707a:	85 c0                	test   eax,eax
c002707c:	0f 84 31 01 00 00    	je     c00271b3 <__divsf3+0x217>
c0027082:	eb a9                	jmp    c002702d <__divsf3+0x91>
c0027084:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027087:	c1 e3 08             	shl    ebx,0x8
c002708a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027090:	8d 57 01             	lea    edx,[edi+0x1]
c0027093:	80 e2 fe             	and    dl,0xfe
c0027096:	75 71                	jne    c0027109 <__divsf3+0x16d>
c0027098:	85 c0                	test   eax,eax
c002709a:	ba 00 00 00 00       	mov    edx,0x0
c002709f:	74 2f                	je     c00270d0 <__divsf3+0x134>
c00270a1:	51                   	push   ecx
c00270a2:	51                   	push   ecx
c00270a3:	52                   	push   edx
c00270a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270a7:	e8 f9 02 00 00       	call   c00273a5 <__eqsf2>
c00270ac:	83 c4 10             	add    esp,0x10
c00270af:	85 c0                	test   eax,eax
c00270b1:	0f 85 03 01 00 00    	jne    c00271ba <__divsf3+0x21e>
c00270b7:	31 d2                	xor    edx,edx
c00270b9:	89 d3                	mov    ebx,edx
c00270bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00270be:	31 f8                	xor    eax,edi
c00270c0:	0f 89 f7 00 00 00    	jns    c00271bd <__divsf3+0x221>
c00270c6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00270cb:	e9 ed 00 00 00       	jmp    c00271bd <__divsf3+0x221>
c00270d0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270d3:	50                   	push   eax
c00270d4:	50                   	push   eax
c00270d5:	52                   	push   edx
c00270d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270d9:	e8 c7 02 00 00       	call   c00273a5 <__eqsf2>
c00270de:	83 c4 10             	add    esp,0x10
c00270e1:	85 c0                	test   eax,eax
c00270e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270e6:	75 16                	jne    c00270fe <__divsf3+0x162>
c00270e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00270eb:	31 fb                	xor    ebx,edi
c00270ed:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00270f3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00270f9:	e9 bf 00 00 00       	jmp    c00271bd <__divsf3+0x221>
c00270fe:	8d 46 01             	lea    eax,[esi+0x1]
c0027101:	01 db                	add    ebx,ebx
c0027103:	78 04                	js     c0027109 <__divsf3+0x16d>
c0027105:	89 c6                	mov    esi,eax
c0027107:	eb f5                	jmp    c00270fe <__divsf3+0x162>
c0027109:	89 c8                	mov    eax,ecx
c002710b:	0d 00 00 00 80       	or     eax,0x80000000
c0027110:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027116:	31 d2                	xor    edx,edx
c0027118:	39 d8                	cmp    eax,ebx
c002711a:	72 07                	jb     c0027123 <__divsf3+0x187>
c002711c:	29 d8                	sub    eax,ebx
c002711e:	ba 01 00 00 00       	mov    edx,0x1
c0027123:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002712a:	01 d2                	add    edx,edx
c002712c:	89 c1                	mov    ecx,eax
c002712e:	01 c0                	add    eax,eax
c0027130:	85 c9                	test   ecx,ecx
c0027132:	78 04                	js     c0027138 <__divsf3+0x19c>
c0027134:	39 c3                	cmp    ebx,eax
c0027136:	77 05                	ja     c002713d <__divsf3+0x1a1>
c0027138:	29 d8                	sub    eax,ebx
c002713a:	83 ca 01             	or     edx,0x1
c002713d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027140:	75 e8                	jne    c002712a <__divsf3+0x18e>
c0027142:	85 c0                	test   eax,eax
c0027144:	0f 95 c0             	setne  al
c0027147:	0f b6 c0             	movzx  eax,al
c002714a:	c1 e2 06             	shl    edx,0x6
c002714d:	09 c2                	or     edx,eax
c002714f:	78 03                	js     c0027154 <__divsf3+0x1b8>
c0027151:	01 d2                	add    edx,edx
c0027153:	4e                   	dec    esi
c0027154:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002715a:	7f 22                	jg     c002717e <__divsf3+0x1e2>
c002715c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027162:	85 f6                	test   esi,esi
c0027164:	7f 23                	jg     c0027189 <__divsf3+0x1ed>
c0027166:	83 fe e9             	cmp    esi,0xffffffe9
c0027169:	7c 1a                	jl     c0027185 <__divsf3+0x1e9>
c002716b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027171:	b9 01 00 00 00       	mov    ecx,0x1
c0027176:	29 f1                	sub    ecx,esi
c0027178:	d3 ea                	shr    edx,cl
c002717a:	31 f6                	xor    esi,esi
c002717c:	eb 0b                	jmp    c0027189 <__divsf3+0x1ed>
c002717e:	be ff 00 00 00       	mov    esi,0xff
c0027183:	eb 02                	jmp    c0027187 <__divsf3+0x1eb>
c0027185:	31 f6                	xor    esi,esi
c0027187:	31 d2                	xor    edx,edx
c0027189:	89 d0                	mov    eax,edx
c002718b:	c1 e8 08             	shr    eax,0x8
c002718e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027191:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027197:	09 fe                	or     esi,edi
c0027199:	c1 e6 17             	shl    esi,0x17
c002719c:	09 c6                	or     esi,eax
c002719e:	f6 c2 7f             	test   dl,0x7f
c00271a1:	0f 95 c1             	setne  cl
c00271a4:	09 c8                	or     eax,ecx
c00271a6:	83 e0 01             	and    eax,0x1
c00271a9:	c1 ea 07             	shr    edx,0x7
c00271ac:	21 c2                	and    edx,eax
c00271ae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00271b1:	eb 0a                	jmp    c00271bd <__divsf3+0x221>
c00271b3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00271b8:	eb 03                	jmp    c00271bd <__divsf3+0x221>
c00271ba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271bd:	89 d8                	mov    eax,ebx
c00271bf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271c2:	5b                   	pop    ebx
c00271c3:	5e                   	pop    esi
c00271c4:	5f                   	pop    edi
c00271c5:	5d                   	pop    ebp
c00271c6:	c3                   	ret    

c00271c7 <__floatsisf>:
c00271c7:	55                   	push   ebp
c00271c8:	89 e5                	mov    ebp,esp
c00271ca:	53                   	push   ebx
c00271cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271ce:	85 d2                	test   edx,edx
c00271d0:	7e 2b                	jle    c00271fd <__floatsisf+0x36>
c00271d2:	0f bd ca             	bsr    ecx,edx
c00271d5:	83 f1 1f             	xor    ecx,0x1f
c00271d8:	d3 e2                	shl    edx,cl
c00271da:	89 d0                	mov    eax,edx
c00271dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271e1:	89 c3                	mov    ebx,eax
c00271e3:	c1 eb 08             	shr    ebx,0x8
c00271e6:	80 e2 7f             	and    dl,0x7f
c00271e9:	0f 95 c2             	setne  dl
c00271ec:	09 da                	or     edx,ebx
c00271ee:	83 e2 01             	and    edx,0x1
c00271f1:	c1 e8 07             	shr    eax,0x7
c00271f4:	21 c2                	and    edx,eax
c00271f6:	b8 9e 00 00 00       	mov    eax,0x9e
c00271fb:	eb 32                	jmp    c002722f <__floatsisf+0x68>
c00271fd:	b8 00 00 00 00       	mov    eax,0x0
c0027202:	74 34                	je     c0027238 <__floatsisf+0x71>
c0027204:	f7 da                	neg    edx
c0027206:	0f bd ca             	bsr    ecx,edx
c0027209:	83 f1 1f             	xor    ecx,0x1f
c002720c:	d3 e2                	shl    edx,cl
c002720e:	89 d0                	mov    eax,edx
c0027210:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027215:	89 c3                	mov    ebx,eax
c0027217:	c1 eb 08             	shr    ebx,0x8
c002721a:	80 e2 7f             	and    dl,0x7f
c002721d:	0f 95 c2             	setne  dl
c0027220:	09 da                	or     edx,ebx
c0027222:	83 e2 01             	and    edx,0x1
c0027225:	c1 e8 07             	shr    eax,0x7
c0027228:	21 c2                	and    edx,eax
c002722a:	b8 9e 01 00 00       	mov    eax,0x19e
c002722f:	29 c8                	sub    eax,ecx
c0027231:	c1 e0 17             	shl    eax,0x17
c0027234:	09 d8                	or     eax,ebx
c0027236:	01 d0                	add    eax,edx
c0027238:	5b                   	pop    ebx
c0027239:	5d                   	pop    ebp
c002723a:	c3                   	ret    

c002723b <__floatunsisf>:
c002723b:	55                   	push   ebp
c002723c:	89 e5                	mov    ebp,esp
c002723e:	53                   	push   ebx
c002723f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027242:	31 c0                	xor    eax,eax
c0027244:	85 d2                	test   edx,edx
c0027246:	74 32                	je     c002727a <__floatunsisf+0x3f>
c0027248:	0f bd ca             	bsr    ecx,edx
c002724b:	83 f1 1f             	xor    ecx,0x1f
c002724e:	d3 e2                	shl    edx,cl
c0027250:	89 d0                	mov    eax,edx
c0027252:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027257:	89 c3                	mov    ebx,eax
c0027259:	c1 eb 08             	shr    ebx,0x8
c002725c:	80 e2 7f             	and    dl,0x7f
c002725f:	0f 95 c2             	setne  dl
c0027262:	09 da                	or     edx,ebx
c0027264:	83 e2 01             	and    edx,0x1
c0027267:	c1 e8 07             	shr    eax,0x7
c002726a:	21 c2                	and    edx,eax
c002726c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027271:	29 c8                	sub    eax,ecx
c0027273:	c1 e0 17             	shl    eax,0x17
c0027276:	09 d8                	or     eax,ebx
c0027278:	01 d0                	add    eax,edx
c002727a:	5b                   	pop    ebx
c002727b:	5d                   	pop    ebp
c002727c:	c3                   	ret    

c002727d <__fixsfsi>:
c002727d:	55                   	push   ebp
c002727e:	89 e5                	mov    ebp,esp
c0027280:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027283:	89 d1                	mov    ecx,edx
c0027285:	c1 e1 08             	shl    ecx,0x8
c0027288:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002728e:	c1 fa 17             	sar    edx,0x17
c0027291:	78 1c                	js     c00272af <__fixsfsi+0x32>
c0027293:	83 ea 7f             	sub    edx,0x7f
c0027296:	31 c0                	xor    eax,eax
c0027298:	83 fa 1e             	cmp    edx,0x1e
c002729b:	77 40                	ja     c00272dd <__fixsfsi+0x60>
c002729d:	89 c8                	mov    eax,ecx
c002729f:	0d 00 00 00 80       	or     eax,0x80000000
c00272a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272a9:	29 d1                	sub    ecx,edx
c00272ab:	d3 e8                	shr    eax,cl
c00272ad:	eb 2e                	jmp    c00272dd <__fixsfsi+0x60>
c00272af:	31 c0                	xor    eax,eax
c00272b1:	81 c2 81 00 00 00    	add    edx,0x81
c00272b7:	78 24                	js     c00272dd <__fixsfsi+0x60>
c00272b9:	83 fa 1e             	cmp    edx,0x1e
c00272bc:	7e 09                	jle    c00272c7 <__fixsfsi+0x4a>
c00272be:	83 fa 1f             	cmp    edx,0x1f
c00272c1:	75 18                	jne    c00272db <__fixsfsi+0x5e>
c00272c3:	85 c9                	test   ecx,ecx
c00272c5:	75 14                	jne    c00272db <__fixsfsi+0x5e>
c00272c7:	89 c8                	mov    eax,ecx
c00272c9:	0d 00 00 00 80       	or     eax,0x80000000
c00272ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272d3:	29 d1                	sub    ecx,edx
c00272d5:	d3 e8                	shr    eax,cl
c00272d7:	f7 d8                	neg    eax
c00272d9:	eb 02                	jmp    c00272dd <__fixsfsi+0x60>
c00272db:	31 c0                	xor    eax,eax
c00272dd:	5d                   	pop    ebp
c00272de:	c3                   	ret    

c00272df <__fixunssfsi>:
c00272df:	55                   	push   ebp
c00272e0:	89 e5                	mov    ebp,esp
c00272e2:	53                   	push   ebx
c00272e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272e6:	89 d3                	mov    ebx,edx
c00272e8:	c1 fb 17             	sar    ebx,0x17
c00272eb:	83 eb 7f             	sub    ebx,0x7f
c00272ee:	31 c0                	xor    eax,eax
c00272f0:	83 fb 1f             	cmp    ebx,0x1f
c00272f3:	77 18                	ja     c002730d <__fixunssfsi+0x2e>
c00272f5:	89 d0                	mov    eax,edx
c00272f7:	c1 e0 08             	shl    eax,0x8
c00272fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272ff:	0d 00 00 00 80       	or     eax,0x80000000
c0027304:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027309:	29 d9                	sub    ecx,ebx
c002730b:	d3 e8                	shr    eax,cl
c002730d:	5b                   	pop    ebx
c002730e:	5d                   	pop    ebp
c002730f:	c3                   	ret    

c0027310 <__cmpsf2>:
c0027310:	55                   	push   ebp
c0027311:	89 e5                	mov    ebp,esp
c0027313:	57                   	push   edi
c0027314:	56                   	push   esi
c0027315:	53                   	push   ebx
c0027316:	83 ec 24             	sub    esp,0x24
c0027319:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002731c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002731f:	e8 4f 10 00 00       	call   c0028373 <__truncdfsf2>
c0027324:	5a                   	pop    edx
c0027325:	59                   	pop    ecx
c0027326:	89 c3                	mov    ebx,eax
c0027328:	c1 e8 17             	shr    eax,0x17
c002732b:	0f b6 f0             	movzx  esi,al
c002732e:	89 d8                	mov    eax,ebx
c0027330:	c1 e8 1f             	shr    eax,0x1f
c0027333:	31 c6                	xor    esi,eax
c0027335:	c1 e3 08             	shl    ebx,0x8
c0027338:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002733b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002733e:	e8 30 10 00 00       	call   c0028373 <__truncdfsf2>
c0027343:	83 c4 10             	add    esp,0x10
c0027346:	89 c1                	mov    ecx,eax
c0027348:	c1 e9 17             	shr    ecx,0x17
c002734b:	0f b6 c9             	movzx  ecx,cl
c002734e:	89 c7                	mov    edi,eax
c0027350:	c1 ef 1f             	shr    edi,0x1f
c0027353:	89 ca                	mov    edx,ecx
c0027355:	31 fa                	xor    edx,edi
c0027357:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002735a:	c1 e0 08             	shl    eax,0x8
c002735d:	89 c2                	mov    edx,eax
c002735f:	89 d8                	mov    eax,ebx
c0027361:	09 d0                	or     eax,edx
c0027363:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027368:	09 f0                	or     eax,esi
c002736a:	75 08                	jne    c0027374 <__cmpsf2+0x64>
c002736c:	31 c0                	xor    eax,eax
c002736e:	39 f9                	cmp    ecx,edi
c0027370:	75 0c                	jne    c002737e <__cmpsf2+0x6e>
c0027372:	eb 29                	jmp    c002739d <__cmpsf2+0x8d>
c0027374:	b8 01 00 00 00       	mov    eax,0x1
c0027379:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002737c:	7f 1f                	jg     c002739d <__cmpsf2+0x8d>
c002737e:	83 c8 ff             	or     eax,0xffffffff
c0027381:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027384:	7c 17                	jl     c002739d <__cmpsf2+0x8d>
c0027386:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002738c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027392:	b8 01 00 00 00       	mov    eax,0x1
c0027397:	39 d3                	cmp    ebx,edx
c0027399:	77 02                	ja     c002739d <__cmpsf2+0x8d>
c002739b:	19 c0                	sbb    eax,eax
c002739d:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273a0:	5b                   	pop    ebx
c00273a1:	5e                   	pop    esi
c00273a2:	5f                   	pop    edi
c00273a3:	5d                   	pop    ebp
c00273a4:	c3                   	ret    

c00273a5 <__eqsf2>:
c00273a5:	55                   	push   ebp
c00273a6:	89 e5                	mov    ebp,esp
c00273a8:	83 ec 24             	sub    esp,0x24
c00273ab:	6a 01                	push   0x1
c00273ad:	83 ec 0c             	sub    esp,0xc
c00273b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273b3:	e8 df 10 00 00       	call   c0028497 <__extendsfdf2>
c00273b8:	83 c4 10             	add    esp,0x10
c00273bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273c1:	52                   	push   edx
c00273c2:	50                   	push   eax
c00273c3:	50                   	push   eax
c00273c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273c7:	e8 cb 10 00 00       	call   c0028497 <__extendsfdf2>
c00273cc:	59                   	pop    ecx
c00273cd:	59                   	pop    ecx
c00273ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273d4:	52                   	push   edx
c00273d5:	50                   	push   eax
c00273d6:	e8 35 ff ff ff       	call   c0027310 <__cmpsf2>
c00273db:	83 c4 20             	add    esp,0x20
c00273de:	c9                   	leave  
c00273df:	c3                   	ret    

c00273e0 <__nesf2>:
c00273e0:	eb c3                	jmp    c00273a5 <__eqsf2>

c00273e2 <__gtsf2>:
c00273e2:	55                   	push   ebp
c00273e3:	89 e5                	mov    ebp,esp
c00273e5:	83 ec 24             	sub    esp,0x24
c00273e8:	6a ff                	push   0xffffffff
c00273ea:	83 ec 0c             	sub    esp,0xc
c00273ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273f0:	e8 a2 10 00 00       	call   c0028497 <__extendsfdf2>
c00273f5:	83 c4 10             	add    esp,0x10
c00273f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273fe:	52                   	push   edx
c00273ff:	50                   	push   eax
c0027400:	50                   	push   eax
c0027401:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027404:	e8 8e 10 00 00       	call   c0028497 <__extendsfdf2>
c0027409:	59                   	pop    ecx
c002740a:	59                   	pop    ecx
c002740b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002740e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027411:	52                   	push   edx
c0027412:	50                   	push   eax
c0027413:	e8 f8 fe ff ff       	call   c0027310 <__cmpsf2>
c0027418:	83 c4 20             	add    esp,0x20
c002741b:	c9                   	leave  
c002741c:	c3                   	ret    

c002741d <__gesf2>:
c002741d:	eb c3                	jmp    c00273e2 <__gtsf2>

c002741f <__ltsf2>:
c002741f:	eb 84                	jmp    c00273a5 <__eqsf2>

c0027421 <__lesf2>:
c0027421:	eb 82                	jmp    c00273a5 <__eqsf2>

c0027423 <__adddf3>:
c0027423:	55                   	push   ebp
c0027424:	89 e5                	mov    ebp,esp
c0027426:	57                   	push   edi
c0027427:	56                   	push   esi
c0027428:	53                   	push   ebx
c0027429:	83 ec 24             	sub    esp,0x24
c002742c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002742f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027432:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027435:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027438:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002743b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002743e:	89 c8                	mov    eax,ecx
c0027440:	89 ce                	mov    esi,ecx
c0027442:	c1 fe 14             	sar    esi,0x14
c0027445:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027448:	89 fb                	mov    ebx,edi
c002744a:	89 fa                	mov    edx,edi
c002744c:	c1 e2 0b             	shl    edx,0xb
c002744f:	c1 e0 0b             	shl    eax,0xb
c0027452:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027457:	c1 eb 15             	shr    ebx,0x15
c002745a:	09 d8                	or     eax,ebx
c002745c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002745f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027462:	c1 fe 14             	sar    esi,0x14
c0027465:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027468:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002746b:	89 f3                	mov    ebx,esi
c002746d:	c1 e3 0b             	shl    ebx,0xb
c0027470:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027473:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027476:	c1 e3 0b             	shl    ebx,0xb
c0027479:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002747f:	c1 ee 15             	shr    esi,0x15
c0027482:	09 f3                	or     ebx,esi
c0027484:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027487:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002748a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002748d:	0f 88 5f 02 00 00    	js     c00276f2 <__adddf3+0x2cf>
c0027493:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027496:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027499:	85 db                	test   ebx,ebx
c002749b:	0f 8e c7 00 00 00    	jle    c0027568 <__adddf3+0x145>
c00274a1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00274a8:	75 1a                	jne    c00274c4 <__adddf3+0xa1>
c00274aa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274ad:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274b0:	0f 84 b2 05 00 00    	je     c0027a68 <__adddf3+0x645>
c00274b6:	4b                   	dec    ebx
c00274b7:	75 23                	jne    c00274dc <__adddf3+0xb9>
c00274b9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274bc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274bf:	e9 99 00 00 00       	jmp    c002755d <__adddf3+0x13a>
c00274c4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274c7:	f7 d6                	not    esi
c00274c9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274cf:	0f 84 93 05 00 00    	je     c0027a68 <__adddf3+0x645>
c00274d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274dc:	83 fb 1f             	cmp    ebx,0x1f
c00274df:	7e 42                	jle    c0027523 <__adddf3+0x100>
c00274e1:	83 fb 3f             	cmp    ebx,0x3f
c00274e4:	0f 8f 7e 05 00 00    	jg     c0027a68 <__adddf3+0x645>
c00274ea:	83 e3 1f             	and    ebx,0x1f
c00274ed:	89 d9                	mov    ecx,ebx
c00274ef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274f2:	d3 ef                	shr    edi,cl
c00274f4:	31 db                	xor    ebx,ebx
c00274f6:	85 c9                	test   ecx,ecx
c00274f8:	74 15                	je     c002750f <__adddf3+0xec>
c00274fa:	be 20 00 00 00       	mov    esi,0x20
c00274ff:	29 ce                	sub    esi,ecx
c0027501:	89 f1                	mov    ecx,esi
c0027503:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027506:	d3 e6                	shl    esi,cl
c0027508:	31 db                	xor    ebx,ebx
c002750a:	85 f6                	test   esi,esi
c002750c:	0f 95 c3             	setne  bl
c002750f:	31 c9                	xor    ecx,ecx
c0027511:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027515:	0f 95 c1             	setne  cl
c0027518:	09 cf                	or     edi,ecx
c002751a:	09 fb                	or     ebx,edi
c002751c:	01 da                	add    edx,ebx
c002751e:	83 d0 00             	adc    eax,0x0
c0027521:	eb 3a                	jmp    c002755d <__adddf3+0x13a>
c0027523:	bf 20 00 00 00       	mov    edi,0x20
c0027528:	29 df                	sub    edi,ebx
c002752a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002752d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027530:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027533:	d3 e6                	shl    esi,cl
c0027535:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027538:	88 d9                	mov    cl,bl
c002753a:	d3 ef                	shr    edi,cl
c002753c:	09 fe                	or     esi,edi
c002753e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027541:	88 d9                	mov    cl,bl
c0027543:	d3 ef                	shr    edi,cl
c0027545:	89 fb                	mov    ebx,edi
c0027547:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002754a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002754d:	d3 e7                	shl    edi,cl
c002754f:	85 ff                	test   edi,edi
c0027551:	0f 95 c1             	setne  cl
c0027554:	0f b6 c9             	movzx  ecx,cl
c0027557:	09 ce                	or     esi,ecx
c0027559:	01 f2                	add    edx,esi
c002755b:	11 d8                	adc    eax,ebx
c002755d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027560:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027563:	e9 52 01 00 00       	jmp    c00276ba <__adddf3+0x297>
c0027568:	0f 84 d5 00 00 00    	je     c0027643 <__adddf3+0x220>
c002756e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027571:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027574:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027577:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002757a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027581:	75 20                	jne    c00275a3 <__adddf3+0x180>
c0027583:	89 d6                	mov    esi,edx
c0027585:	09 c6                	or     esi,eax
c0027587:	0f 84 db 04 00 00    	je     c0027a68 <__adddf3+0x645>
c002758d:	4b                   	dec    ebx
c002758e:	75 29                	jne    c00275b9 <__adddf3+0x196>
c0027590:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027593:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027596:	01 d1                	add    ecx,edx
c0027598:	11 c6                	adc    esi,eax
c002759a:	89 f0                	mov    eax,esi
c002759c:	89 ca                	mov    edx,ecx
c002759e:	e9 17 01 00 00       	jmp    c00276ba <__adddf3+0x297>
c00275a3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00275a6:	f7 d6                	not    esi
c00275a8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275ae:	0f 84 b4 04 00 00    	je     c0027a68 <__adddf3+0x645>
c00275b4:	0d 00 00 00 80       	or     eax,0x80000000
c00275b9:	83 fb 1f             	cmp    ebx,0x1f
c00275bc:	7e 48                	jle    c0027606 <__adddf3+0x1e3>
c00275be:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275c4:	83 fb 3f             	cmp    ebx,0x3f
c00275c7:	0f 8f 9b 04 00 00    	jg     c0027a68 <__adddf3+0x645>
c00275cd:	83 e3 1f             	and    ebx,0x1f
c00275d0:	89 d9                	mov    ecx,ebx
c00275d2:	89 c7                	mov    edi,eax
c00275d4:	d3 ef                	shr    edi,cl
c00275d6:	31 db                	xor    ebx,ebx
c00275d8:	85 c9                	test   ecx,ecx
c00275da:	74 12                	je     c00275ee <__adddf3+0x1cb>
c00275dc:	be 20 00 00 00       	mov    esi,0x20
c00275e1:	29 ce                	sub    esi,ecx
c00275e3:	89 f1                	mov    ecx,esi
c00275e5:	d3 e0                	shl    eax,cl
c00275e7:	31 db                	xor    ebx,ebx
c00275e9:	85 c0                	test   eax,eax
c00275eb:	0f 95 c3             	setne  bl
c00275ee:	31 c0                	xor    eax,eax
c00275f0:	85 d2                	test   edx,edx
c00275f2:	0f 95 c0             	setne  al
c00275f5:	09 c7                	or     edi,eax
c00275f7:	09 fb                	or     ebx,edi
c00275f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275ff:	01 da                	add    edx,ebx
c0027601:	83 d6 00             	adc    esi,0x0
c0027604:	eb 39                	jmp    c002763f <__adddf3+0x21c>
c0027606:	be 20 00 00 00       	mov    esi,0x20
c002760b:	29 de                	sub    esi,ebx
c002760d:	89 c7                	mov    edi,eax
c002760f:	89 f1                	mov    ecx,esi
c0027611:	d3 e7                	shl    edi,cl
c0027613:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027616:	89 d7                	mov    edi,edx
c0027618:	88 d9                	mov    cl,bl
c002761a:	d3 ef                	shr    edi,cl
c002761c:	89 f9                	mov    ecx,edi
c002761e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027621:	09 cf                	or     edi,ecx
c0027623:	88 d9                	mov    cl,bl
c0027625:	d3 e8                	shr    eax,cl
c0027627:	89 f1                	mov    ecx,esi
c0027629:	d3 e2                	shl    edx,cl
c002762b:	85 d2                	test   edx,edx
c002762d:	0f 95 c2             	setne  dl
c0027630:	0f b6 d2             	movzx  edx,dl
c0027633:	09 d7                	or     edi,edx
c0027635:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027638:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002763b:	01 fa                	add    edx,edi
c002763d:	11 c6                	adc    esi,eax
c002763f:	89 f0                	mov    eax,esi
c0027641:	eb 77                	jmp    c00276ba <__adddf3+0x297>
c0027643:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027646:	46                   	inc    esi
c0027647:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002764a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027650:	75 41                	jne    c0027693 <__adddf3+0x270>
c0027652:	89 d3                	mov    ebx,edx
c0027654:	09 c3                	or     ebx,eax
c0027656:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002765d:	75 27                	jne    c0027686 <__adddf3+0x263>
c002765f:	85 db                	test   ebx,ebx
c0027661:	0f 84 fb 03 00 00    	je     c0027a62 <__adddf3+0x63f>
c0027667:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002766a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002766d:	0f 84 f5 03 00 00    	je     c0027a68 <__adddf3+0x645>
c0027673:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027676:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027679:	85 c0                	test   eax,eax
c002767b:	0f 89 91 03 00 00    	jns    c0027a12 <__adddf3+0x5ef>
c0027681:	e9 85 03 00 00       	jmp    c0027a0b <__adddf3+0x5e8>
c0027686:	85 db                	test   ebx,ebx
c0027688:	0f 85 da 03 00 00    	jne    c0027a68 <__adddf3+0x645>
c002768e:	e9 cf 03 00 00       	jmp    c0027a62 <__adddf3+0x63f>
c0027693:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027696:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027699:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002769c:	f7 d1                	not    ecx
c002769e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276a4:	0f 84 70 03 00 00    	je     c0027a1a <__adddf3+0x5f7>
c00276aa:	d1 ea                	shr    edx,1
c00276ac:	89 c1                	mov    ecx,eax
c00276ae:	c1 e1 1f             	shl    ecx,0x1f
c00276b1:	09 ca                	or     edx,ecx
c00276b3:	d1 e8                	shr    eax,1
c00276b5:	e9 6f 03 00 00       	jmp    c0027a29 <__adddf3+0x606>
c00276ba:	85 c0                	test   eax,eax
c00276bc:	0f 89 67 03 00 00    	jns    c0027a29 <__adddf3+0x606>
c00276c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00276c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276c8:	f7 d1                	not    ecx
c00276ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276d0:	0f 84 44 03 00 00    	je     c0027a1a <__adddf3+0x5f7>
c00276d6:	89 d1                	mov    ecx,edx
c00276d8:	d1 e9                	shr    ecx,1
c00276da:	83 e2 01             	and    edx,0x1
c00276dd:	09 ca                	or     edx,ecx
c00276df:	89 c1                	mov    ecx,eax
c00276e1:	c1 e1 1f             	shl    ecx,0x1f
c00276e4:	09 ca                	or     edx,ecx
c00276e6:	d1 e8                	shr    eax,1
c00276e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00276ed:	e9 37 03 00 00       	jmp    c0027a29 <__adddf3+0x606>
c00276f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00276fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027701:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027707:	29 de                	sub    esi,ebx
c0027709:	85 f6                	test   esi,esi
c002770b:	0f 8e bd 00 00 00    	jle    c00277ce <__adddf3+0x3ab>
c0027711:	85 db                	test   ebx,ebx
c0027713:	75 17                	jne    c002772c <__adddf3+0x309>
c0027715:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027718:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002771b:	0f 84 47 03 00 00    	je     c0027a68 <__adddf3+0x645>
c0027721:	4e                   	dec    esi
c0027722:	75 20                	jne    c0027744 <__adddf3+0x321>
c0027724:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027727:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002772a:	eb 5b                	jmp    c0027787 <__adddf3+0x364>
c002772c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002772f:	f7 d3                	not    ebx
c0027731:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027737:	0f 84 2b 03 00 00    	je     c0027a68 <__adddf3+0x645>
c002773d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027744:	83 fe 1f             	cmp    esi,0x1f
c0027747:	7e 49                	jle    c0027792 <__adddf3+0x36f>
c0027749:	83 fe 3f             	cmp    esi,0x3f
c002774c:	0f 8f 16 03 00 00    	jg     c0027a68 <__adddf3+0x645>
c0027752:	83 e6 1f             	and    esi,0x1f
c0027755:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027758:	89 f1                	mov    ecx,esi
c002775a:	d3 ef                	shr    edi,cl
c002775c:	31 db                	xor    ebx,ebx
c002775e:	85 f6                	test   esi,esi
c0027760:	74 13                	je     c0027775 <__adddf3+0x352>
c0027762:	b9 20 00 00 00       	mov    ecx,0x20
c0027767:	29 f1                	sub    ecx,esi
c0027769:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002776c:	d3 e6                	shl    esi,cl
c002776e:	31 db                	xor    ebx,ebx
c0027770:	85 f6                	test   esi,esi
c0027772:	0f 95 c3             	setne  bl
c0027775:	31 c9                	xor    ecx,ecx
c0027777:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002777b:	0f 95 c1             	setne  cl
c002777e:	09 cf                	or     edi,ecx
c0027780:	09 fb                	or     ebx,edi
c0027782:	29 da                	sub    edx,ebx
c0027784:	83 d8 00             	sbb    eax,0x0
c0027787:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002778a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002778d:	e9 aa 01 00 00       	jmp    c002793c <__adddf3+0x519>
c0027792:	bf 20 00 00 00       	mov    edi,0x20
c0027797:	29 f7                	sub    edi,esi
c0027799:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002779c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002779f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277a2:	d3 e3                	shl    ebx,cl
c00277a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277a7:	89 f1                	mov    ecx,esi
c00277a9:	d3 ef                	shr    edi,cl
c00277ab:	09 fb                	or     ebx,edi
c00277ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277b0:	89 f1                	mov    ecx,esi
c00277b2:	d3 ef                	shr    edi,cl
c00277b4:	89 fe                	mov    esi,edi
c00277b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277bc:	d3 e7                	shl    edi,cl
c00277be:	85 ff                	test   edi,edi
c00277c0:	0f 95 c1             	setne  cl
c00277c3:	0f b6 c9             	movzx  ecx,cl
c00277c6:	09 cb                	or     ebx,ecx
c00277c8:	29 da                	sub    edx,ebx
c00277ca:	19 f0                	sbb    eax,esi
c00277cc:	eb b9                	jmp    c0027787 <__adddf3+0x364>
c00277ce:	0f 84 cd 00 00 00    	je     c00278a1 <__adddf3+0x47e>
c00277d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00277d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277e1:	75 1b                	jne    c00277fe <__adddf3+0x3db>
c00277e3:	89 d6                	mov    esi,edx
c00277e5:	09 c6                	or     esi,eax
c00277e7:	0f 84 7b 02 00 00    	je     c0027a68 <__adddf3+0x645>
c00277ed:	4b                   	dec    ebx
c00277ee:	75 24                	jne    c0027814 <__adddf3+0x3f1>
c00277f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277f6:	29 d1                	sub    ecx,edx
c00277f8:	19 c6                	sbb    esi,eax
c00277fa:	89 ca                	mov    edx,ecx
c00277fc:	eb 61                	jmp    c002785f <__adddf3+0x43c>
c00277fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027801:	f7 d6                	not    esi
c0027803:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027809:	0f 84 59 02 00 00    	je     c0027a68 <__adddf3+0x645>
c002780f:	0d 00 00 00 80       	or     eax,0x80000000
c0027814:	83 fb 1f             	cmp    ebx,0x1f
c0027817:	7e 4d                	jle    c0027866 <__adddf3+0x443>
c0027819:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002781c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002781f:	83 fb 3f             	cmp    ebx,0x3f
c0027822:	0f 8f 40 02 00 00    	jg     c0027a68 <__adddf3+0x645>
c0027828:	83 e3 1f             	and    ebx,0x1f
c002782b:	89 d9                	mov    ecx,ebx
c002782d:	89 c7                	mov    edi,eax
c002782f:	d3 ef                	shr    edi,cl
c0027831:	31 db                	xor    ebx,ebx
c0027833:	85 c9                	test   ecx,ecx
c0027835:	74 12                	je     c0027849 <__adddf3+0x426>
c0027837:	be 20 00 00 00       	mov    esi,0x20
c002783c:	29 ce                	sub    esi,ecx
c002783e:	89 f1                	mov    ecx,esi
c0027840:	d3 e0                	shl    eax,cl
c0027842:	31 db                	xor    ebx,ebx
c0027844:	85 c0                	test   eax,eax
c0027846:	0f 95 c3             	setne  bl
c0027849:	31 c0                	xor    eax,eax
c002784b:	85 d2                	test   edx,edx
c002784d:	0f 95 c0             	setne  al
c0027850:	09 c7                	or     edi,eax
c0027852:	09 fb                	or     ebx,edi
c0027854:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027857:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002785a:	29 da                	sub    edx,ebx
c002785c:	83 de 00             	sbb    esi,0x0
c002785f:	89 f0                	mov    eax,esi
c0027861:	e9 d6 00 00 00       	jmp    c002793c <__adddf3+0x519>
c0027866:	be 20 00 00 00       	mov    esi,0x20
c002786b:	29 de                	sub    esi,ebx
c002786d:	89 c7                	mov    edi,eax
c002786f:	89 f1                	mov    ecx,esi
c0027871:	d3 e7                	shl    edi,cl
c0027873:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027876:	89 d7                	mov    edi,edx
c0027878:	88 d9                	mov    cl,bl
c002787a:	d3 ef                	shr    edi,cl
c002787c:	89 f9                	mov    ecx,edi
c002787e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027881:	09 cf                	or     edi,ecx
c0027883:	88 d9                	mov    cl,bl
c0027885:	d3 e8                	shr    eax,cl
c0027887:	89 f1                	mov    ecx,esi
c0027889:	d3 e2                	shl    edx,cl
c002788b:	85 d2                	test   edx,edx
c002788d:	0f 95 c2             	setne  dl
c0027890:	0f b6 d2             	movzx  edx,dl
c0027893:	09 d7                	or     edi,edx
c0027895:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027898:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002789b:	29 fa                	sub    edx,edi
c002789d:	19 c6                	sbb    esi,eax
c002789f:	eb be                	jmp    c002785f <__adddf3+0x43c>
c00278a1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00278a7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00278ad:	75 6a                	jne    c0027919 <__adddf3+0x4f6>
c00278af:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278b3:	75 58                	jne    c002790d <__adddf3+0x4ea>
c00278b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278bb:	89 d6                	mov    esi,edx
c00278bd:	09 c6                	or     esi,eax
c00278bf:	75 17                	jne    c00278d8 <__adddf3+0x4b5>
c00278c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278c7:	85 db                	test   ebx,ebx
c00278c9:	0f 85 99 01 00 00    	jne    c0027a68 <__adddf3+0x645>
c00278cf:	31 ff                	xor    edi,edi
c00278d1:	31 c9                	xor    ecx,ecx
c00278d3:	e9 90 01 00 00       	jmp    c0027a68 <__adddf3+0x645>
c00278d8:	85 db                	test   ebx,ebx
c00278da:	0f 84 88 01 00 00    	je     c0027a68 <__adddf3+0x645>
c00278e0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278e3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278e6:	85 c0                	test   eax,eax
c00278e8:	79 10                	jns    c00278fa <__adddf3+0x4d7>
c00278ea:	31 c9                	xor    ecx,ecx
c00278ec:	f7 da                	neg    edx
c00278ee:	0f 95 c1             	setne  cl
c00278f1:	01 c8                	add    eax,ecx
c00278f3:	f7 d8                	neg    eax
c00278f5:	e9 2f 01 00 00       	jmp    c0027a29 <__adddf3+0x606>
c00278fa:	31 ff                	xor    edi,edi
c00278fc:	31 c9                	xor    ecx,ecx
c00278fe:	89 c3                	mov    ebx,eax
c0027900:	09 d3                	or     ebx,edx
c0027902:	0f 84 60 01 00 00    	je     c0027a68 <__adddf3+0x645>
c0027908:	e9 05 01 00 00       	jmp    c0027a12 <__adddf3+0x5ef>
c002790d:	31 ff                	xor    edi,edi
c002790f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027914:	e9 4f 01 00 00       	jmp    c0027a68 <__adddf3+0x645>
c0027919:	89 c1                	mov    ecx,eax
c002791b:	89 d0                	mov    eax,edx
c002791d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027920:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027923:	89 ca                	mov    edx,ecx
c0027925:	85 c9                	test   ecx,ecx
c0027927:	79 2c                	jns    c0027955 <__adddf3+0x532>
c0027929:	31 c9                	xor    ecx,ecx
c002792b:	f7 d8                	neg    eax
c002792d:	0f 95 c1             	setne  cl
c0027930:	01 ca                	add    edx,ecx
c0027932:	f7 da                	neg    edx
c0027934:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027937:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002793a:	eb 19                	jmp    c0027955 <__adddf3+0x532>
c002793c:	85 c0                	test   eax,eax
c002793e:	0f 89 e5 00 00 00    	jns    c0027a29 <__adddf3+0x606>
c0027944:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027949:	89 c1                	mov    ecx,eax
c002794b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002794e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027951:	89 d0                	mov    eax,edx
c0027953:	89 ca                	mov    edx,ecx
c0027955:	85 d2                	test   edx,edx
c0027957:	74 59                	je     c00279b2 <__adddf3+0x58f>
c0027959:	0f bd da             	bsr    ebx,edx
c002795c:	83 f3 1f             	xor    ebx,0x1f
c002795f:	88 d9                	mov    cl,bl
c0027961:	d3 e2                	shl    edx,cl
c0027963:	bf 20 00 00 00       	mov    edi,0x20
c0027968:	89 f9                	mov    ecx,edi
c002796a:	29 d9                	sub    ecx,ebx
c002796c:	89 c6                	mov    esi,eax
c002796e:	d3 ee                	shr    esi,cl
c0027970:	09 d6                	or     esi,edx
c0027972:	88 d9                	mov    cl,bl
c0027974:	d3 e0                	shl    eax,cl
c0027976:	89 c2                	mov    edx,eax
c0027978:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002797b:	25 ff 07 00 00       	and    eax,0x7ff
c0027980:	39 d8                	cmp    eax,ebx
c0027982:	7f 22                	jg     c00279a6 <__adddf3+0x583>
c0027984:	29 c3                	sub    ebx,eax
c0027986:	43                   	inc    ebx
c0027987:	88 d9                	mov    cl,bl
c0027989:	d3 ea                	shr    edx,cl
c002798b:	29 df                	sub    edi,ebx
c002798d:	89 f9                	mov    ecx,edi
c002798f:	89 f0                	mov    eax,esi
c0027991:	d3 e0                	shl    eax,cl
c0027993:	09 c2                	or     edx,eax
c0027995:	89 f0                	mov    eax,esi
c0027997:	88 d9                	mov    cl,bl
c0027999:	d3 e8                	shr    eax,cl
c002799b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002799e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00279a4:	eb 6f                	jmp    c0027a15 <__adddf3+0x5f2>
c00279a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279a9:	29 d8                	sub    eax,ebx
c00279ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279ae:	89 f0                	mov    eax,esi
c00279b0:	eb 59                	jmp    c0027a0b <__adddf3+0x5e8>
c00279b2:	85 c0                	test   eax,eax
c00279b4:	74 6a                	je     c0027a20 <__adddf3+0x5fd>
c00279b6:	0f bd c8             	bsr    ecx,eax
c00279b9:	83 f1 1f             	xor    ecx,0x1f
c00279bc:	d3 e0                	shl    eax,cl
c00279be:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00279c7:	83 c1 20             	add    ecx,0x20
c00279ca:	39 cb                	cmp    ebx,ecx
c00279cc:	7f 35                	jg     c0027a03 <__adddf3+0x5e0>
c00279ce:	29 d9                	sub    ecx,ebx
c00279d0:	8d 71 01             	lea    esi,[ecx+0x1]
c00279d3:	83 fe 1f             	cmp    esi,0x1f
c00279d6:	7e 09                	jle    c00279e1 <__adddf3+0x5be>
c00279d8:	83 e9 1f             	sub    ecx,0x1f
c00279db:	d3 e8                	shr    eax,cl
c00279dd:	89 c3                	mov    ebx,eax
c00279df:	eb 11                	jmp    c00279f2 <__adddf3+0x5cf>
c00279e1:	b9 20 00 00 00       	mov    ecx,0x20
c00279e6:	29 f1                	sub    ecx,esi
c00279e8:	89 c3                	mov    ebx,eax
c00279ea:	d3 e3                	shl    ebx,cl
c00279ec:	89 f1                	mov    ecx,esi
c00279ee:	d3 e8                	shr    eax,cl
c00279f0:	89 c2                	mov    edx,eax
c00279f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279f5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00279fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279fd:	89 d0                	mov    eax,edx
c00279ff:	89 da                	mov    edx,ebx
c0027a01:	eb 26                	jmp    c0027a29 <__adddf3+0x606>
c0027a03:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a06:	29 cf                	sub    edi,ecx
c0027a08:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a0b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a10:	eb 17                	jmp    c0027a29 <__adddf3+0x606>
c0027a12:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a15:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a18:	eb 0f                	jmp    c0027a29 <__adddf3+0x606>
c0027a1a:	31 d2                	xor    edx,edx
c0027a1c:	31 c0                	xor    eax,eax
c0027a1e:	eb 09                	jmp    c0027a29 <__adddf3+0x606>
c0027a20:	89 c2                	mov    edx,eax
c0027a22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027a29:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a2c:	c1 e1 14             	shl    ecx,0x14
c0027a2f:	89 c3                	mov    ebx,eax
c0027a31:	c1 eb 0b             	shr    ebx,0xb
c0027a34:	09 d9                	or     ecx,ebx
c0027a36:	89 d3                	mov    ebx,edx
c0027a38:	c1 eb 0b             	shr    ebx,0xb
c0027a3b:	c1 e0 15             	shl    eax,0x15
c0027a3e:	09 d8                	or     eax,ebx
c0027a40:	89 c7                	mov    edi,eax
c0027a42:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027a48:	0f 95 c0             	setne  al
c0027a4b:	89 c6                	mov    esi,eax
c0027a4d:	09 f3                	or     ebx,esi
c0027a4f:	83 e3 01             	and    ebx,0x1
c0027a52:	c1 ea 0a             	shr    edx,0xa
c0027a55:	21 da                	and    edx,ebx
c0027a57:	89 f8                	mov    eax,edi
c0027a59:	01 d0                	add    eax,edx
c0027a5b:	83 d1 00             	adc    ecx,0x0
c0027a5e:	89 c7                	mov    edi,eax
c0027a60:	eb 06                	jmp    c0027a68 <__adddf3+0x645>
c0027a62:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a65:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a68:	89 f8                	mov    eax,edi
c0027a6a:	89 ca                	mov    edx,ecx
c0027a6c:	83 c4 24             	add    esp,0x24
c0027a6f:	5b                   	pop    ebx
c0027a70:	5e                   	pop    esi
c0027a71:	5f                   	pop    edi
c0027a72:	5d                   	pop    ebp
c0027a73:	c3                   	ret    

c0027a74 <__subdf3>:
c0027a74:	55                   	push   ebp
c0027a75:	89 e5                	mov    ebp,esp
c0027a77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027a7d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a83:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027a86:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027a89:	5d                   	pop    ebp
c0027a8a:	e9 94 f9 ff ff       	jmp    c0027423 <__adddf3>

c0027a8f <__negdf2>:
c0027a8f:	55                   	push   ebp
c0027a90:	89 e5                	mov    ebp,esp
c0027a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a95:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a9e:	5d                   	pop    ebp
c0027a9f:	c3                   	ret    

c0027aa0 <__muldf3>:
c0027aa0:	55                   	push   ebp
c0027aa1:	89 e5                	mov    ebp,esp
c0027aa3:	57                   	push   edi
c0027aa4:	56                   	push   esi
c0027aa5:	53                   	push   ebx
c0027aa6:	83 ec 24             	sub    esp,0x24
c0027aa9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027aaf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ab2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ab5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027ab8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027abb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027abe:	89 c8                	mov    eax,ecx
c0027ac0:	c1 f8 14             	sar    eax,0x14
c0027ac3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ac6:	89 f8                	mov    eax,edi
c0027ac8:	89 fb                	mov    ebx,edi
c0027aca:	c1 e3 0b             	shl    ebx,0xb
c0027acd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ad0:	c1 e1 0b             	shl    ecx,0xb
c0027ad3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ad9:	c1 e8 15             	shr    eax,0x15
c0027adc:	09 c1                	or     ecx,eax
c0027ade:	89 d6                	mov    esi,edx
c0027ae0:	89 d0                	mov    eax,edx
c0027ae2:	c1 f8 14             	sar    eax,0x14
c0027ae5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ae8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027aeb:	89 c3                	mov    ebx,eax
c0027aed:	c1 e3 0b             	shl    ebx,0xb
c0027af0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027af3:	c1 e6 0b             	shl    esi,0xb
c0027af6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027afc:	c1 e8 15             	shr    eax,0x15
c0027aff:	09 c6                	or     esi,eax
c0027b01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b04:	25 ff 07 00 00       	and    eax,0x7ff
c0027b09:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b0f:	25 ff 07 00 00       	and    eax,0x7ff
c0027b14:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b1a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b1d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027b24:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b27:	40                   	inc    eax
c0027b28:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b2d:	0f 85 8d 00 00 00    	jne    c0027bc0 <__muldf3+0x120>
c0027b33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b36:	09 c8                	or     eax,ecx
c0027b38:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027b3c:	74 44                	je     c0027b82 <__muldf3+0xe2>
c0027b3e:	85 c0                	test   eax,eax
c0027b40:	0f 85 31 02 00 00    	jne    c0027d77 <__muldf3+0x2d7>
c0027b46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b49:	40                   	inc    eax
c0027b4a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b4f:	75 13                	jne    c0027b64 <__muldf3+0xc4>
c0027b51:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b54:	09 f1                	or     ecx,esi
c0027b56:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b5a:	74 22                	je     c0027b7e <__muldf3+0xde>
c0027b5c:	85 c9                	test   ecx,ecx
c0027b5e:	0f 85 0d 02 00 00    	jne    c0027d71 <__muldf3+0x2d1>
c0027b64:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027b68:	0f 89 09 02 00 00    	jns    c0027d77 <__muldf3+0x2d7>
c0027b6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b71:	05 00 00 00 80       	add    eax,0x80000000
c0027b76:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b79:	e9 f9 01 00 00       	jmp    c0027d77 <__muldf3+0x2d7>
c0027b7e:	85 c9                	test   ecx,ecx
c0027b80:	eb 2e                	jmp    c0027bb0 <__muldf3+0x110>
c0027b82:	85 c0                	test   eax,eax
c0027b84:	74 20                	je     c0027ba6 <__muldf3+0x106>
c0027b86:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027b89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b8f:	c1 ef 1f             	shr    edi,0x1f
c0027b92:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027b95:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027b98:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b9e:	09 f9                	or     ecx,edi
c0027ba0:	78 1e                	js     c0027bc0 <__muldf3+0x120>
c0027ba2:	89 c3                	mov    ebx,eax
c0027ba4:	eb e0                	jmp    c0027b86 <__muldf3+0xe6>
c0027ba6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ba9:	f7 d0                	not    eax
c0027bab:	a9 ff 07 00 00       	test   eax,0x7ff
c0027bb0:	75 b2                	jne    c0027b64 <__muldf3+0xc4>
c0027bb2:	31 ff                	xor    edi,edi
c0027bb4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027bbb:	e9 b7 01 00 00       	jmp    c0027d77 <__muldf3+0x2d7>
c0027bc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bc3:	40                   	inc    eax
c0027bc4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bc9:	75 57                	jne    c0027c22 <__muldf3+0x182>
c0027bcb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027bce:	09 f0                	or     eax,esi
c0027bd0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027bd4:	74 23                	je     c0027bf9 <__muldf3+0x159>
c0027bd6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027bda:	0f 89 91 01 00 00    	jns    c0027d71 <__muldf3+0x2d1>
c0027be0:	85 c0                	test   eax,eax
c0027be2:	0f 85 89 01 00 00    	jne    c0027d71 <__muldf3+0x2d1>
c0027be8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027beb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027bf1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bf4:	e9 7e 01 00 00       	jmp    c0027d77 <__muldf3+0x2d7>
c0027bf9:	85 c0                	test   eax,eax
c0027bfb:	75 0c                	jne    c0027c09 <__muldf3+0x169>
c0027bfd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c01:	0f 89 6a 01 00 00    	jns    c0027d71 <__muldf3+0x2d1>
c0027c07:	eb df                	jmp    c0027be8 <__muldf3+0x148>
c0027c09:	01 f6                	add    esi,esi
c0027c0b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c0e:	c1 ea 1f             	shr    edx,0x1f
c0027c11:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c14:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027c17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c1a:	09 d6                	or     esi,edx
c0027c1c:	78 04                	js     c0027c22 <__muldf3+0x182>
c0027c1e:	89 c3                	mov    ebx,eax
c0027c20:	eb e7                	jmp    c0027c09 <__muldf3+0x169>
c0027c22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027c28:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c2e:	89 c8                	mov    eax,ecx
c0027c30:	f7 e6                	mul    esi
c0027c32:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027c35:	89 c7                	mov    edi,eax
c0027c37:	89 c8                	mov    eax,ecx
c0027c39:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c3c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027c3f:	89 c1                	mov    ecx,eax
c0027c41:	89 f0                	mov    eax,esi
c0027c43:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027c46:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027c49:	89 c6                	mov    esi,eax
c0027c4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c4e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c51:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c54:	31 c0                	xor    eax,eax
c0027c56:	01 f1                	add    ecx,esi
c0027c58:	0f 92 c0             	setb   al
c0027c5b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027c5e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027c61:	83 d6 00             	adc    esi,0x0
c0027c64:	01 c7                	add    edi,eax
c0027c66:	83 d6 00             	adc    esi,0x0
c0027c69:	01 ca                	add    edx,ecx
c0027c6b:	0f 92 c1             	setb   cl
c0027c6e:	0f b6 c9             	movzx  ecx,cl
c0027c71:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027c74:	83 d6 00             	adc    esi,0x0
c0027c77:	01 cf                	add    edi,ecx
c0027c79:	83 d6 00             	adc    esi,0x0
c0027c7c:	31 c9                	xor    ecx,ecx
c0027c7e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027c81:	0f 95 c1             	setne  cl
c0027c84:	09 cf                	or     edi,ecx
c0027c86:	85 f6                	test   esi,esi
c0027c88:	78 0c                	js     c0027c96 <__muldf3+0x1f6>
c0027c8a:	01 f6                	add    esi,esi
c0027c8c:	89 f8                	mov    eax,edi
c0027c8e:	c1 e8 1f             	shr    eax,0x1f
c0027c91:	09 c6                	or     esi,eax
c0027c93:	01 ff                	add    edi,edi
c0027c95:	4b                   	dec    ebx
c0027c96:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027c9c:	0f 8f 85 00 00 00    	jg     c0027d27 <__muldf3+0x287>
c0027ca2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ca8:	85 db                	test   ebx,ebx
c0027caa:	0f 8f 84 00 00 00    	jg     c0027d34 <__muldf3+0x294>
c0027cb0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027cb3:	7c 79                	jl     c0027d2e <__muldf3+0x28e>
c0027cb5:	ba 01 00 00 00       	mov    edx,0x1
c0027cba:	29 da                	sub    edx,ebx
c0027cbc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cc2:	83 fa 1f             	cmp    edx,0x1f
c0027cc5:	7e 30                	jle    c0027cf7 <__muldf3+0x257>
c0027cc7:	83 fa 20             	cmp    edx,0x20
c0027cca:	75 0b                	jne    c0027cd7 <__muldf3+0x237>
c0027ccc:	31 c0                	xor    eax,eax
c0027cce:	85 ff                	test   edi,edi
c0027cd0:	0f 95 c0             	setne  al
c0027cd3:	89 c7                	mov    edi,eax
c0027cd5:	eb 1a                	jmp    c0027cf1 <__muldf3+0x251>
c0027cd7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027cda:	89 f0                	mov    eax,esi
c0027cdc:	d3 e0                	shl    eax,cl
c0027cde:	09 f8                	or     eax,edi
c0027ce0:	0f 95 c0             	setne  al
c0027ce3:	0f b6 c0             	movzx  eax,al
c0027ce6:	89 c7                	mov    edi,eax
c0027ce8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ced:	29 d9                	sub    ecx,ebx
c0027cef:	d3 ee                	shr    esi,cl
c0027cf1:	09 f7                	or     edi,esi
c0027cf3:	31 db                	xor    ebx,ebx
c0027cf5:	eb 3b                	jmp    c0027d32 <__muldf3+0x292>
c0027cf7:	83 c3 1f             	add    ebx,0x1f
c0027cfa:	89 f0                	mov    eax,esi
c0027cfc:	88 d9                	mov    cl,bl
c0027cfe:	d3 e0                	shl    eax,cl
c0027d00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d03:	89 f8                	mov    eax,edi
c0027d05:	88 d1                	mov    cl,dl
c0027d07:	d3 e8                	shr    eax,cl
c0027d09:	89 c1                	mov    ecx,eax
c0027d0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d0e:	09 c8                	or     eax,ecx
c0027d10:	88 d9                	mov    cl,bl
c0027d12:	d3 e7                	shl    edi,cl
c0027d14:	31 db                	xor    ebx,ebx
c0027d16:	85 ff                	test   edi,edi
c0027d18:	0f 95 c3             	setne  bl
c0027d1b:	89 df                	mov    edi,ebx
c0027d1d:	09 c7                	or     edi,eax
c0027d1f:	88 d1                	mov    cl,dl
c0027d21:	d3 ee                	shr    esi,cl
c0027d23:	31 db                	xor    ebx,ebx
c0027d25:	eb 0d                	jmp    c0027d34 <__muldf3+0x294>
c0027d27:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027d2c:	eb 02                	jmp    c0027d30 <__muldf3+0x290>
c0027d2e:	31 db                	xor    ebx,ebx
c0027d30:	31 ff                	xor    edi,edi
c0027d32:	31 f6                	xor    esi,esi
c0027d34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d37:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027d3a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d3f:	09 c3                	or     ebx,eax
c0027d41:	c1 e3 14             	shl    ebx,0x14
c0027d44:	89 f0                	mov    eax,esi
c0027d46:	c1 e8 0b             	shr    eax,0xb
c0027d49:	09 c3                	or     ebx,eax
c0027d4b:	89 f8                	mov    eax,edi
c0027d4d:	c1 e8 0b             	shr    eax,0xb
c0027d50:	c1 e6 15             	shl    esi,0x15
c0027d53:	09 c6                	or     esi,eax
c0027d55:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027d5b:	0f 95 c1             	setne  cl
c0027d5e:	09 c8                	or     eax,ecx
c0027d60:	83 e0 01             	and    eax,0x1
c0027d63:	c1 ef 0a             	shr    edi,0xa
c0027d66:	21 c7                	and    edi,eax
c0027d68:	01 f7                	add    edi,esi
c0027d6a:	83 d3 00             	adc    ebx,0x0
c0027d6d:	89 da                	mov    edx,ebx
c0027d6f:	eb 03                	jmp    c0027d74 <__muldf3+0x2d4>
c0027d71:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d74:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d77:	89 f8                	mov    eax,edi
c0027d79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d7c:	83 c4 24             	add    esp,0x24
c0027d7f:	5b                   	pop    ebx
c0027d80:	5e                   	pop    esi
c0027d81:	5f                   	pop    edi
c0027d82:	5d                   	pop    ebp
c0027d83:	c3                   	ret    

c0027d84 <__divdf3>:
c0027d84:	55                   	push   ebp
c0027d85:	89 e5                	mov    ebp,esp
c0027d87:	57                   	push   edi
c0027d88:	56                   	push   esi
c0027d89:	53                   	push   ebx
c0027d8a:	83 ec 2c             	sub    esp,0x2c
c0027d8d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d96:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d99:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d9f:	89 ce                	mov    esi,ecx
c0027da1:	89 c8                	mov    eax,ecx
c0027da3:	c1 f8 14             	sar    eax,0x14
c0027da6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027da9:	89 f8                	mov    eax,edi
c0027dab:	89 fb                	mov    ebx,edi
c0027dad:	c1 e3 0b             	shl    ebx,0xb
c0027db0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027db3:	c1 e6 0b             	shl    esi,0xb
c0027db6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027dbc:	c1 e8 15             	shr    eax,0x15
c0027dbf:	09 c6                	or     esi,eax
c0027dc1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027dc4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027dc7:	89 c2                	mov    edx,eax
c0027dc9:	c1 fa 14             	sar    edx,0x14
c0027dcc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027dcf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027dd2:	89 de                	mov    esi,ebx
c0027dd4:	c1 e6 0b             	shl    esi,0xb
c0027dd7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dda:	c1 e0 0b             	shl    eax,0xb
c0027ddd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027de2:	c1 eb 15             	shr    ebx,0x15
c0027de5:	09 d8                	or     eax,ebx
c0027de7:	89 c2                	mov    edx,eax
c0027de9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dec:	25 ff 07 00 00       	and    eax,0x7ff
c0027df1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027df4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027df7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027dfd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027e00:	29 d8                	sub    eax,ebx
c0027e02:	05 ff 03 00 00       	add    eax,0x3ff
c0027e07:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e0a:	46                   	inc    esi
c0027e0b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027e11:	0f 85 a5 00 00 00    	jne    c0027ebc <__divdf3+0x138>
c0027e17:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027e1a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027e1d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027e21:	74 2a                	je     c0027e4d <__divdf3+0xc9>
c0027e23:	85 f6                	test   esi,esi
c0027e25:	0f 85 cc 02 00 00    	jne    c00280f7 <__divdf3+0x373>
c0027e2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e2e:	40                   	inc    eax
c0027e2f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e34:	75 26                	jne    c0027e5c <__divdf3+0xd8>
c0027e36:	85 db                	test   ebx,ebx
c0027e38:	74 22                	je     c0027e5c <__divdf3+0xd8>
c0027e3a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e3d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e40:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e43:	09 d0                	or     eax,edx
c0027e45:	0f 85 ac 02 00 00    	jne    c00280f7 <__divdf3+0x373>
c0027e4b:	eb 63                	jmp    c0027eb0 <__divdf3+0x12c>
c0027e4d:	85 f6                	test   esi,esi
c0027e4f:	75 22                	jne    c0027e73 <__divdf3+0xef>
c0027e51:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e54:	40                   	inc    eax
c0027e55:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e5a:	74 36                	je     c0027e92 <__divdf3+0x10e>
c0027e5c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027e60:	0f 89 91 02 00 00    	jns    c00280f7 <__divdf3+0x373>
c0027e66:	89 f8                	mov    eax,edi
c0027e68:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e6e:	e9 80 02 00 00       	jmp    c00280f3 <__divdf3+0x36f>
c0027e73:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e76:	01 f6                	add    esi,esi
c0027e78:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e7b:	c1 ef 1f             	shr    edi,0x1f
c0027e7e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e81:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027e84:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027e87:	09 f7                	or     edi,esi
c0027e89:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027e8c:	78 2e                	js     c0027ebc <__divdf3+0x138>
c0027e8e:	89 c8                	mov    eax,ecx
c0027e90:	eb e1                	jmp    c0027e73 <__divdf3+0xef>
c0027e92:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e95:	09 d0                	or     eax,edx
c0027e97:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e9b:	74 0f                	je     c0027eac <__divdf3+0x128>
c0027e9d:	85 c0                	test   eax,eax
c0027e9f:	74 bb                	je     c0027e5c <__divdf3+0xd8>
c0027ea1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ea4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ea7:	e9 4b 02 00 00       	jmp    c00280f7 <__divdf3+0x373>
c0027eac:	85 c0                	test   eax,eax
c0027eae:	75 ac                	jne    c0027e5c <__divdf3+0xd8>
c0027eb0:	31 ff                	xor    edi,edi
c0027eb2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027eb7:	e9 3b 02 00 00       	jmp    c00280f7 <__divdf3+0x373>
c0027ebc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ebf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027ec2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027ec8:	75 6b                	jne    c0027f35 <__divdf3+0x1b1>
c0027eca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ecd:	09 d6                	or     esi,edx
c0027ecf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ed3:	74 28                	je     c0027efd <__divdf3+0x179>
c0027ed5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ed8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027edb:	85 f6                	test   esi,esi
c0027edd:	0f 85 14 02 00 00    	jne    c00280f7 <__divdf3+0x373>
c0027ee3:	31 ff                	xor    edi,edi
c0027ee5:	31 c9                	xor    ecx,ecx
c0027ee7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027eea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027eed:	0f 89 04 02 00 00    	jns    c00280f7 <__divdf3+0x373>
c0027ef3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027ef8:	e9 fa 01 00 00       	jmp    c00280f7 <__divdf3+0x373>
c0027efd:	85 f6                	test   esi,esi
c0027eff:	75 1b                	jne    c0027f1c <__divdf3+0x198>
c0027f01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f04:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f07:	25 00 00 00 80       	and    eax,0x80000000
c0027f0c:	31 c9                	xor    ecx,ecx
c0027f0e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027f13:	89 cf                	mov    edi,ecx
c0027f15:	89 c1                	mov    ecx,eax
c0027f17:	e9 db 01 00 00       	jmp    c00280f7 <__divdf3+0x373>
c0027f1c:	01 d2                	add    edx,edx
c0027f1e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f21:	c1 eb 1f             	shr    ebx,0x1f
c0027f24:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f27:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027f2a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027f2d:	09 da                	or     edx,ebx
c0027f2f:	78 04                	js     c0027f35 <__divdf3+0x1b1>
c0027f31:	89 c8                	mov    eax,ecx
c0027f33:	eb e7                	jmp    c0027f1c <__divdf3+0x198>
c0027f35:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f38:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f3e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f44:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027f47:	39 d6                	cmp    esi,edx
c0027f49:	77 0d                	ja     c0027f58 <__divdf3+0x1d4>
c0027f4b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027f4e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027f51:	72 1b                	jb     c0027f6e <__divdf3+0x1ea>
c0027f53:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027f56:	75 16                	jne    c0027f6e <__divdf3+0x1ea>
c0027f58:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f5b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f5e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027f61:	83 de 00             	sbb    esi,0x0
c0027f64:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027f67:	ba 01 00 00 00       	mov    edx,0x1
c0027f6c:	eb 02                	jmp    c0027f70 <__divdf3+0x1ec>
c0027f6e:	31 d2                	xor    edx,edx
c0027f70:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027f77:	31 ff                	xor    edi,edi
c0027f79:	01 ff                	add    edi,edi
c0027f7b:	89 d1                	mov    ecx,edx
c0027f7d:	c1 e9 1f             	shr    ecx,0x1f
c0027f80:	09 cf                	or     edi,ecx
c0027f82:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027f85:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027f88:	89 da                	mov    edx,ebx
c0027f8a:	89 f3                	mov    ebx,esi
c0027f8c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027f8f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f92:	c1 e9 1f             	shr    ecx,0x1f
c0027f95:	09 ce                	or     esi,ecx
c0027f97:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f9a:	01 c9                	add    ecx,ecx
c0027f9c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027f9f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027fa2:	85 db                	test   ebx,ebx
c0027fa4:	78 29                	js     c0027fcf <__divdf3+0x24b>
c0027fa6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027fa9:	72 07                	jb     c0027fb2 <__divdf3+0x22e>
c0027fab:	75 3c                	jne    c0027fe9 <__divdf3+0x265>
c0027fad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fb0:	77 37                	ja     c0027fe9 <__divdf3+0x265>
c0027fb2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fb5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027fb8:	31 d2                	xor    edx,edx
c0027fba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027fbd:	0f 97 c2             	seta   dl
c0027fc0:	29 d6                	sub    esi,edx
c0027fc2:	89 d9                	mov    ecx,ebx
c0027fc4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027fc7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027fca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027fcd:	eb 17                	jmp    c0027fe6 <__divdf3+0x262>
c0027fcf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fd2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fd5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fd8:	0f 97 c1             	seta   cl
c0027fdb:	0f b6 c9             	movzx  ecx,cl
c0027fde:	29 ce                	sub    esi,ecx
c0027fe0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027fe3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027fe6:	83 ca 01             	or     edx,0x1
c0027fe9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027fec:	75 8b                	jne    c0027f79 <__divdf3+0x1f5>
c0027fee:	c1 e7 09             	shl    edi,0x9
c0027ff1:	89 d1                	mov    ecx,edx
c0027ff3:	c1 e9 17             	shr    ecx,0x17
c0027ff6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ff9:	09 f3                	or     ebx,esi
c0027ffb:	0f 95 c3             	setne  bl
c0027ffe:	0f b6 db             	movzx  ebx,bl
c0028001:	c1 e2 09             	shl    edx,0x9
c0028004:	09 d3                	or     ebx,edx
c0028006:	89 ca                	mov    edx,ecx
c0028008:	09 fa                	or     edx,edi
c002800a:	78 0c                	js     c0028018 <__divdf3+0x294>
c002800c:	01 d2                	add    edx,edx
c002800e:	89 d9                	mov    ecx,ebx
c0028010:	c1 e9 1f             	shr    ecx,0x1f
c0028013:	09 ca                	or     edx,ecx
c0028015:	01 db                	add    ebx,ebx
c0028017:	48                   	dec    eax
c0028018:	3d fe 07 00 00       	cmp    eax,0x7fe
c002801d:	0f 8f 83 00 00 00    	jg     c00280a6 <__divdf3+0x322>
c0028023:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028029:	85 c0                	test   eax,eax
c002802b:	0f 8f 82 00 00 00    	jg     c00280b3 <__divdf3+0x32f>
c0028031:	83 f8 cc             	cmp    eax,0xffffffcc
c0028034:	7c 77                	jl     c00280ad <__divdf3+0x329>
c0028036:	be 01 00 00 00       	mov    esi,0x1
c002803b:	29 c6                	sub    esi,eax
c002803d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028043:	83 fe 1f             	cmp    esi,0x1f
c0028046:	7e 2f                	jle    c0028077 <__divdf3+0x2f3>
c0028048:	83 fe 20             	cmp    esi,0x20
c002804b:	75 0a                	jne    c0028057 <__divdf3+0x2d3>
c002804d:	85 db                	test   ebx,ebx
c002804f:	0f 95 c3             	setne  bl
c0028052:	0f b6 db             	movzx  ebx,bl
c0028055:	eb 1a                	jmp    c0028071 <__divdf3+0x2ed>
c0028057:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002805a:	89 d7                	mov    edi,edx
c002805c:	d3 e7                	shl    edi,cl
c002805e:	89 f9                	mov    ecx,edi
c0028060:	09 d9                	or     ecx,ebx
c0028062:	0f 95 c3             	setne  bl
c0028065:	0f b6 db             	movzx  ebx,bl
c0028068:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002806d:	29 c1                	sub    ecx,eax
c002806f:	d3 ea                	shr    edx,cl
c0028071:	09 d3                	or     ebx,edx
c0028073:	31 c0                	xor    eax,eax
c0028075:	eb 3a                	jmp    c00280b1 <__divdf3+0x32d>
c0028077:	83 c0 1f             	add    eax,0x1f
c002807a:	89 d7                	mov    edi,edx
c002807c:	88 c1                	mov    cl,al
c002807e:	d3 e7                	shl    edi,cl
c0028080:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028083:	89 df                	mov    edi,ebx
c0028085:	89 f1                	mov    ecx,esi
c0028087:	d3 ef                	shr    edi,cl
c0028089:	89 f9                	mov    ecx,edi
c002808b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002808e:	09 cf                	or     edi,ecx
c0028090:	88 c1                	mov    cl,al
c0028092:	d3 e3                	shl    ebx,cl
c0028094:	85 db                	test   ebx,ebx
c0028096:	0f 95 c3             	setne  bl
c0028099:	0f b6 db             	movzx  ebx,bl
c002809c:	09 fb                	or     ebx,edi
c002809e:	89 f1                	mov    ecx,esi
c00280a0:	d3 ea                	shr    edx,cl
c00280a2:	31 c0                	xor    eax,eax
c00280a4:	eb 0d                	jmp    c00280b3 <__divdf3+0x32f>
c00280a6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00280ab:	eb 02                	jmp    c00280af <__divdf3+0x32b>
c00280ad:	31 c0                	xor    eax,eax
c00280af:	31 db                	xor    ebx,ebx
c00280b1:	31 d2                	xor    edx,edx
c00280b3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00280b6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00280b9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00280bf:	09 c8                	or     eax,ecx
c00280c1:	c1 e0 14             	shl    eax,0x14
c00280c4:	89 d1                	mov    ecx,edx
c00280c6:	c1 e9 0b             	shr    ecx,0xb
c00280c9:	09 c8                	or     eax,ecx
c00280cb:	89 c6                	mov    esi,eax
c00280cd:	89 d9                	mov    ecx,ebx
c00280cf:	c1 e9 0b             	shr    ecx,0xb
c00280d2:	c1 e2 15             	shl    edx,0x15
c00280d5:	09 ca                	or     edx,ecx
c00280d7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00280dd:	0f 95 c0             	setne  al
c00280e0:	09 c1                	or     ecx,eax
c00280e2:	83 e1 01             	and    ecx,0x1
c00280e5:	c1 eb 0a             	shr    ebx,0xa
c00280e8:	21 cb                	and    ebx,ecx
c00280ea:	01 d3                	add    ebx,edx
c00280ec:	89 d8                	mov    eax,ebx
c00280ee:	83 d6 00             	adc    esi,0x0
c00280f1:	89 f2                	mov    edx,esi
c00280f3:	89 c7                	mov    edi,eax
c00280f5:	89 d1                	mov    ecx,edx
c00280f7:	89 f8                	mov    eax,edi
c00280f9:	89 ca                	mov    edx,ecx
c00280fb:	83 c4 2c             	add    esp,0x2c
c00280fe:	5b                   	pop    ebx
c00280ff:	5e                   	pop    esi
c0028100:	5f                   	pop    edi
c0028101:	5d                   	pop    ebp
c0028102:	c3                   	ret    

c0028103 <__floatsidf>:
c0028103:	55                   	push   ebp
c0028104:	89 e5                	mov    ebp,esp
c0028106:	56                   	push   esi
c0028107:	53                   	push   ebx
c0028108:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002810b:	85 db                	test   ebx,ebx
c002810d:	7e 15                	jle    c0028124 <__floatsidf+0x21>
c002810f:	0f bd cb             	bsr    ecx,ebx
c0028112:	83 f1 1f             	xor    ecx,0x1f
c0028115:	d3 e3                	shl    ebx,cl
c0028117:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002811d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028122:	eb 21                	jmp    c0028145 <__floatsidf+0x42>
c0028124:	b8 00 00 00 00       	mov    eax,0x0
c0028129:	ba 00 00 00 00       	mov    edx,0x0
c002812e:	74 2a                	je     c002815a <__floatsidf+0x57>
c0028130:	f7 db                	neg    ebx
c0028132:	0f bd cb             	bsr    ecx,ebx
c0028135:	83 f1 1f             	xor    ecx,0x1f
c0028138:	d3 e3                	shl    ebx,cl
c002813a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028140:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028145:	29 c8                	sub    eax,ecx
c0028147:	c1 e0 14             	shl    eax,0x14
c002814a:	89 c1                	mov    ecx,eax
c002814c:	89 de                	mov    esi,ebx
c002814e:	c1 ee 0b             	shr    esi,0xb
c0028151:	09 f1                	or     ecx,esi
c0028153:	89 ca                	mov    edx,ecx
c0028155:	c1 e3 15             	shl    ebx,0x15
c0028158:	89 d8                	mov    eax,ebx
c002815a:	5b                   	pop    ebx
c002815b:	5e                   	pop    esi
c002815c:	5d                   	pop    ebp
c002815d:	c3                   	ret    

c002815e <__floatunsidf>:
c002815e:	55                   	push   ebp
c002815f:	89 e5                	mov    ebp,esp
c0028161:	56                   	push   esi
c0028162:	53                   	push   ebx
c0028163:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028166:	85 db                	test   ebx,ebx
c0028168:	74 2a                	je     c0028194 <__floatunsidf+0x36>
c002816a:	0f bd cb             	bsr    ecx,ebx
c002816d:	83 f1 1f             	xor    ecx,0x1f
c0028170:	d3 e3                	shl    ebx,cl
c0028172:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028178:	b8 1e 04 00 00       	mov    eax,0x41e
c002817d:	29 c8                	sub    eax,ecx
c002817f:	c1 e0 14             	shl    eax,0x14
c0028182:	89 c1                	mov    ecx,eax
c0028184:	89 de                	mov    esi,ebx
c0028186:	c1 ee 0b             	shr    esi,0xb
c0028189:	09 f1                	or     ecx,esi
c002818b:	89 ca                	mov    edx,ecx
c002818d:	c1 e3 15             	shl    ebx,0x15
c0028190:	89 d8                	mov    eax,ebx
c0028192:	eb 04                	jmp    c0028198 <__floatunsidf+0x3a>
c0028194:	31 c0                	xor    eax,eax
c0028196:	31 d2                	xor    edx,edx
c0028198:	5b                   	pop    ebx
c0028199:	5e                   	pop    esi
c002819a:	5d                   	pop    ebp
c002819b:	c3                   	ret    

c002819c <__fixdfsi>:
c002819c:	55                   	push   ebp
c002819d:	89 e5                	mov    ebp,esp
c002819f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281a2:	89 d1                	mov    ecx,edx
c00281a4:	c1 e1 0b             	shl    ecx,0xb
c00281a7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00281b0:	c1 e8 15             	shr    eax,0x15
c00281b3:	09 c1                	or     ecx,eax
c00281b5:	c1 fa 14             	sar    edx,0x14
c00281b8:	78 1f                	js     c00281d9 <__fixdfsi+0x3d>
c00281ba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00281c0:	31 c0                	xor    eax,eax
c00281c2:	83 fa 1e             	cmp    edx,0x1e
c00281c5:	77 40                	ja     c0028207 <__fixdfsi+0x6b>
c00281c7:	89 c8                	mov    eax,ecx
c00281c9:	0d 00 00 00 80       	or     eax,0x80000000
c00281ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281d3:	29 d1                	sub    ecx,edx
c00281d5:	d3 e8                	shr    eax,cl
c00281d7:	eb 2e                	jmp    c0028207 <__fixdfsi+0x6b>
c00281d9:	31 c0                	xor    eax,eax
c00281db:	81 c2 01 04 00 00    	add    edx,0x401
c00281e1:	78 24                	js     c0028207 <__fixdfsi+0x6b>
c00281e3:	83 fa 1e             	cmp    edx,0x1e
c00281e6:	7e 09                	jle    c00281f1 <__fixdfsi+0x55>
c00281e8:	83 fa 1f             	cmp    edx,0x1f
c00281eb:	75 18                	jne    c0028205 <__fixdfsi+0x69>
c00281ed:	85 c9                	test   ecx,ecx
c00281ef:	75 14                	jne    c0028205 <__fixdfsi+0x69>
c00281f1:	89 c8                	mov    eax,ecx
c00281f3:	0d 00 00 00 80       	or     eax,0x80000000
c00281f8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281fd:	29 d1                	sub    ecx,edx
c00281ff:	d3 e8                	shr    eax,cl
c0028201:	f7 d8                	neg    eax
c0028203:	eb 02                	jmp    c0028207 <__fixdfsi+0x6b>
c0028205:	31 c0                	xor    eax,eax
c0028207:	5d                   	pop    ebp
c0028208:	c3                   	ret    

c0028209 <__fixunsdfsi>:
c0028209:	55                   	push   ebp
c002820a:	89 e5                	mov    ebp,esp
c002820c:	53                   	push   ebx
c002820d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028210:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028213:	89 d3                	mov    ebx,edx
c0028215:	c1 fb 14             	sar    ebx,0x14
c0028218:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002821e:	31 c0                	xor    eax,eax
c0028220:	83 fb 1f             	cmp    ebx,0x1f
c0028223:	77 1d                	ja     c0028242 <__fixunsdfsi+0x39>
c0028225:	89 d0                	mov    eax,edx
c0028227:	c1 e0 0b             	shl    eax,0xb
c002822a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002822f:	c1 e9 15             	shr    ecx,0x15
c0028232:	09 c8                	or     eax,ecx
c0028234:	0d 00 00 00 80       	or     eax,0x80000000
c0028239:	b9 1f 00 00 00       	mov    ecx,0x1f
c002823e:	29 d9                	sub    ecx,ebx
c0028240:	d3 e8                	shr    eax,cl
c0028242:	5b                   	pop    ebx
c0028243:	5d                   	pop    ebp
c0028244:	c3                   	ret    

c0028245 <__cmpdf2>:
c0028245:	55                   	push   ebp
c0028246:	89 e5                	mov    ebp,esp
c0028248:	57                   	push   edi
c0028249:	56                   	push   esi
c002824a:	53                   	push   ebx
c002824b:	83 ec 0c             	sub    esp,0xc
c002824e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028251:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028254:	89 ca                	mov    edx,ecx
c0028256:	c1 ea 14             	shr    edx,0x14
c0028259:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002825f:	89 cb                	mov    ebx,ecx
c0028261:	c1 fb 1f             	sar    ebx,0x1f
c0028264:	31 da                	xor    edx,ebx
c0028266:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028269:	89 df                	mov    edi,ebx
c002826b:	c1 e7 0b             	shl    edi,0xb
c002826e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028271:	c1 e1 0b             	shl    ecx,0xb
c0028274:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002827a:	c1 eb 15             	shr    ebx,0x15
c002827d:	09 d9                	or     ecx,ebx
c002827f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028282:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028285:	89 ce                	mov    esi,ecx
c0028287:	c1 ee 14             	shr    esi,0x14
c002828a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028290:	89 cb                	mov    ebx,ecx
c0028292:	c1 fb 1f             	sar    ebx,0x1f
c0028295:	31 de                	xor    esi,ebx
c0028297:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002829a:	89 df                	mov    edi,ebx
c002829c:	c1 e7 0b             	shl    edi,0xb
c002829f:	c1 e1 0b             	shl    ecx,0xb
c00282a2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282a8:	c1 eb 15             	shr    ebx,0x15
c00282ab:	09 d9                	or     ecx,ebx
c00282ad:	89 d3                	mov    ebx,edx
c00282af:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00282b5:	43                   	inc    ebx
c00282b6:	83 fb 01             	cmp    ebx,0x1
c00282b9:	77 08                	ja     c00282c3 <__cmpdf2+0x7e>
c00282bb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282be:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282c1:	75 68                	jne    c002832b <__cmpdf2+0xe6>
c00282c3:	89 f3                	mov    ebx,esi
c00282c5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00282cb:	43                   	inc    ebx
c00282cc:	83 fb 01             	cmp    ebx,0x1
c00282cf:	77 06                	ja     c00282d7 <__cmpdf2+0x92>
c00282d1:	89 fb                	mov    ebx,edi
c00282d3:	09 cb                	or     ebx,ecx
c00282d5:	75 54                	jne    c002832b <__cmpdf2+0xe6>
c00282d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282da:	09 f8                	or     eax,edi
c00282dc:	09 c8                	or     eax,ecx
c00282de:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00282e1:	75 12                	jne    c00282f5 <__cmpdf2+0xb0>
c00282e3:	8d 42 01             	lea    eax,[edx+0x1]
c00282e6:	83 f8 01             	cmp    eax,0x1
c00282e9:	77 0a                	ja     c00282f5 <__cmpdf2+0xb0>
c00282eb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282ee:	31 c0                	xor    eax,eax
c00282f0:	83 fb 01             	cmp    ebx,0x1
c00282f3:	76 36                	jbe    c002832b <__cmpdf2+0xe6>
c00282f5:	b8 01 00 00 00       	mov    eax,0x1
c00282fa:	39 f2                	cmp    edx,esi
c00282fc:	7f 2d                	jg     c002832b <__cmpdf2+0xe6>
c00282fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028303:	7c 26                	jl     c002832b <__cmpdf2+0xe6>
c0028305:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028308:	77 07                	ja     c0028311 <__cmpdf2+0xcc>
c002830a:	72 16                	jb     c0028322 <__cmpdf2+0xdd>
c002830c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002830f:	76 0a                	jbe    c002831b <__cmpdf2+0xd6>
c0028311:	89 d0                	mov    eax,edx
c0028313:	c1 f8 1f             	sar    eax,0x1f
c0028316:	83 c8 01             	or     eax,0x1
c0028319:	eb 10                	jmp    c002832b <__cmpdf2+0xe6>
c002831b:	b8 00 00 00 00       	mov    eax,0x0
c0028320:	73 09                	jae    c002832b <__cmpdf2+0xe6>
c0028322:	89 d0                	mov    eax,edx
c0028324:	c1 f8 1f             	sar    eax,0x1f
c0028327:	83 e0 02             	and    eax,0x2
c002832a:	48                   	dec    eax
c002832b:	83 c4 0c             	add    esp,0xc
c002832e:	5b                   	pop    ebx
c002832f:	5e                   	pop    esi
c0028330:	5f                   	pop    edi
c0028331:	5d                   	pop    ebp
c0028332:	c3                   	ret    

c0028333 <__eqdf2>:
c0028333:	55                   	push   ebp
c0028334:	89 e5                	mov    ebp,esp
c0028336:	50                   	push   eax
c0028337:	6a 01                	push   0x1
c0028339:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002833c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002833f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028342:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028345:	e8 fb fe ff ff       	call   c0028245 <__cmpdf2>
c002834a:	83 c4 18             	add    esp,0x18
c002834d:	c9                   	leave  
c002834e:	c3                   	ret    

c002834f <__nedf2>:
c002834f:	eb e2                	jmp    c0028333 <__eqdf2>

c0028351 <__gtdf2>:
c0028351:	55                   	push   ebp
c0028352:	89 e5                	mov    ebp,esp
c0028354:	50                   	push   eax
c0028355:	6a ff                	push   0xffffffff
c0028357:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002835a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002835d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028360:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028363:	e8 dd fe ff ff       	call   c0028245 <__cmpdf2>
c0028368:	83 c4 18             	add    esp,0x18
c002836b:	c9                   	leave  
c002836c:	c3                   	ret    

c002836d <__gedf2>:
c002836d:	eb e2                	jmp    c0028351 <__gtdf2>

c002836f <__ltdf2>:
c002836f:	eb c2                	jmp    c0028333 <__eqdf2>

c0028371 <__ledf2>:
c0028371:	eb c0                	jmp    c0028333 <__eqdf2>

c0028373 <__truncdfsf2>:
c0028373:	55                   	push   ebp
c0028374:	89 e5                	mov    ebp,esp
c0028376:	57                   	push   edi
c0028377:	56                   	push   esi
c0028378:	53                   	push   ebx
c0028379:	83 ec 0c             	sub    esp,0xc
c002837c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002837f:	89 d1                	mov    ecx,edx
c0028381:	c1 f9 14             	sar    ecx,0x14
c0028384:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028387:	89 df                	mov    edi,ebx
c0028389:	c1 e7 0b             	shl    edi,0xb
c002838c:	89 d0                	mov    eax,edx
c002838e:	c1 e0 0b             	shl    eax,0xb
c0028391:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028396:	c1 eb 15             	shr    ebx,0x15
c0028399:	09 d8                	or     eax,ebx
c002839b:	89 cb                	mov    ebx,ecx
c002839d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00283a3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00283a9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00283af:	0f 86 9e 00 00 00    	jbe    c0028453 <__truncdfsf2+0xe0>
c00283b5:	85 db                	test   ebx,ebx
c00283b7:	75 0a                	jne    c00283c3 <__truncdfsf2+0x50>
c00283b9:	c1 fa 17             	sar    edx,0x17
c00283bc:	30 d2                	xor    dl,dl
c00283be:	e9 84 00 00 00       	jmp    c0028447 <__truncdfsf2+0xd4>
c00283c3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00283c9:	83 fe 83             	cmp    esi,0xffffff83
c00283cc:	7d 4b                	jge    c0028419 <__truncdfsf2+0xa6>
c00283ce:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00283d3:	29 f1                	sub    ecx,esi
c00283d5:	83 f9 1f             	cmp    ecx,0x1f
c00283d8:	7f 6b                	jg     c0028445 <__truncdfsf2+0xd2>
c00283da:	0d 00 00 00 80       	or     eax,0x80000000
c00283df:	89 c3                	mov    ebx,eax
c00283e1:	d3 eb                	shr    ebx,cl
c00283e3:	be 01 00 00 00       	mov    esi,0x1
c00283e8:	d3 e6                	shl    esi,cl
c00283ea:	4e                   	dec    esi
c00283eb:	21 f0                	and    eax,esi
c00283ed:	09 f8                	or     eax,edi
c00283ef:	0f 95 c0             	setne  al
c00283f2:	0f b6 c0             	movzx  eax,al
c00283f5:	09 c3                	or     ebx,eax
c00283f7:	89 d9                	mov    ecx,ebx
c00283f9:	c1 e9 08             	shr    ecx,0x8
c00283fc:	f6 c3 7f             	test   bl,0x7f
c00283ff:	0f 95 c0             	setne  al
c0028402:	09 c8                	or     eax,ecx
c0028404:	83 e0 01             	and    eax,0x1
c0028407:	c1 eb 07             	shr    ebx,0x7
c002840a:	21 c3                	and    ebx,eax
c002840c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028412:	09 d1                	or     ecx,edx
c0028414:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028417:	eb 76                	jmp    c002848f <__truncdfsf2+0x11c>
c0028419:	83 c6 80             	add    esi,0xffffff80
c002841c:	7e 1d                	jle    c002843b <__truncdfsf2+0xc8>
c002841e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028424:	75 0b                	jne    c0028431 <__truncdfsf2+0xbe>
c0028426:	09 f8                	or     eax,edi
c0028428:	74 09                	je     c0028433 <__truncdfsf2+0xc0>
c002842a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002842f:	eb 02                	jmp    c0028433 <__truncdfsf2+0xc0>
c0028431:	31 c0                	xor    eax,eax
c0028433:	c1 fa 17             	sar    edx,0x17
c0028436:	80 ca ff             	or     dl,0xff
c0028439:	eb 0e                	jmp    c0028449 <__truncdfsf2+0xd6>
c002843b:	c1 fa 1f             	sar    edx,0x1f
c002843e:	c1 e2 08             	shl    edx,0x8
c0028441:	09 ca                	or     edx,ecx
c0028443:	eb 04                	jmp    c0028449 <__truncdfsf2+0xd6>
c0028445:	31 d2                	xor    edx,edx
c0028447:	31 c0                	xor    eax,eax
c0028449:	c1 e2 17             	shl    edx,0x17
c002844c:	c1 e8 08             	shr    eax,0x8
c002844f:	09 d0                	or     eax,edx
c0028451:	eb 3c                	jmp    c002848f <__truncdfsf2+0x11c>
c0028453:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028459:	89 ca                	mov    edx,ecx
c002845b:	c1 fa 0b             	sar    edx,0xb
c002845e:	c1 e2 08             	shl    edx,0x8
c0028461:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028464:	31 db                	xor    ebx,ebx
c0028466:	85 ff                	test   edi,edi
c0028468:	0f 95 c3             	setne  bl
c002846b:	09 d8                	or     eax,ebx
c002846d:	89 c3                	mov    ebx,eax
c002846f:	c1 eb 08             	shr    ebx,0x8
c0028472:	a8 7f                	test   al,0x7f
c0028474:	0f 95 c2             	setne  dl
c0028477:	89 d6                	mov    esi,edx
c0028479:	09 de                	or     esi,ebx
c002847b:	83 e6 01             	and    esi,0x1
c002847e:	c1 e8 07             	shr    eax,0x7
c0028481:	21 f0                	and    eax,esi
c0028483:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028486:	09 ca                	or     edx,ecx
c0028488:	c1 e2 17             	shl    edx,0x17
c002848b:	09 da                	or     edx,ebx
c002848d:	01 d0                	add    eax,edx
c002848f:	83 c4 0c             	add    esp,0xc
c0028492:	5b                   	pop    ebx
c0028493:	5e                   	pop    esi
c0028494:	5f                   	pop    edi
c0028495:	5d                   	pop    ebp
c0028496:	c3                   	ret    

c0028497 <__extendsfdf2>:
c0028497:	55                   	push   ebp
c0028498:	89 e5                	mov    ebp,esp
c002849a:	57                   	push   edi
c002849b:	56                   	push   esi
c002849c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002849f:	89 d1                	mov    ecx,edx
c00284a1:	c1 f9 17             	sar    ecx,0x17
c00284a4:	c1 e2 08             	shl    edx,0x8
c00284a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00284ad:	89 c8                	mov    eax,ecx
c00284af:	80 e4 f8             	and    ah,0xf8
c00284b2:	8d 71 01             	lea    esi,[ecx+0x1]
c00284b5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00284bb:	75 27                	jne    c00284e4 <__extendsfdf2+0x4d>
c00284bd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00284c3:	75 18                	jne    c00284dd <__extendsfdf2+0x46>
c00284c5:	85 d2                	test   edx,edx
c00284c7:	74 20                	je     c00284e9 <__extendsfdf2+0x52>
c00284c9:	41                   	inc    ecx
c00284ca:	01 d2                	add    edx,edx
c00284cc:	79 fb                	jns    c00284c9 <__extendsfdf2+0x32>
c00284ce:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00284d4:	29 c8                	sub    eax,ecx
c00284d6:	05 81 03 00 00       	add    eax,0x381
c00284db:	eb 0c                	jmp    c00284e9 <__extendsfdf2+0x52>
c00284dd:	05 00 07 00 00       	add    eax,0x700
c00284e2:	eb 05                	jmp    c00284e9 <__extendsfdf2+0x52>
c00284e4:	05 80 03 00 00       	add    eax,0x380
c00284e9:	c1 e0 14             	shl    eax,0x14
c00284ec:	89 c1                	mov    ecx,eax
c00284ee:	89 d0                	mov    eax,edx
c00284f0:	c1 e8 0b             	shr    eax,0xb
c00284f3:	09 c1                	or     ecx,eax
c00284f5:	c1 e2 15             	shl    edx,0x15
c00284f8:	89 d0                	mov    eax,edx
c00284fa:	89 ca                	mov    edx,ecx
c00284fc:	5e                   	pop    esi
c00284fd:	5f                   	pop    edi
c00284fe:	5d                   	pop    ebp
c00284ff:	c3                   	ret    

c0028500 <fabs>:
c0028500:	83 ec 0c             	sub    esp,0xc
c0028503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028507:	89 04 24             	mov    DWORD PTR [esp],eax
c002850a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002850e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028513:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028517:	dd 04 24             	fld    QWORD PTR [esp]
c002851a:	83 c4 0c             	add    esp,0xc
c002851d:	c3                   	ret    
c002851e:	66 90                	xchg   ax,ax

c0028520 <lrint>:
c0028520:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028524:	83 ec 04             	sub    esp,0x4
c0028527:	db 1c 24             	fistp  DWORD PTR [esp]
c002852a:	58                   	pop    eax
c002852b:	c3                   	ret    

c002852c <lrintf>:
c002852c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028530:	83 ec 04             	sub    esp,0x4
c0028533:	db 1c 24             	fistp  DWORD PTR [esp]
c0028536:	58                   	pop    eax
c0028537:	c3                   	ret    

Disassembly of section .init:

c0028538 <_init>:
c0028538:	55                   	push   ebp
c0028539:	89 e5                	mov    ebp,esp
c002853b:	e8 d8 7b fd ff       	call   c0000118 <frame_dummy>
c0028540:	e8 63 e0 ff ff       	call   c00265a8 <__do_global_ctors_aux>
c0028545:	5d                   	pop    ebp
c0028546:	c3                   	ret    

Disassembly of section .fini:

c0028547 <_fini>:
c0028547:	55                   	push   ebp
c0028548:	89 e5                	mov    ebp,esp
c002854a:	e8 59 7b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002854f:	5d                   	pop    ebp
c0028550:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028552 <Computer::~Computer()>:
c0028552:	83 ec 0c             	sub    esp,0xc
c0028555:	ba 88 a0 02 c0       	mov    edx,0xc002a088
c002855a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855e:	89 10                	mov    DWORD PTR [eax],edx
c0028560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028564:	83 ec 0c             	sub    esp,0xc
c0028567:	50                   	push   eax
c0028568:	e8 81 bb fe ff       	call   c00140ee <Device::~Device()>
c002856d:	83 c4 10             	add    esp,0x10
c0028570:	90                   	nop
c0028571:	83 c4 0c             	add    esp,0xc
c0028574:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028576 <Computer::~Computer()>:
c0028576:	83 ec 0c             	sub    esp,0xc
c0028579:	83 ec 0c             	sub    esp,0xc
c002857c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028580:	e8 cd ff ff ff       	call   c0028552 <Computer::~Computer()>
c0028585:	83 c4 10             	add    esp,0x10
c0028588:	83 ec 08             	sub    esp,0x8
c002858b:	68 ec 01 00 00       	push   0x1ec
c0028590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028594:	e8 7d a7 fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028599:	83 c4 10             	add    esp,0x10
c002859c:	83 c4 0c             	add    esp,0xc
c002859f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00285a0 <idleCommon()>:
c00285a0:	83 ec 0c             	sub    esp,0xc
c00285a3:	e8 14 57 ff ff       	call   c001dcbc <lockScheduler()>
c00285a8:	e8 4b 5a ff ff       	call   c001dff8 <schedule()>
c00285ad:	83 c4 0c             	add    esp,0xc
c00285b0:	e9 09 57 ff ff       	jmp    c001dcbe <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00285b6 <LinkedList<UnixFile>::~LinkedList()>:
c00285b6:	90                   	nop
c00285b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00285b8 <LinkedList<UnixFile>::LinkedList()>:
c00285b8:	83 ec 0c             	sub    esp,0xc
c00285bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285fb:	83 ec 0c             	sub    esp,0xc
c00285fe:	68 46 a3 02 c0       	push   0xc002a346
c0028603:	e8 ee a7 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0028608:	83 c4 10             	add    esp,0x10
c002860b:	90                   	nop
c002860c:	83 c4 0c             	add    esp,0xc
c002860f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028610 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028610:	83 ec 0c             	sub    esp,0xc
c0028613:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028618:	75 10                	jne    c002862a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002861a:	83 ec 0c             	sub    esp,0xc
c002861d:	68 60 a3 02 c0       	push   0xc002a360
c0028622:	e8 70 1e ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0028627:	83 c4 10             	add    esp,0x10
c002862a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028630:	85 c0                	test   eax,eax
c0028632:	74 34                	je     c0028668 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002863b:	85 c0                	test   eax,eax
c002863d:	74 29                	je     c0028668 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002863f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028643:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028646:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002864a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002864d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028651:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028655:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002865f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028666:	eb 65                	jmp    c00286cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866c:	8b 00                	mov    eax,DWORD PTR [eax]
c002866e:	85 c0                	test   eax,eax
c0028670:	75 4b                	jne    c00286bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028676:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028679:	85 c0                	test   eax,eax
c002867b:	75 40                	jne    c00286bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002867d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028685:	89 10                	mov    DWORD PTR [eax],edx
c0028687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002868f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028699:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286a7:	85 c0                	test   eax,eax
c00286a9:	74 22                	je     c00286cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00286ab:	83 ec 0c             	sub    esp,0xc
c00286ae:	68 82 a3 02 c0       	push   0xc002a382
c00286b3:	e8 df 1d ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00286b8:	83 c4 10             	add    esp,0x10
c00286bb:	eb 10                	jmp    c00286cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00286bd:	83 ec 0c             	sub    esp,0xc
c00286c0:	68 8c a3 02 c0       	push   0xc002a38c
c00286c5:	e8 cd 1d ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00286ca:	83 c4 10             	add    esp,0x10
c00286cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286d4:	8d 50 01             	lea    edx,[eax+0x1]
c00286d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286de:	90                   	nop
c00286df:	83 c4 0c             	add    esp,0xc
c00286e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00286e4 <LinkedList<UnixFile>::getFirstElement()>:
c00286e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00286ec <LinkedList<UnixFile>::removeFirst()>:
c00286ec:	83 ec 0c             	sub    esp,0xc
c00286ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00286f5:	85 c0                	test   eax,eax
c00286f7:	75 12                	jne    c002870b <LinkedList<UnixFile>::removeFirst()+0x1f>
c00286f9:	83 ec 0c             	sub    esp,0xc
c00286fc:	68 98 a3 02 c0       	push   0xc002a398
c0028701:	e8 91 1d ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0028706:	83 c4 10             	add    esp,0x10
c0028709:	eb 7e                	jmp    c0028789 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028712:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028715:	85 c0                	test   eax,eax
c0028717:	74 10                	je     c0028729 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028719:	83 ec 0c             	sub    esp,0xc
c002871c:	68 e3 a3 02 c0       	push   0xc002a3e3
c0028721:	e8 71 1d ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0028726:	83 c4 10             	add    esp,0x10
c0028729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872d:	8b 00                	mov    eax,DWORD PTR [eax]
c002872f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028732:	85 c0                	test   eax,eax
c0028734:	75 33                	jne    c0028769 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002874b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028752:	83 f8 01             	cmp    eax,0x1
c0028755:	74 21                	je     c0028778 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028757:	83 ec 0c             	sub    esp,0xc
c002875a:	68 bc a3 02 c0       	push   0xc002a3bc
c002875f:	e8 33 1d ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0028764:	83 c4 10             	add    esp,0x10
c0028767:	eb 0f                	jmp    c0028778 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876d:	8b 00                	mov    eax,DWORD PTR [eax]
c002876f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028776:	89 10                	mov    DWORD PTR [eax],edx
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002877f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028786:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028789:	83 c4 0c             	add    esp,0xc
c002878c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002878e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002878e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028792:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028795:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028796 <DriverlessDevice::~DriverlessDevice()>:
c0028796:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c002879b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002879f:	89 10                	mov    DWORD PTR [eax],edx
c00287a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287a5:	50                   	push   eax
c00287a6:	e8 43 b9 fe ff       	call   c00140ee <Device::~Device()>
c00287ab:	83 c4 04             	add    esp,0x4
c00287ae:	90                   	nop
c00287af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00287b0 <DriverlessDevice::~DriverlessDevice()>:
c00287b0:	83 ec 0c             	sub    esp,0xc
c00287b3:	83 ec 0c             	sub    esp,0xc
c00287b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ba:	e8 d7 ff ff ff       	call   c0028796 <DriverlessDevice::~DriverlessDevice()>
c00287bf:	83 c4 10             	add    esp,0x10
c00287c2:	83 ec 08             	sub    esp,0x8
c00287c5:	68 58 01 00 00       	push   0x158
c00287ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ce:	e8 43 a5 fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c00287d3:	83 c4 10             	add    esp,0x10
c00287d6:	83 c4 0c             	add    esp,0xc
c00287d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00287da <LinkedList<Device>::addElement(Device*)>:
c00287da:	83 ec 0c             	sub    esp,0xc
c00287dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287e2:	75 10                	jne    c00287f4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00287e4:	83 ec 0c             	sub    esp,0xc
c00287e7:	68 60 a3 02 c0       	push   0xc002a360
c00287ec:	e8 a6 1c ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00287f1:	83 c4 10             	add    esp,0x10
c00287f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fa:	85 c0                	test   eax,eax
c00287fc:	74 3a                	je     c0028838 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028802:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028805:	85 c0                	test   eax,eax
c0028807:	74 2f                	je     c0028838 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028810:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028814:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002881a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028822:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028829:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002882c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028836:	eb 68                	jmp    c00288a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883c:	8b 00                	mov    eax,DWORD PTR [eax]
c002883e:	85 c0                	test   eax,eax
c0028840:	75 4e                	jne    c0028890 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028849:	85 c0                	test   eax,eax
c002884b:	75 43                	jne    c0028890 <LinkedList<Device>::addElement(Device*)+0xb6>
c002884d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028855:	89 10                	mov    DWORD PTR [eax],edx
c0028857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002885f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028869:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028877:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002887a:	85 c0                	test   eax,eax
c002887c:	74 22                	je     c00288a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002887e:	83 ec 0c             	sub    esp,0xc
c0028881:	68 82 a3 02 c0       	push   0xc002a382
c0028886:	e8 0c 1c ff ff       	call   c001a497 <Krnl::panic(char const*)>
c002888b:	83 c4 10             	add    esp,0x10
c002888e:	eb 10                	jmp    c00288a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028890:	83 ec 0c             	sub    esp,0xc
c0028893:	68 8c a3 02 c0       	push   0xc002a38c
c0028898:	e8 fa 1b ff ff       	call   c001a497 <Krnl::panic(char const*)>
c002889d:	83 c4 10             	add    esp,0x10
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a7:	8d 50 01             	lea    edx,[eax+0x1]
c00288aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288b1:	90                   	nop
c00288b2:	83 c4 0c             	add    esp,0xc
c00288b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00288b6 <LinkedList<Device>::LinkedList()>:
c00288b6:	83 ec 0c             	sub    esp,0xc
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288f9:	83 ec 0c             	sub    esp,0xc
c00288fc:	68 46 a3 02 c0       	push   0xc002a346
c0028901:	e8 f0 a4 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0028906:	83 c4 10             	add    esp,0x10
c0028909:	90                   	nop
c002890a:	83 c4 0c             	add    esp,0xc
c002890d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002890e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002890e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028912:	8b 00                	mov    eax,DWORD PTR [eax]
c0028914:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002891a:	8b 00                	mov    eax,DWORD PTR [eax]
c002891c:	85 c0                	test   eax,eax
c002891e:	75 0e                	jne    c002892e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028924:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028927:	85 c0                	test   eax,eax
c0028929:	75 03                	jne    c002892e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002892b:	b0 01                	mov    al,0x1
c002892d:	c3                   	ret    
c002892e:	b0 00                	mov    al,0x0
c0028930:	90                   	nop
c0028931:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028932:	83 ec 0c             	sub    esp,0xc
c0028935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028939:	8b 00                	mov    eax,DWORD PTR [eax]
c002893b:	85 c0                	test   eax,eax
c002893d:	75 15                	jne    c0028954 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002893f:	83 ec 0c             	sub    esp,0xc
c0028942:	68 98 a3 02 c0       	push   0xc002a398
c0028947:	e8 4b 1b ff ff       	call   c001a497 <Krnl::panic(char const*)>
c002894c:	83 c4 10             	add    esp,0x10
c002894f:	e9 88 00 00 00       	jmp    c00289dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028958:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002895b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002895e:	85 c0                	test   eax,eax
c0028960:	0f 95 c0             	setne  al
c0028963:	84 c0                	test   al,al
c0028965:	74 10                	je     c0028977 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028967:	83 ec 0c             	sub    esp,0xc
c002896a:	68 e3 a3 02 c0       	push   0xc002a3e3
c002896f:	e8 23 1b ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0028974:	83 c4 10             	add    esp,0x10
c0028977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897b:	8b 00                	mov    eax,DWORD PTR [eax]
c002897d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028980:	85 c0                	test   eax,eax
c0028982:	0f 94 c0             	sete   al
c0028985:	84 c0                	test   al,al
c0028987:	74 33                	je     c00289bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289a5:	83 f8 01             	cmp    eax,0x1
c00289a8:	74 21                	je     c00289cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00289aa:	83 ec 0c             	sub    esp,0xc
c00289ad:	68 bc a3 02 c0       	push   0xc002a3bc
c00289b2:	e8 e0 1a ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00289b7:	83 c4 10             	add    esp,0x10
c00289ba:	eb 0f                	jmp    c00289cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00289bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00289c2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00289c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c9:	89 10                	mov    DWORD PTR [eax],edx
c00289cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289d2:	8d 50 ff             	lea    edx,[eax-0x1]
c00289d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289dc:	83 c4 0c             	add    esp,0xc
c00289df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00289e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00289e0:	83 ec 0c             	sub    esp,0xc
c00289e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289e8:	75 10                	jne    c00289fa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00289ea:	83 ec 0c             	sub    esp,0xc
c00289ed:	68 60 a3 02 c0       	push   0xc002a360
c00289f2:	e8 a0 1a ff ff       	call   c001a497 <Krnl::panic(char const*)>
c00289f7:	83 c4 10             	add    esp,0x10
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a00:	85 c0                	test   eax,eax
c0028a02:	74 34                	je     c0028a38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a0b:	85 c0                	test   eax,eax
c0028a0d:	74 29                	je     c0028a38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a1a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a2f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a36:	eb 65                	jmp    c0028a9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3e:	85 c0                	test   eax,eax
c0028a40:	75 4b                	jne    c0028a8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	85 c0                	test   eax,eax
c0028a4b:	75 40                	jne    c0028a8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a55:	89 10                	mov    DWORD PTR [eax],edx
c0028a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a77:	85 c0                	test   eax,eax
c0028a79:	74 22                	je     c0028a9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a7b:	83 ec 0c             	sub    esp,0xc
c0028a7e:	68 82 a3 02 c0       	push   0xc002a382
c0028a83:	e8 0f 1a ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0028a88:	83 c4 10             	add    esp,0x10
c0028a8b:	eb 10                	jmp    c0028a9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a8d:	83 ec 0c             	sub    esp,0xc
c0028a90:	68 8c a3 02 c0       	push   0xc002a38c
c0028a95:	e8 fd 19 ff ff       	call   c001a497 <Krnl::panic(char const*)>
c0028a9a:	83 c4 10             	add    esp,0x10
c0028a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa4:	8d 50 01             	lea    edx,[eax+0x1]
c0028aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aae:	90                   	nop
c0028aaf:	83 c4 0c             	add    esp,0xc
c0028ab2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028ab4 <ACPI::~ACPI()>:
c0028ab4:	83 ec 0c             	sub    esp,0xc
c0028ab7:	ba 6c b5 02 c0       	mov    edx,0xc002b56c
c0028abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac0:	89 10                	mov    DWORD PTR [eax],edx
c0028ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac6:	83 ec 0c             	sub    esp,0xc
c0028ac9:	50                   	push   eax
c0028aca:	e8 1f b6 fe ff       	call   c00140ee <Device::~Device()>
c0028acf:	83 c4 10             	add    esp,0x10
c0028ad2:	90                   	nop
c0028ad3:	83 c4 0c             	add    esp,0xc
c0028ad6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ad8 <ACPI::~ACPI()>:
c0028ad8:	83 ec 0c             	sub    esp,0xc
c0028adb:	83 ec 0c             	sub    esp,0xc
c0028ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae2:	e8 cd ff ff ff       	call   c0028ab4 <ACPI::~ACPI()>
c0028ae7:	83 c4 10             	add    esp,0x10
c0028aea:	83 ec 08             	sub    esp,0x8
c0028aed:	68 68 12 00 00       	push   0x1268
c0028af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af6:	e8 1b a2 fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028afb:	83 c4 10             	add    esp,0x10
c0028afe:	83 c4 0c             	add    esp,0xc
c0028b01:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028b02 <CPU::~CPU()>:
c0028b02:	83 ec 0c             	sub    esp,0xc
c0028b05:	ba 5c b9 02 c0       	mov    edx,0xc002b95c
c0028b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0e:	89 10                	mov    DWORD PTR [eax],edx
c0028b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b14:	83 ec 0c             	sub    esp,0xc
c0028b17:	50                   	push   eax
c0028b18:	e8 d1 b5 fe ff       	call   c00140ee <Device::~Device()>
c0028b1d:	83 c4 10             	add    esp,0x10
c0028b20:	90                   	nop
c0028b21:	83 c4 0c             	add    esp,0xc
c0028b24:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028b26 <CPU::~CPU()>:
c0028b26:	83 ec 0c             	sub    esp,0xc
c0028b29:	83 ec 0c             	sub    esp,0xc
c0028b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b30:	e8 cd ff ff ff       	call   c0028b02 <CPU::~CPU()>
c0028b35:	83 c4 10             	add    esp,0x10
c0028b38:	83 ec 08             	sub    esp,0x8
c0028b3b:	68 98 11 00 00       	push   0x1198
c0028b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b44:	e8 cd a1 fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028b49:	83 c4 10             	add    esp,0x10
c0028b4c:	83 c4 0c             	add    esp,0xc
c0028b4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b50 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b50:	90                   	nop
c0028b51:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b52 <ThreadControlBlock::ThreadControlBlock()>:
c0028b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b56:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b61:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b6c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b77:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b82:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b8a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b8e:	90                   	nop
c0028b8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b90:	83 ec 0c             	sub    esp,0xc
c0028b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bd3:	83 ec 0c             	sub    esp,0xc
c0028bd6:	68 46 a3 02 c0       	push   0xc002a346
c0028bdb:	e8 16 a2 fe ff       	call   c0012df6 <Dbg::kprintf(char const*, ...)>
c0028be0:	83 c4 10             	add    esp,0x10
c0028be3:	90                   	nop
c0028be4:	83 c4 0c             	add    esp,0xc
c0028be7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028be8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bef:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028bf0 <Vm::_FPUState::_FPUState()>:
c0028bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bf4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028bfb:	90                   	nop
c0028bfc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028bfe <PCI::~PCI()>:
c0028bfe:	83 ec 0c             	sub    esp,0xc
c0028c01:	ba 50 ca 02 c0       	mov    edx,0xc002ca50
c0028c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0a:	89 10                	mov    DWORD PTR [eax],edx
c0028c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c10:	83 ec 0c             	sub    esp,0xc
c0028c13:	50                   	push   eax
c0028c14:	e8 ad ae fe ff       	call   c0013ac6 <Bus::~Bus()>
c0028c19:	83 c4 10             	add    esp,0x10
c0028c1c:	90                   	nop
c0028c1d:	83 c4 0c             	add    esp,0xc
c0028c20:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028c22 <PCI::~PCI()>:
c0028c22:	83 ec 0c             	sub    esp,0xc
c0028c25:	83 ec 0c             	sub    esp,0xc
c0028c28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2c:	e8 cd ff ff ff       	call   c0028bfe <PCI::~PCI()>
c0028c31:	83 c4 10             	add    esp,0x10
c0028c34:	83 ec 08             	sub    esp,0x8
c0028c37:	68 58 01 00 00       	push   0x158
c0028c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c40:	e8 d1 a0 fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028c45:	83 c4 10             	add    esp,0x10
c0028c48:	83 c4 0c             	add    esp,0xc
c0028c4b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c4c <IDE::~IDE()>:
c0028c4c:	83 ec 0c             	sub    esp,0xc
c0028c4f:	ba b4 cc 02 c0       	mov    edx,0xc002ccb4
c0028c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c58:	89 10                	mov    DWORD PTR [eax],edx
c0028c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5e:	83 ec 0c             	sub    esp,0xc
c0028c61:	50                   	push   eax
c0028c62:	e8 77 b9 fe ff       	call   c00145de <HardDiskController::~HardDiskController()>
c0028c67:	83 c4 10             	add    esp,0x10
c0028c6a:	90                   	nop
c0028c6b:	83 c4 0c             	add    esp,0xc
c0028c6e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c70 <IDE::~IDE()>:
c0028c70:	83 ec 0c             	sub    esp,0xc
c0028c73:	83 ec 0c             	sub    esp,0xc
c0028c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c7a:	e8 cd ff ff ff       	call   c0028c4c <IDE::~IDE()>
c0028c7f:	83 c4 10             	add    esp,0x10
c0028c82:	83 ec 08             	sub    esp,0x8
c0028c85:	68 70 02 00 00       	push   0x270
c0028c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8e:	e8 83 a0 fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028c93:	83 c4 10             	add    esp,0x10
c0028c96:	83 c4 0c             	add    esp,0xc
c0028c99:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c9a <SATABus::~SATABus()>:
c0028c9a:	83 ec 0c             	sub    esp,0xc
c0028c9d:	ba 94 cd 02 c0       	mov    edx,0xc002cd94
c0028ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca6:	89 10                	mov    DWORD PTR [eax],edx
c0028ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cac:	83 ec 0c             	sub    esp,0xc
c0028caf:	50                   	push   eax
c0028cb0:	e8 29 b9 fe ff       	call   c00145de <HardDiskController::~HardDiskController()>
c0028cb5:	83 c4 10             	add    esp,0x10
c0028cb8:	90                   	nop
c0028cb9:	83 c4 0c             	add    esp,0xc
c0028cbc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028cbe <SATABus::~SATABus()>:
c0028cbe:	83 ec 0c             	sub    esp,0xc
c0028cc1:	83 ec 0c             	sub    esp,0xc
c0028cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc8:	e8 cd ff ff ff       	call   c0028c9a <SATABus::~SATABus()>
c0028ccd:	83 c4 10             	add    esp,0x10
c0028cd0:	83 ec 08             	sub    esp,0x8
c0028cd3:	68 64 01 00 00       	push   0x164
c0028cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cdc:	e8 35 a0 fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028ce1:	83 c4 10             	add    esp,0x10
c0028ce4:	83 c4 0c             	add    esp,0xc
c0028ce7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ce8 <ATA::~ATA()>:
c0028ce8:	83 ec 0c             	sub    esp,0xc
c0028ceb:	ba e0 cd 02 c0       	mov    edx,0xc002cde0
c0028cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf4:	89 10                	mov    DWORD PTR [eax],edx
c0028cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfa:	83 ec 0c             	sub    esp,0xc
c0028cfd:	50                   	push   eax
c0028cfe:	e8 cd b9 fe ff       	call   c00146d0 <PhysicalDisk::~PhysicalDisk()>
c0028d03:	83 c4 10             	add    esp,0x10
c0028d06:	90                   	nop
c0028d07:	83 c4 0c             	add    esp,0xc
c0028d0a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028d0c <ATA::~ATA()>:
c0028d0c:	83 ec 0c             	sub    esp,0xc
c0028d0f:	83 ec 0c             	sub    esp,0xc
c0028d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d16:	e8 cd ff ff ff       	call   c0028ce8 <ATA::~ATA()>
c0028d1b:	83 c4 10             	add    esp,0x10
c0028d1e:	83 ec 08             	sub    esp,0x8
c0028d21:	68 7c 01 00 00       	push   0x17c
c0028d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2a:	e8 e7 9f fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028d2f:	83 c4 10             	add    esp,0x10
c0028d32:	83 c4 0c             	add    esp,0xc
c0028d35:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028d36 <ATAPI::~ATAPI()>:
c0028d36:	83 ec 0c             	sub    esp,0xc
c0028d39:	ba 18 ce 02 c0       	mov    edx,0xc002ce18
c0028d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d42:	89 10                	mov    DWORD PTR [eax],edx
c0028d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d48:	83 ec 0c             	sub    esp,0xc
c0028d4b:	50                   	push   eax
c0028d4c:	e8 7f b9 fe ff       	call   c00146d0 <PhysicalDisk::~PhysicalDisk()>
c0028d51:	83 c4 10             	add    esp,0x10
c0028d54:	90                   	nop
c0028d55:	83 c4 0c             	add    esp,0xc
c0028d58:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d5a <ATAPI::~ATAPI()>:
c0028d5a:	83 ec 0c             	sub    esp,0xc
c0028d5d:	83 ec 0c             	sub    esp,0xc
c0028d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d64:	e8 cd ff ff ff       	call   c0028d36 <ATAPI::~ATAPI()>
c0028d69:	83 c4 10             	add    esp,0x10
c0028d6c:	83 ec 08             	sub    esp,0x8
c0028d6f:	68 80 01 00 00       	push   0x180
c0028d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d78:	e8 99 9f fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028d7d:	83 c4 10             	add    esp,0x10
c0028d80:	83 c4 0c             	add    esp,0xc
c0028d83:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d84 <SATA::~SATA()>:
c0028d84:	83 ec 0c             	sub    esp,0xc
c0028d87:	ba cc ce 02 c0       	mov    edx,0xc002cecc
c0028d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d90:	89 10                	mov    DWORD PTR [eax],edx
c0028d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d96:	83 ec 0c             	sub    esp,0xc
c0028d99:	50                   	push   eax
c0028d9a:	e8 31 b9 fe ff       	call   c00146d0 <PhysicalDisk::~PhysicalDisk()>
c0028d9f:	83 c4 10             	add    esp,0x10
c0028da2:	90                   	nop
c0028da3:	83 c4 0c             	add    esp,0xc
c0028da6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028da8 <SATA::~SATA()>:
c0028da8:	83 ec 0c             	sub    esp,0xc
c0028dab:	83 ec 0c             	sub    esp,0xc
c0028dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db2:	e8 cd ff ff ff       	call   c0028d84 <SATA::~SATA()>
c0028db7:	83 c4 10             	add    esp,0x10
c0028dba:	83 ec 08             	sub    esp,0x8
c0028dbd:	68 7c 01 00 00       	push   0x17c
c0028dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc6:	e8 4b 9f fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028dcb:	83 c4 10             	add    esp,0x10
c0028dce:	83 c4 0c             	add    esp,0xc
c0028dd1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028dd2 <SATAPI::~SATAPI()>:
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	ba a8 cf 02 c0       	mov    edx,0xc002cfa8
c0028dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dde:	89 10                	mov    DWORD PTR [eax],edx
c0028de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de4:	83 ec 0c             	sub    esp,0xc
c0028de7:	50                   	push   eax
c0028de8:	e8 e3 b8 fe ff       	call   c00146d0 <PhysicalDisk::~PhysicalDisk()>
c0028ded:	83 c4 10             	add    esp,0x10
c0028df0:	90                   	nop
c0028df1:	83 c4 0c             	add    esp,0xc
c0028df4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028df6 <SATAPI::~SATAPI()>:
c0028df6:	83 ec 0c             	sub    esp,0xc
c0028df9:	83 ec 0c             	sub    esp,0xc
c0028dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e00:	e8 cd ff ff ff       	call   c0028dd2 <SATAPI::~SATAPI()>
c0028e05:	83 c4 10             	add    esp,0x10
c0028e08:	83 ec 08             	sub    esp,0x8
c0028e0b:	68 80 01 00 00       	push   0x180
c0028e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e14:	e8 fd 9e fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	83 c4 0c             	add    esp,0xc
c0028e1f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028e20 <AVX::~AVX()>:
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	ba e8 cf 02 c0       	mov    edx,0xc002cfe8
c0028e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2c:	89 10                	mov    DWORD PTR [eax],edx
c0028e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e32:	83 ec 0c             	sub    esp,0xc
c0028e35:	50                   	push   eax
c0028e36:	e8 19 b9 fe ff       	call   c0014754 <FPU::~FPU()>
c0028e3b:	83 c4 10             	add    esp,0x10
c0028e3e:	90                   	nop
c0028e3f:	83 c4 0c             	add    esp,0xc
c0028e42:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028e44 <AVX::~AVX()>:
c0028e44:	83 ec 0c             	sub    esp,0xc
c0028e47:	83 ec 0c             	sub    esp,0xc
c0028e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4e:	e8 cd ff ff ff       	call   c0028e20 <AVX::~AVX()>
c0028e53:	83 c4 10             	add    esp,0x10
c0028e56:	83 ec 08             	sub    esp,0x8
c0028e59:	68 58 01 00 00       	push   0x158
c0028e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e62:	e8 af 9e fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	83 c4 0c             	add    esp,0xc
c0028e6d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e6e <MMX::~MMX()>:
c0028e6e:	83 ec 0c             	sub    esp,0xc
c0028e71:	ba 28 d0 02 c0       	mov    edx,0xc002d028
c0028e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7a:	89 10                	mov    DWORD PTR [eax],edx
c0028e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e80:	83 ec 0c             	sub    esp,0xc
c0028e83:	50                   	push   eax
c0028e84:	e8 cb b8 fe ff       	call   c0014754 <FPU::~FPU()>
c0028e89:	83 c4 10             	add    esp,0x10
c0028e8c:	90                   	nop
c0028e8d:	83 c4 0c             	add    esp,0xc
c0028e90:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e92 <MMX::~MMX()>:
c0028e92:	83 ec 0c             	sub    esp,0xc
c0028e95:	83 ec 0c             	sub    esp,0xc
c0028e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9c:	e8 cd ff ff ff       	call   c0028e6e <MMX::~MMX()>
c0028ea1:	83 c4 10             	add    esp,0x10
c0028ea4:	83 ec 08             	sub    esp,0x8
c0028ea7:	68 58 01 00 00       	push   0x158
c0028eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb0:	e8 61 9e fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	83 c4 0c             	add    esp,0xc
c0028ebb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028ebc <SSE::~SSE()>:
c0028ebc:	83 ec 0c             	sub    esp,0xc
c0028ebf:	ba 68 d0 02 c0       	mov    edx,0xc002d068
c0028ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec8:	89 10                	mov    DWORD PTR [eax],edx
c0028eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ece:	83 ec 0c             	sub    esp,0xc
c0028ed1:	50                   	push   eax
c0028ed2:	e8 7d b8 fe ff       	call   c0014754 <FPU::~FPU()>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	90                   	nop
c0028edb:	83 c4 0c             	add    esp,0xc
c0028ede:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ee0 <SSE::~SSE()>:
c0028ee0:	83 ec 0c             	sub    esp,0xc
c0028ee3:	83 ec 0c             	sub    esp,0xc
c0028ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eea:	e8 cd ff ff ff       	call   c0028ebc <SSE::~SSE()>
c0028eef:	83 c4 10             	add    esp,0x10
c0028ef2:	83 ec 08             	sub    esp,0x8
c0028ef5:	68 58 01 00 00       	push   0x158
c0028efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efe:	e8 13 9e fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028f03:	83 c4 10             	add    esp,0x10
c0028f06:	83 c4 0c             	add    esp,0xc
c0028f09:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028f0a <x87::~x87()>:
c0028f0a:	83 ec 0c             	sub    esp,0xc
c0028f0d:	ba a8 d0 02 c0       	mov    edx,0xc002d0a8
c0028f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f16:	89 10                	mov    DWORD PTR [eax],edx
c0028f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1c:	83 ec 0c             	sub    esp,0xc
c0028f1f:	50                   	push   eax
c0028f20:	e8 2f b8 fe ff       	call   c0014754 <FPU::~FPU()>
c0028f25:	83 c4 10             	add    esp,0x10
c0028f28:	90                   	nop
c0028f29:	83 c4 0c             	add    esp,0xc
c0028f2c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028f2e <x87::~x87()>:
c0028f2e:	83 ec 0c             	sub    esp,0xc
c0028f31:	83 ec 0c             	sub    esp,0xc
c0028f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f38:	e8 cd ff ff ff       	call   c0028f0a <x87::~x87()>
c0028f3d:	83 c4 10             	add    esp,0x10
c0028f40:	83 ec 08             	sub    esp,0x8
c0028f43:	68 58 01 00 00       	push   0x158
c0028f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4c:	e8 c5 9d fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028f51:	83 c4 10             	add    esp,0x10
c0028f54:	83 c4 0c             	add    esp,0xc
c0028f57:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f58 <IOAPIC::~IOAPIC()>:
c0028f58:	83 ec 0c             	sub    esp,0xc
c0028f5b:	ba 00 d2 02 c0       	mov    edx,0xc002d200
c0028f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f64:	89 10                	mov    DWORD PTR [eax],edx
c0028f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6a:	83 ec 0c             	sub    esp,0xc
c0028f6d:	50                   	push   eax
c0028f6e:	e8 7b b1 fe ff       	call   c00140ee <Device::~Device()>
c0028f73:	83 c4 10             	add    esp,0x10
c0028f76:	90                   	nop
c0028f77:	83 c4 0c             	add    esp,0xc
c0028f7a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f7c <IOAPIC::~IOAPIC()>:
c0028f7c:	83 ec 0c             	sub    esp,0xc
c0028f7f:	83 ec 0c             	sub    esp,0xc
c0028f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f86:	e8 cd ff ff ff       	call   c0028f58 <IOAPIC::~IOAPIC()>
c0028f8b:	83 c4 10             	add    esp,0x10
c0028f8e:	83 ec 08             	sub    esp,0x8
c0028f91:	68 68 01 00 00       	push   0x168
c0028f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9a:	e8 77 9d fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	83 c4 0c             	add    esp,0xc
c0028fa5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028fa6 <APIC::~APIC()>:
c0028fa6:	83 ec 0c             	sub    esp,0xc
c0028fa9:	ba b8 d1 02 c0       	mov    edx,0xc002d1b8
c0028fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb2:	89 10                	mov    DWORD PTR [eax],edx
c0028fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb8:	83 ec 0c             	sub    esp,0xc
c0028fbb:	50                   	push   eax
c0028fbc:	e8 5d bc fe ff       	call   c0014c1e <InterruptController::~InterruptController()>
c0028fc1:	83 c4 10             	add    esp,0x10
c0028fc4:	90                   	nop
c0028fc5:	83 c4 0c             	add    esp,0xc
c0028fc8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028fca <APIC::~APIC()>:
c0028fca:	83 ec 0c             	sub    esp,0xc
c0028fcd:	83 ec 0c             	sub    esp,0xc
c0028fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd4:	e8 cd ff ff ff       	call   c0028fa6 <APIC::~APIC()>
c0028fd9:	83 c4 10             	add    esp,0x10
c0028fdc:	83 ec 08             	sub    esp,0x8
c0028fdf:	68 58 21 00 00       	push   0x2158
c0028fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe8:	e8 29 9d fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0028fed:	83 c4 10             	add    esp,0x10
c0028ff0:	83 c4 0c             	add    esp,0xc
c0028ff3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028ff4 <PIC::~PIC()>:
c0028ff4:	83 ec 0c             	sub    esp,0xc
c0028ff7:	ba 50 d2 02 c0       	mov    edx,0xc002d250
c0028ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029000:	89 10                	mov    DWORD PTR [eax],edx
c0029002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029006:	83 ec 0c             	sub    esp,0xc
c0029009:	50                   	push   eax
c002900a:	e8 0f bc fe ff       	call   c0014c1e <InterruptController::~InterruptController()>
c002900f:	83 c4 10             	add    esp,0x10
c0029012:	90                   	nop
c0029013:	83 c4 0c             	add    esp,0xc
c0029016:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029018 <PIC::~PIC()>:
c0029018:	83 ec 0c             	sub    esp,0xc
c002901b:	83 ec 0c             	sub    esp,0xc
c002901e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029022:	e8 cd ff ff ff       	call   c0028ff4 <PIC::~PIC()>
c0029027:	83 c4 10             	add    esp,0x10
c002902a:	83 ec 08             	sub    esp,0x8
c002902d:	68 58 21 00 00       	push   0x2158
c0029032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029036:	e8 db 9c fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c002903b:	83 c4 10             	add    esp,0x10
c002903e:	83 c4 0c             	add    esp,0xc
c0029041:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029042 <APICTimer::~APICTimer()>:
c0029042:	83 ec 0c             	sub    esp,0xc
c0029045:	ba a4 d2 02 c0       	mov    edx,0xc002d2a4
c002904a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904e:	89 10                	mov    DWORD PTR [eax],edx
c0029050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029054:	83 ec 0c             	sub    esp,0xc
c0029057:	50                   	push   eax
c0029058:	e8 0d db fe ff       	call   c0016b6a <Timer::~Timer()>
c002905d:	83 c4 10             	add    esp,0x10
c0029060:	90                   	nop
c0029061:	83 c4 0c             	add    esp,0xc
c0029064:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029066 <APICTimer::~APICTimer()>:
c0029066:	83 ec 0c             	sub    esp,0xc
c0029069:	83 ec 0c             	sub    esp,0xc
c002906c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029070:	e8 cd ff ff ff       	call   c0029042 <APICTimer::~APICTimer()>
c0029075:	83 c4 10             	add    esp,0x10
c0029078:	83 ec 08             	sub    esp,0x8
c002907b:	68 60 01 00 00       	push   0x160
c0029080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029084:	e8 8d 9c fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c0029089:	83 c4 10             	add    esp,0x10
c002908c:	83 c4 0c             	add    esp,0xc
c002908f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029090 <PIT::~PIT()>:
c0029090:	83 ec 0c             	sub    esp,0xc
c0029093:	ba f4 d2 02 c0       	mov    edx,0xc002d2f4
c0029098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909c:	89 10                	mov    DWORD PTR [eax],edx
c002909e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a2:	83 ec 0c             	sub    esp,0xc
c00290a5:	50                   	push   eax
c00290a6:	e8 bf da fe ff       	call   c0016b6a <Timer::~Timer()>
c00290ab:	83 c4 10             	add    esp,0x10
c00290ae:	90                   	nop
c00290af:	83 c4 0c             	add    esp,0xc
c00290b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00290b4 <PIT::~PIT()>:
c00290b4:	83 ec 0c             	sub    esp,0xc
c00290b7:	83 ec 0c             	sub    esp,0xc
c00290ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290be:	e8 cd ff ff ff       	call   c0029090 <PIT::~PIT()>
c00290c3:	83 c4 10             	add    esp,0x10
c00290c6:	83 ec 08             	sub    esp,0x8
c00290c9:	68 5c 01 00 00       	push   0x15c
c00290ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d2:	e8 3f 9c fe ff       	call   c0012d16 <operator delete(void*, unsigned long)>
c00290d7:	83 c4 10             	add    esp,0x10
c00290da:	83 c4 0c             	add    esp,0xc
c00290dd:	c3                   	ret    
