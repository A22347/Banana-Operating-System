
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 86 02 00       	call   c0028648 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 91 02 c0       	mov    ebx,0xc00291f2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 92 02 c0    	cmp    ebx,0xc0029200
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 d9 02 c0       	mov    eax,0xc002d938
c0000049:	3d 38 d9 02 c0       	cmp    eax,0xc002d938
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 d9 02 c0       	push   0xc002d938
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 d9 02 c0       	mov    eax,0xc002d938
c0000075:	2d 38 d9 02 c0       	sub    eax,0xc002d938
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 d9 02 c0       	push   0xc002d938
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df68,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 92 02 c0       	mov    ebx,0xc0029208
c00000bb:	81 eb 04 92 02 c0    	sub    ebx,0xc0029204
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 92 02 c0       	mov    esi,0xc0029204
c00000ca:	a1 6c df 02 c0       	mov    eax,ds:0xc002df6c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c df 02 c0       	mov    ds:0xc002df6c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c df 02 c0       	mov    eax,ds:0xc002df6c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 d9 02 c0       	push   0xc002d938
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 df 02 c0 01 	mov    BYTE PTR ds:0xc002df68,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 df 02 c0       	push   0xc002df70
c000012c:	68 38 d9 02 c0       	push   0xc002d938
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 f7 d5 01 00       	call   c001d992 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 7b 29 01 00       	call   c0012d2e <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 d5 d5 01 00       	call   c001d992 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 23 da 01 00       	call   c001ddff <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 d1 df 01 00       	call   c001e3b6 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 b0 e3 02 c0 	lgdtd  ds:0xc002e3b0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 58 46 01 00       	call   c0014c31 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 88 df 02 c0       	mov    ds:0xc002df88,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 88 df 02 c0    	mov    DWORD PTR ds:0xc002df88,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 88 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df88
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6de0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6de0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6de0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d a0 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfa0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 a4 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd205c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 a4 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd205c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 cc df 02 c0    	cmp    DWORD PTR ds:0xc002dfcc,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d dc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfdc
c0000e60:	c7 42 0c d4 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dfd4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 dc df 02 c0    	mov    DWORD PTR ds:0xc002dfdc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 cc df 02 c0    	mov    DWORD PTR ds:0xc002dfcc,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 a0 df 02 c0 02 	test   BYTE PTR ds:0xc002dfa0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d a0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 a4 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd205c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 a4 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd205c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 d4 df 02 c0 	lea    edx,[eax*8-0x3ffd202c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d e0 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfe0
c00011e2:	81 fb d4 df 02 c0    	cmp    ebx,0xc002dfd4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d d4 df 02 c0       	cmp    eax,0xc002dfd4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d d0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfd0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 dc df 02 c0       	mov    ds:0xc002dfdc,eax
c000121e:	a3 e0 df 02 c0       	mov    ds:0xc002dfe0,eax
c0001223:	a3 d0 df 02 c0       	mov    ds:0xc002dfd0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 d4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfd4
c0001231:	c7 40 0c d4 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dfd4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 e0 df 02 c0       	mov    ds:0xc002dfe0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 d4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfd4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 98 df 02 c0 	lea    ebp,[edx*4-0x3ffd2068]
c0001282:	8b 14 95 a0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2060]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 a0 df 02 c0 	lea    ecx,[edx*4-0x3ffd2060]
c000129d:	8b 14 95 a0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2060]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd d4 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d2c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 d4 df 02 c0 	lea    eax,[eax*8-0x3ffd202c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d dc df 02 c0    	mov    DWORD PTR ds:0xc002dfdc,ecx
c0001357:	89 0d e0 df 02 c0    	mov    DWORD PTR ds:0xc002dfe0,ecx
c000135d:	c7 41 08 d4 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dfd4
c0001364:	c7 41 0c d4 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dfd4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd cc df 02 c0 	lea    edx,[ecx*8-0x3ffd2034]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d d4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d2c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d d4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d2c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 cc df 02 c0 	lea    edx,[eax*4-0x3ffd2034]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d d4 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d2c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d dc df 02 c0    	mov    DWORD PTR ds:0xc002dfdc,edi
c000142a:	89 3d e0 df 02 c0    	mov    DWORD PTR ds:0xc002dfe0,edi
c0001430:	c7 47 08 d4 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dfd4
c0001437:	c7 47 0c d4 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dfd4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d d0 df 02 c0    	mov    DWORD PTR ds:0xc002dfd0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d cc df 02 c0    	mov    DWORD PTR ds:0xc002dfcc,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba a0 df 02 c0       	mov    edx,0xc002dfa0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d a0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfa0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d f4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2f4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 f4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2f4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d f4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2f4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 cc df 02 c0    	cmp    DWORD PTR ds:0xc002dfcc,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d cc df 02 c0    	mov    DWORD PTR ds:0xc002dfcc,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d a0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfa0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 fc e2 02 c0    	push   DWORD PTR ds:0xc002e2fc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d a0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfa0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 fc e2 02 c0       	mov    eax,ds:0xc002e2fc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d cc df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfcc,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 a4 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd205c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 d4 df 02 c0       	mov    eax,0xc002dfd4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d cc e2 02 c0       	cmp    eax,0xc002e2cc
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 08 e3 02 c0       	mov    eax,ds:0xc002e308
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 f0 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2f0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 04 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e304
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 14 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e314
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 a0 df 02 c0       	mov    eax,0xc002dfa0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cdc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 a0 df 02 c0       	mov    ds:0xc002dfa0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d e4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d e8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ec e2 02 c0    	mov    DWORD PTR ds:0xc002e2ec,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 f4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2f4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 a0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce560]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 82 f1 01 00       	jmp    c0020dae <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 a0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce560]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 b3 f1 01 00       	jmp    c0020df5 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 a0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce560]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 db f1 01 00       	jmp    c0020e3c <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 68 4a 02 00       	call   c00269ac <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6bc0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6bc0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 94 02 c0       	mov    edx,0xc0029460
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba ac c7 02 c0       	mov    edx,0xc002c7ac
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 94 02 c0       	mov    edx,0xc002946c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 40 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1cc0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 20 e3 02 c0    	mov    ax,ds:0xc002e320
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 20 e3 02 c0    	mov    ds:0xc002e320,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 65 38 02 00       	call   c00269ac <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 94 02 c0       	mov    eax,0xc0029472
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c40]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 94 02 c0       	mov    eax,0xc002947b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6bc0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 30 22 02 00       	call   c00269ac <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 94 02 c0       	mov    edx,0xc0029450
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 40 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1cc0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 40 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1cc0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 f7 0b 02 00       	call   c00269ac <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 dd 0b 02 00       	call   c00269ac <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 93 02 c0       	mov    eax,0xc0029397
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 93 02 c0       	mov    eax,0xc0029390
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 40 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1cc0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 93 02 c0       	mov    esi,0xc0029380
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 20 f3 01 00       	call   c00269ac <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 93 02 c0       	mov    edx,0xc0029360
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 94 02 c0       	mov    edx,0xc0029482
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 94 02 c0       	mov    edx,0xc002948e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 95 02 c0       	mov    eax,0xc0029500
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 74 fc 01 00       	call   c002847f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 37 fc 01 00       	call   c0028461 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 0b fc 01 00       	call   c002847f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 be f2 01 00       	call   c0027b84 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 38 fd 01 00       	call   c0028610 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 85 fb 01 00       	call   c002847f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 c7 fa 01 00       	call   c002847f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 94 fa 01 00       	call   c0028461 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 81 f9 01 00       	call   c002847f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 49 f9 01 00       	call   c0028461 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 55 f7 01 00       	call   c002847f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 1a f7 01 00       	call   c0028461 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 2a f4 01 00       	call   c0028213 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 a8 ed 01 00       	call   c0027bb0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 64 f6 01 00       	call   c0028483 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 52 f7 01 00       	call   c00285a7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 3c ed 01 00       	call   c0027bb0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 e7 f5 01 00       	call   c002847d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 c8 f5 01 00       	call   c0028481 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 56 f7 01 00       	call   c0028630 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 08 f3 01 00       	call   c0028213 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 86 ec 01 00       	call   c0027bb0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 42 f5 01 00       	call   c0028483 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 30 f6 01 00       	call   c00285a7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 1a ec 01 00       	call   c0027bb0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 c5 f4 01 00       	call   c002847d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 a5 f4 01 00       	call   c0028481 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 32 f6 01 00       	call   c0028630 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 e0 f3 01 00       	call   c002847f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 9e f3 01 00       	call   c0028461 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 86 f3 01 00       	call   c002847f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 f8 f0 01 00       	call   c0028213 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 fa e3 01 00       	call   c0027533 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 5d ea 01 00       	call   c0027bb0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 af f0 01 00       	call   c0028213 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 b5 e3 01 00       	call   c0027533 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 84 f0 01 00       	call   c0028213 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 d4 f2 01 00       	call   c002847d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 b1 e9 01 00       	call   c0027b84 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 2b f4 01 00       	call   c0028610 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 5a f2 01 00       	call   c0028461 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 55 e9 01 00       	call   c0027b84 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 d3 ef 01 00       	call   c0028213 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 56 e9 01 00       	call   c0027bb0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 a8 ef 01 00       	call   c0028213 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 0f ec 01 00       	call   c0027e94 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 8e e2 01 00       	call   c0027533 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 ee db 01 00       	call   c0026ec8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 c5 f2 01 00       	call   c00285a7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ae e8 01 00       	call   c0027bb0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 95 f2 01 00       	call   c00285a7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 07 e2 01 00       	call   c0027533 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 40 f1 01 00       	call   c0028483 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 28 eb 01 00       	call   c0027e94 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ae e1 01 00       	call   c0027533 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 94 f2 01 00       	call   c0028630 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 6e ee 01 00       	call   c0028213 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 c5 e7 01 00       	call   c0027b84 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 a4 f0 01 00       	call   c002847f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 3d e1 01 00       	call   c0027533 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 69 e7 01 00       	call   c0027b84 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 03 f2 01 00       	call   c0028630 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 bc ed 01 00       	call   c0028213 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 39 e7 01 00       	call   c0027bb0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 8c ed 01 00       	call   c0028213 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 92 e0 01 00       	call   c0027533 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 62 ed 01 00       	call   c0028213 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 b4 ef 01 00       	call   c002847f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 8b e6 01 00       	call   c0027b84 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 05 f1 01 00       	call   c0028610 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 34 ef 01 00       	call   c0028461 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 2e e6 01 00       	call   c0027b84 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 ac ec 01 00       	call   c0028213 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 2f e6 01 00       	call   c0027bb0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 81 ec 01 00       	call   c0028213 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 e8 e8 01 00       	call   c0027e94 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 67 df 01 00       	call   c0027533 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 b7 d8 01 00       	call   c0026ec8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 8e ef 01 00       	call   c00285a7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 77 e5 01 00       	call   c0027bb0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 5e ef 01 00       	call   c00285a7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 d0 de 01 00       	call   c0027533 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 09 ee 01 00       	call   c0028483 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 f0 e7 01 00       	call   c0027e94 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 6f de 01 00       	call   c0027533 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 55 ef 01 00       	call   c0028630 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 2f eb 01 00       	call   c0028213 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 86 e4 01 00       	call   c0027b84 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 65 ed 01 00       	call   c002847f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 fe dd 01 00       	call   c0027533 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 2a e4 01 00       	call   c0027b84 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 9f ea 01 00       	call   c0028213 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 a5 dd 01 00       	call   c0027533 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 9d 02 c0       	mov    eax,0xc0029d94
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 1a e9 01 00       	call   c0028213 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 98 e2 01 00       	call   c0027bb0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 2a d5 01 00       	call   c0026ec8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 01 ec 01 00       	call   c00285a7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ea e1 01 00       	call   c0027bb0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 cd eb 01 00       	call   c00285a7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 3f db 01 00       	call   c0027533 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 9f eb 01 00       	call   c00285a7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 8e e1 01 00       	call   c0027bb0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 f7 da 01 00       	call   c0027533 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 18 d4 01 00       	call   c0026ec8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ef ea 01 00       	call   c00285a7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 d8 e0 01 00       	call   c0027bb0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 bb ea 01 00       	call   c00285a7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 2d da 01 00       	call   c0027533 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 8d ea 01 00       	call   c00285a7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 7c e0 01 00       	call   c0027bb0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 e5 d9 01 00       	call   c0027533 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 c3 d9 01 00       	call   c0027533 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 9f d2 01 00       	call   c0026ec8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 76 e9 01 00       	call   c00285a7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 5f df 01 00       	call   c0027bb0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 42 e9 01 00       	call   c00285a7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 b4 d8 01 00       	call   c0027533 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 14 e9 01 00       	call   c00285a7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 fd de 01 00       	call   c0027bb0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 66 d8 01 00       	call   c0027533 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 c6 e8 01 00       	call   c00285a7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 af de 01 00       	call   c0027bb0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 18 d8 01 00       	call   c0027533 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 2d d1 01 00       	call   c0026ec8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 04 e8 01 00       	call   c00285a7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 ed dd 01 00       	call   c0027bb0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 d4 e7 01 00       	call   c00285a7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 46 d7 01 00       	call   c0027533 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 a6 e7 01 00       	call   c00285a7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 8f dd 01 00       	call   c0027bb0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 f8 d6 01 00       	call   c0027533 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 58 e7 01 00       	call   c00285a7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 41 dd 01 00       	call   c0027bb0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 aa d6 01 00       	call   c0027533 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 7e d6 01 00       	call   c0027533 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 db dc 01 00       	call   c0027bb0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 97 e5 01 00       	call   c0028483 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 26 d6 01 00       	call   c0027533 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 83 dc 01 00       	call   c0027bb0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 3f e5 01 00       	call   c0028483 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 b9 ce 01 00       	call   c0026ec8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 90 e5 01 00       	call   c00285a7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 79 db 01 00       	call   c0027bb0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 5c e5 01 00       	call   c00285a7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 ce d4 01 00       	call   c0027533 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 2e e5 01 00       	call   c00285a7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 17 db 01 00       	call   c0027bb0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 80 d4 01 00       	call   c0027533 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 e0 e4 01 00       	call   c00285a7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 c9 da 01 00       	call   c0027bb0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 32 d4 01 00       	call   c0027533 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 92 e4 01 00       	call   c00285a7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 7b da 01 00       	call   c0027bb0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 e4 d3 01 00       	call   c0027533 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 44 e4 01 00       	call   c00285a7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 2d da 01 00       	call   c0027bb0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 96 d3 01 00       	call   c0027533 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 98 cc 01 00       	call   c0026ec8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 6f e3 01 00       	call   c00285a7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 58 d9 01 00       	call   c0027bb0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 3f e3 01 00       	call   c00285a7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 b1 d2 01 00       	call   c0027533 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 11 e3 01 00       	call   c00285a7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 fa d8 01 00       	call   c0027bb0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 63 d2 01 00       	call   c0027533 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 c3 e2 01 00       	call   c00285a7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 ac d8 01 00       	call   c0027bb0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 15 d2 01 00       	call   c0027533 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 75 e2 01 00       	call   c00285a7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 5e d8 01 00       	call   c0027bb0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 c7 d1 01 00       	call   c0027533 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 27 e2 01 00       	call   c00285a7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 10 d8 01 00       	call   c0027bb0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 79 d1 01 00       	call   c0027533 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 4d d1 01 00       	call   c0027533 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 aa d7 01 00       	call   c0027bb0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 66 e0 01 00       	call   c0028483 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 f5 d0 01 00       	call   c0027533 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 52 d7 01 00       	call   c0027bb0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 0e e0 01 00       	call   c0028483 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 9c d0 01 00       	call   c0027533 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 f9 d6 01 00       	call   c0027bb0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 b5 df 01 00       	call   c0028483 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 43 d0 01 00       	call   c0027533 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 a0 d6 01 00       	call   c0027bb0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 5c df 01 00       	call   c0028483 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ba c8 01 00       	call   c0026ec8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 91 df 01 00       	call   c00285a7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 7a d5 01 00       	call   c0027bb0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 5d df 01 00       	call   c00285a7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 cf ce 01 00       	call   c0027533 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 2f df 01 00       	call   c00285a7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 18 d5 01 00       	call   c0027bb0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 81 ce 01 00       	call   c0027533 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 e1 de 01 00       	call   c00285a7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ca d4 01 00       	call   c0027bb0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 33 ce 01 00       	call   c0027533 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 93 de 01 00       	call   c00285a7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 7c d4 01 00       	call   c0027bb0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 e5 cd 01 00       	call   c0027533 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 45 de 01 00       	call   c00285a7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 2e d4 01 00       	call   c0027bb0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 97 cd 01 00       	call   c0027533 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 f7 dd 01 00       	call   c00285a7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 e0 d3 01 00       	call   c0027bb0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 46 cd 01 00       	call   c0027533 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 a6 dd 01 00       	call   c00285a7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 8f d3 01 00       	call   c0027bb0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 f8 cc 01 00       	call   c0027533 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 f2 c5 01 00       	call   c0026ec8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 c9 dc 01 00       	call   c00285a7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 b2 d2 01 00       	call   c0027bb0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 92 dc 01 00       	call   c00285a7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 04 cc 01 00       	call   c0027533 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 64 dc 01 00       	call   c00285a7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 4d d2 01 00       	call   c0027bb0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 b6 cb 01 00       	call   c0027533 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 16 dc 01 00       	call   c00285a7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ff d1 01 00       	call   c0027bb0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 68 cb 01 00       	call   c0027533 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 c8 db 01 00       	call   c00285a7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 b1 d1 01 00       	call   c0027bb0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 1a cb 01 00       	call   c0027533 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 7a db 01 00       	call   c00285a7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 63 d1 01 00       	call   c0027bb0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 cc ca 01 00       	call   c0027533 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 2c db 01 00       	call   c00285a7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 15 d1 01 00       	call   c0027bb0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 7b ca 01 00       	call   c0027533 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 db da 01 00       	call   c00285a7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 c4 d0 01 00       	call   c0027bb0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 33 ca 01 00       	call   c0027533 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 0c ca 01 00       	call   c0027533 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 6a d0 01 00       	call   c0027bb0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 26 d9 01 00       	call   c0028483 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 b5 c9 01 00       	call   c0027533 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 13 d0 01 00       	call   c0027bb0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 cf d8 01 00       	call   c0028483 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 5d c9 01 00       	call   c0027533 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 bb cf 01 00       	call   c0027bb0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 77 d8 01 00       	call   c0028483 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 05 c9 01 00       	call   c0027533 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 63 cf 01 00       	call   c0027bb0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 1f d8 01 00       	call   c0028483 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 ad c8 01 00       	call   c0027533 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 0b cf 01 00       	call   c0027bb0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 c7 d7 01 00       	call   c0028483 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 5b c8 01 00       	call   c0027533 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 b9 ce 01 00       	call   c0027bb0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 75 d7 01 00       	call   c0028483 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 89 c0 01 00       	call   c0026ec8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 60 d7 01 00       	call   c00285a7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 49 cd 01 00       	call   c0027bb0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 30 d7 01 00       	call   c00285a7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 a2 c6 01 00       	call   c0027533 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd623c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 d6 d6 01 00       	call   c00285a7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 bf cc 01 00       	call   c0027bb0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 2a c6 01 00       	call   c0027533 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 77 d6 01 00       	call   c00285a7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 60 cc 01 00       	call   c0027bb0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 cb c5 01 00       	call   c0027533 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 18 d6 01 00       	call   c00285a7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 01 cc 01 00       	call   c0027bb0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 6c c5 01 00       	call   c0027533 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 b9 d5 01 00       	call   c00285a7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 a2 cb 01 00       	call   c0027bb0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 0d c5 01 00       	call   c0027533 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 5a d5 01 00       	call   c00285a7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 43 cb 01 00       	call   c0027bb0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ae c4 01 00       	call   c0027533 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 fb d4 01 00       	call   c00285a7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 e4 ca 01 00       	call   c0027bb0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 4f c4 01 00       	call   c0027533 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 9c d4 01 00       	call   c00285a7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 85 ca 01 00       	call   c0027bb0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 f0 c3 01 00       	call   c0027533 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 3d d4 01 00       	call   c00285a7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 26 ca 01 00       	call   c0027bb0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 91 c3 01 00       	call   c0027533 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 9b bc 01 00       	call   c0026ec8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 72 d3 01 00       	call   c00285a7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 5b c9 01 00       	call   c0027bb0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 42 d3 01 00       	call   c00285a7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 b4 c2 01 00       	call   c0027533 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6220]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 e7 d2 01 00       	call   c00285a7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 d0 c8 01 00       	call   c0027bb0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 3b c2 01 00       	call   c0027533 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 87 d2 01 00       	call   c00285a7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 70 c8 01 00       	call   c0027bb0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 db c1 01 00       	call   c0027533 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 27 d2 01 00       	call   c00285a7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 10 c8 01 00       	call   c0027bb0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 7b c1 01 00       	call   c0027533 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 c7 d1 01 00       	call   c00285a7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 b0 c7 01 00       	call   c0027bb0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 1b c1 01 00       	call   c0027533 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 67 d1 01 00       	call   c00285a7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 50 c7 01 00       	call   c0027bb0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 bb c0 01 00       	call   c0027533 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 07 d1 01 00       	call   c00285a7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 f0 c6 01 00       	call   c0027bb0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 5b c0 01 00       	call   c0027533 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 a7 d0 01 00       	call   c00285a7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 90 c6 01 00       	call   c0027bb0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 fb bf 01 00       	call   c0027533 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 47 d0 01 00       	call   c00285a7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 30 c6 01 00       	call   c0027bb0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 9b bf 01 00       	call   c0027533 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6204]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 40 bf 01 00       	call   c0027533 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 9d c5 01 00       	call   c0027bb0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 59 ce 01 00       	call   c0028483 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 e3 be 01 00       	call   c0027533 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 40 c5 01 00       	call   c0027bb0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 fc cd 01 00       	call   c0028483 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 86 be 01 00       	call   c0027533 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 e3 c4 01 00       	call   c0027bb0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 9f cd 01 00       	call   c0028483 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 29 be 01 00       	call   c0027533 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 86 c4 01 00       	call   c0027bb0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 42 cd 01 00       	call   c0028483 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 cc bd 01 00       	call   c0027533 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 29 c4 01 00       	call   c0027bb0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 e5 cc 01 00       	call   c0028483 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 6f bd 01 00       	call   c0027533 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 cc c3 01 00       	call   c0027bb0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 88 cc 01 00       	call   c0028483 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 12 bd 01 00       	call   c0027533 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 6f c3 01 00       	call   c0027bb0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 2b cc 01 00       	call   c0028483 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 b5 bc 01 00       	call   c0027533 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 12 c3 01 00       	call   c0027bb0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 ce cb 01 00       	call   c0028483 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ca c2 01 00       	call   c0027bb0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 3a cd 01 00       	jmp    c0028630 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 ac c9 01 00       	call   c002847f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 6a c9 01 00       	call   c0028461 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 01 c7 01 00       	call   c0028213 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 02 ba 01 00       	call   c0027533 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 d1 c6 01 00       	call   c0028213 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 38 c3 01 00       	call   c0027e94 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 d7 c8 01 00       	call   c0028461 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 da c8 01 00       	call   c002847f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 ad c8 01 00       	call   c002847f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 a6 c2 01 00       	call   c0027e94 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 28 ca 01 00       	call   c0028630 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 03 ca 01 00       	call   c0028630 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 dd c5 01 00       	call   c0028213 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 34 bf 01 00       	call   c0027b84 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 13 c8 01 00       	call   c002847f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 ac b8 01 00       	call   c0027533 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 d0 be 01 00       	call   c0027b84 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 6a c9 01 00       	call   c0028630 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 aa c1 01 00       	call   c0027e94 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 27 b8 01 00       	call   c0027533 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 53 c4 01 00       	call   c0028213 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 53 b7 01 00       	call   c0027533 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 33 b7 01 00       	call   c0027533 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 03 c4 01 00       	call   c0028213 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 53 c6 01 00       	call   c002847d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 32 bd 01 00       	call   c0027b84 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 ac c7 01 00       	call   c0028610 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 db c5 01 00       	call   c0028461 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 d9 bc 01 00       	call   c0027b84 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 57 c3 01 00       	call   c0028213 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 da bc 01 00       	call   c0027bb0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 2c c3 01 00       	call   c0028213 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 93 bf 01 00       	call   c0027e94 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 12 b6 01 00       	call   c0027533 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 dc c2 01 00       	call   c0028213 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 28 c5 01 00       	call   c002847f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 1d bc 01 00       	call   c0027bb0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ef bb 01 00       	call   c0027bb0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 28 c2 01 00       	call   c0028213 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 8c be 01 00       	call   c0027e94 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 54 be 01 00       	call   c0027e94 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 d3 b4 01 00       	call   c0027533 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 b8 c5 01 00       	call   c0028630 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 92 c1 01 00       	call   c0028213 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 e9 ba 01 00       	call   c0027b84 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 c8 c3 01 00       	call   c002847f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 60 b4 01 00       	call   c0027533 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 84 ba 01 00       	call   c0027b84 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 1e c5 01 00       	call   c0028630 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 e7 c2 01 00       	call   c002847f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 a5 c2 01 00       	call   c0028461 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 3c c0 01 00       	call   c0028213 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 3d b3 01 00       	call   c0027533 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 0c c0 01 00       	call   c0028213 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 73 bc 01 00       	call   c0027e94 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 12 c2 01 00       	call   c0028461 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 15 c2 01 00       	call   c002847f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 e8 c1 01 00       	call   c002847f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 e1 bb 01 00       	call   c0027e94 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 63 c3 01 00       	call   c0028630 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 3e c3 01 00       	call   c0028630 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 18 bf 01 00       	call   c0028213 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 6f b8 01 00       	call   c0027b84 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 4e c1 01 00       	call   c002847f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 e7 b1 01 00       	call   c0027533 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 0b b8 01 00       	call   c0027b84 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 a5 c2 01 00       	call   c0028630 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 e5 ba 01 00       	call   c0027e94 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 62 b1 01 00       	call   c0027533 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 8d bd 01 00       	call   c0028213 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 8d b0 01 00       	call   c0027533 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 6d b0 01 00       	call   c0027533 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 3d bd 01 00       	call   c0028213 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 8d bf 01 00       	call   c002847d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 6b b6 01 00       	call   c0027b84 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 e5 c0 01 00       	call   c0028610 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 14 bf 01 00       	call   c0028461 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 11 b6 01 00       	call   c0027b84 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 8f bc 01 00       	call   c0028213 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 12 b6 01 00       	call   c0027bb0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 64 bc 01 00       	call   c0028213 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 cb b8 01 00       	call   c0027e94 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 4a af 01 00       	call   c0027533 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 14 bc 01 00       	call   c0028213 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 60 be 01 00       	call   c002847f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 55 b5 01 00       	call   c0027bb0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 27 b5 01 00       	call   c0027bb0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 5e bb 01 00       	call   c0028213 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 c2 b7 01 00       	call   c0027e94 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 8f b7 01 00       	call   c0027e94 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 0e ae 01 00       	call   c0027533 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 f3 be 01 00       	call   c0028630 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 cd ba 01 00       	call   c0028213 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 24 b4 01 00       	call   c0027b84 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 03 bd 01 00       	call   c002847f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 9b ad 01 00       	call   c0027533 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 bf b3 01 00       	call   c0027b84 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 59 be 01 00       	call   c0028630 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 22 bc 01 00       	call   c002847f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 e0 bb 01 00       	call   c0028461 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 77 b9 01 00       	call   c0028213 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 78 ac 01 00       	call   c0027533 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 47 b9 01 00       	call   c0028213 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ae b5 01 00       	call   c0027e94 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 4d bb 01 00       	call   c0028461 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 50 bb 01 00       	call   c002847f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 23 bb 01 00       	call   c002847f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 1c b5 01 00       	call   c0027e94 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 9e bc 01 00       	call   c0028630 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 79 bc 01 00       	call   c0028630 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 53 b8 01 00       	call   c0028213 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 aa b1 01 00       	call   c0027b84 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 89 ba 01 00       	call   c002847f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 22 ab 01 00       	call   c0027533 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 46 b1 01 00       	call   c0027b84 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 e0 bb 01 00       	call   c0028630 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 20 b4 01 00       	call   c0027e94 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 9d aa 01 00       	call   c0027533 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 c8 b6 01 00       	call   c0028213 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 c8 a9 01 00       	call   c0027533 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 a8 a9 01 00       	call   c0027533 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 78 b6 01 00       	call   c0028213 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 c8 b8 01 00       	call   c002847d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 a6 af 01 00       	call   c0027b84 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 20 ba 01 00       	call   c0028610 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 4f b8 01 00       	call   c0028461 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 4c af 01 00       	call   c0027b84 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ca b5 01 00       	call   c0028213 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 4d af 01 00       	call   c0027bb0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 9f b5 01 00       	call   c0028213 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 06 b2 01 00       	call   c0027e94 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 85 a8 01 00       	call   c0027533 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 4f b5 01 00       	call   c0028213 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 9b b7 01 00       	call   c002847f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 90 ae 01 00       	call   c0027bb0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 62 ae 01 00       	call   c0027bb0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 99 b4 01 00       	call   c0028213 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 fd b0 01 00       	call   c0027e94 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ca b0 01 00       	call   c0027e94 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 49 a7 01 00       	call   c0027533 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 2e b8 01 00       	call   c0028630 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 08 b4 01 00       	call   c0028213 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 5f ad 01 00       	call   c0027b84 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 3e b6 01 00       	call   c002847f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 d6 a6 01 00       	call   c0027533 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 fa ac 01 00       	call   c0027b84 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 94 b7 01 00       	call   c0028630 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 5d b5 01 00       	call   c002847f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 1b b5 01 00       	call   c0028461 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 b2 b2 01 00       	call   c0028213 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 b3 a5 01 00       	call   c0027533 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 82 b2 01 00       	call   c0028213 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 e9 ae 01 00       	call   c0027e94 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 88 b4 01 00       	call   c0028461 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 8b b4 01 00       	call   c002847f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 5e b4 01 00       	call   c002847f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 57 ae 01 00       	call   c0027e94 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 d9 b5 01 00       	call   c0028630 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 b4 b5 01 00       	call   c0028630 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 8e b1 01 00       	call   c0028213 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 e5 aa 01 00       	call   c0027b84 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 c4 b3 01 00       	call   c002847f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 5d a4 01 00       	call   c0027533 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 81 aa 01 00       	call   c0027b84 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 1b b5 01 00       	call   c0028630 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 5b ad 01 00       	call   c0027e94 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 d8 a3 01 00       	call   c0027533 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 03 b0 01 00       	call   c0028213 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 03 a3 01 00       	call   c0027533 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 e3 a2 01 00       	call   c0027533 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 b3 af 01 00       	call   c0028213 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 03 b2 01 00       	call   c002847d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 e1 a8 01 00       	call   c0027b84 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 5b b3 01 00       	call   c0028610 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 8a b1 01 00       	call   c0028461 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 87 a8 01 00       	call   c0027b84 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 05 af 01 00       	call   c0028213 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 88 a8 01 00       	call   c0027bb0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 da ae 01 00       	call   c0028213 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 41 ab 01 00       	call   c0027e94 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 c0 a1 01 00       	call   c0027533 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 8a ae 01 00       	call   c0028213 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 d6 b0 01 00       	call   c002847f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 cb a7 01 00       	call   c0027bb0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 9d a7 01 00       	call   c0027bb0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 d4 ad 01 00       	call   c0028213 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 38 aa 01 00       	call   c0027e94 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 05 aa 01 00       	call   c0027e94 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 84 a0 01 00       	call   c0027533 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 69 b1 01 00       	call   c0028630 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 43 ad 01 00       	call   c0028213 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 9a a6 01 00       	call   c0027b84 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 79 af 01 00       	call   c002847f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 11 a0 01 00       	call   c0027533 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 35 a6 01 00       	call   c0027b84 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 cf b0 01 00       	call   c0028630 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 95 ae 01 00       	call   c002847f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 53 ae 01 00       	call   c0028461 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ea ab 01 00       	call   c0028213 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 eb 9e 01 00       	call   c0027533 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ba ab 01 00       	call   c0028213 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 21 a8 01 00       	call   c0027e94 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 c0 ad 01 00       	call   c0028461 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 c3 ad 01 00       	call   c002847f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 96 ad 01 00       	call   c002847f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 8f a7 01 00       	call   c0027e94 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 11 af 01 00       	call   c0028630 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 e8 ae 01 00       	call   c0028630 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 c2 aa 01 00       	call   c0028213 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 19 a4 01 00       	call   c0027b84 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 f8 ac 01 00       	call   c002847f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 91 9d 01 00       	call   c0027533 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 b9 a3 01 00       	call   c0027b84 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 53 ae 01 00       	call   c0028630 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 94 a6 01 00       	call   c0027e94 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 11 9d 01 00       	call   c0027533 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 3d a9 01 00       	call   c0028213 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 3d 9c 01 00       	call   c0027533 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 1d 9c 01 00       	call   c0027533 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 ed a8 01 00       	call   c0028213 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 21 ab 01 00       	call   c0028461 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 18 a2 01 00       	call   c0027b84 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 92 ac 01 00       	call   c0028610 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 c1 aa 01 00       	call   c0028461 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 bb a1 01 00       	call   c0027b84 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 39 a8 01 00       	call   c0028213 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 bc a1 01 00       	call   c0027bb0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 0e a8 01 00       	call   c0028213 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 75 a4 01 00       	call   c0027e94 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 f4 9a 01 00       	call   c0027533 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 be a7 01 00       	call   c0028213 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 0a aa 01 00       	call   c002847f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ff a0 01 00       	call   c0027bb0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 d1 a0 01 00       	call   c0027bb0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 15 a7 01 00       	call   c0028213 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 7c a3 01 00       	call   c0027e94 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 65 a0 01 00       	call   c0027bb0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 21 a9 01 00       	call   c0028483 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 14 a3 01 00       	call   c0027e94 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 93 99 01 00       	call   c0027533 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 78 aa 01 00       	call   c0028630 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 52 a6 01 00       	call   c0028213 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 a9 9f 01 00       	call   c0027b84 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 88 a8 01 00       	call   c002847f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 20 99 01 00       	call   c0027533 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 48 9f 01 00       	call   c0027b84 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 e2 a9 01 00       	call   c0028630 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 9d a6 01 00       	call   c002847f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 5b a6 01 00       	call   c0028461 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 47 a6 01 00       	call   c002847f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 b9 a3 01 00       	call   c0028213 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 37 9d 01 00       	call   c0027bb0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 89 a3 01 00       	call   c0028213 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 8f 96 01 00       	call   c0027533 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 5e a3 01 00       	call   c0028213 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ae a5 01 00       	call   c002847d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 8f 9c 01 00       	call   c0027b84 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 09 a7 01 00       	call   c0028610 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 38 a5 01 00       	call   c0028461 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 37 9c 01 00       	call   c0027b84 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 b5 a2 01 00       	call   c0028213 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 38 9c 01 00       	call   c0027bb0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 8a a2 01 00       	call   c0028213 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 f1 9e 01 00       	call   c0027e94 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 70 95 01 00       	call   c0027533 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 98 9e 01 00       	call   c0027e94 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 1e 95 01 00       	call   c0027533 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 04 a6 01 00       	call   c0028630 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 de a1 01 00       	call   c0028213 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 35 9b 01 00       	call   c0027b84 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 14 a4 01 00       	call   c002847f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 ad 94 01 00       	call   c0027533 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 d9 9a 01 00       	call   c0027b84 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 73 a5 01 00       	call   c0028630 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 28 a1 01 00       	call   c0028213 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 a5 9a 01 00       	call   c0027bb0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 f6 a0 01 00       	call   c0028213 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 fc 93 01 00       	call   c0027533 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 cc a0 01 00       	call   c0028213 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 20 a3 01 00       	call   c0028481 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 f9 99 01 00       	call   c0027b84 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 73 a4 01 00       	call   c0028610 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 a2 a2 01 00       	call   c0028461 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 a0 99 01 00       	call   c0027b84 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 1e a0 01 00       	call   c0028213 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 a1 99 01 00       	call   c0027bb0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 f3 9f 01 00       	call   c0028213 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 5a 9c 01 00       	call   c0027e94 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 d9 92 01 00       	call   c0027533 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 f5 9b 01 00       	call   c0027e94 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 74 92 01 00       	call   c0027533 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 5a a3 01 00       	call   c0028630 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 34 9f 01 00       	call   c0028213 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 8b 98 01 00       	call   c0027b84 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 6a a1 01 00       	call   c002847f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 03 92 01 00       	call   c0027533 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 2f 98 01 00       	call   c0027b84 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 a0 9e 01 00       	call   c0028213 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 a6 91 01 00       	call   c0027533 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e 9f 02 c0       	mov    eax,0xc0029f3e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f 9f 02 c0       	mov    eax,0xc0029f4f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 9f 02 c0       	push   0xc0029f86
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 a8 e3 02 c0       	mov    eax,0xc002e3a8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 ac 69 02 c0       	mov    eax,0xc00269ac
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 9f 02 c0       	push   0xc0029f99
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 e0 66 02 c0       	mov    eax,0xc00266e0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 ac 6a 02 c0       	mov    eax,0xc0026aac
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac 9f 02 c0       	push   0xc0029fac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 2c 68 02 c0       	mov    eax,0xc002682c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 9f 02 c0       	push   0xc0029fb5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ac e3 02 c0       	mov    eax,0xc002e3ac
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ad e3 02 c0       	mov    eax,0xc002e3ad
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 c9 5e 00 00       	call   c00144ec <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c000e668:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 8b f5 00 00       	call   c001dc00 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 74 f8 00 00       	call   c001defe <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 5c e7 01 c0       	push   0xc001e75c
c000e693:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c000e699:	e8 60 f8 00 00       	call   c001defe <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 e8 18 03 c0       	mov    ds:0xc00318e8,eax
c000e6a6:	c6 05 ad e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3ad,0x1
c000e6ad:	e8 2b 04 01 00       	call   c001eadd <Vm::initialise8086()>
c000e6b2:	e8 1d 4c 00 00       	call   c00132d4 <Fs::initVFS()>
c000e6b7:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 bd de 00 00       	call   c001c590 <Sys::loadSyscalls()>
c000e6d3:	e8 e0 bd 00 00       	call   c001a4b8 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 dc 9f 02 c0       	push   0xc0029fdc
c000e6e2:	68 e5 9f 02 c0       	push   0xc0029fe5
c000e6e7:	e8 f2 ca 00 00       	call   c001b1de <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 c8 56 00 00       	call   c0013dbc <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 bb 5d 00 00       	call   c00144c0 <Device::loadDriversForAll()>
c000e705:	e8 f4 b8 00 00       	call   c0019ffe <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d a8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ed 9f 02 c0       	push   0xc0029fed
c000e719:	e8 06 f0 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 31 f2 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 2e fb 00 00       	call   c001e262 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 09 a0 02 c0       	push   0xc002a009
c000e749:	50                   	push   eax
c000e74a:	e8 17 5e 00 00       	call   c0014566 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 c1 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3c1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 93 7d 01 00       	call   c0026676 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 f2 a3 00 00       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 cb a3 00 00       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 a9 a3 00 00       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 87 a3 00 00       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 c0 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e3c0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 95 a2 00 00       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 70 a2 00 00       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 fd 7b 01 00       	call   c0026630 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ba 7b 01 00       	call   c0026610 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 8c a2 00 00       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 19 a0 02 c0       	push   0xc002a019
c000eaaf:	e8 9c 44 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 2c a0 02 c0       	push   0xc002a02c
c000ead2:	e8 79 44 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 3d a0 02 c0       	push   0xc002a03d
c000eaf5:	e8 56 44 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 4e a0 02 c0       	push   0xc002a04e
c000eb18:	e8 33 44 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 5f a0 02 c0       	push   0xc002a05f
c000eb3b:	e8 10 44 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 70 a0 02 c0       	push   0xc002a070
c000eb5e:	e8 ed 43 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 81 a0 02 c0       	push   0xc002a081
c000eb81:	e8 ca 43 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 92 a0 02 c0       	push   0xc002a092
c000eba4:	e8 a7 43 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 a3 a0 02 c0       	push   0xc002a0a3
c000ebc7:	e8 84 43 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 b4 a0 02 c0       	push   0xc002a0b4
c000ebea:	e8 61 43 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 c5 a0 02 c0       	push   0xc002a0c5
c000ec0d:	e8 3e 43 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 d6 a0 02 c0       	push   0xc002a0d6
c000ec30:	e8 1b 43 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 e7 a0 02 c0       	push   0xc002a0e7
c000ec53:	e8 f8 42 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 f8 a0 02 c0       	push   0xc002a0f8
c000ec76:	e8 d5 42 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 09 a1 02 c0       	push   0xc002a109
c000ec99:	e8 b2 42 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 1a a1 02 c0       	push   0xc002a11a
c000ecbc:	e8 8f 42 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 2b a1 02 c0       	push   0xc002a12b
c000ecdf:	e8 6c 42 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 3c a1 02 c0       	push   0xc002a13c
c000ed02:	e8 49 42 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 4d a1 02 c0       	push   0xc002a14d
c000ed21:	e8 2a 42 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 90 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba90
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 19 42 00 00       	jmp    c0012f50 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 5e a1 02 c0       	push   0xc002a15e
c000ee0a:	e8 e2 b7 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 64 a1 02 c0       	push   0xc002a164
c000ee42:	e8 aa b7 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 c0 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3c0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 e4 d2 02 c0 	sete   BYTE PTR ds:0xc002d2e4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 2b 93 00 00       	call   c00181e0 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 b2 54 00 00       	call   c0014376 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 d4 9e 00 00       	call   c0018dc8 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 73 54 00 00       	call   c0014376 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 dd 59 00 00       	call   c00148fc <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 43 54 00 00       	call   c0014376 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 a9 f0 00 00       	call   c001dffe <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 6a a1 02 c0       	push   0xc002a16a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 ad 3f 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 7b a1 02 c0       	push   0xc002a17b
c000efc0:	e8 2c b6 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 88 a1 02 c0       	push   0xc002a188
c000efd5:	e8 17 b6 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 92 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a192
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 00 b6 00 00       	jmp    c001a5f1 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 cc a1 02 c0       	push   0xc002a1cc
c000f086:	e8 c5 3e 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 b2 e3 02 c0       	mov    ds:0xc002e3b2,eax
c000f0c7:	66 89 15 b0 e3 02 c0 	mov    WORD PTR ds:0xc002e3b0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 f0 eb 00 00       	call   c001ddce <unlockScheduler()>
c000f1de:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 a8 e3 02 c0    	push   DWORD PTR ds:0xc002e3a8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 84 94 01 00       	call   c00286b0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 7b 94 01 00       	call   c00286b0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 b8 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e3b8,0x7ff
c000f323:	a3 ba e3 02 c0       	mov    ds:0xc002e3ba,eax
c000f328:	0f 01 1d b8 e3 02 c0 	lidtd  ds:0xc002e3b8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 27 28 00 00       	call   c0011e3c <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 58 2e 00 00       	call   c0012478 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 94 1e 00 00       	call   c00114d2 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c5 1e 00 00       	call   c0011512 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 a8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d c0 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d2c0
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 e8 a1 02 c0       	push   0xc002a1e8
c000f6f4:	e8 57 38 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 c0 d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d2c0,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 1d 27 00 00       	call   c0011e3c <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d c0 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d2c0
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 3f 2c 00 00       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d c0 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2c0
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 18 a2 02 c0       	push   0xc002a218
c000f7ad:	e8 3f ae 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 1d a2 02 c0       	push   0xc002a21d
c000f7c3:	e8 29 ae 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 f3 e5 00 00       	call   c001ddcc <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 e4 e5 00 00       	call   c001ddce <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 41 26 00 00       	call   c0011e3c <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 6e 2c 00 00       	call   c0012478 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 26 26 00 00       	call   c0011e3c <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 11 29 00 00       	call   c0012134 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 e0 d2 02 c0       	mov    eax,ds:0xc002d2e0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 40 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e440,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 e0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2e0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 40 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e440,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 40 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e440,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 40 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e440,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 40 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e440,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 e0 d2 02 c0       	mov    eax,ds:0xc002d2e0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 b4 0c 00 00       	call   c00107a4 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 40 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e440,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 76 0c 00 00       	call   c00107a4 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 0d 0d 00 00       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 e0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2e0
c000fb46:	80 3d 40 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e440,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d e0 d2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d2e0,0x8000
c000fba0:	c6 05 40 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e440,0x1
c000fba7:	c7 05 78 e4 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e478,0xc000fa13
c000fbb1:	c7 05 64 e4 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e464,0xc000f89a
c000fbbb:	c7 05 60 e4 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e460,0xc000f8e5
c000fbc5:	c7 05 6c e4 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e46c,0xc000fa59
c000fbcf:	c7 05 74 e4 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e474,0xc000f963
c000fbd9:	c7 05 68 e4 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e468,0xc000f9c1
c000fbe3:	c7 05 70 e4 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e470,0xc000f9c2
c000fbed:	c7 05 7c e4 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e47c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 f4 09 00 00       	call   c00105fe <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 24 a2 02 c0       	push   0xc002a224
c000fc4a:	e8 01 33 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 54 04 00 00       	call   c00100ba <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 f5 20 00 00       	call   c0011d60 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 91 ba 02 c0       	push   0xc002ba91
c000fc92:	e8 5a a9 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d c0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 c5 22 00 00       	call   c0011f72 <VAS::VAS()>
c000fcad:	89 1d 2c e5 02 c0    	mov    DWORD PTR ds:0xc002e52c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 3b a2 02 c0 	mov    DWORD PTR [esp],0xc002a23b
c000fcbf:	e8 8c 32 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 16 21 00 00       	call   c0011ddf <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 a8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a8,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 58 a2 02 c0       	push   0xc002a258
c000fced:	e8 5e 32 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 00 25 00 00       	call   c001220c <VAS::~VAS()>
c000fd0c:	c7 04 24 6b a2 02 c0 	mov    DWORD PTR [esp],0xc002a26b
c000fd13:	e8 d9 a8 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 00 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1c00],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 00 e4 02 c0       	mov    esi,0xc002e400
c000fd89:	8d 90 00 e4 02 c0    	lea    edx,[eax-0x3ffd1c00]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 00 e4 02 c0    	lea    eax,[edx-0x3ffd1c00]
c000fdef:	8d 94 11 00 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1c00]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 c4 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c4
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 c4 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d2c4
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 c4 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2c4
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 f0 e3 02 c0       	mov    ds:0xc002e3f0,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d f4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3f4
c000fe91:	39 05 ec e3 02 c0    	cmp    DWORD PTR ds:0xc002e3ec,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 ec e3 02 c0       	mov    ds:0xc002e3ec,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 d8 0a 00 00       	call   c0010992 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 86 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a286
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 0f a7 00 00       	jmp    c001a5f1 <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 e4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3e4
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d e4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e4,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 e4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3e4,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 9c a2 02 c0       	push   0xc002a29c
c000ff27:	e8 24 30 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 ac 00 00 00    	jne    c000ffef <Phys::allocatePage()+0x10d>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 ad a2 02 c0       	push   0xc002a2ad
c000ff4b:	e8 a1 a6 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d e4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e4
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c000ff71:	59                   	pop    ecx
c000ff72:	40                   	inc    eax
c000ff73:	5b                   	pop    ebx
c000ff74:	a3 f0 e3 02 c0       	mov    ds:0xc002e3f0,eax
c000ff79:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	c1 e0 02             	shl    eax,0x2
c000ff82:	99                   	cdq    
c000ff83:	f7 3d f4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3f4
c000ff89:	39 05 ec e3 02 c0    	cmp    DWORD PTR ds:0xc002e3ec,eax
c000ff8f:	75 64                	jne    c000fff5 <Phys::allocatePage()+0x113>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 51                	jle    c000ffe7 <Phys::allocatePage()+0x105>
c000ff96:	80 3d e0 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3e0,0x0
c000ff9d:	75 48                	jne    c000ffe7 <Phys::allocatePage()+0x105>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 22                	je     c000ffca <Phys::allocatePage()+0xe8>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 1b                	je     c000ffca <Phys::allocatePage()+0xe8>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 11                	je     c000ffca <Phys::allocatePage()+0xe8>
c000ffb9:	52                   	push   edx
c000ffba:	68 c8 00 00 00       	push   0xc8
c000ffbf:	6a 04                	push   0x4
c000ffc1:	50                   	push   eax
c000ffc2:	e8 6d 2b 00 00       	call   c0012b34 <VAS::scanForEviction(int, int)>
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c000ffcf:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd2:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd5:	c1 e0 02             	shl    eax,0x2
c000ffd8:	99                   	cdq    
c000ffd9:	f7 3d f4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3f4
c000ffdf:	39 05 ec e3 02 c0    	cmp    DWORD PTR ds:0xc002e3ec,eax
c000ffe5:	75 2e                	jne    c0010015 <Phys::allocatePage()+0x133>
c000ffe7:	a1 e4 e3 02 c0       	mov    eax,ds:0xc002e3e4
c000ffec:	c1 e0 0c             	shl    eax,0xc
c000ffef:	83 c4 14             	add    esp,0x14
c000fff2:	5b                   	pop    ebx
c000fff3:	5e                   	pop    esi
c000fff4:	c3                   	ret    
c000fff5:	83 ec 0c             	sub    esp,0xc
c000fff8:	a3 ec e3 02 c0       	mov    ds:0xc002e3ec,eax
c000fffd:	50                   	push   eax
c000fffe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010002:	e8 8b 09 00 00       	call   c0010992 <VgaText::updateRAMUsageDisplay(int)>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000e:	83 f8 32             	cmp    eax,0x32
c0010011:	7e d4                	jle    c000ffe7 <Phys::allocatePage()+0x105>
c0010013:	eb 81                	jmp    c000ff96 <Phys::allocatePage()+0xb4>
c0010015:	83 ec 0c             	sub    esp,0xc
c0010018:	a3 ec e3 02 c0       	mov    ds:0xc002e3ec,eax
c001001d:	50                   	push   eax
c001001e:	e8 6f 09 00 00       	call   c0010992 <VgaText::updateRAMUsageDisplay(int)>
c0010023:	83 c4 10             	add    esp,0x10
c0010026:	eb bf                	jmp    c000ffe7 <Phys::allocatePage()+0x105>

c0010028 <Phys::allocateContiguousPages(int)>:
c0010028:	57                   	push   edi
c0010029:	56                   	push   esi
c001002a:	53                   	push   ebx
c001002b:	31 db                	xor    ebx,ebx
c001002d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010031:	e8 96 dd 00 00       	call   c001ddcc <lockScheduler()>
c0010036:	85 db                	test   ebx,ebx
c0010038:	75 11                	jne    c001004b <Phys::allocateContiguousPages(int)+0x23>
c001003a:	e8 a3 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001003f:	83 ff 01             	cmp    edi,0x1
c0010042:	89 c6                	mov    esi,eax
c0010044:	74 21                	je     c0010067 <Phys::allocateContiguousPages(int)+0x3f>
c0010046:	bb 01 00 00 00       	mov    ebx,0x1
c001004b:	e8 92 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010050:	89 da                	mov    edx,ebx
c0010052:	c1 e2 0c             	shl    edx,0xc
c0010055:	01 f2                	add    edx,esi
c0010057:	39 c2                	cmp    edx,eax
c0010059:	74 17                	je     c0010072 <Phys::allocateContiguousPages(int)+0x4a>
c001005b:	bb 01 00 00 00       	mov    ebx,0x1
c0010060:	89 c6                	mov    esi,eax
c0010062:	83 ff 01             	cmp    edi,0x1
c0010065:	75 e4                	jne    c001004b <Phys::allocateContiguousPages(int)+0x23>
c0010067:	e8 62 dd 00 00       	call   c001ddce <unlockScheduler()>
c001006c:	89 f0                	mov    eax,esi
c001006e:	5b                   	pop    ebx
c001006f:	5e                   	pop    esi
c0010070:	5f                   	pop    edi
c0010071:	c3                   	ret    
c0010072:	43                   	inc    ebx
c0010073:	39 fb                	cmp    ebx,edi
c0010075:	75 bf                	jne    c0010036 <Phys::allocateContiguousPages(int)+0xe>
c0010077:	e8 52 dd 00 00       	call   c001ddce <unlockScheduler()>
c001007c:	89 f0                	mov    eax,esi
c001007e:	5b                   	pop    ebx
c001007f:	5e                   	pop    esi
c0010080:	5f                   	pop    edi
c0010081:	c3                   	ret    

c0010082 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010082:	56                   	push   esi
c0010083:	53                   	push   ebx
c0010084:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010088:	39 1d e8 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3e8,ebx
c001008e:	73 06                	jae    c0010096 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010090:	89 1d e8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e8,ebx
c0010096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001009a:	c1 eb 0c             	shr    ebx,0xc
c001009d:	c1 e8 0c             	shr    eax,0xc
c00100a0:	39 d8                	cmp    eax,ebx
c00100a2:	73 13                	jae    c00100b7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a4:	6a 00                	push   0x0
c00100a6:	8d 70 01             	lea    esi,[eax+0x1]
c00100a9:	50                   	push   eax
c00100aa:	e8 5b fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100af:	5a                   	pop    edx
c00100b0:	89 f0                	mov    eax,esi
c00100b2:	59                   	pop    ecx
c00100b3:	39 f3                	cmp    ebx,esi
c00100b5:	75 ed                	jne    c00100a4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100b7:	5b                   	pop    ebx
c00100b8:	5e                   	pop    esi
c00100b9:	c3                   	ret    

c00100ba <Phys::physicalMemorySetup(unsigned int)>:
c00100ba:	55                   	push   ebp
c00100bb:	57                   	push   edi
c00100bc:	56                   	push   esi
c00100bd:	53                   	push   ebx
c00100be:	31 db                	xor    ebx,ebx
c00100c0:	83 ec 40             	sub    esp,0x40
c00100c3:	6a 30                	push   0x30
c00100c5:	6a 00                	push   0x0
c00100c7:	68 00 e4 02 c0       	push   0xc002e400
c00100cc:	e8 a7 06 ff ff       	call   c0000778 <memset>
c00100d1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100da:	05 00 10 00 00       	add    eax,0x1000
c00100df:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e3:	83 c4 10             	add    esp,0x10
c00100e6:	83 ec 08             	sub    esp,0x8
c00100e9:	6a 01                	push   0x1
c00100eb:	53                   	push   ebx
c00100ec:	43                   	inc    ebx
c00100ed:	e8 18 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100f2:	83 c4 10             	add    esp,0x10
c00100f5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100fb:	75 e9                	jne    c00100e6 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100fd:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010104:	66 85 c0             	test   ax,ax
c0010107:	0f 84 8e 01 00 00    	je     c001029b <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001010d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010111:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010119:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001011d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010122:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010126:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001012e:	eb 15                	jmp    c0010145 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010130:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010134:	83 c3 18             	add    ebx,0x18
c0010137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001013b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001013f:	0f 84 66 01 00 00    	je     c00102ab <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010145:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010148:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001014b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001014e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010152:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010156:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010158:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001015b:	01 f0                	add    eax,esi
c001015d:	55                   	push   ebp
c001015e:	11 fa                	adc    edx,edi
c0010160:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010168:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001016c:	56                   	push   esi
c001016d:	68 e8 a2 02 c0       	push   0xc002a2e8
c0010172:	e8 d9 2d 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0010177:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001017b:	83 c4 10             	add    esp,0x10
c001017e:	09 f8                	or     eax,edi
c0010180:	0f 85 25 01 00 00    	jne    c00102ab <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010186:	4d                   	dec    ebp
c0010187:	75 a7                	jne    c0010130 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010189:	ba 00 00 08 00       	mov    edx,0x80000
c001018e:	89 c1                	mov    ecx,eax
c0010190:	39 f2                	cmp    edx,esi
c0010192:	19 f9                	sbb    ecx,edi
c0010194:	0f 82 a7 00 00 00    	jb     c0010241 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001019a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001019e:	89 c1                	mov    ecx,eax
c00101a0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a4:	0f 83 97 00 00 00    	jae    c0010241 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101aa:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101af:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b7:	39 fa                	cmp    edx,edi
c00101b9:	19 e8                	sbb    eax,ebp
c00101bb:	0f 82 14 01 00 00    	jb     c00102d5 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101c1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101c9:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101cf:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d4:	83 d5 ff             	adc    ebp,0xffffffff
c00101d7:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101db:	31 c0                	xor    eax,eax
c00101dd:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101e1:	39 fa                	cmp    edx,edi
c00101e3:	89 c1                	mov    ecx,eax
c00101e5:	19 e9                	sbb    ecx,ebp
c00101e7:	0f 83 43 ff ff ff    	jae    c0010130 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ed:	be 00 00 08 00       	mov    esi,0x80000
c00101f2:	50                   	push   eax
c00101f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101f7:	57                   	push   edi
c00101f8:	56                   	push   esi
c00101f9:	68 0c a3 02 c0       	push   0xc002a30c
c00101fe:	e8 4d 2d 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0010203:	5a                   	pop    edx
c0010204:	59                   	pop    ecx
c0010205:	57                   	push   edi
c0010206:	56                   	push   esi
c0010207:	e8 76 fe ff ff       	call   c0010082 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001020c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010210:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010214:	83 c4 0c             	add    esp,0xc
c0010217:	0f ac d0 0c          	shrd   eax,edx,0xc
c001021b:	03 05 f4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3f4
c0010221:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010228:	a3 f4 e3 02 c0       	mov    ds:0xc002e3f4,eax
c001022d:	52                   	push   edx
c001022e:	50                   	push   eax
c001022f:	68 c9 a2 02 c0       	push   0xc002a2c9
c0010234:	e8 17 2d 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0010239:	83 c4 10             	add    esp,0x10
c001023c:	e9 ef fe ff ff       	jmp    c0010130 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010241:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010245:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024d:	39 ea                	cmp    edx,ebp
c001024f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010253:	0f 82 d7 fe ff ff    	jb     c0010130 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010259:	ba ff 1f 00 00       	mov    edx,0x1fff
c001025e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010262:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010266:	0f 83 c4 fe ff ff    	jae    c0010130 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001026c:	39 ee                	cmp    esi,ebp
c001026e:	89 f8                	mov    eax,edi
c0010270:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010274:	0f 83 78 ff ff ff    	jae    c00101f2 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001027a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001027e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010282:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010286:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001028a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001028e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010292:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010296:	e9 57 ff ff ff       	jmp    c00101f2 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001029b:	83 ec 0c             	sub    esp,0xc
c001029e:	68 bb a2 02 c0       	push   0xc002a2bb
c00102a3:	e8 49 a3 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c00102a8:	83 c4 10             	add    esp,0x10
c00102ab:	bb 40 01 00 00       	mov    ebx,0x140
c00102b0:	83 ec 08             	sub    esp,0x8
c00102b3:	6a 00                	push   0x0
c00102b5:	53                   	push   ebx
c00102b6:	43                   	inc    ebx
c00102b7:	e8 4e fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102bc:	ff 05 f4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3f4
c00102c2:	83 c4 10             	add    esp,0x10
c00102c5:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102cb:	75 e3                	jne    c00102b0 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102cd:	83 c4 3c             	add    esp,0x3c
c00102d0:	5b                   	pop    ebx
c00102d1:	5e                   	pop    esi
c00102d2:	5f                   	pop    edi
c00102d3:	5d                   	pop    ebp
c00102d4:	c3                   	ret    
c00102d5:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e5:	e9 d7 fe ff ff       	jmp    c00101c1 <Phys::physicalMemorySetup(unsigned int)+0x107>

c00102ea <Pipe::isAtty()>:
c00102ea:	31 c0                	xor    eax,eax
c00102ec:	c3                   	ret    
c00102ed:	90                   	nop

c00102ee <Pipe::~Pipe()>:
c00102ee:	83 ec 0c             	sub    esp,0xc
c00102f1:	ba 78 a3 02 c0       	mov    edx,0xc002a378
c00102f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fa:	89 10                	mov    DWORD PTR [eax],edx
c00102fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010300:	83 ec 0c             	sub    esp,0xc
c0010303:	50                   	push   eax
c0010304:	e8 37 16 00 00       	call   c0011940 <UnixFile::~UnixFile()>
c0010309:	83 c4 10             	add    esp,0x10
c001030c:	90                   	nop
c001030d:	83 c4 0c             	add    esp,0xc
c0010310:	c3                   	ret    
c0010311:	90                   	nop

c0010312 <Pipe::~Pipe()>:
c0010312:	83 ec 0c             	sub    esp,0xc
c0010315:	83 ec 0c             	sub    esp,0xc
c0010318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031c:	e8 cd ff ff ff       	call   c00102ee <Pipe::~Pipe()>
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	83 ec 08             	sub    esp,0x8
c0010327:	6a 20                	push   0x20
c0010329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032d:	e8 3e 2b 00 00       	call   c0012e70 <operator delete(void*, unsigned long)>
c0010332:	83 c4 10             	add    esp,0x10
c0010335:	83 c4 0c             	add    esp,0xc
c0010338:	c3                   	ret    
c0010339:	90                   	nop

c001033a <Pipe::read(unsigned long long, void*, int*)>:
c001033a:	55                   	push   ebp
c001033b:	57                   	push   edi
c001033c:	56                   	push   esi
c001033d:	53                   	push   ebx
c001033e:	83 ec 1c             	sub    esp,0x1c
c0010341:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010345:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010349:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001034d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010350:	89 c8                	mov    eax,ecx
c0010352:	99                   	cdq    
c0010353:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010357:	74 19                	je     c0010372 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010359:	39 f9                	cmp    ecx,edi
c001035b:	89 d1                	mov    ecx,edx
c001035d:	19 f1                	sbb    ecx,esi
c001035f:	73 11                	jae    c0010372 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010361:	e8 66 da 00 00       	call   c001ddcc <lockScheduler()>
c0010366:	e8 9d dd 00 00       	call   c001e108 <schedule()>
c001036b:	e8 5e da 00 00       	call   c001ddce <unlockScheduler()>
c0010370:	eb db                	jmp    c001034d <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010372:	39 f8                	cmp    eax,edi
c0010374:	89 d1                	mov    ecx,edx
c0010376:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001037a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001037e:	19 f1                	sbb    ecx,esi
c0010380:	73 08                	jae    c001038a <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010382:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010386:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001038a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010390:	29 c6                	sub    esi,eax
c0010392:	89 f1                	mov    ecx,esi
c0010394:	c1 f9 1f             	sar    ecx,0x1f
c0010397:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001039b:	89 ca                	mov    edx,ecx
c001039d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103a1:	19 d1                	sbb    ecx,edx
c00103a3:	73 04                	jae    c00103a9 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103a9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103ad:	89 fd                	mov    ebp,edi
c00103af:	29 f5                	sub    ebp,esi
c00103b1:	85 f6                	test   esi,esi
c00103b3:	74 12                	je     c00103c7 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b5:	52                   	push   edx
c00103b6:	56                   	push   esi
c00103b7:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103ba:	50                   	push   eax
c00103bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103bf:	e8 80 03 ff ff       	call   c0000744 <memcpy>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	85 ed                	test   ebp,ebp
c00103c9:	74 12                	je     c00103dd <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103cb:	50                   	push   eax
c00103cc:	55                   	push   ebp
c00103cd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103d0:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d4:	56                   	push   esi
c00103d5:	e8 6a 03 ff ff       	call   c0000744 <memcpy>
c00103da:	83 c4 10             	add    esp,0x10
c00103dd:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103e6:	99                   	cdq    
c00103e7:	89 f7                	mov    edi,esi
c00103e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103f1:	c1 ff 1f             	sar    edi,0x1f
c00103f4:	57                   	push   edi
c00103f5:	56                   	push   esi
c00103f6:	52                   	push   edx
c00103f7:	50                   	push   eax
c00103f8:	e8 af 66 01 00       	call   c0026aac <__umoddi3>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010403:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010408:	75 10                	jne    c001041a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001040a:	83 ec 0c             	sub    esp,0xc
c001040d:	68 35 a3 02 c0       	push   0xc002a335
c0010412:	e8 da a1 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0010417:	83 c4 10             	add    esp,0x10
c001041a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001041e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010422:	89 10                	mov    DWORD PTR [eax],edx
c0010424:	83 c4 1c             	add    esp,0x1c
c0010427:	31 c0                	xor    eax,eax
c0010429:	5b                   	pop    ebx
c001042a:	5e                   	pop    esi
c001042b:	5f                   	pop    edi
c001042c:	5d                   	pop    ebp
c001042d:	c3                   	ret    

c001042e <Pipe::write(unsigned long long, void*, int*)>:
c001042e:	55                   	push   ebp
c001042f:	57                   	push   edi
c0010430:	56                   	push   esi
c0010431:	53                   	push   ebx
c0010432:	83 ec 1c             	sub    esp,0x1c
c0010435:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010439:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001043d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010441:	89 04 24             	mov    DWORD PTR [esp],eax
c0010444:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010447:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001044a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001044e:	89 de                	mov    esi,ebx
c0010450:	89 df                	mov    edi,ebx
c0010452:	c1 ff 1f             	sar    edi,0x1f
c0010455:	01 c6                	add    esi,eax
c0010457:	89 c8                	mov    eax,ecx
c0010459:	11 d7                	adc    edi,edx
c001045b:	99                   	cdq    
c001045c:	39 f1                	cmp    ecx,esi
c001045e:	89 d0                	mov    eax,edx
c0010460:	19 f8                	sbb    eax,edi
c0010462:	b8 01 00 00 00       	mov    eax,0x1
c0010467:	0f 82 80 00 00 00    	jb     c00104ed <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001046d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010470:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010473:	01 d8                	add    eax,ebx
c0010475:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010479:	99                   	cdq    
c001047a:	f7 f9                	idiv   ecx
c001047c:	29 d1                	sub    ecx,edx
c001047e:	89 d7                	mov    edi,edx
c0010480:	89 c8                	mov    eax,ecx
c0010482:	99                   	cdq    
c0010483:	39 ce                	cmp    esi,ecx
c0010485:	19 d3                	sbb    ebx,edx
c0010487:	bb 00 00 00 00       	mov    ebx,0x0
c001048c:	72 04                	jb     c0010492 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001048e:	89 f3                	mov    ebx,esi
c0010490:	29 cb                	sub    ebx,ecx
c0010492:	89 f1                	mov    ecx,esi
c0010494:	29 d9                	sub    ecx,ebx
c0010496:	74 1a                	je     c00104b2 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010498:	52                   	push   edx
c0010499:	51                   	push   ecx
c001049a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001049e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a2:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a5:	57                   	push   edi
c00104a6:	e8 99 02 ff ff       	call   c0000744 <memcpy>
c00104ab:	83 c4 10             	add    esp,0x10
c00104ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b2:	85 db                	test   ebx,ebx
c00104b4:	74 12                	je     c00104c8 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104b6:	50                   	push   eax
c00104b7:	53                   	push   ebx
c00104b8:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104bc:	51                   	push   ecx
c00104bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104c0:	e8 7f 02 ff ff       	call   c0000744 <memcpy>
c00104c5:	83 c4 10             	add    esp,0x10
c00104c8:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104cb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104d0:	75 10                	jne    c00104e2 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d2:	83 ec 0c             	sub    esp,0xc
c00104d5:	68 51 a3 02 c0       	push   0xc002a351
c00104da:	e8 12 a1 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c00104df:	83 c4 10             	add    esp,0x10
c00104e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104e6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104e9:	89 38                	mov    DWORD PTR [eax],edi
c00104eb:	31 c0                	xor    eax,eax
c00104ed:	83 c4 1c             	add    esp,0x1c
c00104f0:	5b                   	pop    ebx
c00104f1:	5e                   	pop    esi
c00104f2:	5f                   	pop    edi
c00104f3:	5d                   	pop    ebp
c00104f4:	c3                   	ret    
c00104f5:	90                   	nop

c00104f6 <Pipe::Pipe(int)>:
c00104f6:	83 ec 0c             	sub    esp,0xc
c00104f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fd:	83 ec 08             	sub    esp,0x8
c0010500:	6a 00                	push   0x0
c0010502:	50                   	push   eax
c0010503:	e8 56 12 00 00       	call   c001175e <UnixFile::UnixFile(int)>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	ba 78 a3 02 c0       	mov    edx,0xc002a378
c0010510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010514:	89 10                	mov    DWORD PTR [eax],edx
c0010516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001051e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010525:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001052c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010530:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010537:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001053b:	83 ec 0c             	sub    esp,0xc
c001053e:	50                   	push   eax
c001053f:	e8 fc f2 ff ff       	call   c000f840 <malloc>
c0010544:	83 c4 10             	add    esp,0x10
c0010547:	89 c2                	mov    edx,eax
c0010549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010554:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010558:	90                   	nop
c0010559:	83 c4 0c             	add    esp,0xc
c001055c:	c3                   	ret    
c001055d:	90                   	nop

c001055e <VgaText::isAtty()>:
c001055e:	b0 01                	mov    al,0x1
c0010560:	c3                   	ret    
c0010561:	90                   	nop

c0010562 <VgaText::~VgaText()>:
c0010562:	83 ec 0c             	sub    esp,0xc
c0010565:	ba 34 a4 02 c0       	mov    edx,0xc002a434
c001056a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056e:	89 10                	mov    DWORD PTR [eax],edx
c0010570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010574:	83 ec 0c             	sub    esp,0xc
c0010577:	50                   	push   eax
c0010578:	e8 c3 13 00 00       	call   c0011940 <UnixFile::~UnixFile()>
c001057d:	83 c4 10             	add    esp,0x10
c0010580:	90                   	nop
c0010581:	83 c4 0c             	add    esp,0xc
c0010584:	c3                   	ret    
c0010585:	90                   	nop

c0010586 <VgaText::~VgaText()>:
c0010586:	83 ec 0c             	sub    esp,0xc
c0010589:	83 ec 0c             	sub    esp,0xc
c001058c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010590:	e8 cd ff ff ff       	call   c0010562 <VgaText::~VgaText()>
c0010595:	83 c4 10             	add    esp,0x10
c0010598:	83 ec 08             	sub    esp,0x8
c001059b:	68 60 12 00 00       	push   0x1260
c00105a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a4:	e8 c7 28 00 00       	call   c0012e70 <operator delete(void*, unsigned long)>
c00105a9:	83 c4 10             	add    esp,0x10
c00105ac:	83 c4 0c             	add    esp,0xc
c00105af:	c3                   	ret    

c00105b0 <VgaText::read(unsigned long long, void*, int*)>:
c00105b0:	83 ec 10             	sub    esp,0x10
c00105b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105bf:	e8 2e 5d 00 00       	call   c00162f2 <readKeyboard(VgaText*, char*, unsigned long)>
c00105c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105c8:	89 02                	mov    DWORD PTR [edx],eax
c00105ca:	31 c0                	xor    eax,eax
c00105cc:	83 c4 1c             	add    esp,0x1c
c00105cf:	c3                   	ret    

c00105d0 <setTerminalScrollLock(bool)>:
c00105d0:	c3                   	ret    

c00105d1 <addToTerminalCycle(VgaText*)>:
c00105d1:	8b 15 80 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e480
c00105d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105db:	85 d2                	test   edx,edx
c00105dd:	75 0c                	jne    c00105eb <addToTerminalCycle(VgaText*)+0x1a>
c00105df:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e5:	a3 80 e4 02 c0       	mov    ds:0xc002e480,eax
c00105ea:	c3                   	ret    
c00105eb:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105f1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105f7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105fd:	c3                   	ret    

c00105fe <installVgaTextImplementation()>:
c00105fe:	83 ec 10             	sub    esp,0x10
c0010601:	6a 20                	push   0x20
c0010603:	6a 00                	push   0x0
c0010605:	68 60 e4 02 c0       	push   0xc002e460
c001060a:	e8 69 01 ff ff       	call   c0000778 <memset>
c001060f:	83 c4 1c             	add    esp,0x1c
c0010612:	c3                   	ret    

c0010613 <scrollTerminalScrollLock(int)>:
c0010613:	c3                   	ret    

c0010614 <VgaText::load()>:
c0010614:	53                   	push   ebx
c0010615:	31 c0                	xor    eax,eax
c0010617:	83 ec 58             	sub    esp,0x58
c001061a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001061e:	89 e2                	mov    edx,esp
c0010620:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010624:	40                   	inc    eax
c0010625:	83 f8 50             	cmp    eax,0x50
c0010628:	75 f6                	jne    c0010620 <VgaText::load()+0xc>
c001062a:	31 c0                	xor    eax,eax
c001062c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010633:	84 c9                	test   cl,cl
c0010635:	74 06                	je     c001063d <VgaText::load()+0x29>
c0010637:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001063a:	40                   	inc    eax
c001063b:	eb ef                	jmp    c001062c <VgaText::load()+0x18>
c001063d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010643:	85 c0                	test   eax,eax
c0010645:	74 09                	je     c0010650 <VgaText::load()+0x3c>
c0010647:	51                   	push   ecx
c0010648:	51                   	push   ecx
c0010649:	52                   	push   edx
c001064a:	53                   	push   ebx
c001064b:	ff d0                	call   eax
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010656:	85 c0                	test   eax,eax
c0010658:	74 09                	je     c0010663 <VgaText::load()+0x4f>
c001065a:	83 ec 0c             	sub    esp,0xc
c001065d:	53                   	push   ebx
c001065e:	ff d0                	call   eax
c0010660:	83 c4 10             	add    esp,0x10
c0010663:	83 c4 58             	add    esp,0x58
c0010666:	5b                   	pop    ebx
c0010667:	c3                   	ret    

c0010668 <VgaText::updateCursor()>:
c0010668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066c:	39 05 84 e4 02 c0    	cmp    DWORD PTR ds:0xc002e484,eax
c0010672:	75 0c                	jne    c0010680 <VgaText::updateCursor()+0x18>
c0010674:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001067a:	85 c0                	test   eax,eax
c001067c:	74 02                	je     c0010680 <VgaText::updateCursor()+0x18>
c001067e:	ff e0                	jmp    eax
c0010680:	c3                   	ret    
c0010681:	90                   	nop

c0010682 <VgaText::showCursor(bool)>:
c0010682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010686:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001068a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010690:	c3                   	ret    
c0010691:	90                   	nop

c0010692 <VgaText::disableBlink(bool)>:
c0010692:	56                   	push   esi
c0010693:	53                   	push   ebx
c0010694:	51                   	push   ecx
c0010695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010699:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001069d:	39 1d 84 e4 02 c0    	cmp    DWORD PTR ds:0xc002e484,ebx
c00106a3:	75 18                	jne    c00106bd <VgaText::disableBlink(bool)+0x2b>
c00106a5:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106ab:	85 c0                	test   eax,eax
c00106ad:	74 0e                	je     c00106bd <VgaText::disableBlink(bool)+0x2b>
c00106af:	89 f1                	mov    ecx,esi
c00106b1:	52                   	push   edx
c00106b2:	52                   	push   edx
c00106b3:	0f b6 d1             	movzx  edx,cl
c00106b6:	52                   	push   edx
c00106b7:	53                   	push   ebx
c00106b8:	ff d0                	call   eax
c00106ba:	83 c4 10             	add    esp,0x10
c00106bd:	89 f0                	mov    eax,esi
c00106bf:	83 f0 01             	xor    eax,0x1
c00106c2:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106c8:	58                   	pop    eax
c00106c9:	5b                   	pop    ebx
c00106ca:	5e                   	pop    esi
c00106cb:	c3                   	ret    

c00106cc <VgaText::doANSI_SGR(int)>:
c00106cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d4:	85 d2                	test   edx,edx
c00106d6:	75 14                	jne    c00106ec <VgaText::doANSI_SGR(int)+0x20>
c00106d8:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106de:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e4:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106ea:	eb 65                	jmp    c0010751 <VgaText::doANSI_SGR(int)+0x85>
c00106ec:	83 fa 07             	cmp    edx,0x7
c00106ef:	75 14                	jne    c0010705 <VgaText::doANSI_SGR(int)+0x39>
c00106f1:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106f7:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106fd:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010703:	eb 4c                	jmp    c0010751 <VgaText::doANSI_SGR(int)+0x85>
c0010705:	83 fa 1b             	cmp    edx,0x1b
c0010708:	74 ce                	je     c00106d8 <VgaText::doANSI_SGR(int)+0xc>
c001070a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001070d:	83 f9 07             	cmp    ecx,0x7
c0010710:	77 09                	ja     c001071b <VgaText::doANSI_SGR(int)+0x4f>
c0010712:	8b 14 8d 00 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d00]
c0010719:	eb 20                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x6f>
c001071b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001071e:	83 f9 07             	cmp    ecx,0x7
c0010721:	77 09                	ja     c001072c <VgaText::doANSI_SGR(int)+0x60>
c0010723:	8b 14 8d 00 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d00]
c001072a:	eb 25                	jmp    c0010751 <VgaText::doANSI_SGR(int)+0x85>
c001072c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001072f:	83 f9 07             	cmp    ecx,0x7
c0010732:	77 0e                	ja     c0010742 <VgaText::doANSI_SGR(int)+0x76>
c0010734:	8b 14 95 b8 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e48]
c001073b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010741:	c3                   	ret    
c0010742:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010745:	83 f9 07             	cmp    ecx,0x7
c0010748:	77 0d                	ja     c0010757 <VgaText::doANSI_SGR(int)+0x8b>
c001074a:	8b 14 95 90 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e70]
c0010751:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010757:	c3                   	ret    

c0010758 <VgaText::setDefaultBgColour(VgaColour)>:
c0010758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010760:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010766:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001076c:	c3                   	ret    
c001076d:	90                   	nop

c001076e <VgaText::setDefaultFgColour(VgaColour)>:
c001076e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010772:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010776:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001077c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010782:	c3                   	ret    
c0010783:	90                   	nop

c0010784 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010784:	53                   	push   ebx
c0010785:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010789:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001078d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010791:	51                   	push   ecx
c0010792:	e8 c1 ff ff ff       	call   c0010758 <VgaText::setDefaultBgColour(VgaColour)>
c0010797:	58                   	pop    eax
c0010798:	5a                   	pop    edx
c0010799:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001079d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107a1:	5b                   	pop    ebx
c00107a2:	eb ca                	jmp    c001076e <VgaText::setDefaultFgColour(VgaColour)>

c00107a4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107a8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107ad:	83 e0 0f             	and    eax,0xf
c00107b0:	c1 e2 04             	shl    edx,0x4
c00107b3:	09 d0                	or     eax,edx
c00107b5:	c3                   	ret    

c00107b6 <VgaText::scrollScreen()>:
c00107b6:	57                   	push   edi
c00107b7:	56                   	push   esi
c00107b8:	be 01 00 00 00       	mov    esi,0x1
c00107bd:	53                   	push   ebx
c00107be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c2:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107c8:	31 ff                	xor    edi,edi
c00107ca:	01 d9                	add    ecx,ebx
c00107cc:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107cf:	83 fe 17             	cmp    esi,0x17
c00107d2:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107d8:	75 28                	jne    c0010802 <VgaText::scrollScreen()+0x4c>
c00107da:	f7 c7 01 00 00 00    	test   edi,0x1
c00107e0:	74 1c                	je     c00107fe <VgaText::scrollScreen()+0x48>
c00107e2:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107e9:	50                   	push   eax
c00107ea:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107f1:	50                   	push   eax
c00107f2:	e8 ad ff ff ff       	call   c00107a4 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f7:	5a                   	pop    edx
c00107f8:	5a                   	pop    edx
c00107f9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107fc:	eb 04                	jmp    c0010802 <VgaText::scrollScreen()+0x4c>
c00107fe:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010802:	47                   	inc    edi
c0010803:	41                   	inc    ecx
c0010804:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001080a:	75 c0                	jne    c00107cc <VgaText::scrollScreen()+0x16>
c001080c:	46                   	inc    esi
c001080d:	83 fe 18             	cmp    esi,0x18
c0010810:	75 b0                	jne    c00107c2 <VgaText::scrollScreen()+0xc>
c0010812:	39 1d 84 e4 02 c0    	cmp    DWORD PTR ds:0xc002e484,ebx
c0010818:	75 24                	jne    c001083e <VgaText::scrollScreen()+0x88>
c001081a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010821:	74 08                	je     c001082b <VgaText::scrollScreen()+0x75>
c0010823:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010829:	eb 13                	jmp    c001083e <VgaText::scrollScreen()+0x88>
c001082b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010831:	85 c0                	test   eax,eax
c0010833:	74 09                	je     c001083e <VgaText::scrollScreen()+0x88>
c0010835:	83 ec 0c             	sub    esp,0xc
c0010838:	53                   	push   ebx
c0010839:	ff d0                	call   eax
c001083b:	83 c4 10             	add    esp,0x10
c001083e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010842:	5b                   	pop    ebx
c0010843:	5e                   	pop    esi
c0010844:	5f                   	pop    edi
c0010845:	e9 1e fe ff ff       	jmp    c0010668 <VgaText::updateCursor()>

c001084a <VgaText::combineCharAndColour(char, unsigned char)>:
c001084a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001084f:	c1 e0 08             	shl    eax,0x8
c0010852:	89 c2                	mov    edx,eax
c0010854:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010859:	09 d0                	or     eax,edx
c001085b:	c3                   	ret    

c001085c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001085c:	53                   	push   ebx
c001085d:	83 ec 08             	sub    esp,0x8
c0010860:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010864:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010869:	50                   	push   eax
c001086a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086f:	50                   	push   eax
c0010870:	e8 2f ff ff ff       	call   c00107a4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010875:	5a                   	pop    edx
c0010876:	0f b6 c0             	movzx  eax,al
c0010879:	5b                   	pop    ebx
c001087a:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001087f:	50                   	push   eax
c0010880:	53                   	push   ebx
c0010881:	e8 c4 ff ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010886:	5a                   	pop    edx
c0010887:	5a                   	pop    edx
c0010888:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001088e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010892:	0f b7 d2             	movzx  edx,dx
c0010895:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001089a:	39 0d 84 e4 02 c0    	cmp    DWORD PTR ds:0xc002e484,ecx
c00108a0:	75 14                	jne    c00108b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a2:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108a8:	85 c0                	test   eax,eax
c00108aa:	74 0a                	je     c00108b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108ac:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108b0:	83 c4 08             	add    esp,0x8
c00108b3:	5b                   	pop    ebx
c00108b4:	ff e0                	jmp    eax
c00108b6:	83 c4 08             	add    esp,0x8
c00108b9:	5b                   	pop    ebx
c00108ba:	c3                   	ret    
c00108bb:	90                   	nop

c00108bc <VgaText::getCursorX()>:
c00108bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c0:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108c6:	c3                   	ret    
c00108c7:	90                   	nop

c00108c8 <VgaText::getCursorY()>:
c00108c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108cc:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d2:	c3                   	ret    
c00108d3:	90                   	nop

c00108d4 <VgaText::setCursor(int, int)>:
c00108d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108dc:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e6:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ec:	e9 77 fd ff ff       	jmp    c0010668 <VgaText::updateCursor()>
c00108f1:	90                   	nop

c00108f2 <VgaText::setCursorX(int)>:
c00108f2:	83 ec 10             	sub    esp,0x10
c00108f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010903:	50                   	push   eax
c0010904:	e8 cb ff ff ff       	call   c00108d4 <VgaText::setCursor(int, int)>
c0010909:	83 c4 1c             	add    esp,0x1c
c001090c:	c3                   	ret    
c001090d:	90                   	nop

c001090e <VgaText::setCursorY(int)>:
c001090e:	83 ec 10             	sub    esp,0x10
c0010911:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010915:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010919:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001091f:	50                   	push   eax
c0010920:	e8 af ff ff ff       	call   c00108d4 <VgaText::setCursor(int, int)>
c0010925:	83 c4 1c             	add    esp,0x1c
c0010928:	c3                   	ret    
c0010929:	90                   	nop

c001092a <VgaText::incrementCursor(bool)>:
c001092a:	56                   	push   esi
c001092b:	53                   	push   ebx
c001092c:	51                   	push   ecx
c001092d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010931:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010935:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001093b:	40                   	inc    eax
c001093c:	83 f8 50             	cmp    eax,0x50
c001093f:	74 08                	je     c0010949 <VgaText::incrementCursor(bool)+0x1f>
c0010941:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010947:	eb 33                	jmp    c001097c <VgaText::incrementCursor(bool)+0x52>
c0010949:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001094f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010959:	8d 50 01             	lea    edx,[eax+0x1]
c001095c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010962:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010968:	75 12                	jne    c001097c <VgaText::incrementCursor(bool)+0x52>
c001096a:	83 ec 0c             	sub    esp,0xc
c001096d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010973:	53                   	push   ebx
c0010974:	e8 3d fe ff ff       	call   c00107b6 <VgaText::scrollScreen()>
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	89 f0                	mov    eax,esi
c001097e:	84 c0                	test   al,al
c0010980:	74 0c                	je     c001098e <VgaText::incrementCursor(bool)+0x64>
c0010982:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010986:	5a                   	pop    edx
c0010987:	5b                   	pop    ebx
c0010988:	5e                   	pop    esi
c0010989:	e9 da fc ff ff       	jmp    c0010668 <VgaText::updateCursor()>
c001098e:	58                   	pop    eax
c001098f:	5b                   	pop    ebx
c0010990:	5e                   	pop    esi
c0010991:	c3                   	ret    

c0010992 <VgaText::updateRAMUsageDisplay(int)>:
c0010992:	56                   	push   esi
c0010993:	8b 35 e0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2e0
c0010999:	53                   	push   ebx
c001099a:	bb 0a 00 00 00       	mov    ebx,0xa
c001099f:	6a 0f                	push   0xf
c00109a1:	6a 00                	push   0x0
c00109a3:	e8 fc fd ff ff       	call   c00107a4 <VgaText::combineColours(unsigned char, unsigned char)>
c00109a8:	5a                   	pop    edx
c00109a9:	59                   	pop    ecx
c00109aa:	0f b6 c8             	movzx  ecx,al
c00109ad:	51                   	push   ecx
c00109ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b2:	99                   	cdq    
c00109b3:	f7 fb                	idiv   ebx
c00109b5:	89 d3                	mov    ebx,edx
c00109b7:	83 c0 30             	add    eax,0x30
c00109ba:	83 c3 30             	add    ebx,0x30
c00109bd:	0f be c0             	movsx  eax,al
c00109c0:	0f b6 db             	movzx  ebx,bl
c00109c3:	50                   	push   eax
c00109c4:	e8 81 fe ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c00109c9:	5a                   	pop    edx
c00109ca:	5a                   	pop    edx
c00109cb:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d2:	51                   	push   ecx
c00109d3:	53                   	push   ebx
c00109d4:	e8 71 fe ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c00109d9:	5b                   	pop    ebx
c00109da:	5a                   	pop    edx
c00109db:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e2:	51                   	push   ecx
c00109e3:	6a 25                	push   0x25
c00109e5:	e8 60 fe ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c00109ea:	59                   	pop    ecx
c00109eb:	5b                   	pop    ebx
c00109ec:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f3:	5b                   	pop    ebx
c00109f4:	5e                   	pop    esi
c00109f5:	c3                   	ret    

c00109f6 <VgaText::updateDiskUsage()>:
c00109f6:	55                   	push   ebp
c00109f7:	bd 10 27 00 00       	mov    ebp,0x2710
c00109fc:	57                   	push   edi
c00109fd:	8b 3d e0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2e0
c0010a03:	56                   	push   esi
c0010a04:	53                   	push   ebx
c0010a05:	6a 0f                	push   0xf
c0010a07:	6a 00                	push   0x0
c0010a09:	e8 96 fd ff ff       	call   c00107a4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a0e:	5a                   	pop    edx
c0010a0f:	0f b6 d8             	movzx  ebx,al
c0010a12:	59                   	pop    ecx
c0010a13:	8b 35 28 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032728
c0010a19:	53                   	push   ebx
c0010a1a:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a1f:	89 f0                	mov    eax,esi
c0010a21:	99                   	cdq    
c0010a22:	f7 fd                	idiv   ebp
c0010a24:	99                   	cdq    
c0010a25:	f7 f9                	idiv   ecx
c0010a27:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2a:	0f b6 c0             	movzx  eax,al
c0010a2d:	50                   	push   eax
c0010a2e:	e8 17 fe ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a33:	5d                   	pop    ebp
c0010a34:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a39:	5a                   	pop    edx
c0010a3a:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a3e:	53                   	push   ebx
c0010a3f:	89 f0                	mov    eax,esi
c0010a41:	99                   	cdq    
c0010a42:	f7 fd                	idiv   ebp
c0010a44:	99                   	cdq    
c0010a45:	f7 f9                	idiv   ecx
c0010a47:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4a:	0f b6 c0             	movzx  eax,al
c0010a4d:	50                   	push   eax
c0010a4e:	e8 f7 fd ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a53:	5d                   	pop    ebp
c0010a54:	bd 64 00 00 00       	mov    ebp,0x64
c0010a59:	5a                   	pop    edx
c0010a5a:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a61:	53                   	push   ebx
c0010a62:	89 f0                	mov    eax,esi
c0010a64:	99                   	cdq    
c0010a65:	f7 fd                	idiv   ebp
c0010a67:	99                   	cdq    
c0010a68:	f7 f9                	idiv   ecx
c0010a6a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6d:	0f b6 c0             	movzx  eax,al
c0010a70:	50                   	push   eax
c0010a71:	e8 d4 fd ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a76:	5d                   	pop    ebp
c0010a77:	5a                   	pop    edx
c0010a78:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a7f:	53                   	push   ebx
c0010a80:	89 f0                	mov    eax,esi
c0010a82:	99                   	cdq    
c0010a83:	f7 f9                	idiv   ecx
c0010a85:	89 d6                	mov    esi,edx
c0010a87:	99                   	cdq    
c0010a88:	f7 f9                	idiv   ecx
c0010a8a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8d:	0f b6 c0             	movzx  eax,al
c0010a90:	50                   	push   eax
c0010a91:	e8 b4 fd ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5d                   	pop    ebp
c0010a97:	5a                   	pop    edx
c0010a98:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a9f:	53                   	push   ebx
c0010aa0:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa3:	0f b6 f0             	movzx  esi,al
c0010aa6:	56                   	push   esi
c0010aa7:	e8 9e fd ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010aac:	5e                   	pop    esi
c0010aad:	8b 35 24 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032724
c0010ab3:	5d                   	pop    ebp
c0010ab4:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010abb:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ac0:	53                   	push   ebx
c0010ac1:	89 f0                	mov    eax,esi
c0010ac3:	99                   	cdq    
c0010ac4:	f7 fd                	idiv   ebp
c0010ac6:	99                   	cdq    
c0010ac7:	f7 f9                	idiv   ecx
c0010ac9:	8d 42 30             	lea    eax,[edx+0x30]
c0010acc:	0f b6 c0             	movzx  eax,al
c0010acf:	50                   	push   eax
c0010ad0:	e8 75 fd ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad5:	5a                   	pop    edx
c0010ad6:	5d                   	pop    ebp
c0010ad7:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ade:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae3:	53                   	push   ebx
c0010ae4:	89 f0                	mov    eax,esi
c0010ae6:	99                   	cdq    
c0010ae7:	f7 fd                	idiv   ebp
c0010ae9:	99                   	cdq    
c0010aea:	f7 f9                	idiv   ecx
c0010aec:	8d 42 30             	lea    eax,[edx+0x30]
c0010aef:	0f b6 c0             	movzx  eax,al
c0010af2:	50                   	push   eax
c0010af3:	e8 52 fd ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010af8:	5a                   	pop    edx
c0010af9:	5d                   	pop    ebp
c0010afa:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b01:	bd 64 00 00 00       	mov    ebp,0x64
c0010b06:	53                   	push   ebx
c0010b07:	89 f0                	mov    eax,esi
c0010b09:	99                   	cdq    
c0010b0a:	f7 fd                	idiv   ebp
c0010b0c:	99                   	cdq    
c0010b0d:	f7 f9                	idiv   ecx
c0010b0f:	83 c2 30             	add    edx,0x30
c0010b12:	0f b6 d2             	movzx  edx,dl
c0010b15:	52                   	push   edx
c0010b16:	e8 2f fd ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1b:	5a                   	pop    edx
c0010b1c:	5d                   	pop    ebp
c0010b1d:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b24:	53                   	push   ebx
c0010b25:	89 f0                	mov    eax,esi
c0010b27:	99                   	cdq    
c0010b28:	f7 f9                	idiv   ecx
c0010b2a:	89 d6                	mov    esi,edx
c0010b2c:	99                   	cdq    
c0010b2d:	f7 f9                	idiv   ecx
c0010b2f:	8d 42 30             	lea    eax,[edx+0x30]
c0010b32:	0f b6 c0             	movzx  eax,al
c0010b35:	50                   	push   eax
c0010b36:	e8 0f fd ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3b:	5a                   	pop    edx
c0010b3c:	59                   	pop    ecx
c0010b3d:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b44:	53                   	push   ebx
c0010b45:	8d 46 30             	lea    eax,[esi+0x30]
c0010b48:	0f b6 f0             	movzx  esi,al
c0010b4b:	56                   	push   esi
c0010b4c:	e8 f9 fc ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010b51:	5b                   	pop    ebx
c0010b52:	5e                   	pop    esi
c0010b53:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b5a:	5b                   	pop    ebx
c0010b5b:	5e                   	pop    esi
c0010b5c:	5f                   	pop    edi
c0010b5d:	5d                   	pop    ebp
c0010b5e:	c3                   	ret    
c0010b5f:	90                   	nop

c0010b60 <VgaText::updateTitle()>:
c0010b60:	53                   	push   ebx
c0010b61:	31 c0                	xor    eax,eax
c0010b63:	83 ec 58             	sub    esp,0x58
c0010b66:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b6a:	89 e1                	mov    ecx,esp
c0010b6c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b70:	40                   	inc    eax
c0010b71:	83 f8 50             	cmp    eax,0x50
c0010b74:	75 f6                	jne    c0010b6c <VgaText::updateTitle()+0xc>
c0010b76:	31 c0                	xor    eax,eax
c0010b78:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b7f:	84 db                	test   bl,bl
c0010b81:	74 06                	je     c0010b89 <VgaText::updateTitle()+0x29>
c0010b83:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b86:	40                   	inc    eax
c0010b87:	eb ef                	jmp    c0010b78 <VgaText::updateTitle()+0x18>
c0010b89:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b8f:	85 c0                	test   eax,eax
c0010b91:	74 09                	je     c0010b9c <VgaText::updateTitle()+0x3c>
c0010b93:	53                   	push   ebx
c0010b94:	53                   	push   ebx
c0010b95:	51                   	push   ecx
c0010b96:	52                   	push   edx
c0010b97:	ff d0                	call   eax
c0010b99:	83 c4 10             	add    esp,0x10
c0010b9c:	e8 55 fe ff ff       	call   c00109f6 <VgaText::updateDiskUsage()>
c0010ba1:	83 c4 58             	add    esp,0x58
c0010ba4:	5b                   	pop    ebx
c0010ba5:	c3                   	ret    

c0010ba6 <VgaText::setTitleTextColour(VgaColour)>:
c0010ba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010baa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bae:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb4:	eb aa                	jmp    c0010b60 <VgaText::updateTitle()>

c0010bb6 <VgaText::setTitleColour(VgaColour)>:
c0010bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bbe:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc4:	eb 9a                	jmp    c0010b60 <VgaText::updateTitle()>

c0010bc6 <VgaText::setTitle(char*)>:
c0010bc6:	53                   	push   ebx
c0010bc7:	83 ec 10             	sub    esp,0x10
c0010bca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bd8:	50                   	push   eax
c0010bd9:	e8 56 fc fe ff       	call   c0000834 <strcpy>
c0010bde:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be2:	83 c4 18             	add    esp,0x18
c0010be5:	5b                   	pop    ebx
c0010be6:	e9 75 ff ff ff       	jmp    c0010b60 <VgaText::updateTitle()>
c0010beb:	90                   	nop

c0010bec <VgaText::decrementCursor(bool)>:
c0010bec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf4:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bfa:	85 c0                	test   eax,eax
c0010bfc:	74 07                	je     c0010c05 <VgaText::decrementCursor(bool)+0x19>
c0010bfe:	48                   	dec    eax
c0010bff:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c05:	84 c9                	test   cl,cl
c0010c07:	74 09                	je     c0010c12 <VgaText::decrementCursor(bool)+0x26>
c0010c09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c0d:	e9 56 fa ff ff       	jmp    c0010668 <VgaText::updateCursor()>
c0010c12:	c3                   	ret    
c0010c13:	90                   	nop

c0010c14 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c14:	53                   	push   ebx
c0010c15:	83 ec 08             	sub    esp,0x8
c0010c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c28:	3c 07                	cmp    al,0x7
c0010c2a:	75 2a                	jne    c0010c56 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c2c:	a1 3c e5 02 c0       	mov    eax,ds:0xc002e53c
c0010c31:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c39:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c41:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c4d:	83 c4 08             	add    esp,0x8
c0010c50:	5b                   	pop    ebx
c0010c51:	e9 f8 30 00 00       	jmp    c0013d4e <Buzzer::beep(int, int, bool)>
c0010c56:	3c 0d                	cmp    al,0xd
c0010c58:	75 0c                	jne    c0010c66 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c5a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c64:	eb 3b                	jmp    c0010ca1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c66:	3c 0a                	cmp    al,0xa
c0010c68:	75 40                	jne    c0010caa <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c6a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c70:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c7a:	8d 50 01             	lea    edx,[eax+0x1]
c0010c7d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c83:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c89:	75 12                	jne    c0010c9d <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c8b:	83 ec 0c             	sub    esp,0xc
c0010c8e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c94:	53                   	push   ebx
c0010c95:	e8 1c fb ff ff       	call   c00107b6 <VgaText::scrollScreen()>
c0010c9a:	83 c4 10             	add    esp,0x10
c0010c9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ca1:	83 c4 08             	add    esp,0x8
c0010ca4:	5b                   	pop    ebx
c0010ca5:	e9 be f9 ff ff       	jmp    c0010668 <VgaText::updateCursor()>
c0010caa:	3c 08                	cmp    al,0x8
c0010cac:	75 31                	jne    c0010cdf <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cae:	50                   	push   eax
c0010caf:	50                   	push   eax
c0010cb0:	6a 01                	push   0x1
c0010cb2:	53                   	push   ebx
c0010cb3:	e8 34 ff ff ff       	call   c0010bec <VgaText::decrementCursor(bool)>
c0010cb8:	5a                   	pop    edx
c0010cb9:	59                   	pop    ecx
c0010cba:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ccc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd2:	6a 20                	push   0x20
c0010cd4:	53                   	push   ebx
c0010cd5:	e8 82 fb ff ff       	call   c001085c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cda:	83 c4 28             	add    esp,0x28
c0010cdd:	5b                   	pop    ebx
c0010cde:	c3                   	ret    
c0010cdf:	83 ec 08             	sub    esp,0x8
c0010ce2:	0f be c0             	movsx  eax,al
c0010ce5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ceb:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cf1:	51                   	push   ecx
c0010cf2:	52                   	push   edx
c0010cf3:	50                   	push   eax
c0010cf4:	53                   	push   ebx
c0010cf5:	e8 62 fb ff ff       	call   c001085c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cfa:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cfe:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d06:	83 c4 28             	add    esp,0x28
c0010d09:	5b                   	pop    ebx
c0010d0a:	e9 1b fc ff ff       	jmp    c001092a <VgaText::incrementCursor(bool)>
c0010d0f:	90                   	nop

c0010d10 <VgaText::isShowingCursor()>:
c0010d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d14:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d1a:	c3                   	ret    
c0010d1b:	90                   	nop

c0010d1c <VgaText::isBlinkDisabled()>:
c0010d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d20:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d26:	83 f0 01             	xor    eax,0x1
c0010d29:	c3                   	ret    

c0010d2a <VgaText::setCursorHeight(int)>:
c0010d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d32:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d38:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d43:	e9 3a f9 ff ff       	jmp    c0010682 <VgaText::showCursor(bool)>

c0010d48 <VgaText::getCursorHeight()>:
c0010d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d4c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d52:	c3                   	ret    

c0010d53 <setActiveTerminal(VgaText*)>:
c0010d53:	53                   	push   ebx
c0010d54:	83 ec 08             	sub    esp,0x8
c0010d57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5b:	85 db                	test   ebx,ebx
c0010d5d:	75 11                	jne    c0010d70 <setActiveTerminal(VgaText*)+0x1d>
c0010d5f:	c7 44 24 10 8c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a38c
c0010d67:	83 c4 08             	add    esp,0x8
c0010d6a:	5b                   	pop    ebx
c0010d6b:	e9 81 98 00 00       	jmp    c001a5f1 <Krnl::panic(char const*)>
c0010d70:	50                   	push   eax
c0010d71:	50                   	push   eax
c0010d72:	53                   	push   ebx
c0010d73:	68 9a a3 02 c0       	push   0xc002a39a
c0010d78:	e8 d3 21 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0010d7d:	a1 84 e4 02 c0       	mov    eax,ds:0xc002e484
c0010d82:	83 c4 10             	add    esp,0x10
c0010d85:	85 c0                	test   eax,eax
c0010d87:	74 0c                	je     c0010d95 <setActiveTerminal(VgaText*)+0x42>
c0010d89:	83 ec 0c             	sub    esp,0xc
c0010d8c:	50                   	push   eax
c0010d8d:	e8 d6 f8 ff ff       	call   c0010668 <VgaText::updateCursor()>
c0010d92:	83 c4 10             	add    esp,0x10
c0010d95:	89 1d 84 e4 02 c0    	mov    DWORD PTR ds:0xc002e484,ebx
c0010d9b:	51                   	push   ecx
c0010d9c:	51                   	push   ecx
c0010d9d:	53                   	push   ebx
c0010d9e:	68 b2 a3 02 c0       	push   0xc002a3b2
c0010da3:	e8 a8 21 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0010da8:	83 c4 0c             	add    esp,0xc
c0010dab:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010db1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010db7:	53                   	push   ebx
c0010db8:	e8 17 fb ff ff       	call   c00108d4 <VgaText::setCursor(int, int)>
c0010dbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dc0:	e8 57 ff ff ff       	call   c0010d1c <VgaText::isBlinkDisabled()>
c0010dc5:	5a                   	pop    edx
c0010dc6:	0f b6 c0             	movzx  eax,al
c0010dc9:	59                   	pop    ecx
c0010dca:	50                   	push   eax
c0010dcb:	53                   	push   ebx
c0010dcc:	e8 c1 f8 ff ff       	call   c0010692 <VgaText::disableBlink(bool)>
c0010dd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd4:	e8 6f ff ff ff       	call   c0010d48 <VgaText::getCursorHeight()>
c0010dd9:	5a                   	pop    edx
c0010dda:	59                   	pop    ecx
c0010ddb:	50                   	push   eax
c0010ddc:	53                   	push   ebx
c0010ddd:	e8 48 ff ff ff       	call   c0010d2a <VgaText::setCursorHeight(int)>
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dec:	75 0a                	jne    c0010df8 <setActiveTerminal(VgaText*)+0xa5>
c0010dee:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010df8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dfc:	83 c4 08             	add    esp,0x8
c0010dff:	5b                   	pop    ebx
c0010e00:	e9 0f f8 ff ff       	jmp    c0010614 <VgaText::load()>

c0010e05 <doTerminalCycle()>:
c0010e05:	83 ec 18             	sub    esp,0x18
c0010e08:	a1 80 e4 02 c0       	mov    eax,ds:0xc002e480
c0010e0d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e13:	50                   	push   eax
c0010e14:	a3 80 e4 02 c0       	mov    ds:0xc002e480,eax
c0010e19:	e8 35 ff ff ff       	call   c0010d53 <setActiveTerminal(VgaText*)>
c0010e1e:	83 c4 1c             	add    esp,0x1c
c0010e21:	c3                   	ret    

c0010e22 <VgaText::doUpdate()>:
c0010e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e26:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e2c:	85 c0                	test   eax,eax
c0010e2e:	74 02                	je     c0010e32 <VgaText::doUpdate()+0x10>
c0010e30:	ff e0                	jmp    eax
c0010e32:	c3                   	ret    
c0010e33:	90                   	nop

c0010e34 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e34:	55                   	push   ebp
c0010e35:	57                   	push   edi
c0010e36:	56                   	push   esi
c0010e37:	53                   	push   ebx
c0010e38:	83 ec 1c             	sub    esp,0x1c
c0010e3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e3f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e44:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e4b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e4e:	50                   	push   eax
c0010e4f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e54:	50                   	push   eax
c0010e55:	e8 4a f9 ff ff       	call   c00107a4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e5a:	59                   	pop    ecx
c0010e5b:	0f b6 c0             	movzx  eax,al
c0010e5e:	5b                   	pop    ebx
c0010e5f:	31 c9                	xor    ecx,ecx
c0010e61:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e69:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e6d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e77:	0f b7 db             	movzx  ebx,bx
c0010e7a:	01 db                	add    ebx,ebx
c0010e7c:	01 fb                	add    ebx,edi
c0010e7e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e81:	84 c0                	test   al,al
c0010e83:	0f 84 38 01 00 00    	je     c0010fc1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e89:	3c 0d                	cmp    al,0xd
c0010e8b:	75 0f                	jne    c0010e9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e8d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e97:	e9 1f 01 00 00       	jmp    c0010fbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9c:	3c 0a                	cmp    al,0xa
c0010e9e:	75 5b                	jne    c0010efb <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ea0:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ea6:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eb0:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb3:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eb9:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ebf:	75 12                	jne    c0010ed3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010eca:	55                   	push   ebp
c0010ecb:	e8 e6 f8 ff ff       	call   c00107b6 <VgaText::scrollScreen()>
c0010ed0:	83 c4 10             	add    esp,0x10
c0010ed3:	83 ec 0c             	sub    esp,0xc
c0010ed6:	55                   	push   ebp
c0010ed7:	e8 8c f7 ff ff       	call   c0010668 <VgaText::updateCursor()>
c0010edc:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee4:	83 c4 10             	add    esp,0x10
c0010ee7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eed:	31 c9                	xor    ecx,ecx
c0010eef:	0f b7 db             	movzx  ebx,bx
c0010ef2:	01 db                	add    ebx,ebx
c0010ef4:	01 fb                	add    ebx,edi
c0010ef6:	e9 c0 00 00 00       	jmp    c0010fbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010efb:	3c 08                	cmp    al,0x8
c0010efd:	75 4e                	jne    c0010f4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010eff:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f03:	53                   	push   ebx
c0010f04:	53                   	push   ebx
c0010f05:	6a 01                	push   0x1
c0010f07:	55                   	push   ebp
c0010f08:	e8 df fc ff ff       	call   c0010bec <VgaText::decrementCursor(bool)>
c0010f0d:	58                   	pop    eax
c0010f0e:	5a                   	pop    edx
c0010f0f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f15:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f1b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f21:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f27:	6a 20                	push   0x20
c0010f29:	55                   	push   ebp
c0010f2a:	e8 2d f9 ff ff       	call   c001085c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f2f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f37:	83 c4 20             	add    esp,0x20
c0010f3a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f40:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f44:	0f b7 db             	movzx  ebx,bx
c0010f47:	01 db                	add    ebx,ebx
c0010f49:	01 fb                	add    ebx,edi
c0010f4b:	eb 6e                	jmp    c0010fbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f4d:	51                   	push   ecx
c0010f4e:	51                   	push   ecx
c0010f4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f53:	50                   	push   eax
c0010f54:	e8 f1 f8 ff ff       	call   c001084a <VgaText::combineCharAndColour(char, unsigned char)>
c0010f59:	83 c4 10             	add    esp,0x10
c0010f5c:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f5f:	39 2d 84 e4 02 c0    	cmp    DWORD PTR ds:0xc002e484,ebp
c0010f65:	75 2a                	jne    c0010f91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f67:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f6d:	85 c0                	test   eax,eax
c0010f6f:	74 20                	je     c0010f91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f71:	52                   	push   edx
c0010f72:	52                   	push   edx
c0010f73:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f79:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f87:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f8a:	51                   	push   ecx
c0010f8b:	55                   	push   ebp
c0010f8c:	ff d0                	call   eax
c0010f8e:	83 c4 20             	add    esp,0x20
c0010f91:	83 c3 02             	add    ebx,0x2
c0010f94:	50                   	push   eax
c0010f95:	50                   	push   eax
c0010f96:	6a 00                	push   0x0
c0010f98:	55                   	push   ebp
c0010f99:	e8 8c f9 ff ff       	call   c001092a <VgaText::incrementCursor(bool)>
c0010f9e:	83 c4 10             	add    esp,0x10
c0010fa1:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fa8:	75 0f                	jne    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010faa:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb2:	0f b7 db             	movzx  ebx,bx
c0010fb5:	01 db                	add    ebx,ebx
c0010fb7:	01 fb                	add    ebx,edi
c0010fb9:	b1 01                	mov    cl,0x1
c0010fbb:	46                   	inc    esi
c0010fbc:	e9 bd fe ff ff       	jmp    c0010e7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fc1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc5:	83 ec 0c             	sub    esp,0xc
c0010fc8:	55                   	push   ebp
c0010fc9:	e8 9a f6 ff ff       	call   c0010668 <VgaText::updateCursor()>
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd5:	84 c9                	test   cl,cl
c0010fd7:	74 0c                	je     c0010fe5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fd9:	83 ec 0c             	sub    esp,0xc
c0010fdc:	55                   	push   ebp
c0010fdd:	e8 40 fe ff ff       	call   c0010e22 <VgaText::doUpdate()>
c0010fe2:	83 c4 10             	add    esp,0x10
c0010fe5:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fec:	83 c4 1c             	add    esp,0x1c
c0010fef:	5b                   	pop    ebx
c0010ff0:	5e                   	pop    esi
c0010ff1:	5f                   	pop    edi
c0010ff2:	5d                   	pop    ebp
c0010ff3:	c3                   	ret    

c0010ff4 <VgaText::clearScreen()>:
c0010ff4:	57                   	push   edi
c0010ff5:	56                   	push   esi
c0010ff6:	31 f6                	xor    esi,esi
c0010ff8:	53                   	push   ebx
c0010ff9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ffd:	52                   	push   edx
c0010ffe:	6a 00                	push   0x0
c0011000:	6a 00                	push   0x0
c0011002:	53                   	push   ebx
c0011003:	e8 cc f8 ff ff       	call   c00108d4 <VgaText::setCursor(int, int)>
c0011008:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001100f:	83 c4 10             	add    esp,0x10
c0011012:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011018:	7e 26                	jle    c0011040 <VgaText::clearScreen()+0x4c>
c001101a:	31 ff                	xor    edi,edi
c001101c:	50                   	push   eax
c001101d:	50                   	push   eax
c001101e:	56                   	push   esi
c001101f:	57                   	push   edi
c0011020:	47                   	inc    edi
c0011021:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011027:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001102d:	6a 20                	push   0x20
c001102f:	53                   	push   ebx
c0011030:	e8 27 f8 ff ff       	call   c001085c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011035:	83 c4 20             	add    esp,0x20
c0011038:	83 ff 50             	cmp    edi,0x50
c001103b:	75 df                	jne    c001101c <VgaText::clearScreen()+0x28>
c001103d:	46                   	inc    esi
c001103e:	eb d2                	jmp    c0011012 <VgaText::clearScreen()+0x1e>
c0011040:	83 ec 0c             	sub    esp,0xc
c0011043:	53                   	push   ebx
c0011044:	e8 d9 fd ff ff       	call   c0010e22 <VgaText::doUpdate()>
c0011049:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011050:	83 c4 10             	add    esp,0x10
c0011053:	5b                   	pop    ebx
c0011054:	5e                   	pop    esi
c0011055:	5f                   	pop    edi
c0011056:	c3                   	ret    
c0011057:	90                   	nop

c0011058 <VgaText::putchar(char)>:
c0011058:	56                   	push   esi
c0011059:	53                   	push   ebx
c001105a:	83 ec 14             	sub    esp,0x14
c001105d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011061:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011065:	3c 5b                	cmp    al,0x5b
c0011067:	75 21                	jne    c001108a <VgaText::putchar(char)+0x32>
c0011069:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011070:	74 28                	je     c001109a <VgaText::putchar(char)+0x42>
c0011072:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001107b:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011085:	e9 e2 00 00 00       	jmp    c001116c <VgaText::putchar(char)+0x114>
c001108a:	3c 1b                	cmp    al,0x1b
c001108c:	75 0c                	jne    c001109a <VgaText::putchar(char)+0x42>
c001108e:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011095:	e9 d2 00 00 00       	jmp    c001116c <VgaText::putchar(char)+0x114>
c001109a:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110a0:	84 c9                	test   cl,cl
c00110a2:	0f 84 ab 00 00 00    	je     c0011153 <VgaText::putchar(char)+0xfb>
c00110a8:	8d 50 c0             	lea    edx,[eax-0x40]
c00110ab:	80 fa 3e             	cmp    dl,0x3e
c00110ae:	0f 87 82 00 00 00    	ja     c0011136 <VgaText::putchar(char)+0xde>
c00110b4:	3c 6d                	cmp    al,0x6d
c00110b6:	75 4d                	jne    c0011105 <VgaText::putchar(char)+0xad>
c00110b8:	31 f6                	xor    esi,esi
c00110ba:	31 d2                	xor    edx,edx
c00110bc:	31 c0                	xor    eax,eax
c00110be:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c4:	7e 30                	jle    c00110f6 <VgaText::putchar(char)+0x9e>
c00110c6:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110ce:	80 fa 3b             	cmp    dl,0x3b
c00110d1:	75 17                	jne    c00110ea <VgaText::putchar(char)+0x92>
c00110d3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110d7:	50                   	push   eax
c00110d8:	53                   	push   ebx
c00110d9:	e8 ee f5 ff ff       	call   c00106cc <VgaText::doANSI_SGR(int)>
c00110de:	59                   	pop    ecx
c00110df:	31 d2                	xor    edx,edx
c00110e1:	58                   	pop    eax
c00110e2:	31 c0                	xor    eax,eax
c00110e4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110e8:	eb 09                	jmp    c00110f3 <VgaText::putchar(char)+0x9b>
c00110ea:	6b c0 0a             	imul   eax,eax,0xa
c00110ed:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110f1:	88 ca                	mov    dl,cl
c00110f3:	46                   	inc    esi
c00110f4:	eb c8                	jmp    c00110be <VgaText::putchar(char)+0x66>
c00110f6:	84 d2                	test   dl,dl
c00110f8:	74 31                	je     c001112b <VgaText::putchar(char)+0xd3>
c00110fa:	50                   	push   eax
c00110fb:	53                   	push   ebx
c00110fc:	e8 cb f5 ff ff       	call   c00106cc <VgaText::doANSI_SGR(int)>
c0011101:	58                   	pop    eax
c0011102:	5a                   	pop    edx
c0011103:	eb 26                	jmp    c001112b <VgaText::putchar(char)+0xd3>
c0011105:	3c 4a                	cmp    al,0x4a
c0011107:	75 22                	jne    c001112b <VgaText::putchar(char)+0xd3>
c0011109:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011110:	75 19                	jne    c001112b <VgaText::putchar(char)+0xd3>
c0011112:	83 ec 0c             	sub    esp,0xc
c0011115:	53                   	push   ebx
c0011116:	e8 d9 fe ff ff       	call   c0010ff4 <VgaText::clearScreen()>
c001111b:	83 c4 0c             	add    esp,0xc
c001111e:	6a 00                	push   0x0
c0011120:	6a 00                	push   0x0
c0011122:	53                   	push   ebx
c0011123:	e8 ac f7 ff ff       	call   c00108d4 <VgaText::setCursor(int, int)>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011134:	eb 36                	jmp    c001116c <VgaText::putchar(char)+0x114>
c0011136:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001113c:	83 fa 0e             	cmp    edx,0xe
c001113f:	7f 2b                	jg     c001116c <VgaText::putchar(char)+0x114>
c0011141:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011144:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001114a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011151:	eb 19                	jmp    c001116c <VgaText::putchar(char)+0x114>
c0011153:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011159:	0f be c0             	movsx  eax,al
c001115c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011162:	50                   	push   eax
c0011163:	53                   	push   ebx
c0011164:	e8 ab fa ff ff       	call   c0010c14 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011169:	83 c4 10             	add    esp,0x10
c001116c:	83 c4 14             	add    esp,0x14
c001116f:	5b                   	pop    ebx
c0011170:	5e                   	pop    esi
c0011171:	c3                   	ret    

c0011172 <VgaText::puts(char const*)>:
c0011172:	53                   	push   ebx
c0011173:	83 ec 08             	sub    esp,0x8
c0011176:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001117a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001117d:	84 c0                	test   al,al
c001117f:	74 12                	je     c0011193 <VgaText::puts(char const*)+0x21>
c0011181:	43                   	inc    ebx
c0011182:	51                   	push   ecx
c0011183:	51                   	push   ecx
c0011184:	50                   	push   eax
c0011185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011189:	e8 ca fe ff ff       	call   c0011058 <VgaText::putchar(char)>
c001118e:	83 c4 10             	add    esp,0x10
c0011191:	eb e7                	jmp    c001117a <VgaText::puts(char const*)+0x8>
c0011193:	83 c4 08             	add    esp,0x8
c0011196:	5b                   	pop    ebx
c0011197:	c3                   	ret    

c0011198 <VgaText::putx(unsigned int)>:
c0011198:	57                   	push   edi
c0011199:	b9 11 00 00 00       	mov    ecx,0x11
c001119e:	56                   	push   esi
c001119f:	be ce a3 02 c0       	mov    esi,0xc002a3ce
c00111a4:	53                   	push   ebx
c00111a5:	83 ec 20             	sub    esp,0x20
c00111a8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111ac:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111b0:	fc                   	cld    
c00111b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b3:	be 08 00 00 00       	mov    esi,0x8
c00111b8:	50                   	push   eax
c00111b9:	50                   	push   eax
c00111ba:	89 d8                	mov    eax,ebx
c00111bc:	c1 e3 04             	shl    ebx,0x4
c00111bf:	c1 e8 1c             	shr    eax,0x1c
c00111c2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111c7:	50                   	push   eax
c00111c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111cc:	e8 87 fe ff ff       	call   c0011058 <VgaText::putchar(char)>
c00111d1:	83 c4 10             	add    esp,0x10
c00111d4:	4e                   	dec    esi
c00111d5:	75 e1                	jne    c00111b8 <VgaText::putx(unsigned int)+0x20>
c00111d7:	83 c4 20             	add    esp,0x20
c00111da:	5b                   	pop    ebx
c00111db:	5e                   	pop    esi
c00111dc:	5f                   	pop    edi
c00111dd:	c3                   	ret    

c00111de <VgaText::VgaText(char const*)>:
c00111de:	57                   	push   edi
c00111df:	56                   	push   esi
c00111e0:	53                   	push   ebx
c00111e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e5:	83 ec 08             	sub    esp,0x8
c00111e8:	6a 00                	push   0x0
c00111ea:	50                   	push   eax
c00111eb:	e8 6e 05 00 00       	call   c001175e <UnixFile::UnixFile(int)>
c00111f0:	83 c4 10             	add    esp,0x10
c00111f3:	ba 34 a4 02 c0       	mov    edx,0xc002a434
c00111f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fc:	89 10                	mov    DWORD PTR [eax],edx
c00111fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011202:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001120c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011210:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011229:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011234:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001123e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011242:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125b:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011266:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001126c:	bb 60 e4 02 c0       	mov    ebx,0xc002e460
c0011271:	b8 08 00 00 00       	mov    eax,0x8
c0011276:	fc                   	cld    
c0011277:	89 d7                	mov    edi,edx
c0011279:	89 de                	mov    esi,ebx
c001127b:	89 c1                	mov    ecx,eax
c001127d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001127f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011283:	05 1e 10 00 00       	add    eax,0x101e
c0011288:	83 ec 08             	sub    esp,0x8
c001128b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128f:	50                   	push   eax
c0011290:	e8 9f f5 fe ff       	call   c0000834 <strcpy>
c0011295:	83 c4 10             	add    esp,0x10
c0011298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129c:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112aa:	83 c0 0c             	add    eax,0xc
c00112ad:	83 ec 04             	sub    esp,0x4
c00112b0:	68 00 0f 00 00       	push   0xf00
c00112b5:	6a 00                	push   0x0
c00112b7:	50                   	push   eax
c00112b8:	e8 bb f4 fe ff       	call   c0000778 <memset>
c00112bd:	83 c4 10             	add    esp,0x10
c00112c0:	83 ec 04             	sub    esp,0x4
c00112c3:	6a 00                	push   0x0
c00112c5:	6a 07                	push   0x7
c00112c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cb:	e8 b4 f4 ff ff       	call   c0010784 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112d0:	83 c4 10             	add    esp,0x10
c00112d3:	83 ec 08             	sub    esp,0x8
c00112d6:	6a 02                	push   0x2
c00112d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112dc:	e8 49 fa ff ff       	call   c0010d2a <VgaText::setCursorHeight(int)>
c00112e1:	83 c4 10             	add    esp,0x10
c00112e4:	83 ec 04             	sub    esp,0x4
c00112e7:	6a 00                	push   0x0
c00112e9:	6a 00                	push   0x0
c00112eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ef:	e8 e0 f5 ff ff       	call   c00108d4 <VgaText::setCursor(int, int)>
c00112f4:	83 c4 10             	add    esp,0x10
c00112f7:	83 ec 08             	sub    esp,0x8
c00112fa:	6a 01                	push   0x1
c00112fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011300:	e8 7d f3 ff ff       	call   c0010682 <VgaText::showCursor(bool)>
c0011305:	83 c4 10             	add    esp,0x10
c0011308:	83 ec 08             	sub    esp,0x8
c001130b:	6a 01                	push   0x1
c001130d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011311:	e8 7c f3 ff ff       	call   c0010692 <VgaText::disableBlink(bool)>
c0011316:	83 c4 10             	add    esp,0x10
c0011319:	83 ec 0c             	sub    esp,0xc
c001131c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011320:	e8 cf fc ff ff       	call   c0010ff4 <VgaText::clearScreen()>
c0011325:	83 c4 10             	add    esp,0x10
c0011328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011337:	05 9e 10 00 00       	add    eax,0x109e
c001133c:	83 ec 04             	sub    esp,0x4
c001133f:	68 96 00 00 00       	push   0x96
c0011344:	6a 00                	push   0x0
c0011346:	50                   	push   eax
c0011347:	e8 2c f4 fe ff       	call   c0000778 <memset>
c001134c:	83 c4 10             	add    esp,0x10
c001134f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011353:	05 34 11 00 00       	add    eax,0x1134
c0011358:	83 ec 04             	sub    esp,0x4
c001135b:	68 2c 01 00 00       	push   0x12c
c0011360:	6a 00                	push   0x0
c0011362:	50                   	push   eax
c0011363:	e8 10 f4 fe ff       	call   c0000778 <memset>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	90                   	nop
c001136c:	5b                   	pop    ebx
c001136d:	5e                   	pop    esi
c001136e:	5f                   	pop    edi
c001136f:	c3                   	ret    

c0011370 <VgaText::receiveKey(unsigned char)>:
c0011370:	55                   	push   ebp
c0011371:	57                   	push   edi
c0011372:	56                   	push   esi
c0011373:	53                   	push   ebx
c0011374:	83 ec 1c             	sub    esp,0x1c
c0011377:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001137b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001137f:	84 db                	test   bl,bl
c0011381:	0f 84 c9 00 00 00    	je     c0011450 <VgaText::receiveKey(unsigned char)+0xe0>
c0011387:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001138d:	80 fb 08             	cmp    bl,0x8
c0011390:	75 2c                	jne    c00113be <VgaText::receiveKey(unsigned char)+0x4e>
c0011392:	83 ec 0c             	sub    esp,0xc
c0011395:	57                   	push   edi
c0011396:	e8 f9 f3 fe ff       	call   c0000794 <strlen>
c001139b:	83 c4 10             	add    esp,0x10
c001139e:	85 c0                	test   eax,eax
c00113a0:	74 41                	je     c00113e3 <VgaText::receiveKey(unsigned char)+0x73>
c00113a2:	50                   	push   eax
c00113a3:	50                   	push   eax
c00113a4:	6a 08                	push   0x8
c00113a6:	56                   	push   esi
c00113a7:	e8 ac fc ff ff       	call   c0011058 <VgaText::putchar(char)>
c00113ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113af:	e8 e0 f3 fe ff       	call   c0000794 <strlen>
c00113b4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113bc:	eb 22                	jmp    c00113e0 <VgaText::receiveKey(unsigned char)+0x70>
c00113be:	0f be c3             	movsx  eax,bl
c00113c1:	52                   	push   edx
c00113c2:	52                   	push   edx
c00113c3:	50                   	push   eax
c00113c4:	56                   	push   esi
c00113c5:	e8 8e fc ff ff       	call   c0011058 <VgaText::putchar(char)>
c00113ca:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d3:	59                   	pop    ecx
c00113d4:	5d                   	pop    ebp
c00113d5:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113d9:	50                   	push   eax
c00113da:	57                   	push   edi
c00113db:	e8 94 f5 fe ff       	call   c0000974 <strcat>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113ea:	75 05                	jne    c00113f1 <VgaText::receiveKey(unsigned char)+0x81>
c00113ec:	80 fb 0a             	cmp    bl,0xa
c00113ef:	75 53                	jne    c0011444 <VgaText::receiveKey(unsigned char)+0xd4>
c00113f1:	83 ec 0c             	sub    esp,0xc
c00113f4:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113fa:	53                   	push   ebx
c00113fb:	e8 94 f3 fe ff       	call   c0000794 <strlen>
c0011400:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011403:	89 c5                	mov    ebp,eax
c0011405:	e8 8a f3 fe ff       	call   c0000794 <strlen>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011411:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011416:	76 10                	jbe    c0011428 <VgaText::receiveKey(unsigned char)+0xb8>
c0011418:	83 ec 0c             	sub    esp,0xc
c001141b:	68 df a3 02 c0       	push   0xc002a3df
c0011420:	e8 cc 91 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	50                   	push   eax
c0011429:	50                   	push   eax
c001142a:	57                   	push   edi
c001142b:	53                   	push   ebx
c001142c:	e8 43 f5 fe ff       	call   c0000974 <strcat>
c0011431:	83 c4 0c             	add    esp,0xc
c0011434:	68 96 00 00 00       	push   0x96
c0011439:	6a 00                	push   0x0
c001143b:	57                   	push   edi
c001143c:	e8 37 f3 fe ff       	call   c0000778 <memset>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	83 ec 0c             	sub    esp,0xc
c0011447:	56                   	push   esi
c0011448:	e8 d5 f9 ff ff       	call   c0010e22 <VgaText::doUpdate()>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	83 c4 1c             	add    esp,0x1c
c0011453:	5b                   	pop    ebx
c0011454:	5e                   	pop    esi
c0011455:	5f                   	pop    edi
c0011456:	5d                   	pop    ebp
c0011457:	c3                   	ret    

c0011458 <VgaText::write(unsigned long long, void*, int*)>:
c0011458:	55                   	push   ebp
c0011459:	57                   	push   edi
c001145a:	56                   	push   esi
c001145b:	53                   	push   ebx
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011463:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011467:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001146b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011472:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011475:	39 eb                	cmp    ebx,ebp
c0011477:	74 13                	je     c001148c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011479:	43                   	inc    ebx
c001147a:	50                   	push   eax
c001147b:	50                   	push   eax
c001147c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011480:	50                   	push   eax
c0011481:	56                   	push   esi
c0011482:	e8 d1 fb ff ff       	call   c0011058 <VgaText::putchar(char)>
c0011487:	83 c4 10             	add    esp,0x10
c001148a:	eb e9                	jmp    c0011475 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001148c:	83 ec 0c             	sub    esp,0xc
c001148f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011496:	56                   	push   esi
c0011497:	e8 86 f9 ff ff       	call   c0010e22 <VgaText::doUpdate()>
c001149c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114a0:	89 38                	mov    DWORD PTR [eax],edi
c00114a2:	83 c4 1c             	add    esp,0x1c
c00114a5:	31 c0                	xor    eax,eax
c00114a7:	5b                   	pop    ebx
c00114a8:	5e                   	pop    esi
c00114a9:	5f                   	pop    edi
c00114aa:	5d                   	pop    ebp
c00114ab:	c3                   	ret    

c00114ac <newTerminal(char*)>:
c00114ac:	83 ec 28             	sub    esp,0x28
c00114af:	68 60 12 00 00       	push   0x1260
c00114b4:	e8 87 e3 ff ff       	call   c000f840 <malloc>
c00114b9:	5a                   	pop    edx
c00114ba:	59                   	pop    ecx
c00114bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114bf:	50                   	push   eax
c00114c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c4:	e8 15 fd ff ff       	call   c00111de <VgaText::VgaText(char const*)>
c00114c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114cd:	83 c4 2c             	add    esp,0x2c
c00114d0:	c3                   	ret    
c00114d1:	90                   	nop

c00114d2 <TSS::TSS()>:
c00114d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114dd:	90                   	nop
c00114de:	c3                   	ret    
c00114df:	90                   	nop

c00114e0 <TSS::setESP(unsigned long)>:
c00114e0:	55                   	push   ebp
c00114e1:	89 e5                	mov    ebp,esp
c00114e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ef:	90                   	nop
c00114f0:	5d                   	pop    ebp
c00114f1:	c3                   	ret    

c00114f2 <TSS::flush()>:
c00114f2:	55                   	push   ebp
c00114f3:	89 e5                	mov    ebp,esp
c00114f5:	83 ec 10             	sub    esp,0x10
c00114f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fd:	83 c8 03             	or     eax,0x3
c0011500:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011504:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011508:	66 89 d0             	mov    ax,dx
c001150b:	0f 00 d8             	ltr    ax
c001150e:	90                   	nop
c001150f:	c9                   	leave  
c0011510:	c3                   	ret    
c0011511:	90                   	nop

c0011512 <TSS::setup(unsigned long, unsigned long)>:
c0011512:	55                   	push   ebp
c0011513:	89 e5                	mov    ebp,esp
c0011515:	83 ec 18             	sub    esp,0x18
c0011518:	83 ec 0c             	sub    esp,0xc
c001151b:	6a 68                	push   0x68
c001151d:	e8 1e e3 ff ff       	call   c000f840 <malloc>
c0011522:	83 c4 10             	add    esp,0x10
c0011525:	89 c2                	mov    edx,eax
c0011527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	83 ec 04             	sub    esp,0x4
c0011536:	6a 68                	push   0x68
c0011538:	6a 00                	push   0x0
c001153a:	50                   	push   eax
c001153b:	e8 38 f2 fe ff       	call   c0000778 <memset>
c0011540:	83 c4 10             	add    esp,0x10
c0011543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011549:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001154f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011555:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001155b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011561:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011564:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011576:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011579:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001157f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011582:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011585:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001158b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011591:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a9:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115b8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cd:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115da:	0f 20 da             	mov    edx,cr3
c00115dd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115e0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ec:	83 ec 08             	sub    esp,0x8
c00115ef:	50                   	push   eax
c00115f0:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f3:	50                   	push   eax
c00115f4:	e8 25 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115f9:	83 c4 10             	add    esp,0x10
c00115fc:	83 ec 08             	sub    esp,0x8
c00115ff:	6a 68                	push   0x68
c0011601:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011604:	50                   	push   eax
c0011605:	e8 30 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011611:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011614:	83 e0 0f             	and    eax,0xf
c0011617:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001161a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001161d:	83 c8 40             	or     eax,0x40
c0011620:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011623:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0011628:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001162e:	05 78 01 00 00       	add    eax,0x178
c0011633:	83 ec 04             	sub    esp,0x4
c0011636:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011639:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001163c:	50                   	push   eax
c001163d:	e8 2c da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011642:	83 c4 10             	add    esp,0x10
c0011645:	89 c2                	mov    edx,eax
c0011647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164a:	89 10                	mov    DWORD PTR [eax],edx
c001164c:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0011651:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011657:	05 78 01 00 00       	add    eax,0x178
c001165c:	83 ec 0c             	sub    esp,0xc
c001165f:	50                   	push   eax
c0011660:	e8 4d da ff ff       	call   c000f0b2 <GDT::flush()>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166b:	8b 00                	mov    eax,DWORD PTR [eax]
c001166d:	83 ec 08             	sub    esp,0x8
c0011670:	50                   	push   eax
c0011671:	68 48 a4 02 c0       	push   0xc002a448
c0011676:	e8 d5 18 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011681:	8b 00                	mov    eax,DWORD PTR [eax]
c0011683:	c9                   	leave  
c0011684:	c3                   	ret    
c0011685:	90                   	nop

c0011686 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011691:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011696:	75 08                	jne    c00116a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011698:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001169e:	eb 38                	jmp    c00116d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a5:	75 17                	jne    c00116be <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116af:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116bb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116be:	89 c1                	mov    ecx,eax
c00116c0:	83 e1 fd             	and    ecx,0xfffffffd
c00116c3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116c9:	74 cd                	je     c0011698 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116cb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116d0:	83 e0 ef             	and    eax,0xffffffef
c00116d3:	83 f8 08             	cmp    eax,0x8
c00116d6:	76 c0                	jbe    c0011698 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116d8:	31 c0                	xor    eax,eax
c00116da:	c3                   	ret    
c00116db:	90                   	nop

c00116dc <ReservedFilename::isAtty()>:
c00116dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e3:	31 c0                	xor    eax,eax
c00116e5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116eb:	74 09                	je     c00116f6 <ReservedFilename::isAtty()+0x1a>
c00116ed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f3:	0f 94 c0             	sete   al
c00116f6:	c3                   	ret    
c00116f7:	90                   	nop

c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011700:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011703:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011707:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001170c:	75 08                	jne    c0011716 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001170e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011714:	eb 3d                	jmp    c0011753 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011716:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001171b:	75 17                	jne    c0011734 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001171d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011722:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011725:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001172b:	8b 10                	mov    edx,DWORD PTR [eax]
c001172d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011731:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011734:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011739:	75 04                	jne    c001173f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001173b:	89 0a                	mov    DWORD PTR [edx],ecx
c001173d:	eb 14                	jmp    c0011753 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001173f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011744:	74 c8                	je     c001170e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011746:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001174b:	83 e0 ef             	and    eax,0xffffffef
c001174e:	83 f8 08             	cmp    eax,0x8
c0011751:	76 bb                	jbe    c001170e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011753:	31 c0                	xor    eax,eax
c0011755:	c3                   	ret    

c0011756 <UnixFile::getFileDescriptor()>:
c0011756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001175d:	c3                   	ret    

c001175e <UnixFile::UnixFile(int)>:
c001175e:	53                   	push   ebx
c001175f:	83 ec 28             	sub    esp,0x28
c0011762:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c0011767:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001176b:	89 10                	mov    DWORD PTR [eax],edx
c001176d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011775:	0f 8f 8c 01 00 00    	jg     c0011907 <UnixFile::UnixFile(int)+0x1a9>
c001177b:	a1 40 d3 02 c0       	mov    eax,ds:0xc002d340
c0011780:	8d 50 01             	lea    edx,[eax+0x1]
c0011783:	89 15 40 d3 02 c0    	mov    DWORD PTR ds:0xc002d340,edx
c0011789:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001178d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011790:	83 ec 08             	sub    esp,0x8
c0011793:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011797:	68 18 e5 02 c0       	push   0xc002e518
c001179c:	e8 7f 6f 01 00       	call   c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117a1:	83 c4 10             	add    esp,0x10
c00117a4:	a0 14 e5 02 c0       	mov    al,ds:0xc002e514
c00117a9:	83 f0 01             	xor    eax,0x1
c00117ac:	84 c0                	test   al,al
c00117ae:	0f 84 54 01 00 00    	je     c0011908 <UnixFile::UnixFile(int)+0x1aa>
c00117b4:	c6 05 14 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e514,0x1
c00117bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c3:	83 ec 0c             	sub    esp,0xc
c00117c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117ca:	e8 71 e0 ff ff       	call   c000f840 <malloc>
c00117cf:	83 c4 10             	add    esp,0x10
c00117d2:	89 c3                	mov    ebx,eax
c00117d4:	83 ec 08             	sub    esp,0x8
c00117d7:	68 03 ff ff 0f       	push   0xfffff03
c00117dc:	53                   	push   ebx
c00117dd:	e8 2c 01 00 00       	call   c001190e <ReservedFilename::ReservedFilename(int)>
c00117e2:	83 c4 10             	add    esp,0x10
c00117e5:	89 1d 0c e5 02 c0    	mov    DWORD PTR ds:0xc002e50c,ebx
c00117eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f3:	83 ec 0c             	sub    esp,0xc
c00117f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fa:	e8 41 e0 ff ff       	call   c000f840 <malloc>
c00117ff:	83 c4 10             	add    esp,0x10
c0011802:	89 c3                	mov    ebx,eax
c0011804:	83 ec 08             	sub    esp,0x8
c0011807:	68 01 ff ff 0f       	push   0xfffff01
c001180c:	53                   	push   ebx
c001180d:	e8 fc 00 00 00       	call   c001190e <ReservedFilename::ReservedFilename(int)>
c0011812:	83 c4 10             	add    esp,0x10
c0011815:	89 1d 10 e5 02 c0    	mov    DWORD PTR ds:0xc002e510,ebx
c001181b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011823:	83 ec 0c             	sub    esp,0xc
c0011826:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001182a:	e8 11 e0 ff ff       	call   c000f840 <malloc>
c001182f:	83 c4 10             	add    esp,0x10
c0011832:	89 c3                	mov    ebx,eax
c0011834:	83 ec 08             	sub    esp,0x8
c0011837:	68 00 ff ff 0f       	push   0xfffff00
c001183c:	53                   	push   ebx
c001183d:	e8 cc 00 00 00       	call   c001190e <ReservedFilename::ReservedFilename(int)>
c0011842:	83 c4 10             	add    esp,0x10
c0011845:	89 1d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ebx
c001184b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011853:	83 ec 0c             	sub    esp,0xc
c0011856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001185a:	e8 e1 df ff ff       	call   c000f840 <malloc>
c001185f:	83 c4 10             	add    esp,0x10
c0011862:	89 c3                	mov    ebx,eax
c0011864:	83 ec 08             	sub    esp,0x8
c0011867:	68 02 ff ff 0f       	push   0xfffff02
c001186c:	53                   	push   ebx
c001186d:	e8 9c 00 00 00       	call   c001190e <ReservedFilename::ReservedFilename(int)>
c0011872:	83 c4 10             	add    esp,0x10
c0011875:	89 1d 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,ebx
c001187b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011883:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011888:	7f 7e                	jg     c0011908 <UnixFile::UnixFile(int)+0x1aa>
c001188a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011892:	83 ec 0c             	sub    esp,0xc
c0011895:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011899:	e8 a2 df ff ff       	call   c000f840 <malloc>
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	89 c3                	mov    ebx,eax
c00118a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118ac:	83 ec 08             	sub    esp,0x8
c00118af:	50                   	push   eax
c00118b0:	53                   	push   ebx
c00118b1:	e8 58 00 00 00       	call   c001190e <ReservedFilename::ReservedFilename(int)>
c00118b6:	83 c4 10             	add    esp,0x10
c00118b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bd:	89 1c 85 e0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b20],ebx
c00118c4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118cc:	83 ec 0c             	sub    esp,0xc
c00118cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d3:	e8 68 df ff ff       	call   c000f840 <malloc>
c00118d8:	83 c4 10             	add    esp,0x10
c00118db:	89 c3                	mov    ebx,eax
c00118dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118e6:	83 ec 08             	sub    esp,0x8
c00118e9:	50                   	push   eax
c00118ea:	53                   	push   ebx
c00118eb:	e8 1e 00 00 00       	call   c001190e <ReservedFilename::ReservedFilename(int)>
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f7:	89 1c 85 a0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b60],ebx
c00118fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011902:	e9 7c ff ff ff       	jmp    c0011883 <UnixFile::UnixFile(int)+0x125>
c0011907:	90                   	nop
c0011908:	83 c4 28             	add    esp,0x28
c001190b:	5b                   	pop    ebx
c001190c:	c3                   	ret    
c001190d:	90                   	nop

c001190e <ReservedFilename::ReservedFilename(int)>:
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011915:	83 ec 08             	sub    esp,0x8
c0011918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191c:	50                   	push   eax
c001191d:	e8 3c fe ff ff       	call   c001175e <UnixFile::UnixFile(int)>
c0011922:	83 c4 10             	add    esp,0x10
c0011925:	ba 50 a5 02 c0       	mov    edx,0xc002a550
c001192a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192e:	89 10                	mov    DWORD PTR [eax],edx
c0011930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011934:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011938:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001193b:	90                   	nop
c001193c:	83 c4 0c             	add    esp,0xc
c001193f:	c3                   	ret    

c0011940 <UnixFile::~UnixFile()>:
c0011940:	83 ec 1c             	sub    esp,0x1c
c0011943:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c0011948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001194c:	89 10                	mov    DWORD PTR [eax],edx
c001194e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011952:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011955:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001195a:	7f 73                	jg     c00119cf <UnixFile::~UnixFile()+0x8f>
c001195c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011964:	83 ec 0c             	sub    esp,0xc
c0011967:	68 18 e5 02 c0       	push   0xc002e518
c001196c:	e8 83 6e 01 00       	call   c00287f4 <LinkedList<UnixFile>::getFirstElement()>
c0011971:	83 c4 10             	add    esp,0x10
c0011974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011978:	83 ec 0c             	sub    esp,0xc
c001197b:	68 18 e5 02 c0       	push   0xc002e518
c0011980:	e8 77 6e 01 00       	call   c00287fc <LinkedList<UnixFile>::removeFirst()>
c0011985:	83 c4 10             	add    esp,0x10
c0011988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001198c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011990:	74 40                	je     c00119d2 <UnixFile::~UnixFile()+0x92>
c0011992:	83 ec 08             	sub    esp,0x8
c0011995:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011999:	68 18 e5 02 c0       	push   0xc002e518
c001199e:	e8 7d 6d 01 00       	call   c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119aa:	8d 50 01             	lea    edx,[eax+0x1]
c00119ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119b1:	3d 88 13 00 00       	cmp    eax,0x1388
c00119b6:	0f 94 c0             	sete   al
c00119b9:	84 c0                	test   al,al
c00119bb:	74 a7                	je     c0011964 <UnixFile::~UnixFile()+0x24>
c00119bd:	83 ec 0c             	sub    esp,0xc
c00119c0:	68 0c a5 02 c0       	push   0xc002a50c
c00119c5:	e8 27 8c 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c00119ca:	83 c4 10             	add    esp,0x10
c00119cd:	eb 95                	jmp    c0011964 <UnixFile::~UnixFile()+0x24>
c00119cf:	90                   	nop
c00119d0:	eb 01                	jmp    c00119d3 <UnixFile::~UnixFile()+0x93>
c00119d2:	90                   	nop
c00119d3:	90                   	nop
c00119d4:	83 c4 1c             	add    esp,0x1c
c00119d7:	c3                   	ret    

c00119d8 <UnixFile::~UnixFile()>:
c00119d8:	83 ec 0c             	sub    esp,0xc
c00119db:	83 ec 0c             	sub    esp,0xc
c00119de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e2:	e8 59 ff ff ff       	call   c0011940 <UnixFile::~UnixFile()>
c00119e7:	83 c4 10             	add    esp,0x10
c00119ea:	83 ec 08             	sub    esp,0x8
c00119ed:	6a 0c                	push   0xc
c00119ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f3:	e8 78 14 00 00       	call   c0012e70 <operator delete(void*, unsigned long)>
c00119f8:	83 c4 10             	add    esp,0x10
c00119fb:	83 c4 0c             	add    esp,0xc
c00119fe:	c3                   	ret    
c00119ff:	90                   	nop

c0011a00 <ReservedFilename::~ReservedFilename()>:
c0011a00:	83 ec 0c             	sub    esp,0xc
c0011a03:	ba 50 a5 02 c0       	mov    edx,0xc002a550
c0011a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0c:	89 10                	mov    DWORD PTR [eax],edx
c0011a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a12:	83 ec 0c             	sub    esp,0xc
c0011a15:	50                   	push   eax
c0011a16:	e8 25 ff ff ff       	call   c0011940 <UnixFile::~UnixFile()>
c0011a1b:	83 c4 10             	add    esp,0x10
c0011a1e:	90                   	nop
c0011a1f:	83 c4 0c             	add    esp,0xc
c0011a22:	c3                   	ret    
c0011a23:	90                   	nop

c0011a24 <ReservedFilename::~ReservedFilename()>:
c0011a24:	83 ec 0c             	sub    esp,0xc
c0011a27:	83 ec 0c             	sub    esp,0xc
c0011a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a2e:	e8 cd ff ff ff       	call   c0011a00 <ReservedFilename::~ReservedFilename()>
c0011a33:	83 c4 10             	add    esp,0x10
c0011a36:	83 ec 08             	sub    esp,0x8
c0011a39:	6a 0c                	push   0xc
c0011a3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a3f:	e8 2c 14 00 00       	call   c0012e70 <operator delete(void*, unsigned long)>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	83 c4 0c             	add    esp,0xc
c0011a4a:	c3                   	ret    

c0011a4b <getFromFileDescriptor(int)>:
c0011a4b:	53                   	push   ebx
c0011a4c:	83 ec 08             	sub    esp,0x8
c0011a4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a53:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a59:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a5f:	7f 2c                	jg     c0011a8d <getFromFileDescriptor(int)+0x42>
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	68 18 e5 02 c0       	push   0xc002e518
c0011a69:	e8 86 6d 01 00       	call   c00287f4 <LinkedList<UnixFile>::getFirstElement()>
c0011a6e:	83 c4 10             	add    esp,0x10
c0011a71:	85 c0                	test   eax,eax
c0011a73:	75 04                	jne    c0011a79 <getFromFileDescriptor(int)+0x2e>
c0011a75:	31 c0                	xor    eax,eax
c0011a77:	eb 6e                	jmp    c0011ae7 <getFromFileDescriptor(int)+0x9c>
c0011a79:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a7c:	74 69                	je     c0011ae7 <getFromFileDescriptor(int)+0x9c>
c0011a7e:	52                   	push   edx
c0011a7f:	52                   	push   edx
c0011a80:	50                   	push   eax
c0011a81:	68 18 e5 02 c0       	push   0xc002e518
c0011a86:	e8 13 6e 01 00       	call   c002889e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a8b:	eb e1                	jmp    c0011a6e <getFromFileDescriptor(int)+0x23>
c0011a8d:	a1 0c e5 02 c0       	mov    eax,ds:0xc002e50c
c0011a92:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a98:	74 4d                	je     c0011ae7 <getFromFileDescriptor(int)+0x9c>
c0011a9a:	a1 10 e5 02 c0       	mov    eax,ds:0xc002e510
c0011a9f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa5:	74 40                	je     c0011ae7 <getFromFileDescriptor(int)+0x9c>
c0011aa7:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0011aac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab2:	74 33                	je     c0011ae7 <getFromFileDescriptor(int)+0x9c>
c0011ab4:	a1 04 e5 02 c0       	mov    eax,ds:0xc002e504
c0011ab9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011abf:	74 26                	je     c0011ae7 <getFromFileDescriptor(int)+0x9c>
c0011ac1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ac7:	83 f8 08             	cmp    eax,0x8
c0011aca:	77 09                	ja     c0011ad5 <getFromFileDescriptor(int)+0x8a>
c0011acc:	8b 04 85 e0 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b20]
c0011ad3:	eb 12                	jmp    c0011ae7 <getFromFileDescriptor(int)+0x9c>
c0011ad5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011adb:	83 fb 08             	cmp    ebx,0x8
c0011ade:	77 95                	ja     c0011a75 <getFromFileDescriptor(int)+0x2a>
c0011ae0:	8b 04 9d a0 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b60]
c0011ae7:	83 c4 08             	add    esp,0x8
c0011aea:	5b                   	pop    ebx
c0011aeb:	c3                   	ret    

c0011aec <__static_initialization_and_destruction_0(int, int)>:
c0011aec:	83 ec 0c             	sub    esp,0xc
c0011aef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af4:	75 34                	jne    c0011b2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011afe:	75 2a                	jne    c0011b2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b00:	83 ec 0c             	sub    esp,0xc
c0011b03:	68 18 e5 02 c0       	push   0xc002e518
c0011b08:	e8 bb 6b 01 00       	call   c00286c8 <LinkedList<UnixFile>::LinkedList()>
c0011b0d:	83 c4 10             	add    esp,0x10
c0011b10:	83 ec 04             	sub    esp,0x4
c0011b13:	68 bc d2 02 c0       	push   0xc002d2bc
c0011b18:	68 18 e5 02 c0       	push   0xc002e518
c0011b1d:	68 c6 86 02 c0       	push   0xc00286c6
c0011b22:	e8 c3 12 00 00       	call   c0012dea <__cxa_atexit>
c0011b27:	83 c4 10             	add    esp,0x10
c0011b2a:	90                   	nop
c0011b2b:	83 c4 0c             	add    esp,0xc
c0011b2e:	c3                   	ret    

c0011b2f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b2f:	83 ec 0c             	sub    esp,0xc
c0011b32:	83 ec 08             	sub    esp,0x8
c0011b35:	68 ff ff 00 00       	push   0xffff
c0011b3a:	6a 01                	push   0x1
c0011b3c:	e8 ab ff ff ff       	call   c0011aec <__static_initialization_and_destruction_0(int, int)>
c0011b41:	83 c4 10             	add    esp,0x10
c0011b44:	83 c4 0c             	add    esp,0xc
c0011b47:	c3                   	ret    

c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b48:	53                   	push   ebx
c0011b49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b51:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b57:	89 c8                	mov    eax,ecx
c0011b59:	d1 e8                	shr    eax,1
c0011b5b:	03 05 48 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d348
c0011b61:	83 e1 01             	and    ecx,0x1
c0011b64:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b66:	75 09                	jne    c0011b71 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b68:	83 e2 f0             	and    edx,0xfffffff0
c0011b6b:	09 da                	or     edx,ebx
c0011b6d:	88 10                	mov    BYTE PTR [eax],dl
c0011b6f:	5b                   	pop    ebx
c0011b70:	c3                   	ret    
c0011b71:	c1 e3 04             	shl    ebx,0x4
c0011b74:	83 e2 0f             	and    edx,0xf
c0011b77:	09 da                	or     edx,ebx
c0011b79:	88 10                	mov    BYTE PTR [eax],dl
c0011b7b:	5b                   	pop    ebx
c0011b7c:	c3                   	ret    

c0011b7d <Virt::getPageState(unsigned long)>:
c0011b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b81:	8b 0d 48 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d348
c0011b87:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b8d:	89 d0                	mov    eax,edx
c0011b8f:	d1 e8                	shr    eax,1
c0011b91:	83 e2 01             	and    edx,0x1
c0011b94:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b97:	75 04                	jne    c0011b9d <Virt::getPageState(unsigned long)+0x20>
c0011b99:	83 e0 0f             	and    eax,0xf
c0011b9c:	c3                   	ret    
c0011b9d:	c0 e8 04             	shr    al,0x4
c0011ba0:	c3                   	ret    

c0011ba1 <Virt::allocateKernelVirtualPages(int)>:
c0011ba1:	55                   	push   ebp
c0011ba2:	31 ed                	xor    ebp,ebp
c0011ba4:	57                   	push   edi
c0011ba5:	56                   	push   esi
c0011ba6:	53                   	push   ebx
c0011ba7:	31 db                	xor    ebx,ebx
c0011ba9:	83 ec 1c             	sub    esp,0x1c
c0011bac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bb0:	8b 3d 44 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d344
c0011bb6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bbb:	57                   	push   edi
c0011bbc:	e8 bc ff ff ff       	call   c0011b7d <Virt::getPageState(unsigned long)>
c0011bc1:	5a                   	pop    edx
c0011bc2:	84 c0                	test   al,al
c0011bc4:	75 3a                	jne    c0011c00 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bc6:	85 db                	test   ebx,ebx
c0011bc8:	75 02                	jne    c0011bcc <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bca:	89 fd                	mov    ebp,edi
c0011bcc:	43                   	inc    ebx
c0011bcd:	39 f3                	cmp    ebx,esi
c0011bcf:	74 5a                	je     c0011c2b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bd1:	47                   	inc    edi
c0011bd2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bd8:	76 31                	jbe    c0011c0b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bda:	c7 05 44 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d344,0xc8000
c0011be4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011be9:	75 28                	jne    c0011c13 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011beb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bf0:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf5:	57                   	push   edi
c0011bf6:	e8 82 ff ff ff       	call   c0011b7d <Virt::getPageState(unsigned long)>
c0011bfb:	5a                   	pop    edx
c0011bfc:	84 c0                	test   al,al
c0011bfe:	74 c6                	je     c0011bc6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c00:	31 db                	xor    ebx,ebx
c0011c02:	47                   	inc    edi
c0011c03:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c09:	77 cf                	ja     c0011bda <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c0b:	89 3d 44 d3 02 c0    	mov    DWORD PTR ds:0xc002d344,edi
c0011c11:	eb a8                	jmp    c0011bbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c13:	83 ec 0c             	sub    esp,0xc
c0011c16:	68 64 a5 02 c0       	push   0xc002a564
c0011c1b:	e8 d1 89 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0011c20:	8b 3d 44 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d344
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	eb 90                	jmp    c0011bbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c2b:	89 2d 44 d3 02 c0    	mov    DWORD PTR ds:0xc002d344,ebp
c0011c31:	4b                   	dec    ebx
c0011c32:	74 5f                	je     c0011c93 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c34:	85 f6                	test   esi,esi
c0011c36:	74 3d                	je     c0011c75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c38:	89 e8                	mov    eax,ebp
c0011c3a:	31 db                	xor    ebx,ebx
c0011c3c:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c3f:	eb 14                	jmp    c0011c55 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c41:	6a 01                	push   0x1
c0011c43:	43                   	inc    ebx
c0011c44:	50                   	push   eax
c0011c45:	e8 fe fe ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4a:	58                   	pop    eax
c0011c4b:	39 f3                	cmp    ebx,esi
c0011c4d:	5a                   	pop    edx
c0011c4e:	74 25                	je     c0011c75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c50:	a1 44 d3 02 c0       	mov    eax,ds:0xc002d344
c0011c55:	8d 50 01             	lea    edx,[eax+0x1]
c0011c58:	85 db                	test   ebx,ebx
c0011c5a:	89 15 44 d3 02 c0    	mov    DWORD PTR ds:0xc002d344,edx
c0011c60:	74 20                	je     c0011c82 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c62:	39 df                	cmp    edi,ebx
c0011c64:	75 db                	jne    c0011c41 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c66:	6a 03                	push   0x3
c0011c68:	43                   	inc    ebx
c0011c69:	50                   	push   eax
c0011c6a:	e8 d9 fe ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6f:	59                   	pop    ecx
c0011c70:	39 f3                	cmp    ebx,esi
c0011c72:	58                   	pop    eax
c0011c73:	75 db                	jne    c0011c50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c75:	83 c4 1c             	add    esp,0x1c
c0011c78:	89 e8                	mov    eax,ebp
c0011c7a:	5b                   	pop    ebx
c0011c7b:	c1 e0 0c             	shl    eax,0xc
c0011c7e:	5e                   	pop    esi
c0011c7f:	5f                   	pop    edi
c0011c80:	5d                   	pop    ebp
c0011c81:	c3                   	ret    
c0011c82:	6a 02                	push   0x2
c0011c84:	bb 01 00 00 00       	mov    ebx,0x1
c0011c89:	50                   	push   eax
c0011c8a:	e8 b9 fe ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8f:	58                   	pop    eax
c0011c90:	5a                   	pop    edx
c0011c91:	eb bd                	jmp    c0011c50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c93:	6a 04                	push   0x4
c0011c95:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c98:	55                   	push   ebp
c0011c99:	a3 44 d3 02 c0       	mov    ds:0xc002d344,eax
c0011c9e:	e8 a5 fe ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca3:	59                   	pop    ecx
c0011ca4:	89 e8                	mov    eax,ebp
c0011ca6:	5b                   	pop    ebx
c0011ca7:	c1 e0 0c             	shl    eax,0xc
c0011caa:	83 c4 1c             	add    esp,0x1c
c0011cad:	5b                   	pop    ebx
c0011cae:	5e                   	pop    esi
c0011caf:	5f                   	pop    edi
c0011cb0:	5d                   	pop    ebp
c0011cb1:	c3                   	ret    

c0011cb2 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb2:	53                   	push   ebx
c0011cb3:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c0011cb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cbd:	b8 01 00 00 00       	mov    eax,0x1
c0011cc2:	89 cb                	mov    ebx,ecx
c0011cc4:	d3 e0                	shl    eax,cl
c0011cc6:	c1 eb 05             	shr    ebx,0x5
c0011cc9:	f7 d0                	not    eax
c0011ccb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cce:	5b                   	pop    ebx
c0011ccf:	c3                   	ret    

c0011cd0 <Virt::swapIDToSector(unsigned long)>:
c0011cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd4:	0f af 05 4c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d34c
c0011cdb:	03 05 54 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d354
c0011ce1:	c3                   	ret    

c0011ce2 <Virt::allocateSwapfilePage()>:
c0011ce2:	55                   	push   ebp
c0011ce3:	31 d2                	xor    edx,edx
c0011ce5:	57                   	push   edi
c0011ce6:	56                   	push   esi
c0011ce7:	53                   	push   ebx
c0011ce8:	83 ec 0c             	sub    esp,0xc
c0011ceb:	8b 0d 4c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d34c
c0011cf1:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c0011cf6:	f7 f1                	div    ecx
c0011cf8:	39 0d 50 d3 02 c0    	cmp    DWORD PTR ds:0xc002d350,ecx
c0011cfe:	72 2d                	jb     c0011d2d <Virt::allocateSwapfilePage()+0x4b>
c0011d00:	8b 35 28 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e528
c0011d06:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d08:	f6 c2 01             	test   dl,0x1
c0011d0b:	74 3c                	je     c0011d49 <Virt::allocateSwapfilePage()+0x67>
c0011d0d:	31 c9                	xor    ecx,ecx
c0011d0f:	bf 01 00 00 00       	mov    edi,0x1
c0011d14:	eb 12                	jmp    c0011d28 <Virt::allocateSwapfilePage()+0x46>
c0011d16:	89 fd                	mov    ebp,edi
c0011d18:	89 ca                	mov    edx,ecx
c0011d1a:	d3 e5                	shl    ebp,cl
c0011d1c:	c1 ea 05             	shr    edx,0x5
c0011d1f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d22:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d24:	85 ea                	test   edx,ebp
c0011d26:	74 2a                	je     c0011d52 <Virt::allocateSwapfilePage()+0x70>
c0011d28:	41                   	inc    ecx
c0011d29:	39 c8                	cmp    eax,ecx
c0011d2b:	77 e9                	ja     c0011d16 <Virt::allocateSwapfilePage()+0x34>
c0011d2d:	83 ec 0c             	sub    esp,0xc
c0011d30:	68 eb a6 02 c0       	push   0xc002a6eb
c0011d35:	e8 b7 88 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0011d3a:	83 c4 10             	add    esp,0x10
c0011d3d:	31 c9                	xor    ecx,ecx
c0011d3f:	83 c4 0c             	add    esp,0xc
c0011d42:	89 c8                	mov    eax,ecx
c0011d44:	5b                   	pop    ebx
c0011d45:	5e                   	pop    esi
c0011d46:	5f                   	pop    edi
c0011d47:	5d                   	pop    ebp
c0011d48:	c3                   	ret    
c0011d49:	89 f3                	mov    ebx,esi
c0011d4b:	bd 01 00 00 00       	mov    ebp,0x1
c0011d50:	31 c9                	xor    ecx,ecx
c0011d52:	09 ea                	or     edx,ebp
c0011d54:	89 c8                	mov    eax,ecx
c0011d56:	89 13                	mov    DWORD PTR [ebx],edx
c0011d58:	83 c4 0c             	add    esp,0xc
c0011d5b:	5b                   	pop    ebx
c0011d5c:	5e                   	pop    esi
c0011d5d:	5f                   	pop    edi
c0011d5e:	5d                   	pop    ebp
c0011d5f:	c3                   	ret    

c0011d60 <Virt::virtualMemorySetup()>:
c0011d60:	53                   	push   ebx
c0011d61:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	6a 0f                	push   0xf
c0011d6b:	53                   	push   ebx
c0011d6c:	43                   	inc    ebx
c0011d6d:	e8 d6 fd ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d72:	59                   	pop    ecx
c0011d73:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d79:	58                   	pop    eax
c0011d7a:	75 ed                	jne    c0011d69 <Virt::virtualMemorySetup()+0x9>
c0011d7c:	83 ec 08             	sub    esp,0x8
c0011d7f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d84:	68 00 00 00 c8       	push   0xc8000000
c0011d89:	68 02 a7 02 c0       	push   0xc002a702
c0011d8e:	e8 bd 11 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0011d93:	58                   	pop    eax
c0011d94:	5a                   	pop    edx
c0011d95:	68 00 f0 ff ef       	push   0xeffff000
c0011d9a:	68 16 a7 02 c0       	push   0xc002a716
c0011d9f:	e8 ac 11 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0011da4:	83 c4 10             	add    esp,0x10
c0011da7:	83 ec 08             	sub    esp,0x8
c0011daa:	6a 00                	push   0x0
c0011dac:	53                   	push   ebx
c0011dad:	43                   	inc    ebx
c0011dae:	e8 95 fd ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db3:	83 c4 10             	add    esp,0x10
c0011db6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dbc:	75 e9                	jne    c0011da7 <Virt::virtualMemorySetup()+0x47>
c0011dbe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc3:	83 ec 08             	sub    esp,0x8
c0011dc6:	6a 0f                	push   0xf
c0011dc8:	53                   	push   ebx
c0011dc9:	43                   	inc    ebx
c0011dca:	e8 79 fd ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dd8:	75 e9                	jne    c0011dc3 <Virt::virtualMemorySetup()+0x63>
c0011dda:	83 c4 08             	add    esp,0x8
c0011ddd:	5b                   	pop    ebx
c0011dde:	c3                   	ret    

c0011ddf <Virt::swappingSetup()>:
c0011ddf:	83 ec 14             	sub    esp,0x14
c0011de2:	31 d2                	xor    edx,edx
c0011de4:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c0011de9:	f7 35 4c d3 02 c0    	div    DWORD PTR ds:0xc002d34c
c0011def:	c1 e8 05             	shr    eax,0x5
c0011df2:	50                   	push   eax
c0011df3:	68 2a a7 02 c0       	push   0xc002a72a
c0011df8:	e8 53 11 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0011dfd:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c0011e02:	31 d2                	xor    edx,edx
c0011e04:	f7 35 4c d3 02 c0    	div    DWORD PTR ds:0xc002d34c
c0011e0a:	c1 e8 05             	shr    eax,0x5
c0011e0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e10:	e8 2b da ff ff       	call   c000f840 <malloc>
c0011e15:	83 c4 0c             	add    esp,0xc
c0011e18:	89 c1                	mov    ecx,eax
c0011e1a:	a3 28 e5 02 c0       	mov    ds:0xc002e528,eax
c0011e1f:	31 d2                	xor    edx,edx
c0011e21:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c0011e26:	f7 35 4c d3 02 c0    	div    DWORD PTR ds:0xc002d34c
c0011e2c:	c1 e8 05             	shr    eax,0x5
c0011e2f:	50                   	push   eax
c0011e30:	6a 00                	push   0x0
c0011e32:	51                   	push   ecx
c0011e33:	e8 40 e9 fe ff       	call   c0000778 <memset>
c0011e38:	83 c4 1c             	add    esp,0x1c
c0011e3b:	c3                   	ret    

c0011e3c <Virt::getAKernelVAS()>:
c0011e3c:	a1 2c e5 02 c0       	mov    eax,ds:0xc002e52c
c0011e41:	c3                   	ret    

c0011e42 <Virt::setupPageSwapping(int)>:
c0011e42:	57                   	push   edi
c0011e43:	56                   	push   esi
c0011e44:	53                   	push   ebx
c0011e45:	83 ec 1c             	sub    esp,0x1c
c0011e48:	68 14 01 00 00       	push   0x114
c0011e4d:	e8 ee d9 ff ff       	call   c000f840 <malloc>
c0011e52:	83 c4 0c             	add    esp,0xc
c0011e55:	89 c6                	mov    esi,eax
c0011e57:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c0011e5d:	68 45 a7 02 c0       	push   0xc002a745
c0011e62:	50                   	push   eax
c0011e63:	e8 40 16 00 00       	call   c00134a8 <File::File(char const*, Process*)>
c0011e68:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e6b:	e8 14 18 00 00       	call   c0013684 <File::unlink()>
c0011e70:	58                   	pop    eax
c0011e71:	5a                   	pop    edx
c0011e72:	6a 12                	push   0x12
c0011e74:	56                   	push   esi
c0011e75:	e8 92 16 00 00       	call   c001350c <File::open(FileOpenMode)>
c0011e7a:	83 c4 10             	add    esp,0x10
c0011e7d:	85 c0                	test   eax,eax
c0011e7f:	0f 85 ca 00 00 00    	jne    c0011f4f <Virt::setupPageSwapping(int)+0x10d>
c0011e85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e91:	c1 e3 08             	shl    ebx,0x8
c0011e94:	83 ec 0c             	sub    esp,0xc
c0011e97:	68 00 00 01 00       	push   0x10000
c0011e9c:	e8 9f d9 ff ff       	call   c000f840 <malloc>
c0011ea1:	83 c4 0c             	add    esp,0xc
c0011ea4:	89 c7                	mov    edi,eax
c0011ea6:	68 00 00 01 00       	push   0x10000
c0011eab:	6a 00                	push   0x0
c0011ead:	50                   	push   eax
c0011eae:	e8 c5 e8 fe ff       	call   c0000778 <memset>
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	85 db                	test   ebx,ebx
c0011eb8:	79 03                	jns    c0011ebd <Virt::setupPageSwapping(int)+0x7b>
c0011eba:	83 c3 0f             	add    ebx,0xf
c0011ebd:	c1 fb 04             	sar    ebx,0x4
c0011ec0:	4b                   	dec    ebx
c0011ec1:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec4:	74 4b                	je     c0011f11 <Virt::setupPageSwapping(int)+0xcf>
c0011ec6:	83 ec 0c             	sub    esp,0xc
c0011ec9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ecb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ecf:	52                   	push   edx
c0011ed0:	57                   	push   edi
c0011ed1:	6a 00                	push   0x0
c0011ed3:	68 00 00 01 00       	push   0x10000
c0011ed8:	56                   	push   esi
c0011ed9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011edc:	83 c4 20             	add    esp,0x20
c0011edf:	85 c0                	test   eax,eax
c0011ee1:	75 59                	jne    c0011f3c <Virt::setupPageSwapping(int)+0xfa>
c0011ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee7:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eec:	74 d2                	je     c0011ec0 <Virt::setupPageSwapping(int)+0x7e>
c0011eee:	83 ec 08             	sub    esp,0x8
c0011ef1:	4b                   	dec    ebx
c0011ef2:	50                   	push   eax
c0011ef3:	68 98 a7 02 c0       	push   0xc002a798
c0011ef8:	e8 53 10 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0011efd:	c7 04 24 a1 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7a1
c0011f04:	e8 e8 86 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0011f09:	83 c4 10             	add    esp,0x10
c0011f0c:	83 fb ff             	cmp    ebx,0xffffffff
c0011f0f:	75 b5                	jne    c0011ec6 <Virt::setupPageSwapping(int)+0x84>
c0011f11:	83 ec 0c             	sub    esp,0xc
c0011f14:	56                   	push   esi
c0011f15:	e8 50 16 00 00       	call   c001356a <File::close()>
c0011f1a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f1d:	e8 3e d9 ff ff       	call   c000f860 <rfree>
c0011f22:	83 c4 10             	add    esp,0x10
c0011f25:	85 f6                	test   esi,esi
c0011f27:	74 0c                	je     c0011f35 <Virt::setupPageSwapping(int)+0xf3>
c0011f29:	83 ec 0c             	sub    esp,0xc
c0011f2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f2e:	56                   	push   esi
c0011f2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f32:	83 c4 10             	add    esp,0x10
c0011f35:	83 c4 10             	add    esp,0x10
c0011f38:	5b                   	pop    ebx
c0011f39:	5e                   	pop    esi
c0011f3a:	5f                   	pop    edi
c0011f3b:	c3                   	ret    
c0011f3c:	83 ec 08             	sub    esp,0x8
c0011f3f:	50                   	push   eax
c0011f40:	68 80 a7 02 c0       	push   0xc002a780
c0011f45:	e8 06 10 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0011f4a:	83 c4 10             	add    esp,0x10
c0011f4d:	eb 94                	jmp    c0011ee3 <Virt::setupPageSwapping(int)+0xa1>
c0011f4f:	83 ec 08             	sub    esp,0x8
c0011f52:	50                   	push   eax
c0011f53:	68 5c a7 02 c0       	push   0xc002a75c
c0011f58:	e8 f3 0f 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0011f5d:	c7 04 24 65 a7 02 c0 	mov    DWORD PTR [esp],0xc002a765
c0011f64:	e8 88 86 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0011f69:	83 c4 10             	add    esp,0x10
c0011f6c:	e9 14 ff ff ff       	jmp    c0011e85 <Virt::setupPageSwapping(int)+0x43>
c0011f71:	90                   	nop

c0011f72 <VAS::VAS()>:
c0011f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f81:	a3 2c e5 02 c0       	mov    ds:0xc002e52c,eax
c0011f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8a:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f92:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f99:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fa0:	90                   	nop
c0011fa1:	c3                   	ret    

c0011fa2 <VAS::VAS(VAS*)>:
c0011fa2:	83 ec 0c             	sub    esp,0xc
c0011fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fb0:	83 ec 0c             	sub    esp,0xc
c0011fb3:	68 84 a5 02 c0       	push   0xc002a584
c0011fb8:	e8 34 86 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0011fbd:	83 c4 10             	add    esp,0x10
c0011fc0:	90                   	nop
c0011fc1:	83 c4 0c             	add    esp,0xc
c0011fc4:	c3                   	ret    
c0011fc5:	90                   	nop

c0011fc6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fca:	89 c2                	mov    edx,eax
c0011fcc:	c1 e8 0a             	shr    eax,0xa
c0011fcf:	c1 ea 16             	shr    edx,0x16
c0011fd2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fd7:	19 c9                	sbb    ecx,ecx
c0011fd9:	c1 e2 0c             	shl    edx,0xc
c0011fdc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe2:	25 fc 0f 00 00       	and    eax,0xffc
c0011fe7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fee:	01 d0                	add    eax,edx
c0011ff0:	c3                   	ret    
c0011ff1:	90                   	nop

c0011ff2 <VAS::getPageTableEntry(unsigned long)>:
c0011ff2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff6:	89 ca                	mov    edx,ecx
c0011ff8:	c1 e9 0a             	shr    ecx,0xa
c0011ffb:	c1 ea 16             	shr    edx,0x16
c0011ffe:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012004:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001200a:	c1 e0 0c             	shl    eax,0xc
c001200d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012010:	c3                   	ret    

c0012011 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012011:	57                   	push   edi
c0012012:	56                   	push   esi
c0012013:	be 01 00 00 00       	mov    esi,0x1
c0012018:	53                   	push   ebx
c0012019:	83 ec 10             	sub    esp,0x10
c001201c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012020:	c1 eb 0c             	shr    ebx,0xc
c0012023:	eb 3f                	jmp    c0012064 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012025:	e8 12 fe ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c001202a:	83 ec 08             	sub    esp,0x8
c001202d:	57                   	push   edi
c001202e:	50                   	push   eax
c001202f:	e8 be ff ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c0012034:	83 c4 10             	add    esp,0x10
c0012037:	8b 00                	mov    eax,DWORD PTR [eax]
c0012039:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203d:	f6 c4 04             	test   ah,0x4
c0012040:	75 5f                	jne    c00120a1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012042:	80 fa 04             	cmp    dl,0x4
c0012045:	74 78                	je     c00120bf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012047:	80 fa 02             	cmp    dl,0x2
c001204a:	0f 84 88 00 00 00    	je     c00120d8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012050:	80 fa 03             	cmp    dl,0x3
c0012053:	0f 84 ad 00 00 00    	je     c0012106 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012059:	fe ca                	dec    dl
c001205b:	0f 84 92 00 00 00    	je     c00120f3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012061:	43                   	inc    ebx
c0012062:	31 f6                	xor    esi,esi
c0012064:	53                   	push   ebx
c0012065:	e8 13 fb ff ff       	call   c0011b7d <Virt::getPageState(unsigned long)>
c001206a:	5f                   	pop    edi
c001206b:	89 df                	mov    edi,ebx
c001206d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012071:	c1 e7 0c             	shl    edi,0xc
c0012074:	84 c0                	test   al,al
c0012076:	75 ad                	jne    c0012025 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012078:	83 ec 0c             	sub    esp,0xc
c001207b:	68 a7 a7 02 c0       	push   0xc002a7a7
c0012080:	e8 6c 85 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0012085:	e8 b2 fd ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c001208a:	5a                   	pop    edx
c001208b:	59                   	pop    ecx
c001208c:	57                   	push   edi
c001208d:	50                   	push   eax
c001208e:	e8 5f ff ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c0012093:	83 c4 10             	add    esp,0x10
c0012096:	8b 00                	mov    eax,DWORD PTR [eax]
c0012098:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209c:	f6 c4 04             	test   ah,0x4
c001209f:	74 c0                	je     c0012061 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120a1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120aa:	83 ec 0c             	sub    esp,0xc
c00120ad:	50                   	push   eax
c00120ae:	e8 a5 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120b3:	83 c4 10             	add    esp,0x10
c00120b6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120ba:	80 fa 04             	cmp    dl,0x4
c00120bd:	75 88                	jne    c0012047 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120bf:	89 f0                	mov    eax,esi
c00120c1:	84 c0                	test   al,al
c00120c3:	75 47                	jne    c001210c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c5:	c7 44 24 20 a8 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5a8
c00120cd:	83 c4 10             	add    esp,0x10
c00120d0:	5b                   	pop    ebx
c00120d1:	5e                   	pop    esi
c00120d2:	5f                   	pop    edi
c00120d3:	e9 19 85 00 00       	jmp    c001a5f1 <Krnl::panic(char const*)>
c00120d8:	89 f0                	mov    eax,esi
c00120da:	84 c0                	test   al,al
c00120dc:	75 15                	jne    c00120f3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120de:	83 ec 0c             	sub    esp,0xc
c00120e1:	68 c3 a7 02 c0       	push   0xc002a7c3
c00120e6:	e8 06 85 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c00120eb:	83 c4 10             	add    esp,0x10
c00120ee:	e9 6e ff ff ff       	jmp    c0012061 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f3:	83 ec 08             	sub    esp,0x8
c00120f6:	6a 00                	push   0x0
c00120f8:	53                   	push   ebx
c00120f9:	e8 4a fa ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120fe:	83 c4 10             	add    esp,0x10
c0012101:	e9 5b ff ff ff       	jmp    c0012061 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012106:	89 f0                	mov    eax,esi
c0012108:	84 c0                	test   al,al
c001210a:	75 15                	jne    c0012121 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001210c:	83 ec 08             	sub    esp,0x8
c001210f:	6a 00                	push   0x0
c0012111:	53                   	push   ebx
c0012112:	e8 31 fa ff ff       	call   c0011b48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012117:	83 c4 10             	add    esp,0x10
c001211a:	83 c4 10             	add    esp,0x10
c001211d:	5b                   	pop    ebx
c001211e:	5e                   	pop    esi
c001211f:	5f                   	pop    edi
c0012120:	c3                   	ret    
c0012121:	c7 44 24 20 df a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7df
c0012129:	83 c4 10             	add    esp,0x10
c001212c:	5b                   	pop    ebx
c001212d:	5e                   	pop    esi
c001212e:	5f                   	pop    edi
c001212f:	e9 bd 84 00 00       	jmp    c001a5f1 <Krnl::panic(char const*)>

c0012134 <VAS::freeAllocatedPages(unsigned long)>:
c0012134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012140:	74 09                	je     c001214b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012142:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012146:	e9 c6 fe ff ff       	jmp    c0012011 <Virt::freeKernelVirtualPages(unsigned long)>
c001214b:	c7 44 24 04 cc a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5cc
c0012153:	e9 f8 0d 00 00       	jmp    c0012f50 <Dbg::kprintf(char const*, ...)>

c0012158 <VAS::virtualToPhysical(unsigned long)>:
c0012158:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012160:	e8 8d fe ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c0012165:	5a                   	pop    edx
c0012166:	8b 00                	mov    eax,DWORD PTR [eax]
c0012168:	59                   	pop    ecx
c0012169:	25 00 f0 ff ff       	and    eax,0xfffff000
c001216e:	c3                   	ret    
c001216f:	90                   	nop

c0012170 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012170:	55                   	push   ebp
c0012171:	57                   	push   edi
c0012172:	56                   	push   esi
c0012173:	53                   	push   ebx
c0012174:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012178:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001217c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012180:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012184:	85 db                	test   ebx,ebx
c0012186:	7e 22                	jle    c00121aa <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012188:	c1 e3 0c             	shl    ebx,0xc
c001218b:	01 f3                	add    ebx,esi
c001218d:	56                   	push   esi
c001218e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012194:	55                   	push   ebp
c0012195:	e8 58 fe ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c001219a:	5a                   	pop    edx
c001219b:	59                   	pop    ecx
c001219c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001219e:	21 f9                	and    ecx,edi
c00121a0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a4:	39 f3                	cmp    ebx,esi
c00121a6:	89 08                	mov    DWORD PTR [eax],ecx
c00121a8:	75 e3                	jne    c001218d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121aa:	5b                   	pop    ebx
c00121ab:	5e                   	pop    esi
c00121ac:	5f                   	pop    edi
c00121ad:	5d                   	pop    ebp
c00121ae:	c3                   	ret    
c00121af:	90                   	nop

c00121b0 <VAS::setToWriteCombining(unsigned long, int)>:
c00121b0:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c00121b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121bb:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c2:	75 01                	jne    c00121c5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c4:	c3                   	ret    
c00121c5:	68 80 00 00 00       	push   0x80
c00121ca:	6a ff                	push   0xffffffff
c00121cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d8:	e8 93 ff ff ff       	call   c0012170 <VAS::reflagRange(unsigned long, int, int, int)>
c00121dd:	83 c4 14             	add    esp,0x14
c00121e0:	c3                   	ret    
c00121e1:	90                   	nop

c00121e2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121eb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f2:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f5:	19 c0                	sbb    eax,eax
c00121f7:	83 ca 03             	or     edx,0x3
c00121fa:	83 e0 fc             	and    eax,0xfffffffc
c00121fd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012204:	0f 20 d8             	mov    eax,cr3
c0012207:	0f 22 d8             	mov    cr3,eax
c001220a:	c3                   	ret    
c001220b:	90                   	nop

c001220c <VAS::~VAS()>:
c001220c:	83 ec 2c             	sub    esp,0x2c
c001220f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012217:	e8 b0 bb 00 00       	call   c001ddcc <lockScheduler()>
c001221c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012221:	8b 00                	mov    eax,DWORD PTR [eax]
c0012223:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012226:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222c:	83 ec 04             	sub    esp,0x4
c001222f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012233:	6a 01                	push   0x1
c0012235:	50                   	push   eax
c0012236:	e8 a7 ff ff ff       	call   c00121e2 <VAS::mapOtherVASIn(bool, VAS*)>
c001223b:	83 c4 10             	add    esp,0x10
c001223e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012246:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001224e:	0f 8f d7 00 00 00    	jg     c001232b <VAS::~VAS()+0x11f>
c0012254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012258:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001225b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001225f:	c1 e2 02             	shl    edx,0x2
c0012262:	01 d0                	add    eax,edx
c0012264:	8b 00                	mov    eax,DWORD PTR [eax]
c0012266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001226a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226e:	83 e0 01             	and    eax,0x1
c0012271:	0f 84 ab 00 00 00    	je     c0012322 <VAS::~VAS()+0x116>
c0012277:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001227f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012287:	7f 75                	jg     c00122fe <VAS::~VAS()+0xf2>
c0012289:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228d:	c1 e0 0a             	shl    eax,0xa
c0012290:	89 c2                	mov    edx,eax
c0012292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012296:	01 d0                	add    eax,edx
c0012298:	c1 e0 0c             	shl    eax,0xc
c001229b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001229f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122a9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122af:	83 ec 04             	sub    esp,0x4
c00122b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b6:	6a 01                	push   0x1
c00122b8:	50                   	push   eax
c00122b9:	e8 08 fd ff ff       	call   c0011fc6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00122cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d3:	25 01 04 00 00       	and    eax,0x401
c00122d8:	3d 01 04 00 00       	cmp    eax,0x401
c00122dd:	75 19                	jne    c00122f8 <VAS::~VAS()+0xec>
c00122df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122e8:	83 ec 0c             	sub    esp,0xc
c00122eb:	50                   	push   eax
c00122ec:	e8 67 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122f1:	83 c4 10             	add    esp,0x10
c00122f4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122f8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122fc:	eb 81                	jmp    c001227f <VAS::~VAS()+0x73>
c00122fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012302:	25 00 04 00 00       	and    eax,0x400
c0012307:	74 19                	je     c0012322 <VAS::~VAS()+0x116>
c0012309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012312:	83 ec 0c             	sub    esp,0xc
c0012315:	50                   	push   eax
c0012316:	e8 3d db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001231b:	83 c4 10             	add    esp,0x10
c001231e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012322:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012326:	e9 1b ff ff ff       	jmp    c0012246 <VAS::~VAS()+0x3a>
c001232b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012332:	83 ec 0c             	sub    esp,0xc
c0012335:	50                   	push   eax
c0012336:	e8 d6 fc ff ff       	call   c0012011 <Virt::freeKernelVirtualPages(unsigned long)>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012342:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012345:	83 ec 0c             	sub    esp,0xc
c0012348:	50                   	push   eax
c0012349:	e8 0a db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001234e:	83 c4 10             	add    esp,0x10
c0012351:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012355:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012359:	c1 e0 02             	shl    eax,0x2
c001235c:	83 ec 08             	sub    esp,0x8
c001235f:	50                   	push   eax
c0012360:	68 f0 a5 02 c0       	push   0xc002a5f0
c0012365:	e8 e6 0b 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001236a:	83 c4 10             	add    esp,0x10
c001236d:	e8 5c ba 00 00       	call   c001ddce <unlockScheduler()>
c0012372:	90                   	nop
c0012373:	83 c4 2c             	add    esp,0x2c
c0012376:	c3                   	ret    
c0012377:	90                   	nop

c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012378:	55                   	push   ebp
c0012379:	57                   	push   edi
c001237a:	56                   	push   esi
c001237b:	53                   	push   ebx
c001237c:	83 ec 1c             	sub    esp,0x1c
c001237f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012383:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012387:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001238d:	77 08                	ja     c0012397 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001238f:	0f 20 d8             	mov    eax,cr3
c0012392:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012395:	75 47                	jne    c00123de <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012397:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001239b:	09 d8                	or     eax,ebx
c001239d:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a2:	75 57                	jne    c00123fb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a4:	89 de                	mov    esi,ebx
c00123a6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a9:	c1 ee 16             	shr    esi,0x16
c00123ac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123b7:	74 54                	je     c001240d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bd:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123c7:	c1 e6 0c             	shl    esi,0xc
c00123ca:	c1 eb 0a             	shr    ebx,0xa
c00123cd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123d6:	83 c4 1c             	add    esp,0x1c
c00123d9:	5b                   	pop    ebx
c00123da:	5e                   	pop    esi
c00123db:	5f                   	pop    edi
c00123dc:	5d                   	pop    ebp
c00123dd:	c3                   	ret    
c00123de:	83 ec 0c             	sub    esp,0xc
c00123e1:	68 10 a6 02 c0       	push   0xc002a610
c00123e6:	e8 65 0b 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00123eb:	83 c4 10             	add    esp,0x10
c00123ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f2:	09 d8                	or     eax,ebx
c00123f4:	a9 ff 0f 00 00       	test   eax,0xfff
c00123f9:	74 a9                	je     c00123a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123fb:	83 ec 0c             	sub    esp,0xc
c00123fe:	68 78 a6 02 c0       	push   0xc002a678
c0012403:	e8 e9 81 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0012408:	83 c4 10             	add    esp,0x10
c001240b:	eb 97                	jmp    c00123a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001240d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012411:	e8 cc da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012416:	89 c5                	mov    ebp,eax
c0012418:	e8 1f fa ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c001241d:	83 ec 0c             	sub    esp,0xc
c0012420:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012424:	6a 01                	push   0x1
c0012426:	e8 76 f7 ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c001242b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012432:	6a 01                	push   0x1
c0012434:	50                   	push   eax
c0012435:	55                   	push   ebp
c0012436:	81 cd 07 04 00 00    	or     ebp,0x407
c001243c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012440:	51                   	push   ecx
c0012441:	e8 26 02 00 00       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012446:	83 c4 1c             	add    esp,0x1c
c0012449:	68 00 10 00 00       	push   0x1000
c001244e:	6a 00                	push   0x0
c0012450:	50                   	push   eax
c0012451:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012455:	e8 1e e3 fe ff       	call   c0000778 <memset>
c001245a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012461:	e8 ab fb ff ff       	call   c0012011 <Virt::freeKernelVirtualPages(unsigned long)>
c0012466:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001246a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012473:	e9 41 ff ff ff       	jmp    c00123b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012478 <VAS::allocatePages(int, int)>:
c0012478:	55                   	push   ebp
c0012479:	57                   	push   edi
c001247a:	56                   	push   esi
c001247b:	53                   	push   ebx
c001247c:	83 ec 1c             	sub    esp,0x1c
c001247f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012483:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0012488:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001248e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012494:	83 e0 01             	and    eax,0x1
c0012497:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001249b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001249f:	0f 85 cc 00 00 00    	jne    c0012571 <VAS::allocatePages(int, int)+0xf9>
c00124a5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124ac:	85 c0                	test   eax,eax
c00124ae:	0f 84 a1 00 00 00    	je     c0012555 <VAS::allocatePages(int, int)+0xdd>
c00124b4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124bc:	c1 e6 0c             	shl    esi,0xc
c00124bf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c3:	85 c0                	test   eax,eax
c00124c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124c8:	7e 33                	jle    c00124fd <VAS::allocatePages(int, int)+0x85>
c00124ca:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124ce:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d2:	81 cd 00 04 00 00    	or     ebp,0x400
c00124d8:	e8 05 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124dd:	55                   	push   ebp
c00124de:	53                   	push   ebx
c00124df:	50                   	push   eax
c00124e0:	57                   	push   edi
c00124e1:	e8 92 fe ff ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e6:	83 c4 10             	add    esp,0x10
c00124e9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ee:	74 03                	je     c00124f3 <VAS::allocatePages(int, int)+0x7b>
c00124f0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124f9:	39 de                	cmp    esi,ebx
c00124fb:	75 db                	jne    c00124d8 <VAS::allocatePages(int, int)+0x60>
c00124fd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012502:	75 12                	jne    c0012516 <VAS::allocatePages(int, int)+0x9e>
c0012504:	0f 20 d8             	mov    eax,cr3
c0012507:	0f 22 d8             	mov    cr3,eax
c001250a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001250e:	83 c4 1c             	add    esp,0x1c
c0012511:	5b                   	pop    ebx
c0012512:	5e                   	pop    esi
c0012513:	5f                   	pop    edi
c0012514:	5d                   	pop    ebp
c0012515:	c3                   	ret    
c0012516:	c1 ee 0a             	shr    esi,0xa
c0012519:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012523:	c1 eb 0a             	shr    ebx,0xa
c0012526:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001252c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012532:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012538:	39 c3                	cmp    ebx,eax
c001253a:	77 ce                	ja     c001250a <VAS::allocatePages(int, int)+0x92>
c001253c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012545:	39 d8                	cmp    eax,ebx
c0012547:	73 f3                	jae    c001253c <VAS::allocatePages(int, int)+0xc4>
c0012549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254d:	83 c4 1c             	add    esp,0x1c
c0012550:	5b                   	pop    ebx
c0012551:	5e                   	pop    esi
c0012552:	5f                   	pop    edi
c0012553:	5d                   	pop    ebp
c0012554:	c3                   	ret    
c0012555:	83 ec 0c             	sub    esp,0xc
c0012558:	68 9c a6 02 c0       	push   0xc002a69c
c001255d:	e8 8f 80 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0012562:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012565:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012569:	83 c4 10             	add    esp,0x10
c001256c:	e9 43 ff ff ff       	jmp    c00124b4 <VAS::allocatePages(int, int)+0x3c>
c0012571:	83 ec 0c             	sub    esp,0xc
c0012574:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012578:	e8 24 f6 ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c001257d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012581:	83 c4 10             	add    esp,0x10
c0012584:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012589:	0f 87 9b 00 00 00    	ja     c001262a <VAS::allocatePages(int, int)+0x1b2>
c001258f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012593:	85 d2                	test   edx,edx
c0012595:	7e 3c                	jle    c00125d3 <VAS::allocatePages(int, int)+0x15b>
c0012597:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001259b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001259f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a3:	c1 e5 0c             	shl    ebp,0xc
c00125a6:	81 ce 00 04 00 00    	or     esi,0x400
c00125ac:	01 dd                	add    ebp,ebx
c00125ae:	e8 2f d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125b3:	56                   	push   esi
c00125b4:	53                   	push   ebx
c00125b5:	50                   	push   eax
c00125b6:	57                   	push   edi
c00125b7:	e8 bc fd ff ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125bc:	83 c4 10             	add    esp,0x10
c00125bf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c4:	74 03                	je     c00125c9 <VAS::allocatePages(int, int)+0x151>
c00125c6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125cf:	39 dd                	cmp    ebp,ebx
c00125d1:	75 db                	jne    c00125ae <VAS::allocatePages(int, int)+0x136>
c00125d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125d8:	0f 84 26 ff ff ff    	je     c0012504 <VAS::allocatePages(int, int)+0x8c>
c00125de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125e6:	89 d3                	mov    ebx,edx
c00125e8:	c1 e0 0c             	shl    eax,0xc
c00125eb:	c1 eb 0a             	shr    ebx,0xa
c00125ee:	01 d0                	add    eax,edx
c00125f0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f6:	c1 e8 0a             	shr    eax,0xa
c00125f9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012604:	2d 00 00 40 00       	sub    eax,0x400000
c0012609:	39 c3                	cmp    ebx,eax
c001260b:	0f 87 f9 fe ff ff    	ja     c001250a <VAS::allocatePages(int, int)+0x92>
c0012611:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012614:	81 c3 00 10 00 00    	add    ebx,0x1000
c001261a:	39 d8                	cmp    eax,ebx
c001261c:	73 f3                	jae    c0012611 <VAS::allocatePages(int, int)+0x199>
c001261e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012622:	83 c4 1c             	add    esp,0x1c
c0012625:	5b                   	pop    ebx
c0012626:	5e                   	pop    esi
c0012627:	5f                   	pop    edi
c0012628:	5d                   	pop    ebp
c0012629:	c3                   	ret    
c001262a:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001262f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012635:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001263c:	0f 84 4d ff ff ff    	je     c001258f <VAS::allocatePages(int, int)+0x117>
c0012642:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001264a:	e9 40 ff ff ff       	jmp    c001258f <VAS::allocatePages(int, int)+0x117>
c001264f:	90                   	nop

c0012650 <VAS::setCPUSpecific(unsigned long)>:
c0012650:	83 ec 0c             	sub    esp,0xc
c0012653:	6a 05                	push   0x5
c0012655:	68 00 00 40 c2       	push   0xc2400000
c001265a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012662:	e8 11 fd ff ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012667:	83 c4 1c             	add    esp,0x1c
c001266a:	c3                   	ret    
c001266b:	90                   	nop

c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001266c:	55                   	push   ebp
c001266d:	57                   	push   edi
c001266e:	56                   	push   esi
c001266f:	53                   	push   ebx
c0012670:	83 ec 1c             	sub    esp,0x1c
c0012673:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0012678:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001267c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012682:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012686:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001268c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012690:	83 e0 01             	and    eax,0x1
c0012693:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012697:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269b:	85 c0                	test   eax,eax
c001269d:	7e 39                	jle    c00126d8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001269f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a3:	89 f3                	mov    ebx,esi
c00126a5:	c1 e0 0c             	shl    eax,0xc
c00126a8:	01 f0                	add    eax,esi
c00126aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ae:	55                   	push   ebp
c00126af:	53                   	push   ebx
c00126b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b4:	29 f0                	sub    eax,esi
c00126b6:	01 d8                	add    eax,ebx
c00126b8:	50                   	push   eax
c00126b9:	57                   	push   edi
c00126ba:	e8 b9 fc ff ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126bf:	83 c4 10             	add    esp,0x10
c00126c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c7:	74 03                	je     c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126cc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126d6:	75 d6                	jne    c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126d8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126dd:	75 10                	jne    c00126ef <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126df:	0f 20 d8             	mov    eax,cr3
c00126e2:	0f 22 d8             	mov    cr3,eax
c00126e5:	83 c4 1c             	add    esp,0x1c
c00126e8:	89 f0                	mov    eax,esi
c00126ea:	5b                   	pop    ebx
c00126eb:	5e                   	pop    esi
c00126ec:	5f                   	pop    edi
c00126ed:	5d                   	pop    ebp
c00126ee:	c3                   	ret    
c00126ef:	89 f3                	mov    ebx,esi
c00126f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f5:	c1 eb 0a             	shr    ebx,0xa
c00126f8:	c1 e0 0c             	shl    eax,0xc
c00126fb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012701:	01 f0                	add    eax,esi
c0012703:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012709:	c1 e8 0a             	shr    eax,0xa
c001270c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012711:	2d 00 00 40 00       	sub    eax,0x400000
c0012716:	39 c3                	cmp    ebx,eax
c0012718:	77 cb                	ja     c00126e5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001271a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001271d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012723:	39 d8                	cmp    eax,ebx
c0012725:	73 f3                	jae    c001271a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012727:	83 c4 1c             	add    esp,0x1c
c001272a:	89 f0                	mov    eax,esi
c001272c:	5b                   	pop    ebx
c001272d:	5e                   	pop    esi
c001272e:	5f                   	pop    edi
c001272f:	5d                   	pop    ebp
c0012730:	c3                   	ret    
c0012731:	90                   	nop

c0012732 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012732:	55                   	push   ebp
c0012733:	57                   	push   edi
c0012734:	56                   	push   esi
c0012735:	53                   	push   ebx
c0012736:	83 ec 1c             	sub    esp,0x1c
c0012739:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001273d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012741:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012745:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012749:	a9 ff 0f 00 00       	test   eax,0xfff
c001274e:	75 4a                	jne    c001279a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012750:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012754:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012757:	c1 eb 16             	shr    ebx,0x16
c001275a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012761:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012765:	74 4d                	je     c00127b4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012767:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001276b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001276f:	c1 e8 0a             	shr    eax,0xa
c0012772:	80 fa 01             	cmp    dl,0x1
c0012775:	19 d2                	sbb    edx,edx
c0012777:	c1 e3 0c             	shl    ebx,0xc
c001277a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001277e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012784:	25 fc 0f 00 00       	and    eax,0xffc
c0012789:	01 d8                	add    eax,ebx
c001278b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012792:	83 c4 1c             	add    esp,0x1c
c0012795:	5b                   	pop    ebx
c0012796:	5e                   	pop    esi
c0012797:	5f                   	pop    edi
c0012798:	5d                   	pop    ebp
c0012799:	c3                   	ret    
c001279a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001279e:	83 ec 0c             	sub    esp,0xc
c00127a1:	68 c8 a6 02 c0       	push   0xc002a6c8
c00127a6:	e8 46 7e 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c00127ab:	83 c4 10             	add    esp,0x10
c00127ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b2:	eb 9c                	jmp    c0012750 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127b8:	e8 25 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127bd:	89 c5                	mov    ebp,eax
c00127bf:	e8 78 f6 ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c00127c4:	83 ec 0c             	sub    esp,0xc
c00127c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127cb:	6a 01                	push   0x1
c00127cd:	e8 cf f3 ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c00127d2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127d9:	6a 01                	push   0x1
c00127db:	50                   	push   eax
c00127dc:	55                   	push   ebp
c00127dd:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127e7:	51                   	push   ecx
c00127e8:	e8 7f fe ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127ed:	83 c4 1c             	add    esp,0x1c
c00127f0:	68 00 10 00 00       	push   0x1000
c00127f5:	6a 00                	push   0x0
c00127f7:	50                   	push   eax
c00127f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127fc:	e8 77 df fe ff       	call   c0000778 <memset>
c0012801:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012805:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012808:	e8 04 f8 ff ff       	call   c0012011 <Virt::freeKernelVirtualPages(unsigned long)>
c001280d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012810:	83 c4 10             	add    esp,0x10
c0012813:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012816:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281a:	e9 48 ff ff ff       	jmp    c0012767 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001281f:	90                   	nop

c0012820 <VAS::VAS(bool)>:
c0012820:	53                   	push   ebx
c0012821:	83 ec 28             	sub    esp,0x28
c0012824:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012828:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001282c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012830:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012842:	e8 9b d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012847:	89 c2                	mov    edx,eax
c0012849:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012850:	e8 e7 f5 ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c0012855:	89 c3                	mov    ebx,eax
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	6a 01                	push   0x1
c001285c:	e8 40 f3 ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c0012861:	83 c4 10             	add    esp,0x10
c0012864:	89 c2                	mov    edx,eax
c0012866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286d:	83 ec 0c             	sub    esp,0xc
c0012870:	6a 03                	push   0x3
c0012872:	6a 01                	push   0x1
c0012874:	52                   	push   edx
c0012875:	50                   	push   eax
c0012876:	53                   	push   ebx
c0012877:	e8 f0 fd ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287c:	83 c4 20             	add    esp,0x20
c001287f:	89 c2                	mov    edx,eax
c0012881:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012885:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012888:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012890:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012898:	7f 1c                	jg     c00128b6 <VAS::VAS(bool)+0x96>
c001289a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a5:	c1 e2 02             	shl    edx,0x2
c00128a8:	01 d0                	add    eax,edx
c00128aa:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128b0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b4:	eb da                	jmp    c0012890 <VAS::VAS(bool)+0x70>
c00128b6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128be:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c6:	7f 7a                	jg     c0012942 <VAS::VAS(bool)+0x122>
c00128c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128cc:	2d 00 02 00 00       	sub    eax,0x200
c00128d1:	c1 e0 0c             	shl    eax,0xc
c00128d4:	83 c8 03             	or     eax,0x3
c00128d7:	89 c2                	mov    edx,eax
c00128d9:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c00128de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ea:	83 e0 10             	and    eax,0x10
c00128ed:	84 c0                	test   al,al
c00128ef:	74 07                	je     c00128f8 <VAS::VAS(bool)+0xd8>
c00128f1:	b8 00 01 00 00       	mov    eax,0x100
c00128f6:	eb 05                	jmp    c00128fd <VAS::VAS(bool)+0xdd>
c00128f8:	b8 00 00 00 00       	mov    eax,0x0
c00128fd:	09 d0                	or     eax,edx
c00128ff:	89 c1                	mov    ecx,eax
c0012901:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012905:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012908:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290c:	c1 e2 02             	shl    edx,0x2
c001290f:	01 d0                	add    eax,edx
c0012911:	89 ca                	mov    edx,ecx
c0012913:	89 10                	mov    DWORD PTR [eax],edx
c0012915:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012919:	2d 40 03 00 00       	sub    eax,0x340
c001291e:	83 f8 7f             	cmp    eax,0x7f
c0012921:	77 16                	ja     c0012939 <VAS::VAS(bool)+0x119>
c0012923:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012927:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001292a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001292e:	c1 e2 02             	shl    edx,0x2
c0012931:	01 d0                	add    eax,edx
c0012933:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012939:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293d:	e9 7c ff ff ff       	jmp    c00128be <VAS::VAS(bool)+0x9e>
c0012942:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0012947:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012953:	83 e0 10             	and    eax,0x10
c0012956:	84 c0                	test   al,al
c0012958:	74 07                	je     c0012961 <VAS::VAS(bool)+0x141>
c001295a:	b8 03 41 00 00       	mov    eax,0x4103
c001295f:	eb 05                	jmp    c0012966 <VAS::VAS(bool)+0x146>
c0012961:	b8 03 40 00 00       	mov    eax,0x4003
c0012966:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001296a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012973:	89 02                	mov    DWORD PTR [edx],eax
c0012975:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001297a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012980:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012986:	83 ec 08             	sub    esp,0x8
c0012989:	50                   	push   eax
c001298a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298e:	e8 bd fc ff ff       	call   c0012650 <VAS::setCPUSpecific(unsigned long)>
c0012993:	83 c4 10             	add    esp,0x10
c0012996:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299d:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c00129a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ae:	83 e0 10             	and    eax,0x10
c00129b1:	84 c0                	test   al,al
c00129b3:	74 07                	je     c00129bc <VAS::VAS(bool)+0x19c>
c00129b5:	b8 00 01 00 00       	mov    eax,0x100
c00129ba:	eb 05                	jmp    c00129c1 <VAS::VAS(bool)+0x1a1>
c00129bc:	b8 00 00 00 00       	mov    eax,0x0
c00129c1:	09 c2                	or     edx,eax
c00129c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129ca:	05 fc 0f 00 00       	add    eax,0xffc
c00129cf:	83 ca 03             	or     edx,0x3
c00129d2:	89 10                	mov    DWORD PTR [eax],edx
c00129d4:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c00129d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129df:	83 ec 0c             	sub    esp,0xc
c00129e2:	50                   	push   eax
c00129e3:	e8 7a 1c 00 00       	call   c0014662 <Device::getName()>
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	83 ec 08             	sub    esp,0x8
c00129ee:	68 f9 a7 02 c0       	push   0xc002a7f9
c00129f3:	50                   	push   eax
c00129f4:	e8 c7 de fe ff       	call   c00008c0 <strcmp>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	85 c0                	test   eax,eax
c00129fe:	0f 94 c0             	sete   al
c0012a01:	84 c0                	test   al,al
c0012a03:	74 70                	je     c0012a75 <VAS::VAS(bool)+0x255>
c0012a05:	e8 a5 b3 00 00       	call   c001ddaf <disableIRQs()>
c0012a0a:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0012a0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a15:	05 7c 09 00 00       	add    eax,0x97c
c0012a1a:	83 ec 0c             	sub    esp,0xc
c0012a1d:	50                   	push   eax
c0012a1e:	e8 99 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2b:	89 c3                	mov    ebx,eax
c0012a2d:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0012a32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a38:	05 7c 09 00 00       	add    eax,0x97c
c0012a3d:	83 ec 0c             	sub    esp,0xc
c0012a40:	50                   	push   eax
c0012a41:	e8 76 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a46:	83 c4 10             	add    esp,0x10
c0012a49:	83 ec 08             	sub    esp,0x8
c0012a4c:	50                   	push   eax
c0012a4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a51:	e8 9c f5 ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c0012a56:	83 c4 10             	add    esp,0x10
c0012a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a60:	6a 11                	push   0x11
c0012a62:	53                   	push   ebx
c0012a63:	50                   	push   eax
c0012a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a68:	e8 0b f9 ff ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6d:	83 c4 10             	add    esp,0x10
c0012a70:	e8 48 b3 00 00       	call   c001ddbd <enableIRQs()>
c0012a75:	90                   	nop
c0012a76:	83 c4 28             	add    esp,0x28
c0012a79:	5b                   	pop    ebx
c0012a7a:	c3                   	ret    
c0012a7b:	90                   	nop

c0012a7c <VAS::evict(unsigned long)>:
c0012a7c:	55                   	push   ebp
c0012a7d:	57                   	push   edi
c0012a7e:	56                   	push   esi
c0012a7f:	53                   	push   ebx
c0012a80:	83 ec 1c             	sub    esp,0x1c
c0012a83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a87:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8f:	e8 38 b3 00 00       	call   c001ddcc <lockScheduler()>
c0012a94:	e8 49 f2 ff ff       	call   c0011ce2 <Virt::allocateSwapfilePage()>
c0012a99:	8b 0d 4c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d34c
c0012a9f:	89 c7                	mov    edi,eax
c0012aa1:	85 c9                	test   ecx,ecx
c0012aa3:	7e 3d                	jle    c0012ae2 <VAS::evict(unsigned long)+0x66>
c0012aa5:	89 ee                	mov    esi,ebp
c0012aa7:	31 db                	xor    ebx,ebx
c0012aa9:	83 ec 0c             	sub    esp,0xc
c0012aac:	57                   	push   edi
c0012aad:	e8 1e f2 ff ff       	call   c0011cd0 <Virt::swapIDToSector(unsigned long)>
c0012ab2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ab5:	01 d8                	add    eax,ebx
c0012ab7:	6a 01                	push   0x1
c0012ab9:	31 d2                	xor    edx,edx
c0012abb:	43                   	inc    ebx
c0012abc:	52                   	push   edx
c0012abd:	81 c6 00 02 00 00    	add    esi,0x200
c0012ac3:	50                   	push   eax
c0012ac4:	0f be 05 58 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d358
c0012acb:	ff 34 85 dc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1724]
c0012ad2:	e8 f5 3c 00 00       	call   c00167cc <LogicalDisk::write(unsigned long long, int, void*)>
c0012ad7:	83 c4 20             	add    esp,0x20
c0012ada:	39 1d 4c d3 02 c0    	cmp    DWORD PTR ds:0xc002d34c,ebx
c0012ae0:	7f c7                	jg     c0012aa9 <VAS::evict(unsigned long)+0x2d>
c0012ae2:	83 ec 08             	sub    esp,0x8
c0012ae5:	c1 e7 0b             	shl    edi,0xb
c0012ae8:	55                   	push   ebp
c0012ae9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012aed:	e8 00 f5 ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c0012af2:	89 c3                	mov    ebx,eax
c0012af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012af6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012afb:	89 04 24             	mov    DWORD PTR [esp],eax
c0012afe:	e8 55 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b03:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b05:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b0b:	09 d7                	or     edi,edx
c0012b0d:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b0f:	ff 05 24 e5 02 c0    	inc    DWORD PTR ds:0xc002e524
c0012b15:	0f 20 d8             	mov    eax,cr3
c0012b18:	0f 22 d8             	mov    cr3,eax
c0012b1b:	58                   	pop    eax
c0012b1c:	5a                   	pop    edx
c0012b1d:	55                   	push   ebp
c0012b1e:	68 07 a8 02 c0       	push   0xc002a807
c0012b23:	e8 28 04 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012b28:	83 c4 2c             	add    esp,0x2c
c0012b2b:	5b                   	pop    ebx
c0012b2c:	5e                   	pop    esi
c0012b2d:	5f                   	pop    edi
c0012b2e:	5d                   	pop    ebp
c0012b2f:	e9 9a b2 00 00       	jmp    c001ddce <unlockScheduler()>

c0012b34 <VAS::scanForEviction(int, int)>:
c0012b34:	55                   	push   ebp
c0012b35:	57                   	push   edi
c0012b36:	31 ff                	xor    edi,edi
c0012b38:	56                   	push   esi
c0012b39:	be 00 00 40 00       	mov    esi,0x400000
c0012b3e:	53                   	push   ebx
c0012b3f:	83 ec 1c             	sub    esp,0x1c
c0012b42:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012b46:	ff 05 30 e5 02 c0    	inc    DWORD PTR ds:0xc002e530
c0012b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b54:	eb 13                	jmp    c0012b69 <VAS::scanForEviction(int, int)+0x35>
c0012b56:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012b5b:	81 c6 00 00 40 00    	add    esi,0x400000
c0012b61:	81 fe 00 00 40 c0    	cmp    esi,0xc0400000
c0012b67:	74 6d                	je     c0012bd6 <VAS::scanForEviction(int, int)+0xa2>
c0012b69:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012b6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b70:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012b74:	74 e0                	je     c0012b56 <VAS::scanForEviction(int, int)+0x22>
c0012b76:	8d ae 00 00 c0 ff    	lea    ebp,[esi-0x400000]
c0012b7c:	eb 0a                	jmp    c0012b88 <VAS::scanForEviction(int, int)+0x54>
c0012b7e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012b84:	39 ee                	cmp    esi,ebp
c0012b86:	74 ce                	je     c0012b56 <VAS::scanForEviction(int, int)+0x22>
c0012b88:	55                   	push   ebp
c0012b89:	53                   	push   ebx
c0012b8a:	e8 63 f4 ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c0012b8f:	5a                   	pop    edx
c0012b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b92:	59                   	pop    ecx
c0012b93:	89 c1                	mov    ecx,eax
c0012b95:	81 e1 01 04 00 00    	and    ecx,0x401
c0012b9b:	81 f9 01 04 00 00    	cmp    ecx,0x401
c0012ba1:	75 db                	jne    c0012b7e <VAS::scanForEviction(int, int)+0x4a>
c0012ba3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ba8:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0012bad:	76 cf                	jbe    c0012b7e <VAS::scanForEviction(int, int)+0x4a>
c0012baf:	83 ec 08             	sub    esp,0x8
c0012bb2:	47                   	inc    edi
c0012bb3:	55                   	push   ebp
c0012bb4:	53                   	push   ebx
c0012bb5:	e8 c2 fe ff ff       	call   c0012a7c <VAS::evict(unsigned long)>
c0012bba:	83 c4 10             	add    esp,0x10
c0012bbd:	3b 7c 24 38          	cmp    edi,DWORD PTR [esp+0x38]
c0012bc1:	74 13                	je     c0012bd6 <VAS::scanForEviction(int, int)+0xa2>
c0012bc3:	83 ec 08             	sub    esp,0x8
c0012bc6:	57                   	push   edi
c0012bc7:	68 18 a8 02 c0       	push   0xc002a818
c0012bcc:	e8 7f 03 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012bd1:	83 c4 10             	add    esp,0x10
c0012bd4:	eb a8                	jmp    c0012b7e <VAS::scanForEviction(int, int)+0x4a>
c0012bd6:	83 c4 1c             	add    esp,0x1c
c0012bd9:	5b                   	pop    ebx
c0012bda:	5e                   	pop    esi
c0012bdb:	5f                   	pop    edi
c0012bdc:	5d                   	pop    ebp
c0012bdd:	c3                   	ret    

c0012bde <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012bde:	55                   	push   ebp
c0012bdf:	57                   	push   edi
c0012be0:	56                   	push   esi
c0012be1:	53                   	push   ebx
c0012be2:	83 ec 0c             	sub    esp,0xc
c0012be5:	e8 e2 b1 00 00       	call   c001ddcc <lockScheduler()>
c0012bea:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012bee:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012bf4:	74 33                	je     c0012c29 <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c0012bf6:	83 ec 08             	sub    esp,0x8
c0012bf9:	56                   	push   esi
c0012bfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bfe:	e8 ef f3 ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c0012c03:	83 c4 10             	add    esp,0x10
c0012c06:	89 c3                	mov    ebx,eax
c0012c08:	85 c0                	test   eax,eax
c0012c0a:	74 0e                	je     c0012c1a <VAS::tryLoadBackOffDisk(unsigned long)+0x3c>
c0012c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c0e:	25 01 04 00 00       	and    eax,0x401
c0012c13:	3d 00 04 00 00       	cmp    eax,0x400
c0012c18:	74 19                	je     c0012c33 <VAS::tryLoadBackOffDisk(unsigned long)+0x55>
c0012c1a:	e8 af b1 00 00       	call   c001ddce <unlockScheduler()>
c0012c1f:	31 c0                	xor    eax,eax
c0012c21:	83 c4 0c             	add    esp,0xc
c0012c24:	5b                   	pop    ebx
c0012c25:	5e                   	pop    esi
c0012c26:	5f                   	pop    edi
c0012c27:	5d                   	pop    ebp
c0012c28:	c3                   	ret    
c0012c29:	83 c4 0c             	add    esp,0xc
c0012c2c:	31 c0                	xor    eax,eax
c0012c2e:	5b                   	pop    ebx
c0012c2f:	5e                   	pop    esi
c0012c30:	5f                   	pop    edi
c0012c31:	5d                   	pop    ebp
c0012c32:	c3                   	ret    
c0012c33:	83 ec 08             	sub    esp,0x8
c0012c36:	56                   	push   esi
c0012c37:	68 22 a8 02 c0       	push   0xc002a822
c0012c3c:	e8 0f 03 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012c41:	c6 05 e0 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3e0,0x1
c0012c48:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012c4a:	e8 93 d2 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012c4f:	c1 ed 0b             	shr    ebp,0xb
c0012c52:	c6 05 e0 e3 02 c0 00 	mov    BYTE PTR ds:0xc002e3e0,0x0
c0012c59:	83 c4 10             	add    esp,0x10
c0012c5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c5e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012c64:	09 c2                	or     edx,eax
c0012c66:	81 ca 01 08 00 00    	or     edx,0x801
c0012c6c:	89 13                	mov    DWORD PTR [ebx],edx
c0012c6e:	8b 15 4c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d34c
c0012c74:	85 d2                	test   edx,edx
c0012c76:	7e 3d                	jle    c0012cb5 <VAS::tryLoadBackOffDisk(unsigned long)+0xd7>
c0012c78:	89 f7                	mov    edi,esi
c0012c7a:	31 db                	xor    ebx,ebx
c0012c7c:	83 ec 0c             	sub    esp,0xc
c0012c7f:	55                   	push   ebp
c0012c80:	e8 4b f0 ff ff       	call   c0011cd0 <Virt::swapIDToSector(unsigned long)>
c0012c85:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c88:	01 d8                	add    eax,ebx
c0012c8a:	6a 01                	push   0x1
c0012c8c:	31 d2                	xor    edx,edx
c0012c8e:	43                   	inc    ebx
c0012c8f:	52                   	push   edx
c0012c90:	81 c7 00 02 00 00    	add    edi,0x200
c0012c96:	50                   	push   eax
c0012c97:	0f be 05 58 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d358
c0012c9e:	ff 34 85 dc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1724]
c0012ca5:	e8 b6 3a 00 00       	call   c0016760 <LogicalDisk::read(unsigned long long, int, void*)>
c0012caa:	83 c4 20             	add    esp,0x20
c0012cad:	39 1d 4c d3 02 c0    	cmp    DWORD PTR ds:0xc002d34c,ebx
c0012cb3:	7f c7                	jg     c0012c7c <VAS::tryLoadBackOffDisk(unsigned long)+0x9e>
c0012cb5:	83 ec 0c             	sub    esp,0xc
c0012cb8:	ff 0d 24 e5 02 c0    	dec    DWORD PTR ds:0xc002e524
c0012cbe:	55                   	push   ebp
c0012cbf:	e8 ee ef ff ff       	call   c0011cb2 <Virt::freeSwapfilePage(unsigned long)>
c0012cc4:	e8 05 b1 00 00       	call   c001ddce <unlockScheduler()>
c0012cc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ccd:	83 c4 10             	add    esp,0x10
c0012cd0:	25 ff 0f 00 00       	and    eax,0xfff
c0012cd5:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012cda:	77 1d                	ja     c0012cf9 <VAS::tryLoadBackOffDisk(unsigned long)+0x11b>
c0012cdc:	a1 34 e5 02 c0       	mov    eax,ds:0xc002e534
c0012ce1:	40                   	inc    eax
c0012ce2:	a3 34 e5 02 c0       	mov    ds:0xc002e534,eax
c0012ce7:	83 f8 02             	cmp    eax,0x2
c0012cea:	74 25                	je     c0012d11 <VAS::tryLoadBackOffDisk(unsigned long)+0x133>
c0012cec:	0f 20 d8             	mov    eax,cr3
c0012cef:	0f 22 d8             	mov    cr3,eax
c0012cf2:	b0 01                	mov    al,0x1
c0012cf4:	e9 28 ff ff ff       	jmp    c0012c21 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0012cf9:	83 ec 08             	sub    esp,0x8
c0012cfc:	81 c6 00 10 00 00    	add    esi,0x1000
c0012d02:	56                   	push   esi
c0012d03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d07:	e8 d2 fe ff ff       	call   c0012bde <VAS::tryLoadBackOffDisk(unsigned long)>
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	eb cb                	jmp    c0012cdc <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c0012d11:	50                   	push   eax
c0012d12:	6a 01                	push   0x1
c0012d14:	6a 01                	push   0x1
c0012d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d1a:	e8 15 fe ff ff       	call   c0012b34 <VAS::scanForEviction(int, int)>
c0012d1f:	c7 05 34 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e534,0x0
c0012d29:	83 c4 10             	add    esp,0x10
c0012d2c:	eb be                	jmp    c0012cec <VAS::tryLoadBackOffDisk(unsigned long)+0x10e>

c0012d2e <mapVASFirstTime>:
c0012d2e:	55                   	push   ebp
c0012d2f:	57                   	push   edi
c0012d30:	56                   	push   esi
c0012d31:	53                   	push   ebx
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d3a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d3d:	4a                   	dec    edx
c0012d3e:	0f 84 8e 00 00 00    	je     c0012dd2 <mapVASFirstTime+0xa4>
c0012d44:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d47:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d4a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d4f:	c1 e5 15             	shl    ebp,0x15
c0012d52:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d57:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d5d:	29 eb                	sub    ebx,ebp
c0012d5f:	29 ee                	sub    esi,ebp
c0012d61:	e8 7c d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d66:	83 ec 0c             	sub    esp,0xc
c0012d69:	68 03 04 00 00       	push   0x403
c0012d6e:	6a 01                	push   0x1
c0012d70:	53                   	push   ebx
c0012d71:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d77:	50                   	push   eax
c0012d78:	57                   	push   edi
c0012d79:	e8 ee f8 ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d7e:	83 c4 20             	add    esp,0x20
c0012d81:	39 f3                	cmp    ebx,esi
c0012d83:	75 dc                	jne    c0012d61 <mapVASFirstTime+0x33>
c0012d85:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d8a:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d8f:	29 ee                	sub    esi,ebp
c0012d91:	29 e8                	sub    eax,ebp
c0012d93:	89 c5                	mov    ebp,eax
c0012d95:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d99:	19 db                	sbb    ebx,ebx
c0012d9b:	e8 42 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012da0:	83 e3 04             	and    ebx,0x4
c0012da3:	83 ec 0c             	sub    esp,0xc
c0012da6:	81 c3 03 04 00 00    	add    ebx,0x403
c0012dac:	53                   	push   ebx
c0012dad:	6a 01                	push   0x1
c0012daf:	56                   	push   esi
c0012db0:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012db6:	50                   	push   eax
c0012db7:	57                   	push   edi
c0012db8:	e8 af f8 ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dbd:	83 c4 20             	add    esp,0x20
c0012dc0:	39 f5                	cmp    ebp,esi
c0012dc2:	75 d1                	jne    c0012d95 <mapVASFirstTime+0x67>
c0012dc4:	0f 20 d8             	mov    eax,cr3
c0012dc7:	0f 22 d8             	mov    cr3,eax
c0012dca:	83 c4 0c             	add    esp,0xc
c0012dcd:	5b                   	pop    ebx
c0012dce:	5e                   	pop    esi
c0012dcf:	5f                   	pop    edi
c0012dd0:	5d                   	pop    ebp
c0012dd1:	c3                   	ret    
c0012dd2:	83 ec 0c             	sub    esp,0xc
c0012dd5:	68 33 a8 02 c0       	push   0xc002a833
c0012dda:	e8 71 01 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	83 c4 0c             	add    esp,0xc
c0012de5:	5b                   	pop    ebx
c0012de6:	5e                   	pop    esi
c0012de7:	5f                   	pop    edi
c0012de8:	5d                   	pop    ebp
c0012de9:	c3                   	ret    

c0012dea <__cxa_atexit>:
c0012dea:	31 c0                	xor    eax,eax
c0012dec:	c3                   	ret    

c0012ded <__cxa_finalize>:
c0012ded:	c3                   	ret    

c0012dee <__stack_chk_fail>:
c0012dee:	55                   	push   ebp
c0012def:	89 e5                	mov    ebp,esp
c0012df1:	83 ec 14             	sub    esp,0x14
c0012df4:	68 4c a8 02 c0       	push   0xc002a84c
c0012df9:	e8 52 01 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012dfe:	58                   	pop    eax
c0012dff:	5a                   	pop    edx
c0012e00:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e03:	68 9c a8 02 c0       	push   0xc002a89c
c0012e08:	e8 43 01 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012e0d:	59                   	pop    ecx
c0012e0e:	58                   	pop    eax
c0012e0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e12:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e15:	68 9c a8 02 c0       	push   0xc002a89c
c0012e1a:	e8 31 01 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012e1f:	5a                   	pop    edx
c0012e20:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e23:	59                   	pop    ecx
c0012e24:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e26:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e29:	68 9c a8 02 c0       	push   0xc002a89c
c0012e2e:	e8 1d 01 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012e33:	5a                   	pop    edx
c0012e34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e37:	59                   	pop    ecx
c0012e38:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e3c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e3f:	68 9c a8 02 c0       	push   0xc002a89c
c0012e44:	e8 07 01 00 00       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0012e49:	c7 04 24 a4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a4
c0012e50:	e8 9c 77 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0012e55:	83 c4 10             	add    esp,0x10
c0012e58:	c9                   	leave  
c0012e59:	c3                   	ret    

c0012e5a <__cxa_pure_virtual>:
c0012e5a:	83 ec 18             	sub    esp,0x18
c0012e5d:	68 bc a8 02 c0       	push   0xc002a8bc
c0012e62:	e8 8a 77 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0012e67:	83 c4 1c             	add    esp,0x1c
c0012e6a:	c3                   	ret    

c0012e6b <operator new[](unsigned long)>:
c0012e6b:	e9 d0 c9 ff ff       	jmp    c000f840 <malloc>

c0012e70 <operator delete(void*, unsigned long)>:
c0012e70:	e9 eb c9 ff ff       	jmp    c000f860 <rfree>

c0012e75 <operator delete[](void*)>:
c0012e75:	e9 e6 c9 ff ff       	jmp    c000f860 <rfree>

c0012e7a <operator delete[](void*, unsigned long)>:
c0012e7a:	e9 e1 c9 ff ff       	jmp    c000f860 <rfree>

c0012e7f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e7f:	57                   	push   edi
c0012e80:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e85:	56                   	push   esi
c0012e86:	be d0 a8 02 c0       	mov    esi,0xc002a8d0
c0012e8b:	53                   	push   ebx
c0012e8c:	83 ec 40             	sub    esp,0x40
c0012e8f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e93:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e97:	fc                   	cld    
c0012e98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e9a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e9e:	83 f9 3e             	cmp    ecx,0x3e
c0012ea1:	7e 05                	jle    c0012ea8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ea3:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ea8:	89 df                	mov    edi,ebx
c0012eaa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012eae:	eb 02                	jmp    c0012eb2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012eb0:	89 c7                	mov    edi,eax
c0012eb2:	31 d2                	xor    edx,edx
c0012eb4:	46                   	inc    esi
c0012eb5:	89 f8                	mov    eax,edi
c0012eb7:	f7 f1                	div    ecx
c0012eb9:	39 cf                	cmp    edi,ecx
c0012ebb:	73 f3                	jae    c0012eb0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ebd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ec0:	eb 02                	jmp    c0012ec4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ec2:	89 c3                	mov    ebx,eax
c0012ec4:	31 d2                	xor    edx,edx
c0012ec6:	4e                   	dec    esi
c0012ec7:	89 d8                	mov    eax,ebx
c0012ec9:	f7 f1                	div    ecx
c0012ecb:	39 cb                	cmp    ebx,ecx
c0012ecd:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012ed1:	88 16                	mov    BYTE PTR [esi],dl
c0012ed3:	73 ed                	jae    c0012ec2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ed5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ed9:	83 c4 40             	add    esp,0x40
c0012edc:	5b                   	pop    ebx
c0012edd:	5e                   	pop    esi
c0012ede:	5f                   	pop    edi
c0012edf:	c3                   	ret    

c0012ee0 <Dbg::logc(char)>:
c0012ee0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee4:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ee9:	ec                   	in     al,dx
c0012eea:	a8 20                	test   al,0x20
c0012eec:	74 fb                	je     c0012ee9 <Dbg::logc(char)+0x9>
c0012eee:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ef3:	88 c8                	mov    al,cl
c0012ef5:	ee                   	out    dx,al
c0012ef6:	c3                   	ret    

c0012ef7 <Dbg::logs(char*)>:
c0012ef7:	53                   	push   ebx
c0012ef8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012efc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012eff:	84 c0                	test   al,al
c0012f01:	74 0f                	je     c0012f12 <Dbg::logs(char*)+0x1b>
c0012f03:	50                   	push   eax
c0012f04:	43                   	inc    ebx
c0012f05:	e8 d6 ff ff ff       	call   c0012ee0 <Dbg::logc(char)>
c0012f0a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f0d:	5a                   	pop    edx
c0012f0e:	84 c0                	test   al,al
c0012f10:	75 f1                	jne    c0012f03 <Dbg::logs(char*)+0xc>
c0012f12:	5b                   	pop    ebx
c0012f13:	c3                   	ret    

c0012f14 <Dbg::logWriteInt(unsigned int)>:
c0012f14:	83 ec 10             	sub    esp,0x10
c0012f17:	6a 0a                	push   0xa
c0012f19:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f1d:	50                   	push   eax
c0012f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f22:	e8 58 ff ff ff       	call   c0012e7f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f27:	50                   	push   eax
c0012f28:	e8 ca ff ff ff       	call   c0012ef7 <Dbg::logs(char*)>
c0012f2d:	83 c4 20             	add    esp,0x20
c0012f30:	c3                   	ret    

c0012f31 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f31:	83 ec 10             	sub    esp,0x10
c0012f34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f3c:	50                   	push   eax
c0012f3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f41:	e8 39 ff ff ff       	call   c0012e7f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f46:	50                   	push   eax
c0012f47:	e8 ab ff ff ff       	call   c0012ef7 <Dbg::logs(char*)>
c0012f4c:	83 c4 20             	add    esp,0x20
c0012f4f:	c3                   	ret    

c0012f50 <Dbg::kprintf(char const*, ...)>:
c0012f50:	55                   	push   ebp
c0012f51:	57                   	push   edi
c0012f52:	56                   	push   esi
c0012f53:	53                   	push   ebx
c0012f54:	83 ec 0c             	sub    esp,0xc
c0012f57:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f5b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f63:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f66:	84 c0                	test   al,al
c0012f68:	74 4a                	je     c0012fb4 <Dbg::kprintf(char const*, ...)+0x64>
c0012f6a:	31 db                	xor    ebx,ebx
c0012f6c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f6f:	3c 25                	cmp    al,0x25
c0012f71:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f74:	0f 85 e4 00 00 00    	jne    c001305e <Dbg::kprintf(char const*, ...)+0x10e>
c0012f7a:	83 c3 02             	add    ebx,0x2
c0012f7d:	8a 07                	mov    al,BYTE PTR [edi]
c0012f7f:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f82:	83 e8 25             	sub    eax,0x25
c0012f85:	3c 53                	cmp    al,0x53
c0012f87:	0f 87 ba 00 00 00    	ja     c0013047 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f8d:	0f b6 c0             	movzx  eax,al
c0012f90:	ff 24 85 10 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd56f0]
c0012f97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f9b:	89 c8                	mov    eax,ecx
c0012f9d:	83 c1 04             	add    ecx,0x4
c0012fa0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fa4:	ff 30                	push   DWORD PTR [eax]
c0012fa6:	e8 4c ff ff ff       	call   c0012ef7 <Dbg::logs(char*)>
c0012fab:	58                   	pop    eax
c0012fac:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fb0:	84 c0                	test   al,al
c0012fb2:	75 b8                	jne    c0012f6c <Dbg::kprintf(char const*, ...)+0x1c>
c0012fb4:	83 c4 0c             	add    esp,0xc
c0012fb7:	5b                   	pop    ebx
c0012fb8:	5e                   	pop    esi
c0012fb9:	5f                   	pop    edi
c0012fba:	5d                   	pop    ebp
c0012fbb:	c3                   	ret    
c0012fbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fc0:	89 d0                	mov    eax,edx
c0012fc2:	83 c2 04             	add    edx,0x4
c0012fc5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fc9:	ff 30                	push   DWORD PTR [eax]
c0012fcb:	e8 44 ff ff ff       	call   c0012f14 <Dbg::logWriteInt(unsigned int)>
c0012fd0:	58                   	pop    eax
c0012fd1:	eb d9                	jmp    c0012fac <Dbg::kprintf(char const*, ...)+0x5c>
c0012fd3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fd7:	89 d0                	mov    eax,edx
c0012fd9:	83 c2 04             	add    edx,0x4
c0012fdc:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fe3:	50                   	push   eax
c0012fe4:	e8 f7 fe ff ff       	call   c0012ee0 <Dbg::logc(char)>
c0012fe9:	58                   	pop    eax
c0012fea:	eb c0                	jmp    c0012fac <Dbg::kprintf(char const*, ...)+0x5c>
c0012fec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ff0:	89 c8                	mov    eax,ecx
c0012ff2:	83 c1 04             	add    ecx,0x4
c0012ff5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ff9:	ff 30                	push   DWORD PTR [eax]
c0012ffb:	e8 14 ff ff ff       	call   c0012f14 <Dbg::logWriteInt(unsigned int)>
c0013000:	5f                   	pop    edi
c0013001:	eb a9                	jmp    c0012fac <Dbg::kprintf(char const*, ...)+0x5c>
c0013003:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013007:	89 c8                	mov    eax,ecx
c0013009:	83 c1 04             	add    ecx,0x4
c001300c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013010:	6a 10                	push   0x10
c0013012:	ff 30                	push   DWORD PTR [eax]
c0013014:	e8 18 ff ff ff       	call   c0012f31 <Dbg::logWriteIntBase(unsigned int, int)>
c0013019:	59                   	pop    ecx
c001301a:	5f                   	pop    edi
c001301b:	eb 8f                	jmp    c0012fac <Dbg::kprintf(char const*, ...)+0x5c>
c001301d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013021:	89 d0                	mov    eax,edx
c0013023:	83 c2 08             	add    edx,0x8
c0013026:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001302a:	6a 10                	push   0x10
c001302c:	ff 30                	push   DWORD PTR [eax]
c001302e:	e8 fe fe ff ff       	call   c0012f31 <Dbg::logWriteIntBase(unsigned int, int)>
c0013033:	58                   	pop    eax
c0013034:	5a                   	pop    edx
c0013035:	e9 72 ff ff ff       	jmp    c0012fac <Dbg::kprintf(char const*, ...)+0x5c>
c001303a:	6a 25                	push   0x25
c001303c:	e8 9f fe ff ff       	call   c0012ee0 <Dbg::logc(char)>
c0013041:	58                   	pop    eax
c0013042:	e9 65 ff ff ff       	jmp    c0012fac <Dbg::kprintf(char const*, ...)+0x5c>
c0013047:	6a 25                	push   0x25
c0013049:	e8 92 fe ff ff       	call   c0012ee0 <Dbg::logc(char)>
c001304e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013051:	50                   	push   eax
c0013052:	e8 89 fe ff ff       	call   c0012ee0 <Dbg::logc(char)>
c0013057:	5a                   	pop    edx
c0013058:	59                   	pop    ecx
c0013059:	e9 4e ff ff ff       	jmp    c0012fac <Dbg::kprintf(char const*, ...)+0x5c>
c001305e:	50                   	push   eax
c001305f:	89 eb                	mov    ebx,ebp
c0013061:	e8 7a fe ff ff       	call   c0012ee0 <Dbg::logc(char)>
c0013066:	89 fd                	mov    ebp,edi
c0013068:	58                   	pop    eax
c0013069:	e9 3e ff ff ff       	jmp    c0012fac <Dbg::kprintf(char const*, ...)+0x5c>

c001306e <File::read(unsigned long long, void*, int*)>:
c001306e:	53                   	push   ebx
c001306f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013073:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013077:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001307e:	3c 19                	cmp    al,0x19
c0013080:	77 35                	ja     c00130b7 <File::read(unsigned long long, void*, int*)+0x49>
c0013082:	8b 04 85 e0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1620]
c0013089:	85 c0                	test   eax,eax
c001308b:	74 2a                	je     c00130b7 <File::read(unsigned long long, void*, int*)+0x49>
c001308d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013093:	85 c0                	test   eax,eax
c0013095:	74 20                	je     c00130b7 <File::read(unsigned long long, void*, int*)+0x49>
c0013097:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001309b:	74 21                	je     c00130be <File::read(unsigned long long, void*, int*)+0x50>
c001309d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001309f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130a3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130b1:	5b                   	pop    ebx
c00130b2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130b5:	ff e0                	jmp    eax
c00130b7:	b8 0b 00 00 00       	mov    eax,0xb
c00130bc:	eb 05                	jmp    c00130c3 <File::read(unsigned long long, void*, int*)+0x55>
c00130be:	b8 05 00 00 00       	mov    eax,0x5
c00130c3:	5b                   	pop    ebx
c00130c4:	c3                   	ret    
c00130c5:	90                   	nop

c00130c6 <File::write(unsigned long long, void*, int*)>:
c00130c6:	53                   	push   ebx
c00130c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130d6:	3c 19                	cmp    al,0x19
c00130d8:	77 35                	ja     c001310f <File::write(unsigned long long, void*, int*)+0x49>
c00130da:	8b 04 85 e0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1620]
c00130e1:	85 c0                	test   eax,eax
c00130e3:	74 2a                	je     c001310f <File::write(unsigned long long, void*, int*)+0x49>
c00130e5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130eb:	85 c0                	test   eax,eax
c00130ed:	74 20                	je     c001310f <File::write(unsigned long long, void*, int*)+0x49>
c00130ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130f3:	74 21                	je     c0013116 <File::write(unsigned long long, void*, int*)+0x50>
c00130f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130fb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013101:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013105:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013109:	5b                   	pop    ebx
c001310a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001310d:	ff e0                	jmp    eax
c001310f:	b8 0b 00 00 00       	mov    eax,0xb
c0013114:	eb 05                	jmp    c001311b <File::write(unsigned long long, void*, int*)+0x55>
c0013116:	b8 05 00 00 00       	mov    eax,0x5
c001311b:	5b                   	pop    ebx
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <Directory::read(unsigned long long, void*, int*)>:
c001311e:	53                   	push   ebx
c001311f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013123:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013127:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001312e:	3c 19                	cmp    al,0x19
c0013130:	77 35                	ja     c0013167 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013132:	8b 04 85 e0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1620]
c0013139:	85 c0                	test   eax,eax
c001313b:	74 2a                	je     c0013167 <Directory::read(unsigned long long, void*, int*)+0x49>
c001313d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013143:	85 c0                	test   eax,eax
c0013145:	74 20                	je     c0013167 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013147:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001314b:	74 21                	je     c001316e <Directory::read(unsigned long long, void*, int*)+0x50>
c001314d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001314f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013153:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001315d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013161:	5b                   	pop    ebx
c0013162:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013165:	ff e0                	jmp    eax
c0013167:	b8 0b 00 00 00       	mov    eax,0xb
c001316c:	eb 05                	jmp    c0013173 <Directory::read(unsigned long long, void*, int*)+0x55>
c001316e:	b8 05 00 00 00       	mov    eax,0x5
c0013173:	5b                   	pop    ebx
c0013174:	c3                   	ret    
c0013175:	90                   	nop

c0013176 <Directory::write(unsigned long long, void*, int*)>:
c0013176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001317a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013181:	b8 0b 00 00 00       	mov    eax,0xb
c0013186:	80 fa 19             	cmp    dl,0x19
c0013189:	77 18                	ja     c00131a3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001318b:	8b 14 95 e0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1620]
c0013192:	85 d2                	test   edx,edx
c0013194:	74 0d                	je     c00131a3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013196:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001319d:	19 c0                	sbb    eax,eax
c001319f:	83 e0 0a             	and    eax,0xa
c00131a2:	40                   	inc    eax
c00131a3:	c3                   	ret    

c00131a4 <File::isAtty()>:
c00131a4:	31 c0                	xor    eax,eax
c00131a6:	c3                   	ret    
c00131a7:	90                   	nop

c00131a8 <Directory::isAtty()>:
c00131a8:	31 c0                	xor    eax,eax
c00131aa:	c3                   	ret    
c00131ab:	90                   	nop

c00131ac <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131ac:	b8 0a 00 00 00       	mov    eax,0xa
c00131b1:	c3                   	ret    

c00131b2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131b2:	b8 0a 00 00 00       	mov    eax,0xa
c00131b7:	c3                   	ret    

c00131b8 <File::~File()>:
c00131b8:	83 ec 0c             	sub    esp,0xc
c00131bb:	ba cc aa 02 c0       	mov    edx,0xc002aacc
c00131c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c4:	89 10                	mov    DWORD PTR [eax],edx
c00131c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ca:	83 ec 0c             	sub    esp,0xc
c00131cd:	50                   	push   eax
c00131ce:	e8 6d e7 ff ff       	call   c0011940 <UnixFile::~UnixFile()>
c00131d3:	83 c4 10             	add    esp,0x10
c00131d6:	90                   	nop
c00131d7:	83 c4 0c             	add    esp,0xc
c00131da:	c3                   	ret    
c00131db:	90                   	nop

c00131dc <File::~File()>:
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	83 ec 0c             	sub    esp,0xc
c00131e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e6:	e8 cd ff ff ff       	call   c00131b8 <File::~File()>
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	83 ec 08             	sub    esp,0x8
c00131f1:	68 14 01 00 00       	push   0x114
c00131f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131fa:	e8 71 fc ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00131ff:	83 c4 10             	add    esp,0x10
c0013202:	83 c4 0c             	add    esp,0xc
c0013205:	c3                   	ret    

c0013206 <Directory::~Directory()>:
c0013206:	83 ec 0c             	sub    esp,0xc
c0013209:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c001320e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013212:	89 10                	mov    DWORD PTR [eax],edx
c0013214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013218:	83 ec 0c             	sub    esp,0xc
c001321b:	50                   	push   eax
c001321c:	e8 1f e7 ff ff       	call   c0011940 <UnixFile::~UnixFile()>
c0013221:	83 c4 10             	add    esp,0x10
c0013224:	90                   	nop
c0013225:	83 c4 0c             	add    esp,0xc
c0013228:	c3                   	ret    
c0013229:	90                   	nop

c001322a <Directory::~Directory()>:
c001322a:	83 ec 0c             	sub    esp,0xc
c001322d:	83 ec 0c             	sub    esp,0xc
c0013230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013234:	e8 cd ff ff ff       	call   c0013206 <Directory::~Directory()>
c0013239:	83 c4 10             	add    esp,0x10
c001323c:	83 ec 08             	sub    esp,0x8
c001323f:	68 14 01 00 00       	push   0x114
c0013244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013248:	e8 23 fc ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	83 c4 0c             	add    esp,0xc
c0013253:	c3                   	ret    

c0013254 <Filesystem::Filesystem()>:
c0013254:	ba 68 aa 02 c0       	mov    edx,0xc002aa68
c0013259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001325d:	89 10                	mov    DWORD PTR [eax],edx
c001325f:	8b 15 38 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e538
c0013265:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013269:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001326c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013270:	a3 38 e5 02 c0       	mov    ds:0xc002e538,eax
c0013275:	90                   	nop
c0013276:	c3                   	ret    
c0013277:	90                   	nop

c0013278 <Filesystem::~Filesystem()>:
c0013278:	ba 68 aa 02 c0       	mov    edx,0xc002aa68
c001327d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013281:	89 10                	mov    DWORD PTR [eax],edx
c0013283:	90                   	nop
c0013284:	c3                   	ret    
c0013285:	90                   	nop

c0013286 <Filesystem::~Filesystem()>:
c0013286:	83 ec 0c             	sub    esp,0xc
c0013289:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001328d:	e8 e6 ff ff ff       	call   c0013278 <Filesystem::~Filesystem()>
c0013292:	83 c4 04             	add    esp,0x4
c0013295:	83 ec 08             	sub    esp,0x8
c0013298:	6a 08                	push   0x8
c001329a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001329e:	e8 cd fb ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00132a3:	83 c4 10             	add    esp,0x10
c00132a6:	83 c4 0c             	add    esp,0xc
c00132a9:	c3                   	ret    

c00132aa <Fs::getcwd(Process*, char*, int)>:
c00132aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132ae:	31 c0                	xor    eax,eax
c00132b0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132b7:	7d 15                	jge    c00132ce <Fs::getcwd(Process*, char*, int)+0x24>
c00132b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132bd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132c4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132c7:	84 c9                	test   cl,cl
c00132c9:	74 06                	je     c00132d1 <Fs::getcwd(Process*, char*, int)+0x27>
c00132cb:	40                   	inc    eax
c00132cc:	eb e2                	jmp    c00132b0 <Fs::getcwd(Process*, char*, int)+0x6>
c00132ce:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132d1:	31 c0                	xor    eax,eax
c00132d3:	c3                   	ret    

c00132d4 <Fs::initVFS()>:
c00132d4:	83 ec 18             	sub    esp,0x18
c00132d7:	6a 08                	push   0x8
c00132d9:	e8 62 c5 ff ff       	call   c000f840 <malloc>
c00132de:	89 04 24             	mov    DWORD PTR [esp],eax
c00132e1:	e8 5a dc 00 00       	call   c0020f40 <FAT::FAT()>
c00132e6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132ed:	e8 4e c5 ff ff       	call   c000f840 <malloc>
c00132f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00132f5:	e8 9e ee 00 00       	call   c0022198 <ISO9660::ISO9660()>
c00132fa:	83 c4 1c             	add    esp,0x1c
c00132fd:	c3                   	ret    

c00132fe <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132fe:	55                   	push   ebp
c00132ff:	57                   	push   edi
c0013300:	56                   	push   esi
c0013301:	53                   	push   ebx
c0013302:	81 ec 10 04 00 00    	sub    esp,0x410
c0013308:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001330f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013316:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001331d:	68 00 04 00 00       	push   0x400
c0013322:	6a 00                	push   0x0
c0013324:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013328:	56                   	push   esi
c0013329:	e8 4a d4 fe ff       	call   c0000778 <memset>
c001332e:	83 c4 10             	add    esp,0x10
c0013331:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013335:	75 0b                	jne    c0013342 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013337:	50                   	push   eax
c0013338:	50                   	push   eax
c0013339:	57                   	push   edi
c001333a:	56                   	push   esi
c001333b:	e8 f4 d4 fe ff       	call   c0000834 <strcpy>
c0013340:	eb 41                	jmp    c0013383 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013342:	8a 07                	mov    al,BYTE PTR [edi]
c0013344:	3c 5c                	cmp    al,0x5c
c0013346:	74 04                	je     c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013348:	3c 2f                	cmp    al,0x2f
c001334a:	75 18                	jne    c0013364 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001334c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001334f:	3c 60                	cmp    al,0x60
c0013351:	7e 03                	jle    c0013356 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013353:	83 e8 20             	sub    eax,0x20
c0013356:	88 04 24             	mov    BYTE PTR [esp],al
c0013359:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013360:	50                   	push   eax
c0013361:	50                   	push   eax
c0013362:	eb 18                	jmp    c001337c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013364:	50                   	push   eax
c0013365:	50                   	push   eax
c0013366:	55                   	push   ebp
c0013367:	56                   	push   esi
c0013368:	e8 c7 d4 fe ff       	call   c0000834 <strcpy>
c001336d:	5a                   	pop    edx
c001336e:	59                   	pop    ecx
c001336f:	68 81 c1 02 c0       	push   0xc002c181
c0013374:	56                   	push   esi
c0013375:	e8 fa d5 fe ff       	call   c0000974 <strcat>
c001337a:	5d                   	pop    ebp
c001337b:	58                   	pop    eax
c001337c:	57                   	push   edi
c001337d:	56                   	push   esi
c001337e:	e8 f1 d5 fe ff       	call   c0000974 <strcat>
c0013383:	83 c4 10             	add    esp,0x10
c0013386:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013389:	3c 60                	cmp    al,0x60
c001338b:	7e 03                	jle    c0013390 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001338d:	83 e8 20             	sub    eax,0x20
c0013390:	88 04 24             	mov    BYTE PTR [esp],al
c0013393:	88 03                	mov    BYTE PTR [ebx],al
c0013395:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001339c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133a2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133a6:	bf 03 00 00 00       	mov    edi,0x3
c00133ab:	b8 03 00 00 00       	mov    eax,0x3
c00133b0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133b3:	84 d2                	test   dl,dl
c00133b5:	0f 84 91 00 00 00    	je     c001344c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133bb:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133be:	80 fa 5c             	cmp    dl,0x5c
c00133c1:	74 05                	je     c00133c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133c3:	80 fa 2f             	cmp    dl,0x2f
c00133c6:	75 12                	jne    c00133da <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133c8:	89 c5                	mov    ebp,eax
c00133ca:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133cf:	74 09                	je     c00133da <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133d1:	40                   	inc    eax
c00133d2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133d6:	89 cf                	mov    edi,ecx
c00133d8:	eb d6                	jmp    c00133b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133da:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133df:	75 5b                	jne    c001343c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133e1:	80 fa 2e             	cmp    dl,0x2e
c00133e4:	75 56                	jne    c001343c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133e6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133ea:	74 19                	je     c0013405 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133ec:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133f1:	74 53                	je     c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133f3:	89 f9                	mov    ecx,edi
c00133f5:	41                   	inc    ecx
c00133f6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133f9:	80 fa 2f             	cmp    dl,0x2f
c00133fc:	74 f7                	je     c00133f5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133fe:	80 fa 5c             	cmp    dl,0x5c
c0013401:	74 f2                	je     c00133f5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013403:	eb d1                	jmp    c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013405:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001340a:	74 3a                	je     c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001340c:	83 f8 03             	cmp    eax,0x3
c001340f:	74 c5                	je     c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013411:	41                   	inc    ecx
c0013412:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013415:	80 fa 2f             	cmp    dl,0x2f
c0013418:	74 f7                	je     c0013411 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001341a:	80 fa 5c             	cmp    dl,0x5c
c001341d:	74 f2                	je     c0013411 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001341f:	48                   	dec    eax
c0013420:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013424:	75 06                	jne    c001342c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013426:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001342a:	eb f3                	jmp    c001341f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001342c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013430:	74 07                	je     c0013439 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013432:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013436:	48                   	dec    eax
c0013437:	eb f3                	jmp    c001342c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013439:	40                   	inc    eax
c001343a:	eb 9a                	jmp    c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001343c:	80 fa 2f             	cmp    dl,0x2f
c001343f:	74 95                	je     c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013441:	80 fa 5c             	cmp    dl,0x5c
c0013444:	74 90                	je     c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013446:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013449:	40                   	inc    eax
c001344a:	eb 8a                	jmp    c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001344c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	53                   	push   ebx
c0013454:	e8 3b d3 fe ff       	call   c0000794 <strlen>
c0013459:	83 c4 10             	add    esp,0x10
c001345c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013461:	75 26                	jne    c0013489 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013463:	83 ec 0c             	sub    esp,0xc
c0013466:	53                   	push   ebx
c0013467:	e8 28 d3 fe ff       	call   c0000794 <strlen>
c001346c:	83 c4 10             	add    esp,0x10
c001346f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013474:	74 26                	je     c001349c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013476:	83 ec 0c             	sub    esp,0xc
c0013479:	53                   	push   ebx
c001347a:	e8 15 d3 fe ff       	call   c0000794 <strlen>
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013487:	eb c7                	jmp    c0013450 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013489:	83 ec 0c             	sub    esp,0xc
c001348c:	53                   	push   ebx
c001348d:	e8 02 d3 fe ff       	call   c0000794 <strlen>
c0013492:	83 c4 10             	add    esp,0x10
c0013495:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001349a:	74 c7                	je     c0013463 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001349c:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134a2:	5b                   	pop    ebx
c00134a3:	5e                   	pop    esi
c00134a4:	5f                   	pop    edi
c00134a5:	5d                   	pop    ebp
c00134a6:	c3                   	ret    
c00134a7:	90                   	nop

c00134a8 <File::File(char const*, Process*)>:
c00134a8:	83 ec 0c             	sub    esp,0xc
c00134ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134af:	83 ec 08             	sub    esp,0x8
c00134b2:	6a 00                	push   0x0
c00134b4:	50                   	push   eax
c00134b5:	e8 a4 e2 ff ff       	call   c001175e <UnixFile::UnixFile(int)>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	ba cc aa 02 c0       	mov    edx,0xc002aacc
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	89 10                	mov    DWORD PTR [eax],edx
c00134c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134cc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d6:	83 c0 0d             	add    eax,0xd
c00134d9:	83 ec 04             	sub    esp,0x4
c00134dc:	52                   	push   edx
c00134dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134e1:	50                   	push   eax
c00134e2:	e8 17 fe ff ff       	call   c00132fe <Fs::standardiseFiles(char*, char const*, char const*)>
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ee:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134f1:	8d 50 bf             	lea    edx,[eax-0x41]
c00134f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013502:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013506:	90                   	nop
c0013507:	83 c4 0c             	add    esp,0xc
c001350a:	c3                   	ret    
c001350b:	90                   	nop

c001350c <File::open(FileOpenMode)>:
c001350c:	53                   	push   ebx
c001350d:	b8 0b 00 00 00       	mov    eax,0xb
c0013512:	83 ec 08             	sub    esp,0x8
c0013515:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013519:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013520:	80 fa 19             	cmp    dl,0x19
c0013523:	77 40                	ja     c0013565 <File::open(FileOpenMode)+0x59>
c0013525:	8b 14 95 e0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1620]
c001352c:	85 d2                	test   edx,edx
c001352e:	74 35                	je     c0013565 <File::open(FileOpenMode)+0x59>
c0013530:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013536:	85 d2                	test   edx,edx
c0013538:	74 2b                	je     c0013565 <File::open(FileOpenMode)+0x59>
c001353a:	b8 06 00 00 00       	mov    eax,0x6
c001353f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013543:	75 20                	jne    c0013565 <File::open(FileOpenMode)+0x59>
c0013545:	8b 02                	mov    eax,DWORD PTR [edx]
c0013547:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001354d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013551:	51                   	push   ecx
c0013552:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013555:	51                   	push   ecx
c0013556:	52                   	push   edx
c0013557:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001355a:	83 c4 10             	add    esp,0x10
c001355d:	85 c0                	test   eax,eax
c001355f:	75 04                	jne    c0013565 <File::open(FileOpenMode)+0x59>
c0013561:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013565:	83 c4 08             	add    esp,0x8
c0013568:	5b                   	pop    ebx
c0013569:	c3                   	ret    

c001356a <File::close()>:
c001356a:	53                   	push   ebx
c001356b:	b8 0b 00 00 00       	mov    eax,0xb
c0013570:	83 ec 08             	sub    esp,0x8
c0013573:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013577:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001357e:	80 fa 19             	cmp    dl,0x19
c0013581:	77 41                	ja     c00135c4 <File::close()+0x5a>
c0013583:	8b 1c 95 e0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1620]
c001358a:	85 db                	test   ebx,ebx
c001358c:	74 36                	je     c00135c4 <File::close()+0x5a>
c001358e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013595:	74 2d                	je     c00135c4 <File::close()+0x5a>
c0013597:	b8 05 00 00 00       	mov    eax,0x5
c001359c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135a0:	74 22                	je     c00135c4 <File::close()+0x5a>
c00135a2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135a6:	8b 04 95 e0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1620]
c00135ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135b3:	53                   	push   ebx
c00135b4:	53                   	push   ebx
c00135b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00135b7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135bd:	50                   	push   eax
c00135be:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135c1:	83 c4 10             	add    esp,0x10
c00135c4:	83 c4 08             	add    esp,0x8
c00135c7:	5b                   	pop    ebx
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <File::seek(unsigned long long)>:
c00135ca:	56                   	push   esi
c00135cb:	53                   	push   ebx
c00135cc:	b8 0b 00 00 00       	mov    eax,0xb
c00135d1:	51                   	push   ecx
c00135d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135da:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135e5:	80 fa 19             	cmp    dl,0x19
c00135e8:	77 31                	ja     c001361b <File::seek(unsigned long long)+0x51>
c00135ea:	8b 14 95 e0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1620]
c00135f1:	85 d2                	test   edx,edx
c00135f3:	74 26                	je     c001361b <File::seek(unsigned long long)+0x51>
c00135f5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135fb:	85 d2                	test   edx,edx
c00135fd:	74 1c                	je     c001361b <File::seek(unsigned long long)+0x51>
c00135ff:	b8 05 00 00 00       	mov    eax,0x5
c0013604:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013608:	74 11                	je     c001361b <File::seek(unsigned long long)+0x51>
c001360a:	8b 02                	mov    eax,DWORD PTR [edx]
c001360c:	53                   	push   ebx
c001360d:	51                   	push   ecx
c001360e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013614:	52                   	push   edx
c0013615:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013618:	83 c4 10             	add    esp,0x10
c001361b:	5a                   	pop    edx
c001361c:	5b                   	pop    ebx
c001361d:	5e                   	pop    esi
c001361e:	c3                   	ret    
c001361f:	90                   	nop

c0013620 <File::tell(unsigned long long*)>:
c0013620:	83 ec 0c             	sub    esp,0xc
c0013623:	b8 0b 00 00 00       	mov    eax,0xb
c0013628:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001362c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013633:	80 fa 19             	cmp    dl,0x19
c0013636:	77 34                	ja     c001366c <File::tell(unsigned long long*)+0x4c>
c0013638:	8b 14 95 e0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1620]
c001363f:	85 d2                	test   edx,edx
c0013641:	74 29                	je     c001366c <File::tell(unsigned long long*)+0x4c>
c0013643:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013649:	85 d2                	test   edx,edx
c001364b:	74 1f                	je     c001366c <File::tell(unsigned long long*)+0x4c>
c001364d:	b8 05 00 00 00       	mov    eax,0x5
c0013652:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013656:	74 14                	je     c001366c <File::tell(unsigned long long*)+0x4c>
c0013658:	50                   	push   eax
c0013659:	8b 02                	mov    eax,DWORD PTR [edx]
c001365b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001365f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013665:	52                   	push   edx
c0013666:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013669:	83 c4 10             	add    esp,0x10
c001366c:	83 c4 0c             	add    esp,0xc
c001366f:	c3                   	ret    

c0013670 <File::rewind()>:
c0013670:	83 ec 10             	sub    esp,0x10
c0013673:	6a 00                	push   0x0
c0013675:	6a 00                	push   0x0
c0013677:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001367b:	e8 4a ff ff ff       	call   c00135ca <File::seek(unsigned long long)>
c0013680:	83 c4 1c             	add    esp,0x1c
c0013683:	c3                   	ret    

c0013684 <File::unlink()>:
c0013684:	83 ec 0c             	sub    esp,0xc
c0013687:	b8 0b 00 00 00       	mov    eax,0xb
c001368c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013690:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013697:	80 f9 19             	cmp    cl,0x19
c001369a:	77 2f                	ja     c00136cb <File::unlink()+0x47>
c001369c:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c00136a3:	85 c9                	test   ecx,ecx
c00136a5:	74 24                	je     c00136cb <File::unlink()+0x47>
c00136a7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136ad:	85 c9                	test   ecx,ecx
c00136af:	74 1a                	je     c00136cb <File::unlink()+0x47>
c00136b1:	b8 06 00 00 00       	mov    eax,0x6
c00136b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136ba:	75 0f                	jne    c00136cb <File::unlink()+0x47>
c00136bc:	83 c2 0d             	add    edx,0xd
c00136bf:	50                   	push   eax
c00136c0:	50                   	push   eax
c00136c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136c3:	52                   	push   edx
c00136c4:	51                   	push   ecx
c00136c5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	83 c4 0c             	add    esp,0xc
c00136ce:	c3                   	ret    
c00136cf:	90                   	nop

c00136d0 <File::rename(char const*)>:
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	b8 0b 00 00 00       	mov    eax,0xb
c00136d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136e3:	80 f9 19             	cmp    cl,0x19
c00136e6:	77 32                	ja     c001371a <File::rename(char const*)+0x4a>
c00136e8:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c00136ef:	85 c9                	test   ecx,ecx
c00136f1:	74 27                	je     c001371a <File::rename(char const*)+0x4a>
c00136f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f9:	85 c9                	test   ecx,ecx
c00136fb:	74 1d                	je     c001371a <File::rename(char const*)+0x4a>
c00136fd:	b8 06 00 00 00       	mov    eax,0x6
c0013702:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013706:	75 12                	jne    c001371a <File::rename(char const*)+0x4a>
c0013708:	83 c2 0d             	add    edx,0xd
c001370b:	50                   	push   eax
c001370c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001370e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013712:	52                   	push   edx
c0013713:	51                   	push   ecx
c0013714:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013717:	83 c4 10             	add    esp,0x10
c001371a:	83 c4 0c             	add    esp,0xc
c001371d:	c3                   	ret    

c001371e <File::chfatattr(unsigned char, unsigned char)>:
c001371e:	57                   	push   edi
c001371f:	b8 0b 00 00 00       	mov    eax,0xb
c0013724:	56                   	push   esi
c0013725:	53                   	push   ebx
c0013726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001372a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001372e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013735:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013739:	80 f9 19             	cmp    cl,0x19
c001373c:	77 37                	ja     c0013775 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001373e:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c0013745:	85 c9                	test   ecx,ecx
c0013747:	74 2c                	je     c0013775 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013749:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001374f:	85 c9                	test   ecx,ecx
c0013751:	74 22                	je     c0013775 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013753:	b8 06 00 00 00       	mov    eax,0x6
c0013758:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001375c:	75 17                	jne    c0013775 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001375e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013760:	89 f0                	mov    eax,esi
c0013762:	83 c2 0d             	add    edx,0xd
c0013765:	0f b6 f0             	movzx  esi,al
c0013768:	0f b6 db             	movzx  ebx,bl
c001376b:	56                   	push   esi
c001376c:	53                   	push   ebx
c001376d:	52                   	push   edx
c001376e:	51                   	push   ecx
c001376f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013772:	83 c4 10             	add    esp,0x10
c0013775:	5b                   	pop    ebx
c0013776:	5e                   	pop    esi
c0013777:	5f                   	pop    edi
c0013778:	c3                   	ret    
c0013779:	90                   	nop

c001377a <File::exists()>:
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	31 c0                	xor    eax,eax
c001377f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013783:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001378a:	80 f9 19             	cmp    cl,0x19
c001378d:	77 24                	ja     c00137b3 <File::exists()+0x39>
c001378f:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c0013796:	85 c9                	test   ecx,ecx
c0013798:	74 19                	je     c00137b3 <File::exists()+0x39>
c001379a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137a0:	85 c9                	test   ecx,ecx
c00137a2:	74 0f                	je     c00137b3 <File::exists()+0x39>
c00137a4:	83 c2 0d             	add    edx,0xd
c00137a7:	50                   	push   eax
c00137a8:	50                   	push   eax
c00137a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137ab:	52                   	push   edx
c00137ac:	51                   	push   ecx
c00137ad:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	83 c4 0c             	add    esp,0xc
c00137b6:	c3                   	ret    
c00137b7:	90                   	nop

c00137b8 <File::stat(unsigned long long*, bool*)>:
c00137b8:	56                   	push   esi
c00137b9:	53                   	push   ebx
c00137ba:	50                   	push   eax
c00137bb:	b8 0b 00 00 00       	mov    eax,0xb
c00137c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137d3:	80 f9 19             	cmp    cl,0x19
c00137d6:	77 3d                	ja     c0013815 <File::stat(unsigned long long*, bool*)+0x5d>
c00137d8:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c00137df:	85 c9                	test   ecx,ecx
c00137e1:	74 32                	je     c0013815 <File::stat(unsigned long long*, bool*)+0x5d>
c00137e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137e9:	85 c9                	test   ecx,ecx
c00137eb:	74 28                	je     c0013815 <File::stat(unsigned long long*, bool*)+0x5d>
c00137ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137f3:	74 13                	je     c0013808 <File::stat(unsigned long long*, bool*)+0x50>
c00137f5:	83 ec 04             	sub    esp,0x4
c00137f8:	56                   	push   esi
c00137f9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137ff:	51                   	push   ecx
c0013800:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013803:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013806:	eb 0a                	jmp    c0013812 <File::stat(unsigned long long*, bool*)+0x5a>
c0013808:	53                   	push   ebx
c0013809:	83 c2 0d             	add    edx,0xd
c001380c:	56                   	push   esi
c001380d:	52                   	push   edx
c001380e:	51                   	push   ecx
c001380f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	5a                   	pop    edx
c0013816:	5b                   	pop    ebx
c0013817:	5e                   	pop    esi
c0013818:	c3                   	ret    

c0013819 <Fs::setcwd(Process*, char*)>:
c0013819:	55                   	push   ebp
c001381a:	57                   	push   edi
c001381b:	56                   	push   esi
c001381c:	53                   	push   ebx
c001381d:	81 ec 20 02 00 00    	sub    esp,0x220
c0013823:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001382a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013830:	57                   	push   edi
c0013831:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013838:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001383c:	56                   	push   esi
c001383d:	e8 bc fa ff ff       	call   c00132fe <Fs::standardiseFiles(char*, char const*, char const*)>
c0013842:	89 34 24             	mov    DWORD PTR [esp],esi
c0013845:	e8 4a cf fe ff       	call   c0000794 <strlen>
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	83 f8 02             	cmp    eax,0x2
c0013850:	77 17                	ja     c0013869 <Fs::setcwd(Process*, char*)+0x50>
c0013852:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013857:	83 e8 41             	sub    eax,0x41
c001385a:	83 f8 19             	cmp    eax,0x19
c001385d:	76 24                	jbe    c0013883 <Fs::setcwd(Process*, char*)+0x6a>
c001385f:	b8 03 00 00 00       	mov    eax,0x3
c0013864:	e9 e0 00 00 00       	jmp    c0013949 <Fs::setcwd(Process*, char*)+0x130>
c0013869:	83 ec 0c             	sub    esp,0xc
c001386c:	56                   	push   esi
c001386d:	e8 22 cf fe ff       	call   c0000794 <strlen>
c0013872:	83 c4 10             	add    esp,0x10
c0013875:	83 f8 03             	cmp    eax,0x3
c0013878:	75 34                	jne    c00138ae <Fs::setcwd(Process*, char*)+0x95>
c001387a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001387f:	75 2d                	jne    c00138ae <Fs::setcwd(Process*, char*)+0x95>
c0013881:	eb cf                	jmp    c0013852 <Fs::setcwd(Process*, char*)+0x39>
c0013883:	8b 14 85 e0 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1620]
c001388a:	b8 05 00 00 00       	mov    eax,0x5
c001388f:	85 d2                	test   edx,edx
c0013891:	0f 84 b2 00 00 00    	je     c0013949 <Fs::setcwd(Process*, char*)+0x130>
c0013897:	b8 06 00 00 00       	mov    eax,0x6
c001389c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138a3:	0f 85 92 00 00 00    	jne    c001393b <Fs::setcwd(Process*, char*)+0x122>
c00138a9:	e9 9b 00 00 00       	jmp    c0013949 <Fs::setcwd(Process*, char*)+0x130>
c00138ae:	83 ec 0c             	sub    esp,0xc
c00138b1:	68 14 01 00 00       	push   0x114
c00138b6:	e8 85 bf ff ff       	call   c000f840 <malloc>
c00138bb:	83 c4 0c             	add    esp,0xc
c00138be:	89 c3                	mov    ebx,eax
c00138c0:	55                   	push   ebp
c00138c1:	56                   	push   esi
c00138c2:	50                   	push   eax
c00138c3:	e8 e0 fb ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c00138c8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138cd:	83 c4 0c             	add    esp,0xc
c00138d0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138d4:	50                   	push   eax
c00138d5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138d9:	50                   	push   eax
c00138da:	53                   	push   ebx
c00138db:	e8 d8 fe ff ff       	call   c00137b8 <File::stat(unsigned long long*, bool*)>
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	83 f8 02             	cmp    eax,0x2
c00138e6:	74 04                	je     c00138ec <Fs::setcwd(Process*, char*)+0xd3>
c00138e8:	85 c0                	test   eax,eax
c00138ea:	74 1c                	je     c0013908 <Fs::setcwd(Process*, char*)+0xef>
c00138ec:	b8 01 00 00 00       	mov    eax,0x1
c00138f1:	85 db                	test   ebx,ebx
c00138f3:	74 54                	je     c0013949 <Fs::setcwd(Process*, char*)+0x130>
c00138f5:	83 ec 0c             	sub    esp,0xc
c00138f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138fa:	53                   	push   ebx
c00138fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	b8 01 00 00 00       	mov    eax,0x1
c0013906:	eb 41                	jmp    c0013949 <Fs::setcwd(Process*, char*)+0x130>
c0013908:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001390d:	75 1c                	jne    c001392b <Fs::setcwd(Process*, char*)+0x112>
c001390f:	b8 02 00 00 00       	mov    eax,0x2
c0013914:	85 db                	test   ebx,ebx
c0013916:	74 31                	je     c0013949 <Fs::setcwd(Process*, char*)+0x130>
c0013918:	83 ec 0c             	sub    esp,0xc
c001391b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001391d:	53                   	push   ebx
c001391e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013921:	83 c4 10             	add    esp,0x10
c0013924:	b8 02 00 00 00       	mov    eax,0x2
c0013929:	eb 1e                	jmp    c0013949 <Fs::setcwd(Process*, char*)+0x130>
c001392b:	85 db                	test   ebx,ebx
c001392d:	74 0c                	je     c001393b <Fs::setcwd(Process*, char*)+0x122>
c001392f:	83 ec 0c             	sub    esp,0xc
c0013932:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013934:	53                   	push   ebx
c0013935:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013938:	83 c4 10             	add    esp,0x10
c001393b:	50                   	push   eax
c001393c:	50                   	push   eax
c001393d:	56                   	push   esi
c001393e:	57                   	push   edi
c001393f:	e8 f0 ce fe ff       	call   c0000834 <strcpy>
c0013944:	83 c4 10             	add    esp,0x10
c0013947:	31 c0                	xor    eax,eax
c0013949:	81 c4 1c 02 00 00    	add    esp,0x21c
c001394f:	5b                   	pop    ebx
c0013950:	5e                   	pop    esi
c0013951:	5f                   	pop    edi
c0013952:	5d                   	pop    ebp
c0013953:	c3                   	ret    

c0013954 <Directory::Directory(char const*, Process*)>:
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395b:	83 ec 08             	sub    esp,0x8
c001395e:	6a 00                	push   0x0
c0013960:	50                   	push   eax
c0013961:	e8 f8 dd ff ff       	call   c001175e <UnixFile::UnixFile(int)>
c0013966:	83 c4 10             	add    esp,0x10
c0013969:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c001396e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013972:	89 10                	mov    DWORD PTR [eax],edx
c0013974:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013978:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001397e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013982:	83 c0 0d             	add    eax,0xd
c0013985:	83 ec 04             	sub    esp,0x4
c0013988:	52                   	push   edx
c0013989:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001398d:	50                   	push   eax
c001398e:	e8 6b f9 ff ff       	call   c00132fe <Fs::standardiseFiles(char*, char const*, char const*)>
c0013993:	83 c4 10             	add    esp,0x10
c0013996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001399a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001399d:	8d 50 bf             	lea    edx,[eax-0x41]
c00139a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ae:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139b2:	90                   	nop
c00139b3:	83 c4 0c             	add    esp,0xc
c00139b6:	c3                   	ret    
c00139b7:	90                   	nop

c00139b8 <Directory::open()>:
c00139b8:	53                   	push   ebx
c00139b9:	b8 0b 00 00 00       	mov    eax,0xb
c00139be:	83 ec 08             	sub    esp,0x8
c00139c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139c5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139cc:	80 fa 19             	cmp    dl,0x19
c00139cf:	77 3d                	ja     c0013a0e <Directory::open()+0x56>
c00139d1:	8b 14 95 e0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1620]
c00139d8:	85 d2                	test   edx,edx
c00139da:	74 32                	je     c0013a0e <Directory::open()+0x56>
c00139dc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139e2:	85 d2                	test   edx,edx
c00139e4:	74 28                	je     c0013a0e <Directory::open()+0x56>
c00139e6:	b8 06 00 00 00       	mov    eax,0x6
c00139eb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139ef:	75 1d                	jne    c0013a0e <Directory::open()+0x56>
c00139f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139f7:	50                   	push   eax
c00139f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00139fa:	51                   	push   ecx
c00139fb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139fe:	51                   	push   ecx
c00139ff:	52                   	push   edx
c0013a00:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a03:	83 c4 10             	add    esp,0x10
c0013a06:	85 c0                	test   eax,eax
c0013a08:	75 04                	jne    c0013a0e <Directory::open()+0x56>
c0013a0a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a0e:	83 c4 08             	add    esp,0x8
c0013a11:	5b                   	pop    ebx
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop

c0013a14 <Directory::close()>:
c0013a14:	53                   	push   ebx
c0013a15:	b8 0b 00 00 00       	mov    eax,0xb
c0013a1a:	83 ec 08             	sub    esp,0x8
c0013a1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a21:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a28:	80 fa 19             	cmp    dl,0x19
c0013a2b:	77 41                	ja     c0013a6e <Directory::close()+0x5a>
c0013a2d:	8b 1c 95 e0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1620]
c0013a34:	85 db                	test   ebx,ebx
c0013a36:	74 36                	je     c0013a6e <Directory::close()+0x5a>
c0013a38:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a3f:	74 2d                	je     c0013a6e <Directory::close()+0x5a>
c0013a41:	b8 05 00 00 00       	mov    eax,0x5
c0013a46:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a4a:	74 22                	je     c0013a6e <Directory::close()+0x5a>
c0013a4c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a50:	8b 04 95 e0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1620]
c0013a57:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a5d:	53                   	push   ebx
c0013a5e:	53                   	push   ebx
c0013a5f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a61:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a67:	50                   	push   eax
c0013a68:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	83 c4 08             	add    esp,0x8
c0013a71:	5b                   	pop    ebx
c0013a72:	c3                   	ret    
c0013a73:	90                   	nop

c0013a74 <Directory::unlink()>:
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	b8 0b 00 00 00       	mov    eax,0xb
c0013a7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a87:	80 f9 19             	cmp    cl,0x19
c0013a8a:	77 2f                	ja     c0013abb <Directory::unlink()+0x47>
c0013a8c:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c0013a93:	85 c9                	test   ecx,ecx
c0013a95:	74 24                	je     c0013abb <Directory::unlink()+0x47>
c0013a97:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a9d:	85 c9                	test   ecx,ecx
c0013a9f:	74 1a                	je     c0013abb <Directory::unlink()+0x47>
c0013aa1:	b8 06 00 00 00       	mov    eax,0x6
c0013aa6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013aaa:	75 0f                	jne    c0013abb <Directory::unlink()+0x47>
c0013aac:	83 c2 0d             	add    edx,0xd
c0013aaf:	50                   	push   eax
c0013ab0:	50                   	push   eax
c0013ab1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ab3:	52                   	push   edx
c0013ab4:	51                   	push   ecx
c0013ab5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ab8:	83 c4 10             	add    esp,0x10
c0013abb:	83 c4 0c             	add    esp,0xc
c0013abe:	c3                   	ret    
c0013abf:	90                   	nop

c0013ac0 <Directory::rename(char const*)>:
c0013ac0:	83 ec 0c             	sub    esp,0xc
c0013ac3:	b8 0b 00 00 00       	mov    eax,0xb
c0013ac8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013acc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ad3:	80 f9 19             	cmp    cl,0x19
c0013ad6:	77 32                	ja     c0013b0a <Directory::rename(char const*)+0x4a>
c0013ad8:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c0013adf:	85 c9                	test   ecx,ecx
c0013ae1:	74 27                	je     c0013b0a <Directory::rename(char const*)+0x4a>
c0013ae3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ae9:	85 c9                	test   ecx,ecx
c0013aeb:	74 1d                	je     c0013b0a <Directory::rename(char const*)+0x4a>
c0013aed:	b8 06 00 00 00       	mov    eax,0x6
c0013af2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013af6:	75 12                	jne    c0013b0a <Directory::rename(char const*)+0x4a>
c0013af8:	83 c2 0d             	add    edx,0xd
c0013afb:	50                   	push   eax
c0013afc:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013afe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b02:	52                   	push   edx
c0013b03:	51                   	push   ecx
c0013b04:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b07:	83 c4 10             	add    esp,0x10
c0013b0a:	83 c4 0c             	add    esp,0xc
c0013b0d:	c3                   	ret    

c0013b0e <Directory::exists()>:
c0013b0e:	83 ec 0c             	sub    esp,0xc
c0013b11:	31 c0                	xor    eax,eax
c0013b13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b17:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b1e:	80 f9 19             	cmp    cl,0x19
c0013b21:	77 24                	ja     c0013b47 <Directory::exists()+0x39>
c0013b23:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c0013b2a:	85 c9                	test   ecx,ecx
c0013b2c:	74 19                	je     c0013b47 <Directory::exists()+0x39>
c0013b2e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b34:	85 c9                	test   ecx,ecx
c0013b36:	74 0f                	je     c0013b47 <Directory::exists()+0x39>
c0013b38:	83 c2 0d             	add    edx,0xd
c0013b3b:	50                   	push   eax
c0013b3c:	50                   	push   eax
c0013b3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b3f:	52                   	push   edx
c0013b40:	51                   	push   ecx
c0013b41:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b44:	83 c4 10             	add    esp,0x10
c0013b47:	83 c4 0c             	add    esp,0xc
c0013b4a:	c3                   	ret    
c0013b4b:	90                   	nop

c0013b4c <Directory::read(dirent*)>:
c0013b4c:	83 ec 1c             	sub    esp,0x1c
c0013b4f:	b8 0b 00 00 00       	mov    eax,0xb
c0013b54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b58:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b5f:	80 fa 19             	cmp    dl,0x19
c0013b62:	77 30                	ja     c0013b94 <Directory::read(dirent*)+0x48>
c0013b64:	8b 14 95 e0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1620]
c0013b6b:	85 d2                	test   edx,edx
c0013b6d:	74 25                	je     c0013b94 <Directory::read(dirent*)+0x48>
c0013b6f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b76:	74 1c                	je     c0013b94 <Directory::read(dirent*)+0x48>
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b7d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b81:	52                   	push   edx
c0013b82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b86:	6a 00                	push   0x0
c0013b88:	68 10 01 00 00       	push   0x110
c0013b8d:	51                   	push   ecx
c0013b8e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b91:	83 c4 20             	add    esp,0x20
c0013b94:	83 c4 1c             	add    esp,0x1c
c0013b97:	c3                   	ret    

c0013b98 <Directory::create()>:
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	b8 0b 00 00 00       	mov    eax,0xb
c0013ba0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ba4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bab:	80 f9 19             	cmp    cl,0x19
c0013bae:	77 2f                	ja     c0013bdf <Directory::create()+0x47>
c0013bb0:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c0013bb7:	85 c9                	test   ecx,ecx
c0013bb9:	74 24                	je     c0013bdf <Directory::create()+0x47>
c0013bbb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bc1:	85 c9                	test   ecx,ecx
c0013bc3:	74 1a                	je     c0013bdf <Directory::create()+0x47>
c0013bc5:	b8 06 00 00 00       	mov    eax,0x6
c0013bca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bce:	75 0f                	jne    c0013bdf <Directory::create()+0x47>
c0013bd0:	83 c2 0d             	add    edx,0xd
c0013bd3:	50                   	push   eax
c0013bd4:	50                   	push   eax
c0013bd5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bd7:	52                   	push   edx
c0013bd8:	51                   	push   ecx
c0013bd9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bdc:	83 c4 10             	add    esp,0x10
c0013bdf:	83 c4 0c             	add    esp,0xc
c0013be2:	c3                   	ret    
c0013be3:	90                   	nop

c0013be4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013be4:	b8 0a 00 00 00       	mov    eax,0xa
c0013be9:	c3                   	ret    

c0013bea <Bus::Bus(char const*)>:
c0013bea:	83 ec 0c             	sub    esp,0xc
c0013bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf1:	83 ec 08             	sub    esp,0x8
c0013bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf8:	50                   	push   eax
c0013bf9:	e8 68 09 00 00       	call   c0014566 <Device::Device(char const*)>
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c0013c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0a:	89 10                	mov    DWORD PTR [eax],edx
c0013c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c10:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c1a:	90                   	nop
c0013c1b:	83 c4 0c             	add    esp,0xc
c0013c1e:	c3                   	ret    
c0013c1f:	90                   	nop

c0013c20 <Bus::~Bus()>:
c0013c20:	83 ec 0c             	sub    esp,0xc
c0013c23:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c0013c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2c:	89 10                	mov    DWORD PTR [eax],edx
c0013c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	50                   	push   eax
c0013c36:	e8 0d 06 00 00       	call   c0014248 <Device::~Device()>
c0013c3b:	83 c4 10             	add    esp,0x10
c0013c3e:	90                   	nop
c0013c3f:	83 c4 0c             	add    esp,0xc
c0013c42:	c3                   	ret    
c0013c43:	90                   	nop

c0013c44 <Bus::~Bus()>:
c0013c44:	83 ec 0c             	sub    esp,0xc
c0013c47:	83 ec 0c             	sub    esp,0xc
c0013c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c4e:	e8 cd ff ff ff       	call   c0013c20 <Bus::~Bus()>
c0013c53:	83 c4 10             	add    esp,0x10
c0013c56:	83 ec 08             	sub    esp,0x8
c0013c59:	68 58 01 00 00       	push   0x158
c0013c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c62:	e8 09 f2 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0013c67:	83 c4 10             	add    esp,0x10
c0013c6a:	83 c4 0c             	add    esp,0xc
c0013c6d:	c3                   	ret    

c0013c6e <Buzzer::Buzzer(char const*)>:
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c75:	83 ec 08             	sub    esp,0x8
c0013c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c7c:	50                   	push   eax
c0013c7d:	e8 e4 08 00 00       	call   c0014566 <Device::Device(char const*)>
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	ba 30 ab 02 c0       	mov    edx,0xc002ab30
c0013c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8e:	89 10                	mov    DWORD PTR [eax],edx
c0013c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c94:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca2:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cac:	90                   	nop
c0013cad:	83 c4 0c             	add    esp,0xc
c0013cb0:	c3                   	ret    
c0013cb1:	90                   	nop

c0013cb2 <Buzzer::~Buzzer()>:
c0013cb2:	83 ec 0c             	sub    esp,0xc
c0013cb5:	ba 30 ab 02 c0       	mov    edx,0xc002ab30
c0013cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cbe:	89 10                	mov    DWORD PTR [eax],edx
c0013cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc4:	83 ec 0c             	sub    esp,0xc
c0013cc7:	50                   	push   eax
c0013cc8:	e8 7b 05 00 00       	call   c0014248 <Device::~Device()>
c0013ccd:	83 c4 10             	add    esp,0x10
c0013cd0:	90                   	nop
c0013cd1:	83 c4 0c             	add    esp,0xc
c0013cd4:	c3                   	ret    
c0013cd5:	90                   	nop

c0013cd6 <Buzzer::~Buzzer()>:
c0013cd6:	83 ec 0c             	sub    esp,0xc
c0013cd9:	83 ec 0c             	sub    esp,0xc
c0013cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce0:	e8 cd ff ff ff       	call   c0013cb2 <Buzzer::~Buzzer()>
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	83 ec 08             	sub    esp,0x8
c0013ceb:	68 5c 01 00 00       	push   0x15c
c0013cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf4:	e8 77 f1 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0013cf9:	83 c4 10             	add    esp,0x10
c0013cfc:	83 c4 0c             	add    esp,0xc
c0013cff:	c3                   	ret    

c0013d00 <Buzzer::stop()>:
c0013d00:	83 ec 14             	sub    esp,0x14
c0013d03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d07:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d09:	6a 00                	push   0x0
c0013d0b:	50                   	push   eax
c0013d0c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d0f:	83 c4 1c             	add    esp,0x1c
c0013d12:	c3                   	ret    

c0013d13 <beepThread(void*)>:
c0013d13:	53                   	push   ebx
c0013d14:	83 ec 08             	sub    esp,0x8
c0013d17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d1b:	e8 ae a0 00 00       	call   c001ddce <unlockScheduler()>
c0013d20:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d25:	52                   	push   edx
c0013d26:	52                   	push   edx
c0013d27:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d2d:	52                   	push   edx
c0013d2e:	50                   	push   eax
c0013d2f:	e8 e8 a5 00 00       	call   c001e31c <nanoSleep(unsigned long long)>
c0013d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d37:	e8 c4 ff ff ff       	call   c0013d00 <Buzzer::stop()>
c0013d3c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d44:	83 c4 18             	add    esp,0x18
c0013d47:	5b                   	pop    ebx
c0013d48:	e9 15 a5 00 00       	jmp    c001e262 <blockTask(TaskState)>
c0013d4d:	90                   	nop

c0013d4e <Buzzer::beep(int, int, bool)>:
c0013d4e:	57                   	push   edi
c0013d4f:	56                   	push   esi
c0013d50:	53                   	push   ebx
c0013d51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d55:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d5d:	52                   	push   edx
c0013d5e:	52                   	push   edx
c0013d5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d65:	56                   	push   esi
c0013d66:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d69:	83 c4 10             	add    esp,0x10
c0013d6c:	89 f8                	mov    eax,edi
c0013d6e:	84 c0                	test   al,al
c0013d70:	74 1f                	je     c0013d91 <Buzzer::beep(int, int, bool)+0x43>
c0013d72:	50                   	push   eax
c0013d73:	50                   	push   eax
c0013d74:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d7a:	99                   	cdq    
c0013d7b:	52                   	push   edx
c0013d7c:	50                   	push   eax
c0013d7d:	e8 9a a5 00 00       	call   c001e31c <nanoSleep(unsigned long long)>
c0013d82:	83 c4 10             	add    esp,0x10
c0013d85:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d89:	5b                   	pop    ebx
c0013d8a:	5e                   	pop    esi
c0013d8b:	5f                   	pop    edi
c0013d8c:	e9 6f ff ff ff       	jmp    c0013d00 <Buzzer::stop()>
c0013d91:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d97:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0013d9c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013da4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013da8:	c7 44 24 14 13 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d13
c0013db0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013db4:	5b                   	pop    ebx
c0013db5:	5e                   	pop    esi
c0013db6:	5f                   	pop    edi
c0013db7:	e9 42 a1 00 00       	jmp    c001defe <Process::createThread(void (*)(void*), void*, int)>

c0013dbc <User::loadClockSettings(int)>:
c0013dbc:	53                   	push   ebx
c0013dbd:	83 ec 14             	sub    esp,0x14
c0013dc0:	68 14 01 00 00       	push   0x114
c0013dc5:	e8 76 ba ff ff       	call   c000f840 <malloc>
c0013dca:	83 c4 0c             	add    esp,0xc
c0013dcd:	89 c3                	mov    ebx,eax
c0013dcf:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c0013dd5:	68 58 ab 02 c0       	push   0xc002ab58
c0013dda:	50                   	push   eax
c0013ddb:	e8 c8 f6 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c0013de0:	58                   	pop    eax
c0013de1:	5a                   	pop    edx
c0013de2:	6a 01                	push   0x1
c0013de4:	53                   	push   ebx
c0013de5:	e8 22 f7 ff ff       	call   c001350c <File::open(FileOpenMode)>
c0013dea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ded:	e8 78 f7 ff ff       	call   c001356a <File::close()>
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	85 db                	test   ebx,ebx
c0013df7:	74 0f                	je     c0013e08 <User::loadClockSettings(int)+0x4c>
c0013df9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dfb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013dff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e02:	83 c4 08             	add    esp,0x8
c0013e05:	5b                   	pop    ebx
c0013e06:	ff e0                	jmp    eax
c0013e08:	83 c4 08             	add    esp,0x8
c0013e0b:	5b                   	pop    ebx
c0013e0c:	c3                   	ret    
c0013e0d:	90                   	nop

c0013e0e <Clock::Clock(char const*)>:
c0013e0e:	83 ec 0c             	sub    esp,0xc
c0013e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e15:	83 ec 08             	sub    esp,0x8
c0013e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e1c:	50                   	push   eax
c0013e1d:	e8 44 07 00 00       	call   c0014566 <Device::Device(char const*)>
c0013e22:	83 c4 10             	add    esp,0x10
c0013e25:	ba 80 ab 02 c0       	mov    edx,0xc002ab80
c0013e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2e:	89 10                	mov    DWORD PTR [eax],edx
c0013e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e34:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e3e:	90                   	nop
c0013e3f:	83 c4 0c             	add    esp,0xc
c0013e42:	c3                   	ret    
c0013e43:	90                   	nop

c0013e44 <Clock::~Clock()>:
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	ba 80 ab 02 c0       	mov    edx,0xc002ab80
c0013e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e50:	89 10                	mov    DWORD PTR [eax],edx
c0013e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e56:	83 ec 0c             	sub    esp,0xc
c0013e59:	50                   	push   eax
c0013e5a:	e8 e9 03 00 00       	call   c0014248 <Device::~Device()>
c0013e5f:	83 c4 10             	add    esp,0x10
c0013e62:	90                   	nop
c0013e63:	83 c4 0c             	add    esp,0xc
c0013e66:	c3                   	ret    
c0013e67:	90                   	nop

c0013e68 <Clock::~Clock()>:
c0013e68:	83 ec 0c             	sub    esp,0xc
c0013e6b:	83 ec 0c             	sub    esp,0xc
c0013e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e72:	e8 cd ff ff ff       	call   c0013e44 <Clock::~Clock()>
c0013e77:	83 c4 10             	add    esp,0x10
c0013e7a:	83 ec 08             	sub    esp,0x8
c0013e7d:	68 58 01 00 00       	push   0x158
c0013e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e86:	e8 e5 ef ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0013e8b:	83 c4 10             	add    esp,0x10
c0013e8e:	83 c4 0c             	add    esp,0xc
c0013e91:	c3                   	ret    

c0013e92 <Clock::timeInSecondsLocal()>:
c0013e92:	53                   	push   ebx
c0013e93:	83 ec 14             	sub    esp,0x14
c0013e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e9c:	50                   	push   eax
c0013e9d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ea0:	0f b6 0d 40 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e540
c0013ea7:	03 0d 44 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e544
c0013ead:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013eb3:	89 cb                	mov    ebx,ecx
c0013eb5:	c1 fb 1f             	sar    ebx,0x1f
c0013eb8:	01 c8                	add    eax,ecx
c0013eba:	11 da                	adc    edx,ebx
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	31 c9                	xor    ecx,ecx
c0013ec1:	80 3d 41 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e541,0x0
c0013ec8:	74 05                	je     c0013ecf <Clock::timeInSecondsLocal()+0x3d>
c0013eca:	b9 08 07 00 00       	mov    ecx,0x708
c0013ecf:	31 db                	xor    ebx,ebx
c0013ed1:	01 c8                	add    eax,ecx
c0013ed3:	11 da                	adc    edx,ebx
c0013ed5:	83 c4 08             	add    esp,0x8
c0013ed8:	5b                   	pop    ebx
c0013ed9:	c3                   	ret    

c0013eda <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013eda:	57                   	push   edi
c0013edb:	56                   	push   esi
c0013edc:	53                   	push   ebx
c0013edd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ee1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ee5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ee7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013eeb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013eee:	0f b6 05 40 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e540
c0013ef5:	03 05 44 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e544
c0013efb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f01:	99                   	cdq    
c0013f02:	29 c6                	sub    esi,eax
c0013f04:	19 d7                	sbb    edi,edx
c0013f06:	89 f0                	mov    eax,esi
c0013f08:	89 fa                	mov    edx,edi
c0013f0a:	31 f6                	xor    esi,esi
c0013f0c:	80 3d 41 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e541,0x0
c0013f13:	74 05                	je     c0013f1a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f15:	be 08 07 00 00       	mov    esi,0x708
c0013f1a:	31 ff                	xor    edi,edi
c0013f1c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f20:	29 f0                	sub    eax,esi
c0013f22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f26:	19 fa                	sbb    edx,edi
c0013f28:	89 d8                	mov    eax,ebx
c0013f2a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f2e:	5b                   	pop    ebx
c0013f2f:	5e                   	pop    esi
c0013f30:	5f                   	pop    edi
c0013f31:	ff e0                	jmp    eax

c0013f33 <datetimeToSeconds(datetime_t)>:
c0013f33:	55                   	push   ebp
c0013f34:	57                   	push   edi
c0013f35:	56                   	push   esi
c0013f36:	53                   	push   ebx
c0013f37:	83 ec 14             	sub    esp,0x14
c0013f3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f3e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f42:	89 d3                	mov    ebx,edx
c0013f44:	0f b6 c6             	movzx  eax,dh
c0013f47:	c1 eb 10             	shr    ebx,0x10
c0013f4a:	48                   	dec    eax
c0013f4b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f50:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f54:	0f b6 f5             	movzx  esi,ch
c0013f57:	89 cf                	mov    edi,ecx
c0013f59:	6b f6 3c             	imul   esi,esi,0x3c
c0013f5c:	c1 ef 10             	shr    edi,0x10
c0013f5f:	0f b6 c9             	movzx  ecx,cl
c0013f62:	89 f8                	mov    eax,edi
c0013f64:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f6a:	0f b6 f8             	movzx  edi,al
c0013f6d:	0f b6 d2             	movzx  edx,dl
c0013f70:	01 fe                	add    esi,edi
c0013f72:	01 f1                	add    ecx,esi
c0013f74:	0f b7 f3             	movzx  esi,bx
c0013f77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f7b:	c1 f9 1f             	sar    ecx,0x1f
c0013f7e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f83:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f87:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f8c:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c0013f93:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f97:	76 29                	jbe    c0013fc2 <datetimeToSeconds(datetime_t)+0x8f>
c0013f99:	f6 c3 03             	test   bl,0x3
c0013f9c:	75 24                	jne    c0013fc2 <datetimeToSeconds(datetime_t)+0x8f>
c0013f9e:	31 d2                	xor    edx,edx
c0013fa0:	bf 64 00 00 00       	mov    edi,0x64
c0013fa5:	89 d8                	mov    eax,ebx
c0013fa7:	66 f7 f7             	div    di
c0013faa:	66 85 d2             	test   dx,dx
c0013fad:	75 12                	jne    c0013fc1 <datetimeToSeconds(datetime_t)+0x8e>
c0013faf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fb5:	bf 90 01 00 00       	mov    edi,0x190
c0013fba:	99                   	cdq    
c0013fbb:	f7 ff                	idiv   edi
c0013fbd:	85 d2                	test   edx,edx
c0013fbf:	75 01                	jne    c0013fc2 <datetimeToSeconds(datetime_t)+0x8f>
c0013fc1:	41                   	inc    ecx
c0013fc2:	66 83 fb 46          	cmp    bx,0x46
c0013fc6:	76 45                	jbe    c001400d <datetimeToSeconds(datetime_t)+0xda>
c0013fc8:	bb 46 00 00 00       	mov    ebx,0x46
c0013fcd:	bf 64 00 00 00       	mov    edi,0x64
c0013fd2:	bd 90 01 00 00       	mov    ebp,0x190
c0013fd7:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fdc:	f6 c3 03             	test   bl,0x3
c0013fdf:	75 23                	jne    c0014004 <datetimeToSeconds(datetime_t)+0xd1>
c0013fe1:	89 d8                	mov    eax,ebx
c0013fe3:	99                   	cdq    
c0013fe4:	f7 ff                	idiv   edi
c0013fe6:	b8 6e 01 00 00       	mov    eax,0x16e
c0013feb:	85 d2                	test   edx,edx
c0013fed:	75 15                	jne    c0014004 <datetimeToSeconds(datetime_t)+0xd1>
c0013fef:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013ff5:	99                   	cdq    
c0013ff6:	f7 fd                	idiv   ebp
c0013ff8:	83 fa 01             	cmp    edx,0x1
c0013ffb:	19 c0                	sbb    eax,eax
c0013ffd:	f7 d0                	not    eax
c0013fff:	05 6e 01 00 00       	add    eax,0x16e
c0014004:	01 c1                	add    ecx,eax
c0014006:	43                   	inc    ebx
c0014007:	39 f3                	cmp    ebx,esi
c0014009:	7c cc                	jl     c0013fd7 <datetimeToSeconds(datetime_t)+0xa4>
c001400b:	eb 35                	jmp    c0014042 <datetimeToSeconds(datetime_t)+0x10f>
c001400d:	74 33                	je     c0014042 <datetimeToSeconds(datetime_t)+0x10f>
c001400f:	b8 45 00 00 00       	mov    eax,0x45
c0014014:	89 c2                	mov    edx,eax
c0014016:	83 e2 03             	and    edx,0x3
c0014019:	39 f0                	cmp    eax,esi
c001401b:	7e 0f                	jle    c001402c <datetimeToSeconds(datetime_t)+0xf9>
c001401d:	83 fa 01             	cmp    edx,0x1
c0014020:	19 d2                	sbb    edx,edx
c0014022:	48                   	dec    eax
c0014023:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001402a:	eb e8                	jmp    c0014014 <datetimeToSeconds(datetime_t)+0xe1>
c001402c:	b8 6d 01 00 00       	mov    eax,0x16d
c0014031:	85 d2                	test   edx,edx
c0014033:	75 0b                	jne    c0014040 <datetimeToSeconds(datetime_t)+0x10d>
c0014035:	66 83 fb 01          	cmp    bx,0x1
c0014039:	19 c0                	sbb    eax,eax
c001403b:	05 6e 01 00 00       	add    eax,0x16e
c0014040:	29 c1                	sub    ecx,eax
c0014042:	b8 80 51 01 00       	mov    eax,0x15180
c0014047:	f7 e9                	imul   ecx
c0014049:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001404d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014051:	83 c4 14             	add    esp,0x14
c0014054:	5b                   	pop    ebx
c0014055:	5e                   	pop    esi
c0014056:	5f                   	pop    edi
c0014057:	5d                   	pop    ebp
c0014058:	c3                   	ret    
c0014059:	90                   	nop

c001405a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001405a:	57                   	push   edi
c001405b:	56                   	push   esi
c001405c:	53                   	push   ebx
c001405d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014061:	8b 06                	mov    eax,DWORD PTR [esi]
c0014063:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014066:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001406a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001406e:	e8 c0 fe ff ff       	call   c0013f33 <datetimeToSeconds(datetime_t)>
c0014073:	59                   	pop    ecx
c0014074:	0f b6 0d 40 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e540
c001407b:	5b                   	pop    ebx
c001407c:	03 0d 44 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e544
c0014082:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014088:	89 cb                	mov    ebx,ecx
c001408a:	c1 fb 1f             	sar    ebx,0x1f
c001408d:	29 c8                	sub    eax,ecx
c001408f:	19 da                	sbb    edx,ebx
c0014091:	31 c9                	xor    ecx,ecx
c0014093:	80 3d 41 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e541,0x0
c001409a:	74 05                	je     c00140a1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001409c:	b9 08 07 00 00       	mov    ecx,0x708
c00140a1:	31 db                	xor    ebx,ebx
c00140a3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140a7:	29 c8                	sub    eax,ecx
c00140a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140ad:	19 da                	sbb    edx,ebx
c00140af:	89 f8                	mov    eax,edi
c00140b1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140b5:	5b                   	pop    ebx
c00140b6:	5e                   	pop    esi
c00140b7:	5f                   	pop    edi
c00140b8:	ff e0                	jmp    eax

c00140ba <secondsToDatetime(unsigned long long)>:
c00140ba:	55                   	push   ebp
c00140bb:	57                   	push   edi
c00140bc:	56                   	push   esi
c00140bd:	53                   	push   ebx
c00140be:	83 ec 1c             	sub    esp,0x1c
c00140c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140c9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140cd:	6a 00                	push   0x0
c00140cf:	68 80 51 01 00       	push   0x15180
c00140d4:	55                   	push   ebp
c00140d5:	57                   	push   edi
c00140d6:	e8 d1 28 01 00       	call   c00269ac <__udivdi3>
c00140db:	83 c4 10             	add    esp,0x10
c00140de:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140e8:	6a 00                	push   0x0
c00140ea:	68 80 51 01 00       	push   0x15180
c00140ef:	55                   	push   ebp
c00140f0:	57                   	push   edi
c00140f1:	bf 10 0e 00 00       	mov    edi,0xe10
c00140f6:	e8 b1 29 01 00       	call   c0026aac <__umoddi3>
c00140fb:	83 c4 10             	add    esp,0x10
c00140fe:	99                   	cdq    
c00140ff:	f7 ff                	idiv   edi
c0014101:	bf 3c 00 00 00       	mov    edi,0x3c
c0014106:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014109:	89 d0                	mov    eax,edx
c001410b:	99                   	cdq    
c001410c:	f7 ff                	idiv   edi
c001410e:	85 db                	test   ebx,ebx
c0014110:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014113:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014116:	79 11                	jns    c0014129 <secondsToDatetime(unsigned long long)+0x6f>
c0014118:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001411c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014122:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014127:	eb 07                	jmp    c0014130 <secondsToDatetime(unsigned long long)+0x76>
c0014129:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001412e:	89 d8                	mov    eax,ebx
c0014130:	bf b4 05 00 00       	mov    edi,0x5b4
c0014135:	99                   	cdq    
c0014136:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001413b:	f7 f9                	idiv   ecx
c001413d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014142:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014146:	31 d2                	xor    edx,edx
c0014148:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014150:	01 c3                	add    ebx,eax
c0014152:	89 d8                	mov    eax,ebx
c0014154:	f7 f1                	div    ecx
c0014156:	31 d2                	xor    edx,edx
c0014158:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001415b:	89 d8                	mov    eax,ebx
c001415d:	f7 f7                	div    edi
c001415f:	31 d2                	xor    edx,edx
c0014161:	29 c1                	sub    ecx,eax
c0014163:	89 d8                	mov    eax,ebx
c0014165:	f7 f5                	div    ebp
c0014167:	bd 6d 01 00 00       	mov    ebp,0x16d
c001416c:	29 c1                	sub    ecx,eax
c001416e:	31 d2                	xor    edx,edx
c0014170:	89 c8                	mov    eax,ecx
c0014172:	f7 f5                	div    ebp
c0014174:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001417d:	31 d2                	xor    edx,edx
c001417f:	89 c8                	mov    eax,ecx
c0014181:	f7 f5                	div    ebp
c0014183:	31 d2                	xor    edx,edx
c0014185:	01 c3                	add    ebx,eax
c0014187:	89 c8                	mov    eax,ecx
c0014189:	f7 f7                	div    edi
c001418b:	bf 99 00 00 00       	mov    edi,0x99
c0014190:	29 c3                	sub    ebx,eax
c0014192:	31 d2                	xor    edx,edx
c0014194:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001419c:	29 c3                	sub    ebx,eax
c001419e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141a1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141a4:	bb 05 00 00 00       	mov    ebx,0x5
c00141a9:	83 c1 02             	add    ecx,0x2
c00141ac:	89 c8                	mov    eax,ecx
c00141ae:	f7 f7                	div    edi
c00141b0:	31 d2                	xor    edx,edx
c00141b2:	89 c7                	mov    edi,eax
c00141b4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141ba:	83 c0 02             	add    eax,0x2
c00141bd:	f7 f3                	div    ebx
c00141bf:	89 eb                	mov    ebx,ebp
c00141c1:	29 c3                	sub    ebx,eax
c00141c3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141c9:	88 1e                	mov    BYTE PTR [esi],bl
c00141cb:	19 c0                	sbb    eax,eax
c00141cd:	31 d2                	xor    edx,edx
c00141cf:	83 e0 0c             	and    eax,0xc
c00141d2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141d6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141de:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141e2:	83 f9 01             	cmp    ecx,0x1
c00141e5:	0f 96 c2             	setbe  dl
c00141e8:	41                   	inc    ecx
c00141e9:	01 d0                	add    eax,edx
c00141eb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141ee:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141f2:	83 c4 1c             	add    esp,0x1c
c00141f5:	89 f0                	mov    eax,esi
c00141f7:	5b                   	pop    ebx
c00141f8:	5e                   	pop    esi
c00141f9:	5f                   	pop    edi
c00141fa:	5d                   	pop    ebp
c00141fb:	c2 04 00             	ret    0x4

c00141fe <Clock::timeInDatetimeLocal()>:
c00141fe:	53                   	push   ebx
c00141ff:	83 ec 14             	sub    esp,0x14
c0014202:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014206:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001420a:	e8 83 fc ff ff       	call   c0013e92 <Clock::timeInSecondsLocal()>
c001420f:	83 c4 0c             	add    esp,0xc
c0014212:	52                   	push   edx
c0014213:	50                   	push   eax
c0014214:	53                   	push   ebx
c0014215:	e8 a0 fe ff ff       	call   c00140ba <secondsToDatetime(unsigned long long)>
c001421a:	89 d8                	mov    eax,ebx
c001421c:	83 c4 14             	add    esp,0x14
c001421f:	5b                   	pop    ebx
c0014220:	c2 04 00             	ret    0x4
c0014223:	90                   	nop

c0014224 <Device::hibernate()>:
c0014224:	c3                   	ret    
c0014225:	90                   	nop

c0014226 <Device::wake()>:
c0014226:	c3                   	ret    
c0014227:	90                   	nop

c0014228 <Device::detect()>:
c0014228:	c3                   	ret    
c0014229:	90                   	nop

c001422a <Device::disableLegacy()>:
c001422a:	c3                   	ret    
c001422b:	90                   	nop

c001422c <Device::powerSaving(PowerSavingLevel)>:
c001422c:	c3                   	ret    
c001422d:	90                   	nop

c001422e <DriverlessDevice::close(int, int, void*)>:
c001422e:	31 c0                	xor    eax,eax
c0014230:	c3                   	ret    
c0014231:	90                   	nop

c0014232 <DriverlessDevice::detect()>:
c0014232:	c3                   	ret    
c0014233:	90                   	nop

c0014234 <DriverlessDevice::open(int, int, void*)>:
c0014234:	83 ec 18             	sub    esp,0x18
c0014237:	68 f0 ab 02 c0       	push   0xc002abf0
c001423c:	e8 b0 63 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0014241:	83 c8 ff             	or     eax,0xffffffff
c0014244:	83 c4 1c             	add    esp,0x1c
c0014247:	c3                   	ret    

c0014248 <Device::~Device()>:
c0014248:	ba 18 ac 02 c0       	mov    edx,0xc002ac18
c001424d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014251:	89 10                	mov    DWORD PTR [eax],edx
c0014253:	90                   	nop
c0014254:	c3                   	ret    
c0014255:	90                   	nop

c0014256 <Device::~Device()>:
c0014256:	83 ec 0c             	sub    esp,0xc
c0014259:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001425d:	e8 e6 ff ff ff       	call   c0014248 <Device::~Device()>
c0014262:	83 c4 04             	add    esp,0x4
c0014265:	83 ec 08             	sub    esp,0x8
c0014268:	68 58 01 00 00       	push   0x158
c001426d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014271:	e8 fa eb ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0014276:	83 c4 10             	add    esp,0x10
c0014279:	83 c4 0c             	add    esp,0xc
c001427c:	c3                   	ret    
c001427d:	90                   	nop

c001427e <Device::findAndLoadDriver()>:
c001427e:	c3                   	ret    
c001427f:	90                   	nop

c0014280 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014280:	57                   	push   edi
c0014281:	b9 09 00 00 00       	mov    ecx,0x9
c0014286:	56                   	push   esi
c0014287:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001428b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001428f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014299:	81 c7 18 01 00 00    	add    edi,0x118
c001429f:	fc                   	cld    
c00142a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142a2:	5e                   	pop    esi
c00142a3:	5f                   	pop    edi
c00142a4:	c3                   	ret    
c00142a5:	90                   	nop

c00142a6 <Device::preOpenACPI(void*, char*, char*)>:
c00142a6:	56                   	push   esi
c00142a7:	53                   	push   ebx
c00142a8:	83 ec 08             	sub    esp,0x8
c00142ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142b3:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142c1:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142c7:	6a 1e                	push   0x1e
c00142c9:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142d3:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142d9:	50                   	push   eax
c00142da:	e8 65 c4 fe ff       	call   c0000744 <memcpy>
c00142df:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142e3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142e7:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142ef:	83 c4 14             	add    esp,0x14
c00142f2:	5b                   	pop    ebx
c00142f3:	5e                   	pop    esi
c00142f4:	e9 4b c4 fe ff       	jmp    c0000744 <memcpy>
c00142f9:	90                   	nop

c00142fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142fe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014303:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001430a:	75 0b                	jne    c0014317 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001430c:	8b 00                	mov    eax,DWORD PTR [eax]
c001430e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014312:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014315:	eb 1e                	jmp    c0014335 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014317:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001431c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014322:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014328:	8b 08                	mov    ecx,DWORD PTR [eax]
c001432a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001432e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014332:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014335:	ff e0                	jmp    eax
c0014337:	90                   	nop

c0014338 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001433c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014341:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014348:	75 0b                	jne    c0014355 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001434a:	8b 00                	mov    eax,DWORD PTR [eax]
c001434c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014350:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014353:	eb 1e                	jmp    c0014373 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014355:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001435a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014360:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014366:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014368:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001436c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014370:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014373:	ff e0                	jmp    eax
c0014375:	90                   	nop

c0014376 <Device::addChild(Device*)>:
c0014376:	53                   	push   ebx
c0014377:	83 ec 08             	sub    esp,0x8
c001437a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001437e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014382:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014388:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001438e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014390:	85 d2                	test   edx,edx
c0014392:	74 04                	je     c0014398 <Device::addChild(Device*)+0x22>
c0014394:	89 d3                	mov    ebx,edx
c0014396:	eb f6                	jmp    c001438e <Device::addChild(Device*)+0x18>
c0014398:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001439b:	83 ec 0c             	sub    esp,0xc
c001439e:	6a 08                	push   0x8
c00143a0:	e8 9b b4 ff ff       	call   c000f840 <malloc>
c00143a5:	89 03                	mov    DWORD PTR [ebx],eax
c00143a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143b4:	83 c4 18             	add    esp,0x18
c00143b7:	5b                   	pop    ebx
c00143b8:	c3                   	ret    
c00143b9:	90                   	nop

c00143ba <Device::removeAllChildren()>:
c00143ba:	56                   	push   esi
c00143bb:	53                   	push   ebx
c00143bc:	52                   	push   edx
c00143bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143c1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ca:	74 17                	je     c00143e3 <Device::removeAllChildren()+0x29>
c00143cc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143cf:	85 c0                	test   eax,eax
c00143d1:	74 0c                	je     c00143df <Device::removeAllChildren()+0x25>
c00143d3:	83 ec 0c             	sub    esp,0xc
c00143d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00143d8:	50                   	push   eax
c00143d9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143dc:	83 c4 10             	add    esp,0x10
c00143df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143e1:	eb e4                	jmp    c00143c7 <Device::removeAllChildren()+0xd>
c00143e3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143ef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143fc:	58                   	pop    eax
c00143fd:	5b                   	pop    ebx
c00143fe:	5e                   	pop    esi
c00143ff:	c3                   	ret    

c0014400 <Device::hibernateAll()>:
c0014400:	53                   	push   ebx
c0014401:	83 ec 14             	sub    esp,0x14
c0014404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014408:	8b 03                	mov    eax,DWORD PTR [ebx]
c001440a:	53                   	push   ebx
c001440b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001440e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014414:	83 c4 10             	add    esp,0x10
c0014417:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001441a:	74 0f                	je     c001442b <Device::hibernateAll()+0x2b>
c001441c:	83 ec 0c             	sub    esp,0xc
c001441f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014422:	e8 d9 ff ff ff       	call   c0014400 <Device::hibernateAll()>
c0014427:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014429:	eb e9                	jmp    c0014414 <Device::hibernateAll()+0x14>
c001442b:	83 c4 08             	add    esp,0x8
c001442e:	5b                   	pop    ebx
c001442f:	c3                   	ret    

c0014430 <Device::wakeAll()>:
c0014430:	53                   	push   ebx
c0014431:	83 ec 14             	sub    esp,0x14
c0014434:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014438:	8b 03                	mov    eax,DWORD PTR [ebx]
c001443a:	53                   	push   ebx
c001443b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001443e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014444:	83 c4 10             	add    esp,0x10
c0014447:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001444a:	74 0f                	je     c001445b <Device::wakeAll()+0x2b>
c001444c:	83 ec 0c             	sub    esp,0xc
c001444f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014452:	e8 d9 ff ff ff       	call   c0014430 <Device::wakeAll()>
c0014457:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014459:	eb e9                	jmp    c0014444 <Device::wakeAll()+0x14>
c001445b:	83 c4 08             	add    esp,0x8
c001445e:	5b                   	pop    ebx
c001445f:	c3                   	ret    

c0014460 <Device::detectAll()>:
c0014460:	53                   	push   ebx
c0014461:	83 ec 14             	sub    esp,0x14
c0014464:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014468:	8b 03                	mov    eax,DWORD PTR [ebx]
c001446a:	53                   	push   ebx
c001446b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001446e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014474:	83 c4 10             	add    esp,0x10
c0014477:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001447a:	74 0f                	je     c001448b <Device::detectAll()+0x2b>
c001447c:	83 ec 0c             	sub    esp,0xc
c001447f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014482:	e8 d9 ff ff ff       	call   c0014460 <Device::detectAll()>
c0014487:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014489:	eb e9                	jmp    c0014474 <Device::detectAll()+0x14>
c001448b:	83 c4 08             	add    esp,0x8
c001448e:	5b                   	pop    ebx
c001448f:	c3                   	ret    

c0014490 <Device::disableLegacyAll()>:
c0014490:	53                   	push   ebx
c0014491:	83 ec 14             	sub    esp,0x14
c0014494:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014498:	8b 03                	mov    eax,DWORD PTR [ebx]
c001449a:	53                   	push   ebx
c001449b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001449e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144a4:	83 c4 10             	add    esp,0x10
c00144a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144aa:	74 0f                	je     c00144bb <Device::disableLegacyAll()+0x2b>
c00144ac:	83 ec 0c             	sub    esp,0xc
c00144af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144b2:	e8 d9 ff ff ff       	call   c0014490 <Device::disableLegacyAll()>
c00144b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144b9:	eb e9                	jmp    c00144a4 <Device::disableLegacyAll()+0x14>
c00144bb:	83 c4 08             	add    esp,0x8
c00144be:	5b                   	pop    ebx
c00144bf:	c3                   	ret    

c00144c0 <Device::loadDriversForAll()>:
c00144c0:	53                   	push   ebx
c00144c1:	83 ec 08             	sub    esp,0x8
c00144c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144c8:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144ce:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144d0:	85 db                	test   ebx,ebx
c00144d2:	74 12                	je     c00144e6 <Device::loadDriversForAll()+0x26>
c00144d4:	83 ec 0c             	sub    esp,0xc
c00144d7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144da:	e8 e1 ff ff ff       	call   c00144c0 <Device::loadDriversForAll()>
c00144df:	83 c4 10             	add    esp,0x10
c00144e2:	89 d8                	mov    eax,ebx
c00144e4:	eb e8                	jmp    c00144ce <Device::loadDriversForAll()+0xe>
c00144e6:	83 c4 08             	add    esp,0x8
c00144e9:	5b                   	pop    ebx
c00144ea:	c3                   	ret    
c00144eb:	90                   	nop

c00144ec <Device::closeAll()>:
c00144ec:	53                   	push   ebx
c00144ed:	83 ec 08             	sub    esp,0x8
c00144f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f6:	6a 00                	push   0x0
c00144f8:	6a 00                	push   0x0
c00144fa:	6a 00                	push   0x0
c00144fc:	53                   	push   ebx
c00144fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014500:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014506:	83 c4 10             	add    esp,0x10
c0014509:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001450c:	74 0f                	je     c001451d <Device::closeAll()+0x31>
c001450e:	83 ec 0c             	sub    esp,0xc
c0014511:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014514:	e8 d3 ff ff ff       	call   c00144ec <Device::closeAll()>
c0014519:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001451b:	eb e9                	jmp    c0014506 <Device::closeAll()+0x1a>
c001451d:	83 c4 08             	add    esp,0x8
c0014520:	5b                   	pop    ebx
c0014521:	c3                   	ret    

c0014522 <Device::powerSavingAll(PowerSavingLevel)>:
c0014522:	56                   	push   esi
c0014523:	53                   	push   ebx
c0014524:	83 ec 0c             	sub    esp,0xc
c0014527:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001452b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001452f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014531:	56                   	push   esi
c0014532:	53                   	push   ebx
c0014533:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014536:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001453c:	83 c4 10             	add    esp,0x10
c001453f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014542:	74 0f                	je     c0014553 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014544:	52                   	push   edx
c0014545:	52                   	push   edx
c0014546:	56                   	push   esi
c0014547:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001454a:	e8 d3 ff ff ff       	call   c0014522 <Device::powerSavingAll(PowerSavingLevel)>
c001454f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014551:	eb e9                	jmp    c001453c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014553:	58                   	pop    eax
c0014554:	5b                   	pop    ebx
c0014555:	5e                   	pop    esi
c0014556:	c3                   	ret    
c0014557:	90                   	nop

c0014558 <Device::setName(char const*)>:
c0014558:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014560:	e9 cf c2 fe ff       	jmp    c0000834 <strcpy>
c0014565:	90                   	nop

c0014566 <Device::Device(char const*)>:
c0014566:	83 ec 1c             	sub    esp,0x1c
c0014569:	ba 18 ac 02 c0       	mov    edx,0xc002ac18
c001456e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014572:	89 10                	mov    DWORD PTR [eax],edx
c0014574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014578:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014586:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014594:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001459e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145ac:	83 ec 08             	sub    esp,0x8
c00145af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145b7:	e8 9c ff ff ff       	call   c0014558 <Device::setName(char const*)>
c00145bc:	83 c4 10             	add    esp,0x10
c00145bf:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145c7:	83 ec 0c             	sub    esp,0xc
c00145ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145ce:	e8 6d b2 ff ff       	call   c000f840 <malloc>
c00145d3:	83 c4 10             	add    esp,0x10
c00145d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145e7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014601:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014607:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001460e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014612:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014628:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014636:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014644:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001464e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014652:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001465c:	90                   	nop
c001465d:	83 c4 1c             	add    esp,0x1c
c0014660:	c3                   	ret    
c0014661:	90                   	nop

c0014662 <Device::getName()>:
c0014662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014666:	05 d0 00 00 00       	add    eax,0xd0
c001466b:	c3                   	ret    

c001466c <DriverlessDevice::DriverlessDevice(char const*)>:
c001466c:	83 ec 0c             	sub    esp,0xc
c001466f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014673:	83 ec 08             	sub    esp,0x8
c0014676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001467a:	50                   	push   eax
c001467b:	e8 e6 fe ff ff       	call   c0014566 <Device::Device(char const*)>
c0014680:	83 c4 10             	add    esp,0x10
c0014683:	ba 44 ac 02 c0       	mov    edx,0xc002ac44
c0014688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001468c:	89 10                	mov    DWORD PTR [eax],edx
c001468e:	90                   	nop
c001468f:	83 c4 0c             	add    esp,0xc
c0014692:	c3                   	ret    
c0014693:	90                   	nop

c0014694 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014694:	57                   	push   edi
c0014695:	56                   	push   esi
c0014696:	53                   	push   ebx
c0014697:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001469b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001469f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146a3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146a9:	75 0c                	jne    c00146b7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146ab:	52                   	push   edx
c00146ac:	52                   	push   edx
c00146ad:	53                   	push   ebx
c00146ae:	56                   	push   esi
c00146af:	e8 36 42 01 00       	call   c00288ea <LinkedList<Device>::addElement(Device*)>
c00146b4:	83 c4 10             	add    esp,0x10
c00146b7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146c0:	74 12                	je     c00146d4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146c2:	50                   	push   eax
c00146c3:	57                   	push   edi
c00146c4:	56                   	push   esi
c00146c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146c8:	e8 c7 ff ff ff       	call   c0014694 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146cf:	83 c4 10             	add    esp,0x10
c00146d2:	eb e9                	jmp    c00146bd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146d4:	5b                   	pop    ebx
c00146d5:	5e                   	pop    esi
c00146d6:	5f                   	pop    edi
c00146d7:	c3                   	ret    

c00146d8 <getDevicesOfType(DeviceType)>:
c00146d8:	53                   	push   ebx
c00146d9:	83 ec 14             	sub    esp,0x14
c00146dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146e0:	53                   	push   ebx
c00146e1:	e8 e0 42 01 00       	call   c00289c6 <LinkedList<Device>::LinkedList()>
c00146e6:	83 c4 0c             	add    esp,0xc
c00146e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146ed:	53                   	push   ebx
c00146ee:	ff 35 a8 e3 02 c0    	push   DWORD PTR ds:0xc002e3a8
c00146f4:	e8 9b ff ff ff       	call   c0014694 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146f9:	89 d8                	mov    eax,ebx
c00146fb:	83 c4 18             	add    esp,0x18
c00146fe:	5b                   	pop    ebx
c00146ff:	c2 04 00             	ret    0x4

c0014702 <HardDiskController::HardDiskController(char const*)>:
c0014702:	83 ec 0c             	sub    esp,0xc
c0014705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014709:	83 ec 08             	sub    esp,0x8
c001470c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014710:	50                   	push   eax
c0014711:	e8 50 fe ff ff       	call   c0014566 <Device::Device(char const*)>
c0014716:	83 c4 10             	add    esp,0x10
c0014719:	ba 70 ac 02 c0       	mov    edx,0xc002ac70
c001471e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014722:	89 10                	mov    DWORD PTR [eax],edx
c0014724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014728:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014732:	90                   	nop
c0014733:	83 c4 0c             	add    esp,0xc
c0014736:	c3                   	ret    
c0014737:	90                   	nop

c0014738 <HardDiskController::~HardDiskController()>:
c0014738:	83 ec 0c             	sub    esp,0xc
c001473b:	ba 70 ac 02 c0       	mov    edx,0xc002ac70
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	89 10                	mov    DWORD PTR [eax],edx
c0014746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474a:	83 ec 0c             	sub    esp,0xc
c001474d:	50                   	push   eax
c001474e:	e8 f5 fa ff ff       	call   c0014248 <Device::~Device()>
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	90                   	nop
c0014757:	83 c4 0c             	add    esp,0xc
c001475a:	c3                   	ret    
c001475b:	90                   	nop

c001475c <HardDiskController::~HardDiskController()>:
c001475c:	83 ec 0c             	sub    esp,0xc
c001475f:	83 ec 0c             	sub    esp,0xc
c0014762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014766:	e8 cd ff ff ff       	call   c0014738 <HardDiskController::~HardDiskController()>
c001476b:	83 c4 10             	add    esp,0x10
c001476e:	83 ec 08             	sub    esp,0x8
c0014771:	68 58 01 00 00       	push   0x158
c0014776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001477a:	e8 f1 e6 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c001477f:	83 c4 10             	add    esp,0x10
c0014782:	83 c4 0c             	add    esp,0xc
c0014785:	c3                   	ret    

c0014786 <PhysicalDisk::eject()>:
c0014786:	83 ec 18             	sub    esp,0x18
c0014789:	68 94 ac 02 c0       	push   0xc002ac94
c001478e:	e8 bd e7 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014793:	83 c8 ff             	or     eax,0xffffffff
c0014796:	83 c4 1c             	add    esp,0x1c
c0014799:	c3                   	ret    

c001479a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001479a:	83 ec 0c             	sub    esp,0xc
c001479d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a1:	83 ec 08             	sub    esp,0x8
c00147a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a8:	50                   	push   eax
c00147a9:	e8 b8 fd ff ff       	call   c0014566 <Device::Device(char const*)>
c00147ae:	83 c4 10             	add    esp,0x10
c00147b1:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c00147b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ba:	89 10                	mov    DWORD PTR [eax],edx
c00147bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147cb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147e8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147fc:	90                   	nop
c00147fd:	83 c4 0c             	add    esp,0xc
c0014800:	c3                   	ret    
c0014801:	90                   	nop

c0014802 <PhysicalDisk::startCache()>:
c0014802:	56                   	push   esi
c0014803:	53                   	push   ebx
c0014804:	83 ec 10             	sub    esp,0x10
c0014807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001480b:	6a 44                	push   0x44
c001480d:	e8 2e b0 ff ff       	call   c000f840 <malloc>
c0014812:	89 c6                	mov    esi,eax
c0014814:	58                   	pop    eax
c0014815:	5a                   	pop    edx
c0014816:	53                   	push   ebx
c0014817:	56                   	push   esi
c0014818:	e8 29 27 00 00       	call   c0016f46 <VCache::VCache(PhysicalDisk*)>
c001481d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014823:	83 c4 14             	add    esp,0x14
c0014826:	5b                   	pop    ebx
c0014827:	5e                   	pop    esi
c0014828:	c3                   	ret    
c0014829:	90                   	nop

c001482a <PhysicalDisk::~PhysicalDisk()>:
c001482a:	83 ec 0c             	sub    esp,0xc
c001482d:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c0014832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014836:	89 10                	mov    DWORD PTR [eax],edx
c0014838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483c:	83 ec 0c             	sub    esp,0xc
c001483f:	50                   	push   eax
c0014840:	e8 03 fa ff ff       	call   c0014248 <Device::~Device()>
c0014845:	83 c4 10             	add    esp,0x10
c0014848:	90                   	nop
c0014849:	83 c4 0c             	add    esp,0xc
c001484c:	c3                   	ret    
c001484d:	90                   	nop

c001484e <PhysicalDisk::~PhysicalDisk()>:
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	83 ec 0c             	sub    esp,0xc
c0014854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014858:	e8 cd ff ff ff       	call   c001482a <PhysicalDisk::~PhysicalDisk()>
c001485d:	83 c4 10             	add    esp,0x10
c0014860:	83 ec 08             	sub    esp,0x8
c0014863:	68 6c 01 00 00       	push   0x16c
c0014868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001486c:	e8 ff e5 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0014871:	83 c4 10             	add    esp,0x10
c0014874:	83 c4 0c             	add    esp,0xc
c0014877:	c3                   	ret    

c0014878 <FPU::FPU(char const*)>:
c0014878:	83 ec 0c             	sub    esp,0xc
c001487b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487f:	83 ec 08             	sub    esp,0x8
c0014882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014886:	50                   	push   eax
c0014887:	e8 da fc ff ff       	call   c0014566 <Device::Device(char const*)>
c001488c:	83 c4 10             	add    esp,0x10
c001488f:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c0014894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014898:	89 10                	mov    DWORD PTR [eax],edx
c001489a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148a8:	90                   	nop
c00148a9:	83 c4 0c             	add    esp,0xc
c00148ac:	c3                   	ret    
c00148ad:	90                   	nop

c00148ae <FPU::~FPU()>:
c00148ae:	83 ec 0c             	sub    esp,0xc
c00148b1:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c00148b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ba:	89 10                	mov    DWORD PTR [eax],edx
c00148bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c0:	83 ec 0c             	sub    esp,0xc
c00148c3:	50                   	push   eax
c00148c4:	e8 7f f9 ff ff       	call   c0014248 <Device::~Device()>
c00148c9:	83 c4 10             	add    esp,0x10
c00148cc:	90                   	nop
c00148cd:	83 c4 0c             	add    esp,0xc
c00148d0:	c3                   	ret    
c00148d1:	90                   	nop

c00148d2 <FPU::~FPU()>:
c00148d2:	83 ec 0c             	sub    esp,0xc
c00148d5:	83 ec 0c             	sub    esp,0xc
c00148d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148dc:	e8 cd ff ff ff       	call   c00148ae <FPU::~FPU()>
c00148e1:	83 c4 10             	add    esp,0x10
c00148e4:	83 ec 08             	sub    esp,0x8
c00148e7:	68 58 01 00 00       	push   0x158
c00148ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148f0:	e8 7b e5 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00148f5:	83 c4 10             	add    esp,0x10
c00148f8:	83 c4 0c             	add    esp,0xc
c00148fb:	c3                   	ret    

c00148fc <setupFPU()>:
c00148fc:	53                   	push   ebx
c00148fd:	83 ec 08             	sub    esp,0x8
c0014900:	8b 15 a8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a8
c0014906:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001490d:	74 19                	je     c0014928 <setupFPU()+0x2c>
c001490f:	83 ec 0c             	sub    esp,0xc
c0014912:	68 58 01 00 00       	push   0x158
c0014917:	e8 24 af ff ff       	call   c000f840 <malloc>
c001491c:	89 c3                	mov    ebx,eax
c001491e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014921:	e8 0c 0c 01 00       	call   c0025532 <AVX::AVX()>
c0014926:	eb 5b                	jmp    c0014983 <setupFPU()+0x87>
c0014928:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001492e:	84 c0                	test   al,al
c0014930:	79 19                	jns    c001494b <setupFPU()+0x4f>
c0014932:	83 ec 0c             	sub    esp,0xc
c0014935:	68 58 01 00 00       	push   0x158
c001493a:	e8 01 af ff ff       	call   c000f840 <malloc>
c001493f:	89 c3                	mov    ebx,eax
c0014941:	89 04 24             	mov    DWORD PTR [esp],eax
c0014944:	e8 0f 0d 01 00       	call   c0025658 <SSE::SSE()>
c0014949:	eb 38                	jmp    c0014983 <setupFPU()+0x87>
c001494b:	a8 20                	test   al,0x20
c001494d:	74 19                	je     c0014968 <setupFPU()+0x6c>
c001494f:	83 ec 0c             	sub    esp,0xc
c0014952:	68 58 01 00 00       	push   0x158
c0014957:	e8 e4 ae ff ff       	call   c000f840 <malloc>
c001495c:	89 c3                	mov    ebx,eax
c001495e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014961:	e8 5c 0c 01 00       	call   c00255c2 <MMX::MMX()>
c0014966:	eb 1b                	jmp    c0014983 <setupFPU()+0x87>
c0014968:	a8 10                	test   al,0x10
c001496a:	74 1c                	je     c0014988 <setupFPU()+0x8c>
c001496c:	83 ec 0c             	sub    esp,0xc
c001496f:	68 58 01 00 00       	push   0x158
c0014974:	e8 c7 ae ff ff       	call   c000f840 <malloc>
c0014979:	89 c3                	mov    ebx,eax
c001497b:	89 04 24             	mov    DWORD PTR [esp],eax
c001497e:	e8 63 0d 01 00       	call   c00256e6 <x87::x87()>
c0014983:	83 c4 10             	add    esp,0x10
c0014986:	eb 24                	jmp    c00149ac <setupFPU()+0xb0>
c0014988:	83 e0 ef             	and    eax,0xffffffef
c001498b:	83 ec 0c             	sub    esp,0xc
c001498e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014994:	68 f4 ac 02 c0       	push   0xc002acf4
c0014999:	e8 b2 e5 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001499e:	0f 20 c0             	mov    eax,cr0
c00149a1:	83 c8 04             	or     eax,0x4
c00149a4:	0f 22 c0             	mov    cr0,eax
c00149a7:	31 db                	xor    ebx,ebx
c00149a9:	83 c4 10             	add    esp,0x10
c00149ac:	89 d8                	mov    eax,ebx
c00149ae:	83 c4 08             	add    esp,0x8
c00149b1:	5b                   	pop    ebx
c00149b2:	c3                   	ret    
c00149b3:	90                   	nop

c00149b4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149bc:	c1 e0 04             	shl    eax,0x4
c00149bf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149c3:	8d 50 10             	lea    edx,[eax+0x10]
c00149c6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149cc:	74 08                	je     c00149d6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149ce:	83 c0 04             	add    eax,0x4
c00149d1:	39 d0                	cmp    eax,edx
c00149d3:	75 f1                	jne    c00149c6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149d5:	c3                   	ret    
c00149d6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149e0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149ea:	eb e2                	jmp    c00149ce <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149ec <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149ec:	57                   	push   edi
c00149ed:	31 c0                	xor    eax,eax
c00149ef:	56                   	push   esi
c00149f0:	53                   	push   ebx
c00149f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149fd:	89 da                	mov    edx,ebx
c00149ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a03:	c1 e2 04             	shl    edx,0x4
c0014a06:	01 ca                	add    edx,ecx
c0014a08:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a10:	74 16                	je     c0014a28 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a12:	40                   	inc    eax
c0014a13:	83 f8 04             	cmp    eax,0x4
c0014a16:	75 f0                	jne    c0014a08 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a18:	c7 44 24 10 38 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad38
c0014a20:	5b                   	pop    ebx
c0014a21:	5e                   	pop    esi
c0014a22:	5f                   	pop    edi
c0014a23:	e9 c9 5b 00 00       	jmp    c001a5f1 <Krnl::panic(char const*)>
c0014a28:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a2b:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a2e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a34:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a3a:	5b                   	pop    ebx
c0014a3b:	5e                   	pop    esi
c0014a3c:	5f                   	pop    edi
c0014a3d:	c3                   	ret    

c0014a3e <doubleFault(regs*, void*)>:
c0014a3e:	55                   	push   ebp
c0014a3f:	89 e5                	mov    ebp,esp
c0014a41:	83 ec 08             	sub    esp,0x8
c0014a44:	83 ec 0c             	sub    esp,0xc
c0014a47:	68 73 ad 02 c0       	push   0xc002ad73
c0014a4c:	e8 a0 5b 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0014a51:	83 c4 10             	add    esp,0x10
c0014a54:	90                   	nop
c0014a55:	c9                   	leave  
c0014a56:	c3                   	ret    
c0014a57:	90                   	nop

c0014a58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a58:	56                   	push   esi
c0014a59:	53                   	push   ebx
c0014a5a:	50                   	push   eax
c0014a5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a63:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a68:	75 35                	jne    c0014a9f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a6a:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a6d:	31 d2                	xor    edx,edx
c0014a6f:	89 c1                	mov    ecx,eax
c0014a71:	c1 e1 04             	shl    ecx,0x4
c0014a74:	01 f1                	add    ecx,esi
c0014a76:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a7e:	74 3e                	je     c0014abe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a80:	42                   	inc    edx
c0014a81:	83 fa 04             	cmp    edx,0x4
c0014a84:	75 f0                	jne    c0014a76 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a86:	83 ec 0c             	sub    esp,0xc
c0014a89:	68 b8 ad 02 c0       	push   0xc002adb8
c0014a8e:	e8 5e 5b 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0014a93:	83 c4 10             	add    esp,0x10
c0014a96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a9b:	5a                   	pop    edx
c0014a9c:	5b                   	pop    ebx
c0014a9d:	5e                   	pop    esi
c0014a9e:	c3                   	ret    
c0014a9f:	83 ec 0c             	sub    esp,0xc
c0014aa2:	56                   	push   esi
c0014aa3:	e8 ba fb ff ff       	call   c0014662 <Device::getName()>
c0014aa8:	83 c4 10             	add    esp,0x10
c0014aab:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014aae:	75 ba                	jne    c0014a6a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ab0:	83 fb 0f             	cmp    ebx,0xf
c0014ab3:	7f 29                	jg     c0014ade <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014ab5:	0f b6 9b 00 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2a00]
c0014abc:	eb ac                	jmp    c0014a6a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014abe:	8d 04 82             	lea    eax,[edx+eax*4]
c0014ac1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ac5:	8d 04 86             	lea    eax,[esi+eax*4]
c0014ac8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014ace:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ad2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014ad8:	89 d8                	mov    eax,ebx
c0014ada:	5a                   	pop    edx
c0014adb:	5b                   	pop    ebx
c0014adc:	5e                   	pop    esi
c0014add:	c3                   	ret    
c0014ade:	83 ec 0c             	sub    esp,0xc
c0014ae1:	68 80 ad 02 c0       	push   0xc002ad80
c0014ae6:	e8 06 5b 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0014aeb:	83 c4 10             	add    esp,0x10
c0014aee:	e9 77 ff ff ff       	jmp    c0014a6a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014af3:	90                   	nop

c0014af4 <InterruptController::clearAllHandlers(int, bool)>:
c0014af4:	56                   	push   esi
c0014af5:	53                   	push   ebx
c0014af6:	52                   	push   edx
c0014af7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014afb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014aff:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b04:	75 61                	jne    c0014b67 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b06:	8d 46 20             	lea    eax,[esi+0x20]
c0014b09:	c1 e6 04             	shl    esi,0x4
c0014b0c:	c1 e0 04             	shl    eax,0x4
c0014b0f:	01 de                	add    esi,ebx
c0014b11:	01 d8                	add    eax,ebx
c0014b13:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b1d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b27:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b31:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b3b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b45:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b4f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b59:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b63:	58                   	pop    eax
c0014b64:	5b                   	pop    ebx
c0014b65:	5e                   	pop    esi
c0014b66:	c3                   	ret    
c0014b67:	83 ec 0c             	sub    esp,0xc
c0014b6a:	53                   	push   ebx
c0014b6b:	e8 f2 fa ff ff       	call   c0014662 <Device::getName()>
c0014b70:	83 c4 10             	add    esp,0x10
c0014b73:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b76:	75 8e                	jne    c0014b06 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b78:	83 fe 0f             	cmp    esi,0xf
c0014b7b:	7f 09                	jg     c0014b86 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b7d:	0f b6 b6 00 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2a00]
c0014b84:	eb 80                	jmp    c0014b06 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b86:	83 ec 0c             	sub    esp,0xc
c0014b89:	68 f4 ad 02 c0       	push   0xc002adf4
c0014b8e:	e8 5e 5a 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0014b93:	83 c4 10             	add    esp,0x10
c0014b96:	e9 6b ff ff ff       	jmp    c0014b06 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b9b:	90                   	nop

c0014b9c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b9c:	56                   	push   esi
c0014b9d:	53                   	push   ebx
c0014b9e:	52                   	push   edx
c0014b9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ba3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ba7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bac:	75 3a                	jne    c0014be8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bb2:	8d 50 20             	lea    edx,[eax+0x20]
c0014bb5:	c1 e2 04             	shl    edx,0x4
c0014bb8:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bbb:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014bbf:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014bc5:	74 0b                	je     c0014bd2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014bc7:	83 c0 04             	add    eax,0x4
c0014bca:	39 d0                	cmp    eax,edx
c0014bcc:	75 f1                	jne    c0014bbf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bce:	58                   	pop    eax
c0014bcf:	5b                   	pop    ebx
c0014bd0:	5e                   	pop    esi
c0014bd1:	c3                   	ret    
c0014bd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bdc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014be6:	eb df                	jmp    c0014bc7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014be8:	83 ec 0c             	sub    esp,0xc
c0014beb:	56                   	push   esi
c0014bec:	e8 71 fa ff ff       	call   c0014662 <Device::getName()>
c0014bf1:	83 c4 10             	add    esp,0x10
c0014bf4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bf7:	75 b5                	jne    c0014bae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bf9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bfe:	7f 11                	jg     c0014c11 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c04:	0f b6 80 00 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2a00]
c0014c0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c0f:	eb 9d                	jmp    c0014bae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c11:	83 ec 0c             	sub    esp,0xc
c0014c14:	68 f4 ad 02 c0       	push   0xc002adf4
c0014c19:	e8 d3 59 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	eb 8b                	jmp    c0014bae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c23 <nmiHandler(regs*, void*)>:
c0014c23:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0014c28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c2c:	e9 5b a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c31 <int_handler>:
c0014c31:	55                   	push   ebp
c0014c32:	57                   	push   edi
c0014c33:	56                   	push   esi
c0014c34:	53                   	push   ebx
c0014c35:	83 ec 0c             	sub    esp,0xc
c0014c38:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c3c:	80 3d 24 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f24,0x0
c0014c43:	74 0b                	je     c0014c50 <int_handler+0x1f>
c0014c45:	fa                   	cli    
c0014c46:	f4                   	hlt    
c0014c47:	80 3d 24 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f24,0x0
c0014c4e:	75 f5                	jne    c0014c45 <int_handler+0x14>
c0014c50:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0014c55:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c58:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c5e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c64:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c67:	83 f8 17             	cmp    eax,0x17
c0014c6a:	77 13                	ja     c0014c7f <int_handler+0x4e>
c0014c6c:	83 ec 08             	sub    esp,0x8
c0014c6f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c71:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c74:	0f b6 c0             	movzx  eax,al
c0014c77:	50                   	push   eax
c0014c78:	57                   	push   edi
c0014c79:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c7c:	83 c4 10             	add    esp,0x10
c0014c7f:	83 c3 15             	add    ebx,0x15
c0014c82:	c1 e3 04             	shl    ebx,0x4
c0014c85:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c89:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c90:	31 db                	xor    ebx,ebx
c0014c92:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c96:	85 c0                	test   eax,eax
c0014c98:	74 13                	je     c0014cad <int_handler+0x7c>
c0014c9a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c9d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014ca1:	74 1c                	je     c0014cbf <int_handler+0x8e>
c0014ca3:	83 ec 08             	sub    esp,0x8
c0014ca6:	52                   	push   edx
c0014ca7:	56                   	push   esi
c0014ca8:	ff d0                	call   eax
c0014caa:	83 c4 10             	add    esp,0x10
c0014cad:	43                   	inc    ebx
c0014cae:	83 fb 04             	cmp    ebx,0x4
c0014cb1:	75 df                	jne    c0014c92 <int_handler+0x61>
c0014cb3:	83 c4 0c             	add    esp,0xc
c0014cb6:	31 c0                	xor    eax,eax
c0014cb8:	5b                   	pop    ebx
c0014cb9:	31 d2                	xor    edx,edx
c0014cbb:	5e                   	pop    esi
c0014cbc:	5f                   	pop    edi
c0014cbd:	5d                   	pop    ebp
c0014cbe:	c3                   	ret    
c0014cbf:	83 ec 08             	sub    esp,0x8
c0014cc2:	52                   	push   edx
c0014cc3:	56                   	push   esi
c0014cc4:	ff d0                	call   eax
c0014cc6:	83 c4 10             	add    esp,0x10
c0014cc9:	83 c4 0c             	add    esp,0xc
c0014ccc:	5b                   	pop    ebx
c0014ccd:	5e                   	pop    esi
c0014cce:	5f                   	pop    edi
c0014ccf:	5d                   	pop    ebp
c0014cd0:	c3                   	ret    
c0014cd1:	90                   	nop

c0014cd2 <InterruptController::InterruptController(char const*)>:
c0014cd2:	83 ec 1c             	sub    esp,0x1c
c0014cd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd9:	83 ec 08             	sub    esp,0x8
c0014cdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ce0:	50                   	push   eax
c0014ce1:	e8 80 f8 ff ff       	call   c0014566 <Device::Device(char const*)>
c0014ce6:	83 c4 10             	add    esp,0x10
c0014ce9:	ba 90 b0 02 c0       	mov    edx,0xc002b090
c0014cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf2:	89 10                	mov    DWORD PTR [eax],edx
c0014cf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d0a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d12:	7f 5e                	jg     c0014d72 <InterruptController::InterruptController(char const*)+0xa0>
c0014d14:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d1c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d21:	7f 49                	jg     c0014d6c <InterruptController::InterruptController(char const*)+0x9a>
c0014d23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d2b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d36:	01 ca                	add    edx,ecx
c0014d38:	83 c2 54             	add    edx,0x54
c0014d3b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d4b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d56:	01 ca                	add    edx,ecx
c0014d58:	81 c2 54 04 00 00    	add    edx,0x454
c0014d5e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d66:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d6a:	eb b0                	jmp    c0014d1c <InterruptController::InterruptController(char const*)+0x4a>
c0014d6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d70:	eb 98                	jmp    c0014d0a <InterruptController::InterruptController(char const*)+0x38>
c0014d72:	90                   	nop
c0014d73:	83 c4 1c             	add    esp,0x1c
c0014d76:	c3                   	ret    
c0014d77:	90                   	nop

c0014d78 <InterruptController::~InterruptController()>:
c0014d78:	83 ec 0c             	sub    esp,0xc
c0014d7b:	ba 90 b0 02 c0       	mov    edx,0xc002b090
c0014d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d84:	89 10                	mov    DWORD PTR [eax],edx
c0014d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d8a:	83 ec 0c             	sub    esp,0xc
c0014d8d:	50                   	push   eax
c0014d8e:	e8 b5 f4 ff ff       	call   c0014248 <Device::~Device()>
c0014d93:	83 c4 10             	add    esp,0x10
c0014d96:	90                   	nop
c0014d97:	83 c4 0c             	add    esp,0xc
c0014d9a:	c3                   	ret    
c0014d9b:	90                   	nop

c0014d9c <InterruptController::~InterruptController()>:
c0014d9c:	83 ec 0c             	sub    esp,0xc
c0014d9f:	83 ec 0c             	sub    esp,0xc
c0014da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014da6:	e8 cd ff ff ff       	call   c0014d78 <InterruptController::~InterruptController()>
c0014dab:	83 c4 10             	add    esp,0x10
c0014dae:	83 ec 08             	sub    esp,0x8
c0014db1:	68 58 21 00 00       	push   0x2158
c0014db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dba:	e8 b1 e0 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0014dbf:	83 c4 10             	add    esp,0x10
c0014dc2:	83 c4 0c             	add    esp,0xc
c0014dc5:	c3                   	ret    

c0014dc6 <displayDebugInfo(regs*)>:
c0014dc6:	55                   	push   ebp
c0014dc7:	57                   	push   edi
c0014dc8:	56                   	push   esi
c0014dc9:	53                   	push   ebx
c0014dca:	83 ec 24             	sub    esp,0x24
c0014dcd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014dd1:	0f 20 c2             	mov    edx,cr0
c0014dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014dd8:	0f 20 d7             	mov    edi,cr2
c0014ddb:	0f 20 de             	mov    esi,cr3
c0014dde:	0f 20 e5             	mov    ebp,cr4
c0014de1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014de4:	68 2e ae 02 c0       	push   0xc002ae2e
c0014de9:	e8 62 e1 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014dee:	59                   	pop    ecx
c0014def:	58                   	pop    eax
c0014df0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014df3:	68 39 ae 02 c0       	push   0xc002ae39
c0014df8:	e8 53 e1 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014dfd:	58                   	pop    eax
c0014dfe:	5a                   	pop    edx
c0014dff:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e02:	68 44 ae 02 c0       	push   0xc002ae44
c0014e07:	e8 44 e1 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e0c:	59                   	pop    ecx
c0014e0d:	58                   	pop    eax
c0014e0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e11:	68 4f ae 02 c0       	push   0xc002ae4f
c0014e16:	e8 35 e1 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e1b:	58                   	pop    eax
c0014e1c:	5a                   	pop    edx
c0014e1d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e20:	68 5a ae 02 c0       	push   0xc002ae5a
c0014e25:	e8 26 e1 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e2a:	59                   	pop    ecx
c0014e2b:	58                   	pop    eax
c0014e2c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e2f:	68 65 ae 02 c0       	push   0xc002ae65
c0014e34:	e8 17 e1 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e39:	58                   	pop    eax
c0014e3a:	5a                   	pop    edx
c0014e3b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e3e:	68 70 ae 02 c0       	push   0xc002ae70
c0014e43:	e8 08 e1 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e48:	59                   	pop    ecx
c0014e49:	58                   	pop    eax
c0014e4a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e4d:	68 7b ae 02 c0       	push   0xc002ae7b
c0014e52:	e8 f9 e0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e57:	58                   	pop    eax
c0014e58:	5a                   	pop    edx
c0014e59:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e5c:	68 86 ae 02 c0       	push   0xc002ae86
c0014e61:	e8 ea e0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e66:	59                   	pop    ecx
c0014e67:	58                   	pop    eax
c0014e68:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e6b:	68 95 ae 02 c0       	push   0xc002ae95
c0014e70:	e8 db e0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e75:	58                   	pop    eax
c0014e76:	5a                   	pop    edx
c0014e77:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e7a:	68 a0 ae 02 c0       	push   0xc002aea0
c0014e7f:	e8 cc e0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e84:	59                   	pop    ecx
c0014e85:	58                   	pop    eax
c0014e86:	57                   	push   edi
c0014e87:	68 ab ae 02 c0       	push   0xc002aeab
c0014e8c:	e8 bf e0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e91:	58                   	pop    eax
c0014e92:	5a                   	pop    edx
c0014e93:	56                   	push   esi
c0014e94:	68 b6 ae 02 c0       	push   0xc002aeb6
c0014e99:	e8 b2 e0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0014e9e:	59                   	pop    ecx
c0014e9f:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014ea4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eaa:	e8 a4 be ff ff       	call   c0010d53 <setActiveTerminal(VgaText*)>
c0014eaf:	58                   	pop    eax
c0014eb0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014eb3:	5a                   	pop    edx
c0014eb4:	c1 e0 05             	shl    eax,0x5
c0014eb7:	05 60 d3 02 c0       	add    eax,0xc002d360
c0014ebc:	50                   	push   eax
c0014ebd:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014ec2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec8:	e8 a5 c2 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014ecd:	59                   	pop    ecx
c0014ece:	58                   	pop    eax
c0014ecf:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014ed4:	68 c1 ae 02 c0       	push   0xc002aec1
c0014ed9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014edf:	e8 8e c2 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014ee4:	58                   	pop    eax
c0014ee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eea:	5a                   	pop    edx
c0014eeb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eee:	83 c0 0c             	add    eax,0xc
c0014ef1:	50                   	push   eax
c0014ef2:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014ef7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efd:	e8 70 c2 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014f02:	59                   	pop    ecx
c0014f03:	58                   	pop    eax
c0014f04:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014f09:	68 ca ae 02 c0       	push   0xc002aeca
c0014f0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f14:	e8 59 c2 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014f19:	58                   	pop    eax
c0014f1a:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014f1f:	5a                   	pop    edx
c0014f20:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f29:	e8 6a c2 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0014f2e:	59                   	pop    ecx
c0014f2f:	58                   	pop    eax
c0014f30:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014f35:	68 d2 ae 02 c0       	push   0xc002aed2
c0014f3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f40:	e8 2d c2 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014f45:	58                   	pop    eax
c0014f46:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014f4b:	5a                   	pop    edx
c0014f4c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f55:	e8 3e c2 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0014f5a:	59                   	pop    ecx
c0014f5b:	58                   	pop    eax
c0014f5c:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014f61:	68 da ae 02 c0       	push   0xc002aeda
c0014f66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6c:	e8 01 c2 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014f71:	58                   	pop    eax
c0014f72:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014f77:	5a                   	pop    edx
c0014f78:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f81:	e8 12 c2 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0014f86:	59                   	pop    ecx
c0014f87:	58                   	pop    eax
c0014f88:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014f8d:	68 e2 ae 02 c0       	push   0xc002aee2
c0014f92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f98:	e8 d5 c1 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014f9d:	58                   	pop    eax
c0014f9e:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014fa3:	5a                   	pop    edx
c0014fa4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fad:	e8 e6 c1 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0014fb2:	59                   	pop    ecx
c0014fb3:	58                   	pop    eax
c0014fb4:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014fb9:	68 ea ae 02 c0       	push   0xc002aeea
c0014fbe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc4:	e8 a9 c1 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014fc9:	58                   	pop    eax
c0014fca:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014fcf:	5a                   	pop    edx
c0014fd0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014fd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd9:	e8 ba c1 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0014fde:	59                   	pop    ecx
c0014fdf:	58                   	pop    eax
c0014fe0:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014fe5:	68 f2 ae 02 c0       	push   0xc002aef2
c0014fea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff0:	e8 7d c1 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0014ff5:	58                   	pop    eax
c0014ff6:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0014ffb:	5a                   	pop    edx
c0014ffc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015005:	e8 8e c1 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001500a:	59                   	pop    ecx
c001500b:	58                   	pop    eax
c001500c:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015011:	68 fa ae 02 c0       	push   0xc002aefa
c0015016:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501c:	e8 51 c1 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0015021:	58                   	pop    eax
c0015022:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015027:	5a                   	pop    edx
c0015028:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001502c:	52                   	push   edx
c001502d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015033:	e8 60 c1 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0015038:	59                   	pop    ecx
c0015039:	58                   	pop    eax
c001503a:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001503f:	68 03 af 02 c0       	push   0xc002af03
c0015044:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504a:	e8 23 c1 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001504f:	58                   	pop    eax
c0015050:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015055:	5a                   	pop    edx
c0015056:	57                   	push   edi
c0015057:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505d:	e8 36 c1 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0015062:	59                   	pop    ecx
c0015063:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015068:	5f                   	pop    edi
c0015069:	68 0b af 02 c0       	push   0xc002af0b
c001506e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015074:	e8 f9 c0 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0015079:	58                   	pop    eax
c001507a:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001507f:	5a                   	pop    edx
c0015080:	56                   	push   esi
c0015081:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015087:	e8 0c c1 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001508c:	59                   	pop    ecx
c001508d:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015092:	5e                   	pop    esi
c0015093:	68 13 af 02 c0       	push   0xc002af13
c0015098:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509e:	e8 cf c0 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c00150a3:	5f                   	pop    edi
c00150a4:	58                   	pop    eax
c00150a5:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c00150aa:	55                   	push   ebp
c00150ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b1:	e8 e2 c0 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c00150b6:	58                   	pop    eax
c00150b7:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c00150bc:	5a                   	pop    edx
c00150bd:	68 1b af 02 c0       	push   0xc002af1b
c00150c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c8:	e8 a5 c0 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c00150cd:	0f 21 c0             	mov    eax,db0
c00150d0:	59                   	pop    ecx
c00150d1:	5e                   	pop    esi
c00150d2:	50                   	push   eax
c00150d3:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c00150d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150de:	e8 b5 c0 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c00150e3:	5f                   	pop    edi
c00150e4:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c00150e9:	5d                   	pop    ebp
c00150ea:	68 24 af 02 c0       	push   0xc002af24
c00150ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f5:	e8 78 c0 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c00150fa:	0f 21 c8             	mov    eax,db1
c00150fd:	5a                   	pop    edx
c00150fe:	59                   	pop    ecx
c00150ff:	50                   	push   eax
c0015100:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015105:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510b:	e8 88 c0 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0015110:	5e                   	pop    esi
c0015111:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015116:	5f                   	pop    edi
c0015117:	68 2c af 02 c0       	push   0xc002af2c
c001511c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015122:	e8 4b c0 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0015127:	0f 21 d0             	mov    eax,db2
c001512a:	5d                   	pop    ebp
c001512b:	5a                   	pop    edx
c001512c:	50                   	push   eax
c001512d:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015132:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015138:	e8 5b c0 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001513d:	59                   	pop    ecx
c001513e:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015143:	5e                   	pop    esi
c0015144:	68 34 af 02 c0       	push   0xc002af34
c0015149:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001514f:	e8 1e c0 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0015154:	0f 21 d8             	mov    eax,db3
c0015157:	5f                   	pop    edi
c0015158:	5d                   	pop    ebp
c0015159:	50                   	push   eax
c001515a:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001515f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015165:	e8 2e c0 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001516a:	58                   	pop    eax
c001516b:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015170:	5a                   	pop    edx
c0015171:	68 3c af 02 c0       	push   0xc002af3c
c0015176:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517c:	e8 f1 bf ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0015181:	0f 21 f0             	mov    eax,db6
c0015184:	59                   	pop    ecx
c0015185:	5e                   	pop    esi
c0015186:	50                   	push   eax
c0015187:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001518c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015192:	e8 01 c0 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0015197:	5f                   	pop    edi
c0015198:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001519d:	5d                   	pop    ebp
c001519e:	68 44 af 02 c0       	push   0xc002af44
c00151a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a9:	e8 c4 bf ff ff       	call   c0011172 <VgaText::puts(char const*)>
c00151ae:	0f 21 f8             	mov    eax,db7
c00151b1:	5a                   	pop    edx
c00151b2:	59                   	pop    ecx
c00151b3:	50                   	push   eax
c00151b4:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c00151b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151bf:	e8 d4 bf ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c00151c4:	5e                   	pop    esi
c00151c5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151c8:	e8 06 85 00 00       	call   c001d6d3 <Thr::getDriverNameFromAddress(unsigned long)>
c00151cd:	83 c4 10             	add    esp,0x10
c00151d0:	85 c0                	test   eax,eax
c00151d2:	74 7d                	je     c0015251 <displayDebugInfo(regs*)+0x48b>
c00151d4:	89 c6                	mov    esi,eax
c00151d6:	50                   	push   eax
c00151d7:	50                   	push   eax
c00151d8:	56                   	push   esi
c00151d9:	68 4c af 02 c0       	push   0xc002af4c
c00151de:	e8 6d dd ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00151e3:	5a                   	pop    edx
c00151e4:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c00151e9:	59                   	pop    ecx
c00151ea:	68 5a af 02 c0       	push   0xc002af5a
c00151ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151f5:	e8 78 bf ff ff       	call   c0011172 <VgaText::puts(char const*)>
c00151fa:	5f                   	pop    edi
c00151fb:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015200:	5d                   	pop    ebp
c0015201:	56                   	push   esi
c0015202:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015208:	e8 65 bf ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001520d:	58                   	pop    eax
c001520e:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0015213:	5a                   	pop    edx
c0015214:	68 66 af 02 c0       	push   0xc002af66
c0015219:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001521f:	e8 4e bf ff ff       	call   c0011172 <VgaText::puts(char const*)>
c0015224:	59                   	pop    ecx
c0015225:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001522a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015230:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015233:	e8 d2 84 00 00       	call   c001d70a <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015238:	5b                   	pop    ebx
c0015239:	5d                   	pop    ebp
c001523a:	50                   	push   eax
c001523b:	57                   	push   edi
c001523c:	e8 57 bf ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c0015241:	58                   	pop    eax
c0015242:	5a                   	pop    edx
c0015243:	56                   	push   esi
c0015244:	68 72 af 02 c0       	push   0xc002af72
c0015249:	e8 02 dd ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001524e:	83 c4 10             	add    esp,0x10
c0015251:	fa                   	cli    
c0015252:	f4                   	hlt    
c0015253:	eb fe                	jmp    c0015253 <displayDebugInfo(regs*)+0x48d>

c0015255 <x87EmulHandler(regs*, void*)>:
c0015255:	53                   	push   ebx
c0015256:	83 ec 14             	sub    esp,0x14
c0015259:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001525d:	53                   	push   ebx
c001525e:	e8 fd a7 00 00       	call   c001fa60 <Vm::x87Handler(regs*)>
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	84 c0                	test   al,al
c0015268:	74 05                	je     c001526f <x87EmulHandler(regs*, void*)+0x1a>
c001526a:	83 c4 08             	add    esp,0x8
c001526d:	5b                   	pop    ebx
c001526e:	c3                   	ret    
c001526f:	83 ec 0c             	sub    esp,0xc
c0015272:	68 82 af 02 c0       	push   0xc002af82
c0015277:	e8 d4 dc ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001527c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001527f:	e8 42 fb ff ff       	call   c0014dc6 <displayDebugInfo(regs*)>

c0015284 <gpFault(regs*, void*)>:
c0015284:	53                   	push   ebx
c0015285:	83 ec 14             	sub    esp,0x14
c0015288:	c7 05 60 e5 02 c0 dd ed 01 c0 	mov    DWORD PTR ds:0xc002e560,0xc001eddd
c0015292:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015296:	53                   	push   ebx
c0015297:	e8 41 9b 00 00       	call   c001eddd <Vm::faultHandler(regs*)>
c001529c:	83 c4 10             	add    esp,0x10
c001529f:	84 c0                	test   al,al
c00152a1:	74 05                	je     c00152a8 <gpFault(regs*, void*)+0x24>
c00152a3:	83 c4 08             	add    esp,0x8
c00152a6:	5b                   	pop    ebx
c00152a7:	c3                   	ret    
c00152a8:	83 ec 0c             	sub    esp,0xc
c00152ab:	68 98 af 02 c0       	push   0xc002af98
c00152b0:	e8 9b dc ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00152b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152b8:	e8 09 fb ff ff       	call   c0014dc6 <displayDebugInfo(regs*)>

c00152bd <pgFault(regs*, void*)>:
c00152bd:	83 ec 14             	sub    esp,0x14
c00152c0:	0f 20 d0             	mov    eax,cr2
c00152c3:	50                   	push   eax
c00152c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152d2:	e8 07 d9 ff ff       	call   c0012bde <VAS::tryLoadBackOffDisk(unsigned long)>
c00152d7:	83 c4 10             	add    esp,0x10
c00152da:	84 c0                	test   al,al
c00152dc:	74 04                	je     c00152e2 <pgFault(regs*, void*)+0x25>
c00152de:	83 c4 0c             	add    esp,0xc
c00152e1:	c3                   	ret    
c00152e2:	83 ec 0c             	sub    esp,0xc
c00152e5:	68 b3 af 02 c0       	push   0xc002afb3
c00152ea:	e8 61 dc ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00152ef:	58                   	pop    eax
c00152f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152f4:	e8 cd fa ff ff       	call   c0014dc6 <displayDebugInfo(regs*)>

c00152f9 <otherISRHandler(regs*, void*)>:
c00152f9:	53                   	push   ebx
c00152fa:	83 ec 0c             	sub    esp,0xc
c00152fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015301:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015304:	50                   	push   eax
c0015305:	50                   	push   eax
c0015306:	68 c0 af 02 c0       	push   0xc002afc0
c001530b:	e8 40 dc ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0015310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015313:	e8 ae fa ff ff       	call   c0014dc6 <displayDebugInfo(regs*)>

c0015318 <opcodeFault(regs*, void*)>:
c0015318:	55                   	push   ebp
c0015319:	89 e5                	mov    ebp,esp
c001531b:	56                   	push   esi
c001531c:	53                   	push   ebx
c001531d:	83 ec 40             	sub    esp,0x40
c0015320:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0015325:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001532b:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015331:	84 c0                	test   al,al
c0015333:	74 24                	je     c0015359 <opcodeFault(regs*, void*)+0x41>
c0015335:	83 ec 0c             	sub    esp,0xc
c0015338:	68 e0 af 02 c0       	push   0xc002afe0
c001533d:	e8 0e dc ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0015342:	83 c4 10             	add    esp,0x10
c0015345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015348:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534b:	8d 50 19             	lea    edx,[eax+0x19]
c001534e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015351:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015354:	e9 be 05 00 00       	jmp    c0015917 <opcodeFault(regs*, void*)+0x5ff>
c0015359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015362:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015366:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001536a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015370:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015373:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015376:	8a 00                	mov    al,BYTE PTR [eax]
c0015378:	3c f0                	cmp    al,0xf0
c001537a:	75 17                	jne    c0015393 <opcodeFault(regs*, void*)+0x7b>
c001537c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015382:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015385:	8d 50 01             	lea    edx,[eax+0x1]
c0015388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001538e:	e9 da 00 00 00       	jmp    c001546d <opcodeFault(regs*, void*)+0x155>
c0015393:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015396:	8a 00                	mov    al,BYTE PTR [eax]
c0015398:	3c f2                	cmp    al,0xf2
c001539a:	74 09                	je     c00153a5 <opcodeFault(regs*, void*)+0x8d>
c001539c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539f:	8a 00                	mov    al,BYTE PTR [eax]
c00153a1:	3c f3                	cmp    al,0xf3
c00153a3:	75 1b                	jne    c00153c0 <opcodeFault(regs*, void*)+0xa8>
c00153a5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153a9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b2:	8d 50 01             	lea    edx,[eax+0x1]
c00153b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153bb:	e9 ad 00 00 00       	jmp    c001546d <opcodeFault(regs*, void*)+0x155>
c00153c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c3:	8a 00                	mov    al,BYTE PTR [eax]
c00153c5:	3c 66                	cmp    al,0x66
c00153c7:	75 1f                	jne    c00153e8 <opcodeFault(regs*, void*)+0xd0>
c00153c9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153cd:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153da:	8d 50 01             	lea    edx,[eax+0x1]
c00153dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e3:	e9 85 00 00 00       	jmp    c001546d <opcodeFault(regs*, void*)+0x155>
c00153e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153eb:	8a 00                	mov    al,BYTE PTR [eax]
c00153ed:	3c 67                	cmp    al,0x67
c00153ef:	75 18                	jne    c0015409 <opcodeFault(regs*, void*)+0xf1>
c00153f1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153f5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153fe:	8d 50 01             	lea    edx,[eax+0x1]
c0015401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015404:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015407:	eb 64                	jmp    c001546d <opcodeFault(regs*, void*)+0x155>
c0015409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540c:	8a 00                	mov    al,BYTE PTR [eax]
c001540e:	3c 2e                	cmp    al,0x2e
c0015410:	74 09                	je     c001541b <opcodeFault(regs*, void*)+0x103>
c0015412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015415:	8a 00                	mov    al,BYTE PTR [eax]
c0015417:	3c 3e                	cmp    al,0x3e
c0015419:	75 18                	jne    c0015433 <opcodeFault(regs*, void*)+0x11b>
c001541b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001541f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015425:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015428:	8d 50 01             	lea    edx,[eax+0x1]
c001542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015431:	eb 3a                	jmp    c001546d <opcodeFault(regs*, void*)+0x155>
c0015433:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015436:	8a 00                	mov    al,BYTE PTR [eax]
c0015438:	3c 36                	cmp    al,0x36
c001543a:	74 1b                	je     c0015457 <opcodeFault(regs*, void*)+0x13f>
c001543c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543f:	8a 00                	mov    al,BYTE PTR [eax]
c0015441:	3c 26                	cmp    al,0x26
c0015443:	74 12                	je     c0015457 <opcodeFault(regs*, void*)+0x13f>
c0015445:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015448:	8a 00                	mov    al,BYTE PTR [eax]
c001544a:	3c 64                	cmp    al,0x64
c001544c:	74 09                	je     c0015457 <opcodeFault(regs*, void*)+0x13f>
c001544e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015451:	8a 00                	mov    al,BYTE PTR [eax]
c0015453:	3c 65                	cmp    al,0x65
c0015455:	75 16                	jne    c001546d <opcodeFault(regs*, void*)+0x155>
c0015457:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001545b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001545e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015461:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015464:	8d 50 01             	lea    edx,[eax+0x1]
c0015467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001546d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015470:	8a 00                	mov    al,BYTE PTR [eax]
c0015472:	3c 0f                	cmp    al,0xf
c0015474:	0f 85 ad 00 00 00    	jne    c0015527 <opcodeFault(regs*, void*)+0x20f>
c001547a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547d:	40                   	inc    eax
c001547e:	8a 00                	mov    al,BYTE PTR [eax]
c0015480:	3c c2                	cmp    al,0xc2
c0015482:	74 0e                	je     c0015492 <opcodeFault(regs*, void*)+0x17a>
c0015484:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015487:	40                   	inc    eax
c0015488:	8a 00                	mov    al,BYTE PTR [eax]
c001548a:	3c c3                	cmp    al,0xc3
c001548c:	0f 85 95 00 00 00    	jne    c0015527 <opcodeFault(regs*, void*)+0x20f>
c0015492:	83 ec 0c             	sub    esp,0xc
c0015495:	68 03 b0 02 c0       	push   0xc002b003
c001549a:	e8 b1 da ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001549f:	83 c4 10             	add    esp,0x10
c00154a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a8:	8d 50 01             	lea    edx,[eax+0x1]
c00154ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b7:	8a 00                	mov    al,BYTE PTR [eax]
c00154b9:	8d 50 fe             	lea    edx,[eax-0x2]
c00154bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bf:	88 10                	mov    BYTE PTR [eax],dl
c00154c1:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154c4:	50                   	push   eax
c00154c5:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154c8:	50                   	push   eax
c00154c9:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154cc:	50                   	push   eax
c00154cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154d0:	e8 e3 47 00 00       	call   c0019cb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154d5:	83 c4 10             	add    esp,0x10
c00154d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154de:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154e1:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154e4:	01 d0                	add    eax,edx
c00154e6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ef:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154f2:	48                   	dec    eax
c00154f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f9:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154fc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015502:	83 ec 04             	sub    esp,0x4
c0015505:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015508:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001550b:	50                   	push   eax
c001550c:	e8 a3 ac fe ff       	call   c00001b4 <voodooXADD>
c0015511:	83 c4 10             	add    esp,0x10
c0015514:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015517:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001551a:	01 c2                	add    edx,eax
c001551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015522:	e9 f0 03 00 00       	jmp    c0015917 <opcodeFault(regs*, void*)+0x5ff>
c0015527:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552a:	8a 00                	mov    al,BYTE PTR [eax]
c001552c:	3c 0f                	cmp    al,0xf
c001552e:	0f 85 8b 01 00 00    	jne    c00156bf <opcodeFault(regs*, void*)+0x3a7>
c0015534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015537:	40                   	inc    eax
c0015538:	8a 00                	mov    al,BYTE PTR [eax]
c001553a:	3c c7                	cmp    al,0xc7
c001553c:	0f 86 7d 01 00 00    	jbe    c00156bf <opcodeFault(regs*, void*)+0x3a7>
c0015542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015545:	40                   	inc    eax
c0015546:	8a 00                	mov    al,BYTE PTR [eax]
c0015548:	3c cf                	cmp    al,0xcf
c001554a:	0f 87 6f 01 00 00    	ja     c00156bf <opcodeFault(regs*, void*)+0x3a7>
c0015550:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015553:	40                   	inc    eax
c0015554:	8a 00                	mov    al,BYTE PTR [eax]
c0015556:	83 c0 38             	add    eax,0x38
c0015559:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001555c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015560:	75 0b                	jne    c001556d <opcodeFault(regs*, void*)+0x255>
c0015562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015565:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015568:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556b:	eb 75                	jmp    c00155e2 <opcodeFault(regs*, void*)+0x2ca>
c001556d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015571:	75 0b                	jne    c001557e <opcodeFault(regs*, void*)+0x266>
c0015573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015576:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015579:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557c:	eb 64                	jmp    c00155e2 <opcodeFault(regs*, void*)+0x2ca>
c001557e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015582:	75 0b                	jne    c001558f <opcodeFault(regs*, void*)+0x277>
c0015584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015587:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001558a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558d:	eb 53                	jmp    c00155e2 <opcodeFault(regs*, void*)+0x2ca>
c001558f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015593:	75 0b                	jne    c00155a0 <opcodeFault(regs*, void*)+0x288>
c0015595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015598:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001559b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559e:	eb 42                	jmp    c00155e2 <opcodeFault(regs*, void*)+0x2ca>
c00155a0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155a4:	75 0b                	jne    c00155b1 <opcodeFault(regs*, void*)+0x299>
c00155a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155ac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155af:	eb 31                	jmp    c00155e2 <opcodeFault(regs*, void*)+0x2ca>
c00155b1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155b5:	75 0b                	jne    c00155c2 <opcodeFault(regs*, void*)+0x2aa>
c00155b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ba:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c0:	eb 20                	jmp    c00155e2 <opcodeFault(regs*, void*)+0x2ca>
c00155c2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155c6:	75 0b                	jne    c00155d3 <opcodeFault(regs*, void*)+0x2bb>
c00155c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d1:	eb 0f                	jmp    c00155e2 <opcodeFault(regs*, void*)+0x2ca>
c00155d3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155d7:	75 09                	jne    c00155e2 <opcodeFault(regs*, void*)+0x2ca>
c00155d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e2:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155e6:	74 10                	je     c00155f8 <opcodeFault(regs*, void*)+0x2e0>
c00155e8:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155ef:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155f6:	eb 2d                	jmp    c0015625 <opcodeFault(regs*, void*)+0x30d>
c00155f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155fb:	c1 e0 18             	shl    eax,0x18
c00155fe:	89 c2                	mov    edx,eax
c0015600:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015603:	c1 e0 08             	shl    eax,0x8
c0015606:	25 00 00 ff 00       	and    eax,0xff0000
c001560b:	09 c2                	or     edx,eax
c001560d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015610:	c1 e8 08             	shr    eax,0x8
c0015613:	25 00 ff 00 00       	and    eax,0xff00
c0015618:	09 c2                	or     edx,eax
c001561a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001561d:	c1 e8 18             	shr    eax,0x18
c0015620:	09 d0                	or     eax,edx
c0015622:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015625:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015629:	75 0b                	jne    c0015636 <opcodeFault(regs*, void*)+0x31e>
c001562b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015631:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015634:	eb 75                	jmp    c00156ab <opcodeFault(regs*, void*)+0x393>
c0015636:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001563a:	75 0b                	jne    c0015647 <opcodeFault(regs*, void*)+0x32f>
c001563c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015642:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015645:	eb 64                	jmp    c00156ab <opcodeFault(regs*, void*)+0x393>
c0015647:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001564b:	75 0b                	jne    c0015658 <opcodeFault(regs*, void*)+0x340>
c001564d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015650:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015653:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015656:	eb 53                	jmp    c00156ab <opcodeFault(regs*, void*)+0x393>
c0015658:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001565c:	75 0b                	jne    c0015669 <opcodeFault(regs*, void*)+0x351>
c001565e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015661:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015664:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015667:	eb 42                	jmp    c00156ab <opcodeFault(regs*, void*)+0x393>
c0015669:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001566d:	75 0b                	jne    c001567a <opcodeFault(regs*, void*)+0x362>
c001566f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015672:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015675:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015678:	eb 31                	jmp    c00156ab <opcodeFault(regs*, void*)+0x393>
c001567a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001567e:	75 0b                	jne    c001568b <opcodeFault(regs*, void*)+0x373>
c0015680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015683:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015686:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015689:	eb 20                	jmp    c00156ab <opcodeFault(regs*, void*)+0x393>
c001568b:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001568f:	75 0b                	jne    c001569c <opcodeFault(regs*, void*)+0x384>
c0015691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015694:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015697:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001569a:	eb 0f                	jmp    c00156ab <opcodeFault(regs*, void*)+0x393>
c001569c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156a0:	75 09                	jne    c00156ab <opcodeFault(regs*, void*)+0x393>
c00156a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156b1:	8d 50 02             	lea    edx,[eax+0x2]
c00156b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ba:	e9 58 02 00 00       	jmp    c0015917 <opcodeFault(regs*, void*)+0x5ff>
c00156bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c2:	8a 00                	mov    al,BYTE PTR [eax]
c00156c4:	3c 0f                	cmp    al,0xf
c00156c6:	0f 85 76 01 00 00    	jne    c0015842 <opcodeFault(regs*, void*)+0x52a>
c00156cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156cf:	40                   	inc    eax
c00156d0:	8a 00                	mov    al,BYTE PTR [eax]
c00156d2:	3c c7                	cmp    al,0xc7
c00156d4:	0f 85 68 01 00 00    	jne    c0015842 <opcodeFault(regs*, void*)+0x52a>
c00156da:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156e3:	8d 50 01             	lea    edx,[eax+0x1]
c00156e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ec:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156ef:	50                   	push   eax
c00156f0:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156f3:	50                   	push   eax
c00156f4:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156f7:	50                   	push   eax
c00156f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156fb:	e8 b8 45 00 00       	call   c0019cb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015706:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015709:	83 f0 01             	xor    eax,0x1
c001570c:	84 c0                	test   al,al
c001570e:	0f 84 2e 01 00 00    	je     c0015842 <opcodeFault(regs*, void*)+0x52a>
c0015714:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015717:	3c 01                	cmp    al,0x1
c0015719:	0f 85 23 01 00 00    	jne    c0015842 <opcodeFault(regs*, void*)+0x52a>
c001571f:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015722:	83 f0 01             	xor    eax,0x1
c0015725:	84 c0                	test   al,al
c0015727:	0f 84 15 01 00 00    	je     c0015842 <opcodeFault(regs*, void*)+0x52a>
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015733:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015736:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001573d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015740:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015743:	89 c2                	mov    edx,eax
c0015745:	b8 00 00 00 00       	mov    eax,0x0
c001574a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001574d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015753:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015756:	ba 00 00 00 00       	mov    edx,0x0
c001575b:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001575e:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015764:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015767:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001576a:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015771:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015774:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015777:	89 c2                	mov    edx,eax
c0015779:	b8 00 00 00 00       	mov    eax,0x0
c001577e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015781:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015787:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001578a:	ba 00 00 00 00       	mov    edx,0x0
c001578f:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015792:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015795:	e8 32 86 00 00       	call   c001ddcc <lockScheduler()>
c001579a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001579d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a2:	89 c1                	mov    ecx,eax
c00157a4:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157a7:	89 cb                	mov    ebx,ecx
c00157a9:	89 d0                	mov    eax,edx
c00157ab:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157ae:	89 c6                	mov    esi,eax
c00157b0:	89 f0                	mov    eax,esi
c00157b2:	09 d8                	or     eax,ebx
c00157b4:	85 c0                	test   eax,eax
c00157b6:	75 21                	jne    c00157d9 <opcodeFault(regs*, void*)+0x4c1>
c00157b8:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157bb:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157be:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157c1:	89 01                	mov    DWORD PTR [ecx],eax
c00157c3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157cc:	83 c8 40             	or     eax,0x40
c00157cf:	89 c2                	mov    edx,eax
c00157d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157d7:	eb 3e                	jmp    c0015817 <opcodeFault(regs*, void*)+0x4ff>
c00157d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157df:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157e4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157e7:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ed:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157f0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157f3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157f6:	89 d0                	mov    eax,edx
c00157f8:	31 d2                	xor    edx,edx
c00157fa:	89 c3                	mov    ebx,eax
c00157fc:	89 d6                	mov    esi,edx
c00157fe:	89 da                	mov    edx,ebx
c0015800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015803:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015809:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001580c:	83 e0 bf             	and    eax,0xffffffbf
c001580f:	89 c2                	mov    edx,eax
c0015811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015814:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015817:	e8 b2 85 00 00       	call   c001ddce <unlockScheduler()>
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015822:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015825:	01 c2                	add    edx,eax
c0015827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001582d:	83 ec 0c             	sub    esp,0xc
c0015830:	68 12 b0 02 c0       	push   0xc002b012
c0015835:	e8 16 d7 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001583a:	83 c4 10             	add    esp,0x10
c001583d:	e9 d5 00 00 00       	jmp    c0015917 <opcodeFault(regs*, void*)+0x5ff>
c0015842:	83 ec 0c             	sub    esp,0xc
c0015845:	68 25 b0 02 c0       	push   0xc002b025
c001584a:	e8 01 d7 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015855:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001585e:	c1 e0 04             	shl    eax,0x4
c0015861:	01 d0                	add    eax,edx
c0015863:	83 c0 03             	add    eax,0x3
c0015866:	8a 00                	mov    al,BYTE PTR [eax]
c0015868:	0f b6 d8             	movzx  ebx,al
c001586b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015874:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015877:	c1 e0 04             	shl    eax,0x4
c001587a:	01 d0                	add    eax,edx
c001587c:	83 c0 02             	add    eax,0x2
c001587f:	8a 00                	mov    al,BYTE PTR [eax]
c0015881:	0f b6 c8             	movzx  ecx,al
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001588a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015890:	c1 e0 04             	shl    eax,0x4
c0015893:	01 d0                	add    eax,edx
c0015895:	40                   	inc    eax
c0015896:	8a 00                	mov    al,BYTE PTR [eax]
c0015898:	0f b6 d0             	movzx  edx,al
c001589b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589e:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a7:	c1 e0 04             	shl    eax,0x4
c00158aa:	01 f0                	add    eax,esi
c00158ac:	8a 00                	mov    al,BYTE PTR [eax]
c00158ae:	0f b6 c0             	movzx  eax,al
c00158b1:	83 ec 0c             	sub    esp,0xc
c00158b4:	53                   	push   ebx
c00158b5:	51                   	push   ecx
c00158b6:	52                   	push   edx
c00158b7:	50                   	push   eax
c00158b8:	68 38 b0 02 c0       	push   0xc002b038
c00158bd:	e8 8e d6 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00158c2:	83 c4 20             	add    esp,0x20
c00158c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158cb:	83 c0 03             	add    eax,0x3
c00158ce:	8a 00                	mov    al,BYTE PTR [eax]
c00158d0:	0f b6 d8             	movzx  ebx,al
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d9:	83 c0 02             	add    eax,0x2
c00158dc:	8a 00                	mov    al,BYTE PTR [eax]
c00158de:	0f b6 c8             	movzx  ecx,al
c00158e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e7:	40                   	inc    eax
c00158e8:	8a 00                	mov    al,BYTE PTR [eax]
c00158ea:	0f b6 d0             	movzx  edx,al
c00158ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f3:	8a 00                	mov    al,BYTE PTR [eax]
c00158f5:	0f b6 c0             	movzx  eax,al
c00158f8:	83 ec 0c             	sub    esp,0xc
c00158fb:	53                   	push   ebx
c00158fc:	51                   	push   ecx
c00158fd:	52                   	push   edx
c00158fe:	50                   	push   eax
c00158ff:	68 60 b0 02 c0       	push   0xc002b060
c0015904:	e8 47 d6 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0015909:	83 c4 20             	add    esp,0x20
c001590c:	83 ec 0c             	sub    esp,0xc
c001590f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015912:	e8 af f4 ff ff       	call   c0014dc6 <displayDebugInfo(regs*)>
c0015917:	8d 65 f8             	lea    esp,[ebp-0x8]
c001591a:	5b                   	pop    ebx
c001591b:	5e                   	pop    esi
c001591c:	5d                   	pop    ebp
c001591d:	c3                   	ret    

c001591e <displayProgramFault(char const*)>:
c001591e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015923:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015926:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001592c:	85 c0                	test   eax,eax
c001592e:	74 15                	je     c0015945 <displayProgramFault(char const*)+0x27>
c0015930:	83 ec 0c             	sub    esp,0xc
c0015933:	6a 04                	push   0x4
c0015935:	6a 0f                	push   0xf
c0015937:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001593b:	50                   	push   eax
c001593c:	e8 f3 b4 ff ff       	call   c0010e34 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015941:	83 c4 1c             	add    esp,0x1c
c0015944:	c3                   	ret    
c0015945:	c3                   	ret    

c0015946 <setupInterruptController()>:
c0015946:	55                   	push   ebp
c0015947:	89 e5                	mov    ebp,esp
c0015949:	53                   	push   ebx
c001594a:	83 ec 24             	sub    esp,0x24
c001594d:	b8 00 00 00 00       	mov    eax,0x0
c0015952:	85 c0                	test   eax,eax
c0015954:	0f 95 c0             	setne  al
c0015957:	84 c0                	test   al,al
c0015959:	74 5b                	je     c00159b6 <setupInterruptController()+0x70>
c001595b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015962:	83 ec 0c             	sub    esp,0xc
c0015965:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015968:	e8 d3 9e ff ff       	call   c000f840 <malloc>
c001596d:	83 c4 10             	add    esp,0x10
c0015970:	89 c3                	mov    ebx,eax
c0015972:	83 ec 0c             	sub    esp,0xc
c0015975:	53                   	push   ebx
c0015976:	e8 a9 ff 00 00       	call   c0025924 <APIC::APIC()>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015981:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015984:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015987:	8b 00                	mov    eax,DWORD PTR [eax]
c0015989:	83 c0 08             	add    eax,0x8
c001598c:	8b 00                	mov    eax,DWORD PTR [eax]
c001598e:	6a 00                	push   0x0
c0015990:	6a 00                	push   0x0
c0015992:	6a 00                	push   0x0
c0015994:	52                   	push   edx
c0015995:	ff d0                	call   eax
c0015997:	83 c4 10             	add    esp,0x10
c001599a:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001599f:	83 ec 08             	sub    esp,0x8
c00159a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159a5:	50                   	push   eax
c00159a6:	e8 cb e9 ff ff       	call   c0014376 <Device::addChild(Device*)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159b1:	e9 52 03 00 00       	jmp    c0015d08 <setupInterruptController()+0x3c2>
c00159b6:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c00159bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159c1:	83 e0 01             	and    eax,0x1
c00159c4:	84 c0                	test   al,al
c00159c6:	0f 95 c0             	setne  al
c00159c9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159cc:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159d3:	83 ec 0c             	sub    esp,0xc
c00159d6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159d9:	e8 62 9e ff ff       	call   c000f840 <malloc>
c00159de:	83 c4 10             	add    esp,0x10
c00159e1:	89 c3                	mov    ebx,eax
c00159e3:	83 ec 0c             	sub    esp,0xc
c00159e6:	53                   	push   ebx
c00159e7:	e8 90 04 01 00       	call   c0025e7c <PIC::PIC()>
c00159ec:	83 c4 10             	add    esp,0x10
c00159ef:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fa:	83 c0 08             	add    eax,0x8
c00159fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ff:	6a 00                	push   0x0
c0015a01:	6a 00                	push   0x0
c0015a03:	6a 00                	push   0x0
c0015a05:	52                   	push   edx
c0015a06:	ff d0                	call   eax
c0015a08:	83 c4 10             	add    esp,0x10
c0015a0b:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a0f:	74 73                	je     c0015a84 <setupInterruptController()+0x13e>
c0015a11:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a19:	83 c0 0c             	add    eax,0xc
c0015a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1e:	6a 00                	push   0x0
c0015a20:	6a 00                	push   0x0
c0015a22:	6a 00                	push   0x0
c0015a24:	52                   	push   edx
c0015a25:	ff d0                	call   eax
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a2e:	74 15                	je     c0015a45 <setupInterruptController()+0xff>
c0015a30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a35:	83 c0 04             	add    eax,0x4
c0015a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3a:	83 ec 0c             	sub    esp,0xc
c0015a3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a40:	ff d0                	call   eax
c0015a42:	83 c4 10             	add    esp,0x10
c0015a45:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a4c:	83 ec 0c             	sub    esp,0xc
c0015a4f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a52:	e8 e9 9d ff ff       	call   c000f840 <malloc>
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	89 c3                	mov    ebx,eax
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	53                   	push   ebx
c0015a60:	e8 bf fe 00 00       	call   c0025924 <APIC::APIC()>
c0015a65:	83 c4 10             	add    esp,0x10
c0015a68:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a6b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a73:	83 c0 08             	add    eax,0x8
c0015a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a78:	6a 00                	push   0x0
c0015a7a:	6a 00                	push   0x0
c0015a7c:	6a 00                	push   0x0
c0015a7e:	52                   	push   edx
c0015a7f:	ff d0                	call   eax
c0015a81:	83 c4 10             	add    esp,0x10
c0015a84:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0015a89:	83 ec 08             	sub    esp,0x8
c0015a8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8f:	50                   	push   eax
c0015a90:	e8 e1 e8 ff ff       	call   c0014376 <Device::addChild(Device*)>
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9d:	83 c0 24             	add    eax,0x24
c0015aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa2:	6a 00                	push   0x0
c0015aa4:	68 f9 52 01 c0       	push   0xc00152f9
c0015aa9:	6a 00                	push   0x0
c0015aab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aae:	ff d0                	call   eax
c0015ab0:	83 c4 10             	add    esp,0x10
c0015ab3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab8:	83 c0 24             	add    eax,0x24
c0015abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abd:	6a 00                	push   0x0
c0015abf:	68 f9 52 01 c0       	push   0xc00152f9
c0015ac4:	6a 01                	push   0x1
c0015ac6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac9:	ff d0                	call   eax
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad3:	83 c0 24             	add    eax,0x24
c0015ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad8:	6a 00                	push   0x0
c0015ada:	68 23 4c 01 c0       	push   0xc0014c23
c0015adf:	6a 02                	push   0x2
c0015ae1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae4:	ff d0                	call   eax
c0015ae6:	83 c4 10             	add    esp,0x10
c0015ae9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aee:	83 c0 24             	add    eax,0x24
c0015af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af3:	6a 00                	push   0x0
c0015af5:	68 f9 52 01 c0       	push   0xc00152f9
c0015afa:	6a 03                	push   0x3
c0015afc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aff:	ff d0                	call   eax
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b09:	83 c0 24             	add    eax,0x24
c0015b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0e:	6a 00                	push   0x0
c0015b10:	68 f9 52 01 c0       	push   0xc00152f9
c0015b15:	6a 04                	push   0x4
c0015b17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1a:	ff d0                	call   eax
c0015b1c:	83 c4 10             	add    esp,0x10
c0015b1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b24:	83 c0 24             	add    eax,0x24
c0015b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b29:	6a 00                	push   0x0
c0015b2b:	68 f9 52 01 c0       	push   0xc00152f9
c0015b30:	6a 05                	push   0x5
c0015b32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b35:	ff d0                	call   eax
c0015b37:	83 c4 10             	add    esp,0x10
c0015b3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3f:	83 c0 24             	add    eax,0x24
c0015b42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b44:	6a 00                	push   0x0
c0015b46:	68 18 53 01 c0       	push   0xc0015318
c0015b4b:	6a 06                	push   0x6
c0015b4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b50:	ff d0                	call   eax
c0015b52:	83 c4 10             	add    esp,0x10
c0015b55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5a:	83 c0 24             	add    eax,0x24
c0015b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5f:	6a 00                	push   0x0
c0015b61:	68 55 52 01 c0       	push   0xc0015255
c0015b66:	6a 07                	push   0x7
c0015b68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6b:	ff d0                	call   eax
c0015b6d:	83 c4 10             	add    esp,0x10
c0015b70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b75:	83 c0 24             	add    eax,0x24
c0015b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7a:	6a 00                	push   0x0
c0015b7c:	68 3e 4a 01 c0       	push   0xc0014a3e
c0015b81:	6a 08                	push   0x8
c0015b83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b86:	ff d0                	call   eax
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b90:	83 c0 24             	add    eax,0x24
c0015b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b95:	6a 00                	push   0x0
c0015b97:	68 f9 52 01 c0       	push   0xc00152f9
c0015b9c:	6a 09                	push   0x9
c0015b9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba1:	ff d0                	call   eax
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bab:	83 c0 24             	add    eax,0x24
c0015bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb0:	6a 00                	push   0x0
c0015bb2:	68 f9 52 01 c0       	push   0xc00152f9
c0015bb7:	6a 0a                	push   0xa
c0015bb9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbc:	ff d0                	call   eax
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc6:	83 c0 24             	add    eax,0x24
c0015bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcb:	6a 00                	push   0x0
c0015bcd:	68 f9 52 01 c0       	push   0xc00152f9
c0015bd2:	6a 0b                	push   0xb
c0015bd4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd7:	ff d0                	call   eax
c0015bd9:	83 c4 10             	add    esp,0x10
c0015bdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be1:	83 c0 24             	add    eax,0x24
c0015be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be6:	6a 00                	push   0x0
c0015be8:	68 f9 52 01 c0       	push   0xc00152f9
c0015bed:	6a 0c                	push   0xc
c0015bef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf2:	ff d0                	call   eax
c0015bf4:	83 c4 10             	add    esp,0x10
c0015bf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfc:	83 c0 24             	add    eax,0x24
c0015bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c01:	6a 00                	push   0x0
c0015c03:	68 84 52 01 c0       	push   0xc0015284
c0015c08:	6a 0d                	push   0xd
c0015c0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0d:	ff d0                	call   eax
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c17:	83 c0 24             	add    eax,0x24
c0015c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1c:	6a 00                	push   0x0
c0015c1e:	68 bd 52 01 c0       	push   0xc00152bd
c0015c23:	6a 0e                	push   0xe
c0015c25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c28:	ff d0                	call   eax
c0015c2a:	83 c4 10             	add    esp,0x10
c0015c2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c32:	83 c0 24             	add    eax,0x24
c0015c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c37:	6a 00                	push   0x0
c0015c39:	68 f9 52 01 c0       	push   0xc00152f9
c0015c3e:	6a 0f                	push   0xf
c0015c40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c43:	ff d0                	call   eax
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4d:	83 c0 24             	add    eax,0x24
c0015c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c52:	6a 00                	push   0x0
c0015c54:	68 f9 52 01 c0       	push   0xc00152f9
c0015c59:	6a 10                	push   0x10
c0015c5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5e:	ff d0                	call   eax
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c68:	83 c0 24             	add    eax,0x24
c0015c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6d:	6a 00                	push   0x0
c0015c6f:	68 f9 52 01 c0       	push   0xc00152f9
c0015c74:	6a 11                	push   0x11
c0015c76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c79:	ff d0                	call   eax
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c83:	83 c0 24             	add    eax,0x24
c0015c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c88:	6a 00                	push   0x0
c0015c8a:	68 f9 52 01 c0       	push   0xc00152f9
c0015c8f:	6a 12                	push   0x12
c0015c91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c94:	ff d0                	call   eax
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9e:	83 c0 24             	add    eax,0x24
c0015ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca3:	6a 00                	push   0x0
c0015ca5:	68 f9 52 01 c0       	push   0xc00152f9
c0015caa:	6a 13                	push   0x13
c0015cac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015caf:	ff d0                	call   eax
c0015cb1:	83 c4 10             	add    esp,0x10
c0015cb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb9:	83 c0 24             	add    eax,0x24
c0015cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbe:	6a 00                	push   0x0
c0015cc0:	68 f9 52 01 c0       	push   0xc00152f9
c0015cc5:	6a 14                	push   0x14
c0015cc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cca:	ff d0                	call   eax
c0015ccc:	83 c4 10             	add    esp,0x10
c0015ccf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd4:	83 c0 24             	add    eax,0x24
c0015cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd9:	6a 00                	push   0x0
c0015cdb:	68 f9 52 01 c0       	push   0xc00152f9
c0015ce0:	6a 1e                	push   0x1e
c0015ce2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce5:	ff d0                	call   eax
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ced:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cef:	83 c0 24             	add    eax,0x24
c0015cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf4:	6a 00                	push   0x0
c0015cf6:	68 7b c7 01 c0       	push   0xc001c77b
c0015cfb:	6a 60                	push   0x60
c0015cfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d00:	ff d0                	call   eax
c0015d02:	83 c4 10             	add    esp,0x10
c0015d05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d08:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d0b:	c9                   	leave  
c0015d0c:	c3                   	ret    
c0015d0d:	90                   	nop

c0015d0e <InterruptController::convertLegacyIRQNumber(int)>:
c0015d0e:	55                   	push   ebp
c0015d0f:	89 e5                	mov    ebp,esp
c0015d11:	83 ec 08             	sub    esp,0x8
c0015d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d17:	83 ec 0c             	sub    esp,0xc
c0015d1a:	50                   	push   eax
c0015d1b:	e8 42 e9 ff ff       	call   c0014662 <Device::getName()>
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	8a 00                	mov    al,BYTE PTR [eax]
c0015d25:	3c 41                	cmp    al,0x41
c0015d27:	0f 94 c0             	sete   al
c0015d2a:	84 c0                	test   al,al
c0015d2c:	74 28                	je     c0015d56 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d2e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d32:	7f 12                	jg     c0015d46 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d37:	05 00 d6 02 c0       	add    eax,0xc002d600
c0015d3c:	8a 00                	mov    al,BYTE PTR [eax]
c0015d3e:	0f b6 c0             	movzx  eax,al
c0015d41:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d44:	eb 10                	jmp    c0015d56 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d46:	83 ec 0c             	sub    esp,0xc
c0015d49:	68 80 ad 02 c0       	push   0xc002ad80
c0015d4e:	e8 9e 48 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0015d53:	83 c4 10             	add    esp,0x10
c0015d56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d59:	c9                   	leave  
c0015d5a:	c3                   	ret    
c0015d5b:	90                   	nop

c0015d5c <startGUI(void*)>:
c0015d5c:	55                   	push   ebp
c0015d5d:	89 e5                	mov    ebp,esp
c0015d5f:	53                   	push   ebx
c0015d60:	83 ec 04             	sub    esp,0x4
c0015d63:	e8 66 80 00 00       	call   c001ddce <unlockScheduler()>
c0015d68:	8b 1d a8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a8
c0015d6e:	83 ec 08             	sub    esp,0x8
c0015d71:	6a 01                	push   0x1
c0015d73:	68 d0 b0 02 c0       	push   0xc002b0d0
c0015d78:	e8 a7 79 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c0015d7d:	83 c4 10             	add    esp,0x10
c0015d80:	83 ec 08             	sub    esp,0x8
c0015d83:	53                   	push   ebx
c0015d84:	50                   	push   eax
c0015d85:	e8 ce 7b 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c0015d8a:	83 c4 10             	add    esp,0x10
c0015d8d:	8b 1d a8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a8
c0015d93:	83 ec 08             	sub    esp,0x8
c0015d96:	6a 01                	push   0x1
c0015d98:	68 ea b0 02 c0       	push   0xc002b0ea
c0015d9d:	e8 82 79 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c0015da2:	83 c4 10             	add    esp,0x10
c0015da5:	83 ec 08             	sub    esp,0x8
c0015da8:	53                   	push   ebx
c0015da9:	50                   	push   eax
c0015daa:	e8 a9 7b 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c0015daf:	83 c4 10             	add    esp,0x10
c0015db2:	90                   	nop
c0015db3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015db6:	c9                   	leave  
c0015db7:	c3                   	ret    

c0015db8 <startGUIVESA(void*)>:
c0015db8:	55                   	push   ebp
c0015db9:	89 e5                	mov    ebp,esp
c0015dbb:	53                   	push   ebx
c0015dbc:	83 ec 04             	sub    esp,0x4
c0015dbf:	e8 0a 80 00 00       	call   c001ddce <unlockScheduler()>
c0015dc4:	8b 1d a8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a8
c0015dca:	83 ec 08             	sub    esp,0x8
c0015dcd:	6a 01                	push   0x1
c0015dcf:	68 04 b1 02 c0       	push   0xc002b104
c0015dd4:	e8 4b 79 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c0015dd9:	83 c4 10             	add    esp,0x10
c0015ddc:	83 ec 08             	sub    esp,0x8
c0015ddf:	53                   	push   ebx
c0015de0:	50                   	push   eax
c0015de1:	e8 72 7b 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c0015de6:	83 c4 10             	add    esp,0x10
c0015de9:	8b 1d a8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a8
c0015def:	83 ec 08             	sub    esp,0x8
c0015df2:	6a 01                	push   0x1
c0015df4:	68 ea b0 02 c0       	push   0xc002b0ea
c0015df9:	e8 26 79 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c0015dfe:	83 c4 10             	add    esp,0x10
c0015e01:	83 ec 08             	sub    esp,0x8
c0015e04:	53                   	push   ebx
c0015e05:	50                   	push   eax
c0015e06:	e8 4d 7b 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c0015e0b:	83 c4 10             	add    esp,0x10
c0015e0e:	90                   	nop
c0015e0f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e12:	c9                   	leave  
c0015e13:	c3                   	ret    

c0015e14 <sendKeyToTerminal(unsigned char)>:
c0015e14:	55                   	push   ebp
c0015e15:	89 e5                	mov    ebp,esp
c0015e17:	83 ec 28             	sub    esp,0x28
c0015e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e20:	a1 84 e4 02 c0       	mov    eax,ds:0xc002e484
c0015e25:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e29:	83 ec 08             	sub    esp,0x8
c0015e2c:	52                   	push   edx
c0015e2d:	50                   	push   eax
c0015e2e:	e8 3d b5 ff ff       	call   c0011370 <VgaText::receiveKey(unsigned char)>
c0015e33:	83 c4 10             	add    esp,0x10
c0015e36:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e3a:	75 41                	jne    c0015e7d <sendKeyToTerminal(unsigned char)+0x69>
c0015e3c:	e8 b2 7f 00 00       	call   c001ddf3 <lockStuff()>
c0015e41:	a1 80 e5 02 c0       	mov    eax,ds:0xc002e580
c0015e46:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e49:	c7 05 80 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e580,0x0
c0015e53:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e57:	74 1f                	je     c0015e78 <sendKeyToTerminal(unsigned char)+0x64>
c0015e59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e5c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e62:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e65:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e68:	83 ec 0c             	sub    esp,0xc
c0015e6b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e6e:	e8 71 85 00 00       	call   c001e3e4 <unblockTask(ThreadControlBlock*)>
c0015e73:	83 c4 10             	add    esp,0x10
c0015e76:	eb db                	jmp    c0015e53 <sendKeyToTerminal(unsigned char)+0x3f>
c0015e78:	e8 10 83 00 00       	call   c001e18d <unlockStuff()>
c0015e7d:	90                   	nop
c0015e7e:	c9                   	leave  
c0015e7f:	c3                   	ret    

c0015e80 <sendKeyboardToken(KeyboardToken)>:
c0015e80:	55                   	push   ebp
c0015e81:	89 e5                	mov    ebp,esp
c0015e83:	83 ec 18             	sub    esp,0x18
c0015e86:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8c:	0f b7 c0             	movzx  eax,ax
c0015e8f:	83 f2 01             	xor    edx,0x1
c0015e92:	88 90 a0 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1a60],dl
c0015e98:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0015e9d:	85 c0                	test   eax,eax
c0015e9f:	74 24                	je     c0015ec5 <sendKeyboardToken(KeyboardToken)+0x45>
c0015ea1:	8b 0d 88 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e588
c0015ea7:	83 ec 04             	sub    esp,0x4
c0015eaa:	68 a0 e5 02 c0       	push   0xc002e5a0
c0015eaf:	83 ec 08             	sub    esp,0x8
c0015eb2:	89 e2                	mov    edx,esp
c0015eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb7:	89 02                	mov    DWORD PTR [edx],eax
c0015eb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ebc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ec0:	ff d1                	call   ecx
c0015ec2:	83 c4 10             	add    esp,0x10
c0015ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec8:	66 3d 03 02          	cmp    ax,0x203
c0015ecc:	75 07                	jne    c0015ed5 <sendKeyboardToken(KeyboardToken)+0x55>
c0015ece:	a0 a0 e6 02 c0       	mov    al,ds:0xc002e6a0
c0015ed3:	84 c0                	test   al,al
c0015ed5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ed9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015edc:	a0 a8 e9 02 c0       	mov    al,ds:0xc002e9a8
c0015ee1:	38 c2                	cmp    dl,al
c0015ee3:	74 1c                	je     c0015f01 <sendKeyboardToken(KeyboardToken)+0x81>
c0015ee5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ee8:	a2 a8 e9 02 c0       	mov    ds:0xc002e9a8,al
c0015eed:	a0 a8 e9 02 c0       	mov    al,ds:0xc002e9a8
c0015ef2:	0f b6 c0             	movzx  eax,al
c0015ef5:	83 ec 0c             	sub    esp,0xc
c0015ef8:	50                   	push   eax
c0015ef9:	e8 d2 a6 ff ff       	call   c00105d0 <setTerminalScrollLock(bool)>
c0015efe:	83 c4 10             	add    esp,0x10
c0015f01:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f04:	84 c0                	test   al,al
c0015f06:	0f 84 ae 00 00 00    	je     c0015fba <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0f:	66 3d 10 03          	cmp    ax,0x310
c0015f13:	75 06                	jne    c0015f1b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f15:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1e:	66 3d 11 03          	cmp    ax,0x311
c0015f22:	75 06                	jne    c0015f2a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f24:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2d:	66 3d 12 03          	cmp    ax,0x312
c0015f31:	75 06                	jne    c0015f39 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f33:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3c:	66 3d 13 03          	cmp    ax,0x313
c0015f40:	75 06                	jne    c0015f48 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f42:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4b:	66 3d 14 03          	cmp    ax,0x314
c0015f4f:	75 06                	jne    c0015f57 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f51:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5a:	66 3d 15 03          	cmp    ax,0x315
c0015f5e:	75 06                	jne    c0015f66 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f60:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f69:	66 3d 16 03          	cmp    ax,0x316
c0015f6d:	75 06                	jne    c0015f75 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f6f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f78:	66 3d 17 03          	cmp    ax,0x317
c0015f7c:	75 06                	jne    c0015f84 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f7e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f87:	66 3d 18 03          	cmp    ax,0x318
c0015f8b:	75 06                	jne    c0015f93 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f8d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f96:	66 3d 19 03          	cmp    ax,0x319
c0015f9a:	75 06                	jne    c0015fa2 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f9c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa5:	66 3d 1a 03          	cmp    ax,0x31a
c0015fa9:	0f 85 c9 00 00 00    	jne    c0016078 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015faf:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fb5:	e9 be 00 00 00       	jmp    c0016078 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbd:	66 3d 10 03          	cmp    ax,0x310
c0015fc1:	75 0a                	jne    c0015fcd <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fc3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fc9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd0:	66 3d 11 03          	cmp    ax,0x311
c0015fd4:	75 0a                	jne    c0015fe0 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fd6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fdc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe3:	66 3d 12 03          	cmp    ax,0x312
c0015fe7:	75 0a                	jne    c0015ff3 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fe9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff6:	66 3d 13 03          	cmp    ax,0x313
c0015ffa:	75 0a                	jne    c0016006 <sendKeyboardToken(KeyboardToken)+0x186>
c0015ffc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016002:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016009:	66 3d 14 03          	cmp    ax,0x314
c001600d:	75 0a                	jne    c0016019 <sendKeyboardToken(KeyboardToken)+0x199>
c001600f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016015:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601c:	66 3d 15 03          	cmp    ax,0x315
c0016020:	75 0a                	jne    c001602c <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016022:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016028:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602f:	66 3d 16 03          	cmp    ax,0x316
c0016033:	75 0a                	jne    c001603f <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016035:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001603b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016042:	66 3d 17 03          	cmp    ax,0x317
c0016046:	75 0a                	jne    c0016052 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016048:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001604e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016055:	66 3d 18 03          	cmp    ax,0x318
c0016059:	75 0a                	jne    c0016065 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001605b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016061:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016068:	66 3d 19 03          	cmp    ax,0x319
c001606c:	75 0a                	jne    c0016078 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001606e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016074:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607b:	66 3d 00 02          	cmp    ax,0x200
c001607f:	75 2c                	jne    c00160ad <sendKeyboardToken(KeyboardToken)+0x22d>
c0016081:	a0 a0 e9 02 c0       	mov    al,ds:0xc002e9a0
c0016086:	83 f0 01             	xor    eax,0x1
c0016089:	84 c0                	test   al,al
c001608b:	74 20                	je     c00160ad <sendKeyboardToken(KeyboardToken)+0x22d>
c001608d:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c0016092:	6a 01                	push   0x1
c0016094:	6a 00                	push   0x0
c0016096:	68 5c 5d 01 c0       	push   0xc0015d5c
c001609b:	50                   	push   eax
c001609c:	e8 5d 7e 00 00       	call   c001defe <Process::createThread(void (*)(void*), void*, int)>
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	c6 05 a0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9a0,0x1
c00160ab:	eb 33                	jmp    c00160e0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b0:	66 3d 01 02          	cmp    ax,0x201
c00160b4:	75 2a                	jne    c00160e0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160b6:	a0 a0 e9 02 c0       	mov    al,ds:0xc002e9a0
c00160bb:	83 f0 01             	xor    eax,0x1
c00160be:	84 c0                	test   al,al
c00160c0:	74 1e                	je     c00160e0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160c2:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c00160c7:	6a 01                	push   0x1
c00160c9:	6a 00                	push   0x0
c00160cb:	68 b8 5d 01 c0       	push   0xc0015db8
c00160d0:	50                   	push   eax
c00160d1:	e8 28 7e 00 00       	call   c001defe <Process::createThread(void (*)(void*), void*, int)>
c00160d6:	83 c4 10             	add    esp,0x10
c00160d9:	c6 05 a0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9a0,0x1
c00160e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e3:	66 3d 1d 03          	cmp    ax,0x31d
c00160e7:	75 06                	jne    c00160ef <sendKeyboardToken(KeyboardToken)+0x26f>
c00160e9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f2:	66 3d 1c 03          	cmp    ax,0x31c
c00160f6:	75 06                	jne    c00160fe <sendKeyboardToken(KeyboardToken)+0x27e>
c00160f8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016101:	66 3d 1b 03          	cmp    ax,0x31b
c0016105:	75 06                	jne    c001610d <sendKeyboardToken(KeyboardToken)+0x28d>
c0016107:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001610d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016110:	66 3d 1e 03          	cmp    ax,0x31e
c0016114:	75 06                	jne    c001611c <sendKeyboardToken(KeyboardToken)+0x29c>
c0016116:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001611c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611f:	66 3d 1f 03          	cmp    ax,0x31f
c0016123:	75 06                	jne    c001612b <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016125:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001612b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612e:	66 3d 1a 03          	cmp    ax,0x31a
c0016132:	75 06                	jne    c001613a <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016134:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001613a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001613e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016141:	83 f0 01             	xor    eax,0x1
c0016144:	84 c0                	test   al,al
c0016146:	74 77                	je     c00161bf <sendKeyboardToken(KeyboardToken)+0x33f>
c0016148:	a0 a1 e6 02 c0       	mov    al,ds:0xc002e6a1
c001614d:	84 c0                	test   al,al
c001614f:	74 41                	je     c0016192 <sendKeyboardToken(KeyboardToken)+0x312>
c0016151:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016155:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016159:	74 2b                	je     c0016186 <sendKeyboardToken(KeyboardToken)+0x306>
c001615b:	8b 15 a4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9a4
c0016161:	89 d0                	mov    eax,edx
c0016163:	c1 e0 02             	shl    eax,0x2
c0016166:	01 d0                	add    eax,edx
c0016168:	01 c0                	add    eax,eax
c001616a:	a3 a4 e9 02 c0       	mov    ds:0xc002e9a4,eax
c001616f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016172:	0f b7 c0             	movzx  eax,ax
c0016175:	8d 50 d0             	lea    edx,[eax-0x30]
c0016178:	a1 a4 e9 02 c0       	mov    eax,ds:0xc002e9a4
c001617d:	01 d0                	add    eax,edx
c001617f:	a3 a4 e9 02 c0       	mov    ds:0xc002e9a4,eax
c0016184:	eb 6d                	jmp    c00161f3 <sendKeyboardToken(KeyboardToken)+0x373>
c0016186:	c7 05 a4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9a4,0x0
c0016190:	eb 61                	jmp    c00161f3 <sendKeyboardToken(KeyboardToken)+0x373>
c0016192:	a1 a4 e9 02 c0       	mov    eax,ds:0xc002e9a4
c0016197:	85 c0                	test   eax,eax
c0016199:	74 18                	je     c00161b3 <sendKeyboardToken(KeyboardToken)+0x333>
c001619b:	a1 a4 e9 02 c0       	mov    eax,ds:0xc002e9a4
c00161a0:	0f b6 c0             	movzx  eax,al
c00161a3:	83 ec 0c             	sub    esp,0xc
c00161a6:	50                   	push   eax
c00161a7:	e8 68 fc ff ff       	call   c0015e14 <sendKeyToTerminal(unsigned char)>
c00161ac:	83 c4 10             	add    esp,0x10
c00161af:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161b3:	c7 05 a4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9a4,0x0
c00161bd:	eb 34                	jmp    c00161f3 <sendKeyboardToken(KeyboardToken)+0x373>
c00161bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c2:	66 3d 01 01          	cmp    ax,0x101
c00161c6:	75 2b                	jne    c00161f3 <sendKeyboardToken(KeyboardToken)+0x373>
c00161c8:	a1 a4 e9 02 c0       	mov    eax,ds:0xc002e9a4
c00161cd:	85 c0                	test   eax,eax
c00161cf:	74 18                	je     c00161e9 <sendKeyboardToken(KeyboardToken)+0x369>
c00161d1:	a1 a4 e9 02 c0       	mov    eax,ds:0xc002e9a4
c00161d6:	0f b6 c0             	movzx  eax,al
c00161d9:	83 ec 0c             	sub    esp,0xc
c00161dc:	50                   	push   eax
c00161dd:	e8 32 fc ff ff       	call   c0015e14 <sendKeyToTerminal(unsigned char)>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161e9:	c7 05 a4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9a4,0x0
c00161f3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161f6:	83 f0 01             	xor    eax,0x1
c00161f9:	84 c0                	test   al,al
c00161fb:	74 4c                	je     c0016249 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016200:	83 f0 01             	xor    eax,0x1
c0016203:	84 c0                	test   al,al
c0016205:	74 42                	je     c0016249 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016207:	a0 a0 e6 02 c0       	mov    al,ds:0xc002e6a0
c001620c:	83 f0 01             	xor    eax,0x1
c001620f:	84 c0                	test   al,al
c0016211:	74 36                	je     c0016249 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016216:	66 83 f8 1f          	cmp    ax,0x1f
c001621a:	76 09                	jbe    c0016225 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001621c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621f:	66 83 f8 7e          	cmp    ax,0x7e
c0016223:	76 12                	jbe    c0016237 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016228:	66 83 f8 0a          	cmp    ax,0xa
c001622c:	74 09                	je     c0016237 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001622e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016231:	66 83 f8 08          	cmp    ax,0x8
c0016235:	75 12                	jne    c0016249 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623a:	0f b6 c0             	movzx  eax,al
c001623d:	83 ec 0c             	sub    esp,0xc
c0016240:	50                   	push   eax
c0016241:	e8 ce fb ff ff       	call   c0015e14 <sendKeyToTerminal(unsigned char)>
c0016246:	83 c4 10             	add    esp,0x10
c0016249:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001624c:	83 f0 01             	xor    eax,0x1
c001624f:	84 c0                	test   al,al
c0016251:	74 4f                	je     c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016253:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016256:	83 f0 01             	xor    eax,0x1
c0016259:	84 c0                	test   al,al
c001625b:	74 45                	je     c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c001625d:	a0 a0 e6 02 c0       	mov    al,ds:0xc002e6a0
c0016262:	84 c0                	test   al,al
c0016264:	74 3c                	je     c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016269:	66 83 f8 3f          	cmp    ax,0x3f
c001626d:	76 33                	jbe    c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c001626f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016272:	66 83 f8 7f          	cmp    ax,0x7f
c0016276:	77 2a                	ja     c00162a2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627b:	88 c2                	mov    dl,al
c001627d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016280:	66 83 f8 5f          	cmp    ax,0x5f
c0016284:	76 04                	jbe    c001628a <sendKeyboardToken(KeyboardToken)+0x40a>
c0016286:	b0 20                	mov    al,0x20
c0016288:	eb 02                	jmp    c001628c <sendKeyboardToken(KeyboardToken)+0x40c>
c001628a:	b0 00                	mov    al,0x0
c001628c:	29 c2                	sub    edx,eax
c001628e:	88 d0                	mov    al,dl
c0016290:	83 e8 40             	sub    eax,0x40
c0016293:	0f b6 c0             	movzx  eax,al
c0016296:	83 ec 0c             	sub    esp,0xc
c0016299:	50                   	push   eax
c001629a:	e8 75 fb ff ff       	call   c0015e14 <sendKeyToTerminal(unsigned char)>
c001629f:	83 c4 10             	add    esp,0x10
c00162a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a5:	66 3d 00 03          	cmp    ax,0x300
c00162a9:	75 0f                	jne    c00162ba <sendKeyboardToken(KeyboardToken)+0x43a>
c00162ab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ae:	83 f0 01             	xor    eax,0x1
c00162b1:	84 c0                	test   al,al
c00162b3:	74 05                	je     c00162ba <sendKeyboardToken(KeyboardToken)+0x43a>
c00162b5:	e8 4b ab ff ff       	call   c0010e05 <doTerminalCycle()>
c00162ba:	90                   	nop
c00162bb:	c9                   	leave  
c00162bc:	c3                   	ret    

c00162bd <clearInternalKeybuffer(VgaText*)>:
c00162bd:	55                   	push   ebp
c00162be:	89 e5                	mov    ebp,esp
c00162c0:	83 ec 08             	sub    esp,0x8
c00162c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c6:	05 34 11 00 00       	add    eax,0x1134
c00162cb:	83 ec 0c             	sub    esp,0xc
c00162ce:	50                   	push   eax
c00162cf:	e8 c0 a4 fe ff       	call   c0000794 <strlen>
c00162d4:	83 c4 10             	add    esp,0x10
c00162d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162da:	81 c2 34 11 00 00    	add    edx,0x1134
c00162e0:	83 ec 04             	sub    esp,0x4
c00162e3:	50                   	push   eax
c00162e4:	6a 00                	push   0x0
c00162e6:	52                   	push   edx
c00162e7:	e8 8c a4 fe ff       	call   c0000778 <memset>
c00162ec:	83 c4 10             	add    esp,0x10
c00162ef:	90                   	nop
c00162f0:	c9                   	leave  
c00162f1:	c3                   	ret    

c00162f2 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162f2:	55                   	push   ebp
c00162f3:	89 e5                	mov    ebp,esp
c00162f5:	83 ec 18             	sub    esp,0x18
c00162f8:	fb                   	sti    
c00162f9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016300:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016304:	0f 84 8a 00 00 00    	je     c0016394 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001630a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016313:	84 c0                	test   al,al
c0016315:	75 11                	jne    c0016328 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016317:	e8 b0 7a 00 00       	call   c001ddcc <lockScheduler()>
c001631c:	e8 e7 7d 00 00       	call   c001e108 <schedule()>
c0016321:	e8 a8 7a 00 00       	call   c001ddce <unlockScheduler()>
c0016326:	eb e2                	jmp    c001630a <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016328:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001632b:	8d 50 01             	lea    edx,[eax+0x1]
c001632e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016331:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016334:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001633a:	88 10                	mov    BYTE PTR [eax],dl
c001633c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001633f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016345:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001634b:	05 34 11 00 00       	add    eax,0x1134
c0016350:	83 ec 0c             	sub    esp,0xc
c0016353:	50                   	push   eax
c0016354:	e8 3b a4 fe ff       	call   c0000794 <strlen>
c0016359:	83 c4 10             	add    esp,0x10
c001635c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001635f:	81 c2 34 11 00 00    	add    edx,0x1134
c0016365:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016368:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001636b:	81 c2 34 11 00 00    	add    edx,0x1134
c0016371:	83 ec 04             	sub    esp,0x4
c0016374:	50                   	push   eax
c0016375:	51                   	push   ecx
c0016376:	52                   	push   edx
c0016377:	e8 00 a3 fe ff       	call   c000067c <memmove>
c001637c:	83 c4 10             	add    esp,0x10
c001637f:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016382:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016385:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016389:	0f 85 71 ff ff ff    	jne    c0016300 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001638f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016392:	eb 03                	jmp    c0016397 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016397:	c9                   	leave  
c0016398:	c3                   	ret    
c0016399:	90                   	nop

c001639a <Keyboard::Keyboard(char const*)>:
c001639a:	83 ec 0c             	sub    esp,0xc
c001639d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a1:	83 ec 08             	sub    esp,0x8
c00163a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a8:	50                   	push   eax
c00163a9:	e8 b8 e1 ff ff       	call   c0014566 <Device::Device(char const*)>
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c00163b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ba:	89 10                	mov    DWORD PTR [eax],edx
c00163bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163ca:	c6 05 84 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e584,0x1
c00163d1:	90                   	nop
c00163d2:	83 c4 0c             	add    esp,0xc
c00163d5:	c3                   	ret    

c00163d6 <Keyboard::~Keyboard()>:
c00163d6:	83 ec 0c             	sub    esp,0xc
c00163d9:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c00163de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e2:	89 10                	mov    DWORD PTR [eax],edx
c00163e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	50                   	push   eax
c00163ec:	e8 57 de ff ff       	call   c0014248 <Device::~Device()>
c00163f1:	83 c4 10             	add    esp,0x10
c00163f4:	90                   	nop
c00163f5:	83 c4 0c             	add    esp,0xc
c00163f8:	c3                   	ret    
c00163f9:	90                   	nop

c00163fa <Keyboard::~Keyboard()>:
c00163fa:	83 ec 0c             	sub    esp,0xc
c00163fd:	83 ec 0c             	sub    esp,0xc
c0016400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016404:	e8 cd ff ff ff       	call   c00163d6 <Keyboard::~Keyboard()>
c0016409:	83 c4 10             	add    esp,0x10
c001640c:	83 ec 08             	sub    esp,0x8
c001640f:	68 5c 01 00 00       	push   0x15c
c0016414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016418:	e8 53 ca ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c001641d:	83 c4 10             	add    esp,0x10
c0016420:	83 c4 0c             	add    esp,0xc
c0016423:	c3                   	ret    

c0016424 <LogicalDisk::close(int, int, void*)>:
c0016424:	83 c8 ff             	or     eax,0xffffffff
c0016427:	c3                   	ret    

c0016428 <LogicalDisk::~LogicalDisk()>:
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	ba d8 b1 02 c0       	mov    edx,0xc002b1d8
c0016430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016434:	89 10                	mov    DWORD PTR [eax],edx
c0016436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643a:	83 ec 0c             	sub    esp,0xc
c001643d:	50                   	push   eax
c001643e:	e8 05 de ff ff       	call   c0014248 <Device::~Device()>
c0016443:	83 c4 10             	add    esp,0x10
c0016446:	90                   	nop
c0016447:	83 c4 0c             	add    esp,0xc
c001644a:	c3                   	ret    
c001644b:	90                   	nop

c001644c <LogicalDisk::~LogicalDisk()>:
c001644c:	83 ec 0c             	sub    esp,0xc
c001644f:	83 ec 0c             	sub    esp,0xc
c0016452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016456:	e8 cd ff ff ff       	call   c0016428 <LogicalDisk::~LogicalDisk()>
c001645b:	83 c4 10             	add    esp,0x10
c001645e:	83 ec 08             	sub    esp,0x8
c0016461:	68 74 01 00 00       	push   0x174
c0016466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001646a:	e8 01 ca ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c001646f:	83 c4 10             	add    esp,0x10
c0016472:	83 c4 0c             	add    esp,0xc
c0016475:	c3                   	ret    

c0016476 <LogicalDisk::open(int, int, void*)>:
c0016476:	83 ec 18             	sub    esp,0x18
c0016479:	68 54 b1 02 c0       	push   0xc002b154
c001647e:	e8 6e 41 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0016483:	83 c8 ff             	or     eax,0xffffffff
c0016486:	83 c4 1c             	add    esp,0x1c
c0016489:	c3                   	ret    

c001648a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001648a:	53                   	push   ebx
c001648b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001648f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016493:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016497:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001649d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164a3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164a9:	77 10                	ja     c00164bb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164ab:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164b1:	89 d3                	mov    ebx,edx
c00164b3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164b9:	72 05                	jb     c00164c0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164bb:	83 c8 ff             	or     eax,0xffffffff
c00164be:	89 c2                	mov    edx,eax
c00164c0:	5b                   	pop    ebx
c00164c1:	c3                   	ret    

c00164c2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164c2:	56                   	push   esi
c00164c3:	83 c8 ff             	or     eax,0xffffffff
c00164c6:	53                   	push   ebx
c00164c7:	89 c2                	mov    edx,eax
c00164c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164cd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164d5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164db:	77 27                	ja     c0016504 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164dd:	89 d8                	mov    eax,ebx
c00164df:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164e5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164f0:	89 c2                	mov    edx,eax
c00164f2:	73 10                	jae    c0016504 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164f4:	89 c8                	mov    eax,ecx
c00164f6:	89 da                	mov    edx,ebx
c00164f8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00164fe:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016504:	5b                   	pop    ebx
c0016505:	5e                   	pop    esi
c0016506:	c3                   	ret    
c0016507:	90                   	nop

c0016508 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016508:	83 ec 1c             	sub    esp,0x1c
c001650b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001650f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016513:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016517:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001651b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001651f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016522:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016526:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001652a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001652e:	83 ec 08             	sub    esp,0x8
c0016531:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016535:	50                   	push   eax
c0016536:	e8 2b e0 ff ff       	call   c0014566 <Device::Device(char const*)>
c001653b:	83 c4 10             	add    esp,0x10
c001653e:	ba d8 b1 02 c0       	mov    edx,0xc002b1d8
c0016543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016547:	89 10                	mov    DWORD PTR [eax],edx
c0016549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001654d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016558:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001655f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016563:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001656d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016575:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016579:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001657f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016585:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016589:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001658c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016590:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016596:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001659c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165a4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ae:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165b8:	90                   	nop
c00165b9:	83 c4 1c             	add    esp,0x1c
c00165bc:	c3                   	ret    
c00165bd:	90                   	nop

c00165be <LogicalDisk::assignDriveLetter()>:
c00165be:	55                   	push   ebp
c00165bf:	57                   	push   edi
c00165c0:	56                   	push   esi
c00165c1:	53                   	push   ebx
c00165c2:	83 ec 14             	sub    esp,0x14
c00165c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165c9:	8b 3d c0 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9c0
c00165cf:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165d9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165df:	8b 3d c4 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9c4
c00165e5:	3c 01                	cmp    al,0x1
c00165e7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165ef:	19 c0                	sbb    eax,eax
c00165f1:	83 e0 02             	and    eax,0x2
c00165f4:	83 c0 41             	add    eax,0x41
c00165f7:	0f be e8             	movsx  ebp,al
c00165fa:	3c 43                	cmp    al,0x43
c00165fc:	75 10                	jne    c001660e <LogicalDisk::assignDriveLetter()+0x50>
c00165fe:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016605:	75 5d                	jne    c0016664 <LogicalDisk::assignDriveLetter()+0xa6>
c0016607:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001660c:	75 56                	jne    c0016664 <LogicalDisk::assignDriveLetter()+0xa6>
c001660e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016611:	ba 01 00 00 00       	mov    edx,0x1
c0016616:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001661a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001661e:	d3 e2                	shl    edx,cl
c0016620:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016624:	89 d7                	mov    edi,edx
c0016626:	89 d6                	mov    esi,edx
c0016628:	c1 ff 1f             	sar    edi,0x1f
c001662b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001662f:	21 f9                	and    ecx,edi
c0016631:	09 d1                	or     ecx,edx
c0016633:	75 2f                	jne    c0016664 <LogicalDisk::assignDriveLetter()+0xa6>
c0016635:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016639:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001663d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016643:	09 f2                	or     edx,esi
c0016645:	89 15 c0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9c0,edx
c001664b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001664f:	09 fa                	or     edx,edi
c0016651:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016655:	89 15 c4 e9 02 c0    	mov    DWORD PTR ds:0xc002e9c4,edx
c001665b:	89 1c bd e0 e9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1620],ebx
c0016662:	eb 08                	jmp    c001666c <LogicalDisk::assignDriveLetter()+0xae>
c0016664:	45                   	inc    ebp
c0016665:	40                   	inc    eax
c0016666:	3c 5b                	cmp    al,0x5b
c0016668:	75 90                	jne    c00165fa <LogicalDisk::assignDriveLetter()+0x3c>
c001666a:	31 c0                	xor    eax,eax
c001666c:	83 c4 14             	add    esp,0x14
c001666f:	5b                   	pop    ebx
c0016670:	5e                   	pop    esi
c0016671:	5f                   	pop    edi
c0016672:	5d                   	pop    ebp
c0016673:	c3                   	ret    

c0016674 <LogicalDisk::mount()>:
c0016674:	56                   	push   esi
c0016675:	53                   	push   ebx
c0016676:	51                   	push   ecx
c0016677:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001667b:	8b 1d 38 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e538
c0016681:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001668b:	85 db                	test   ebx,ebx
c001668d:	74 50                	je     c00166df <LogicalDisk::mount()+0x6b>
c001668f:	e8 23 77 00 00       	call   c001ddb7 <getIRQNestingLevel()>
c0016694:	52                   	push   edx
c0016695:	52                   	push   edx
c0016696:	50                   	push   eax
c0016697:	68 78 b1 02 c0       	push   0xc002b178
c001669c:	e8 af c8 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00166a1:	83 c4 0c             	add    esp,0xc
c00166a4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166ad:	83 e8 41             	sub    eax,0x41
c00166b0:	50                   	push   eax
c00166b1:	56                   	push   esi
c00166b2:	53                   	push   ebx
c00166b3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	84 c0                	test   al,al
c00166bb:	74 08                	je     c00166c5 <LogicalDisk::mount()+0x51>
c00166bd:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166c3:	eb 1c                	jmp    c00166e1 <LogicalDisk::mount()+0x6d>
c00166c5:	e8 ed 76 00 00       	call   c001ddb7 <getIRQNestingLevel()>
c00166ca:	51                   	push   ecx
c00166cb:	51                   	push   ecx
c00166cc:	50                   	push   eax
c00166cd:	68 93 b1 02 c0       	push   0xc002b193
c00166d2:	e8 79 c8 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00166d7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166da:	83 c4 10             	add    esp,0x10
c00166dd:	eb ac                	jmp    c001668b <LogicalDisk::mount()+0x17>
c00166df:	31 c0                	xor    eax,eax
c00166e1:	5a                   	pop    edx
c00166e2:	5b                   	pop    ebx
c00166e3:	5e                   	pop    esi
c00166e4:	c3                   	ret    
c00166e5:	90                   	nop

c00166e6 <LogicalDisk::unmount()>:
c00166e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166ea:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166f4:	c3                   	ret    
c00166f5:	90                   	nop

c00166f6 <LogicalDisk::eject()>:
c00166f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016700:	8b 10                	mov    edx,DWORD PTR [eax]
c0016702:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016706:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016709:	90                   	nop

c001670a <LogicalDisk::unassignDriveLetter()>:
c001670a:	57                   	push   edi
c001670b:	56                   	push   esi
c001670c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016710:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016717:	84 c9                	test   cl,cl
c0016719:	75 0f                	jne    c001672a <LogicalDisk::unassignDriveLetter()+0x20>
c001671b:	c7 44 24 0c ae b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b1ae
c0016723:	5e                   	pop    esi
c0016724:	5f                   	pop    edi
c0016725:	e9 c7 3e 00 00       	jmp    c001a5f1 <Krnl::panic(char const*)>
c001672a:	83 e9 41             	sub    ecx,0x41
c001672d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016734:	b8 01 00 00 00       	mov    eax,0x1
c0016739:	c7 04 8d e0 e9 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1620],0x0
c0016744:	d3 e0                	shl    eax,cl
c0016746:	89 c7                	mov    edi,eax
c0016748:	f7 d0                	not    eax
c001674a:	c1 ff 1f             	sar    edi,0x1f
c001674d:	21 05 c0 e9 02 c0    	and    DWORD PTR ds:0xc002e9c0,eax
c0016753:	89 fe                	mov    esi,edi
c0016755:	f7 d6                	not    esi
c0016757:	21 35 c4 e9 02 c0    	and    DWORD PTR ds:0xc002e9c4,esi
c001675d:	5e                   	pop    esi
c001675e:	5f                   	pop    edi
c001675f:	c3                   	ret    

c0016760 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016760:	57                   	push   edi
c0016761:	56                   	push   esi
c0016762:	53                   	push   ebx
c0016763:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001676b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001676f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016773:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016779:	77 41                	ja     c00167bc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001677b:	99                   	cdq    
c001677c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016782:	01 c8                	add    eax,ecx
c0016784:	11 da                	adc    edx,ebx
c0016786:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001678c:	19 d7                	sbb    edi,edx
c001678e:	72 33                	jb     c00167c3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016790:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016796:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001679c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167a0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167a4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167b4:	5b                   	pop    ebx
c00167b5:	5e                   	pop    esi
c00167b6:	5f                   	pop    edi
c00167b7:	e9 b0 0a 00 00       	jmp    c001726c <VCache::read(unsigned long long, int, void*)>
c00167bc:	b8 05 00 00 00       	mov    eax,0x5
c00167c1:	eb 05                	jmp    c00167c8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167c3:	b8 07 00 00 00       	mov    eax,0x7
c00167c8:	5b                   	pop    ebx
c00167c9:	5e                   	pop    esi
c00167ca:	5f                   	pop    edi
c00167cb:	c3                   	ret    

c00167cc <LogicalDisk::write(unsigned long long, int, void*)>:
c00167cc:	57                   	push   edi
c00167cd:	56                   	push   esi
c00167ce:	53                   	push   ebx
c00167cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167e5:	77 41                	ja     c0016828 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167e7:	99                   	cdq    
c00167e8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167ee:	01 c8                	add    eax,ecx
c00167f0:	11 da                	adc    edx,ebx
c00167f2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167f8:	19 d7                	sbb    edi,edx
c00167fa:	72 33                	jb     c001682f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00167fc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016802:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016808:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001680c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016810:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016816:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001681c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016820:	5b                   	pop    ebx
c0016821:	5e                   	pop    esi
c0016822:	5f                   	pop    edi
c0016823:	e9 4e 09 00 00       	jmp    c0017176 <VCache::write(unsigned long long, int, void*)>
c0016828:	b8 05 00 00 00       	mov    eax,0x5
c001682d:	eb 05                	jmp    c0016834 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001682f:	b8 07 00 00 00       	mov    eax,0x7
c0016834:	5b                   	pop    ebx
c0016835:	5e                   	pop    esi
c0016836:	5f                   	pop    edi
c0016837:	c3                   	ret    

c0016838 <Mouse::Mouse(char const*)>:
c0016838:	83 ec 0c             	sub    esp,0xc
c001683b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683f:	83 ec 08             	sub    esp,0x8
c0016842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016846:	50                   	push   eax
c0016847:	e8 1a dd ff ff       	call   c0014566 <Device::Device(char const*)>
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	ba 04 b2 02 c0       	mov    edx,0xc002b204
c0016854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016858:	89 10                	mov    DWORD PTR [eax],edx
c001685a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016868:	90                   	nop
c0016869:	83 c4 0c             	add    esp,0xc
c001686c:	c3                   	ret    
c001686d:	90                   	nop

c001686e <Mouse::~Mouse()>:
c001686e:	83 ec 0c             	sub    esp,0xc
c0016871:	ba 04 b2 02 c0       	mov    edx,0xc002b204
c0016876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001687a:	89 10                	mov    DWORD PTR [eax],edx
c001687c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016880:	83 ec 0c             	sub    esp,0xc
c0016883:	50                   	push   eax
c0016884:	e8 bf d9 ff ff       	call   c0014248 <Device::~Device()>
c0016889:	83 c4 10             	add    esp,0x10
c001688c:	90                   	nop
c001688d:	83 c4 0c             	add    esp,0xc
c0016890:	c3                   	ret    
c0016891:	90                   	nop

c0016892 <Mouse::~Mouse()>:
c0016892:	83 ec 0c             	sub    esp,0xc
c0016895:	83 ec 0c             	sub    esp,0xc
c0016898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689c:	e8 cd ff ff ff       	call   c001686e <Mouse::~Mouse()>
c00168a1:	83 c4 10             	add    esp,0x10
c00168a4:	83 ec 08             	sub    esp,0x8
c00168a7:	68 58 01 00 00       	push   0x158
c00168ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b0:	e8 bb c5 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00168b5:	83 c4 10             	add    esp,0x10
c00168b8:	83 c4 0c             	add    esp,0xc
c00168bb:	c3                   	ret    

c00168bc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168bc:	55                   	push   ebp
c00168bd:	57                   	push   edi
c00168be:	56                   	push   esi
c00168bf:	53                   	push   ebx
c00168c0:	81 ec 28 01 00 00    	sub    esp,0x128
c00168c6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168cd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168d4:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168db:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168ea:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168f1:	e8 6c dd ff ff       	call   c0014662 <Device::getName()>
c00168f6:	5a                   	pop    edx
c00168f7:	59                   	pop    ecx
c00168f8:	50                   	push   eax
c00168f9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00168fd:	55                   	push   ebp
c00168fe:	e8 31 9f fe ff       	call   c0000834 <strcpy>
c0016903:	5b                   	pop    ebx
c0016904:	58                   	pop    eax
c0016905:	68 28 b2 02 c0       	push   0xc002b228
c001690a:	55                   	push   ebp
c001690b:	e8 64 a0 fe ff       	call   c0000974 <strcat>
c0016910:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016917:	e8 24 8f ff ff       	call   c000f840 <malloc>
c001691c:	83 c4 0c             	add    esp,0xc
c001691f:	89 c3                	mov    ebx,eax
c0016921:	57                   	push   edi
c0016922:	56                   	push   esi
c0016923:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016927:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001692b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016932:	55                   	push   ebp
c0016933:	50                   	push   eax
c0016934:	e8 cf fb ff ff       	call   c0016508 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016939:	83 c4 14             	add    esp,0x14
c001693c:	53                   	push   ebx
c001693d:	e8 7c fc ff ff       	call   c00165be <LogicalDisk::assignDriveLetter()>
c0016942:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016945:	89 c6                	mov    esi,eax
c0016947:	e8 28 fd ff ff       	call   c0016674 <LogicalDisk::mount()>
c001694c:	58                   	pop    eax
c001694d:	5a                   	pop    edx
c001694e:	53                   	push   ebx
c001694f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016956:	e8 1b da ff ff       	call   c0014376 <Device::addChild(Device*)>
c001695b:	59                   	pop    ecx
c001695c:	89 f0                	mov    eax,esi
c001695e:	5b                   	pop    ebx
c001695f:	0f be f0             	movsx  esi,al
c0016962:	56                   	push   esi
c0016963:	68 33 b2 02 c0       	push   0xc002b233
c0016968:	e8 e3 c5 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001696d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016973:	5b                   	pop    ebx
c0016974:	5e                   	pop    esi
c0016975:	5f                   	pop    edi
c0016976:	5d                   	pop    ebp
c0016977:	c3                   	ret    

c0016978 <createPartitionsForDisk(PhysicalDisk*)>:
c0016978:	55                   	push   ebp
c0016979:	57                   	push   edi
c001697a:	56                   	push   esi
c001697b:	53                   	push   ebx
c001697c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016982:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016989:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001698f:	3d 00 02 00 00       	cmp    eax,0x200
c0016994:	74 27                	je     c00169bd <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016996:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001699c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169a2:	83 ec 10             	sub    esp,0x10
c00169a5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169a9:	99                   	cdq    
c00169aa:	c1 e6 0a             	shl    esi,0xa
c00169ad:	52                   	push   edx
c00169ae:	89 fd                	mov    ebp,edi
c00169b0:	50                   	push   eax
c00169b1:	55                   	push   ebp
c00169b2:	56                   	push   esi
c00169b3:	e8 f4 ff 00 00       	call   c00269ac <__udivdi3>
c00169b8:	e9 b1 00 00 00       	jmp    c0016a6e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169bd:	83 ec 0c             	sub    esp,0xc
c00169c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169c2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169c6:	56                   	push   esi
c00169c7:	6a 01                	push   0x1
c00169c9:	6a 00                	push   0x0
c00169cb:	6a 00                	push   0x0
c00169cd:	53                   	push   ebx
c00169ce:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169d1:	83 c4 20             	add    esp,0x20
c00169d4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169dc:	75 0a                	jne    c00169e8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169de:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169e6:	74 2c                	je     c0016a14 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169e8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169ee:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169f4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169fa:	83 ec 10             	sub    esp,0x10
c00169fd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a01:	89 f7                	mov    edi,esi
c0016a03:	c1 e0 0a             	shl    eax,0xa
c0016a06:	c1 ff 1f             	sar    edi,0x1f
c0016a09:	57                   	push   edi
c0016a0a:	56                   	push   esi
c0016a0b:	52                   	push   edx
c0016a0c:	50                   	push   eax
c0016a0d:	e8 9a ff 00 00       	call   c00269ac <__udivdi3>
c0016a12:	eb 5a                	jmp    c0016a6e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a14:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a1b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a22:	83 e1 7f             	and    ecx,0x7f
c0016a25:	83 e0 7f             	and    eax,0x7f
c0016a28:	01 c1                	add    ecx,eax
c0016a2a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a31:	83 e0 7f             	and    eax,0x7f
c0016a34:	01 c1                	add    ecx,eax
c0016a36:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a3d:	83 e0 7f             	and    eax,0x7f
c0016a40:	00 c1                	add    cl,al
c0016a42:	74 41                	je     c0016a85 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a44:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a4a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a50:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a56:	83 ec 10             	sub    esp,0x10
c0016a59:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a5d:	89 f7                	mov    edi,esi
c0016a5f:	c1 e0 0a             	shl    eax,0xa
c0016a62:	c1 ff 1f             	sar    edi,0x1f
c0016a65:	57                   	push   edi
c0016a66:	56                   	push   esi
c0016a67:	52                   	push   edx
c0016a68:	50                   	push   eax
c0016a69:	e8 3e ff 00 00       	call   c00269ac <__udivdi3>
c0016a6e:	83 c4 14             	add    esp,0x14
c0016a71:	52                   	push   edx
c0016a72:	50                   	push   eax
c0016a73:	6a 00                	push   0x0
c0016a75:	6a 00                	push   0x0
c0016a77:	53                   	push   ebx
c0016a78:	e8 3f fe ff ff       	call   c00168bc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a7d:	83 c4 20             	add    esp,0x20
c0016a80:	e9 79 01 00 00       	jmp    c0016bfe <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a85:	89 f0                	mov    eax,esi
c0016a87:	31 f6                	xor    esi,esi
c0016a89:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a90:	75 02                	jne    c0016a94 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a92:	89 f1                	mov    ecx,esi
c0016a94:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a9b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016aa2:	c1 e2 08             	shl    edx,0x8
c0016aa5:	c1 e7 10             	shl    edi,0x10
c0016aa8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ab0:	09 fa                	or     edx,edi
c0016ab2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016aba:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016ac1:	83 c0 10             	add    eax,0x10
c0016ac4:	09 fa                	or     edx,edi
c0016ac6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016acd:	c1 e7 18             	shl    edi,0x18
c0016ad0:	09 fa                	or     edx,edi
c0016ad2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016ad9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016add:	c1 e7 10             	shl    edi,0x10
c0016ae0:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016ae7:	c1 e2 08             	shl    edx,0x8
c0016aea:	09 fa                	or     edx,edi
c0016aec:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016af3:	09 fa                	or     edx,edi
c0016af5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016afc:	c1 e7 18             	shl    edi,0x18
c0016aff:	09 fa                	or     edx,edi
c0016b01:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b05:	46                   	inc    esi
c0016b06:	83 fe 04             	cmp    esi,0x4
c0016b09:	0f 85 7a ff ff ff    	jne    c0016a89 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b13:	83 f0 01             	xor    eax,0x1
c0016b16:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b1a:	75 57                	jne    c0016b73 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b20:	83 f0 01             	xor    eax,0x1
c0016b23:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b27:	75 4a                	jne    c0016b73 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b29:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b2d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b35:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b3d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b43:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b49:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b4f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b53:	89 f7                	mov    edi,esi
c0016b55:	c1 e0 0a             	shl    eax,0xa
c0016b58:	c1 ff 1f             	sar    edi,0x1f
c0016b5b:	57                   	push   edi
c0016b5c:	56                   	push   esi
c0016b5d:	52                   	push   edx
c0016b5e:	50                   	push   eax
c0016b5f:	e8 48 fe 00 00       	call   c00269ac <__udivdi3>
c0016b64:	83 c4 10             	add    esp,0x10
c0016b67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b6f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b73:	84 c9                	test   cl,cl
c0016b75:	74 53                	je     c0016bca <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b77:	0f b6 c9             	movzx  ecx,cl
c0016b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b82:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b86:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b92:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b96:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016ba2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ba6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016baa:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bae:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bb2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bb6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bbe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bc2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bc6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bca:	31 ed                	xor    ebp,ebp
c0016bcc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bd0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bd4:	89 f8                	mov    eax,edi
c0016bd6:	09 f0                	or     eax,esi
c0016bd8:	74 1e                	je     c0016bf8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bda:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bde:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016be2:	89 d1                	mov    ecx,edx
c0016be4:	09 c1                	or     ecx,eax
c0016be6:	74 10                	je     c0016bf8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	57                   	push   edi
c0016bec:	56                   	push   esi
c0016bed:	52                   	push   edx
c0016bee:	50                   	push   eax
c0016bef:	53                   	push   ebx
c0016bf0:	e8 c7 fc ff ff       	call   c00168bc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bf5:	83 c4 20             	add    esp,0x20
c0016bf8:	45                   	inc    ebp
c0016bf9:	83 fd 04             	cmp    ebp,0x4
c0016bfc:	75 ce                	jne    c0016bcc <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016bfe:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c04:	5b                   	pop    ebx
c0016c05:	5e                   	pop    esi
c0016c06:	5f                   	pop    edi
c0016c07:	5d                   	pop    ebp
c0016c08:	c3                   	ret    
c0016c09:	90                   	nop

c0016c0a <Serial::Serial(char const*)>:
c0016c0a:	83 ec 0c             	sub    esp,0xc
c0016c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c11:	83 ec 08             	sub    esp,0x8
c0016c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c18:	50                   	push   eax
c0016c19:	e8 48 d9 ff ff       	call   c0014566 <Device::Device(char const*)>
c0016c1e:	83 c4 10             	add    esp,0x10
c0016c21:	ba 60 b2 02 c0       	mov    edx,0xc002b260
c0016c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2a:	89 10                	mov    DWORD PTR [eax],edx
c0016c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c30:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c3a:	90                   	nop
c0016c3b:	83 c4 0c             	add    esp,0xc
c0016c3e:	c3                   	ret    
c0016c3f:	90                   	nop

c0016c40 <Serial::~Serial()>:
c0016c40:	83 ec 0c             	sub    esp,0xc
c0016c43:	ba 60 b2 02 c0       	mov    edx,0xc002b260
c0016c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4c:	89 10                	mov    DWORD PTR [eax],edx
c0016c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c52:	83 ec 0c             	sub    esp,0xc
c0016c55:	50                   	push   eax
c0016c56:	e8 ed d5 ff ff       	call   c0014248 <Device::~Device()>
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	90                   	nop
c0016c5f:	83 c4 0c             	add    esp,0xc
c0016c62:	c3                   	ret    
c0016c63:	90                   	nop

c0016c64 <Serial::~Serial()>:
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	83 ec 0c             	sub    esp,0xc
c0016c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c6e:	e8 cd ff ff ff       	call   c0016c40 <Serial::~Serial()>
c0016c73:	83 c4 10             	add    esp,0x10
c0016c76:	83 ec 08             	sub    esp,0x8
c0016c79:	68 58 01 00 00       	push   0x158
c0016c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c82:	e8 e9 c1 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0016c87:	83 c4 10             	add    esp,0x10
c0016c8a:	83 c4 0c             	add    esp,0xc
c0016c8d:	c3                   	ret    

c0016c8e <Timer::Timer(char const*)>:
c0016c8e:	83 ec 0c             	sub    esp,0xc
c0016c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c95:	83 ec 08             	sub    esp,0x8
c0016c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c9c:	50                   	push   eax
c0016c9d:	e8 c4 d8 ff ff       	call   c0014566 <Device::Device(char const*)>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	ba a4 b2 02 c0       	mov    edx,0xc002b2a4
c0016caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cae:	89 10                	mov    DWORD PTR [eax],edx
c0016cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cbe:	90                   	nop
c0016cbf:	83 c4 0c             	add    esp,0xc
c0016cc2:	c3                   	ret    
c0016cc3:	90                   	nop

c0016cc4 <Timer::~Timer()>:
c0016cc4:	83 ec 0c             	sub    esp,0xc
c0016cc7:	ba a4 b2 02 c0       	mov    edx,0xc002b2a4
c0016ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd0:	89 10                	mov    DWORD PTR [eax],edx
c0016cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd6:	83 ec 0c             	sub    esp,0xc
c0016cd9:	50                   	push   eax
c0016cda:	e8 69 d5 ff ff       	call   c0014248 <Device::~Device()>
c0016cdf:	83 c4 10             	add    esp,0x10
c0016ce2:	90                   	nop
c0016ce3:	83 c4 0c             	add    esp,0xc
c0016ce6:	c3                   	ret    
c0016ce7:	90                   	nop

c0016ce8 <Timer::~Timer()>:
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	83 ec 0c             	sub    esp,0xc
c0016cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf2:	e8 cd ff ff ff       	call   c0016cc4 <Timer::~Timer()>
c0016cf7:	83 c4 10             	add    esp,0x10
c0016cfa:	83 ec 08             	sub    esp,0x8
c0016cfd:	68 5c 01 00 00       	push   0x15c
c0016d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d06:	e8 65 c1 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0016d0b:	83 c4 10             	add    esp,0x10
c0016d0e:	83 c4 0c             	add    esp,0xc
c0016d11:	c3                   	ret    

c0016d12 <Timer::read()>:
c0016d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d16:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d1c:	c3                   	ret    

c0016d1d <timerHandler(unsigned long long)>:
c0016d1d:	55                   	push   ebp
c0016d1e:	57                   	push   edi
c0016d1f:	56                   	push   esi
c0016d20:	53                   	push   ebx
c0016d21:	83 ec 0c             	sub    esp,0xc
c0016d24:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d28:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d2c:	01 35 50 ea 02 c0    	add    DWORD PTR ds:0xc002ea50,esi
c0016d32:	11 3d 54 ea 02 c0    	adc    DWORD PTR ds:0xc002ea54,edi
c0016d38:	80 3d ad e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3ad,0x0
c0016d3f:	0f 84 07 01 00 00    	je     c0016e4c <timerHandler(unsigned long long)+0x12f>
c0016d45:	e8 a9 70 00 00       	call   c001ddf3 <lockStuff()>
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	68 1c 19 03 c0       	push   0xc003191c
c0016d52:	e8 c7 1c 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d57:	c7 04 24 1c 19 03 c0 	mov    DWORD PTR [esp],0xc003191c
c0016d5e:	89 c3                	mov    ebx,eax
c0016d60:	e8 c1 1c 01 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	84 c0                	test   al,al
c0016d6a:	74 60                	je     c0016dcc <timerHandler(unsigned long long)+0xaf>
c0016d6c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d72:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d75:	85 c0                	test   eax,eax
c0016d77:	0f 85 91 00 00 00    	jne    c0016e0e <timerHandler(unsigned long long)+0xf1>
c0016d7d:	e9 be 00 00 00       	jmp    c0016e40 <timerHandler(unsigned long long)+0x123>
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	55                   	push   ebp
c0016d86:	e8 59 76 00 00       	call   c001e3e4 <unblockTask(ThreadControlBlock*)>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	39 eb                	cmp    ebx,ebp
c0016d90:	75 12                	jne    c0016da4 <timerHandler(unsigned long long)+0x87>
c0016d92:	83 ec 0c             	sub    esp,0xc
c0016d95:	68 1c 19 03 c0       	push   0xc003191c
c0016d9a:	e8 7f 1c 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d9f:	89 c3                	mov    ebx,eax
c0016da1:	83 c4 10             	add    esp,0x10
c0016da4:	83 ec 0c             	sub    esp,0xc
c0016da7:	68 1c 19 03 c0       	push   0xc003191c
c0016dac:	e8 75 1c 01 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016db1:	83 c4 10             	add    esp,0x10
c0016db4:	84 c0                	test   al,al
c0016db6:	75 b4                	jne    c0016d6c <timerHandler(unsigned long long)+0x4f>
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	68 1c 19 03 c0       	push   0xc003191c
c0016dc0:	e8 59 1c 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dc5:	83 c4 10             	add    esp,0x10
c0016dc8:	39 d8                	cmp    eax,ebx
c0016dca:	74 a0                	je     c0016d6c <timerHandler(unsigned long long)+0x4f>
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	68 1c 19 03 c0       	push   0xc003191c
c0016dd4:	e8 45 1c 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd9:	c7 04 24 1c 19 03 c0 	mov    DWORD PTR [esp],0xc003191c
c0016de0:	89 c5                	mov    ebp,eax
c0016de2:	e8 5b 1c 01 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016de7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016dea:	83 c4 10             	add    esp,0x10
c0016ded:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016df0:	39 15 50 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea50,edx
c0016df6:	a1 54 ea 02 c0       	mov    eax,ds:0xc002ea54
c0016dfb:	19 c8                	sbb    eax,ecx
c0016dfd:	73 83                	jae    c0016d82 <timerHandler(unsigned long long)+0x65>
c0016dff:	50                   	push   eax
c0016e00:	50                   	push   eax
c0016e01:	55                   	push   ebp
c0016e02:	68 1c 19 03 c0       	push   0xc003191c
c0016e07:	e8 e4 1c 01 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e0c:	eb 93                	jmp    c0016da1 <timerHandler(unsigned long long)+0x84>
c0016e0e:	80 3d ac e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3ac,0x0
c0016e15:	74 29                	je     c0016e40 <timerHandler(unsigned long long)+0x123>
c0016e17:	39 c6                	cmp    esi,eax
c0016e19:	bb 00 00 00 00       	mov    ebx,0x0
c0016e1e:	19 df                	sbb    edi,ebx
c0016e20:	72 19                	jb     c0016e3b <timerHandler(unsigned long long)+0x11e>
c0016e22:	e8 a5 6f 00 00       	call   c001ddcc <lockScheduler()>
c0016e27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e2c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e2f:	e8 d4 72 00 00       	call   c001e108 <schedule()>
c0016e34:	e8 95 6f 00 00       	call   c001ddce <unlockScheduler()>
c0016e39:	eb 05                	jmp    c0016e40 <timerHandler(unsigned long long)+0x123>
c0016e3b:	29 f0                	sub    eax,esi
c0016e3d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e40:	83 c4 0c             	add    esp,0xc
c0016e43:	5b                   	pop    ebx
c0016e44:	5e                   	pop    esi
c0016e45:	5f                   	pop    edi
c0016e46:	5d                   	pop    ebp
c0016e47:	e9 41 73 00 00       	jmp    c001e18d <unlockStuff()>
c0016e4c:	83 c4 0c             	add    esp,0xc
c0016e4f:	5b                   	pop    ebx
c0016e50:	5e                   	pop    esi
c0016e51:	5f                   	pop    edi
c0016e52:	5d                   	pop    ebp
c0016e53:	c3                   	ret    

c0016e54 <setupTimer(int)>:
c0016e54:	57                   	push   edi
c0016e55:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0016e5a:	56                   	push   esi
c0016e5b:	53                   	push   ebx
c0016e5c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e66:	83 ec 0c             	sub    esp,0xc
c0016e69:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e6f:	e8 ee d7 ff ff       	call   c0014662 <Device::getName()>
c0016e74:	83 c4 10             	add    esp,0x10
c0016e77:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e7a:	0f 85 8d 00 00 00    	jne    c0016f0d <setupTimer(int)+0xb9>
c0016e80:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0016e85:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e8c:	74 7f                	je     c0016f0d <setupTimer(int)+0xb9>
c0016e8e:	83 ec 0c             	sub    esp,0xc
c0016e91:	68 5c 01 00 00       	push   0x15c
c0016e96:	e8 a5 89 ff ff       	call   c000f840 <malloc>
c0016e9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e9e:	89 c3                	mov    ebx,eax
c0016ea0:	e8 e1 f6 00 00       	call   c0026586 <PIT::PIT()>
c0016ea5:	59                   	pop    ecx
c0016ea6:	5f                   	pop    edi
c0016ea7:	53                   	push   ebx
c0016ea8:	ff 35 a8 e3 02 c0    	push   DWORD PTR ds:0xc002e3a8
c0016eae:	e8 c3 d4 ff ff       	call   c0014376 <Device::addChild(Device*)>
c0016eb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eb5:	6a 00                	push   0x0
c0016eb7:	6a 00                	push   0x0
c0016eb9:	56                   	push   esi
c0016eba:	53                   	push   ebx
c0016ebb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ebe:	83 c4 14             	add    esp,0x14
c0016ec1:	68 60 01 00 00       	push   0x160
c0016ec6:	e8 75 89 ff ff       	call   c000f840 <malloc>
c0016ecb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ece:	89 c7                	mov    edi,eax
c0016ed0:	e8 61 f5 00 00       	call   c0026436 <APICTimer::APICTimer()>
c0016ed5:	6a 00                	push   0x0
c0016ed7:	6a 00                	push   0x0
c0016ed9:	56                   	push   esi
c0016eda:	57                   	push   edi
c0016edb:	e8 58 f4 00 00       	call   c0026338 <APICTimer::open(int, int, void*)>
c0016ee0:	83 c4 20             	add    esp,0x20
c0016ee3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ee5:	6a 00                	push   0x0
c0016ee7:	6a 00                	push   0x0
c0016ee9:	6a 00                	push   0x0
c0016eeb:	53                   	push   ebx
c0016eec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016eef:	58                   	pop    eax
c0016ef0:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0016ef5:	5a                   	pop    edx
c0016ef6:	57                   	push   edi
c0016ef7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016efd:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f03:	e8 6e d4 ff ff       	call   c0014376 <Device::addChild(Device*)>
c0016f08:	83 c4 10             	add    esp,0x10
c0016f0b:	eb 33                	jmp    c0016f40 <setupTimer(int)+0xec>
c0016f0d:	83 ec 0c             	sub    esp,0xc
c0016f10:	68 5c 01 00 00       	push   0x15c
c0016f15:	e8 26 89 ff ff       	call   c000f840 <malloc>
c0016f1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f1d:	89 c3                	mov    ebx,eax
c0016f1f:	e8 62 f6 00 00       	call   c0026586 <PIT::PIT()>
c0016f24:	58                   	pop    eax
c0016f25:	5a                   	pop    edx
c0016f26:	53                   	push   ebx
c0016f27:	ff 35 a8 e3 02 c0    	push   DWORD PTR ds:0xc002e3a8
c0016f2d:	e8 44 d4 ff ff       	call   c0014376 <Device::addChild(Device*)>
c0016f32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f34:	6a 00                	push   0x0
c0016f36:	6a 00                	push   0x0
c0016f38:	56                   	push   esi
c0016f39:	53                   	push   ebx
c0016f3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f3d:	83 c4 20             	add    esp,0x20
c0016f40:	89 d8                	mov    eax,ebx
c0016f42:	5b                   	pop    ebx
c0016f43:	5e                   	pop    esi
c0016f44:	5f                   	pop    edi
c0016f45:	c3                   	ret    

c0016f46 <VCache::VCache(PhysicalDisk*)>:
c0016f46:	53                   	push   ebx
c0016f47:	83 ec 18             	sub    esp,0x18
c0016f4a:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c0016f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f53:	89 10                	mov    DWORD PTR [eax],edx
c0016f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f59:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f64:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f76:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f81:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f88:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f93:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fad:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc0:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd0:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fd7:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fdf:	83 ec 0c             	sub    esp,0xc
c0016fe2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fe6:	e8 55 88 ff ff       	call   c000f840 <malloc>
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	89 c3                	mov    ebx,eax
c0016ff0:	83 ec 0c             	sub    esp,0xc
c0016ff3:	53                   	push   ebx
c0016ff4:	e8 f3 6e 00 00       	call   c001deec <Mutex::Mutex()>
c0016ff9:	83 c4 10             	add    esp,0x10
c0016ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017000:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017007:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001700b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001700e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017012:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017019:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001701d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017027:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001702a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001702e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017034:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001703a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001703e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017041:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017048:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001704c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017050:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017056:	05 00 01 00 00       	add    eax,0x100
c001705b:	c1 e0 04             	shl    eax,0x4
c001705e:	83 ec 0c             	sub    esp,0xc
c0017061:	50                   	push   eax
c0017062:	e8 d9 87 ff ff       	call   c000f840 <malloc>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	89 c2                	mov    edx,eax
c001706c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017070:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017077:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017082:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017086:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001708a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017090:	c1 e0 07             	shl    eax,0x7
c0017093:	83 ec 0c             	sub    esp,0xc
c0017096:	50                   	push   eax
c0017097:	e8 a4 87 ff ff       	call   c000f840 <malloc>
c001709c:	83 c4 10             	add    esp,0x10
c001709f:	89 c2                	mov    edx,eax
c00170a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170a8:	90                   	nop
c00170a9:	83 c4 18             	add    esp,0x18
c00170ac:	5b                   	pop    ebx
c00170ad:	c3                   	ret    

c00170ae <VCache::invalidateReadBuffer()>:
c00170ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170b2:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170b8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170bc:	c3                   	ret    
c00170bd:	90                   	nop

c00170be <VCache::writeWriteBuffer()>:
c00170be:	53                   	push   ebx
c00170bf:	83 ec 14             	sub    esp,0x14
c00170c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00170cb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170d1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170d4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170d7:	50                   	push   eax
c00170d8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170db:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170e2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170e9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170ed:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170f4:	83 c4 28             	add    esp,0x28
c00170f7:	5b                   	pop    ebx
c00170f8:	c3                   	ret    
c00170f9:	90                   	nop

c00170fa <VCache::~VCache()>:
c00170fa:	83 ec 0c             	sub    esp,0xc
c00170fd:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c0017102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017106:	89 10                	mov    DWORD PTR [eax],edx
c0017108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001710c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001710f:	84 c0                	test   al,al
c0017111:	74 0f                	je     c0017122 <VCache::~VCache()+0x28>
c0017113:	83 ec 0c             	sub    esp,0xc
c0017116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001711a:	e8 9f ff ff ff       	call   c00170be <VCache::writeWriteBuffer()>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017126:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017129:	83 ec 0c             	sub    esp,0xc
c001712c:	50                   	push   eax
c001712d:	e8 1e 87 ff ff       	call   c000f850 <free>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017139:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001713c:	83 ec 0c             	sub    esp,0xc
c001713f:	50                   	push   eax
c0017140:	e8 0b 87 ff ff       	call   c000f850 <free>
c0017145:	83 c4 10             	add    esp,0x10
c0017148:	90                   	nop
c0017149:	83 c4 0c             	add    esp,0xc
c001714c:	c3                   	ret    
c001714d:	90                   	nop

c001714e <VCache::~VCache()>:
c001714e:	83 ec 0c             	sub    esp,0xc
c0017151:	83 ec 0c             	sub    esp,0xc
c0017154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017158:	e8 9d ff ff ff       	call   c00170fa <VCache::~VCache()>
c001715d:	83 c4 10             	add    esp,0x10
c0017160:	83 ec 08             	sub    esp,0x8
c0017163:	6a 44                	push   0x44
c0017165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017169:	e8 02 bd ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c001716e:	83 c4 10             	add    esp,0x10
c0017171:	83 c4 0c             	add    esp,0xc
c0017174:	c3                   	ret    
c0017175:	90                   	nop

c0017176 <VCache::write(unsigned long long, int, void*)>:
c0017176:	55                   	push   ebp
c0017177:	57                   	push   edi
c0017178:	56                   	push   esi
c0017179:	53                   	push   ebx
c001717a:	83 ec 28             	sub    esp,0x28
c001717d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017181:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017185:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017189:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001718d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017190:	e8 b9 71 00 00       	call   c001e34e <Semaphore::acquire()>
c0017195:	83 c4 10             	add    esp,0x10
c0017198:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001719c:	74 0c                	je     c00171aa <VCache::write(unsigned long long, int, void*)+0x34>
c001719e:	83 ec 0c             	sub    esp,0xc
c00171a1:	53                   	push   ebx
c00171a2:	e8 07 ff ff ff       	call   c00170ae <VCache::invalidateReadBuffer()>
c00171a7:	83 c4 10             	add    esp,0x10
c00171aa:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171ae:	74 66                	je     c0017216 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171b0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171b3:	99                   	cdq    
c00171b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171b8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171bb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171be:	89 c1                	mov    ecx,eax
c00171c0:	89 d0                	mov    eax,edx
c00171c2:	31 f1                	xor    ecx,esi
c00171c4:	31 f8                	xor    eax,edi
c00171c6:	89 ca                	mov    edx,ecx
c00171c8:	09 c2                	or     edx,eax
c00171ca:	75 3e                	jne    c001720a <VCache::write(unsigned long long, int, void*)+0x94>
c00171cc:	83 fd 01             	cmp    ebp,0x1
c00171cf:	75 39                	jne    c001720a <VCache::write(unsigned long long, int, void*)+0x94>
c00171d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171d4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171da:	51                   	push   ecx
c00171db:	50                   	push   eax
c00171dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171e0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171e4:	0f af c8             	imul   ecx,eax
c00171e7:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171ea:	51                   	push   ecx
c00171eb:	e8 54 95 fe ff       	call   c0000744 <memcpy>
c00171f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171f3:	83 c4 10             	add    esp,0x10
c00171f6:	40                   	inc    eax
c00171f7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00171fa:	83 c0 80             	add    eax,0xffffff80
c00171fd:	75 57                	jne    c0017256 <VCache::write(unsigned long long, int, void*)+0xe0>
c00171ff:	83 ec 0c             	sub    esp,0xc
c0017202:	53                   	push   ebx
c0017203:	e8 b6 fe ff ff       	call   c00170be <VCache::writeWriteBuffer()>
c0017208:	eb 34                	jmp    c001723e <VCache::write(unsigned long long, int, void*)+0xc8>
c001720a:	83 ec 0c             	sub    esp,0xc
c001720d:	53                   	push   ebx
c001720e:	e8 ab fe ff ff       	call   c00170be <VCache::writeWriteBuffer()>
c0017213:	83 c4 10             	add    esp,0x10
c0017216:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017219:	83 fd 7f             	cmp    ebp,0x7f
c001721c:	7f 25                	jg     c0017243 <VCache::write(unsigned long long, int, void*)+0xcd>
c001721e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017221:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017224:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017227:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001722b:	52                   	push   edx
c001722c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017232:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017236:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017239:	e8 06 95 fe ff       	call   c0000744 <memcpy>
c001723e:	83 c4 10             	add    esp,0x10
c0017241:	eb 13                	jmp    c0017256 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017243:	83 ec 0c             	sub    esp,0xc
c0017246:	8b 10                	mov    edx,DWORD PTR [eax]
c0017248:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001724c:	55                   	push   ebp
c001724d:	57                   	push   edi
c001724e:	56                   	push   esi
c001724f:	50                   	push   eax
c0017250:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017253:	83 c4 20             	add    esp,0x20
c0017256:	83 ec 0c             	sub    esp,0xc
c0017259:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001725c:	e8 9b 76 00 00       	call   c001e8fc <Semaphore::release()>
c0017261:	83 c4 2c             	add    esp,0x2c
c0017264:	31 c0                	xor    eax,eax
c0017266:	5b                   	pop    ebx
c0017267:	5e                   	pop    esi
c0017268:	5f                   	pop    edi
c0017269:	5d                   	pop    ebp
c001726a:	c3                   	ret    
c001726b:	90                   	nop

c001726c <VCache::read(unsigned long long, int, void*)>:
c001726c:	55                   	push   ebp
c001726d:	57                   	push   edi
c001726e:	56                   	push   esi
c001726f:	53                   	push   ebx
c0017270:	83 ec 28             	sub    esp,0x28
c0017273:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017277:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001727b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001727f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017283:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017287:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001728b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001728f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017292:	e8 b7 70 00 00       	call   c001e34e <Semaphore::acquire()>
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001729e:	74 0c                	je     c00172ac <VCache::read(unsigned long long, int, void*)+0x40>
c00172a0:	83 ec 0c             	sub    esp,0xc
c00172a3:	53                   	push   ebx
c00172a4:	e8 15 fe ff ff       	call   c00170be <VCache::writeWriteBuffer()>
c00172a9:	83 c4 10             	add    esp,0x10
c00172ac:	83 fe 01             	cmp    esi,0x1
c00172af:	0f 85 80 00 00 00    	jne    c0017335 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172b8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172bf:	75 74                	jne    c0017335 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172c1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172c4:	89 d1                	mov    ecx,edx
c00172c6:	f7 d9                	neg    ecx
c00172c8:	89 cf                	mov    edi,ecx
c00172ca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172ce:	c1 ff 1f             	sar    edi,0x1f
c00172d1:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172d4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172d8:	89 ce                	mov    esi,ecx
c00172da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172de:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172e2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172e6:	89 cf                	mov    edi,ecx
c00172e8:	74 0a                	je     c00172f4 <VCache::read(unsigned long long, int, void*)+0x88>
c00172ea:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172ed:	75 05                	jne    c00172f4 <VCache::read(unsigned long long, int, void*)+0x88>
c00172ef:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172f2:	74 1c                	je     c0017310 <VCache::read(unsigned long long, int, void*)+0xa4>
c00172f4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00172f8:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00172fb:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00172fe:	83 ec 0c             	sub    esp,0xc
c0017301:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017303:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017306:	52                   	push   edx
c0017307:	57                   	push   edi
c0017308:	56                   	push   esi
c0017309:	50                   	push   eax
c001730a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001730d:	83 c4 20             	add    esp,0x20
c0017310:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017313:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017319:	50                   	push   eax
c001731a:	52                   	push   edx
c001731b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001731e:	48                   	dec    eax
c001731f:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017323:	0f af c2             	imul   eax,edx
c0017326:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017329:	50                   	push   eax
c001732a:	55                   	push   ebp
c001732b:	e8 14 94 fe ff       	call   c0000744 <memcpy>
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	eb 21                	jmp    c0017356 <VCache::read(unsigned long long, int, void*)+0xea>
c0017335:	83 ec 0c             	sub    esp,0xc
c0017338:	53                   	push   ebx
c0017339:	e8 70 fd ff ff       	call   c00170ae <VCache::invalidateReadBuffer()>
c001733e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017341:	8b 10                	mov    edx,DWORD PTR [eax]
c0017343:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017346:	56                   	push   esi
c0017347:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001734b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001734f:	50                   	push   eax
c0017350:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017353:	83 c4 20             	add    esp,0x20
c0017356:	83 ec 0c             	sub    esp,0xc
c0017359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001735c:	e8 9b 75 00 00       	call   c001e8fc <Semaphore::release()>
c0017361:	83 c4 2c             	add    esp,0x2c
c0017364:	31 c0                	xor    eax,eax
c0017366:	5b                   	pop    ebx
c0017367:	5e                   	pop    esi
c0017368:	5f                   	pop    edi
c0017369:	5d                   	pop    ebp
c001736a:	c3                   	ret    
c001736b:	90                   	nop

c001736c <Video::putrect(int, int, int, int, unsigned int)>:
c001736c:	55                   	push   ebp
c001736d:	57                   	push   edi
c001736e:	56                   	push   esi
c001736f:	53                   	push   ebx
c0017370:	83 ec 1c             	sub    esp,0x1c
c0017373:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017377:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001737b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001737f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017383:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001738b:	01 df                	add    edi,ebx
c001738d:	39 fb                	cmp    ebx,edi
c001738f:	7d 1f                	jge    c00173b0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017391:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017395:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017399:	7d 12                	jge    c00173ad <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001739b:	8b 16                	mov    edx,DWORD PTR [esi]
c001739d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173a1:	53                   	push   ebx
c00173a2:	55                   	push   ebp
c00173a3:	45                   	inc    ebp
c00173a4:	56                   	push   esi
c00173a5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173a8:	83 c4 10             	add    esp,0x10
c00173ab:	eb e8                	jmp    c0017395 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173ad:	43                   	inc    ebx
c00173ae:	eb dd                	jmp    c001738d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173b0:	83 c4 1c             	add    esp,0x1c
c00173b3:	5b                   	pop    ebx
c00173b4:	5e                   	pop    esi
c00173b5:	5f                   	pop    edi
c00173b6:	5d                   	pop    ebp
c00173b7:	c3                   	ret    

c00173b8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173b8:	55                   	push   ebp
c00173b9:	57                   	push   edi
c00173ba:	31 ff                	xor    edi,edi
c00173bc:	56                   	push   esi
c00173bd:	53                   	push   ebx
c00173be:	83 ec 1c             	sub    esp,0x1c
c00173c1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173c9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173d0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173d9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173e1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173e4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173e8:	01 f9                	add    ecx,edi
c00173ea:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173ee:	7d 2f                	jge    c001741f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173f0:	31 f6                	xor    esi,esi
c00173f2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173f6:	01 f2                	add    edx,esi
c00173f8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00173fc:	7d 1a                	jge    c0017418 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00173fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017401:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017404:	46                   	inc    esi
c0017405:	51                   	push   ecx
c0017406:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001740a:	52                   	push   edx
c001740b:	55                   	push   ebp
c001740c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001740f:	83 c4 10             	add    esp,0x10
c0017412:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017416:	eb da                	jmp    c00173f2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017418:	47                   	inc    edi
c0017419:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001741d:	eb c5                	jmp    c00173e4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001741f:	83 c4 1c             	add    esp,0x1c
c0017422:	5b                   	pop    ebx
c0017423:	5e                   	pop    esi
c0017424:	5f                   	pop    edi
c0017425:	5d                   	pop    ebp
c0017426:	c3                   	ret    
c0017427:	90                   	nop

c0017428 <Video::blit(unsigned int*, int, int, int, int)>:
c0017428:	55                   	push   ebp
c0017429:	57                   	push   edi
c001742a:	56                   	push   esi
c001742b:	53                   	push   ebx
c001742c:	83 ec 1c             	sub    esp,0x1c
c001742f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017433:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017437:	85 c0                	test   eax,eax
c0017439:	79 02                	jns    c001743d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001743b:	31 c0                	xor    eax,eax
c001743d:	c1 e0 02             	shl    eax,0x2
c0017440:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017444:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017448:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001744c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017450:	39 d8                	cmp    eax,ebx
c0017452:	7e 49                	jle    c001749d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017454:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001745a:	7c 41                	jl     c001749d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001745c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017460:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017464:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017468:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001746c:	39 f9                	cmp    ecx,edi
c001746e:	7e 22                	jle    c0017492 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017470:	83 c5 04             	add    ebp,0x4
c0017473:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017479:	7c 14                	jl     c001748f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001747b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001747d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017480:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017484:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017488:	56                   	push   esi
c0017489:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001748c:	83 c4 10             	add    esp,0x10
c001748f:	47                   	inc    edi
c0017490:	eb d2                	jmp    c0017464 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017492:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017496:	43                   	inc    ebx
c0017497:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001749b:	eb ab                	jmp    c0017448 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001749d:	83 c4 1c             	add    esp,0x1c
c00174a0:	5b                   	pop    ebx
c00174a1:	5e                   	pop    esi
c00174a2:	5f                   	pop    edi
c00174a3:	5d                   	pop    ebp
c00174a4:	c3                   	ret    
c00174a5:	90                   	nop

c00174a6 <Video::clearScreen(unsigned int)>:
c00174a6:	57                   	push   edi
c00174a7:	56                   	push   esi
c00174a8:	53                   	push   ebx
c00174a9:	31 db                	xor    ebx,ebx
c00174ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174af:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174b5:	7e 1f                	jle    c00174d6 <Video::clearScreen(unsigned int)+0x30>
c00174b7:	31 ff                	xor    edi,edi
c00174b9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174bf:	7e 12                	jle    c00174d3 <Video::clearScreen(unsigned int)+0x2d>
c00174c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00174c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174c7:	53                   	push   ebx
c00174c8:	57                   	push   edi
c00174c9:	47                   	inc    edi
c00174ca:	56                   	push   esi
c00174cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174ce:	83 c4 10             	add    esp,0x10
c00174d1:	eb e6                	jmp    c00174b9 <Video::clearScreen(unsigned int)+0x13>
c00174d3:	43                   	inc    ebx
c00174d4:	eb d9                	jmp    c00174af <Video::clearScreen(unsigned int)+0x9>
c00174d6:	5b                   	pop    ebx
c00174d7:	5e                   	pop    esi
c00174d8:	5f                   	pop    edi
c00174d9:	c3                   	ret    

c00174da <Video::putpixel(int, int, unsigned int)>:
c00174da:	c7 44 24 04 dc b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2dc
c00174e2:	e9 0a 31 00 00       	jmp    c001a5f1 <Krnl::panic(char const*)>
c00174e7:	90                   	nop

c00174e8 <Video::Video(char const*)>:
c00174e8:	83 ec 0c             	sub    esp,0xc
c00174eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ef:	83 ec 08             	sub    esp,0x8
c00174f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174f6:	50                   	push   eax
c00174f7:	e8 6a d0 ff ff       	call   c0014566 <Device::Device(char const*)>
c00174fc:	83 c4 10             	add    esp,0x10
c00174ff:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c0017504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017508:	89 10                	mov    DWORD PTR [eax],edx
c001750a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001750e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017518:	90                   	nop
c0017519:	83 c4 0c             	add    esp,0xc
c001751c:	c3                   	ret    
c001751d:	90                   	nop

c001751e <Video::~Video()>:
c001751e:	83 ec 0c             	sub    esp,0xc
c0017521:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c0017526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001752a:	89 10                	mov    DWORD PTR [eax],edx
c001752c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017530:	83 ec 0c             	sub    esp,0xc
c0017533:	50                   	push   eax
c0017534:	e8 0f cd ff ff       	call   c0014248 <Device::~Device()>
c0017539:	83 c4 10             	add    esp,0x10
c001753c:	90                   	nop
c001753d:	83 c4 0c             	add    esp,0xc
c0017540:	c3                   	ret    
c0017541:	90                   	nop

c0017542 <Video::~Video()>:
c0017542:	83 ec 0c             	sub    esp,0xc
c0017545:	83 ec 0c             	sub    esp,0xc
c0017548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001754c:	e8 cd ff ff ff       	call   c001751e <Video::~Video()>
c0017551:	83 c4 10             	add    esp,0x10
c0017554:	83 ec 08             	sub    esp,0x8
c0017557:	68 64 01 00 00       	push   0x164
c001755c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017560:	e8 0b b9 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0017565:	83 c4 10             	add    esp,0x10
c0017568:	83 c4 0c             	add    esp,0xc
c001756b:	c3                   	ret    

c001756c <Video::isMonochrome()>:
c001756c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017570:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017576:	c3                   	ret    
c0017577:	90                   	nop

c0017578 <Video::getWidth()>:
c0017578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001757c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017582:	c3                   	ret    
c0017583:	90                   	nop

c0017584 <Video::getHeight()>:
c0017584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017588:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001758e:	c3                   	ret    
c001758f:	90                   	nop

c0017590 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017590:	55                   	push   ebp
c0017591:	57                   	push   edi
c0017592:	56                   	push   esi
c0017593:	53                   	push   ebx
c0017594:	83 ec 2c             	sub    esp,0x2c
c0017597:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001759b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001759f:	83 f8 01             	cmp    eax,0x1
c00175a2:	19 c9                	sbb    ecx,ecx
c00175a4:	31 db                	xor    ebx,ebx
c00175a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175aa:	89 cd                	mov    ebp,ecx
c00175ac:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175b4:	f7 d5                	not    ebp
c00175b6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175bc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175c0:	01 d8                	add    eax,ebx
c00175c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175c6:	56                   	push   esi
c00175c7:	e8 b8 ff ff ff       	call   c0017584 <Video::getHeight()>
c00175cc:	59                   	pop    ecx
c00175cd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175d1:	7e 70                	jle    c0017643 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175d7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175db:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175e2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175e6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175f1:	89 f8                	mov    eax,edi
c00175f3:	83 c0 20             	add    eax,0x20
c00175f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175fa:	56                   	push   esi
c00175fb:	e8 78 ff ff ff       	call   c0017578 <Video::getWidth()>
c0017600:	5a                   	pop    edx
c0017601:	39 c7                	cmp    edi,eax
c0017603:	7d 34                	jge    c0017639 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017605:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001760a:	74 05                	je     c0017611 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001760c:	8b 06                	mov    eax,DWORD PTR [esi]
c001760e:	55                   	push   ebp
c001760f:	eb 0d                	jmp    c001761e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017611:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017616:	74 12                	je     c001762a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017618:	8b 06                	mov    eax,DWORD PTR [esi]
c001761a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001761e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017622:	57                   	push   edi
c0017623:	56                   	push   esi
c0017624:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001762e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017632:	47                   	inc    edi
c0017633:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017637:	75 c1                	jne    c00175fa <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017639:	43                   	inc    ebx
c001763a:	83 fb 20             	cmp    ebx,0x20
c001763d:	0f 85 79 ff ff ff    	jne    c00175bc <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017643:	83 c4 2c             	add    esp,0x2c
c0017646:	5b                   	pop    ebx
c0017647:	5e                   	pop    esi
c0017648:	5f                   	pop    edi
c0017649:	5d                   	pop    ebp
c001764a:	c3                   	ret    
c001764b:	90                   	nop

c001764c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001764c:	55                   	push   ebp
c001764d:	57                   	push   edi
c001764e:	56                   	push   esi
c001764f:	53                   	push   ebx
c0017650:	83 ec 28             	sub    esp,0x28
c0017653:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017657:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001765b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001765f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017663:	c1 e7 08             	shl    edi,0x8
c0017666:	01 c7                	add    edi,eax
c0017668:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001766c:	c1 e0 08             	shl    eax,0x8
c001766f:	01 d0                	add    eax,edx
c0017671:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017679:	0f af c7             	imul   eax,edi
c001767c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017683:	50                   	push   eax
c0017684:	e8 b7 81 ff ff       	call   c000f840 <malloc>
c0017689:	83 c4 10             	add    esp,0x10
c001768c:	89 c5                	mov    ebp,eax
c001768e:	85 c0                	test   eax,eax
c0017690:	75 15                	jne    c00176a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017692:	83 ec 0c             	sub    esp,0xc
c0017695:	68 fd b2 02 c0       	push   0xc002b2fd
c001769a:	e8 b1 b8 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001769f:	83 c4 10             	add    esp,0x10
c00176a2:	e9 1c 01 00 00       	jmp    c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176a7:	be 12 00 00 00       	mov    esi,0x12
c00176ac:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176b0:	74 11                	je     c00176c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176b2:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176b6:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176ba:	c1 fe 03             	sar    esi,0x3
c00176bd:	0f af f0             	imul   esi,eax
c00176c0:	83 c6 12             	add    esi,0x12
c00176c3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176c7:	74 04                	je     c00176cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176c9:	85 ff                	test   edi,edi
c00176cb:	75 12                	jne    c00176df <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176cd:	83 ec 0c             	sub    esp,0xc
c00176d0:	68 14 b3 02 c0       	push   0xc002b314
c00176d5:	e8 76 b8 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00176da:	e9 ce 00 00 00       	jmp    c00177ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176df:	52                   	push   edx
c00176e0:	52                   	push   edx
c00176e1:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176e5:	50                   	push   eax
c00176e6:	68 29 b3 02 c0       	push   0xc002b329
c00176eb:	e8 60 b8 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00176f0:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176f4:	83 c4 10             	add    esp,0x10
c00176f7:	80 fa 02             	cmp    dl,0x2
c00176fa:	0f 85 98 00 00 00    	jne    c0017798 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017700:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017705:	75 10                	jne    c0017717 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017707:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001770b:	75 0a                	jne    c0017717 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001770d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017710:	83 e8 18             	sub    eax,0x18
c0017713:	a8 f7                	test   al,0xf7
c0017715:	74 0a                	je     c0017721 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017717:	83 ec 0c             	sub    esp,0xc
c001771a:	68 36 b3 02 c0       	push   0xc002b336
c001771f:	eb 7f                	jmp    c00177a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017721:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017729:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017731:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017735:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001773d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017741:	75 0c                	jne    c001774f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017743:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017748:	c1 e0 18             	shl    eax,0x18
c001774b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001774f:	41                   	inc    ecx
c0017750:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017755:	c1 e2 10             	shl    edx,0x10
c0017758:	89 d0                	mov    eax,edx
c001775a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001775f:	c1 e2 08             	shl    edx,0x8
c0017762:	09 c2                	or     edx,eax
c0017764:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017768:	09 c2                	or     edx,eax
c001776a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001776e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017772:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017776:	c1 f8 03             	sar    eax,0x3
c0017779:	01 c6                	add    esi,eax
c001777b:	89 c8                	mov    eax,ecx
c001777d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017781:	39 c7                	cmp    edi,eax
c0017783:	7f b0                	jg     c0017735 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017785:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017789:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001778d:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017790:	7e 22                	jle    c00177b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017792:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017796:	eb 99                	jmp    c0017731 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017798:	50                   	push   eax
c0017799:	50                   	push   eax
c001779a:	52                   	push   edx
c001779b:	68 44 b3 02 c0       	push   0xc002b344
c00177a0:	e8 ab b7 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00177a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177a8:	e8 a3 80 ff ff       	call   c000f850 <free>
c00177ad:	83 c4 10             	add    esp,0x10
c00177b0:	31 ed                	xor    ebp,ebp
c00177b2:	eb 0f                	jmp    c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177b8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177bb:	89 38                	mov    DWORD PTR [eax],edi
c00177bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177c1:	89 08                	mov    DWORD PTR [eax],ecx
c00177c3:	83 c4 1c             	add    esp,0x1c
c00177c6:	89 e8                	mov    eax,ebp
c00177c8:	5b                   	pop    ebx
c00177c9:	5e                   	pop    esi
c00177ca:	5f                   	pop    edi
c00177cb:	5d                   	pop    ebp
c00177cc:	c3                   	ret    
c00177cd:	90                   	nop

c00177ce <Video::putTGA(int, int, unsigned char*, int)>:
c00177ce:	55                   	push   ebp
c00177cf:	57                   	push   edi
c00177d0:	56                   	push   esi
c00177d1:	53                   	push   ebx
c00177d2:	83 ec 28             	sub    esp,0x28
c00177d5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177dd:	50                   	push   eax
c00177de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177e2:	50                   	push   eax
c00177e3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177e7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177eb:	56                   	push   esi
c00177ec:	e8 5b fe ff ff       	call   c001764c <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177f1:	83 c4 20             	add    esp,0x20
c00177f4:	85 c0                	test   eax,eax
c00177f6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00177fa:	74 35                	je     c0017831 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177fc:	89 c7                	mov    edi,eax
c00177fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017802:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017806:	39 d8                	cmp    eax,ebx
c0017808:	7e 27                	jle    c0017831 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001780a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001780e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017812:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017816:	39 e8                	cmp    eax,ebp
c0017818:	7e 14                	jle    c001782e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001781a:	8b 06                	mov    eax,DWORD PTR [esi]
c001781c:	83 c7 04             	add    edi,0x4
c001781f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017822:	53                   	push   ebx
c0017823:	55                   	push   ebp
c0017824:	45                   	inc    ebp
c0017825:	56                   	push   esi
c0017826:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017829:	83 c4 10             	add    esp,0x10
c001782c:	eb e0                	jmp    c001780e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001782e:	43                   	inc    ebx
c001782f:	eb cd                	jmp    c00177fe <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017831:	83 c4 1c             	add    esp,0x1c
c0017834:	5b                   	pop    ebx
c0017835:	5e                   	pop    esi
c0017836:	5f                   	pop    edi
c0017837:	5d                   	pop    ebp
c0017838:	c3                   	ret    
c0017839:	90                   	nop

c001783a <ACPI::close(int, int, void*)>:
c001783a:	83 ec 1c             	sub    esp,0x1c
c001783d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017845:	74 0a                	je     c0017851 <ACPI::close(int, int, void*)+0x17>
c0017847:	b8 00 00 00 00       	mov    eax,0x0
c001784c:	e9 9a 00 00 00       	jmp    c00178eb <ACPI::close(int, int, void*)+0xb1>
c0017851:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017856:	75 37                	jne    c001788f <ACPI::close(int, int, void*)+0x55>
c0017858:	83 ec 0c             	sub    esp,0xc
c001785b:	68 a0 b3 02 c0       	push   0xc002b3a0
c0017860:	e8 eb b6 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0017865:	83 c4 10             	add    esp,0x10
c0017868:	a1 88 0a 03 c0       	mov    eax,ds:0xc0030a88
c001786d:	85 c0                	test   eax,eax
c001786f:	74 07                	je     c0017878 <ACPI::close(int, int, void*)+0x3e>
c0017871:	a1 88 0a 03 c0       	mov    eax,ds:0xc0030a88
c0017876:	ff d0                	call   eax
c0017878:	83 ec 0c             	sub    esp,0xc
c001787b:	68 c4 b4 02 c0       	push   0xc002b4c4
c0017880:	e8 6c 2d 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c0017885:	83 c4 10             	add    esp,0x10
c0017888:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001788d:	eb 5c                	jmp    c00178eb <ACPI::close(int, int, void*)+0xb1>
c001788f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017894:	75 50                	jne    c00178e6 <ACPI::close(int, int, void*)+0xac>
c0017896:	a1 84 0a 03 c0       	mov    eax,ds:0xc0030a84
c001789b:	85 c0                	test   eax,eax
c001789d:	74 07                	je     c00178a6 <ACPI::close(int, int, void*)+0x6c>
c001789f:	a1 84 0a 03 c0       	mov    eax,ds:0xc0030a84
c00178a4:	ff d0                	call   eax
c00178a6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178ab:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178b0:	83 e0 02             	and    eax,0x2
c00178b3:	74 1c                	je     c00178d1 <ACPI::close(int, int, void*)+0x97>
c00178b5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178c0:	89 c2                	mov    edx,eax
c00178c2:	ec                   	in     al,dx
c00178c3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178c7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178cf:	eb da                	jmp    c00178ab <ACPI::close(int, int, void*)+0x71>
c00178d1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178d8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178e5:	ee                   	out    dx,al
c00178e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178eb:	83 c4 1c             	add    esp,0x1c
c00178ee:	c3                   	ret    

c00178ef <findRSDP()>:
c00178ef:	83 ec 1c             	sub    esp,0x1c
c00178f2:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c00178f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178fd:	83 e0 04             	and    eax,0x4
c0017900:	84 c0                	test   al,al
c0017902:	75 07                	jne    c001790b <findRSDP()+0x1c>
c0017904:	b8 00 00 00 00       	mov    eax,0x0
c0017909:	eb 6a                	jmp    c0017975 <findRSDP()+0x86>
c001790b:	a1 f4 e3 02 c0       	mov    eax,ds:0xc002e3f4
c0017910:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017915:	7f 1b                	jg     c0017932 <findRSDP()+0x43>
c0017917:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001791c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017922:	83 e2 fb             	and    edx,0xfffffffb
c0017925:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001792b:	b8 00 00 00 00       	mov    eax,0x0
c0017930:	eb 43                	jmp    c0017975 <findRSDP()+0x86>
c0017932:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001793a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017942:	77 2c                	ja     c0017970 <findRSDP()+0x81>
c0017944:	83 ec 04             	sub    esp,0x4
c0017947:	6a 08                	push   0x8
c0017949:	68 ad b3 02 c0       	push   0xc002b3ad
c001794e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017952:	e8 e9 8c fe ff       	call   c0000640 <memcmp>
c0017957:	83 c4 10             	add    esp,0x10
c001795a:	85 c0                	test   eax,eax
c001795c:	0f 94 c0             	sete   al
c001795f:	84 c0                	test   al,al
c0017961:	74 06                	je     c0017969 <findRSDP()+0x7a>
c0017963:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017967:	eb 0c                	jmp    c0017975 <findRSDP()+0x86>
c0017969:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001796e:	eb ca                	jmp    c001793a <findRSDP()+0x4b>
c0017970:	b8 00 00 00 00       	mov    eax,0x0
c0017975:	83 c4 1c             	add    esp,0x1c
c0017978:	c3                   	ret    

c0017979 <loadACPITables(unsigned char*)>:
c0017979:	56                   	push   esi
c001797a:	53                   	push   ebx
c001797b:	83 ec 44             	sub    esp,0x44
c001797e:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0017983:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017989:	83 e0 04             	and    eax,0x4
c001798c:	84 c0                	test   al,al
c001798e:	0f 84 05 02 00 00    	je     c0017b99 <loadACPITables(unsigned char*)+0x220>
c0017994:	a0 a0 0c 03 c0       	mov    al,ds:0xc0030ca0
c0017999:	84 c0                	test   al,al
c001799b:	74 75                	je     c0017a12 <loadACPITables(unsigned char*)+0x99>
c001799d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ac:	83 e8 24             	sub    eax,0x24
c00179af:	c1 e8 03             	shr    eax,0x3
c00179b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179b6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179c2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179c6:	0f 8d b2 00 00 00    	jge    c0017a7e <loadACPITables(unsigned char*)+0x105>
c00179cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179d0:	83 c0 24             	add    eax,0x24
c00179d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179e3:	c1 e0 03             	shl    eax,0x3
c00179e6:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00179f3:	89 c1                	mov    ecx,eax
c00179f5:	a1 8c 0a 03 c0       	mov    eax,ds:0xc0030a8c
c00179fa:	8d 50 01             	lea    edx,[eax+0x1]
c00179fd:	89 15 8c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a8c,edx
c0017a03:	89 ca                	mov    edx,ecx
c0017a05:	89 14 c5 a4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf55c],edx
c0017a0c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a10:	eb ac                	jmp    c00179be <loadACPITables(unsigned char*)+0x45>
c0017a12:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a21:	83 e8 24             	sub    eax,0x24
c0017a24:	c1 e8 02             	shr    eax,0x2
c0017a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a2b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a37:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a3b:	7d 41                	jge    c0017a7e <loadACPITables(unsigned char*)+0x105>
c0017a3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a41:	83 c0 24             	add    eax,0x24
c0017a44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a54:	c1 e0 02             	shl    eax,0x2
c0017a57:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a5f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a61:	a1 8c 0a 03 c0       	mov    eax,ds:0xc0030a8c
c0017a66:	8d 50 01             	lea    edx,[eax+0x1]
c0017a69:	89 15 8c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a8c,edx
c0017a6f:	89 ca                	mov    edx,ecx
c0017a71:	89 14 c5 a4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf55c],edx
c0017a78:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a7c:	eb b5                	jmp    c0017a33 <loadACPITables(unsigned char*)+0xba>
c0017a7e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a86:	a1 8c 0a 03 c0       	mov    eax,ds:0xc0030a8c
c0017a8b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a8f:	0f 8d 05 01 00 00    	jge    c0017b9a <loadACPITables(unsigned char*)+0x221>
c0017a95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a99:	8b 04 c5 a4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf55c]
c0017aa0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab0:	25 ff 0f 00 00       	and    eax,0xfff
c0017ab5:	89 c6                	mov    esi,eax
c0017ab7:	e8 80 a3 ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c0017abc:	89 c3                	mov    ebx,eax
c0017abe:	83 ec 0c             	sub    esp,0xc
c0017ac1:	6a 01                	push   0x1
c0017ac3:	e8 d9 a0 ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c0017ac8:	83 c4 10             	add    esp,0x10
c0017acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017acf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ad5:	83 ec 0c             	sub    esp,0xc
c0017ad8:	6a 01                	push   0x1
c0017ada:	6a 01                	push   0x1
c0017adc:	50                   	push   eax
c0017add:	52                   	push   edx
c0017ade:	53                   	push   ebx
c0017adf:	e8 88 ab ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ae4:	83 c4 20             	add    esp,0x20
c0017ae7:	09 f0                	or     eax,esi
c0017ae9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017af1:	c1 e0 03             	shl    eax,0x3
c0017af4:	05 a0 0a 03 c0       	add    eax,0xc0030aa0
c0017af9:	83 ec 04             	sub    esp,0x4
c0017afc:	6a 04                	push   0x4
c0017afe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b02:	50                   	push   eax
c0017b03:	e8 3c 8c fe ff       	call   c0000744 <memcpy>
c0017b08:	83 c4 10             	add    esp,0x10
c0017b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b1a:	05 00 10 00 00       	add    eax,0x1000
c0017b1f:	c1 e8 0c             	shr    eax,0xc
c0017b22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b31:	25 ff 0f 00 00       	and    eax,0xfff
c0017b36:	89 c6                	mov    esi,eax
c0017b38:	e8 ff a2 ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c0017b3d:	89 c3                	mov    ebx,eax
c0017b3f:	83 ec 0c             	sub    esp,0xc
c0017b42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b46:	e8 56 a0 ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c0017b4b:	83 c4 10             	add    esp,0x10
c0017b4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b52:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b58:	83 ec 0c             	sub    esp,0xc
c0017b5b:	6a 01                	push   0x1
c0017b5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b61:	50                   	push   eax
c0017b62:	52                   	push   edx
c0017b63:	53                   	push   ebx
c0017b64:	e8 03 ab ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b69:	83 c4 20             	add    esp,0x20
c0017b6c:	09 f0                	or     eax,esi
c0017b6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b75:	83 ec 0c             	sub    esp,0xc
c0017b78:	50                   	push   eax
c0017b79:	e8 93 a4 ff ff       	call   c0012011 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b7e:	83 c4 10             	add    esp,0x10
c0017b81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b89:	89 14 c5 a4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf55c],edx
c0017b90:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b94:	e9 ed fe ff ff       	jmp    c0017a86 <loadACPITables(unsigned char*)+0x10d>
c0017b99:	90                   	nop
c0017b9a:	83 c4 44             	add    esp,0x44
c0017b9d:	5b                   	pop    ebx
c0017b9e:	5e                   	pop    esi
c0017b9f:	c3                   	ret    

c0017ba0 <findRSDT(unsigned char*)>:
c0017ba0:	56                   	push   esi
c0017ba1:	53                   	push   ebx
c0017ba2:	83 ec 44             	sub    esp,0x44
c0017ba5:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0017baa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bb0:	83 e0 04             	and    eax,0x4
c0017bb3:	84 c0                	test   al,al
c0017bb5:	75 0a                	jne    c0017bc1 <findRSDT(unsigned char*)+0x21>
c0017bb7:	b8 00 00 00 00       	mov    eax,0x0
c0017bbc:	e9 f7 00 00 00       	jmp    c0017cb8 <findRSDT(unsigned char*)+0x118>
c0017bc1:	83 ec 04             	sub    esp,0x4
c0017bc4:	6a 24                	push   0x24
c0017bc6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bca:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bce:	50                   	push   eax
c0017bcf:	e8 70 8b fe ff       	call   c0000744 <memcpy>
c0017bd4:	83 c4 10             	add    esp,0x10
c0017bd7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017bdb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bdf:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017be7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017beb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bef:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bf7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bff:	25 ff 0f 00 00       	and    eax,0xfff
c0017c04:	89 c6                	mov    esi,eax
c0017c06:	e8 31 a2 ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c0017c0b:	89 c3                	mov    ebx,eax
c0017c0d:	83 ec 0c             	sub    esp,0xc
c0017c10:	6a 02                	push   0x2
c0017c12:	e8 8a 9f ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c0017c17:	83 c4 10             	add    esp,0x10
c0017c1a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c1e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c24:	83 ec 0c             	sub    esp,0xc
c0017c27:	6a 01                	push   0x1
c0017c29:	6a 02                	push   0x2
c0017c2b:	50                   	push   eax
c0017c2c:	52                   	push   edx
c0017c2d:	53                   	push   ebx
c0017c2e:	e8 39 aa ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c33:	83 c4 20             	add    esp,0x20
c0017c36:	09 f0                	or     eax,esi
c0017c38:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c40:	25 ff 0f 00 00       	and    eax,0xfff
c0017c45:	89 c6                	mov    esi,eax
c0017c47:	e8 f0 a1 ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c0017c4c:	89 c3                	mov    ebx,eax
c0017c4e:	83 ec 0c             	sub    esp,0xc
c0017c51:	6a 02                	push   0x2
c0017c53:	e8 49 9f ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c0017c58:	83 c4 10             	add    esp,0x10
c0017c5b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c5f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c65:	83 ec 0c             	sub    esp,0xc
c0017c68:	6a 01                	push   0x1
c0017c6a:	6a 02                	push   0x2
c0017c6c:	50                   	push   eax
c0017c6d:	52                   	push   edx
c0017c6e:	53                   	push   ebx
c0017c6f:	e8 f8 a9 ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c74:	83 c4 20             	add    esp,0x20
c0017c77:	09 f0                	or     eax,esi
c0017c79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c7d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c82:	75 11                	jne    c0017c95 <findRSDT(unsigned char*)+0xf5>
c0017c84:	c6 05 a0 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030ca0,0x0
c0017c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c8f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c93:	eb 1f                	jmp    c0017cb4 <findRSDT(unsigned char*)+0x114>
c0017c95:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c9a:	75 11                	jne    c0017cad <findRSDT(unsigned char*)+0x10d>
c0017c9c:	c6 05 a0 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030ca0,0x1
c0017ca3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ca7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cab:	eb 07                	jmp    c0017cb4 <findRSDT(unsigned char*)+0x114>
c0017cad:	b8 00 00 00 00       	mov    eax,0x0
c0017cb2:	eb 04                	jmp    c0017cb8 <findRSDT(unsigned char*)+0x118>
c0017cb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cb8:	83 c4 44             	add    esp,0x44
c0017cbb:	5b                   	pop    ebx
c0017cbc:	5e                   	pop    esi
c0017cbd:	c3                   	ret    

c0017cbe <findDataTable(unsigned char*, char*)>:
c0017cbe:	83 ec 1c             	sub    esp,0x1c
c0017cc1:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0017cc6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ccc:	83 e0 04             	and    eax,0x4
c0017ccf:	84 c0                	test   al,al
c0017cd1:	75 07                	jne    c0017cda <findDataTable(unsigned char*, char*)+0x1c>
c0017cd3:	b8 00 00 00 00       	mov    eax,0x0
c0017cd8:	eb 7c                	jmp    c0017d56 <findDataTable(unsigned char*, char*)+0x98>
c0017cda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ce2:	a1 8c 0a 03 c0       	mov    eax,ds:0xc0030a8c
c0017ce7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ceb:	7d 3a                	jge    c0017d27 <findDataTable(unsigned char*, char*)+0x69>
c0017ced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cf1:	c1 e0 03             	shl    eax,0x3
c0017cf4:	05 a0 0a 03 c0       	add    eax,0xc0030aa0
c0017cf9:	83 ec 04             	sub    esp,0x4
c0017cfc:	6a 04                	push   0x4
c0017cfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d02:	50                   	push   eax
c0017d03:	e8 38 89 fe ff       	call   c0000640 <memcmp>
c0017d08:	83 c4 10             	add    esp,0x10
c0017d0b:	85 c0                	test   eax,eax
c0017d0d:	0f 94 c0             	sete   al
c0017d10:	84 c0                	test   al,al
c0017d12:	74 0d                	je     c0017d21 <findDataTable(unsigned char*, char*)+0x63>
c0017d14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d18:	8b 04 c5 a4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf55c]
c0017d1f:	eb 35                	jmp    c0017d56 <findDataTable(unsigned char*, char*)+0x98>
c0017d21:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d25:	eb bb                	jmp    c0017ce2 <findDataTable(unsigned char*, char*)+0x24>
c0017d27:	a0 a0 0c 03 c0       	mov    al,ds:0xc0030ca0
c0017d2c:	84 c0                	test   al,al
c0017d2e:	74 07                	je     c0017d37 <findDataTable(unsigned char*, char*)+0x79>
c0017d30:	b8 58 00 00 00       	mov    eax,0x58
c0017d35:	eb 05                	jmp    c0017d3c <findDataTable(unsigned char*, char*)+0x7e>
c0017d37:	b8 52 00 00 00       	mov    eax,0x52
c0017d3c:	83 ec 04             	sub    esp,0x4
c0017d3f:	50                   	push   eax
c0017d40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d44:	68 e8 b4 02 c0       	push   0xc002b4e8
c0017d49:	e8 02 b2 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0017d4e:	83 c4 10             	add    esp,0x10
c0017d51:	b8 00 00 00 00       	mov    eax,0x0
c0017d56:	83 c4 1c             	add    esp,0x1c
c0017d59:	c3                   	ret    

c0017d5a <scanMADT()>:
c0017d5a:	53                   	push   ebx
c0017d5b:	83 ec 38             	sub    esp,0x38
c0017d5e:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0017d63:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d69:	83 e0 04             	and    eax,0x4
c0017d6c:	84 c0                	test   al,al
c0017d6e:	0f 84 63 04 00 00    	je     c00181d7 <scanMADT()+0x47d>
c0017d74:	e8 76 fb ff ff       	call   c00178ef <findRSDP()>
c0017d79:	a3 ac 0c 03 c0       	mov    ds:0xc0030cac,eax
c0017d7e:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017d83:	85 c0                	test   eax,eax
c0017d85:	75 19                	jne    c0017da0 <scanMADT()+0x46>
c0017d87:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0017d8c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d92:	83 e2 fb             	and    edx,0xfffffffb
c0017d95:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d9b:	e9 3b 04 00 00       	jmp    c00181db <scanMADT()+0x481>
c0017da0:	a1 ac 0c 03 c0       	mov    eax,ds:0xc0030cac
c0017da5:	83 ec 0c             	sub    esp,0xc
c0017da8:	50                   	push   eax
c0017da9:	e8 f2 fd ff ff       	call   c0017ba0 <findRSDT(unsigned char*)>
c0017dae:	83 c4 10             	add    esp,0x10
c0017db1:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c0017db6:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0017dbb:	85 c0                	test   eax,eax
c0017dbd:	75 19                	jne    c0017dd8 <scanMADT()+0x7e>
c0017dbf:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0017dc4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dca:	83 e2 fb             	and    edx,0xfffffffb
c0017dcd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dd3:	e9 03 04 00 00       	jmp    c00181db <scanMADT()+0x481>
c0017dd8:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0017ddd:	83 ec 0c             	sub    esp,0xc
c0017de0:	50                   	push   eax
c0017de1:	e8 93 fb ff ff       	call   c0017979 <loadACPITables(unsigned char*)>
c0017de6:	83 c4 10             	add    esp,0x10
c0017de9:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0017dee:	83 ec 08             	sub    esp,0x8
c0017df1:	68 b6 b3 02 c0       	push   0xc002b3b6
c0017df6:	50                   	push   eax
c0017df7:	e8 c2 fe ff ff       	call   c0017cbe <findDataTable(unsigned char*, char*)>
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e03:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e08:	75 19                	jne    c0017e23 <scanMADT()+0xc9>
c0017e0a:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0017e0f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e15:	83 e2 fe             	and    edx,0xfffffffe
c0017e18:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e1e:	e9 b8 03 00 00       	jmp    c00181db <scanMADT()+0x481>
c0017e23:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e32:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e36:	0f 87 9f 03 00 00    	ja     c00181db <scanMADT()+0x481>
c0017e3c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e44:	0f 87 91 03 00 00    	ja     c00181db <scanMADT()+0x481>
c0017e4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e4e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e56:	8d 50 01             	lea    edx,[eax+0x1]
c0017e59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e61:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e65:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e6d:	8d 50 01             	lea    edx,[eax+0x1]
c0017e70:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e74:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e78:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e7c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e80:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e85:	0f 86 4f 03 00 00    	jbe    c00181da <scanMADT()+0x480>
c0017e8b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e90:	75 57                	jne    c0017ee9 <scanMADT()+0x18f>
c0017e92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e96:	8d 50 01             	lea    edx,[eax+0x1]
c0017e99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e9d:	8a 15 a0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ea0
c0017ea3:	0f b6 d2             	movzx  edx,dl
c0017ea6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eaa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017eae:	88 82 e0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf120],al
c0017eb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb8:	8d 50 01             	lea    edx,[eax+0x1]
c0017ebb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ebf:	8a 15 a0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ea0
c0017ec5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ec8:	88 0d a0 0e 03 c0    	mov    BYTE PTR ds:0xc0030ea0,cl
c0017ece:	0f b6 d2             	movzx  edx,dl
c0017ed1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ed5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ed9:	88 82 c0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf140],al
c0017edf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ee4:	e9 da 02 00 00       	jmp    c00181c3 <scanMADT()+0x469>
c0017ee9:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017eee:	0f 85 14 01 00 00    	jne    c0018008 <scanMADT()+0x2ae>
c0017ef4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef8:	8d 50 01             	lea    edx,[eax+0x1]
c0017efb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eff:	8a 15 60 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d60
c0017f05:	0f b6 d2             	movzx  edx,dl
c0017f08:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f0c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f10:	88 82 80 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf280],al
c0017f16:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f22:	01 d0                	add    eax,edx
c0017f24:	83 c0 2c             	add    eax,0x2c
c0017f27:	8a 00                	mov    al,BYTE PTR [eax]
c0017f29:	0f b6 d0             	movzx  edx,al
c0017f2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f30:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f37:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f3b:	0f b6 c0             	movzx  eax,al
c0017f3e:	c1 e0 08             	shl    eax,0x8
c0017f41:	89 d1                	mov    ecx,edx
c0017f43:	09 c1                	or     ecx,eax
c0017f45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f49:	8d 50 02             	lea    edx,[eax+0x2]
c0017f4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f50:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f54:	0f b6 c0             	movzx  eax,al
c0017f57:	c1 e0 10             	shl    eax,0x10
c0017f5a:	09 c1                	or     ecx,eax
c0017f5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f60:	8d 50 03             	lea    edx,[eax+0x3]
c0017f63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f67:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f6b:	0f b6 c0             	movzx  eax,al
c0017f6e:	c1 e0 18             	shl    eax,0x18
c0017f71:	09 c1                	or     ecx,eax
c0017f73:	89 ca                	mov    edx,ecx
c0017f75:	a0 60 0d 03 c0       	mov    al,ds:0xc0030d60
c0017f7a:	0f b6 c0             	movzx  eax,al
c0017f7d:	89 14 85 a0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf260],edx
c0017f84:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f91:	01 d0                	add    eax,edx
c0017f93:	83 c0 2c             	add    eax,0x2c
c0017f96:	8a 00                	mov    al,BYTE PTR [eax]
c0017f98:	0f b6 d0             	movzx  edx,al
c0017f9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fa6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017faa:	0f b6 c0             	movzx  eax,al
c0017fad:	c1 e0 08             	shl    eax,0x8
c0017fb0:	89 d1                	mov    ecx,edx
c0017fb2:	09 c1                	or     ecx,eax
c0017fb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0017fbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fbf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fc3:	0f b6 c0             	movzx  eax,al
c0017fc6:	c1 e0 10             	shl    eax,0x10
c0017fc9:	09 c1                	or     ecx,eax
c0017fcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcf:	8d 50 03             	lea    edx,[eax+0x3]
c0017fd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fda:	0f b6 c0             	movzx  eax,al
c0017fdd:	c1 e0 18             	shl    eax,0x18
c0017fe0:	09 c1                	or     ecx,eax
c0017fe2:	89 ca                	mov    edx,ecx
c0017fe4:	a0 60 0d 03 c0       	mov    al,ds:0xc0030d60
c0017fe9:	0f b6 c0             	movzx  eax,al
c0017fec:	89 14 85 20 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1e0],edx
c0017ff3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ff8:	a0 60 0d 03 c0       	mov    al,ds:0xc0030d60
c0017ffd:	40                   	inc    eax
c0017ffe:	a2 60 0d 03 c0       	mov    ds:0xc0030d60,al
c0018003:	e9 bb 01 00 00       	jmp    c00181c3 <scanMADT()+0x469>
c0018008:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001800d:	0f 85 e9 00 00 00    	jne    c00180fc <scanMADT()+0x3a2>
c0018013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018017:	8d 50 01             	lea    edx,[eax+0x1]
c001801a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001801e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018022:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018026:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001802a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802e:	8d 50 01             	lea    edx,[eax+0x1]
c0018031:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018035:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018039:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001803d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018041:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018049:	01 d0                	add    eax,edx
c001804b:	83 c0 2c             	add    eax,0x2c
c001804e:	8a 00                	mov    al,BYTE PTR [eax]
c0018050:	0f b6 d0             	movzx  edx,al
c0018053:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018057:	8d 48 01             	lea    ecx,[eax+0x1]
c001805a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001805e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018062:	0f b6 c0             	movzx  eax,al
c0018065:	c1 e0 08             	shl    eax,0x8
c0018068:	89 d1                	mov    ecx,edx
c001806a:	09 c1                	or     ecx,eax
c001806c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018070:	8d 50 02             	lea    edx,[eax+0x2]
c0018073:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018077:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001807b:	0f b6 c0             	movzx  eax,al
c001807e:	c1 e0 10             	shl    eax,0x10
c0018081:	09 c1                	or     ecx,eax
c0018083:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018087:	8d 50 03             	lea    edx,[eax+0x3]
c001808a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001808e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018092:	0f b6 c0             	movzx  eax,al
c0018095:	c1 e0 18             	shl    eax,0x18
c0018098:	09 c8                	or     eax,ecx
c001809a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001809e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ab:	01 d0                	add    eax,edx
c00180ad:	83 c0 2c             	add    eax,0x2c
c00180b0:	8a 00                	mov    al,BYTE PTR [eax]
c00180b2:	0f b6 c0             	movzx  eax,al
c00180b5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180b9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180c4:	0f b6 d2             	movzx  edx,dl
c00180c7:	c1 e2 08             	shl    edx,0x8
c00180ca:	09 d0                	or     eax,edx
c00180cc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180d1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180d6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180df:	88 90 00 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd2a00],dl
c00180e5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180ea:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180ef:	66 89 84 12 40 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf2c0],ax
c00180f7:	e9 c7 00 00 00       	jmp    c00181c3 <scanMADT()+0x469>
c00180fc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018101:	0f 85 b0 00 00 00    	jne    c00181b7 <scanMADT()+0x45d>
c0018107:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001810b:	8d 50 01             	lea    edx,[eax+0x1]
c001810e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018112:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018116:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001811a:	0f b6 c0             	movzx  eax,al
c001811d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018121:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018125:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018129:	01 d0                	add    eax,edx
c001812b:	83 c0 2c             	add    eax,0x2c
c001812e:	8a 00                	mov    al,BYTE PTR [eax]
c0018130:	0f b6 d0             	movzx  edx,al
c0018133:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018137:	8d 48 01             	lea    ecx,[eax+0x1]
c001813a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001813e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018142:	0f b6 c0             	movzx  eax,al
c0018145:	c1 e0 08             	shl    eax,0x8
c0018148:	09 d0                	or     eax,edx
c001814a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001814e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018153:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018157:	8d 50 01             	lea    edx,[eax+0x1]
c001815a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001815e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018162:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018166:	0f b6 c0             	movzx  eax,al
c0018169:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001816d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018171:	c1 e0 08             	shl    eax,0x8
c0018174:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018178:	89 c1                	mov    ecx,eax
c001817a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001817e:	c1 e0 18             	shl    eax,0x18
c0018181:	89 c3                	mov    ebx,eax
c0018183:	a1 b0 0c 03 c0       	mov    eax,ds:0xc0030cb0
c0018188:	8d 50 01             	lea    edx,[eax+0x1]
c001818b:	89 15 b0 0c 03 c0    	mov    DWORD PTR ds:0xc0030cb0,edx
c0018191:	09 d9                	or     ecx,ebx
c0018193:	89 ca                	mov    edx,ecx
c0018195:	89 14 85 c0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf340],edx
c001819c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181a8:	68 18 b5 02 c0       	push   0xc002b518
c00181ad:	e8 9e ad ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00181b2:	83 c4 10             	add    esp,0x10
c00181b5:	eb 0c                	jmp    c00181c3 <scanMADT()+0x469>
c00181b7:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181bc:	75 05                	jne    c00181c3 <scanMADT()+0x469>
c00181be:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181c3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181cc:	01 d0                	add    eax,edx
c00181ce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181d2:	e9 54 fc ff ff       	jmp    c0017e2b <scanMADT()+0xd1>
c00181d7:	90                   	nop
c00181d8:	eb 01                	jmp    c00181db <scanMADT()+0x481>
c00181da:	90                   	nop
c00181db:	83 c4 38             	add    esp,0x38
c00181de:	5b                   	pop    ebx
c00181df:	c3                   	ret    

c00181e0 <ACPI::ACPI()>:
c00181e0:	83 ec 0c             	sub    esp,0xc
c00181e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e7:	83 ec 08             	sub    esp,0x8
c00181ea:	68 bb b3 02 c0       	push   0xc002b3bb
c00181ef:	50                   	push   eax
c00181f0:	e8 71 c3 ff ff       	call   c0014566 <Device::Device(char const*)>
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	ba 8c b5 02 c0       	mov    edx,0xc002b58c
c00181fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018201:	89 10                	mov    DWORD PTR [eax],edx
c0018203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018207:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018212:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001821c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018220:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001822a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018239:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018240:	e8 15 fb ff ff       	call   c0017d5a <scanMADT()>
c0018245:	90                   	nop
c0018246:	83 c4 0c             	add    esp,0xc
c0018249:	c3                   	ret    

c001824a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001824a:	83 ec 2c             	sub    esp,0x2c
c001824d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018251:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018255:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018259:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001825d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018262:	88 d0                	mov    al,dl
c0018264:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018268:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001826d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018275:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018279:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001827f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018283:	0f 8d 97 00 00 00    	jge    c0018320 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018289:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001828d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018291:	83 c2 2a             	add    edx,0x2a
c0018294:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018298:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001829d:	75 78                	jne    c0018317 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001829f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182a7:	83 c2 2a             	add    edx,0x2a
c00182aa:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182ae:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182b2:	75 63                	jne    c0018317 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182b4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182b9:	74 3a                	je     c00182f5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c3:	83 c2 2a             	add    edx,0x2a
c00182c6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182d1:	39 c2                	cmp    edx,eax
c00182d3:	74 10                	je     c00182e5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182d5:	83 ec 0c             	sub    esp,0xc
c00182d8:	68 54 b5 02 c0       	push   0xc002b554
c00182dd:	e8 0f 23 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c00182e2:	83 c4 10             	add    esp,0x10
c00182e5:	83 ec 0c             	sub    esp,0xc
c00182e8:	68 c0 b3 02 c0       	push   0xc002b3c0
c00182ed:	e8 ff 22 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c00182f2:	83 c4 10             	add    esp,0x10
c00182f5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00182f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018301:	83 c2 2a             	add    edx,0x2a
c0018304:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018308:	8b 02                	mov    eax,DWORD PTR [edx]
c001830a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001830d:	89 01                	mov    DWORD PTR [ecx],eax
c001830f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018312:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018317:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001831b:	e9 55 ff ff ff       	jmp    c0018275 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018320:	90                   	nop
c0018321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018325:	83 c4 2c             	add    esp,0x2c
c0018328:	c2 04 00             	ret    0x4
c001832b:	90                   	nop

c001832c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001832c:	83 ec 1c             	sub    esp,0x1c
c001832f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018333:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018337:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001833b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018340:	88 c8                	mov    al,cl
c0018342:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018346:	88 d0                	mov    al,dl
c0018348:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001834c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018350:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001835d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018361:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018369:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001836f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018373:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018376:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001837a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001837f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018383:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018389:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001838d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018394:	83 c2 2a             	add    edx,0x2a
c0018397:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001839b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183b0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183be:	8d 50 01             	lea    edx,[eax+0x1]
c00183c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183cf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183d5:	3d 00 02 00 00       	cmp    eax,0x200
c00183da:	75 10                	jne    c00183ec <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183dc:	83 ec 0c             	sub    esp,0xc
c00183df:	68 cf b3 02 c0       	push   0xc002b3cf
c00183e4:	e8 08 22 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c00183e9:	83 c4 10             	add    esp,0x10
c00183ec:	90                   	nop
c00183ed:	83 c4 1c             	add    esp,0x1c
c00183f0:	c3                   	ret    
c00183f1:	90                   	nop

c00183f2 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183f2:	b8 00 00 00 00       	mov    eax,0x0
c00183f7:	c3                   	ret    

c00183f8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183f8:	83 ec 1c             	sub    esp,0x1c
c00183fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183ff:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018402:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018406:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001840b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018410:	83 ec 08             	sub    esp,0x8
c0018413:	52                   	push   edx
c0018414:	50                   	push   eax
c0018415:	e8 3e 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c001841a:	83 c4 10             	add    esp,0x10
c001841d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018421:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0018426:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001842b:	83 ec 04             	sub    esp,0x4
c001842e:	6a 01                	push   0x1
c0018430:	52                   	push   edx
c0018431:	50                   	push   eax
c0018432:	e8 37 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018437:	83 c4 10             	add    esp,0x10
c001843a:	90                   	nop
c001843b:	83 c4 1c             	add    esp,0x1c
c001843e:	c3                   	ret    
c001843f:	90                   	nop

c0018440 <ACPI::open(int, int, void*)>:
c0018440:	53                   	push   ebx
c0018441:	83 ec 28             	sub    esp,0x28
c0018444:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018448:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001844f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018453:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001845a:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001845f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018465:	83 e0 04             	and    eax,0x4
c0018468:	84 c0                	test   al,al
c001846a:	74 47                	je     c00184b3 <ACPI::open(int, int, void*)+0x73>
c001846c:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0018471:	83 ec 08             	sub    esp,0x8
c0018474:	68 ec b3 02 c0       	push   0xc002b3ec
c0018479:	50                   	push   eax
c001847a:	e8 3f f8 ff ff       	call   c0017cbe <findDataTable(unsigned char*, char*)>
c001847f:	83 c4 10             	add    esp,0x10
c0018482:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018486:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001848b:	74 26                	je     c00184b3 <ACPI::open(int, int, void*)+0x73>
c001848d:	83 ec 0c             	sub    esp,0xc
c0018490:	68 f1 b3 02 c0       	push   0xc002b3f1
c0018495:	e8 b6 aa ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001849a:	83 c4 10             	add    esp,0x10
c001849d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184a1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ac:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184b3:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184bf:	8a 00                	mov    al,BYTE PTR [eax]
c00184c1:	3c 01                	cmp    al,0x1
c00184c3:	75 28                	jne    c00184ed <ACPI::open(int, int, void*)+0xad>
c00184c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184db:	83 ec 0c             	sub    esp,0xc
c00184de:	68 02 b4 02 c0       	push   0xc002b402
c00184e3:	e8 68 aa ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00184e8:	83 c4 10             	add    esp,0x10
c00184eb:	eb 25                	jmp    c0018512 <ACPI::open(int, int, void*)+0xd2>
c00184ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184f1:	8a 00                	mov    al,BYTE PTR [eax]
c00184f3:	3c 02                	cmp    al,0x2
c00184f5:	75 1b                	jne    c0018512 <ACPI::open(int, int, void*)+0xd2>
c00184f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184fb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018502:	83 ec 0c             	sub    esp,0xc
c0018505:	68 0a b4 02 c0       	push   0xc002b40a
c001850a:	e8 41 aa ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001850f:	83 c4 10             	add    esp,0x10
c0018512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018516:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001851c:	83 f0 01             	xor    eax,0x1
c001851f:	84 c0                	test   al,al
c0018521:	74 6a                	je     c001858d <ACPI::open(int, int, void*)+0x14d>
c0018523:	83 ec 0c             	sub    esp,0xc
c0018526:	68 12 b4 02 c0       	push   0xc002b412
c001852b:	e8 20 aa ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018530:	83 c4 10             	add    esp,0x10
c0018533:	e8 18 7c fe ff       	call   c0000150 <manualPCIProbe>
c0018538:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001853c:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018541:	75 28                	jne    c001856b <ACPI::open(int, int, void*)+0x12b>
c0018543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018547:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001854e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018552:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018559:	83 ec 0c             	sub    esp,0xc
c001855c:	68 20 b4 02 c0       	push   0xc002b420
c0018561:	e8 ea a9 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018566:	83 c4 10             	add    esp,0x10
c0018569:	eb 22                	jmp    c001858d <ACPI::open(int, int, void*)+0x14d>
c001856b:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018570:	75 1b                	jne    c001858d <ACPI::open(int, int, void*)+0x14d>
c0018572:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018576:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001857d:	83 ec 0c             	sub    esp,0xc
c0018580:	68 2a b4 02 c0       	push   0xc002b42a
c0018585:	e8 c6 a9 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001858a:	83 c4 10             	add    esp,0x10
c001858d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018591:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018597:	84 c0                	test   al,al
c0018599:	74 13                	je     c00185ae <ACPI::open(int, int, void*)+0x16e>
c001859b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859f:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185a5:	83 f0 01             	xor    eax,0x1
c00185a8:	0f b6 c0             	movzx  eax,al
c00185ab:	40                   	inc    eax
c00185ac:	eb 05                	jmp    c00185b3 <ACPI::open(int, int, void*)+0x173>
c00185ae:	b8 00 00 00 00       	mov    eax,0x0
c00185b3:	83 ec 08             	sub    esp,0x8
c00185b6:	50                   	push   eax
c00185b7:	68 34 b4 02 c0       	push   0xc002b434
c00185bc:	e8 8f a9 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00185c1:	83 c4 10             	add    esp,0x10
c00185c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c8:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185ce:	84 c0                	test   al,al
c00185d0:	74 67                	je     c0018639 <ACPI::open(int, int, void*)+0x1f9>
c00185d2:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185da:	83 ec 0c             	sub    esp,0xc
c00185dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185e1:	e8 5a 72 ff ff       	call   c000f840 <malloc>
c00185e6:	83 c4 10             	add    esp,0x10
c00185e9:	89 c3                	mov    ebx,eax
c00185eb:	83 ec 0c             	sub    esp,0xc
c00185ee:	53                   	push   ebx
c00185ef:	e8 dc a2 00 00       	call   c00228d0 <PCI::PCI()>
c00185f4:	83 c4 10             	add    esp,0x10
c00185f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ff:	83 ec 08             	sub    esp,0x8
c0018602:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018606:	50                   	push   eax
c0018607:	e8 6a bd ff ff       	call   c0014376 <Device::addChild(Device*)>
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018613:	8b 00                	mov    eax,DWORD PTR [eax]
c0018615:	83 c0 08             	add    eax,0x8
c0018618:	8b 00                	mov    eax,DWORD PTR [eax]
c001861a:	6a 00                	push   0x0
c001861c:	6a 00                	push   0x0
c001861e:	6a 00                	push   0x0
c0018620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018624:	ff d0                	call   eax
c0018626:	83 c4 10             	add    esp,0x10
c0018629:	83 ec 0c             	sub    esp,0xc
c001862c:	68 3d b4 02 c0       	push   0xc002b43d
c0018631:	e8 1a a9 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	83 ec 0c             	sub    esp,0xc
c001863c:	68 48 b4 02 c0       	push   0xc002b448
c0018641:	e8 81 46 00 00       	call   c001ccc7 <Thr::loadKernelSymbolTable(char const*)>
c0018646:	83 c4 10             	add    esp,0x10
c0018649:	8b 1d a8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a8
c001864f:	83 ec 08             	sub    esp,0x8
c0018652:	6a 01                	push   0x1
c0018654:	68 66 b4 02 c0       	push   0xc002b466
c0018659:	e8 c6 50 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c001865e:	83 c4 10             	add    esp,0x10
c0018661:	83 ec 08             	sub    esp,0x8
c0018664:	53                   	push   ebx
c0018665:	50                   	push   eax
c0018666:	e8 ed 52 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c001866b:	83 c4 10             	add    esp,0x10
c001866e:	8b 1d a8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a8
c0018674:	83 ec 08             	sub    esp,0x8
c0018677:	6a 01                	push   0x1
c0018679:	68 83 b4 02 c0       	push   0xc002b483
c001867e:	e8 a1 50 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c0018683:	83 c4 10             	add    esp,0x10
c0018686:	83 ec 08             	sub    esp,0x8
c0018689:	53                   	push   ebx
c001868a:	50                   	push   eax
c001868b:	e8 c8 52 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c0018690:	83 c4 10             	add    esp,0x10
c0018693:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0018698:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001869e:	83 e0 04             	and    eax,0x4
c00186a1:	84 c0                	test   al,al
c00186a3:	0f 84 d2 00 00 00    	je     c001877b <ACPI::open(int, int, void*)+0x33b>
c00186a9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186b0:	83 ec 0c             	sub    esp,0xc
c00186b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186b7:	e8 84 71 ff ff       	call   c000f840 <malloc>
c00186bc:	83 c4 10             	add    esp,0x10
c00186bf:	89 c3                	mov    ebx,eax
c00186c1:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c00186c6:	83 ec 04             	sub    esp,0x4
c00186c9:	50                   	push   eax
c00186ca:	68 a0 b4 02 c0       	push   0xc002b4a0
c00186cf:	53                   	push   ebx
c00186d0:	e8 d3 ad ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186e1:	74 17                	je     c00186fa <ACPI::open(int, int, void*)+0x2ba>
c00186e3:	83 ec 0c             	sub    esp,0xc
c00186e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186ea:	e8 8b b0 ff ff       	call   c001377a <File::exists()>
c00186ef:	83 c4 10             	add    esp,0x10
c00186f2:	84 c0                	test   al,al
c00186f4:	74 04                	je     c00186fa <ACPI::open(int, int, void*)+0x2ba>
c00186f6:	b0 01                	mov    al,0x1
c00186f8:	eb 02                	jmp    c00186fc <ACPI::open(int, int, void*)+0x2bc>
c00186fa:	b0 00                	mov    al,0x0
c00186fc:	84 c0                	test   al,al
c00186fe:	74 22                	je     c0018722 <ACPI::open(int, int, void*)+0x2e2>
c0018700:	83 ec 08             	sub    esp,0x8
c0018703:	6a 01                	push   0x1
c0018705:	68 a0 b4 02 c0       	push   0xc002b4a0
c001870a:	e8 15 50 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c001870f:	83 c4 10             	add    esp,0x10
c0018712:	83 ec 08             	sub    esp,0x8
c0018715:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018719:	50                   	push   eax
c001871a:	e8 39 52 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018727:	74 1e                	je     c0018747 <ACPI::open(int, int, void*)+0x307>
c0018729:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001872e:	74 17                	je     c0018747 <ACPI::open(int, int, void*)+0x307>
c0018730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018734:	8b 00                	mov    eax,DWORD PTR [eax]
c0018736:	83 c0 08             	add    eax,0x8
c0018739:	8b 00                	mov    eax,DWORD PTR [eax]
c001873b:	83 ec 0c             	sub    esp,0xc
c001873e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018742:	ff d0                	call   eax
c0018744:	83 c4 10             	add    esp,0x10
c0018747:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001874c:	83 ec 08             	sub    esp,0x8
c001874f:	68 bd b4 02 c0       	push   0xc002b4bd
c0018754:	50                   	push   eax
c0018755:	e8 64 f5 ff ff       	call   c0017cbe <findDataTable(unsigned char*, char*)>
c001875a:	83 c4 10             	add    esp,0x10
c001875d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018761:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018766:	74 13                	je     c001877b <ACPI::open(int, int, void*)+0x33b>
c0018768:	83 ec 08             	sub    esp,0x8
c001876b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001876f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018773:	e8 80 fc ff ff       	call   c00183f8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018778:	83 c4 10             	add    esp,0x10
c001877b:	b8 00 00 00 00       	mov    eax,0x0
c0018780:	83 c4 28             	add    esp,0x28
c0018783:	5b                   	pop    ebx
c0018784:	c3                   	ret    
c0018785:	90                   	nop

c0018786 <ACPI::sleep()>:
c0018786:	83 ec 0c             	sub    esp,0xc
c0018789:	a1 80 0a 03 c0       	mov    eax,ds:0xc0030a80
c001878e:	85 c0                	test   eax,eax
c0018790:	74 07                	je     c0018799 <ACPI::sleep()+0x13>
c0018792:	a1 80 0a 03 c0       	mov    eax,ds:0xc0030a80
c0018797:	ff d0                	call   eax
c0018799:	90                   	nop
c001879a:	83 c4 0c             	add    esp,0xc
c001879d:	c3                   	ret    

c001879e <CPU::close(int, int, void*)>:
c001879e:	31 c0                	xor    eax,eax
c00187a0:	c3                   	ret    
c00187a1:	90                   	nop

c00187a2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187a2:	55                   	push   ebp
c00187a3:	57                   	push   edi
c00187a4:	56                   	push   esi
c00187a5:	53                   	push   ebx
c00187a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187ae:	89 ce                	mov    esi,ecx
c00187b0:	89 d5                	mov    ebp,edx
c00187b2:	80 f9 04             	cmp    cl,0x4
c00187b5:	75 28                	jne    c00187df <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187b7:	8d 42 f9             	lea    eax,[edx-0x7]
c00187ba:	3c 03                	cmp    al,0x3
c00187bc:	0f 86 63 01 00 00    	jbe    c0018925 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187c2:	80 fa 03             	cmp    dl,0x3
c00187c5:	0f 84 5a 01 00 00    	je     c0018925 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187cb:	8d 7a f2             	lea    edi,[edx-0xe]
c00187ce:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00187d3:	89 fb                	mov    ebx,edi
c00187d5:	80 fb 01             	cmp    bl,0x1
c00187d8:	77 4e                	ja     c0018828 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187da:	e9 52 01 00 00       	jmp    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187df:	80 f9 05             	cmp    cl,0x5
c00187e2:	75 4d                	jne    c0018831 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187e4:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00187e9:	80 fa 03             	cmp    dl,0x3
c00187ec:	0f 86 3f 01 00 00    	jbe    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f2:	8d 7a fa             	lea    edi,[edx-0x6]
c00187f5:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00187fa:	89 fb                	mov    ebx,edi
c00187fc:	80 fb 01             	cmp    bl,0x1
c00187ff:	0f 86 2c 01 00 00    	jbe    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018805:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c001880a:	80 fa 08             	cmp    dl,0x8
c001880d:	0f 84 1e 01 00 00    	je     c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018813:	89 d7                	mov    edi,edx
c0018815:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c001881a:	83 e7 fb             	and    edi,0xfffffffb
c001881d:	89 fb                	mov    ebx,edi
c001881f:	80 fb 09             	cmp    bl,0x9
c0018822:	0f 84 09 01 00 00    	je     c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018828:	31 c0                	xor    eax,eax
c001882a:	89 eb                	mov    ebx,ebp
c001882c:	0f b6 fb             	movzx  edi,bl
c001882f:	eb 30                	jmp    c0018861 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018831:	31 c0                	xor    eax,eax
c0018833:	80 f9 06             	cmp    cl,0x6
c0018836:	75 f2                	jne    c001882a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018838:	80 fa 0a             	cmp    dl,0xa
c001883b:	77 ed                	ja     c001882a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001883d:	bf de 05 00 00       	mov    edi,0x5de
c0018842:	0f a3 d7             	bt     edi,edx
c0018845:	73 e3                	jae    c001882a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018847:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c001884c:	e9 e0 00 00 00       	jmp    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018851:	39 c7                	cmp    edi,eax
c0018853:	0f 84 d3 00 00 00    	je     c001892c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018859:	40                   	inc    eax
c001885a:	3d d0 00 00 00       	cmp    eax,0xd0
c001885f:	74 09                	je     c001886a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018861:	89 f3                	mov    ebx,esi
c0018863:	80 fb 0f             	cmp    bl,0xf
c0018866:	75 f1                	jne    c0018859 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018868:	eb e7                	jmp    c0018851 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001886a:	80 f9 10             	cmp    cl,0x10
c001886d:	75 14                	jne    c0018883 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001886f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018872:	83 e0 fb             	and    eax,0xfffffffb
c0018875:	3c 02                	cmp    al,0x2
c0018877:	76 34                	jbe    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018879:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c001887e:	80 fa 02             	cmp    dl,0x2
c0018881:	eb 24                	jmp    c00188a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018883:	80 f9 11             	cmp    cl,0x11
c0018886:	75 13                	jne    c001889b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018888:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c001888d:	80 fa 03             	cmp    dl,0x3
c0018890:	0f 85 9b 00 00 00    	jne    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018896:	e9 91 00 00 00       	jmp    c001892c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001889b:	80 f9 12             	cmp    cl,0x12
c001889e:	75 14                	jne    c00188b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188a0:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c00188a5:	fe ca                	dec    dl
c00188a7:	0f 85 84 00 00 00    	jne    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ad:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c00188b2:	eb 7d                	jmp    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b4:	80 f9 14             	cmp    cl,0x14
c00188b7:	75 12                	jne    c00188cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188b9:	4a                   	dec    edx
c00188ba:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c00188bf:	80 fa 01             	cmp    dl,0x1
c00188c2:	77 6d                	ja     c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c4:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c00188c9:	eb 66                	jmp    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cb:	80 f9 15             	cmp    cl,0x15
c00188ce:	75 31                	jne    c0018901 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188d0:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00188d5:	80 fa 01             	cmp    dl,0x1
c00188d8:	74 57                	je     c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188da:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c00188df:	80 fa 13             	cmp    dl,0x13
c00188e2:	76 0c                	jbe    c00188f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188e4:	80 fa 30             	cmp    dl,0x30
c00188e7:	75 48                	jne    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e9:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00188ee:	eb 41                	jmp    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f0:	b9 04 00 09 00       	mov    ecx,0x90004
c00188f5:	0f a3 d1             	bt     ecx,edx
c00188f8:	73 37                	jae    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fa:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c00188ff:	eb 30                	jmp    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018901:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c0018906:	80 f9 16             	cmp    cl,0x16
c0018909:	75 26                	jne    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890b:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018910:	84 d2                	test   dl,dl
c0018912:	74 1d                	je     c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018914:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c0018919:	80 fa 30             	cmp    dl,0x30
c001891c:	75 13                	jne    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891e:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018923:	eb 0c                	jmp    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018925:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c001892a:	eb 05                	jmp    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892c:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018931:	5b                   	pop    ebx
c0018932:	5e                   	pop    esi
c0018933:	5f                   	pop    edi
c0018934:	5d                   	pop    ebp
c0018935:	c3                   	ret    

c0018936 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018936:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001893a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001893e:	80 f9 04             	cmp    cl,0x4
c0018941:	75 6b                	jne    c00189ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018943:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018948:	80 fa 01             	cmp    dl,0x1
c001894b:	0f 86 92 02 00 00    	jbe    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018951:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018956:	80 fa 02             	cmp    dl,0x2
c0018959:	0f 84 84 02 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895f:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0018964:	80 fa 03             	cmp    dl,0x3
c0018967:	0f 84 76 02 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896d:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018972:	80 fa 04             	cmp    dl,0x4
c0018975:	0f 84 68 02 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897b:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018980:	80 fa 05             	cmp    dl,0x5
c0018983:	0f 84 5a 02 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018989:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c001898e:	80 fa 07             	cmp    dl,0x7
c0018991:	0f 84 4c 02 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018997:	83 ea 08             	sub    edx,0x8
c001899a:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c001899f:	80 fa 01             	cmp    dl,0x1
c00189a2:	0f 87 3b 02 00 00    	ja     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a8:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c00189ad:	c3                   	ret    
c00189ae:	80 f9 05             	cmp    cl,0x5
c00189b1:	75 45                	jne    c00189f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189b3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189b6:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c00189bb:	80 f9 02             	cmp    cl,0x2
c00189be:	0f 86 1f 02 00 00    	jbe    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c4:	80 fa 04             	cmp    dl,0x4
c00189c7:	0f 84 f3 01 00 00    	je     c0018bc0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189cd:	80 fa 07             	cmp    dl,0x7
c00189d0:	0f 84 0d 02 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d6:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00189db:	80 fa 08             	cmp    dl,0x8
c00189de:	0f 84 ff 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e4:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c00189e9:	80 fa 09             	cmp    dl,0x9
c00189ec:	0f 85 f1 01 00 00    	jne    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f2:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00189f7:	c3                   	ret    
c00189f8:	80 f9 06             	cmp    cl,0x6
c00189fb:	0f 85 85 01 00 00    	jne    c0018b86 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a01:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c0018a06:	80 fa 01             	cmp    dl,0x1
c0018a09:	0f 84 d4 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a12:	3c 01                	cmp    al,0x1
c0018a14:	0f 86 ac 01 00 00    	jbe    c0018bc6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a1a:	80 fa 03             	cmp    dl,0x3
c0018a1d:	0f 84 a3 01 00 00    	je     c0018bc6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a23:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a26:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018a2b:	80 f9 01             	cmp    cl,0x1
c0018a2e:	0f 86 af 01 00 00    	jbe    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a34:	80 fa 09             	cmp    dl,0x9
c0018a37:	0f 84 8f 01 00 00    	je     c0018bcc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a3d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a40:	80 f9 01             	cmp    cl,0x1
c0018a43:	0f 86 9a 01 00 00    	jbe    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a49:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a4e:	80 fa 0d             	cmp    dl,0xd
c0018a51:	0f 84 8c 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a57:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a5c:	80 fa 0e             	cmp    dl,0xe
c0018a5f:	0f 84 7e 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a65:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a6a:	80 fa 0f             	cmp    dl,0xf
c0018a6d:	0f 84 70 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a73:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a78:	80 fa 15             	cmp    dl,0x15
c0018a7b:	0f 84 62 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a81:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a84:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a89:	80 f9 01             	cmp    cl,0x1
c0018a8c:	0f 86 51 01 00 00    	jbe    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a92:	80 fa 1a             	cmp    dl,0x1a
c0018a95:	0f 84 37 01 00 00    	je     c0018bd2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a9b:	80 fa 1c             	cmp    dl,0x1c
c0018a9e:	0f 84 34 01 00 00    	je     c0018bd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018aa4:	80 fa 1d             	cmp    dl,0x1d
c0018aa7:	0f 84 36 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aad:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018ab2:	80 fa 25             	cmp    dl,0x25
c0018ab5:	0f 84 28 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abb:	8d 4a da             	lea    ecx,[edx-0x26]
c0018abe:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018ac3:	80 f9 01             	cmp    cl,0x1
c0018ac6:	0f 86 17 01 00 00    	jbe    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acc:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018ad1:	80 fa 2a             	cmp    dl,0x2a
c0018ad4:	0f 84 09 01 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ada:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018adf:	80 fa 2c             	cmp    dl,0x2c
c0018ae2:	0f 84 fb 00 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae8:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018aed:	80 fa 2d             	cmp    dl,0x2d
c0018af0:	0f 84 ed 00 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af6:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018afb:	80 fa 2e             	cmp    dl,0x2e
c0018afe:	0f 84 df 00 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b04:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018b09:	80 fa 2f             	cmp    dl,0x2f
c0018b0c:	0f 84 d1 00 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b12:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b15:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018b1a:	80 f9 01             	cmp    cl,0x1
c0018b1d:	0f 86 c0 00 00 00    	jbe    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b23:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b28:	80 fa 37             	cmp    dl,0x37
c0018b2b:	0f 84 b2 00 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b31:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018b36:	80 fa 3a             	cmp    dl,0x3a
c0018b39:	0f 84 a4 00 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3f:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b44:	80 fa 3c             	cmp    dl,0x3c
c0018b47:	0f 84 96 00 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4d:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b52:	80 fa 3d             	cmp    dl,0x3d
c0018b55:	0f 84 88 00 00 00    	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5b:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018b60:	80 fa 3e             	cmp    dl,0x3e
c0018b63:	74 7e                	je     c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b65:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b68:	3c 01                	cmp    al,0x1
c0018b6a:	76 72                	jbe    c0018bde <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b6c:	80 fa 3f             	cmp    dl,0x3f
c0018b6f:	74 6d                	je     c0018bde <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b71:	80 fa 4a             	cmp    dl,0x4a
c0018b74:	74 0a                	je     c0018b80 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b76:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c0018b7b:	80 fa 4d             	cmp    dl,0x4d
c0018b7e:	75 63                	jne    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b80:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b85:	c3                   	ret    
c0018b86:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c0018b8b:	80 f9 0b             	cmp    cl,0xb
c0018b8e:	75 0a                	jne    c0018b9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b90:	fe ca                	dec    dl
c0018b92:	75 4f                	jne    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b94:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018b99:	c3                   	ret    
c0018b9a:	80 f9 0f             	cmp    cl,0xf
c0018b9d:	75 44                	jne    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9f:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018ba4:	80 fa 02             	cmp    dl,0x2
c0018ba7:	76 3a                	jbe    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba9:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bac:	3c 01                	cmp    al,0x1
c0018bae:	76 0a                	jbe    c0018bba <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bb0:	b8 a2 b8 02 c0       	mov    eax,0xc002b8a2
c0018bb5:	80 fa 06             	cmp    dl,0x6
c0018bb8:	75 29                	jne    c0018be3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bba:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018bbf:	c3                   	ret    
c0018bc0:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018bc5:	c3                   	ret    
c0018bc6:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018bcb:	c3                   	ret    
c0018bcc:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018bd1:	c3                   	ret    
c0018bd2:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018bd7:	c3                   	ret    
c0018bd8:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018bdd:	c3                   	ret    
c0018bde:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018be3:	c3                   	ret    

c0018be4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018be4:	60                   	pusha  
c0018be5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018be9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bf1:	9c                   	pushf  
c0018bf2:	fa                   	cli    
c0018bf3:	0f 09                	wbinvd 
c0018bf5:	0f 30                	wrmsr  
c0018bf7:	9d                   	popf   
c0018bf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bfc:	89 02                	mov    DWORD PTR [edx],eax
c0018bfe:	61                   	popa   
c0018bff:	c3                   	ret    

c0018c00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c00:	60                   	pusha  
c0018c01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c05:	9c                   	pushf  
c0018c06:	fa                   	cli    
c0018c07:	0f 09                	wbinvd 
c0018c09:	31 c0                	xor    eax,eax
c0018c0b:	31 d2                	xor    edx,edx
c0018c0d:	0f 32                	rdmsr  
c0018c0f:	9d                   	popf   
c0018c10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c14:	89 02                	mov    DWORD PTR [edx],eax
c0018c16:	61                   	popa   
c0018c17:	c3                   	ret    

c0018c18 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c18:	56                   	push   esi
c0018c19:	53                   	push   ebx
c0018c1a:	83 ec 10             	sub    esp,0x10
c0018c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c21:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c26:	75 5d                	jne    c0018c85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c28:	83 f8 08             	cmp    eax,0x8
c0018c2b:	75 09                	jne    c0018c36 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c2d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c32:	7e 13                	jle    c0018c47 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c34:	eb 30                	jmp    c0018c66 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c36:	83 f8 06             	cmp    eax,0x6
c0018c39:	7c 4a                	jl     c0018c85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c3b:	83 f8 07             	cmp    eax,0x7
c0018c3e:	7e 07                	jle    c0018c47 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c40:	83 f8 09             	cmp    eax,0x9
c0018c43:	74 21                	je     c0018c66 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c45:	eb 3e                	jmp    c0018c85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c47:	89 e6                	mov    esi,esp
c0018c49:	8b 1d e8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e8
c0018c4f:	56                   	push   esi
c0018c50:	c1 eb 15             	shr    ebx,0x15
c0018c53:	68 82 00 00 c0       	push   0xc0000082
c0018c58:	83 e3 7e             	and    ebx,0x7e
c0018c5b:	e8 a0 ff ff ff       	call   c0018c00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c60:	56                   	push   esi
c0018c61:	6a 00                	push   0x0
c0018c63:	53                   	push   ebx
c0018c64:	eb 12                	jmp    c0018c78 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c66:	89 e3                	mov    ebx,esp
c0018c68:	53                   	push   ebx
c0018c69:	68 82 00 00 c0       	push   0xc0000082
c0018c6e:	e8 8d ff ff ff       	call   c0018c00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c73:	53                   	push   ebx
c0018c74:	6a 00                	push   0x0
c0018c76:	6a 00                	push   0x0
c0018c78:	68 82 00 00 c0       	push   0xc0000082
c0018c7d:	e8 62 ff ff ff       	call   c0018be4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c82:	83 c4 18             	add    esp,0x18
c0018c85:	83 c4 10             	add    esp,0x10
c0018c88:	5b                   	pop    ebx
c0018c89:	5e                   	pop    esi
c0018c8a:	c3                   	ret    
c0018c8b:	90                   	nop

c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c8c:	55                   	push   ebp
c0018c8d:	57                   	push   edi
c0018c8e:	56                   	push   esi
c0018c8f:	53                   	push   ebx
c0018c90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c94:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c9c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ca0:	39 05 c0 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8c0,eax
c0018ca6:	75 23                	jne    c0018ccb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ca8:	a1 0c 0f 03 c0       	mov    eax,ds:0xc0030f0c
c0018cad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cb1:	89 06                	mov    DWORD PTR [esi],eax
c0018cb3:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0018cb8:	89 07                	mov    DWORD PTR [edi],eax
c0018cba:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c0018cbf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cc2:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c0018cc7:	89 02                	mov    DWORD PTR [edx],eax
c0018cc9:	eb 3f                	jmp    c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018ccb:	31 c9                	xor    ecx,ecx
c0018ccd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cd1:	0f a2                	cpuid  
c0018cd3:	89 06                	mov    DWORD PTR [esi],eax
c0018cd5:	89 1f                	mov    DWORD PTR [edi],ebx
c0018cd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cdb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cde:	89 10                	mov    DWORD PTR [eax],edx
c0018ce0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ce4:	a3 c0 d8 02 c0       	mov    ds:0xc002d8c0,eax
c0018ce9:	8b 06                	mov    eax,DWORD PTR [esi]
c0018ceb:	a3 0c 0f 03 c0       	mov    ds:0xc0030f0c,eax
c0018cf0:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cf2:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0018cf7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cfa:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c0018cff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d05:	a3 00 0f 03 c0       	mov    ds:0xc0030f00,eax
c0018d0a:	5b                   	pop    ebx
c0018d0b:	5e                   	pop    esi
c0018d0c:	5f                   	pop    edi
c0018d0d:	5d                   	pop    ebp
c0018d0e:	c3                   	ret    
c0018d0f:	90                   	nop

c0018d10 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d10:	83 ec 10             	sub    esp,0x10
c0018d13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d17:	50                   	push   eax
c0018d18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1c:	50                   	push   eax
c0018d1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d21:	50                   	push   eax
c0018d22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d26:	50                   	push   eax
c0018d27:	6a 01                	push   0x1
c0018d29:	e8 5e ff ff ff       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d32:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d36:	0f 95 c0             	setne  al
c0018d39:	83 c4 24             	add    esp,0x24
c0018d3c:	c3                   	ret    
c0018d3d:	90                   	nop

c0018d3e <CPU::cpuidCheckECX(unsigned int)>:
c0018d3e:	83 ec 10             	sub    esp,0x10
c0018d41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d45:	50                   	push   eax
c0018d46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4a:	50                   	push   eax
c0018d4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4f:	50                   	push   eax
c0018d50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d54:	50                   	push   eax
c0018d55:	6a 01                	push   0x1
c0018d57:	e8 30 ff ff ff       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d60:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d64:	0f 95 c0             	setne  al
c0018d67:	83 c4 24             	add    esp,0x24
c0018d6a:	c3                   	ret    
c0018d6b:	90                   	nop

c0018d6c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d6c:	83 ec 10             	sub    esp,0x10
c0018d6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d73:	50                   	push   eax
c0018d74:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d78:	50                   	push   eax
c0018d79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7d:	50                   	push   eax
c0018d7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d82:	50                   	push   eax
c0018d83:	6a 07                	push   0x7
c0018d85:	e8 02 ff ff ff       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d8e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d92:	0f 95 c0             	setne  al
c0018d95:	83 c4 24             	add    esp,0x24
c0018d98:	c3                   	ret    
c0018d99:	90                   	nop

c0018d9a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d9a:	83 ec 10             	sub    esp,0x10
c0018d9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da1:	50                   	push   eax
c0018da2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da6:	50                   	push   eax
c0018da7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dab:	50                   	push   eax
c0018dac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db0:	50                   	push   eax
c0018db1:	6a 07                	push   0x7
c0018db3:	e8 d4 fe ff ff       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018db8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dbc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dc0:	0f 95 c0             	setne  al
c0018dc3:	83 c4 24             	add    esp,0x24
c0018dc6:	c3                   	ret    
c0018dc7:	90                   	nop

c0018dc8 <CPU::CPU()>:
c0018dc8:	83 ec 0c             	sub    esp,0xc
c0018dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dcf:	83 ec 08             	sub    esp,0x8
c0018dd2:	68 a2 b8 02 c0       	push   0xc002b8a2
c0018dd7:	50                   	push   eax
c0018dd8:	e8 89 b7 ff ff       	call   c0014566 <Device::Device(char const*)>
c0018ddd:	83 c4 10             	add    esp,0x10
c0018de0:	ba 7c b9 02 c0       	mov    edx,0xc002b97c
c0018de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de9:	89 10                	mov    DWORD PTR [eax],edx
c0018deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018def:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dfd:	05 78 01 00 00       	add    eax,0x178
c0018e02:	83 ec 0c             	sub    esp,0xc
c0018e05:	50                   	push   eax
c0018e06:	e8 4d 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e0b:	83 c4 10             	add    esp,0x10
c0018e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e12:	05 7c 09 00 00       	add    eax,0x97c
c0018e17:	83 ec 0c             	sub    esp,0xc
c0018e1a:	50                   	push   eax
c0018e1b:	e8 9a 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e20:	83 c4 10             	add    esp,0x10
c0018e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e27:	05 7c 11 00 00       	add    eax,0x117c
c0018e2c:	83 ec 0c             	sub    esp,0xc
c0018e2f:	50                   	push   eax
c0018e30:	e8 9d 86 ff ff       	call   c00114d2 <TSS::TSS()>
c0018e35:	83 c4 10             	add    esp,0x10
c0018e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e3c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e47:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e51:	90                   	nop
c0018e52:	83 c4 0c             	add    esp,0xc
c0018e55:	c3                   	ret    

c0018e56 <CPU::displayFeatures()>:
c0018e56:	53                   	push   ebx
c0018e57:	83 ec 10             	sub    esp,0x10
c0018e5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e5e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e64:	68 b0 b5 02 c0       	push   0xc002b5b0
c0018e69:	e8 e2 a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018e6e:	59                   	pop    ecx
c0018e6f:	58                   	pop    eax
c0018e70:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e76:	50                   	push   eax
c0018e77:	68 c1 b5 02 c0       	push   0xc002b5c1
c0018e7c:	e8 cf a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018e81:	58                   	pop    eax
c0018e82:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e88:	5a                   	pop    edx
c0018e89:	c1 e8 0e             	shr    eax,0xe
c0018e8c:	0f b6 c0             	movzx  eax,al
c0018e8f:	50                   	push   eax
c0018e90:	68 d2 b5 02 c0       	push   0xc002b5d2
c0018e95:	e8 b6 a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018e9a:	59                   	pop    ecx
c0018e9b:	58                   	pop    eax
c0018e9c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea2:	66 c1 e8 06          	shr    ax,0x6
c0018ea6:	0f b6 c0             	movzx  eax,al
c0018ea9:	50                   	push   eax
c0018eaa:	68 e3 b5 02 c0       	push   0xc002b5e3
c0018eaf:	e8 9c a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018eb4:	c7 04 24 90 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba90
c0018ebb:	e8 90 a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ec8:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ecf:	74 05                	je     c0018ed6 <CPU::displayFeatures()+0x80>
c0018ed1:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ed6:	52                   	push   edx
c0018ed7:	52                   	push   edx
c0018ed8:	50                   	push   eax
c0018ed9:	68 f4 b5 02 c0       	push   0xc002b5f4
c0018ede:	e8 6d a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018ee3:	83 c4 10             	add    esp,0x10
c0018ee6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018eeb:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018ef2:	78 05                	js     c0018ef9 <CPU::displayFeatures()+0xa3>
c0018ef4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ef9:	51                   	push   ecx
c0018efa:	51                   	push   ecx
c0018efb:	50                   	push   eax
c0018efc:	68 0b b6 02 c0       	push   0xc002b60b
c0018f01:	e8 4a a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018f06:	83 c4 10             	add    esp,0x10
c0018f09:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f0e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f15:	75 05                	jne    c0018f1c <CPU::displayFeatures()+0xc6>
c0018f17:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f1c:	52                   	push   edx
c0018f1d:	52                   	push   edx
c0018f1e:	50                   	push   eax
c0018f1f:	68 22 b6 02 c0       	push   0xc002b622
c0018f24:	e8 27 a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f31:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f38:	75 05                	jne    c0018f3f <CPU::displayFeatures()+0xe9>
c0018f3a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f3f:	51                   	push   ecx
c0018f40:	51                   	push   ecx
c0018f41:	50                   	push   eax
c0018f42:	68 39 b6 02 c0       	push   0xc002b639
c0018f47:	e8 04 a0 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f54:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f5b:	75 05                	jne    c0018f62 <CPU::displayFeatures()+0x10c>
c0018f5d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f62:	52                   	push   edx
c0018f63:	52                   	push   edx
c0018f64:	50                   	push   eax
c0018f65:	68 50 b6 02 c0       	push   0xc002b650
c0018f6a:	e8 e1 9f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018f6f:	83 c4 10             	add    esp,0x10
c0018f72:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f77:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f7e:	75 05                	jne    c0018f85 <CPU::displayFeatures()+0x12f>
c0018f80:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f85:	51                   	push   ecx
c0018f86:	51                   	push   ecx
c0018f87:	50                   	push   eax
c0018f88:	68 67 b6 02 c0       	push   0xc002b667
c0018f8d:	e8 be 9f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018f92:	83 c4 10             	add    esp,0x10
c0018f95:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f9a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fa1:	75 05                	jne    c0018fa8 <CPU::displayFeatures()+0x152>
c0018fa3:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fa8:	52                   	push   edx
c0018fa9:	52                   	push   edx
c0018faa:	50                   	push   eax
c0018fab:	68 7e b6 02 c0       	push   0xc002b67e
c0018fb0:	e8 9b 9f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018fb5:	83 c4 10             	add    esp,0x10
c0018fb8:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fbd:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fc4:	75 05                	jne    c0018fcb <CPU::displayFeatures()+0x175>
c0018fc6:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fcb:	51                   	push   ecx
c0018fcc:	51                   	push   ecx
c0018fcd:	50                   	push   eax
c0018fce:	68 95 b6 02 c0       	push   0xc002b695
c0018fd3:	e8 78 9f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018fd8:	83 c4 10             	add    esp,0x10
c0018fdb:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fe0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018fe7:	75 05                	jne    c0018fee <CPU::displayFeatures()+0x198>
c0018fe9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fee:	52                   	push   edx
c0018fef:	52                   	push   edx
c0018ff0:	50                   	push   eax
c0018ff1:	68 ac b6 02 c0       	push   0xc002b6ac
c0018ff6:	e8 55 9f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019003:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001900a:	75 05                	jne    c0019011 <CPU::displayFeatures()+0x1bb>
c001900c:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019011:	51                   	push   ecx
c0019012:	51                   	push   ecx
c0019013:	50                   	push   eax
c0019014:	68 c3 b6 02 c0       	push   0xc002b6c3
c0019019:	e8 32 9f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001901e:	83 c4 10             	add    esp,0x10
c0019021:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019026:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001902d:	75 05                	jne    c0019034 <CPU::displayFeatures()+0x1de>
c001902f:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019034:	52                   	push   edx
c0019035:	52                   	push   edx
c0019036:	50                   	push   eax
c0019037:	68 da b6 02 c0       	push   0xc002b6da
c001903c:	e8 0f 9f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0019041:	83 c4 10             	add    esp,0x10
c0019044:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019049:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019050:	75 05                	jne    c0019057 <CPU::displayFeatures()+0x201>
c0019052:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019057:	51                   	push   ecx
c0019058:	51                   	push   ecx
c0019059:	50                   	push   eax
c001905a:	68 f1 b6 02 c0       	push   0xc002b6f1
c001905f:	e8 ec 9e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0019064:	83 c4 10             	add    esp,0x10
c0019067:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001906c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019073:	75 05                	jne    c001907a <CPU::displayFeatures()+0x224>
c0019075:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c001907a:	52                   	push   edx
c001907b:	52                   	push   edx
c001907c:	50                   	push   eax
c001907d:	68 08 b7 02 c0       	push   0xc002b708
c0019082:	e8 c9 9e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0019087:	83 c4 10             	add    esp,0x10
c001908a:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001908f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019096:	78 05                	js     c001909d <CPU::displayFeatures()+0x247>
c0019098:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c001909d:	51                   	push   ecx
c001909e:	51                   	push   ecx
c001909f:	50                   	push   eax
c00190a0:	68 1f b7 02 c0       	push   0xc002b71f
c00190a5:	e8 a6 9e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00190aa:	83 c4 10             	add    esp,0x10
c00190ad:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c00190b2:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190b9:	75 05                	jne    c00190c0 <CPU::displayFeatures()+0x26a>
c00190bb:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c00190c0:	52                   	push   edx
c00190c1:	52                   	push   edx
c00190c2:	50                   	push   eax
c00190c3:	68 36 b7 02 c0       	push   0xc002b736
c00190c8:	e8 83 9e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00190cd:	83 c4 18             	add    esp,0x18
c00190d0:	5b                   	pop    ebx
c00190d1:	c3                   	ret    

c00190d2 <CPU::detectFeatures()>:
c00190d2:	55                   	push   ebp
c00190d3:	57                   	push   edi
c00190d4:	56                   	push   esi
c00190d5:	53                   	push   ebx
c00190d6:	83 ec 50             	sub    esp,0x50
c00190d9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190dd:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190e7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190ee:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190f4:	6a 0d                	push   0xd
c00190f6:	6a 00                	push   0x0
c00190f8:	57                   	push   edi
c00190f9:	e8 7a 76 fe ff       	call   c0000778 <memset>
c00190fe:	83 c4 10             	add    esp,0x10
c0019101:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0019106:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001910d:	0f 84 20 09 00 00    	je     c0019a33 <CPU::detectFeatures()+0x961>
c0019113:	83 ec 0c             	sub    esp,0xc
c0019116:	6a 10                	push   0x10
c0019118:	e8 f3 fb ff ff       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c001911d:	83 e0 01             	and    eax,0x1
c0019120:	8d 14 00             	lea    edx,[eax+eax*1]
c0019123:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019129:	83 e0 fd             	and    eax,0xfffffffd
c001912c:	09 d0                	or     eax,edx
c001912e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019134:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001913b:	e8 d0 fb ff ff       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c0019140:	83 e0 01             	and    eax,0x1
c0019143:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001914a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019150:	83 e0 fb             	and    eax,0xfffffffb
c0019153:	09 d0                	or     eax,edx
c0019155:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001915b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019162:	e8 a9 fb ff ff       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c0019167:	83 e0 01             	and    eax,0x1
c001916a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019171:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019177:	83 e0 f7             	and    eax,0xfffffff7
c001917a:	09 d0                	or     eax,edx
c001917c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019182:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019189:	e8 82 fb ff ff       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c001918e:	83 e0 01             	and    eax,0x1
c0019191:	c1 e0 04             	shl    eax,0x4
c0019194:	88 c2                	mov    dl,al
c0019196:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001919c:	83 e0 ef             	and    eax,0xffffffef
c001919f:	09 d0                	or     eax,edx
c00191a1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191a7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191ae:	e8 5d fb ff ff       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c00191b3:	83 e0 01             	and    eax,0x1
c00191b6:	c1 e0 05             	shl    eax,0x5
c00191b9:	88 c2                	mov    dl,al
c00191bb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191c1:	83 e0 df             	and    eax,0xffffffdf
c00191c4:	09 d0                	or     eax,edx
c00191c6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191cc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191d3:	e8 38 fb ff ff       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c00191d8:	83 e0 01             	and    eax,0x1
c00191db:	8d 14 00             	lea    edx,[eax+eax*1]
c00191de:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191e4:	83 e0 fd             	and    eax,0xfffffffd
c00191e7:	09 d0                	or     eax,edx
c00191e9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191ef:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00191f6:	e8 15 fb ff ff       	call   c0018d10 <CPU::cpuidCheckEDX(unsigned int)>
c00191fb:	83 e0 01             	and    eax,0x1
c00191fe:	c1 e0 06             	shl    eax,0x6
c0019201:	88 c2                	mov    dl,al
c0019203:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019209:	83 e0 bf             	and    eax,0xffffffbf
c001920c:	09 d0                	or     eax,edx
c001920e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019214:	58                   	pop    eax
c0019215:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019219:	56                   	push   esi
c001921a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001921e:	55                   	push   ebp
c001921f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019223:	50                   	push   eax
c0019224:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019228:	52                   	push   edx
c0019229:	6a 00                	push   0x0
c001922b:	e8 5c fa ff ff       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019230:	83 c4 1c             	add    esp,0x1c
c0019233:	6a 04                	push   0x4
c0019235:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019239:	50                   	push   eax
c001923a:	57                   	push   edi
c001923b:	e8 04 75 fe ff       	call   c0000744 <memcpy>
c0019240:	83 c4 0c             	add    esp,0xc
c0019243:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019249:	6a 04                	push   0x4
c001924b:	56                   	push   esi
c001924c:	50                   	push   eax
c001924d:	e8 f2 74 fe ff       	call   c0000744 <memcpy>
c0019252:	83 c4 0c             	add    esp,0xc
c0019255:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001925b:	6a 04                	push   0x4
c001925d:	55                   	push   ebp
c001925e:	50                   	push   eax
c001925f:	e8 e0 74 fe ff       	call   c0000744 <memcpy>
c0019264:	58                   	pop    eax
c0019265:	5a                   	pop    edx
c0019266:	68 4d b7 02 c0       	push   0xc002b74d
c001926b:	57                   	push   edi
c001926c:	e8 4f 76 fe ff       	call   c00008c0 <strcmp>
c0019271:	83 c4 10             	add    esp,0x10
c0019274:	85 c0                	test   eax,eax
c0019276:	75 0f                	jne    c0019287 <CPU::detectFeatures()+0x1b5>
c0019278:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019282:	e9 22 02 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c0019287:	50                   	push   eax
c0019288:	50                   	push   eax
c0019289:	68 5a b7 02 c0       	push   0xc002b75a
c001928e:	57                   	push   edi
c001928f:	e8 2c 76 fe ff       	call   c00008c0 <strcmp>
c0019294:	83 c4 10             	add    esp,0x10
c0019297:	85 c0                	test   eax,eax
c0019299:	74 dd                	je     c0019278 <CPU::detectFeatures()+0x1a6>
c001929b:	51                   	push   ecx
c001929c:	51                   	push   ecx
c001929d:	68 67 b7 02 c0       	push   0xc002b767
c00192a2:	57                   	push   edi
c00192a3:	e8 18 76 fe ff       	call   c00008c0 <strcmp>
c00192a8:	83 c4 10             	add    esp,0x10
c00192ab:	85 c0                	test   eax,eax
c00192ad:	74 2a                	je     c00192d9 <CPU::detectFeatures()+0x207>
c00192af:	52                   	push   edx
c00192b0:	52                   	push   edx
c00192b1:	68 74 b7 02 c0       	push   0xc002b774
c00192b6:	57                   	push   edi
c00192b7:	e8 04 76 fe ff       	call   c00008c0 <strcmp>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	85 c0                	test   eax,eax
c00192c1:	74 16                	je     c00192d9 <CPU::detectFeatures()+0x207>
c00192c3:	50                   	push   eax
c00192c4:	50                   	push   eax
c00192c5:	68 81 b7 02 c0       	push   0xc002b781
c00192ca:	57                   	push   edi
c00192cb:	e8 f0 75 fe ff       	call   c00008c0 <strcmp>
c00192d0:	83 c4 10             	add    esp,0x10
c00192d3:	85 c0                	test   eax,eax
c00192d5:	74 48                	je     c001931f <CPU::detectFeatures()+0x24d>
c00192d7:	eb 0f                	jmp    c00192e8 <CPU::detectFeatures()+0x216>
c00192d9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192e3:	e9 c1 01 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c00192e8:	50                   	push   eax
c00192e9:	50                   	push   eax
c00192ea:	68 8e b7 02 c0       	push   0xc002b78e
c00192ef:	57                   	push   edi
c00192f0:	e8 cb 75 fe ff       	call   c00008c0 <strcmp>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	85 c0                	test   eax,eax
c00192fa:	74 23                	je     c001931f <CPU::detectFeatures()+0x24d>
c00192fc:	50                   	push   eax
c00192fd:	50                   	push   eax
c00192fe:	68 9b b7 02 c0       	push   0xc002b79b
c0019303:	57                   	push   edi
c0019304:	e8 b7 75 fe ff       	call   c00008c0 <strcmp>
c0019309:	83 c4 10             	add    esp,0x10
c001930c:	85 c0                	test   eax,eax
c001930e:	75 1e                	jne    c001932e <CPU::detectFeatures()+0x25c>
c0019310:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001931a:	e9 8a 01 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c001931f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019329:	e9 7b 01 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c001932e:	50                   	push   eax
c001932f:	50                   	push   eax
c0019330:	68 a8 b7 02 c0       	push   0xc002b7a8
c0019335:	57                   	push   edi
c0019336:	e8 85 75 fe ff       	call   c00008c0 <strcmp>
c001933b:	83 c4 10             	add    esp,0x10
c001933e:	85 c0                	test   eax,eax
c0019340:	75 0f                	jne    c0019351 <CPU::detectFeatures()+0x27f>
c0019342:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001934c:	e9 58 01 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c0019351:	50                   	push   eax
c0019352:	50                   	push   eax
c0019353:	68 67 b7 02 c0       	push   0xc002b767
c0019358:	57                   	push   edi
c0019359:	e8 62 75 fe ff       	call   c00008c0 <strcmp>
c001935e:	83 c4 10             	add    esp,0x10
c0019361:	85 c0                	test   eax,eax
c0019363:	75 0f                	jne    c0019374 <CPU::detectFeatures()+0x2a2>
c0019365:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001936f:	e9 35 01 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c0019374:	50                   	push   eax
c0019375:	50                   	push   eax
c0019376:	68 b5 b7 02 c0       	push   0xc002b7b5
c001937b:	57                   	push   edi
c001937c:	e8 3f 75 fe ff       	call   c00008c0 <strcmp>
c0019381:	83 c4 10             	add    esp,0x10
c0019384:	85 c0                	test   eax,eax
c0019386:	75 0f                	jne    c0019397 <CPU::detectFeatures()+0x2c5>
c0019388:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019392:	e9 12 01 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c0019397:	51                   	push   ecx
c0019398:	51                   	push   ecx
c0019399:	68 c2 b7 02 c0       	push   0xc002b7c2
c001939e:	57                   	push   edi
c001939f:	e8 1c 75 fe ff       	call   c00008c0 <strcmp>
c00193a4:	83 c4 10             	add    esp,0x10
c00193a7:	85 c0                	test   eax,eax
c00193a9:	75 0f                	jne    c00193ba <CPU::detectFeatures()+0x2e8>
c00193ab:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193b5:	e9 ef 00 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c00193ba:	52                   	push   edx
c00193bb:	52                   	push   edx
c00193bc:	68 cf b7 02 c0       	push   0xc002b7cf
c00193c1:	57                   	push   edi
c00193c2:	e8 f9 74 fe ff       	call   c00008c0 <strcmp>
c00193c7:	83 c4 10             	add    esp,0x10
c00193ca:	85 c0                	test   eax,eax
c00193cc:	75 0f                	jne    c00193dd <CPU::detectFeatures()+0x30b>
c00193ce:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193d8:	e9 cc 00 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c00193dd:	50                   	push   eax
c00193de:	50                   	push   eax
c00193df:	68 dc b7 02 c0       	push   0xc002b7dc
c00193e4:	57                   	push   edi
c00193e5:	e8 d6 74 fe ff       	call   c00008c0 <strcmp>
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	85 c0                	test   eax,eax
c00193ef:	75 0f                	jne    c0019400 <CPU::detectFeatures()+0x32e>
c00193f1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00193fb:	e9 a9 00 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c0019400:	50                   	push   eax
c0019401:	50                   	push   eax
c0019402:	68 e9 b7 02 c0       	push   0xc002b7e9
c0019407:	57                   	push   edi
c0019408:	e8 b3 74 fe ff       	call   c00008c0 <strcmp>
c001940d:	83 c4 10             	add    esp,0x10
c0019410:	85 c0                	test   eax,eax
c0019412:	75 0f                	jne    c0019423 <CPU::detectFeatures()+0x351>
c0019414:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001941e:	e9 86 00 00 00       	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c0019423:	50                   	push   eax
c0019424:	50                   	push   eax
c0019425:	68 f6 b7 02 c0       	push   0xc002b7f6
c001942a:	57                   	push   edi
c001942b:	e8 90 74 fe ff       	call   c00008c0 <strcmp>
c0019430:	83 c4 10             	add    esp,0x10
c0019433:	85 c0                	test   eax,eax
c0019435:	75 0c                	jne    c0019443 <CPU::detectFeatures()+0x371>
c0019437:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019441:	eb 66                	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c0019443:	50                   	push   eax
c0019444:	50                   	push   eax
c0019445:	68 03 b8 02 c0       	push   0xc002b803
c001944a:	57                   	push   edi
c001944b:	e8 70 74 fe ff       	call   c00008c0 <strcmp>
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	85 c0                	test   eax,eax
c0019455:	75 0c                	jne    c0019463 <CPU::detectFeatures()+0x391>
c0019457:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019461:	eb 46                	jmp    c00194a9 <CPU::detectFeatures()+0x3d7>
c0019463:	50                   	push   eax
c0019464:	50                   	push   eax
c0019465:	68 10 b8 02 c0       	push   0xc002b810
c001946a:	57                   	push   edi
c001946b:	e8 50 74 fe ff       	call   c00008c0 <strcmp>
c0019470:	83 c4 10             	add    esp,0x10
c0019473:	85 c0                	test   eax,eax
c0019475:	74 e0                	je     c0019457 <CPU::detectFeatures()+0x385>
c0019477:	50                   	push   eax
c0019478:	50                   	push   eax
c0019479:	68 1d b8 02 c0       	push   0xc002b81d
c001947e:	57                   	push   edi
c001947f:	e8 3c 74 fe ff       	call   c00008c0 <strcmp>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	85 c0                	test   eax,eax
c0019489:	74 cc                	je     c0019457 <CPU::detectFeatures()+0x385>
c001948b:	51                   	push   ecx
c001948c:	51                   	push   ecx
c001948d:	68 2a b8 02 c0       	push   0xc002b82a
c0019492:	57                   	push   edi
c0019493:	e8 28 74 fe ff       	call   c00008c0 <strcmp>
c0019498:	83 c4 10             	add    esp,0x10
c001949b:	85 c0                	test   eax,eax
c001949d:	74 b8                	je     c0019457 <CPU::detectFeatures()+0x385>
c001949f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194a9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194ae:	0f 86 be 00 00 00    	jbe    c0019572 <CPU::detectFeatures()+0x4a0>
c00194b4:	83 ec 0c             	sub    esp,0xc
c00194b7:	68 80 00 00 00       	push   0x80
c00194bc:	e8 ab f8 ff ff       	call   c0018d6c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194c1:	83 e0 01             	and    eax,0x1
c00194c4:	c1 e0 06             	shl    eax,0x6
c00194c7:	88 c2                	mov    dl,al
c00194c9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194cf:	83 e0 bf             	and    eax,0xffffffbf
c00194d2:	09 d0                	or     eax,edx
c00194d4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194da:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194e1:	e8 86 f8 ff ff       	call   c0018d6c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194e6:	83 e0 01             	and    eax,0x1
c00194e9:	c1 e0 04             	shl    eax,0x4
c00194ec:	88 c2                	mov    dl,al
c00194ee:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194f4:	83 e0 ef             	and    eax,0xffffffef
c00194f7:	09 d0                	or     eax,edx
c00194f9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194ff:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019506:	e8 61 f8 ff ff       	call   c0018d6c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001950b:	c1 e0 07             	shl    eax,0x7
c001950e:	88 c2                	mov    dl,al
c0019510:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019516:	83 e0 7f             	and    eax,0x7f
c0019519:	09 d0                	or     eax,edx
c001951b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019521:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019528:	e8 6d f8 ff ff       	call   c0018d9a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001952d:	83 e0 01             	and    eax,0x1
c0019530:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019537:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001953d:	83 e0 f7             	and    eax,0xfffffff7
c0019540:	09 d0                	or     eax,edx
c0019542:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019548:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001954f:	e8 46 f8 ff ff       	call   c0018d9a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	83 e0 01             	and    eax,0x1
c001955a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019561:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019567:	83 e0 fb             	and    eax,0xfffffffb
c001956a:	09 d0                	or     eax,edx
c001956c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019572:	83 ec 0c             	sub    esp,0xc
c0019575:	56                   	push   esi
c0019576:	55                   	push   ebp
c0019577:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001957b:	57                   	push   edi
c001957c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019580:	50                   	push   eax
c0019581:	6a 01                	push   0x1
c0019583:	e8 04 f7 ff ff       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019588:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001958c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019592:	88 ca                	mov    dl,cl
c0019594:	83 e0 f0             	and    eax,0xfffffff0
c0019597:	83 e2 0f             	and    edx,0xf
c001959a:	09 d0                	or     eax,edx
c001959c:	88 ca                	mov    dl,cl
c001959e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195a4:	c0 ea 04             	shr    dl,0x4
c00195a7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195ab:	0f b6 c2             	movzx  eax,dl
c00195ae:	83 c4 20             	add    esp,0x20
c00195b1:	c1 e0 06             	shl    eax,0x6
c00195b4:	89 c5                	mov    ebp,eax
c00195b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195bc:	66 25 3f c0          	and    ax,0xc03f
c00195c0:	09 e8                	or     eax,ebp
c00195c2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195c9:	89 c8                	mov    eax,ecx
c00195cb:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195d1:	c1 e8 08             	shr    eax,0x8
c00195d4:	83 e2 3f             	and    edx,0x3f
c00195d7:	83 e0 0f             	and    eax,0xf
c00195da:	89 c5                	mov    ebp,eax
c00195dc:	c1 e5 06             	shl    ebp,0x6
c00195df:	09 d5                	or     ebp,edx
c00195e1:	89 ea                	mov    edx,ebp
c00195e3:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195e9:	88 c2                	mov    dl,al
c00195eb:	c0 ea 02             	shr    dl,0x2
c00195ee:	89 d5                	mov    ebp,edx
c00195f0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00195f6:	83 e2 c0             	and    edx,0xffffffc0
c00195f9:	09 d5                	or     ebp,edx
c00195fb:	89 ea                	mov    edx,ebp
c00195fd:	89 cd                	mov    ebp,ecx
c00195ff:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019605:	c1 ed 0c             	shr    ebp,0xc
c0019608:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001960e:	83 e5 03             	and    ebp,0x3
c0019611:	83 e2 cf             	and    edx,0xffffffcf
c0019614:	c1 e5 04             	shl    ebp,0x4
c0019617:	09 d5                	or     ebp,edx
c0019619:	3c 06                	cmp    al,0x6
c001961b:	89 ea                	mov    edx,ebp
c001961d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019623:	74 04                	je     c0019629 <CPU::detectFeatures()+0x557>
c0019625:	3c 0f                	cmp    al,0xf
c0019627:	75 5c                	jne    c0019685 <CPU::detectFeatures()+0x5b3>
c0019629:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001962d:	89 cd                	mov    ebp,ecx
c001962f:	c1 ed 10             	shr    ebp,0x10
c0019632:	c1 e5 04             	shl    ebp,0x4
c0019635:	09 ea                	or     edx,ebp
c0019637:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001963d:	0f b6 d2             	movzx  edx,dl
c0019640:	66 81 e5 3f c0       	and    bp,0xc03f
c0019645:	c1 e2 06             	shl    edx,0x6
c0019648:	09 ea                	or     edx,ebp
c001964a:	3c 0f                	cmp    al,0xf
c001964c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019653:	75 30                	jne    c0019685 <CPU::detectFeatures()+0x5b3>
c0019655:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001965b:	c1 e9 14             	shr    ecx,0x14
c001965e:	83 e0 3f             	and    eax,0x3f
c0019661:	83 c1 0f             	add    ecx,0xf
c0019664:	88 ca                	mov    dl,cl
c0019666:	c0 e9 02             	shr    cl,0x2
c0019669:	c1 e2 06             	shl    edx,0x6
c001966c:	09 d0                	or     eax,edx
c001966e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019674:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001967a:	83 e0 c0             	and    eax,0xffffffc0
c001967d:	09 c1                	or     ecx,eax
c001967f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019685:	83 ec 0c             	sub    esp,0xc
c0019688:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001968f:	56                   	push   esi
c0019690:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019694:	50                   	push   eax
c0019695:	57                   	push   edi
c0019696:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001969a:	55                   	push   ebp
c001969b:	68 00 00 00 80       	push   0x80000000
c00196a0:	e8 e7 f5 ff ff       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196a5:	83 c4 20             	add    esp,0x20
c00196a8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196b0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196b4:	76 1e                	jbe    c00196d4 <CPU::detectFeatures()+0x602>
c00196b6:	83 ec 0c             	sub    esp,0xc
c00196b9:	56                   	push   esi
c00196ba:	50                   	push   eax
c00196bb:	57                   	push   edi
c00196bc:	55                   	push   ebp
c00196bd:	68 01 00 00 80       	push   0x80000001
c00196c2:	e8 c5 f5 ff ff       	call   c0018c8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196c7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196d1:	83 c4 20             	add    esp,0x20
c00196d4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196da:	83 f8 01             	cmp    eax,0x1
c00196dd:	75 6f                	jne    c001974e <CPU::detectFeatures()+0x67c>
c00196df:	51                   	push   ecx
c00196e0:	51                   	push   ecx
c00196e1:	68 36 b8 02 c0       	push   0xc002b836
c00196e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196ea:	56                   	push   esi
c00196eb:	e8 44 71 fe ff       	call   c0000834 <strcpy>
c00196f0:	5f                   	pop    edi
c00196f1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196f7:	5d                   	pop    ebp
c00196f8:	66 c1 e8 06          	shr    ax,0x6
c00196fc:	0f b6 c0             	movzx  eax,al
c00196ff:	50                   	push   eax
c0019700:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019706:	c1 e8 0e             	shr    eax,0xe
c0019709:	0f b6 c0             	movzx  eax,al
c001970c:	50                   	push   eax
c001970d:	e8 24 f2 ff ff       	call   c0018936 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019712:	5a                   	pop    edx
c0019713:	59                   	pop    ecx
c0019714:	50                   	push   eax
c0019715:	56                   	push   esi
c0019716:	e8 59 72 fe ff       	call   c0000974 <strcat>
c001971b:	5f                   	pop    edi
c001971c:	5d                   	pop    ebp
c001971d:	56                   	push   esi
c001971e:	53                   	push   ebx
c001971f:	e8 34 ae ff ff       	call   c0014558 <Device::setName(char const*)>
c0019724:	58                   	pop    eax
c0019725:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001972b:	5a                   	pop    edx
c001972c:	68 3d b8 02 c0       	push   0xc002b83d
c0019731:	50                   	push   eax
c0019732:	e8 89 71 fe ff       	call   c00008c0 <strcmp>
c0019737:	83 c4 10             	add    esp,0x10
c001973a:	85 c0                	test   eax,eax
c001973c:	0f 85 71 03 00 00    	jne    c0019ab3 <CPU::detectFeatures()+0x9e1>
c0019742:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019749:	e9 65 03 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x9e1>
c001974e:	83 f8 02             	cmp    eax,0x2
c0019751:	0f 85 b5 00 00 00    	jne    c001980c <CPU::detectFeatures()+0x73a>
c0019757:	57                   	push   edi
c0019758:	57                   	push   edi
c0019759:	68 4f b8 02 c0       	push   0xc002b84f
c001975e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019762:	56                   	push   esi
c0019763:	e8 cc 70 fe ff       	call   c0000834 <strcpy>
c0019768:	5d                   	pop    ebp
c0019769:	58                   	pop    eax
c001976a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019770:	66 c1 e8 06          	shr    ax,0x6
c0019774:	0f b6 c0             	movzx  eax,al
c0019777:	50                   	push   eax
c0019778:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001977e:	c1 e8 0e             	shr    eax,0xe
c0019781:	0f b6 c0             	movzx  eax,al
c0019784:	50                   	push   eax
c0019785:	e8 18 f0 ff ff       	call   c00187a2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001978a:	5a                   	pop    edx
c001978b:	59                   	pop    ecx
c001978c:	50                   	push   eax
c001978d:	56                   	push   esi
c001978e:	e8 e1 71 fe ff       	call   c0000974 <strcat>
c0019793:	5f                   	pop    edi
c0019794:	5d                   	pop    ebp
c0019795:	56                   	push   esi
c0019796:	53                   	push   ebx
c0019797:	e8 bc ad ff ff       	call   c0014558 <Device::setName(char const*)>
c001979c:	58                   	pop    eax
c001979d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197a3:	5a                   	pop    edx
c00197a4:	68 54 b8 02 c0       	push   0xc002b854
c00197a9:	50                   	push   eax
c00197aa:	e8 11 71 fe ff       	call   c00008c0 <strcmp>
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	85 c0                	test   eax,eax
c00197b4:	75 20                	jne    c00197d6 <CPU::detectFeatures()+0x704>
c00197b6:	8b 15 a8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a8
c00197bc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197c2:	a8 01                	test   al,0x1
c00197c4:	74 10                	je     c00197d6 <CPU::detectFeatures()+0x704>
c00197c6:	83 e0 fe             	and    eax,0xfffffffe
c00197c9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197cf:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197dc:	c1 e8 0e             	shr    eax,0xe
c00197df:	3c 05                	cmp    al,0x5
c00197e1:	0f 85 cc 02 00 00    	jne    c0019ab3 <CPU::detectFeatures()+0x9e1>
c00197e7:	56                   	push   esi
c00197e8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197ee:	83 e0 0f             	and    eax,0xf
c00197f1:	50                   	push   eax
c00197f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197f8:	66 c1 e8 06          	shr    ax,0x6
c00197fc:	0f b6 c0             	movzx  eax,al
c00197ff:	50                   	push   eax
c0019800:	6a 05                	push   0x5
c0019802:	e8 11 f4 ff ff       	call   c0018c18 <CPU::AMD_K6_writeback(int, int, int)>
c0019807:	e9 1f 02 00 00       	jmp    c0019a2b <CPU::detectFeatures()+0x959>
c001980c:	8d 50 fd             	lea    edx,[eax-0x3]
c001980f:	83 fa 01             	cmp    edx,0x1
c0019812:	76 09                	jbe    c001981d <CPU::detectFeatures()+0x74b>
c0019814:	83 f8 06             	cmp    eax,0x6
c0019817:	0f 85 91 01 00 00    	jne    c00199ae <CPU::detectFeatures()+0x8dc>
c001981d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019823:	c1 ea 0e             	shr    edx,0xe
c0019826:	80 fa 05             	cmp    dl,0x5
c0019829:	75 7b                	jne    c00198a6 <CPU::detectFeatures()+0x7d4>
c001982b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019831:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019836:	66 81 fa 00 01       	cmp    dx,0x100
c001983b:	75 0c                	jne    c0019849 <CPU::detectFeatures()+0x777>
c001983d:	51                   	push   ecx
c001983e:	51                   	push   ecx
c001983f:	68 5b b8 02 c0       	push   0xc002b85b
c0019844:	e9 dc 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c0019849:	66 81 fa 00 02       	cmp    dx,0x200
c001984e:	75 0c                	jne    c001985c <CPU::detectFeatures()+0x78a>
c0019850:	52                   	push   edx
c0019851:	52                   	push   edx
c0019852:	68 6e b8 02 c0       	push   0xc002b86e
c0019857:	e9 c9 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c001985c:	66 81 fa 40 02       	cmp    dx,0x240
c0019861:	75 0c                	jne    c001986f <CPU::detectFeatures()+0x79d>
c0019863:	50                   	push   eax
c0019864:	50                   	push   eax
c0019865:	68 80 b8 02 c0       	push   0xc002b880
c001986a:	e9 b6 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c001986f:	83 f8 06             	cmp    eax,0x6
c0019872:	75 0c                	jne    c0019880 <CPU::detectFeatures()+0x7ae>
c0019874:	50                   	push   eax
c0019875:	50                   	push   eax
c0019876:	68 92 b8 02 c0       	push   0xc002b892
c001987b:	e9 a5 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c0019880:	83 f8 04             	cmp    eax,0x4
c0019883:	75 0c                	jne    c0019891 <CPU::detectFeatures()+0x7bf>
c0019885:	50                   	push   eax
c0019886:	50                   	push   eax
c0019887:	68 9e b8 02 c0       	push   0xc002b89e
c001988c:	e9 94 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c0019891:	83 f8 03             	cmp    eax,0x3
c0019894:	0f 85 19 02 00 00    	jne    c0019ab3 <CPU::detectFeatures()+0x9e1>
c001989a:	50                   	push   eax
c001989b:	50                   	push   eax
c001989c:	68 a6 b8 02 c0       	push   0xc002b8a6
c00198a1:	e9 7f 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00198a6:	80 fa 06             	cmp    dl,0x6
c00198a9:	0f 85 db 00 00 00    	jne    c001998a <CPU::detectFeatures()+0x8b8>
c00198af:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198b5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198ba:	66 81 fa 80 01       	cmp    dx,0x180
c00198bf:	75 0c                	jne    c00198cd <CPU::detectFeatures()+0x7fb>
c00198c1:	50                   	push   eax
c00198c2:	50                   	push   eax
c00198c3:	68 b1 b8 02 c0       	push   0xc002b8b1
c00198c8:	e9 58 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00198cd:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198d3:	66 f7 c1 80 ff       	test   cx,0xff80
c00198d8:	75 0c                	jne    c00198e6 <CPU::detectFeatures()+0x814>
c00198da:	50                   	push   eax
c00198db:	50                   	push   eax
c00198dc:	68 c1 b8 02 c0       	push   0xc002b8c1
c00198e1:	e9 3f 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00198e6:	66 81 fa 40 02       	cmp    dx,0x240
c00198eb:	75 0c                	jne    c00198f9 <CPU::detectFeatures()+0x827>
c00198ed:	55                   	push   ebp
c00198ee:	55                   	push   ebp
c00198ef:	68 c8 b8 02 c0       	push   0xc002b8c8
c00198f4:	e9 2c 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00198f9:	66 81 fa 80 02       	cmp    dx,0x280
c00198fe:	75 0c                	jne    c001990c <CPU::detectFeatures()+0x83a>
c0019900:	57                   	push   edi
c0019901:	57                   	push   edi
c0019902:	68 d1 b8 02 c0       	push   0xc002b8d1
c0019907:	e9 19 01 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c001990c:	66 81 fa 40 03       	cmp    dx,0x340
c0019911:	74 ed                	je     c0019900 <CPU::detectFeatures()+0x82e>
c0019913:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019918:	75 0c                	jne    c0019926 <CPU::detectFeatures()+0x854>
c001991a:	56                   	push   esi
c001991b:	56                   	push   esi
c001991c:	68 d8 b8 02 c0       	push   0xc002b8d8
c0019921:	e9 ff 00 00 00       	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c0019926:	83 f8 06             	cmp    eax,0x6
c0019929:	0f 84 45 ff ff ff    	je     c0019874 <CPU::detectFeatures()+0x7a2>
c001992f:	83 f8 04             	cmp    eax,0x4
c0019932:	0f 84 4d ff ff ff    	je     c0019885 <CPU::detectFeatures()+0x7b3>
c0019938:	83 f8 03             	cmp    eax,0x3
c001993b:	0f 85 72 01 00 00    	jne    c0019ab3 <CPU::detectFeatures()+0x9e1>
c0019941:	51                   	push   ecx
c0019942:	51                   	push   ecx
c0019943:	68 e1 b8 02 c0       	push   0xc002b8e1
c0019948:	53                   	push   ebx
c0019949:	e8 0a ac ff ff       	call   c0014558 <Device::setName(char const*)>
c001994e:	b1 c1                	mov    cl,0xc1
c0019950:	88 c8                	mov    al,cl
c0019952:	e6 22                	out    0x22,al
c0019954:	e4 23                	in     al,0x23
c0019956:	88 c2                	mov    dl,al
c0019958:	88 c8                	mov    al,cl
c001995a:	e6 22                	out    0x22,al
c001995c:	88 d0                	mov    al,dl
c001995e:	83 c8 10             	or     eax,0x10
c0019961:	e6 23                	out    0x23,al
c0019963:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001996a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001996d:	89 d0                	mov    eax,edx
c001996f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019975:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019979:	40                   	inc    eax
c001997a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019980:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019985:	e9 a1 00 00 00       	jmp    c0019a2b <CPU::detectFeatures()+0x959>
c001998a:	83 f8 06             	cmp    eax,0x6
c001998d:	0f 84 e1 fe ff ff    	je     c0019874 <CPU::detectFeatures()+0x7a2>
c0019993:	83 f8 04             	cmp    eax,0x4
c0019996:	0f 84 e9 fe ff ff    	je     c0019885 <CPU::detectFeatures()+0x7b3>
c001999c:	83 f8 03             	cmp    eax,0x3
c001999f:	0f 85 0e 01 00 00    	jne    c0019ab3 <CPU::detectFeatures()+0x9e1>
c00199a5:	52                   	push   edx
c00199a6:	52                   	push   edx
c00199a7:	68 ec b8 02 c0       	push   0xc002b8ec
c00199ac:	eb 77                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00199ae:	83 f8 07             	cmp    eax,0x7
c00199b1:	75 09                	jne    c00199bc <CPU::detectFeatures()+0x8ea>
c00199b3:	50                   	push   eax
c00199b4:	50                   	push   eax
c00199b5:	68 f6 b8 02 c0       	push   0xc002b8f6
c00199ba:	eb 69                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00199bc:	83 f8 0a             	cmp    eax,0xa
c00199bf:	75 09                	jne    c00199ca <CPU::detectFeatures()+0x8f8>
c00199c1:	50                   	push   eax
c00199c2:	50                   	push   eax
c00199c3:	68 01 b9 02 c0       	push   0xc002b901
c00199c8:	eb 5b                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00199ca:	83 f8 0b             	cmp    eax,0xb
c00199cd:	75 09                	jne    c00199d8 <CPU::detectFeatures()+0x906>
c00199cf:	50                   	push   eax
c00199d0:	50                   	push   eax
c00199d1:	68 09 b9 02 c0       	push   0xc002b909
c00199d6:	eb 4d                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00199d8:	83 f8 08             	cmp    eax,0x8
c00199db:	75 09                	jne    c00199e6 <CPU::detectFeatures()+0x914>
c00199dd:	50                   	push   eax
c00199de:	50                   	push   eax
c00199df:	68 12 b9 02 c0       	push   0xc002b912
c00199e4:	eb 3f                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00199e6:	83 f8 09             	cmp    eax,0x9
c00199e9:	75 09                	jne    c00199f4 <CPU::detectFeatures()+0x922>
c00199eb:	50                   	push   eax
c00199ec:	50                   	push   eax
c00199ed:	68 1a b9 02 c0       	push   0xc002b91a
c00199f2:	eb 31                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c00199f4:	83 f8 05             	cmp    eax,0x5
c00199f7:	75 09                	jne    c0019a02 <CPU::detectFeatures()+0x930>
c00199f9:	50                   	push   eax
c00199fa:	50                   	push   eax
c00199fb:	68 22 b9 02 c0       	push   0xc002b922
c0019a00:	eb 23                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c0019a02:	83 f8 0c             	cmp    eax,0xc
c0019a05:	75 09                	jne    c0019a10 <CPU::detectFeatures()+0x93e>
c0019a07:	55                   	push   ebp
c0019a08:	55                   	push   ebp
c0019a09:	68 30 b9 02 c0       	push   0xc002b930
c0019a0e:	eb 15                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c0019a10:	83 f8 0d             	cmp    eax,0xd
c0019a13:	75 09                	jne    c0019a1e <CPU::detectFeatures()+0x94c>
c0019a15:	57                   	push   edi
c0019a16:	57                   	push   edi
c0019a17:	68 3b b9 02 c0       	push   0xc002b93b
c0019a1c:	eb 07                	jmp    c0019a25 <CPU::detectFeatures()+0x953>
c0019a1e:	56                   	push   esi
c0019a1f:	56                   	push   esi
c0019a20:	68 4f b9 02 c0       	push   0xc002b94f
c0019a25:	53                   	push   ebx
c0019a26:	e8 2d ab ff ff       	call   c0014558 <Device::setName(char const*)>
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	e9 80 00 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x9e1>
c0019a33:	51                   	push   ecx
c0019a34:	51                   	push   ecx
c0019a35:	68 9b b7 02 c0       	push   0xc002b79b
c0019a3a:	57                   	push   edi
c0019a3b:	e8 f4 6d fe ff       	call   c0000834 <strcpy>
c0019a40:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a4a:	e8 5f 68 fe ff       	call   c00002ae <is486>
c0019a4f:	83 c4 10             	add    esp,0x10
c0019a52:	85 c0                	test   eax,eax
c0019a54:	74 2b                	je     c0019a81 <CPU::detectFeatures()+0x9af>
c0019a56:	52                   	push   edx
c0019a57:	52                   	push   edx
c0019a58:	68 5b b9 02 c0       	push   0xc002b95b
c0019a5d:	53                   	push   ebx
c0019a5e:	e8 f5 aa ff ff       	call   c0014558 <Device::setName(char const*)>
c0019a63:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a6a:	0f 20 c0             	mov    eax,cr0
c0019a6d:	83 e0 14             	and    eax,0x14
c0019a70:	83 c4 10             	add    esp,0x10
c0019a73:	83 f8 04             	cmp    eax,0x4
c0019a76:	75 1f                	jne    c0019a97 <CPU::detectFeatures()+0x9c5>
c0019a78:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a7f:	eb 32                	jmp    c0019ab3 <CPU::detectFeatures()+0x9e1>
c0019a81:	50                   	push   eax
c0019a82:	50                   	push   eax
c0019a83:	68 66 b9 02 c0       	push   0xc002b966
c0019a88:	53                   	push   ebx
c0019a89:	e8 ca aa ff ff       	call   c0014558 <Device::setName(char const*)>
c0019a8e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a95:	eb d3                	jmp    c0019a6a <CPU::detectFeatures()+0x998>
c0019a97:	e8 ed 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a9c:	83 e0 01             	and    eax,0x1
c0019a9f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019aa2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019aa8:	83 e0 fd             	and    eax,0xfffffffd
c0019aab:	09 d0                	or     eax,edx
c0019aad:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ab3:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019aba:	83 c4 4c             	add    esp,0x4c
c0019abd:	5b                   	pop    ebx
c0019abe:	5e                   	pop    esi
c0019abf:	5f                   	pop    edi
c0019ac0:	5d                   	pop    ebp
c0019ac1:	c3                   	ret    

c0019ac2 <CPU::setupSMEP()>:
c0019ac2:	0f 20 e0             	mov    eax,cr4
c0019ac5:	0d 00 00 10 00       	or     eax,0x100000
c0019aca:	0f 22 e0             	mov    cr4,eax
c0019acd:	c3                   	ret    

c0019ace <CPU::setupUMIP()>:
c0019ace:	0f 20 e0             	mov    eax,cr4
c0019ad1:	80 cc 08             	or     ah,0x8
c0019ad4:	0f 22 e0             	mov    cr4,eax
c0019ad7:	c3                   	ret    

c0019ad8 <CPU::setupTSC()>:
c0019ad8:	0f 20 e0             	mov    eax,cr4
c0019adb:	83 c8 04             	or     eax,0x4
c0019ade:	0f 22 e0             	mov    cr4,eax
c0019ae1:	c3                   	ret    

c0019ae2 <CPU::setupLargePages()>:
c0019ae2:	0f 20 e0             	mov    eax,cr4
c0019ae5:	83 c8 10             	or     eax,0x10
c0019ae8:	0f 22 e0             	mov    cr4,eax
c0019aeb:	c3                   	ret    

c0019aec <CPU::setupPAT()>:
c0019aec:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0019af1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019af8:	74 2c                	je     c0019b26 <CPU::setupPAT()+0x3a>
c0019afa:	53                   	push   ebx
c0019afb:	83 ec 10             	sub    esp,0x10
c0019afe:	68 77 02 00 00       	push   0x277
c0019b03:	50                   	push   eax
c0019b04:	e8 df 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b09:	83 e2 f8             	and    edx,0xfffffff8
c0019b0c:	83 ca 01             	or     edx,0x1
c0019b0f:	52                   	push   edx
c0019b10:	50                   	push   eax
c0019b11:	68 77 02 00 00       	push   0x277
c0019b16:	ff 35 a8 e3 02 c0    	push   DWORD PTR ds:0xc002e3a8
c0019b1c:	e8 f3 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b21:	83 c4 28             	add    esp,0x28
c0019b24:	5b                   	pop    ebx
c0019b25:	c3                   	ret    
c0019b26:	c3                   	ret    
c0019b27:	90                   	nop

c0019b28 <CPU::setupMTRR()>:
c0019b28:	c3                   	ret    
c0019b29:	90                   	nop

c0019b2a <CPU::setupGlobalPages()>:
c0019b2a:	0f 20 e0             	mov    eax,cr4
c0019b2d:	0c 80                	or     al,0x80
c0019b2f:	0f 22 e0             	mov    cr4,eax
c0019b32:	c3                   	ret    
c0019b33:	90                   	nop

c0019b34 <CPU::allowUsermodeDataAccess()>:
c0019b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b38:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b3f:	74 03                	je     c0019b44 <CPU::allowUsermodeDataAccess()+0x10>
c0019b41:	0f 01 cb             	stac   
c0019b44:	c3                   	ret    
c0019b45:	90                   	nop

c0019b46 <CPU::prohibitUsermodeDataAccess()>:
c0019b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b4a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b51:	74 03                	je     c0019b56 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b53:	0f 01 ca             	clac   
c0019b56:	c3                   	ret    
c0019b57:	90                   	nop

c0019b58 <CPU::setupSMAP()>:
c0019b58:	0f 20 e0             	mov    eax,cr4
c0019b5b:	0d 00 00 20 00       	or     eax,0x200000
c0019b60:	0f 22 e0             	mov    cr4,eax
c0019b63:	eb e1                	jmp    c0019b46 <CPU::prohibitUsermodeDataAccess()>
c0019b65:	90                   	nop

c0019b66 <CPU::setupFeatures()>:
c0019b66:	83 ec 0c             	sub    esp,0xc
c0019b69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b6d:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b74:	74 07                	je     c0019b7d <CPU::setupFeatures()+0x17>
c0019b76:	52                   	push   edx
c0019b77:	e8 46 ff ff ff       	call   c0019ac2 <CPU::setupSMEP()>
c0019b7c:	58                   	pop    eax
c0019b7d:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b84:	74 07                	je     c0019b8d <CPU::setupFeatures()+0x27>
c0019b86:	52                   	push   edx
c0019b87:	e8 cc ff ff ff       	call   c0019b58 <CPU::setupSMAP()>
c0019b8c:	58                   	pop    eax
c0019b8d:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b94:	74 07                	je     c0019b9d <CPU::setupFeatures()+0x37>
c0019b96:	52                   	push   edx
c0019b97:	e8 32 ff ff ff       	call   c0019ace <CPU::setupUMIP()>
c0019b9c:	58                   	pop    eax
c0019b9d:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019ba4:	74 07                	je     c0019bad <CPU::setupFeatures()+0x47>
c0019ba6:	52                   	push   edx
c0019ba7:	e8 2c ff ff ff       	call   c0019ad8 <CPU::setupTSC()>
c0019bac:	58                   	pop    eax
c0019bad:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019bb4:	74 07                	je     c0019bbd <CPU::setupFeatures()+0x57>
c0019bb6:	52                   	push   edx
c0019bb7:	e8 26 ff ff ff       	call   c0019ae2 <CPU::setupLargePages()>
c0019bbc:	59                   	pop    ecx
c0019bbd:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bc4:	74 07                	je     c0019bcd <CPU::setupFeatures()+0x67>
c0019bc6:	52                   	push   edx
c0019bc7:	e8 5e ff ff ff       	call   c0019b2a <CPU::setupGlobalPages()>
c0019bcc:	58                   	pop    eax
c0019bcd:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bd4:	74 0c                	je     c0019be2 <CPU::setupFeatures()+0x7c>
c0019bd6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019bda:	83 c4 0c             	add    esp,0xc
c0019bdd:	e9 0a ff ff ff       	jmp    c0019aec <CPU::setupPAT()>
c0019be2:	83 c4 0c             	add    esp,0xc
c0019be5:	c3                   	ret    

c0019be6 <CPU::open(int, int, void*)>:
c0019be6:	57                   	push   edi
c0019be7:	56                   	push   esi
c0019be8:	53                   	push   ebx
c0019be9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bf1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019bf7:	83 ec 0c             	sub    esp,0xc
c0019bfa:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c00:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c06:	50                   	push   eax
c0019c07:	e8 c8 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c0c:	83 c4 0c             	add    esp,0xc
c0019c0f:	6a 00                	push   0x0
c0019c11:	68 ef be ad de       	push   0xdeadbeef
c0019c16:	57                   	push   edi
c0019c17:	e8 f6 78 ff ff       	call   c0011512 <TSS::setup(unsigned long, unsigned long)>
c0019c1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c1f:	e8 ce 78 ff ff       	call   c00114f2 <TSS::flush()>
c0019c24:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c2d:	e8 fe 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c32:	b8 00 04 00 00       	mov    eax,0x400
c0019c37:	0f 23 f8             	mov    db7,eax
c0019c3a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c44:	e8 99 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c49:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c4f:	89 30                	mov    DWORD PTR [eax],esi
c0019c51:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c57:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c5a:	58                   	pop    eax
c0019c5b:	5a                   	pop    edx
c0019c5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c66:	e8 e5 89 ff ff       	call   c0012650 <VAS::setCPUSpecific(unsigned long)>
c0019c6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c6e:	e8 5f f4 ff ff       	call   c00190d2 <CPU::detectFeatures()>
c0019c73:	e8 ce bc ff ff       	call   c0015946 <setupInterruptController()>
c0019c78:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c7e:	a1 c0 e3 02 c0       	mov    eax,ds:0xc002e3c0
c0019c83:	83 e0 10             	and    eax,0x10
c0019c86:	83 f8 01             	cmp    eax,0x1
c0019c89:	19 c0                	sbb    eax,eax
c0019c8b:	83 e0 46             	and    eax,0x46
c0019c8e:	83 c0 1e             	add    eax,0x1e
c0019c91:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c94:	e8 bb d1 ff ff       	call   c0016e54 <setupTimer(int)>
c0019c99:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ca2:	e8 bf fe ff ff       	call   c0019b66 <CPU::setupFeatures()>
c0019ca7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019caa:	e8 a7 f1 ff ff       	call   c0018e56 <CPU::displayFeatures()>
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	31 c0                	xor    eax,eax
c0019cb4:	5b                   	pop    ebx
c0019cb5:	5e                   	pop    esi
c0019cb6:	5f                   	pop    edi
c0019cb7:	c3                   	ret    

c0019cb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cb8:	57                   	push   edi
c0019cb9:	56                   	push   esi
c0019cba:	53                   	push   ebx
c0019cbb:	51                   	push   ecx
c0019cbc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cc0:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019cc3:	0f 02 c0             	lar    eax,ax
c0019cc6:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cc9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ccd:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cd0:	88 ca                	mov    dl,cl
c0019cd2:	c0 ea 06             	shr    dl,0x6
c0019cd5:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019cd9:	89 ca                	mov    edx,ecx
c0019cdb:	66 c1 ea 03          	shr    dx,0x3
c0019cdf:	83 e2 07             	and    edx,0x7
c0019ce2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ce7:	88 17                	mov    BYTE PTR [edi],dl
c0019ce9:	0f 84 a6 01 00 00    	je     c0019e95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019cef:	83 e1 07             	and    ecx,0x7
c0019cf2:	80 f9 04             	cmp    cl,0x4
c0019cf5:	0f 84 98 00 00 00    	je     c0019d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019cfb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d00:	0f 95 c0             	setne  al
c0019d03:	80 f9 05             	cmp    cl,0x5
c0019d06:	0f 95 c2             	setne  dl
c0019d09:	08 c2                	or     dl,al
c0019d0b:	74 79                	je     c0019d86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d0d:	84 c9                	test   cl,cl
c0019d0f:	75 05                	jne    c0019d16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d11:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d14:	eb 3c                	jmp    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d16:	80 f9 01             	cmp    cl,0x1
c0019d19:	75 05                	jne    c0019d20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d1b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d1e:	eb 32                	jmp    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d20:	80 f9 02             	cmp    cl,0x2
c0019d23:	75 05                	jne    c0019d2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d25:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d28:	eb 28                	jmp    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d2a:	31 c0                	xor    eax,eax
c0019d2c:	80 f9 03             	cmp    cl,0x3
c0019d2f:	75 05                	jne    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d31:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d34:	eb 1c                	jmp    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d36:	80 f9 05             	cmp    cl,0x5
c0019d39:	75 05                	jne    c0019d40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d3b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d3e:	eb 12                	jmp    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d40:	80 f9 06             	cmp    cl,0x6
c0019d43:	75 05                	jne    c0019d4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d48:	eb 08                	jmp    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d4a:	80 f9 07             	cmp    cl,0x7
c0019d4d:	75 03                	jne    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d4f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d52:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d57:	75 10                	jne    c0019d69 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d59:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d5d:	b9 03 00 00 00       	mov    ecx,0x3
c0019d62:	01 d0                	add    eax,edx
c0019d64:	e9 37 01 00 00       	jmp    c0019ea0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d69:	b9 02 00 00 00       	mov    ecx,0x2
c0019d6e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d73:	0f 85 27 01 00 00    	jne    c0019ea0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d79:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d7c:	b9 06 00 00 00       	mov    ecx,0x6
c0019d81:	e9 1a 01 00 00       	jmp    c0019ea0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d86:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d89:	b9 06 00 00 00       	mov    ecx,0x6
c0019d8e:	e9 0f 01 00 00       	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d93:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d96:	88 ca                	mov    dl,cl
c0019d98:	c0 ea 06             	shr    dl,0x6
c0019d9b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d9f:	89 ca                	mov    edx,ecx
c0019da1:	66 c1 ea 03          	shr    dx,0x3
c0019da5:	83 e2 07             	and    edx,0x7
c0019da8:	80 e1 07             	and    cl,0x7
c0019dab:	75 05                	jne    c0019db2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019dad:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019db0:	eb 4c                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019db2:	80 f9 01             	cmp    cl,0x1
c0019db5:	75 05                	jne    c0019dbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019db7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dba:	eb 42                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dbc:	80 f9 02             	cmp    cl,0x2
c0019dbf:	75 05                	jne    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019dc1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019dc4:	eb 38                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc6:	80 f9 03             	cmp    cl,0x3
c0019dc9:	75 05                	jne    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019dcb:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019dce:	eb 2e                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd0:	80 f9 04             	cmp    cl,0x4
c0019dd3:	75 12                	jne    c0019de7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019dd5:	f6 c4 60             	test   ah,0x60
c0019dd8:	75 08                	jne    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019dda:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ddd:	8d 78 14             	lea    edi,[eax+0x14]
c0019de0:	eb 1c                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019de5:	eb 17                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de7:	80 f9 05             	cmp    cl,0x5
c0019dea:	75 05                	jne    c0019df1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019dec:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019def:	eb 0d                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df1:	80 f9 06             	cmp    cl,0x6
c0019df4:	75 05                	jne    c0019dfb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019df6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019df9:	eb 03                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dfb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019dfe:	84 d2                	test   dl,dl
c0019e00:	75 05                	jne    c0019e07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e02:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e05:	eb 3c                	jmp    c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e07:	80 fa 01             	cmp    dl,0x1
c0019e0a:	75 05                	jne    c0019e11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e0c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e0f:	eb 32                	jmp    c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e11:	80 fa 02             	cmp    dl,0x2
c0019e14:	75 05                	jne    c0019e1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e16:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e19:	eb 28                	jmp    c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1b:	80 fa 03             	cmp    dl,0x3
c0019e1e:	75 05                	jne    c0019e25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e20:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e23:	eb 1e                	jmp    c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e25:	31 c0                	xor    eax,eax
c0019e27:	80 fa 04             	cmp    dl,0x4
c0019e2a:	74 17                	je     c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e2c:	80 fa 05             	cmp    dl,0x5
c0019e2f:	75 05                	jne    c0019e36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e31:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e34:	eb 0d                	jmp    c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e36:	80 fa 06             	cmp    dl,0x6
c0019e39:	75 05                	jne    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e3b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e3e:	eb 03                	jmp    c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e40:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e43:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e48:	0f 94 c2             	sete   dl
c0019e4b:	80 f9 05             	cmp    cl,0x5
c0019e4e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e52:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e57:	d3 e0                	shl    eax,cl
c0019e59:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e5d:	74 0a                	je     c0019e69 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e5f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e62:	b9 07 00 00 00       	mov    ecx,0x7
c0019e67:	eb 37                	jmp    c0019ea0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e69:	01 f8                	add    eax,edi
c0019e6b:	b9 03 00 00 00       	mov    ecx,0x3
c0019e70:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e75:	74 2b                	je     c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e77:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e7c:	75 0d                	jne    c0019e8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e7e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e82:	01 c8                	add    eax,ecx
c0019e84:	b9 04 00 00 00       	mov    ecx,0x4
c0019e89:	eb 17                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e8b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e8e:	b9 07 00 00 00       	mov    ecx,0x7
c0019e93:	eb 0d                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e95:	b9 02 00 00 00       	mov    ecx,0x2
c0019e9a:	b2 01                	mov    dl,0x1
c0019e9c:	31 c0                	xor    eax,eax
c0019e9e:	eb 02                	jmp    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ea0:	31 d2                	xor    edx,edx
c0019ea2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ea6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ea8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019eac:	88 11                	mov    BYTE PTR [ecx],dl
c0019eae:	5a                   	pop    edx
c0019eaf:	5b                   	pop    ebx
c0019eb0:	5e                   	pop    esi
c0019eb1:	5f                   	pop    edi
c0019eb2:	c3                   	ret    

c0019eb3 <Krnl::smpEntry()>:
c0019eb3:	eb fe                	jmp    c0019eb3 <Krnl::smpEntry()>

c0019eb5 <Krnl::startCPU(int)>:
c0019eb5:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0019eba:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ec1:	0f 84 36 01 00 00    	je     c0019ffd <Krnl::startCPU(int)+0x148>
c0019ec7:	53                   	push   ebx
c0019ec8:	83 ec 08             	sub    esp,0x8
c0019ecb:	e8 fc 3e 00 00       	call   c001ddcc <lockScheduler()>
c0019ed0:	52                   	push   edx
c0019ed1:	52                   	push   edx
c0019ed2:	6a 1b                	push   0x1b
c0019ed4:	ff 35 a8 e3 02 c0    	push   DWORD PTR ds:0xc002e3a8
c0019eda:	e8 09 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019edf:	59                   	pop    ecx
c0019ee0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ee5:	89 c3                	mov    ebx,eax
c0019ee7:	58                   	pop    eax
c0019ee8:	53                   	push   ebx
c0019ee9:	68 a0 b9 02 c0       	push   0xc002b9a0
c0019eee:	e8 5d 90 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0019ef3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f01:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f0b:	c1 e0 18             	shl    eax,0x18
c0019f0e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f14:	83 c4 10             	add    esp,0x10
c0019f17:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f1d:	09 c2                	or     edx,eax
c0019f1f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f25:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f2b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f31:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f37:	80 cd c5             	or     ch,0xc5
c0019f3a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f40:	f3 90                	pause  
c0019f42:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f44:	0f ba e1 0c          	bt     ecx,0xc
c0019f48:	72 f6                	jb     c0019f40 <Krnl::startCPU(int)+0x8b>
c0019f4a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f50:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f56:	09 c1                	or     ecx,eax
c0019f58:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f5e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f64:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f6a:	80 cd 85             	or     ch,0x85
c0019f6d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f73:	f3 90                	pause  
c0019f75:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f77:	0f ba e1 0c          	bt     ecx,0xc
c0019f7b:	72 f6                	jb     c0019f73 <Krnl::startCPU(int)+0xbe>
c0019f7d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f87:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f8d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f93:	09 c1                	or     ecx,eax
c0019f95:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f9b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fa1:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fa7:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fad:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fb3:	f3 90                	pause  
c0019fb5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fb7:	0f ba e1 0c          	bt     ecx,0xc
c0019fbb:	72 f6                	jb     c0019fb3 <Krnl::startCPU(int)+0xfe>
c0019fbd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fc7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fcd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fd3:	09 c8                	or     eax,ecx
c0019fd5:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fdb:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fe1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019fe6:	0d 02 06 00 00       	or     eax,0x602
c0019feb:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019ff1:	f3 90                	pause  
c0019ff3:	8b 02                	mov    eax,DWORD PTR [edx]
c0019ff5:	0f ba e0 0c          	bt     eax,0xc
c0019ff9:	72 f6                	jb     c0019ff1 <Krnl::startCPU(int)+0x13c>
c0019ffb:	eb fe                	jmp    c0019ffb <Krnl::startCPU(int)+0x146>
c0019ffd:	c3                   	ret    

c0019ffe <Krnl::startCPUs()>:
c0019ffe:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001a003:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a009:	88 c2                	mov    dl,al
c001a00b:	83 e2 0a             	and    edx,0xa
c001a00e:	80 fa 0a             	cmp    dl,0xa
c001a011:	75 09                	jne    c001a01c <Krnl::startCPUs()+0x1e>
c001a013:	a8 01                	test   al,0x1
c001a015:	74 05                	je     c001a01c <Krnl::startCPUs()+0x1e>
c001a017:	e9 7f 61 fe ff       	jmp    c000019b <prepareTramp>
c001a01c:	c3                   	ret    
c001a01d:	90                   	nop

c001a01e <EnvVarContainer::getEnv(char const*)>:
c001a01e:	57                   	push   edi
c001a01f:	56                   	push   esi
c001a020:	53                   	push   ebx
c001a021:	31 db                	xor    ebx,ebx
c001a023:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a027:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a029:	7e 2b                	jle    c001a056 <EnvVarContainer::getEnv(char const*)+0x38>
c001a02b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a032:	50                   	push   eax
c001a033:	50                   	push   eax
c001a034:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a037:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a03a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a03e:	e8 7d 68 fe ff       	call   c00008c0 <strcmp>
c001a043:	83 c4 10             	add    esp,0x10
c001a046:	85 c0                	test   eax,eax
c001a048:	75 09                	jne    c001a053 <EnvVarContainer::getEnv(char const*)+0x35>
c001a04a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a04d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a051:	eb 05                	jmp    c001a058 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a053:	43                   	inc    ebx
c001a054:	eb d1                	jmp    c001a027 <EnvVarContainer::getEnv(char const*)+0x9>
c001a056:	31 c0                	xor    eax,eax
c001a058:	5b                   	pop    ebx
c001a059:	5e                   	pop    esi
c001a05a:	5f                   	pop    edi
c001a05b:	c3                   	ret    

c001a05c <EnvVarContainer::setEnv(char const*, char const*)>:
c001a05c:	57                   	push   edi
c001a05d:	56                   	push   esi
c001a05e:	53                   	push   ebx
c001a05f:	83 ec 1c             	sub    esp,0x1c
c001a062:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a066:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a06a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a06e:	57                   	push   edi
c001a06f:	e8 20 67 fe ff       	call   c0000794 <strlen>
c001a074:	40                   	inc    eax
c001a075:	89 04 24             	mov    DWORD PTR [esp],eax
c001a078:	e8 c3 57 ff ff       	call   c000f840 <malloc>
c001a07d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a080:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a084:	e8 0b 67 fe ff       	call   c0000794 <strlen>
c001a089:	40                   	inc    eax
c001a08a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a08d:	e8 ae 57 ff ff       	call   c000f840 <malloc>
c001a092:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a095:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a099:	e8 f6 66 fe ff       	call   c0000794 <strlen>
c001a09e:	83 c4 0c             	add    esp,0xc
c001a0a1:	40                   	inc    eax
c001a0a2:	50                   	push   eax
c001a0a3:	6a 00                	push   0x0
c001a0a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0a9:	e8 ca 66 fe ff       	call   c0000778 <memset>
c001a0ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0b1:	e8 de 66 fe ff       	call   c0000794 <strlen>
c001a0b6:	83 c4 0c             	add    esp,0xc
c001a0b9:	40                   	inc    eax
c001a0ba:	50                   	push   eax
c001a0bb:	57                   	push   edi
c001a0bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0c0:	e8 7f 66 fe ff       	call   c0000744 <memcpy>
c001a0c5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0c8:	e8 c7 66 fe ff       	call   c0000794 <strlen>
c001a0cd:	83 c4 0c             	add    esp,0xc
c001a0d0:	40                   	inc    eax
c001a0d1:	50                   	push   eax
c001a0d2:	6a 00                	push   0x0
c001a0d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0d8:	e8 9b 66 fe ff       	call   c0000778 <memset>
c001a0dd:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0e0:	e8 af 66 fe ff       	call   c0000794 <strlen>
c001a0e5:	83 c4 0c             	add    esp,0xc
c001a0e8:	40                   	inc    eax
c001a0e9:	50                   	push   eax
c001a0ea:	56                   	push   esi
c001a0eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0ef:	e8 50 66 fe ff       	call   c0000744 <memcpy>
c001a0f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0f6:	40                   	inc    eax
c001a0f7:	89 03                	mov    DWORD PTR [ebx],eax
c001a0f9:	c1 e0 03             	shl    eax,0x3
c001a0fc:	5a                   	pop    edx
c001a0fd:	59                   	pop    ecx
c001a0fe:	50                   	push   eax
c001a0ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a102:	e8 25 57 ff ff       	call   c000f82c <realloc>
c001a107:	83 c4 0c             	add    esp,0xc
c001a10a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a10d:	6a 08                	push   0x8
c001a10f:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a113:	52                   	push   edx
c001a114:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a116:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a11a:	50                   	push   eax
c001a11b:	e8 24 66 fe ff       	call   c0000744 <memcpy>
c001a120:	83 c4 20             	add    esp,0x20
c001a123:	5b                   	pop    ebx
c001a124:	5e                   	pop    esi
c001a125:	5f                   	pop    edi
c001a126:	c3                   	ret    
c001a127:	90                   	nop

c001a128 <EnvVarContainer::deleteEnv(char const*)>:
c001a128:	c3                   	ret    
c001a129:	90                   	nop

c001a12a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a12a:	55                   	push   ebp
c001a12b:	57                   	push   edi
c001a12c:	56                   	push   esi
c001a12d:	53                   	push   ebx
c001a12e:	81 ec 38 01 00 00    	sub    esp,0x138
c001a134:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a13b:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a142:	68 14 01 00 00       	push   0x114
c001a147:	e8 f4 56 ff ff       	call   c000f840 <malloc>
c001a14c:	83 c4 0c             	add    esp,0xc
c001a14f:	89 c7                	mov    edi,eax
c001a151:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a154:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a15b:	50                   	push   eax
c001a15c:	e8 47 93 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001a161:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a164:	e8 11 96 ff ff       	call   c001377a <File::exists()>
c001a169:	83 c4 10             	add    esp,0x10
c001a16c:	84 c0                	test   al,al
c001a16e:	75 31                	jne    c001a1a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a170:	51                   	push   ecx
c001a171:	51                   	push   ecx
c001a172:	6a 12                	push   0x12
c001a174:	57                   	push   edi
c001a175:	e8 92 93 ff ff       	call   c001350c <File::open(FileOpenMode)>
c001a17a:	8b 07                	mov    eax,DWORD PTR [edi]
c001a17c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a17f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a182:	e8 0d 66 fe ff       	call   c0000794 <strlen>
c001a187:	5a                   	pop    edx
c001a188:	31 d2                	xor    edx,edx
c001a18a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a18e:	51                   	push   ecx
c001a18f:	55                   	push   ebp
c001a190:	52                   	push   edx
c001a191:	50                   	push   eax
c001a192:	57                   	push   edi
c001a193:	ff d3                	call   ebx
c001a195:	83 c4 14             	add    esp,0x14
c001a198:	57                   	push   edi
c001a199:	e8 cc 93 ff ff       	call   c001356a <File::close()>
c001a19e:	83 c4 10             	add    esp,0x10
c001a1a1:	31 db                	xor    ebx,ebx
c001a1a3:	50                   	push   eax
c001a1a4:	31 ed                	xor    ebp,ebp
c001a1a6:	68 00 01 00 00       	push   0x100
c001a1ab:	6a 00                	push   0x0
c001a1ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1b1:	50                   	push   eax
c001a1b2:	e8 c1 65 fe ff       	call   c0000778 <memset>
c001a1b7:	58                   	pop    eax
c001a1b8:	5a                   	pop    edx
c001a1b9:	6a 01                	push   0x1
c001a1bb:	57                   	push   edi
c001a1bc:	e8 4b 93 ff ff       	call   c001350c <File::open(FileOpenMode)>
c001a1c1:	83 c4 10             	add    esp,0x10
c001a1c4:	83 ec 0c             	sub    esp,0xc
c001a1c7:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1c9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1cd:	51                   	push   ecx
c001a1ce:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1d2:	52                   	push   edx
c001a1d3:	6a 00                	push   0x0
c001a1d5:	6a 01                	push   0x1
c001a1d7:	57                   	push   edi
c001a1d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1db:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1df:	83 c4 20             	add    esp,0x20
c001a1e2:	3c 0d                	cmp    al,0xd
c001a1e4:	0f 84 12 01 00 00    	je     c001a2fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1ea:	85 db                	test   ebx,ebx
c001a1ec:	0f 84 fd 00 00 00    	je     c001a2ef <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1f2:	3c 0a                	cmp    al,0xa
c001a1f4:	74 13                	je     c001a209 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1f6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1fb:	74 0c                	je     c001a209 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1fd:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a203:	0f 8e e6 00 00 00    	jle    c001a2ef <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a209:	83 ec 0c             	sub    esp,0xc
c001a20c:	8d 53 01             	lea    edx,[ebx+0x1]
c001a20f:	29 dd                	sub    ebp,ebx
c001a211:	52                   	push   edx
c001a212:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a216:	e8 25 56 ff ff       	call   c000f840 <malloc>
c001a21b:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a21e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a222:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a225:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a229:	e8 12 56 ff ff       	call   c000f840 <malloc>
c001a22e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a232:	83 c4 0c             	add    esp,0xc
c001a235:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a239:	52                   	push   edx
c001a23a:	6a 00                	push   0x0
c001a23c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a240:	e8 33 65 fe ff       	call   c0000778 <memset>
c001a245:	83 c4 0c             	add    esp,0xc
c001a248:	53                   	push   ebx
c001a249:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a24d:	55                   	push   ebp
c001a24e:	01 eb                	add    ebx,ebp
c001a250:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a254:	e8 eb 64 fe ff       	call   c0000744 <memcpy>
c001a259:	83 c4 0c             	add    esp,0xc
c001a25c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a260:	51                   	push   ecx
c001a261:	6a 00                	push   0x0
c001a263:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a267:	e8 0c 65 fe ff       	call   c0000778 <memset>
c001a26c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a26f:	e8 20 65 fe ff       	call   c0000794 <strlen>
c001a274:	83 c4 0c             	add    esp,0xc
c001a277:	50                   	push   eax
c001a278:	53                   	push   ebx
c001a279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a27d:	e8 c2 64 fe ff       	call   c0000744 <memcpy>
c001a282:	5b                   	pop    ebx
c001a283:	58                   	pop    eax
c001a284:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a288:	68 b1 b9 02 c0       	push   0xc002b9b1
c001a28d:	e8 be 8c ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001a292:	8b 06                	mov    eax,DWORD PTR [esi]
c001a294:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a297:	40                   	inc    eax
c001a298:	83 c4 10             	add    esp,0x10
c001a29b:	89 06                	mov    DWORD PTR [esi],eax
c001a29d:	85 d2                	test   edx,edx
c001a29f:	75 0c                	jne    c001a2ad <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2a1:	83 ec 0c             	sub    esp,0xc
c001a2a4:	6a 08                	push   0x8
c001a2a6:	e8 95 55 ff ff       	call   c000f840 <malloc>
c001a2ab:	eb 0c                	jmp    c001a2b9 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2ad:	c1 e0 03             	shl    eax,0x3
c001a2b0:	51                   	push   ecx
c001a2b1:	51                   	push   ecx
c001a2b2:	50                   	push   eax
c001a2b3:	52                   	push   edx
c001a2b4:	e8 73 55 ff ff       	call   c000f82c <realloc>
c001a2b9:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2bc:	83 c4 10             	add    esp,0x10
c001a2bf:	31 db                	xor    ebx,ebx
c001a2c1:	52                   	push   edx
c001a2c2:	6a 08                	push   0x8
c001a2c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2c8:	50                   	push   eax
c001a2c9:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2ce:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2d2:	50                   	push   eax
c001a2d3:	e8 6c 64 fe ff       	call   c0000744 <memcpy>
c001a2d8:	83 c4 0c             	add    esp,0xc
c001a2db:	68 00 01 00 00       	push   0x100
c001a2e0:	6a 00                	push   0x0
c001a2e2:	55                   	push   ebp
c001a2e3:	31 ed                	xor    ebp,ebp
c001a2e5:	e8 8e 64 fe ff       	call   c0000778 <memset>
c001a2ea:	83 c4 10             	add    esp,0x10
c001a2ed:	eb 0d                	jmp    c001a2fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2ef:	3c 3d                	cmp    al,0x3d
c001a2f1:	74 07                	je     c001a2fa <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2f3:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a2f7:	45                   	inc    ebp
c001a2f8:	eb 02                	jmp    c001a2fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2fa:	89 eb                	mov    ebx,ebp
c001a2fc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a301:	0f 85 bd fe ff ff    	jne    c001a1c4 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a307:	50                   	push   eax
c001a308:	50                   	push   eax
c001a309:	ff 36                	push   DWORD PTR [esi]
c001a30b:	68 bf b9 02 c0       	push   0xc002b9bf
c001a310:	e8 3b 8c ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001a315:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a31b:	5b                   	pop    ebx
c001a31c:	5e                   	pop    esi
c001a31d:	5f                   	pop    edi
c001a31e:	5d                   	pop    ebp
c001a31f:	c3                   	ret    

c001a320 <EnvVarContainer::__loadSystem()>:
c001a320:	83 ec 10             	sub    esp,0x10
c001a323:	68 e0 d8 02 c0       	push   0xc002d8e0
c001a328:	68 ea b9 02 c0       	push   0xc002b9ea
c001a32d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a331:	e8 f4 fd ff ff       	call   c001a12a <EnvVarContainer::loadFrom(char const*, char const*)>
c001a336:	83 c4 1c             	add    esp,0x1c
c001a339:	c3                   	ret    

c001a33a <EnvVarContainer::__loadUser()>:
c001a33a:	c3                   	ret    
c001a33b:	90                   	nop

c001a33c <EnvVarContainer::EnvVarContainer(Process*)>:
c001a33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a340:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a34e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a355:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a35c:	90                   	nop
c001a35d:	c3                   	ret    

c001a35e <EnvVarContainer::~EnvVarContainer()>:
c001a35e:	83 ec 0c             	sub    esp,0xc
c001a361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a365:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a368:	85 c0                	test   eax,eax
c001a36a:	74 1d                	je     c001a389 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a370:	8b 00                	mov    eax,DWORD PTR [eax]
c001a372:	85 c0                	test   eax,eax
c001a374:	74 13                	je     c001a389 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a37a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a37d:	83 ec 0c             	sub    esp,0xc
c001a380:	50                   	push   eax
c001a381:	e8 ca 54 ff ff       	call   c000f850 <free>
c001a386:	83 c4 10             	add    esp,0x10
c001a389:	90                   	nop
c001a38a:	83 c4 0c             	add    esp,0xc
c001a38d:	c3                   	ret    

c001a38e <Krnl::getEnv(Process*, char const*)>:
c001a38e:	53                   	push   ebx
c001a38f:	83 ec 08             	sub    esp,0x8
c001a392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a396:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a39a:	39 05 34 19 03 c0    	cmp    DWORD PTR ds:0xc0031934,eax
c001a3a0:	74 04                	je     c001a3a6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3a2:	85 c0                	test   eax,eax
c001a3a4:	75 0b                	jne    c001a3b1 <Krnl::getEnv(Process*, char const*)+0x23>
c001a3a6:	a1 14 0f 03 c0       	mov    eax,ds:0xc0030f14
c001a3ab:	85 c0                	test   eax,eax
c001a3ad:	75 19                	jne    c001a3c8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3af:	eb 27                	jmp    c001a3d8 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3b1:	52                   	push   edx
c001a3b2:	52                   	push   edx
c001a3b3:	53                   	push   ebx
c001a3b4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3ba:	e8 5f fc ff ff       	call   c001a01e <EnvVarContainer::getEnv(char const*)>
c001a3bf:	83 c4 10             	add    esp,0x10
c001a3c2:	85 c0                	test   eax,eax
c001a3c4:	75 28                	jne    c001a3ee <Krnl::getEnv(Process*, char const*)+0x60>
c001a3c6:	eb de                	jmp    c001a3a6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3c8:	52                   	push   edx
c001a3c9:	52                   	push   edx
c001a3ca:	53                   	push   ebx
c001a3cb:	50                   	push   eax
c001a3cc:	e8 4d fc ff ff       	call   c001a01e <EnvVarContainer::getEnv(char const*)>
c001a3d1:	83 c4 10             	add    esp,0x10
c001a3d4:	85 c0                	test   eax,eax
c001a3d6:	75 16                	jne    c001a3ee <Krnl::getEnv(Process*, char const*)+0x60>
c001a3d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3dc:	a1 18 0f 03 c0       	mov    eax,ds:0xc0030f18
c001a3e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3e5:	83 c4 08             	add    esp,0x8
c001a3e8:	5b                   	pop    ebx
c001a3e9:	e9 30 fc ff ff       	jmp    c001a01e <EnvVarContainer::getEnv(char const*)>
c001a3ee:	83 c4 08             	add    esp,0x8
c001a3f1:	5b                   	pop    ebx
c001a3f2:	c3                   	ret    

c001a3f3 <Krnl::setEnvSystem(char const*, char const*)>:
c001a3f3:	83 ec 10             	sub    esp,0x10
c001a3f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3fe:	ff 35 18 0f 03 c0    	push   DWORD PTR ds:0xc0030f18
c001a404:	e8 53 fc ff ff       	call   c001a05c <EnvVarContainer::setEnv(char const*, char const*)>
c001a409:	83 c4 1c             	add    esp,0x1c
c001a40c:	c3                   	ret    

c001a40d <Krnl::setEnvUser(char const*, char const*)>:
c001a40d:	a1 14 0f 03 c0       	mov    eax,ds:0xc0030f14
c001a412:	85 c0                	test   eax,eax
c001a414:	74 15                	je     c001a42b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a416:	83 ec 10             	sub    esp,0x10
c001a419:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a41d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a421:	50                   	push   eax
c001a422:	e8 35 fc ff ff       	call   c001a05c <EnvVarContainer::setEnv(char const*, char const*)>
c001a427:	83 c4 1c             	add    esp,0x1c
c001a42a:	c3                   	ret    
c001a42b:	c3                   	ret    

c001a42c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a42c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a430:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a436:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a43a:	e9 1d fc ff ff       	jmp    c001a05c <EnvVarContainer::setEnv(char const*, char const*)>

c001a43f <Krnl::deleteEnvSystem(char const*)>:
c001a43f:	c3                   	ret    

c001a440 <Krnl::deleteEnvUser(char const*)>:
c001a440:	c3                   	ret    

c001a441 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a441:	c3                   	ret    

c001a442 <Krnl::newProcessEnv(Process*)>:
c001a442:	83 ec 28             	sub    esp,0x28
c001a445:	6a 0c                	push   0xc
c001a447:	e8 f4 53 ff ff       	call   c000f840 <malloc>
c001a44c:	5a                   	pop    edx
c001a44d:	59                   	pop    ecx
c001a44e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a452:	50                   	push   eax
c001a453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a457:	e8 e0 fe ff ff       	call   c001a33c <EnvVarContainer::EnvVarContainer(Process*)>
c001a45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a460:	83 c4 2c             	add    esp,0x2c
c001a463:	c3                   	ret    

c001a464 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a464:	56                   	push   esi
c001a465:	53                   	push   ebx
c001a466:	83 ec 10             	sub    esp,0x10
c001a469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a46d:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a473:	6a 0c                	push   0xc
c001a475:	e8 c6 53 ff ff       	call   c000f840 <malloc>
c001a47a:	89 c3                	mov    ebx,eax
c001a47c:	58                   	pop    eax
c001a47d:	5a                   	pop    edx
c001a47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a482:	53                   	push   ebx
c001a483:	e8 b4 fe ff ff       	call   c001a33c <EnvVarContainer::EnvVarContainer(Process*)>
c001a488:	8b 06                	mov    eax,DWORD PTR [esi]
c001a48a:	89 03                	mov    DWORD PTR [ebx],eax
c001a48c:	c1 e0 03             	shl    eax,0x3
c001a48f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a492:	e8 a9 53 ff ff       	call   c000f840 <malloc>
c001a497:	83 c4 0c             	add    esp,0xc
c001a49a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a49d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a49f:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4a6:	52                   	push   edx
c001a4a7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4aa:	50                   	push   eax
c001a4ab:	e8 94 62 fe ff       	call   c0000744 <memcpy>
c001a4b0:	89 d8                	mov    eax,ebx
c001a4b2:	83 c4 14             	add    esp,0x14
c001a4b5:	5b                   	pop    ebx
c001a4b6:	5e                   	pop    esi
c001a4b7:	c3                   	ret    

c001a4b8 <Krnl::loadSystemEnv()>:
c001a4b8:	53                   	push   ebx
c001a4b9:	83 ec 14             	sub    esp,0x14
c001a4bc:	6a 0c                	push   0xc
c001a4be:	e8 7d 53 ff ff       	call   c000f840 <malloc>
c001a4c3:	89 c3                	mov    ebx,eax
c001a4c5:	58                   	pop    eax
c001a4c6:	5a                   	pop    edx
c001a4c7:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c001a4cd:	53                   	push   ebx
c001a4ce:	e8 69 fe ff ff       	call   c001a33c <EnvVarContainer::EnvVarContainer(Process*)>
c001a4d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4d6:	89 1d 18 0f 03 c0    	mov    DWORD PTR ds:0xc0030f18,ebx
c001a4dc:	e8 3f fe ff ff       	call   c001a320 <EnvVarContainer::__loadSystem()>
c001a4e1:	83 c4 18             	add    esp,0x18
c001a4e4:	5b                   	pop    ebx
c001a4e5:	c3                   	ret    

c001a4e6 <Krnl::loadUserEnv()>:
c001a4e6:	53                   	push   ebx
c001a4e7:	83 ec 14             	sub    esp,0x14
c001a4ea:	6a 0c                	push   0xc
c001a4ec:	e8 4f 53 ff ff       	call   c000f840 <malloc>
c001a4f1:	89 c3                	mov    ebx,eax
c001a4f3:	58                   	pop    eax
c001a4f4:	5a                   	pop    edx
c001a4f5:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c001a4fb:	53                   	push   ebx
c001a4fc:	e8 3b fe ff ff       	call   c001a33c <EnvVarContainer::EnvVarContainer(Process*)>
c001a501:	89 1d 14 0f 03 c0    	mov    DWORD PTR ds:0xc0030f14,ebx
c001a507:	83 c4 18             	add    esp,0x18
c001a50a:	5b                   	pop    ebx
c001a50b:	c3                   	ret    

c001a50c <Krnl::flushEnv()>:
c001a50c:	c3                   	ret    

c001a50d <Krnl::getProcessTotalEnvCount(Process*)>:
c001a50d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a511:	8b 15 14 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f14
c001a517:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a51d:	a1 18 0f 03 c0       	mov    eax,ds:0xc0030f18
c001a522:	8b 00                	mov    eax,DWORD PTR [eax]
c001a524:	03 01                	add    eax,DWORD PTR [ecx]
c001a526:	85 d2                	test   edx,edx
c001a528:	74 02                	je     c001a52c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a52a:	03 02                	add    eax,DWORD PTR [edx]
c001a52c:	c3                   	ret    

c001a52d <Krnl::getProcessEnvPair(Process*, int)>:
c001a52d:	57                   	push   edi
c001a52e:	8b 0d 14 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f14
c001a534:	56                   	push   esi
c001a535:	85 c9                	test   ecx,ecx
c001a537:	53                   	push   ebx
c001a538:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a53c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a540:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a546:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a54a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a54c:	75 47                	jne    c001a595 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a54e:	39 c3                	cmp    ebx,eax
c001a550:	7c 47                	jl     c001a599 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a552:	8b 15 18 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f18
c001a558:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a55a:	01 c1                	add    ecx,eax
c001a55c:	39 d9                	cmp    ecx,ebx
c001a55e:	7e 6c                	jle    c001a5cc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a560:	51                   	push   ecx
c001a561:	89 d9                	mov    ecx,ebx
c001a563:	29 c1                	sub    ecx,eax
c001a565:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a568:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a56c:	53                   	push   ebx
c001a56d:	68 0c ba 02 c0       	push   0xc002ba0c
c001a572:	e8 d9 89 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001a577:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a57d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a57f:	a1 18 0f 03 c0       	mov    eax,ds:0xc0030f18
c001a584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a587:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a58b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a58e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a591:	89 06                	mov    DWORD PTR [esi],eax
c001a593:	eb 51                	jmp    c001a5e6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a595:	39 c3                	cmp    ebx,eax
c001a597:	7d 05                	jge    c001a59e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a599:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a59c:	eb 20                	jmp    c001a5be <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a59e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5a0:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5a3:	39 da                	cmp    edx,ebx
c001a5a5:	7e 04                	jle    c001a5ab <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5a7:	29 c3                	sub    ebx,eax
c001a5a9:	eb 10                	jmp    c001a5bb <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5ab:	8b 0d 18 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f18
c001a5b1:	03 11                	add    edx,DWORD PTR [ecx]
c001a5b3:	39 da                	cmp    edx,ebx
c001a5b5:	7e 15                	jle    c001a5cc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5b7:	29 c3                	sub    ebx,eax
c001a5b9:	29 fb                	sub    ebx,edi
c001a5bb:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5be:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5c2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5c5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5c8:	89 06                	mov    DWORD PTR [esi],eax
c001a5ca:	eb 1d                	jmp    c001a5e9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5cc:	83 ec 0c             	sub    esp,0xc
c001a5cf:	68 20 ba 02 c0       	push   0xc002ba20
c001a5d4:	e8 18 00 00 00       	call   c001a5f1 <Krnl::panic(char const*)>
c001a5d9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5df:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5e6:	83 c4 10             	add    esp,0x10
c001a5e9:	89 f0                	mov    eax,esi
c001a5eb:	5b                   	pop    ebx
c001a5ec:	5e                   	pop    esi
c001a5ed:	5f                   	pop    edi
c001a5ee:	c2 04 00             	ret    0x4

c001a5f1 <Krnl::panic(char const*)>:
c001a5f1:	55                   	push   ebp
c001a5f2:	89 e5                	mov    ebp,esp
c001a5f4:	53                   	push   ebx
c001a5f5:	83 ec 0c             	sub    esp,0xc
c001a5f8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a5fb:	fa                   	cli    
c001a5fc:	c6 05 24 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f24,0x1
c001a603:	53                   	push   ebx
c001a604:	c6 05 e4 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2e4,0x0
c001a60b:	68 3a ba 02 c0       	push   0xc002ba3a
c001a610:	e8 3b 89 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001a615:	58                   	pop    eax
c001a616:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a61b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a621:	e8 2d 67 ff ff       	call   c0010d53 <setActiveTerminal(VgaText*)>
c001a626:	83 c4 0c             	add    esp,0xc
c001a629:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a62e:	6a 01                	push   0x1
c001a630:	6a 0f                	push   0xf
c001a632:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a638:	e8 47 61 ff ff       	call   c0010784 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a63d:	58                   	pop    eax
c001a63e:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a643:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a649:	e8 a6 69 ff ff       	call   c0010ff4 <VgaText::clearScreen()>
c001a64e:	58                   	pop    eax
c001a64f:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a654:	5a                   	pop    edx
c001a655:	68 53 ba 02 c0       	push   0xc002ba53
c001a65a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a660:	e8 0d 6b ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a665:	59                   	pop    ecx
c001a666:	58                   	pop    eax
c001a667:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a66c:	68 f8 ba 02 c0       	push   0xc002baf8
c001a671:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a677:	e8 f6 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a67c:	58                   	pop    eax
c001a67d:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a682:	5a                   	pop    edx
c001a683:	68 6f ba 02 c0       	push   0xc002ba6f
c001a688:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68e:	e8 df 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a693:	59                   	pop    ecx
c001a694:	58                   	pop    eax
c001a695:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a69a:	53                   	push   ebx
c001a69b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a1:	e8 cc 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a6a6:	58                   	pop    eax
c001a6a7:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a6ac:	5a                   	pop    edx
c001a6ad:	68 8f ba 02 c0       	push   0xc002ba8f
c001a6b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b8:	e8 b5 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a6bd:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	85 c0                	test   eax,eax
c001a6c7:	74 02                	je     c001a6cb <Krnl::panic(char const*)+0xda>
c001a6c9:	ff d0                	call   eax
c001a6cb:	83 ec 0c             	sub    esp,0xc
c001a6ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6d1:	e8 fd 2f 00 00       	call   c001d6d3 <Thr::getDriverNameFromAddress(unsigned long)>
c001a6d6:	83 c4 10             	add    esp,0x10
c001a6d9:	89 c3                	mov    ebx,eax
c001a6db:	85 c0                	test   eax,eax
c001a6dd:	0f 84 50 02 00 00    	je     c001a933 <Krnl::panic(char const*)+0x342>
c001a6e3:	83 ec 08             	sub    esp,0x8
c001a6e6:	8b 15 34 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031934
c001a6ec:	68 34 bb 02 c0       	push   0xc002bb34
c001a6f1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6f7:	e8 76 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a6fc:	58                   	pop    eax
c001a6fd:	5a                   	pop    edx
c001a6fe:	8b 15 34 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031934
c001a704:	68 6f ba 02 c0       	push   0xc002ba6f
c001a709:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a70f:	e8 5e 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a714:	59                   	pop    ecx
c001a715:	58                   	pop    eax
c001a716:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a71b:	53                   	push   ebx
c001a71c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a722:	e8 4b 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a727:	83 c4 10             	add    esp,0x10
c001a72a:	83 ec 08             	sub    esp,0x8
c001a72d:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a732:	68 8e ba 02 c0       	push   0xc002ba8e
c001a737:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73d:	e8 30 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a742:	58                   	pop    eax
c001a743:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a748:	5a                   	pop    edx
c001a749:	68 8c bb 02 c0       	push   0xc002bb8c
c001a74e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a754:	e8 19 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a759:	59                   	pop    ecx
c001a75a:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a75f:	5b                   	pop    ebx
c001a760:	68 cc bb 02 c0       	push   0xc002bbcc
c001a765:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76b:	e8 02 6a ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a770:	58                   	pop    eax
c001a771:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a776:	5a                   	pop    edx
c001a777:	68 7a ba 02 c0       	push   0xc002ba7a
c001a77c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a782:	e8 eb 69 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a787:	59                   	pop    ecx
c001a788:	5b                   	pop    ebx
c001a789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a78c:	68 92 ba 02 c0       	push   0xc002ba92
c001a791:	e8 ba 87 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001a796:	58                   	pop    eax
c001a797:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a79a:	5a                   	pop    edx
c001a79b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a79e:	68 9b ba 02 c0       	push   0xc002ba9b
c001a7a3:	e8 a8 87 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001a7a8:	59                   	pop    ecx
c001a7a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7ac:	5b                   	pop    ebx
c001a7ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7b2:	68 a4 ba 02 c0       	push   0xc002baa4
c001a7b7:	e8 94 87 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001a7bc:	58                   	pop    eax
c001a7bd:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a7c2:	5a                   	pop    edx
c001a7c3:	68 10 bc 02 c0       	push   0xc002bc10
c001a7c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ce:	e8 9f 69 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a7d3:	59                   	pop    ecx
c001a7d4:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a7d9:	5b                   	pop    ebx
c001a7da:	68 ad ba 02 c0       	push   0xc002baad
c001a7df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e5:	e8 88 69 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a7ea:	0f 20 c0             	mov    eax,cr0
c001a7ed:	5a                   	pop    edx
c001a7ee:	59                   	pop    ecx
c001a7ef:	50                   	push   eax
c001a7f0:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a7f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7fb:	e8 98 69 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001a800:	5b                   	pop    ebx
c001a801:	58                   	pop    eax
c001a802:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a807:	68 b7 ba 02 c0       	push   0xc002bab7
c001a80c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a812:	e8 5b 69 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a817:	0f 20 d0             	mov    eax,cr2
c001a81a:	5a                   	pop    edx
c001a81b:	59                   	pop    ecx
c001a81c:	50                   	push   eax
c001a81d:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a822:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a828:	e8 6b 69 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001a82d:	5b                   	pop    ebx
c001a82e:	58                   	pop    eax
c001a82f:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a834:	68 c1 ba 02 c0       	push   0xc002bac1
c001a839:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a83f:	e8 2e 69 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a844:	0f 20 d8             	mov    eax,cr3
c001a847:	5a                   	pop    edx
c001a848:	59                   	pop    ecx
c001a849:	50                   	push   eax
c001a84a:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a84f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a855:	e8 3e 69 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001a85a:	5b                   	pop    ebx
c001a85b:	58                   	pop    eax
c001a85c:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a861:	68 d4 ba 02 c0       	push   0xc002bad4
c001a866:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86c:	e8 01 69 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a871:	0f 20 e0             	mov    eax,cr4
c001a874:	5a                   	pop    edx
c001a875:	59                   	pop    ecx
c001a876:	50                   	push   eax
c001a877:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a87c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a882:	e8 11 69 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001a887:	5b                   	pop    ebx
c001a888:	58                   	pop    eax
c001a889:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a88e:	68 de ba 02 c0       	push   0xc002bade
c001a893:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a899:	e8 d4 68 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a89e:	5a                   	pop    edx
c001a89f:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a8a4:	59                   	pop    ecx
c001a8a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8ab:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8ae:	50                   	push   eax
c001a8af:	e8 e4 68 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001a8b4:	5b                   	pop    ebx
c001a8b5:	58                   	pop    eax
c001a8b6:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a8bb:	68 f5 ba 02 c0       	push   0xc002baf5
c001a8c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c6:	e8 a7 68 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a8cb:	5a                   	pop    edx
c001a8cc:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a8d1:	59                   	pop    ecx
c001a8d2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8d8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8db:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8de:	50                   	push   eax
c001a8df:	e8 b4 68 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001a8e4:	5b                   	pop    ebx
c001a8e5:	58                   	pop    eax
c001a8e6:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a8eb:	68 f5 ba 02 c0       	push   0xc002baf5
c001a8f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f6:	e8 77 68 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a8fb:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a900:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a903:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a909:	8b 12                	mov    edx,DWORD PTR [edx]
c001a90b:	59                   	pop    ecx
c001a90c:	5b                   	pop    ebx
c001a90d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a910:	50                   	push   eax
c001a911:	e8 82 68 ff ff       	call   c0011198 <VgaText::putx(unsigned int)>
c001a916:	83 c4 10             	add    esp,0x10
c001a919:	b2 fe                	mov    dl,0xfe
c001a91b:	e4 60                	in     al,0x60
c001a91d:	3c 1c                	cmp    al,0x1c
c001a91f:	74 04                	je     c001a925 <Krnl::panic(char const*)+0x334>
c001a921:	3c 5a                	cmp    al,0x5a
c001a923:	75 f6                	jne    c001a91b <Krnl::panic(char const*)+0x32a>
c001a925:	e4 64                	in     al,0x64
c001a927:	a8 02                	test   al,0x2
c001a929:	75 fa                	jne    c001a925 <Krnl::panic(char const*)+0x334>
c001a92b:	88 d0                	mov    al,dl
c001a92d:	e6 64                	out    0x64,al
c001a92f:	fa                   	cli    
c001a930:	f4                   	hlt    
c001a931:	eb e8                	jmp    c001a91b <Krnl::panic(char const*)+0x32a>
c001a933:	50                   	push   eax
c001a934:	50                   	push   eax
c001a935:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a93a:	68 60 bb 02 c0       	push   0xc002bb60
c001a93f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a945:	e8 28 68 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a94a:	58                   	pop    eax
c001a94b:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a950:	5a                   	pop    edx
c001a951:	68 6f ba 02 c0       	push   0xc002ba6f
c001a956:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95c:	e8 11 68 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a961:	59                   	pop    ecx
c001a962:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a967:	5b                   	pop    ebx
c001a968:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a96b:	83 c0 0c             	add    eax,0xc
c001a96e:	50                   	push   eax
c001a96f:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001a974:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a97a:	e8 f3 67 ff ff       	call   c0011172 <VgaText::puts(char const*)>
c001a97f:	83 c4 10             	add    esp,0x10
c001a982:	e9 a3 fd ff ff       	jmp    c001a72a <Krnl::panic(char const*)+0x139>

c001a987 <Net::switchEndian16(unsigned short)>:
c001a987:	83 ec 04             	sub    esp,0x4
c001a98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a98e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a992:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a996:	c1 f8 08             	sar    eax,0x8
c001a999:	89 c2                	mov    edx,eax
c001a99b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a99f:	c1 e0 08             	shl    eax,0x8
c001a9a2:	09 d0                	or     eax,edx
c001a9a4:	83 c4 04             	add    esp,0x4
c001a9a7:	c3                   	ret    

c001a9a8 <Net::switchEndian32(unsigned int)>:
c001a9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ac:	c1 e8 18             	shr    eax,0x18
c001a9af:	89 c2                	mov    edx,eax
c001a9b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b5:	c1 e0 08             	shl    eax,0x8
c001a9b8:	25 00 00 ff 00       	and    eax,0xff0000
c001a9bd:	09 c2                	or     edx,eax
c001a9bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c3:	c1 e8 08             	shr    eax,0x8
c001a9c6:	25 00 ff 00 00       	and    eax,0xff00
c001a9cb:	09 c2                	or     edx,eax
c001a9cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d1:	c1 e0 18             	shl    eax,0x18
c001a9d4:	09 d0                	or     eax,edx
c001a9d6:	c3                   	ret    

c001a9d7 <Net::crc32Calc(unsigned char*, int)>:
c001a9d7:	83 ec 10             	sub    esp,0x10
c001a9da:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9df:	75 07                	jne    c001a9e8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9e1:	b8 00 00 00 00       	mov    eax,0x0
c001a9e6:	eb 7c                	jmp    c001aa64 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9e8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9ed:	7f 07                	jg     c001a9f6 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9ef:	b8 00 00 00 00       	mov    eax,0x0
c001a9f4:	eb 6e                	jmp    c001aa64 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9f6:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a9fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa0a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa0e:	7d 4e                	jge    c001aa5e <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa18:	01 d0                	add    eax,edx
c001aa1a:	8a 00                	mov    al,BYTE PTR [eax]
c001aa1c:	0f b6 c0             	movzx  eax,al
c001aa1f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa23:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa2b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa30:	7f 26                	jg     c001aa58 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa36:	83 e0 01             	and    eax,0x1
c001aa39:	74 0d                	je     c001aa48 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa3f:	d1 e8                	shr    eax,1
c001aa41:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa46:	eb 06                	jmp    c001aa4e <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa4c:	d1 e8                	shr    eax,1
c001aa4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa56:	eb d3                	jmp    c001aa2b <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa58:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa5c:	eb a8                	jmp    c001aa06 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa62:	f7 d0                	not    eax
c001aa64:	83 c4 10             	add    esp,0x10
c001aa67:	c3                   	ret    

c001aa68 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa68:	83 ec 1c             	sub    esp,0x1c
c001aa6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa7b:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa80:	7f 14                	jg     c001aa96 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa86:	8d 50 01             	lea    edx,[eax+0x1]
c001aa89:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa8d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa94:	eb e5                	jmp    c001aa7b <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa9a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa9d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaa1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aaa4:	83 ec 04             	sub    esp,0x4
c001aaa7:	6a 06                	push   0x6
c001aaa9:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aaad:	50                   	push   eax
c001aaae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aab2:	e8 8d 5c fe ff       	call   c0000744 <memcpy>
c001aab7:	83 c4 10             	add    esp,0x10
c001aaba:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aabf:	83 ec 04             	sub    esp,0x4
c001aac2:	6a 06                	push   0x6
c001aac4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aac8:	50                   	push   eax
c001aac9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aacd:	e8 72 5c fe ff       	call   c0000744 <memcpy>
c001aad2:	83 c4 10             	add    esp,0x10
c001aad5:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aada:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aade:	0f b7 c0             	movzx  eax,ax
c001aae1:	c1 f8 08             	sar    eax,0x8
c001aae4:	89 c1                	mov    ecx,eax
c001aae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaea:	8d 50 01             	lea    edx,[eax+0x1]
c001aaed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaf1:	88 ca                	mov    dl,cl
c001aaf3:	88 10                	mov    BYTE PTR [eax],dl
c001aaf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aaf9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aafd:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab00:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab04:	88 10                	mov    BYTE PTR [eax],dl
c001ab06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0e:	83 ec 04             	sub    esp,0x4
c001ab11:	52                   	push   edx
c001ab12:	50                   	push   eax
c001ab13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab17:	e8 28 5c fe ff       	call   c0000744 <memcpy>
c001ab1c:	83 c4 10             	add    esp,0x10
c001ab1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab23:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab2b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab2f:	83 ec 08             	sub    esp,0x8
c001ab32:	50                   	push   eax
c001ab33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab37:	e8 9b fe ff ff       	call   c001a9d7 <Net::crc32Calc(unsigned char*, int)>
c001ab3c:	83 c4 10             	add    esp,0x10
c001ab3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab47:	c1 e8 18             	shr    eax,0x18
c001ab4a:	89 c1                	mov    ecx,eax
c001ab4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab50:	8d 50 01             	lea    edx,[eax+0x1]
c001ab53:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab57:	88 ca                	mov    dl,cl
c001ab59:	88 10                	mov    BYTE PTR [eax],dl
c001ab5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab5f:	c1 e8 10             	shr    eax,0x10
c001ab62:	89 c1                	mov    ecx,eax
c001ab64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab68:	8d 50 01             	lea    edx,[eax+0x1]
c001ab6b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab6f:	88 ca                	mov    dl,cl
c001ab71:	88 10                	mov    BYTE PTR [eax],dl
c001ab73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab77:	c1 e8 08             	shr    eax,0x8
c001ab7a:	89 c1                	mov    ecx,eax
c001ab7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab80:	8d 50 01             	lea    edx,[eax+0x1]
c001ab83:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab87:	88 ca                	mov    dl,cl
c001ab89:	88 10                	mov    BYTE PTR [eax],dl
c001ab8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8f:	8d 50 01             	lea    edx,[eax+0x1]
c001ab92:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab9a:	88 10                	mov    BYTE PTR [eax],dl
c001ab9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aba0:	83 c4 1c             	add    esp,0x1c
c001aba3:	c3                   	ret    

c001aba4 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aba4:	83 ec 2c             	sub    esp,0x2c
c001aba7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abaf:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abb4:	83 ec 04             	sub    esp,0x4
c001abb7:	6a 06                	push   0x6
c001abb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abbd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abc1:	83 c0 0e             	add    eax,0xe
c001abc4:	50                   	push   eax
c001abc5:	e8 7a 5b fe ff       	call   c0000744 <memcpy>
c001abca:	83 c4 10             	add    esp,0x10
c001abcd:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abd2:	83 ec 04             	sub    esp,0x4
c001abd5:	6a 06                	push   0x6
c001abd7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abdb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abdf:	83 c0 08             	add    eax,0x8
c001abe2:	50                   	push   eax
c001abe3:	e8 5c 5b fe ff       	call   c0000744 <memcpy>
c001abe8:	83 c4 10             	add    esp,0x10
c001abeb:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abf0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abf4:	8d 50 01             	lea    edx,[eax+0x1]
c001abf7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abfb:	8a 00                	mov    al,BYTE PTR [eax]
c001abfd:	0f b6 c0             	movzx  eax,al
c001ac00:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac09:	8d 50 01             	lea    edx,[eax+0x1]
c001ac0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac10:	8a 00                	mov    al,BYTE PTR [eax]
c001ac12:	0f b6 c0             	movzx  eax,al
c001ac15:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac1a:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac1f:	c1 e0 08             	shl    eax,0x8
c001ac22:	89 c2                	mov    edx,eax
c001ac24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac28:	09 d0                	or     eax,edx
c001ac2a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac2e:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac32:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac37:	75 3a                	jne    c001ac73 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac3d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac40:	66 3d dc 05          	cmp    ax,0x5dc
c001ac44:	77 10                	ja     c001ac56 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac4a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac4d:	0f b7 c0             	movzx  eax,ax
c001ac50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac54:	eb 1d                	jmp    c001ac73 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac56:	83 ec 0c             	sub    esp,0xc
c001ac59:	68 38 bc 02 c0       	push   0xc002bc38
c001ac5e:	e8 ed 82 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac6a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac6e:	e9 c0 00 00 00       	jmp    c001ad33 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac73:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac7d:	83 ec 04             	sub    esp,0x4
c001ac80:	52                   	push   edx
c001ac81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac85:	50                   	push   eax
c001ac86:	e8 b9 5a fe ff       	call   c0000744 <memcpy>
c001ac8b:	83 c4 10             	add    esp,0x10
c001ac8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac92:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac9a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac9d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aca1:	8a 00                	mov    al,BYTE PTR [eax]
c001aca3:	0f b6 c0             	movzx  eax,al
c001aca6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acae:	8d 50 01             	lea    edx,[eax+0x1]
c001acb1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acb5:	8a 00                	mov    al,BYTE PTR [eax]
c001acb7:	0f b6 c0             	movzx  eax,al
c001acba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acbe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acc2:	8d 50 01             	lea    edx,[eax+0x1]
c001acc5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acc9:	8a 00                	mov    al,BYTE PTR [eax]
c001accb:	0f b6 c0             	movzx  eax,al
c001acce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acd6:	8d 50 01             	lea    edx,[eax+0x1]
c001acd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acdd:	8a 00                	mov    al,BYTE PTR [eax]
c001acdf:	0f b6 c0             	movzx  eax,al
c001ace2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ace6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acea:	c1 e0 18             	shl    eax,0x18
c001aced:	89 c2                	mov    edx,eax
c001acef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf3:	c1 e0 10             	shl    eax,0x10
c001acf6:	09 c2                	or     edx,eax
c001acf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acfc:	c1 e0 08             	shl    eax,0x8
c001acff:	09 d0                	or     eax,edx
c001ad01:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad0d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad11:	83 e8 04             	sub    eax,0x4
c001ad14:	83 ec 08             	sub    esp,0x8
c001ad17:	50                   	push   eax
c001ad18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad1c:	e8 b6 fc ff ff       	call   c001a9d7 <Net::crc32Calc(unsigned char*, int)>
c001ad21:	83 c4 10             	add    esp,0x10
c001ad24:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad28:	0f 94 c2             	sete   dl
c001ad2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad2f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad32:	90                   	nop
c001ad33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad37:	83 c4 2c             	add    esp,0x2c
c001ad3a:	c2 04 00             	ret    0x4

c001ad3d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad3d:	55                   	push   ebp
c001ad3e:	57                   	push   edi
c001ad3f:	56                   	push   esi
c001ad40:	53                   	push   ebx
c001ad41:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad47:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad4e:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad50:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad53:	80 fb 40             	cmp    bl,0x40
c001ad56:	75 1b                	jne    c001ad73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad58:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad5a:	84 d2                	test   dl,dl
c001ad5c:	0f 84 f1 00 00 00    	je     c001ae53 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad62:	8d 46 01             	lea    eax,[esi+0x1]
c001ad65:	80 fa 3a             	cmp    dl,0x3a
c001ad68:	74 04                	je     c001ad6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad6a:	89 c6                	mov    esi,eax
c001ad6c:	eb ea                	jmp    c001ad58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad6e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad71:	89 c6                	mov    esi,eax
c001ad73:	50                   	push   eax
c001ad74:	6a 40                	push   0x40
c001ad76:	6a 00                	push   0x0
c001ad78:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad7c:	50                   	push   eax
c001ad7d:	e8 f6 59 fe ff       	call   c0000778 <memset>
c001ad82:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad89:	31 c0                	xor    eax,eax
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad90:	84 c9                	test   cl,cl
c001ad92:	0f 84 bb 00 00 00    	je     c001ae53 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad98:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad9d:	0f 8f b0 00 00 00    	jg     c001ae53 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ada3:	80 f9 0a             	cmp    cl,0xa
c001ada6:	0f 85 98 00 00 00    	jne    c001ae44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adac:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001adb1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001adb5:	a8 df                	test   al,0xdf
c001adb7:	0f 94 c1             	sete   cl
c001adba:	3c 23                	cmp    al,0x23
c001adbc:	0f 94 c2             	sete   dl
c001adbf:	08 d1                	or     cl,dl
c001adc1:	75 4a                	jne    c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adc3:	8d 50 f7             	lea    edx,[eax-0x9]
c001adc6:	80 fa 01             	cmp    dl,0x1
c001adc9:	76 42                	jbe    c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adcb:	3c 5b                	cmp    al,0x5b
c001adcd:	75 42                	jne    c001ae11 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001adcf:	80 fb 40             	cmp    bl,0x40
c001add2:	75 39                	jne    c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001add4:	83 ec 0c             	sub    esp,0xc
c001add7:	8d 54 24 65          	lea    edx,[esp+0x65]
c001addb:	52                   	push   edx
c001addc:	e8 b3 59 fe ff       	call   c0000794 <strlen>
c001ade1:	83 c4 10             	add    esp,0x10
c001ade4:	83 f8 3f             	cmp    eax,0x3f
c001ade7:	77 6a                	ja     c001ae53 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ade9:	50                   	push   eax
c001adea:	50                   	push   eax
c001adeb:	8d 54 24 61          	lea    edx,[esp+0x61]
c001adef:	52                   	push   edx
c001adf0:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adf4:	52                   	push   edx
c001adf5:	e8 3a 5a fe ff       	call   c0000834 <strcpy>
c001adfa:	58                   	pop    eax
c001adfb:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adff:	52                   	push   edx
c001ae00:	e8 8f 59 fe ff       	call   c0000794 <strlen>
c001ae05:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae0a:	83 c4 10             	add    esp,0x10
c001ae0d:	31 d2                	xor    edx,edx
c001ae0f:	eb 3a                	jmp    c001ae4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae11:	80 fb 40             	cmp    bl,0x40
c001ae14:	74 06                	je     c001ae1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae16:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae1a:	eb 20                	jmp    c001ae3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae1c:	50                   	push   eax
c001ae1d:	50                   	push   eax
c001ae1e:	55                   	push   ebp
c001ae1f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae23:	50                   	push   eax
c001ae24:	e8 97 5a fe ff       	call   c00008c0 <strcmp>
c001ae29:	83 c4 10             	add    esp,0x10
c001ae2c:	85 c0                	test   eax,eax
c001ae2e:	75 dd                	jne    c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae30:	eb e4                	jmp    c001ae16 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae32:	8d 50 01             	lea    edx,[eax+0x1]
c001ae35:	80 f9 3d             	cmp    cl,0x3d
c001ae38:	74 1d                	je     c001ae57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae3a:	89 d0                	mov    eax,edx
c001ae3c:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae3e:	84 c9                	test   cl,cl
c001ae40:	75 f0                	jne    c001ae32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae42:	eb 0f                	jmp    c001ae53 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae44:	8d 50 01             	lea    edx,[eax+0x1]
c001ae47:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae4b:	47                   	inc    edi
c001ae4c:	89 d0                	mov    eax,edx
c001ae4e:	e9 3b ff ff ff       	jmp    c001ad8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae53:	31 c0                	xor    eax,eax
c001ae55:	eb 33                	jmp    c001ae8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae5e:	50                   	push   eax
c001ae5f:	50                   	push   eax
c001ae60:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae64:	50                   	push   eax
c001ae65:	56                   	push   esi
c001ae66:	e8 55 5a fe ff       	call   c00008c0 <strcmp>
c001ae6b:	83 c4 10             	add    esp,0x10
c001ae6e:	85 c0                	test   eax,eax
c001ae70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae74:	75 97                	jne    c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae76:	51                   	push   ecx
c001ae77:	51                   	push   ecx
c001ae78:	52                   	push   edx
c001ae79:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae80:	e8 af 59 fe ff       	call   c0000834 <strcpy>
c001ae85:	83 c4 10             	add    esp,0x10
c001ae88:	b0 01                	mov    al,0x1
c001ae8a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae90:	5b                   	pop    ebx
c001ae91:	5e                   	pop    esi
c001ae92:	5f                   	pop    edi
c001ae93:	5d                   	pop    ebp
c001ae94:	c3                   	ret    

c001ae95 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae95:	57                   	push   edi
c001ae96:	56                   	push   esi
c001ae97:	53                   	push   ebx
c001ae98:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae9e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aea5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aeac:	53                   	push   ebx
c001aead:	e8 e2 58 fe ff       	call   c0000794 <strlen>
c001aeb2:	89 34 24             	mov    DWORD PTR [esp],esi
c001aeb5:	89 c7                	mov    edi,eax
c001aeb7:	e8 d8 58 fe ff       	call   c0000794 <strlen>
c001aebc:	83 c4 10             	add    esp,0x10
c001aebf:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aec3:	3d ff 00 00 00       	cmp    eax,0xff
c001aec8:	0f 87 d3 00 00 00    	ja     c001afa1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aece:	57                   	push   edi
c001aecf:	57                   	push   edi
c001aed0:	56                   	push   esi
c001aed1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aed5:	56                   	push   esi
c001aed6:	e8 59 59 fe ff       	call   c0000834 <strcpy>
c001aedb:	58                   	pop    eax
c001aedc:	5a                   	pop    edx
c001aedd:	68 81 c1 02 c0       	push   0xc002c181
c001aee2:	56                   	push   esi
c001aee3:	e8 8c 5a fe ff       	call   c0000974 <strcat>
c001aee8:	59                   	pop    ecx
c001aee9:	5f                   	pop    edi
c001aeea:	53                   	push   ebx
c001aeeb:	56                   	push   esi
c001aeec:	e8 83 5a fe ff       	call   c0000974 <strcat>
c001aef1:	58                   	pop    eax
c001aef2:	5a                   	pop    edx
c001aef3:	68 84 bc 02 c0       	push   0xc002bc84
c001aef8:	56                   	push   esi
c001aef9:	e8 76 5a fe ff       	call   c0000974 <strcat>
c001aefe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af05:	e8 36 49 ff ff       	call   c000f840 <malloc>
c001af0a:	83 c4 0c             	add    esp,0xc
c001af0d:	89 c3                	mov    ebx,eax
c001af0f:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c001af15:	56                   	push   esi
c001af16:	50                   	push   eax
c001af17:	e8 8c 85 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001af1c:	83 c4 10             	add    esp,0x10
c001af1f:	85 db                	test   ebx,ebx
c001af21:	74 7e                	je     c001afa1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af23:	51                   	push   ecx
c001af24:	51                   	push   ecx
c001af25:	6a 01                	push   0x1
c001af27:	53                   	push   ebx
c001af28:	e8 df 85 ff ff       	call   c001350c <File::open(FileOpenMode)>
c001af2d:	83 c4 10             	add    esp,0x10
c001af30:	85 c0                	test   eax,eax
c001af32:	74 08                	je     c001af3c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af34:	83 ec 0c             	sub    esp,0xc
c001af37:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af39:	53                   	push   ebx
c001af3a:	eb 5f                	jmp    c001af9b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af3c:	52                   	push   edx
c001af3d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af41:	50                   	push   eax
c001af42:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af46:	50                   	push   eax
c001af47:	53                   	push   ebx
c001af48:	e8 6b 88 ff ff       	call   c00137b8 <File::stat(unsigned long long*, bool*)>
c001af4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af51:	83 c4 10             	add    esp,0x10
c001af54:	89 c1                	mov    ecx,eax
c001af56:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af5a:	74 31                	je     c001af8d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	50                   	push   eax
c001af60:	e8 db 48 ff ff       	call   c000f840 <malloc>
c001af65:	89 c6                	mov    esi,eax
c001af67:	58                   	pop    eax
c001af68:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af6a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af6e:	52                   	push   edx
c001af6f:	56                   	push   esi
c001af70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af74:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af78:	53                   	push   ebx
c001af79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af7c:	83 c4 20             	add    esp,0x20
c001af7f:	85 c0                	test   eax,eax
c001af81:	75 0a                	jne    c001af8d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af87:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af8b:	74 18                	je     c001afa5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af8d:	83 ec 0c             	sub    esp,0xc
c001af90:	53                   	push   ebx
c001af91:	e8 d4 85 ff ff       	call   c001356a <File::close()>
c001af96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af9e:	83 c4 10             	add    esp,0x10
c001afa1:	31 c0                	xor    eax,eax
c001afa3:	eb 3b                	jmp    c001afe0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afa5:	83 ec 0c             	sub    esp,0xc
c001afa8:	53                   	push   ebx
c001afa9:	e8 bc 85 ff ff       	call   c001356a <File::close()>
c001afae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afb6:	83 c4 0c             	add    esp,0xc
c001afb9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afc0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afc7:	56                   	push   esi
c001afc8:	e8 70 fd ff ff       	call   c001ad3d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afcd:	89 34 24             	mov    DWORD PTR [esp],esi
c001afd0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afd4:	e8 77 48 ff ff       	call   c000f850 <free>
c001afd9:	83 c4 10             	add    esp,0x10
c001afdc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afe0:	81 c4 20 01 00 00    	add    esp,0x120
c001afe6:	5b                   	pop    ebx
c001afe7:	5e                   	pop    esi
c001afe8:	5f                   	pop    edi
c001afe9:	c3                   	ret    

c001afea <Reg::getLine(char*, char*, char*)>:
c001afea:	57                   	push   edi
c001afeb:	56                   	push   esi
c001afec:	53                   	push   ebx
c001afed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aff1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aff5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aff9:	57                   	push   edi
c001affa:	56                   	push   esi
c001affb:	53                   	push   ebx
c001affc:	68 89 bc 02 c0       	push   0xc002bc89
c001b001:	e8 8f fe ff ff       	call   c001ae95 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b006:	83 c4 10             	add    esp,0x10
c001b009:	84 c0                	test   al,al
c001b00b:	75 10                	jne    c001b01d <Reg::getLine(char*, char*, char*)+0x33>
c001b00d:	57                   	push   edi
c001b00e:	56                   	push   esi
c001b00f:	53                   	push   ebx
c001b010:	68 ae bc 02 c0       	push   0xc002bcae
c001b015:	e8 7b fe ff ff       	call   c001ae95 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b01a:	83 c4 10             	add    esp,0x10
c001b01d:	5b                   	pop    ebx
c001b01e:	5e                   	pop    esi
c001b01f:	5f                   	pop    edi
c001b020:	c3                   	ret    

c001b021 <Reg::readInt(char*, char*, int*)>:
c001b021:	55                   	push   ebp
c001b022:	57                   	push   edi
c001b023:	56                   	push   esi
c001b024:	53                   	push   ebx
c001b025:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b02b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b02f:	57                   	push   edi
c001b030:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b037:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b03e:	e8 a7 ff ff ff       	call   c001afea <Reg::getLine(char*, char*, char*)>
c001b043:	83 c4 10             	add    esp,0x10
c001b046:	84 c0                	test   al,al
c001b048:	0f 84 b3 00 00 00    	je     c001b101 <Reg::readInt(char*, char*, int*)+0xe0>
c001b04e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b052:	80 fa 2b             	cmp    dl,0x2b
c001b055:	74 0c                	je     c001b063 <Reg::readInt(char*, char*, int*)+0x42>
c001b057:	80 fa 2d             	cmp    dl,0x2d
c001b05a:	75 0e                	jne    c001b06a <Reg::readInt(char*, char*, int*)+0x49>
c001b05c:	ba 01 00 00 00       	mov    edx,0x1
c001b061:	eb 0b                	jmp    c001b06e <Reg::readInt(char*, char*, int*)+0x4d>
c001b063:	ba 01 00 00 00       	mov    edx,0x1
c001b068:	eb 02                	jmp    c001b06c <Reg::readInt(char*, char*, int*)+0x4b>
c001b06a:	31 d2                	xor    edx,edx
c001b06c:	31 c0                	xor    eax,eax
c001b06e:	be 0a 00 00 00       	mov    esi,0xa
c001b073:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b078:	75 20                	jne    c001b09a <Reg::readInt(char*, char*, int*)+0x79>
c001b07a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b07e:	80 f9 78             	cmp    cl,0x78
c001b081:	75 0a                	jne    c001b08d <Reg::readInt(char*, char*, int*)+0x6c>
c001b083:	83 c2 02             	add    edx,0x2
c001b086:	be 10 00 00 00       	mov    esi,0x10
c001b08b:	eb 0d                	jmp    c001b09a <Reg::readInt(char*, char*, int*)+0x79>
c001b08d:	80 f9 62             	cmp    cl,0x62
c001b090:	75 08                	jne    c001b09a <Reg::readInt(char*, char*, int*)+0x79>
c001b092:	83 c2 02             	add    edx,0x2
c001b095:	be 02 00 00 00       	mov    esi,0x2
c001b09a:	01 d7                	add    edi,edx
c001b09c:	31 d2                	xor    edx,edx
c001b09e:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0a0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0a4:	80 fb 0d             	cmp    bl,0xd
c001b0a7:	0f 94 c3             	sete   bl
c001b0aa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0af:	0f 94 c1             	sete   cl
c001b0b2:	08 cb                	or     bl,cl
c001b0b4:	75 3a                	jne    c001b0f0 <Reg::readInt(char*, char*, int*)+0xcf>
c001b0b6:	0f af d6             	imul   edx,esi
c001b0b9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0be:	83 fe 10             	cmp    esi,0x10
c001b0c1:	75 26                	jne    c001b0e9 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0c3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0c7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0ca:	89 e9                	mov    ecx,ebp
c001b0cc:	80 f9 05             	cmp    cl,0x5
c001b0cf:	77 06                	ja     c001b0d7 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0d1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0d5:	eb 16                	jmp    c001b0ed <Reg::readInt(char*, char*, int*)+0xcc>
c001b0d7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0db:	83 e9 61             	sub    ecx,0x61
c001b0de:	80 f9 05             	cmp    cl,0x5
c001b0e1:	77 06                	ja     c001b0e9 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0e3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0e7:	eb 04                	jmp    c001b0ed <Reg::readInt(char*, char*, int*)+0xcc>
c001b0e9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0ed:	47                   	inc    edi
c001b0ee:	eb ae                	jmp    c001b09e <Reg::readInt(char*, char*, int*)+0x7d>
c001b0f0:	84 c0                	test   al,al
c001b0f2:	74 02                	je     c001b0f6 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0f4:	f7 da                	neg    edx
c001b0f6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0fd:	89 10                	mov    DWORD PTR [eax],edx
c001b0ff:	88 d8                	mov    al,bl
c001b101:	81 c4 ec 00 00 00    	add    esp,0xec
c001b107:	5b                   	pop    ebx
c001b108:	5e                   	pop    esi
c001b109:	5f                   	pop    edi
c001b10a:	5d                   	pop    ebp
c001b10b:	c3                   	ret    

c001b10c <Reg::readString(char*, char*, char*, int)>:
c001b10c:	57                   	push   edi
c001b10d:	56                   	push   esi
c001b10e:	53                   	push   ebx
c001b10f:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b115:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b11c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b120:	57                   	push   edi
c001b121:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b128:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b12f:	e8 b6 fe ff ff       	call   c001afea <Reg::getLine(char*, char*, char*)>
c001b134:	83 c4 10             	add    esp,0x10
c001b137:	89 c6                	mov    esi,eax
c001b139:	84 c0                	test   al,al
c001b13b:	74 44                	je     c001b181 <Reg::readString(char*, char*, char*, int)+0x75>
c001b13d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b144:	31 c0                	xor    eax,eax
c001b146:	4a                   	dec    edx
c001b147:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b14a:	84 c9                	test   cl,cl
c001b14c:	74 0f                	je     c001b15d <Reg::readString(char*, char*, char*, int)+0x51>
c001b14e:	39 c2                	cmp    edx,eax
c001b150:	7e 0b                	jle    c001b15d <Reg::readString(char*, char*, char*, int)+0x51>
c001b152:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b155:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b15a:	40                   	inc    eax
c001b15b:	eb ea                	jmp    c001b147 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	53                   	push   ebx
c001b161:	e8 2e 56 fe ff       	call   c0000794 <strlen>
c001b166:	83 c4 10             	add    esp,0x10
c001b169:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b16e:	75 11                	jne    c001b181 <Reg::readString(char*, char*, char*, int)+0x75>
c001b170:	83 ec 0c             	sub    esp,0xc
c001b173:	53                   	push   ebx
c001b174:	e8 1b 56 fe ff       	call   c0000794 <strlen>
c001b179:	83 c4 10             	add    esp,0x10
c001b17c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b181:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b187:	89 f0                	mov    eax,esi
c001b189:	5b                   	pop    ebx
c001b18a:	5e                   	pop    esi
c001b18b:	5f                   	pop    edi
c001b18c:	c3                   	ret    

c001b18d <Reg::readBool(char*, char*, bool*)>:
c001b18d:	83 ec 20             	sub    esp,0x20
c001b190:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b194:	50                   	push   eax
c001b195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b19d:	e8 7f fe ff ff       	call   c001b021 <Reg::readInt(char*, char*, int*)>
c001b1a2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1ab:	0f 95 02             	setne  BYTE PTR [edx]
c001b1ae:	83 c4 2c             	add    esp,0x2c
c001b1b1:	c3                   	ret    

c001b1b2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1b2:	53                   	push   ebx
c001b1b3:	83 ec 1c             	sub    esp,0x1c
c001b1b6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1ba:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1be:	50                   	push   eax
c001b1bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1c7:	e8 c1 ff ff ff       	call   c001b18d <Reg::readBool(char*, char*, bool*)>
c001b1cc:	83 c4 10             	add    esp,0x10
c001b1cf:	84 c0                	test   al,al
c001b1d1:	74 04                	je     c001b1d7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1d3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1d7:	88 d8                	mov    al,bl
c001b1d9:	83 c4 18             	add    esp,0x18
c001b1dc:	5b                   	pop    ebx
c001b1dd:	c3                   	ret    

c001b1de <Reg::readIntWithDefault(char*, char*, int)>:
c001b1de:	53                   	push   ebx
c001b1df:	83 ec 1c             	sub    esp,0x1c
c001b1e2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1ea:	50                   	push   eax
c001b1eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f3:	e8 29 fe ff ff       	call   c001b021 <Reg::readInt(char*, char*, int*)>
c001b1f8:	83 c4 10             	add    esp,0x10
c001b1fb:	84 c0                	test   al,al
c001b1fd:	74 04                	je     c001b203 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b203:	89 d8                	mov    eax,ebx
c001b205:	83 c4 18             	add    esp,0x18
c001b208:	5b                   	pop    ebx
c001b209:	c3                   	ret    

c001b20a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b20a:	57                   	push   edi
c001b20b:	56                   	push   esi
c001b20c:	53                   	push   ebx
c001b20d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b211:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b215:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b219:	56                   	push   esi
c001b21a:	53                   	push   ebx
c001b21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b223:	e8 e4 fe ff ff       	call   c001b10c <Reg::readString(char*, char*, char*, int)>
c001b228:	83 c4 10             	add    esp,0x10
c001b22b:	84 c0                	test   al,al
c001b22d:	75 1b                	jne    c001b24a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b22f:	50                   	push   eax
c001b230:	56                   	push   esi
c001b231:	4e                   	dec    esi
c001b232:	6a 00                	push   0x0
c001b234:	53                   	push   ebx
c001b235:	e8 3e 55 fe ff       	call   c0000778 <memset>
c001b23a:	83 c4 0c             	add    esp,0xc
c001b23d:	56                   	push   esi
c001b23e:	57                   	push   edi
c001b23f:	53                   	push   ebx
c001b240:	89 fb                	mov    ebx,edi
c001b242:	e8 fd 54 fe ff       	call   c0000744 <memcpy>
c001b247:	83 c4 10             	add    esp,0x10
c001b24a:	89 d8                	mov    eax,ebx
c001b24c:	5b                   	pop    ebx
c001b24d:	5e                   	pop    esi
c001b24e:	5f                   	pop    edi
c001b24f:	c3                   	ret    

c001b250 <Sys::eject(regs*)>:
c001b250:	83 ec 0c             	sub    esp,0xc
c001b253:	83 ca ff             	or     edx,0xffffffff
c001b256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b25d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b262:	83 e9 41             	sub    ecx,0x41
c001b265:	83 f9 19             	cmp    ecx,0x19
c001b268:	77 18                	ja     c001b282 <Sys::eject(regs*)+0x32>
c001b26a:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c001b271:	85 c9                	test   ecx,ecx
c001b273:	74 0d                	je     c001b282 <Sys::eject(regs*)+0x32>
c001b275:	83 ec 0c             	sub    esp,0xc
c001b278:	51                   	push   ecx
c001b279:	e8 78 b4 ff ff       	call   c00166f6 <LogicalDisk::eject()>
c001b27e:	83 c4 10             	add    esp,0x10
c001b281:	99                   	cdq    
c001b282:	83 c4 0c             	add    esp,0xc
c001b285:	c3                   	ret    

c001b286 <Sys::exit(regs*)>:
c001b286:	83 ec 18             	sub    esp,0x18
c001b289:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b28d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b290:	e8 7a 35 00 00       	call   c001e80f <terminateTask(int)>
c001b295:	83 c8 ff             	or     eax,0xffffffff
c001b298:	83 c4 1c             	add    esp,0x1c
c001b29b:	89 c2                	mov    edx,eax
c001b29d:	c3                   	ret    

c001b29e <Sys::getCwd(regs*)>:
c001b29e:	83 ec 10             	sub    esp,0x10
c001b2a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2a5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2b3:	e8 f2 7f ff ff       	call   c00132aa <Fs::getcwd(Process*, char*, int)>
c001b2b8:	83 c4 1c             	add    esp,0x1c
c001b2bb:	99                   	cdq    
c001b2bc:	c3                   	ret    

c001b2bd <Sys::getPID(regs*)>:
c001b2bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2c7:	99                   	cdq    
c001b2c8:	c3                   	ret    

c001b2c9 <Sys::getRAMData(regs*)>:
c001b2c9:	8b 0d f4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3f4
c001b2cf:	6b 05 f0 e3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e3f0,0x64
c001b2d6:	99                   	cdq    
c001b2d7:	f7 f9                	idiv   ecx
c001b2d9:	c1 e0 18             	shl    eax,0x18
c001b2dc:	09 c8                	or     eax,ecx
c001b2de:	99                   	cdq    
c001b2df:	c3                   	ret    

c001b2e0 <Sys::loadDLL(regs*)>:
c001b2e0:	56                   	push   esi
c001b2e1:	53                   	push   ebx
c001b2e2:	31 d2                	xor    edx,edx
c001b2e4:	51                   	push   ecx
c001b2e5:	b8 01 00 00 00       	mov    eax,0x1
c001b2ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2ee:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2f2:	0f 84 8c 00 00 00    	je     c001b384 <Sys::loadDLL(regs*)+0xa4>
c001b2f8:	83 ec 0c             	sub    esp,0xc
c001b2fb:	68 14 01 00 00       	push   0x114
c001b300:	e8 3b 45 ff ff       	call   c000f840 <malloc>
c001b305:	83 c4 0c             	add    esp,0xc
c001b308:	89 c3                	mov    ebx,eax
c001b30a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b30f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b312:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b315:	53                   	push   ebx
c001b316:	e8 8d 81 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001b31b:	83 c4 10             	add    esp,0x10
c001b31e:	31 d2                	xor    edx,edx
c001b320:	b8 02 00 00 00       	mov    eax,0x2
c001b325:	85 db                	test   ebx,ebx
c001b327:	74 5b                	je     c001b384 <Sys::loadDLL(regs*)+0xa4>
c001b329:	83 ec 0c             	sub    esp,0xc
c001b32c:	53                   	push   ebx
c001b32d:	e8 48 84 ff ff       	call   c001377a <File::exists()>
c001b332:	83 c4 10             	add    esp,0x10
c001b335:	84 c0                	test   al,al
c001b337:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b339:	75 11                	jne    c001b34c <Sys::loadDLL(regs*)+0x6c>
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	53                   	push   ebx
c001b33f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b342:	83 c4 10             	add    esp,0x10
c001b345:	b8 03 00 00 00       	mov    eax,0x3
c001b34a:	eb 36                	jmp    c001b382 <Sys::loadDLL(regs*)+0xa2>
c001b34c:	83 ec 0c             	sub    esp,0xc
c001b34f:	53                   	push   ebx
c001b350:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b353:	58                   	pop    eax
c001b354:	5a                   	pop    edx
c001b355:	6a 00                	push   0x0
c001b357:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b35a:	e8 c5 23 00 00       	call   c001d724 <Thr::loadDLL(char const*, bool)>
c001b35f:	83 c4 10             	add    esp,0x10
c001b362:	89 c1                	mov    ecx,eax
c001b364:	31 d2                	xor    edx,edx
c001b366:	b8 04 00 00 00       	mov    eax,0x4
c001b36b:	85 c9                	test   ecx,ecx
c001b36d:	74 15                	je     c001b384 <Sys::loadDLL(regs*)+0xa4>
c001b36f:	53                   	push   ebx
c001b370:	53                   	push   ebx
c001b371:	ff 35 a8 e3 02 c0    	push   DWORD PTR ds:0xc002e3a8
c001b377:	51                   	push   ecx
c001b378:	e8 db 25 00 00       	call   c001d958 <Thr::executeDLL(unsigned long, void*)>
c001b37d:	83 c4 10             	add    esp,0x10
c001b380:	31 c0                	xor    eax,eax
c001b382:	31 d2                	xor    edx,edx
c001b384:	59                   	pop    ecx
c001b385:	5b                   	pop    ebx
c001b386:	5e                   	pop    esi
c001b387:	c3                   	ret    

c001b388 <Sys::read(regs*)>:
c001b388:	57                   	push   edi
c001b389:	56                   	push   esi
c001b38a:	53                   	push   ebx
c001b38b:	83 ec 10             	sub    esp,0x10
c001b38e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b392:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b395:	83 f8 02             	cmp    eax,0x2
c001b398:	77 10                	ja     c001b3aa <Sys::read(regs*)+0x22>
c001b39a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b39f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3a2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3a8:	eb 0e                	jmp    c001b3b8 <Sys::read(regs*)+0x30>
c001b3aa:	83 ec 0c             	sub    esp,0xc
c001b3ad:	50                   	push   eax
c001b3ae:	e8 98 66 ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001b3b3:	83 c4 10             	add    esp,0x10
c001b3b6:	89 c1                	mov    ecx,eax
c001b3b8:	83 c8 ff             	or     eax,0xffffffff
c001b3bb:	85 c9                	test   ecx,ecx
c001b3bd:	89 c2                	mov    edx,eax
c001b3bf:	74 28                	je     c001b3e9 <Sys::read(regs*)+0x61>
c001b3c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3c9:	31 ff                	xor    edi,edi
c001b3cb:	83 ec 0c             	sub    esp,0xc
c001b3ce:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3d4:	52                   	push   edx
c001b3d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3d8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3db:	57                   	push   edi
c001b3dc:	56                   	push   esi
c001b3dd:	51                   	push   ecx
c001b3de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3e5:	83 c4 20             	add    esp,0x20
c001b3e8:	99                   	cdq    
c001b3e9:	83 c4 10             	add    esp,0x10
c001b3ec:	5b                   	pop    ebx
c001b3ed:	5e                   	pop    esi
c001b3ee:	5f                   	pop    edi
c001b3ef:	c3                   	ret    

c001b3f0 <Sys::sbrk(regs*)>:
c001b3f0:	56                   	push   esi
c001b3f1:	53                   	push   ebx
c001b3f2:	50                   	push   eax
c001b3f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3ff:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b402:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b408:	85 db                	test   ebx,ebx
c001b40a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b40d:	74 02                	je     c001b411 <Sys::sbrk(regs*)+0x21>
c001b40f:	79 06                	jns    c001b417 <Sys::sbrk(regs*)+0x27>
c001b411:	89 f0                	mov    eax,esi
c001b413:	31 d2                	xor    edx,edx
c001b415:	eb 2a                	jmp    c001b441 <Sys::sbrk(regs*)+0x51>
c001b417:	83 c8 ff             	or     eax,0xffffffff
c001b41a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b420:	89 c2                	mov    edx,eax
c001b422:	77 1d                	ja     c001b441 <Sys::sbrk(regs*)+0x51>
c001b424:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b42a:	50                   	push   eax
c001b42b:	c1 ea 0c             	shr    edx,0xc
c001b42e:	68 07 04 00 00       	push   0x407
c001b433:	52                   	push   edx
c001b434:	51                   	push   ecx
c001b435:	e8 3e 70 ff ff       	call   c0012478 <VAS::allocatePages(int, int)>
c001b43a:	89 f0                	mov    eax,esi
c001b43c:	31 d2                	xor    edx,edx
c001b43e:	83 c4 10             	add    esp,0x10
c001b441:	59                   	pop    ecx
c001b442:	5b                   	pop    ebx
c001b443:	5e                   	pop    esi
c001b444:	c3                   	ret    

c001b445 <Sys::setCwd(regs*)>:
c001b445:	83 ec 14             	sub    esp,0x14
c001b448:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b44c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b44f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b454:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b457:	e8 bd 83 ff ff       	call   c0013819 <Fs::setcwd(Process*, char*)>
c001b45c:	83 c4 1c             	add    esp,0x1c
c001b45f:	99                   	cdq    
c001b460:	c3                   	ret    

c001b461 <Sys::setTime(regs*)>:
c001b461:	55                   	push   ebp
c001b462:	31 d2                	xor    edx,edx
c001b464:	57                   	push   edi
c001b465:	bf 18 00 00 00       	mov    edi,0x18
c001b46a:	56                   	push   esi
c001b46b:	53                   	push   ebx
c001b46c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b471:	83 ec 30             	sub    esp,0x30
c001b474:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b478:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b47b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b47e:	f7 f3                	div    ebx
c001b480:	89 d6                	mov    esi,edx
c001b482:	31 d2                	xor    edx,edx
c001b484:	f7 f3                	div    ebx
c001b486:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b489:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b48d:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b492:	31 d2                	xor    edx,edx
c001b494:	f7 f3                	div    ebx
c001b496:	31 d2                	xor    edx,edx
c001b498:	bb 0c 00 00 00       	mov    ebx,0xc
c001b49d:	f7 f7                	div    edi
c001b49f:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4a2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4a6:	0f b7 cd             	movzx  ecx,bp
c001b4a9:	56                   	push   esi
c001b4aa:	89 c7                	mov    edi,eax
c001b4ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4b0:	c1 e6 10             	shl    esi,0x10
c001b4b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4b7:	83 e7 1f             	and    edi,0x1f
c001b4ba:	51                   	push   ecx
c001b4bb:	47                   	inc    edi
c001b4bc:	c1 e8 05             	shr    eax,0x5
c001b4bf:	31 d2                	xor    edx,edx
c001b4c1:	f7 f3                	div    ebx
c001b4c3:	31 db                	xor    ebx,ebx
c001b4c5:	52                   	push   edx
c001b4c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4ca:	57                   	push   edi
c001b4cb:	68 c9 bc 02 c0       	push   0xc002bcc9
c001b4d0:	e8 7b 7a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001b4d5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4d9:	89 f8                	mov    eax,edi
c001b4db:	31 c9                	xor    ecx,ecx
c001b4dd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4e1:	88 c1                	mov    cl,al
c001b4e3:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4e9:	88 d5                	mov    ch,dl
c001b4eb:	c1 e0 10             	shl    eax,0x10
c001b4ee:	0f b7 d1             	movzx  edx,cx
c001b4f1:	09 c2                	or     edx,eax
c001b4f3:	89 d8                	mov    eax,ebx
c001b4f5:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b4fa:	09 f0                	or     eax,esi
c001b4fc:	89 c3                	mov    ebx,eax
c001b4fe:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b502:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b506:	83 c4 18             	add    esp,0x18
c001b509:	53                   	push   ebx
c001b50a:	52                   	push   edx
c001b50b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b50f:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b513:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b517:	e8 17 8a ff ff       	call   c0013f33 <datetimeToSeconds(datetime_t)>
c001b51c:	83 c4 0c             	add    esp,0xc
c001b51f:	52                   	push   edx
c001b520:	50                   	push   eax
c001b521:	56                   	push   esi
c001b522:	e8 93 8b ff ff       	call   c00140ba <secondsToDatetime(unsigned long long)>
c001b527:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b52b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b52f:	51                   	push   ecx
c001b530:	89 d6                	mov    esi,edx
c001b532:	51                   	push   ecx
c001b533:	c1 ee 10             	shr    esi,0x10
c001b536:	89 f3                	mov    ebx,esi
c001b538:	0f b6 f3             	movzx  esi,bl
c001b53b:	56                   	push   esi
c001b53c:	0f b6 f6             	movzx  esi,dh
c001b53f:	0f b6 d2             	movzx  edx,dl
c001b542:	56                   	push   esi
c001b543:	52                   	push   edx
c001b544:	89 c2                	mov    edx,eax
c001b546:	c1 ea 10             	shr    edx,0x10
c001b549:	52                   	push   edx
c001b54a:	0f b6 d4             	movzx  edx,ah
c001b54d:	0f b6 c0             	movzx  eax,al
c001b550:	52                   	push   edx
c001b551:	50                   	push   eax
c001b552:	68 e5 bc 02 c0       	push   0xc002bce5
c001b557:	e8 f4 79 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001b55c:	83 c4 2c             	add    esp,0x2c
c001b55f:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001b564:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b568:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b56c:	53                   	push   ebx
c001b56d:	51                   	push   ecx
c001b56e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b574:	e8 e1 8a ff ff       	call   c001405a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b579:	83 f0 01             	xor    eax,0x1
c001b57c:	31 d2                	xor    edx,edx
c001b57e:	0f b6 c0             	movzx  eax,al
c001b581:	83 c4 3c             	add    esp,0x3c
c001b584:	5b                   	pop    ebx
c001b585:	5e                   	pop    esi
c001b586:	5f                   	pop    edi
c001b587:	5d                   	pop    ebp
c001b588:	c3                   	ret    

c001b589 <Sys::timezone(regs*)>:
c001b589:	53                   	push   ebx
c001b58a:	83 ec 08             	sub    esp,0x8
c001b58d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b591:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b595:	75 17                	jne    c001b5ae <Sys::timezone(regs*)+0x25>
c001b597:	83 ec 0c             	sub    esp,0xc
c001b59a:	68 01 bd 02 c0       	push   0xc002bd01
c001b59f:	e8 ac 79 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001b5a4:	83 c8 ff             	or     eax,0xffffffff
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	89 c2                	mov    edx,eax
c001b5ac:	eb 20                	jmp    c001b5ce <Sys::timezone(regs*)+0x45>
c001b5ae:	83 ec 0c             	sub    esp,0xc
c001b5b1:	68 39 bd 02 c0       	push   0xc002bd39
c001b5b6:	e8 95 79 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001b5bb:	58                   	pop    eax
c001b5bc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5bf:	e8 f8 87 ff ff       	call   c0013dbc <User::loadClockSettings(int)>
c001b5c4:	83 c4 10             	add    esp,0x10
c001b5c7:	b8 01 00 00 00       	mov    eax,0x1
c001b5cc:	31 d2                	xor    edx,edx
c001b5ce:	83 c4 08             	add    esp,0x8
c001b5d1:	5b                   	pop    ebx
c001b5d2:	c3                   	ret    

c001b5d3 <Sys::write(regs*)>:
c001b5d3:	57                   	push   edi
c001b5d4:	56                   	push   esi
c001b5d5:	53                   	push   ebx
c001b5d6:	83 ec 10             	sub    esp,0x10
c001b5d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5e0:	83 f8 02             	cmp    eax,0x2
c001b5e3:	77 10                	ja     c001b5f5 <Sys::write(regs*)+0x22>
c001b5e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5ed:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b5f3:	eb 0e                	jmp    c001b603 <Sys::write(regs*)+0x30>
c001b5f5:	83 ec 0c             	sub    esp,0xc
c001b5f8:	50                   	push   eax
c001b5f9:	e8 4d 64 ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001b5fe:	83 c4 10             	add    esp,0x10
c001b601:	89 c1                	mov    ecx,eax
c001b603:	83 c8 ff             	or     eax,0xffffffff
c001b606:	85 c9                	test   ecx,ecx
c001b608:	89 c2                	mov    edx,eax
c001b60a:	74 28                	je     c001b634 <Sys::write(regs*)+0x61>
c001b60c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b614:	31 ff                	xor    edi,edi
c001b616:	83 ec 0c             	sub    esp,0xc
c001b619:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b61b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b61f:	52                   	push   edx
c001b620:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b623:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b626:	57                   	push   edi
c001b627:	56                   	push   esi
c001b628:	51                   	push   ecx
c001b629:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b62c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b630:	83 c4 20             	add    esp,0x20
c001b633:	99                   	cdq    
c001b634:	83 c4 10             	add    esp,0x10
c001b637:	5b                   	pop    ebx
c001b638:	5e                   	pop    esi
c001b639:	5f                   	pop    edi
c001b63a:	c3                   	ret    

c001b63b <Sys::wsbe(regs*)>:
c001b63b:	57                   	push   edi
c001b63c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b641:	56                   	push   esi
c001b642:	be 78 bd 02 c0       	mov    esi,0xc002bd78
c001b647:	53                   	push   ebx
c001b648:	83 ec 30             	sub    esp,0x30
c001b64b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b64f:	fc                   	cld    
c001b650:	83 ec 0c             	sub    esp,0xc
c001b653:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b655:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b659:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b65e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b661:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b667:	8b 06                	mov    eax,DWORD PTR [esi]
c001b669:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b66c:	57                   	push   edi
c001b66d:	e8 22 51 fe ff       	call   c0000794 <strlen>
c001b672:	5a                   	pop    edx
c001b673:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b677:	52                   	push   edx
c001b678:	31 d2                	xor    edx,edx
c001b67a:	57                   	push   edi
c001b67b:	52                   	push   edx
c001b67c:	50                   	push   eax
c001b67d:	56                   	push   esi
c001b67e:	ff d3                	call   ebx
c001b680:	83 c4 14             	add    esp,0x14
c001b683:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b687:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b68a:	e8 80 31 00 00       	call   c001e80f <terminateTask(int)>
c001b68f:	83 c4 40             	add    esp,0x40
c001b692:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b697:	5b                   	pop    ebx
c001b698:	31 d2                	xor    edx,edx
c001b69a:	5e                   	pop    esi
c001b69b:	5f                   	pop    edi
c001b69c:	c3                   	ret    

c001b69d <Sys::yield(regs*)>:
c001b69d:	57                   	push   edi
c001b69e:	56                   	push   esi
c001b69f:	53                   	push   ebx
c001b6a0:	e8 27 27 00 00       	call   c001ddcc <lockScheduler()>
c001b6a5:	e8 5e 2a 00 00       	call   c001e108 <schedule()>
c001b6aa:	e8 1f 27 00 00       	call   c001ddce <unlockScheduler()>
c001b6af:	8b 35 50 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea50
c001b6b5:	8b 3d 54 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea54
c001b6bb:	89 f0                	mov    eax,esi
c001b6bd:	89 fb                	mov    ebx,edi
c001b6bf:	89 f1                	mov    ecx,esi
c001b6c1:	c1 e0 07             	shl    eax,0x7
c001b6c4:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6c8:	25 80 30 0f 00       	and    eax,0xf3080
c001b6cd:	c1 eb 17             	shr    ebx,0x17
c001b6d0:	31 c8                	xor    eax,ecx
c001b6d2:	89 da                	mov    edx,ebx
c001b6d4:	5b                   	pop    ebx
c001b6d5:	5e                   	pop    esi
c001b6d6:	5f                   	pop    edi
c001b6d7:	c3                   	ret    

c001b6d8 <sysCallSeekDir(regs*)>:
c001b6d8:	31 c0                	xor    eax,eax
c001b6da:	31 d2                	xor    edx,edx
c001b6dc:	c3                   	ret    

c001b6dd <sysCallTellDir(regs*)>:
c001b6dd:	31 c0                	xor    eax,eax
c001b6df:	31 d2                	xor    edx,edx
c001b6e1:	c3                   	ret    

c001b6e2 <sysCallVerify(regs*)>:
c001b6e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6e6:	31 d2                	xor    edx,edx
c001b6e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6eb:	c3                   	ret    

c001b6ec <sysFormatDisk(regs*)>:
c001b6ec:	56                   	push   esi
c001b6ed:	53                   	push   ebx
c001b6ee:	53                   	push   ebx
c001b6ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6f3:	8b 1d 38 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e538
c001b6f9:	eb 25                	jmp    c001b720 <sysFormatDisk(regs*)+0x34>
c001b6fb:	83 ec 0c             	sub    esp,0xc
c001b6fe:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b701:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b703:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b706:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b709:	50                   	push   eax
c001b70a:	ff 34 85 e0 e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1620]
c001b711:	53                   	push   ebx
c001b712:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b715:	83 c4 20             	add    esp,0x20
c001b718:	83 f8 08             	cmp    eax,0x8
c001b71b:	75 12                	jne    c001b72f <sysFormatDisk(regs*)+0x43>
c001b71d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b720:	85 db                	test   ebx,ebx
c001b722:	75 d7                	jne    c001b6fb <sysFormatDisk(regs*)+0xf>
c001b724:	59                   	pop    ecx
c001b725:	b8 03 00 00 00       	mov    eax,0x3
c001b72a:	31 d2                	xor    edx,edx
c001b72c:	5b                   	pop    ebx
c001b72d:	5e                   	pop    esi
c001b72e:	c3                   	ret    
c001b72f:	85 c0                	test   eax,eax
c001b731:	74 1b                	je     c001b74e <sysFormatDisk(regs*)+0x62>
c001b733:	83 f8 09             	cmp    eax,0x9
c001b736:	74 0b                	je     c001b743 <sysFormatDisk(regs*)+0x57>
c001b738:	59                   	pop    ecx
c001b739:	b8 02 00 00 00       	mov    eax,0x2
c001b73e:	31 d2                	xor    edx,edx
c001b740:	5b                   	pop    ebx
c001b741:	5e                   	pop    esi
c001b742:	c3                   	ret    
c001b743:	59                   	pop    ecx
c001b744:	b8 01 00 00 00       	mov    eax,0x1
c001b749:	31 d2                	xor    edx,edx
c001b74b:	5b                   	pop    ebx
c001b74c:	5e                   	pop    esi
c001b74d:	c3                   	ret    
c001b74e:	59                   	pop    ecx
c001b74f:	31 c0                	xor    eax,eax
c001b751:	31 d2                	xor    edx,edx
c001b753:	5b                   	pop    ebx
c001b754:	5e                   	pop    esi
c001b755:	c3                   	ret    

c001b756 <sysSetDiskVolumeLabel(regs*)>:
c001b756:	56                   	push   esi
c001b757:	53                   	push   ebx
c001b758:	53                   	push   ebx
c001b759:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b75d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b760:	83 f8 19             	cmp    eax,0x19
c001b763:	77 29                	ja     c001b78e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b765:	8b 0c 85 e0 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1620]
c001b76c:	85 c9                	test   ecx,ecx
c001b76e:	74 1e                	je     c001b78e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b770:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b773:	85 d2                	test   edx,edx
c001b775:	74 17                	je     c001b78e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b777:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b77d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b77f:	52                   	push   edx
c001b780:	50                   	push   eax
c001b781:	51                   	push   ecx
c001b782:	53                   	push   ebx
c001b783:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b786:	83 c4 10             	add    esp,0x10
c001b789:	99                   	cdq    
c001b78a:	59                   	pop    ecx
c001b78b:	5b                   	pop    ebx
c001b78c:	5e                   	pop    esi
c001b78d:	c3                   	ret    
c001b78e:	59                   	pop    ecx
c001b78f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b794:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b799:	5b                   	pop    ebx
c001b79a:	5e                   	pop    esi
c001b79b:	c3                   	ret    

c001b79c <sysGetDiskVolumeLabel(regs*)>:
c001b79c:	57                   	push   edi
c001b79d:	56                   	push   esi
c001b79e:	53                   	push   ebx
c001b79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7a6:	83 fa 19             	cmp    edx,0x19
c001b7a9:	77 34                	ja     c001b7df <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ab:	8b 0c 95 e0 e9 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1620]
c001b7b2:	85 c9                	test   ecx,ecx
c001b7b4:	74 29                	je     c001b7df <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7b6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7b9:	85 db                	test   ebx,ebx
c001b7bb:	74 22                	je     c001b7df <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7c0:	85 c0                	test   eax,eax
c001b7c2:	74 1b                	je     c001b7df <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c4:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7ca:	83 ec 0c             	sub    esp,0xc
c001b7cd:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7cf:	50                   	push   eax
c001b7d0:	53                   	push   ebx
c001b7d1:	52                   	push   edx
c001b7d2:	51                   	push   ecx
c001b7d3:	56                   	push   esi
c001b7d4:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7d7:	83 c4 20             	add    esp,0x20
c001b7da:	99                   	cdq    
c001b7db:	5b                   	pop    ebx
c001b7dc:	5e                   	pop    esi
c001b7dd:	5f                   	pop    edi
c001b7de:	c3                   	ret    
c001b7df:	5b                   	pop    ebx
c001b7e0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ea:	5e                   	pop    esi
c001b7eb:	5f                   	pop    edi
c001b7ec:	c3                   	ret    

c001b7ed <sysShutdown(regs*)>:
c001b7ed:	83 ec 0c             	sub    esp,0xc
c001b7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7f7:	85 c0                	test   eax,eax
c001b7f9:	74 18                	je     c001b813 <sysShutdown(regs*)+0x26>
c001b7fb:	83 f8 01             	cmp    eax,0x1
c001b7fe:	74 38                	je     c001b838 <sysShutdown(regs*)+0x4b>
c001b800:	83 f8 02             	cmp    eax,0x2
c001b803:	74 24                	je     c001b829 <sysShutdown(regs*)+0x3c>
c001b805:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b80a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b80f:	83 c4 0c             	add    esp,0xc
c001b812:	c3                   	ret    
c001b813:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001b818:	8b 10                	mov    edx,DWORD PTR [eax]
c001b81a:	6a 00                	push   0x0
c001b81c:	6a 00                	push   0x0
c001b81e:	6a 00                	push   0x0
c001b820:	50                   	push   eax
c001b821:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	eb dc                	jmp    c001b805 <sysShutdown(regs*)+0x18>
c001b829:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001b82e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b830:	6a 00                	push   0x0
c001b832:	6a 00                	push   0x0
c001b834:	6a 01                	push   0x1
c001b836:	eb e8                	jmp    c001b820 <sysShutdown(regs*)+0x33>
c001b838:	a1 80 0a 03 c0       	mov    eax,ds:0xc0030a80
c001b83d:	85 c0                	test   eax,eax
c001b83f:	74 02                	je     c001b843 <sysShutdown(regs*)+0x56>
c001b841:	ff d0                	call   eax
c001b843:	31 c0                	xor    eax,eax
c001b845:	31 d2                	xor    edx,edx
c001b847:	83 c4 0c             	add    esp,0xc
c001b84a:	c3                   	ret    

c001b84b <sysCallRealpath(regs*)>:
c001b84b:	83 ec 0c             	sub    esp,0xc
c001b84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b852:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b855:	85 d2                	test   edx,edx
c001b857:	74 07                	je     c001b860 <sysCallRealpath(regs*)+0x15>
c001b859:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b85c:	85 c0                	test   eax,eax
c001b85e:	75 0b                	jne    c001b86b <sysCallRealpath(regs*)+0x20>
c001b860:	b8 01 00 00 00       	mov    eax,0x1
c001b865:	31 d2                	xor    edx,edx
c001b867:	83 c4 0c             	add    esp,0xc
c001b86a:	c3                   	ret    
c001b86b:	51                   	push   ecx
c001b86c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b872:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b875:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b87b:	51                   	push   ecx
c001b87c:	52                   	push   edx
c001b87d:	50                   	push   eax
c001b87e:	e8 7b 7a ff ff       	call   c00132fe <Fs::standardiseFiles(char*, char const*, char const*)>
c001b883:	83 c4 10             	add    esp,0x10
c001b886:	31 c0                	xor    eax,eax
c001b888:	31 d2                	xor    edx,edx
c001b88a:	83 c4 0c             	add    esp,0xc
c001b88d:	c3                   	ret    

c001b88e <sysCallGetArgc(regs*)>:
c001b88e:	83 ec 14             	sub    esp,0x14
c001b891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b896:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b899:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b89f:	68 a4 bd 02 c0       	push   0xc002bda4
c001b8a4:	e8 a7 76 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001b8a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b1:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8b7:	83 c4 1c             	add    esp,0x1c
c001b8ba:	99                   	cdq    
c001b8bb:	c3                   	ret    

c001b8bc <sysCallReadDir(regs*)>:
c001b8bc:	53                   	push   ebx
c001b8bd:	83 ec 18             	sub    esp,0x18
c001b8c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8c4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8c7:	83 f8 02             	cmp    eax,0x2
c001b8ca:	76 53                	jbe    c001b91f <sysCallReadDir(regs*)+0x63>
c001b8cc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8cf:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8d5:	77 4f                	ja     c001b926 <sysCallReadDir(regs*)+0x6a>
c001b8d7:	83 ec 0c             	sub    esp,0xc
c001b8da:	50                   	push   eax
c001b8db:	e8 6b 61 ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001b8e0:	83 c4 10             	add    esp,0x10
c001b8e3:	85 c0                	test   eax,eax
c001b8e5:	74 50                	je     c001b937 <sysCallReadDir(regs*)+0x7b>
c001b8e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8ef:	83 ec 0c             	sub    esp,0xc
c001b8f2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8f4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b8f8:	51                   	push   ecx
c001b8f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8fc:	6a 00                	push   0x0
c001b8fe:	68 10 01 00 00       	push   0x110
c001b903:	50                   	push   eax
c001b904:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b907:	83 c4 20             	add    esp,0x20
c001b90a:	85 c0                	test   eax,eax
c001b90c:	74 38                	je     c001b946 <sysCallReadDir(regs*)+0x8a>
c001b90e:	83 f8 07             	cmp    eax,0x7
c001b911:	74 0c                	je     c001b91f <sysCallReadDir(regs*)+0x63>
c001b913:	b8 02 00 00 00       	mov    eax,0x2
c001b918:	31 d2                	xor    edx,edx
c001b91a:	83 c4 18             	add    esp,0x18
c001b91d:	5b                   	pop    ebx
c001b91e:	c3                   	ret    
c001b91f:	b8 01 00 00 00       	mov    eax,0x1
c001b924:	eb f2                	jmp    c001b918 <sysCallReadDir(regs*)+0x5c>
c001b926:	83 ec 08             	sub    esp,0x8
c001b929:	52                   	push   edx
c001b92a:	68 bc be 02 c0       	push   0xc002bebc
c001b92f:	e8 1c 76 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001b934:	83 c4 10             	add    esp,0x10
c001b937:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b93c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b941:	83 c4 18             	add    esp,0x18
c001b944:	5b                   	pop    ebx
c001b945:	c3                   	ret    
c001b946:	31 c0                	xor    eax,eax
c001b948:	eb ce                	jmp    c001b918 <sysCallReadDir(regs*)+0x5c>

c001b94a <sysCallIsATTY(regs*)>:
c001b94a:	83 ec 0c             	sub    esp,0xc
c001b94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b951:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b954:	83 f8 02             	cmp    eax,0x2
c001b957:	76 07                	jbe    c001b960 <sysCallIsATTY(regs*)+0x16>
c001b959:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b95e:	75 26                	jne    c001b986 <sysCallIsATTY(regs*)+0x3c>
c001b960:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b965:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b968:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b96e:	85 c0                	test   eax,eax
c001b970:	74 24                	je     c001b996 <sysCallIsATTY(regs*)+0x4c>
c001b972:	83 ec 0c             	sub    esp,0xc
c001b975:	8b 10                	mov    edx,DWORD PTR [eax]
c001b977:	50                   	push   eax
c001b978:	ff 12                	call   DWORD PTR [edx]
c001b97a:	31 d2                	xor    edx,edx
c001b97c:	0f b6 c0             	movzx  eax,al
c001b97f:	83 c4 10             	add    esp,0x10
c001b982:	83 c4 0c             	add    esp,0xc
c001b985:	c3                   	ret    
c001b986:	83 ec 0c             	sub    esp,0xc
c001b989:	50                   	push   eax
c001b98a:	e8 bc 60 ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001b98f:	83 c4 10             	add    esp,0x10
c001b992:	85 c0                	test   eax,eax
c001b994:	75 dc                	jne    c001b972 <sysCallIsATTY(regs*)+0x28>
c001b996:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b99b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9a0:	83 c4 0c             	add    esp,0xc
c001b9a3:	c3                   	ret    

c001b9a4 <sysCallSeek(regs*)>:
c001b9a4:	53                   	push   ebx
c001b9a5:	83 ec 08             	sub    esp,0x8
c001b9a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9af:	83 f8 02             	cmp    eax,0x2
c001b9b2:	76 4a                	jbe    c001b9fe <sysCallSeek(regs*)+0x5a>
c001b9b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9b9:	77 32                	ja     c001b9ed <sysCallSeek(regs*)+0x49>
c001b9bb:	83 ec 0c             	sub    esp,0xc
c001b9be:	50                   	push   eax
c001b9bf:	e8 87 60 ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001b9c4:	83 c4 0c             	add    esp,0xc
c001b9c7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9ca:	31 db                	xor    ebx,ebx
c001b9cc:	53                   	push   ebx
c001b9cd:	51                   	push   ecx
c001b9ce:	50                   	push   eax
c001b9cf:	e8 f6 7b ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001b9d4:	83 c4 10             	add    esp,0x10
c001b9d7:	85 c0                	test   eax,eax
c001b9d9:	0f 95 c0             	setne  al
c001b9dc:	31 d2                	xor    edx,edx
c001b9de:	0f b6 c0             	movzx  eax,al
c001b9e1:	f7 d8                	neg    eax
c001b9e3:	83 d2 00             	adc    edx,0x0
c001b9e6:	83 c4 08             	add    esp,0x8
c001b9e9:	f7 da                	neg    edx
c001b9eb:	5b                   	pop    ebx
c001b9ec:	c3                   	ret    
c001b9ed:	83 ec 08             	sub    esp,0x8
c001b9f0:	50                   	push   eax
c001b9f1:	68 af bd 02 c0       	push   0xc002bdaf
c001b9f6:	e8 55 75 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001b9fb:	83 c4 10             	add    esp,0x10
c001b9fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba08:	83 c4 08             	add    esp,0x8
c001ba0b:	5b                   	pop    ebx
c001ba0c:	c3                   	ret    

c001ba0d <sysCallTell(regs*)>:
c001ba0d:	53                   	push   ebx
c001ba0e:	83 ec 08             	sub    esp,0x8
c001ba11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba18:	83 f8 02             	cmp    eax,0x2
c001ba1b:	76 5e                	jbe    c001ba7b <sysCallTell(regs*)+0x6e>
c001ba1d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba22:	77 2d                	ja     c001ba51 <sysCallTell(regs*)+0x44>
c001ba24:	83 ec 0c             	sub    esp,0xc
c001ba27:	50                   	push   eax
c001ba28:	e8 1e 60 ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001ba2d:	5a                   	pop    edx
c001ba2e:	59                   	pop    ecx
c001ba2f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba32:	50                   	push   eax
c001ba33:	e8 e8 7b ff ff       	call   c0013620 <File::tell(unsigned long long*)>
c001ba38:	83 c4 10             	add    esp,0x10
c001ba3b:	85 c0                	test   eax,eax
c001ba3d:	0f 95 c0             	setne  al
c001ba40:	31 d2                	xor    edx,edx
c001ba42:	0f b6 c0             	movzx  eax,al
c001ba45:	f7 d8                	neg    eax
c001ba47:	83 d2 00             	adc    edx,0x0
c001ba4a:	83 c4 08             	add    esp,0x8
c001ba4d:	f7 da                	neg    edx
c001ba4f:	5b                   	pop    ebx
c001ba50:	c3                   	ret    
c001ba51:	83 ec 08             	sub    esp,0x8
c001ba54:	50                   	push   eax
c001ba55:	68 c9 bd 02 c0       	push   0xc002bdc9
c001ba5a:	e8 f1 74 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001ba5f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba62:	83 c4 10             	add    esp,0x10
c001ba65:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba72:	31 d2                	xor    edx,edx
c001ba74:	31 c0                	xor    eax,eax
c001ba76:	83 c4 08             	add    esp,0x8
c001ba79:	5b                   	pop    ebx
c001ba7a:	c3                   	ret    
c001ba7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba80:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba85:	83 c4 08             	add    esp,0x8
c001ba88:	5b                   	pop    ebx
c001ba89:	c3                   	ret    

c001ba8a <sysCallSize(regs*)>:
c001ba8a:	53                   	push   ebx
c001ba8b:	83 ec 18             	sub    esp,0x18
c001ba8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba92:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba95:	83 f8 02             	cmp    eax,0x2
c001ba98:	76 64                	jbe    c001bafe <sysCallSize(regs*)+0x74>
c001ba9a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba9f:	77 33                	ja     c001bad4 <sysCallSize(regs*)+0x4a>
c001baa1:	83 ec 0c             	sub    esp,0xc
c001baa4:	50                   	push   eax
c001baa5:	e8 a1 5f ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001baaa:	83 c4 0c             	add    esp,0xc
c001baad:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bab1:	52                   	push   edx
c001bab2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bab5:	50                   	push   eax
c001bab6:	e8 fd 7c ff ff       	call   c00137b8 <File::stat(unsigned long long*, bool*)>
c001babb:	83 c4 10             	add    esp,0x10
c001babe:	85 c0                	test   eax,eax
c001bac0:	0f 95 c0             	setne  al
c001bac3:	31 d2                	xor    edx,edx
c001bac5:	0f b6 c0             	movzx  eax,al
c001bac8:	f7 d8                	neg    eax
c001baca:	83 d2 00             	adc    edx,0x0
c001bacd:	83 c4 18             	add    esp,0x18
c001bad0:	f7 da                	neg    edx
c001bad2:	5b                   	pop    ebx
c001bad3:	c3                   	ret    
c001bad4:	83 ec 08             	sub    esp,0x8
c001bad7:	50                   	push   eax
c001bad8:	68 e3 bd 02 c0       	push   0xc002bde3
c001badd:	e8 6e 74 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001bae2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bae5:	83 c4 10             	add    esp,0x10
c001bae8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baf5:	31 d2                	xor    edx,edx
c001baf7:	31 c0                	xor    eax,eax
c001baf9:	83 c4 18             	add    esp,0x18
c001bafc:	5b                   	pop    ebx
c001bafd:	c3                   	ret    
c001bafe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb08:	83 c4 18             	add    esp,0x18
c001bb0b:	5b                   	pop    ebx
c001bb0c:	c3                   	ret    

c001bb0d <sysCallSizeFromFilename(regs*)>:
c001bb0d:	57                   	push   edi
c001bb0e:	56                   	push   esi
c001bb0f:	53                   	push   ebx
c001bb10:	83 ec 20             	sub    esp,0x20
c001bb13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb17:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb1a:	83 fb 02             	cmp    ebx,0x2
c001bb1d:	0f 86 99 00 00 00    	jbe    c001bbbc <sysCallSizeFromFilename(regs*)+0xaf>
c001bb23:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb29:	77 65                	ja     c001bb90 <sysCallSizeFromFilename(regs*)+0x83>
c001bb2b:	83 ec 0c             	sub    esp,0xc
c001bb2e:	68 14 01 00 00       	push   0x114
c001bb33:	e8 08 3d ff ff       	call   c000f840 <malloc>
c001bb38:	83 c4 0c             	add    esp,0xc
c001bb3b:	89 c6                	mov    esi,eax
c001bb3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb42:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb45:	53                   	push   ebx
c001bb46:	56                   	push   esi
c001bb47:	e8 5c 79 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001bb4c:	83 c4 0c             	add    esp,0xc
c001bb4f:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb53:	50                   	push   eax
c001bb54:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb57:	56                   	push   esi
c001bb58:	e8 5b 7c ff ff       	call   c00137b8 <File::stat(unsigned long long*, bool*)>
c001bb5d:	83 c4 10             	add    esp,0x10
c001bb60:	85 f6                	test   esi,esi
c001bb62:	74 14                	je     c001bb78 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb68:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb6a:	83 ec 0c             	sub    esp,0xc
c001bb6d:	56                   	push   esi
c001bb6e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb78:	85 c0                	test   eax,eax
c001bb7a:	0f 95 c0             	setne  al
c001bb7d:	31 d2                	xor    edx,edx
c001bb7f:	0f b6 c0             	movzx  eax,al
c001bb82:	f7 d8                	neg    eax
c001bb84:	83 d2 00             	adc    edx,0x0
c001bb87:	83 c4 20             	add    esp,0x20
c001bb8a:	f7 da                	neg    edx
c001bb8c:	5b                   	pop    ebx
c001bb8d:	5e                   	pop    esi
c001bb8e:	5f                   	pop    edi
c001bb8f:	c3                   	ret    
c001bb90:	83 ec 08             	sub    esp,0x8
c001bb93:	53                   	push   ebx
c001bb94:	68 e3 bd 02 c0       	push   0xc002bde3
c001bb99:	e8 b2 73 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001bb9e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bba1:	83 c4 10             	add    esp,0x10
c001bba4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbb1:	31 d2                	xor    edx,edx
c001bbb3:	83 c4 20             	add    esp,0x20
c001bbb6:	31 c0                	xor    eax,eax
c001bbb8:	5b                   	pop    ebx
c001bbb9:	5e                   	pop    esi
c001bbba:	5f                   	pop    edi
c001bbbb:	c3                   	ret    
c001bbbc:	83 c4 20             	add    esp,0x20
c001bbbf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbc4:	5b                   	pop    ebx
c001bbc5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbca:	5e                   	pop    esi
c001bbcb:	5f                   	pop    edi
c001bbcc:	c3                   	ret    

c001bbcd <sysCallClose(regs*)>:
c001bbcd:	53                   	push   ebx
c001bbce:	83 ec 08             	sub    esp,0x8
c001bbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbd8:	83 f8 02             	cmp    eax,0x2
c001bbdb:	76 50                	jbe    c001bc2d <sysCallClose(regs*)+0x60>
c001bbdd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbe2:	74 58                	je     c001bc3c <sysCallClose(regs*)+0x6f>
c001bbe4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbe9:	74 60                	je     c001bc4b <sysCallClose(regs*)+0x7e>
c001bbeb:	77 2f                	ja     c001bc1c <sysCallClose(regs*)+0x4f>
c001bbed:	83 ec 0c             	sub    esp,0xc
c001bbf0:	50                   	push   eax
c001bbf1:	e8 55 5e ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001bbf6:	89 c3                	mov    ebx,eax
c001bbf8:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbfb:	e8 6a 79 ff ff       	call   c001356a <File::close()>
c001bc00:	83 c4 10             	add    esp,0x10
c001bc03:	85 db                	test   ebx,ebx
c001bc05:	74 0c                	je     c001bc13 <sysCallClose(regs*)+0x46>
c001bc07:	83 ec 0c             	sub    esp,0xc
c001bc0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc0c:	53                   	push   ebx
c001bc0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	31 c0                	xor    eax,eax
c001bc15:	31 d2                	xor    edx,edx
c001bc17:	83 c4 08             	add    esp,0x8
c001bc1a:	5b                   	pop    ebx
c001bc1b:	c3                   	ret    
c001bc1c:	83 ec 08             	sub    esp,0x8
c001bc1f:	50                   	push   eax
c001bc20:	68 e0 be 02 c0       	push   0xc002bee0
c001bc25:	e8 26 73 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001bc2a:	83 c4 10             	add    esp,0x10
c001bc2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc32:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc37:	83 c4 08             	add    esp,0x8
c001bc3a:	5b                   	pop    ebx
c001bc3b:	c3                   	ret    
c001bc3c:	83 ec 0c             	sub    esp,0xc
c001bc3f:	68 fe bd 02 c0       	push   0xc002bdfe
c001bc44:	e8 07 73 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001bc49:	eb c5                	jmp    c001bc10 <sysCallClose(regs*)+0x43>
c001bc4b:	83 ec 0c             	sub    esp,0xc
c001bc4e:	68 0c be 02 c0       	push   0xc002be0c
c001bc53:	eb ef                	jmp    c001bc44 <sysCallClose(regs*)+0x77>

c001bc55 <sysCallOpenDir(regs*)>:
c001bc55:	56                   	push   esi
c001bc56:	53                   	push   ebx
c001bc57:	53                   	push   ebx
c001bc58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc5c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc5f:	85 f6                	test   esi,esi
c001bc61:	74 59                	je     c001bcbc <sysCallOpenDir(regs*)+0x67>
c001bc63:	83 ec 0c             	sub    esp,0xc
c001bc66:	68 14 01 00 00       	push   0x114
c001bc6b:	e8 d0 3b ff ff       	call   c000f840 <malloc>
c001bc70:	83 c4 0c             	add    esp,0xc
c001bc73:	89 c6                	mov    esi,eax
c001bc75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc7a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc7d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc80:	56                   	push   esi
c001bc81:	e8 ce 7c ff ff       	call   c0013954 <Directory::Directory(char const*, Process*)>
c001bc86:	83 c4 10             	add    esp,0x10
c001bc89:	85 f6                	test   esi,esi
c001bc8b:	74 2f                	je     c001bcbc <sysCallOpenDir(regs*)+0x67>
c001bc8d:	83 ec 0c             	sub    esp,0xc
c001bc90:	56                   	push   esi
c001bc91:	e8 22 7d ff ff       	call   c00139b8 <Directory::open()>
c001bc96:	83 c4 10             	add    esp,0x10
c001bc99:	85 c0                	test   eax,eax
c001bc9b:	75 1f                	jne    c001bcbc <sysCallOpenDir(regs*)+0x67>
c001bc9d:	83 ec 0c             	sub    esp,0xc
c001bca0:	56                   	push   esi
c001bca1:	e8 b0 5a ff ff       	call   c0011756 <UnixFile::getFileDescriptor()>
c001bca6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bca9:	83 c4 10             	add    esp,0x10
c001bcac:	89 02                	mov    DWORD PTR [edx],eax
c001bcae:	c1 f8 1f             	sar    eax,0x1f
c001bcb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcb4:	31 c0                	xor    eax,eax
c001bcb6:	59                   	pop    ecx
c001bcb7:	31 d2                	xor    edx,edx
c001bcb9:	5b                   	pop    ebx
c001bcba:	5e                   	pop    esi
c001bcbb:	c3                   	ret    
c001bcbc:	59                   	pop    ecx
c001bcbd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcc2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcc7:	5b                   	pop    ebx
c001bcc8:	5e                   	pop    esi
c001bcc9:	c3                   	ret    

c001bcca <sysCallCloseDir(regs*)>:
c001bcca:	53                   	push   ebx
c001bccb:	83 ec 08             	sub    esp,0x8
c001bcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcd5:	83 f8 02             	cmp    eax,0x2
c001bcd8:	76 47                	jbe    c001bd21 <sysCallCloseDir(regs*)+0x57>
c001bcda:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcdf:	77 2f                	ja     c001bd10 <sysCallCloseDir(regs*)+0x46>
c001bce1:	83 ec 0c             	sub    esp,0xc
c001bce4:	50                   	push   eax
c001bce5:	e8 61 5d ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001bcea:	89 c3                	mov    ebx,eax
c001bcec:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcef:	e8 20 7d ff ff       	call   c0013a14 <Directory::close()>
c001bcf4:	83 c4 10             	add    esp,0x10
c001bcf7:	85 db                	test   ebx,ebx
c001bcf9:	74 0c                	je     c001bd07 <sysCallCloseDir(regs*)+0x3d>
c001bcfb:	83 ec 0c             	sub    esp,0xc
c001bcfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd00:	53                   	push   ebx
c001bd01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd04:	83 c4 10             	add    esp,0x10
c001bd07:	31 c0                	xor    eax,eax
c001bd09:	31 d2                	xor    edx,edx
c001bd0b:	83 c4 08             	add    esp,0x8
c001bd0e:	5b                   	pop    ebx
c001bd0f:	c3                   	ret    
c001bd10:	83 ec 08             	sub    esp,0x8
c001bd13:	50                   	push   eax
c001bd14:	68 08 bf 02 c0       	push   0xc002bf08
c001bd19:	e8 32 72 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd26:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2b:	83 c4 08             	add    esp,0x8
c001bd2e:	5b                   	pop    ebx
c001bd2f:	c3                   	ret    

c001bd30 <sysCallMakeDir(regs*)>:
c001bd30:	56                   	push   esi
c001bd31:	53                   	push   ebx
c001bd32:	83 ec 10             	sub    esp,0x10
c001bd35:	68 14 01 00 00       	push   0x114
c001bd3a:	e8 01 3b ff ff       	call   c000f840 <malloc>
c001bd3f:	83 c4 0c             	add    esp,0xc
c001bd42:	89 c3                	mov    ebx,eax
c001bd44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd49:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd50:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd53:	53                   	push   ebx
c001bd54:	e8 fb 7b ff ff       	call   c0013954 <Directory::Directory(char const*, Process*)>
c001bd59:	83 c4 10             	add    esp,0x10
c001bd5c:	85 db                	test   ebx,ebx
c001bd5e:	74 32                	je     c001bd92 <sysCallMakeDir(regs*)+0x62>
c001bd60:	83 ec 0c             	sub    esp,0xc
c001bd63:	53                   	push   ebx
c001bd64:	e8 2f 7e ff ff       	call   c0013b98 <Directory::create()>
c001bd69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd6c:	89 c6                	mov    esi,eax
c001bd6e:	e8 a1 7c ff ff       	call   c0013a14 <Directory::close()>
c001bd73:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd7b:	83 c4 10             	add    esp,0x10
c001bd7e:	31 c0                	xor    eax,eax
c001bd80:	59                   	pop    ecx
c001bd81:	85 f6                	test   esi,esi
c001bd83:	5b                   	pop    ebx
c001bd84:	0f 95 c0             	setne  al
c001bd87:	5e                   	pop    esi
c001bd88:	31 d2                	xor    edx,edx
c001bd8a:	f7 d8                	neg    eax
c001bd8c:	83 d2 00             	adc    edx,0x0
c001bd8f:	f7 da                	neg    edx
c001bd91:	c3                   	ret    
c001bd92:	59                   	pop    ecx
c001bd93:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd98:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd9d:	5b                   	pop    ebx
c001bd9e:	5e                   	pop    esi
c001bd9f:	c3                   	ret    

c001bda0 <sysCallWait(regs*)>:
c001bda0:	83 ec 10             	sub    esp,0x10
c001bda3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bda7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdaa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdad:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdb0:	e8 ce 24 00 00       	call   c001e283 <waitTask(int, int*, int)>
c001bdb5:	83 c4 1c             	add    esp,0x1c
c001bdb8:	99                   	cdq    
c001bdb9:	c3                   	ret    

c001bdba <sysCallNotImpl(regs*)>:
c001bdba:	83 ec 18             	sub    esp,0x18
c001bdbd:	68 1a be 02 c0       	push   0xc002be1a
c001bdc2:	e8 2a e8 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001bdc7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdcc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdd1:	83 c4 1c             	add    esp,0x1c
c001bdd4:	c3                   	ret    

c001bdd5 <sysPanic(regs*)>:
c001bdd5:	83 ec 18             	sub    esp,0x18
c001bdd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bddc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bddf:	e8 0d e8 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001bde4:	c7 04 24 34 be 02 c0 	mov    DWORD PTR [esp],0xc002be34
c001bdeb:	e8 01 e8 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001bdf0:	b8 01 00 00 00       	mov    eax,0x1
c001bdf5:	31 d2                	xor    edx,edx
c001bdf7:	83 c4 1c             	add    esp,0x1c
c001bdfa:	c3                   	ret    

c001bdfb <sysCallRmdir(regs*)>:
c001bdfb:	56                   	push   esi
c001bdfc:	53                   	push   ebx
c001bdfd:	83 ec 20             	sub    esp,0x20
c001be00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be04:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be07:	68 14 01 00 00       	push   0x114
c001be0c:	e8 2f 3a ff ff       	call   c000f840 <malloc>
c001be11:	83 c4 0c             	add    esp,0xc
c001be14:	89 c3                	mov    ebx,eax
c001be16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be1b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be1e:	56                   	push   esi
c001be1f:	53                   	push   ebx
c001be20:	e8 83 76 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001be25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be28:	e8 57 78 ff ff       	call   c0013684 <File::unlink()>
c001be2d:	83 c4 10             	add    esp,0x10
c001be30:	85 db                	test   ebx,ebx
c001be32:	74 14                	je     c001be48 <sysCallRmdir(regs*)+0x4d>
c001be34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be38:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be3a:	83 ec 0c             	sub    esp,0xc
c001be3d:	53                   	push   ebx
c001be3e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be41:	83 c4 10             	add    esp,0x10
c001be44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be48:	85 c0                	test   eax,eax
c001be4a:	0f 95 c0             	setne  al
c001be4d:	31 d2                	xor    edx,edx
c001be4f:	0f b6 c0             	movzx  eax,al
c001be52:	f7 d8                	neg    eax
c001be54:	83 d2 00             	adc    edx,0x0
c001be57:	83 c4 14             	add    esp,0x14
c001be5a:	f7 da                	neg    edx
c001be5c:	5b                   	pop    ebx
c001be5d:	5e                   	pop    esi
c001be5e:	c3                   	ret    

c001be5f <sysCallUnlink(regs*)>:
c001be5f:	56                   	push   esi
c001be60:	53                   	push   ebx
c001be61:	83 ec 20             	sub    esp,0x20
c001be64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be68:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be6b:	68 14 01 00 00       	push   0x114
c001be70:	e8 cb 39 ff ff       	call   c000f840 <malloc>
c001be75:	83 c4 0c             	add    esp,0xc
c001be78:	89 c3                	mov    ebx,eax
c001be7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be7f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be82:	56                   	push   esi
c001be83:	53                   	push   ebx
c001be84:	e8 1f 76 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001be89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be8c:	e8 f3 77 ff ff       	call   c0013684 <File::unlink()>
c001be91:	83 c4 10             	add    esp,0x10
c001be94:	85 db                	test   ebx,ebx
c001be96:	74 14                	je     c001beac <sysCallUnlink(regs*)+0x4d>
c001be98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be9c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be9e:	83 ec 0c             	sub    esp,0xc
c001bea1:	53                   	push   ebx
c001bea2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bea5:	83 c4 10             	add    esp,0x10
c001bea8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beac:	85 c0                	test   eax,eax
c001beae:	0f 95 c0             	setne  al
c001beb1:	31 d2                	xor    edx,edx
c001beb3:	0f b6 c0             	movzx  eax,al
c001beb6:	f7 d8                	neg    eax
c001beb8:	83 d2 00             	adc    edx,0x0
c001bebb:	83 c4 14             	add    esp,0x14
c001bebe:	f7 da                	neg    edx
c001bec0:	5b                   	pop    ebx
c001bec1:	5e                   	pop    esi
c001bec2:	c3                   	ret    

c001bec3 <sysCallGetArgv(regs*)>:
c001bec3:	83 ec 0c             	sub    esp,0xc
c001bec6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001beca:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001becd:	85 c0                	test   eax,eax
c001becf:	78 2b                	js     c001befc <sysCallGetArgv(regs*)+0x39>
c001bed1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bed7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001beda:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bee0:	7d 1a                	jge    c001befc <sysCallGetArgv(regs*)+0x39>
c001bee2:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bee9:	85 c0                	test   eax,eax
c001beeb:	74 17                	je     c001bf04 <sysCallGetArgv(regs*)+0x41>
c001beed:	83 ec 08             	sub    esp,0x8
c001bef0:	50                   	push   eax
c001bef1:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bef4:	e8 3b 49 fe ff       	call   c0000834 <strcpy>
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	31 c0                	xor    eax,eax
c001befe:	31 d2                	xor    edx,edx
c001bf00:	83 c4 0c             	add    esp,0xc
c001bf03:	c3                   	ret    
c001bf04:	b8 01 00 00 00       	mov    eax,0x1
c001bf09:	31 d2                	xor    edx,edx
c001bf0b:	83 c4 0c             	add    esp,0xc
c001bf0e:	c3                   	ret    

c001bf0f <sysCallTTYName(regs*)>:
c001bf0f:	56                   	push   esi
c001bf10:	53                   	push   ebx
c001bf11:	53                   	push   ebx
c001bf12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf16:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf19:	85 c0                	test   eax,eax
c001bf1b:	74 5f                	je     c001bf7c <sysCallTTYName(regs*)+0x6d>
c001bf1d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf20:	83 f8 02             	cmp    eax,0x2
c001bf23:	77 3e                	ja     c001bf63 <sysCallTTYName(regs*)+0x54>
c001bf25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf2d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf33:	85 db                	test   ebx,ebx
c001bf35:	74 45                	je     c001bf7c <sysCallTTYName(regs*)+0x6d>
c001bf37:	83 ec 0c             	sub    esp,0xc
c001bf3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf3c:	53                   	push   ebx
c001bf3d:	ff 10                	call   DWORD PTR [eax]
c001bf3f:	83 c4 10             	add    esp,0x10
c001bf42:	84 c0                	test   al,al
c001bf44:	74 41                	je     c001bf87 <sysCallTTYName(regs*)+0x78>
c001bf46:	83 ec 08             	sub    esp,0x8
c001bf49:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf4f:	53                   	push   ebx
c001bf50:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf53:	e8 dc 48 fe ff       	call   c0000834 <strcpy>
c001bf58:	83 c4 10             	add    esp,0x10
c001bf5b:	31 c0                	xor    eax,eax
c001bf5d:	59                   	pop    ecx
c001bf5e:	31 d2                	xor    edx,edx
c001bf60:	5b                   	pop    ebx
c001bf61:	5e                   	pop    esi
c001bf62:	c3                   	ret    
c001bf63:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf68:	74 bb                	je     c001bf25 <sysCallTTYName(regs*)+0x16>
c001bf6a:	83 ec 0c             	sub    esp,0xc
c001bf6d:	50                   	push   eax
c001bf6e:	e8 d8 5a ff ff       	call   c0011a4b <getFromFileDescriptor(int)>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	89 c3                	mov    ebx,eax
c001bf78:	85 db                	test   ebx,ebx
c001bf7a:	75 bb                	jne    c001bf37 <sysCallTTYName(regs*)+0x28>
c001bf7c:	59                   	pop    ecx
c001bf7d:	b8 01 00 00 00       	mov    eax,0x1
c001bf82:	31 d2                	xor    edx,edx
c001bf84:	5b                   	pop    ebx
c001bf85:	5e                   	pop    esi
c001bf86:	c3                   	ret    
c001bf87:	59                   	pop    ecx
c001bf88:	b8 02 00 00 00       	mov    eax,0x2
c001bf8d:	31 d2                	xor    edx,edx
c001bf8f:	5b                   	pop    ebx
c001bf90:	5e                   	pop    esi
c001bf91:	c3                   	ret    

c001bf92 <sysCallUSleep(regs*)>:
c001bf92:	83 ec 14             	sub    esp,0x14
c001bf95:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf9e:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfa5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfa8:	01 ca                	add    edx,ecx
c001bfaa:	52                   	push   edx
c001bfab:	50                   	push   eax
c001bfac:	e8 6b 23 00 00       	call   c001e31c <nanoSleep(unsigned long long)>
c001bfb1:	31 c0                	xor    eax,eax
c001bfb3:	31 d2                	xor    edx,edx
c001bfb5:	83 c4 1c             	add    esp,0x1c
c001bfb8:	c3                   	ret    

c001bfb9 <sysCallSpawn(regs*)>:
c001bfb9:	56                   	push   esi
c001bfba:	53                   	push   ebx
c001bfbb:	53                   	push   ebx
c001bfbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfc0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfc3:	85 f6                	test   esi,esi
c001bfc5:	75 08                	jne    c001bfcf <sysCallSpawn(regs*)+0x16>
c001bfc7:	59                   	pop    ecx
c001bfc8:	31 c0                	xor    eax,eax
c001bfca:	31 d2                	xor    edx,edx
c001bfcc:	5b                   	pop    ebx
c001bfcd:	5e                   	pop    esi
c001bfce:	c3                   	ret    
c001bfcf:	83 ec 0c             	sub    esp,0xc
c001bfd2:	68 3f 07 00 00       	push   0x73f
c001bfd7:	e8 64 38 ff ff       	call   c000f840 <malloc>
c001bfdc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfdf:	89 c6                	mov    esi,eax
c001bfe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfe6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfe9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfec:	56                   	push   esi
c001bfed:	e8 2a 1a 00 00       	call   c001da1c <Process::Process(char const*, Process*, char**)>
c001bff2:	83 c4 20             	add    esp,0x20
c001bff5:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bffc:	75 c9                	jne    c001bfc7 <sysCallSpawn(regs*)+0xe>
c001bffe:	83 ec 0c             	sub    esp,0xc
c001c001:	56                   	push   esi
c001c002:	e8 db 1f 00 00       	call   c001dfe2 <Process::createUserThread()>
c001c007:	8b 06                	mov    eax,DWORD PTR [esi]
c001c009:	83 c4 10             	add    esp,0x10
c001c00c:	99                   	cdq    
c001c00d:	59                   	pop    ecx
c001c00e:	5b                   	pop    ebx
c001c00f:	5e                   	pop    esi
c001c010:	c3                   	ret    

c001c011 <sysCallGetEnv(regs*)>:
c001c011:	55                   	push   ebp
c001c012:	57                   	push   edi
c001c013:	56                   	push   esi
c001c014:	53                   	push   ebx
c001c015:	83 ec 28             	sub    esp,0x28
c001c018:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c01c:	68 43 be 02 c0       	push   0xc002be43
c001c021:	e8 2a 6f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c026:	5f                   	pop    edi
c001c027:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c02a:	5d                   	pop    ebp
c001c02b:	53                   	push   ebx
c001c02c:	68 72 c1 02 c0       	push   0xc002c172
c001c031:	e8 1a 6f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c036:	58                   	pop    eax
c001c037:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c03a:	5a                   	pop    edx
c001c03b:	57                   	push   edi
c001c03c:	68 4c be 02 c0       	push   0xc002be4c
c001c041:	e8 0a 6f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c046:	59                   	pop    ecx
c001c047:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c04c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c04f:	e8 b9 e4 ff ff       	call   c001a50d <Krnl::getProcessTotalEnvCount(Process*)>
c001c054:	5a                   	pop    edx
c001c055:	89 c5                	mov    ebp,eax
c001c057:	59                   	pop    ecx
c001c058:	50                   	push   eax
c001c059:	68 56 be 02 c0       	push   0xc002be56
c001c05e:	e8 ed 6e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c063:	83 c4 10             	add    esp,0x10
c001c066:	39 ef                	cmp    edi,ebp
c001c068:	7c 15                	jl     c001c07f <sysCallGetEnv(regs*)+0x6e>
c001c06a:	85 db                	test   ebx,ebx
c001c06c:	75 0c                	jne    c001c07a <sysCallGetEnv(regs*)+0x69>
c001c06e:	83 c4 1c             	add    esp,0x1c
c001c071:	31 c0                	xor    eax,eax
c001c073:	5b                   	pop    ebx
c001c074:	31 d2                	xor    edx,edx
c001c076:	5e                   	pop    esi
c001c077:	5f                   	pop    edi
c001c078:	5d                   	pop    ebp
c001c079:	c3                   	ret    
c001c07a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c07d:	eb ef                	jmp    c001c06e <sysCallGetEnv(regs*)+0x5d>
c001c07f:	83 ec 0c             	sub    esp,0xc
c001c082:	68 62 be 02 c0       	push   0xc002be62
c001c087:	e8 c4 6e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c08c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c090:	83 c4 0c             	add    esp,0xc
c001c093:	57                   	push   edi
c001c094:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c09a:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c09d:	50                   	push   eax
c001c09e:	e8 8a e4 ff ff       	call   c001a52d <Krnl::getProcessEnvPair(Process*, int)>
c001c0a3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0ab:	68 f1 c1 02 c0       	push   0xc002c1f1
c001c0b0:	e8 9b 6e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c0b5:	83 c4 10             	add    esp,0x10
c001c0b8:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0bb:	85 f6                	test   esi,esi
c001c0bd:	75 47                	jne    c001c106 <sysCallGetEnv(regs*)+0xf5>
c001c0bf:	83 ec 0c             	sub    esp,0xc
c001c0c2:	55                   	push   ebp
c001c0c3:	e8 cc 46 fe ff       	call   c0000794 <strlen>
c001c0c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0cb:	89 c3                	mov    ebx,eax
c001c0cd:	e8 c2 46 fe ff       	call   c0000794 <strlen>
c001c0d2:	5a                   	pop    edx
c001c0d3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0d7:	59                   	pop    ecx
c001c0d8:	50                   	push   eax
c001c0d9:	68 65 be 02 c0       	push   0xc002be65
c001c0de:	e8 6d 6e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c0e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0e6:	e8 a9 46 fe ff       	call   c0000794 <strlen>
c001c0eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0ee:	89 c3                	mov    ebx,eax
c001c0f0:	e8 9f 46 fe ff       	call   c0000794 <strlen>
c001c0f5:	83 c4 10             	add    esp,0x10
c001c0f8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0fc:	83 c4 1c             	add    esp,0x1c
c001c0ff:	31 d2                	xor    edx,edx
c001c101:	5b                   	pop    ebx
c001c102:	5e                   	pop    esi
c001c103:	5f                   	pop    edi
c001c104:	5d                   	pop    ebp
c001c105:	c3                   	ret    
c001c106:	83 ec 0c             	sub    esp,0xc
c001c109:	68 0b c2 02 c0       	push   0xc002c20b
c001c10e:	e8 3d 6e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c113:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c116:	58                   	pop    eax
c001c117:	5a                   	pop    edx
c001c118:	55                   	push   ebp
c001c119:	53                   	push   ebx
c001c11a:	e8 15 47 fe ff       	call   c0000834 <strcpy>
c001c11f:	59                   	pop    ecx
c001c120:	5e                   	pop    esi
c001c121:	68 6f be 02 c0       	push   0xc002be6f
c001c126:	53                   	push   ebx
c001c127:	e8 48 48 fe ff       	call   c0000974 <strcat>
c001c12c:	5d                   	pop    ebp
c001c12d:	58                   	pop    eax
c001c12e:	57                   	push   edi
c001c12f:	53                   	push   ebx
c001c130:	e8 3f 48 fe ff       	call   c0000974 <strcat>
c001c135:	c7 04 24 25 c2 02 c0 	mov    DWORD PTR [esp],0xc002c225
c001c13c:	e8 0f 6e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c141:	83 c4 10             	add    esp,0x10
c001c144:	e9 25 ff ff ff       	jmp    c001c06e <sysCallGetEnv(regs*)+0x5d>

c001c149 <sysAppSettings(regs*)>:
c001c149:	53                   	push   ebx
c001c14a:	83 ec 08             	sub    esp,0x8
c001c14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c151:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c154:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c15a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c15f:	66 3d c0 09          	cmp    ax,0x9c0
c001c163:	75 2f                	jne    c001c194 <sysAppSettings(regs*)+0x4b>
c001c165:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c16b:	83 e0 1f             	and    eax,0x1f
c001c16e:	3c 01                	cmp    al,0x1
c001c170:	74 2e                	je     c001c1a0 <sysAppSettings(regs*)+0x57>
c001c172:	3c 07                	cmp    al,0x7
c001c174:	0f 84 bd 00 00 00    	je     c001c237 <sysAppSettings(regs*)+0xee>
c001c17a:	84 c0                	test   al,al
c001c17c:	0f 84 dc 00 00 00    	je     c001c25e <sysAppSettings(regs*)+0x115>
c001c182:	3c 08                	cmp    al,0x8
c001c184:	74 6d                	je     c001c1f3 <sysAppSettings(regs*)+0xaa>
c001c186:	0f b6 c0             	movzx  eax,al
c001c189:	83 c4 08             	add    esp,0x8
c001c18c:	05 e8 03 00 00       	add    eax,0x3e8
c001c191:	5b                   	pop    ebx
c001c192:	99                   	cdq    
c001c193:	c3                   	ret    
c001c194:	b8 01 00 00 00       	mov    eax,0x1
c001c199:	31 d2                	xor    edx,edx
c001c19b:	83 c4 08             	add    esp,0x8
c001c19e:	5b                   	pop    ebx
c001c19f:	c3                   	ret    
c001c1a0:	51                   	push   ecx
c001c1a1:	68 00 01 00 00       	push   0x100
c001c1a6:	6a 00                	push   0x0
c001c1a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b0:	83 c0 0c             	add    eax,0xc
c001c1b3:	50                   	push   eax
c001c1b4:	e8 bf 45 fe ff       	call   c0000778 <memset>
c001c1b9:	83 c4 0c             	add    esp,0xc
c001c1bc:	68 ff 00 00 00       	push   0xff
c001c1c1:	53                   	push   ebx
c001c1c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ca:	83 c0 0c             	add    eax,0xc
c001c1cd:	50                   	push   eax
c001c1ce:	e8 71 45 fe ff       	call   c0000744 <memcpy>
c001c1d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d8:	5b                   	pop    ebx
c001c1d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1dc:	5a                   	pop    edx
c001c1dd:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1e0:	52                   	push   edx
c001c1e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1e7:	e8 da 49 ff ff       	call   c0010bc6 <VgaText::setTitle(char*)>
c001c1ec:	83 c4 10             	add    esp,0x10
c001c1ef:	31 c0                	xor    eax,eax
c001c1f1:	eb a6                	jmp    c001c199 <sysAppSettings(regs*)+0x50>
c001c1f3:	83 ec 08             	sub    esp,0x8
c001c1f6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c1fc:	83 e0 0f             	and    eax,0xf
c001c1ff:	50                   	push   eax
c001c200:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c205:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c208:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c20e:	e8 a3 49 ff ff       	call   c0010bb6 <VgaText::setTitleColour(VgaColour)>
c001c213:	58                   	pop    eax
c001c214:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c21a:	5a                   	pop    edx
c001c21b:	c1 e8 04             	shr    eax,0x4
c001c21e:	83 e0 0f             	and    eax,0xf
c001c221:	50                   	push   eax
c001c222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c227:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c22a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c230:	e8 71 49 ff ff       	call   c0010ba6 <VgaText::setTitleTextColour(VgaColour)>
c001c235:	eb b5                	jmp    c001c1ec <sysAppSettings(regs*)+0xa3>
c001c237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c23c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c23f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c245:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c24b:	c0 e8 06             	shr    al,0x6
c001c24e:	83 e0 01             	and    eax,0x1
c001c251:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c257:	31 c0                	xor    eax,eax
c001c259:	e9 3b ff ff ff       	jmp    c001c199 <sysAppSettings(regs*)+0x50>
c001c25e:	b8 02 00 00 00       	mov    eax,0x2
c001c263:	e9 31 ff ff ff       	jmp    c001c199 <sysAppSettings(regs*)+0x50>

c001c268 <sysSetFatAttrib(regs*)>:
c001c268:	57                   	push   edi
c001c269:	56                   	push   esi
c001c26a:	53                   	push   ebx
c001c26b:	83 ec 1c             	sub    esp,0x1c
c001c26e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c272:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c275:	68 14 01 00 00       	push   0x114
c001c27a:	e8 c1 35 ff ff       	call   c000f840 <malloc>
c001c27f:	83 c4 0c             	add    esp,0xc
c001c282:	89 c3                	mov    ebx,eax
c001c284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c289:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c28c:	57                   	push   edi
c001c28d:	53                   	push   ebx
c001c28e:	e8 15 72 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001c293:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c296:	83 c4 0c             	add    esp,0xc
c001c299:	0f b6 d4             	movzx  edx,ah
c001c29c:	0f b6 c0             	movzx  eax,al
c001c29f:	52                   	push   edx
c001c2a0:	50                   	push   eax
c001c2a1:	53                   	push   ebx
c001c2a2:	e8 77 74 ff ff       	call   c001371e <File::chfatattr(unsigned char, unsigned char)>
c001c2a7:	83 c4 10             	add    esp,0x10
c001c2aa:	85 db                	test   ebx,ebx
c001c2ac:	74 14                	je     c001c2c2 <sysSetFatAttrib(regs*)+0x5a>
c001c2ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2b4:	83 ec 0c             	sub    esp,0xc
c001c2b7:	53                   	push   ebx
c001c2b8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2bb:	83 c4 10             	add    esp,0x10
c001c2be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2c2:	85 c0                	test   eax,eax
c001c2c4:	0f 95 c0             	setne  al
c001c2c7:	31 d2                	xor    edx,edx
c001c2c9:	0f b6 c0             	movzx  eax,al
c001c2cc:	f7 d8                	neg    eax
c001c2ce:	83 d2 00             	adc    edx,0x0
c001c2d1:	83 c4 10             	add    esp,0x10
c001c2d4:	f7 da                	neg    edx
c001c2d6:	5b                   	pop    ebx
c001c2d7:	5e                   	pop    esi
c001c2d8:	5f                   	pop    edi
c001c2d9:	c3                   	ret    

c001c2da <sysPipe(regs*)>:
c001c2da:	57                   	push   edi
c001c2db:	56                   	push   esi
c001c2dc:	53                   	push   ebx
c001c2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e1:	83 ec 0c             	sub    esp,0xc
c001c2e4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2e7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c2ea:	6a 20                	push   0x20
c001c2ec:	e8 4f 35 ff ff       	call   c000f840 <malloc>
c001c2f1:	89 c3                	mov    ebx,eax
c001c2f3:	58                   	pop    eax
c001c2f4:	5a                   	pop    edx
c001c2f5:	68 00 50 00 00       	push   0x5000
c001c2fa:	53                   	push   ebx
c001c2fb:	e8 f6 41 ff ff       	call   c00104f6 <Pipe::Pipe(int)>
c001c300:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c303:	e8 4e 54 ff ff       	call   c0011756 <UnixFile::getFileDescriptor()>
c001c308:	89 07                	mov    DWORD PTR [edi],eax
c001c30a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c30d:	e8 44 54 ff ff       	call   c0011756 <UnixFile::getFileDescriptor()>
c001c312:	83 c4 10             	add    esp,0x10
c001c315:	89 06                	mov    DWORD PTR [esi],eax
c001c317:	31 d2                	xor    edx,edx
c001c319:	5b                   	pop    ebx
c001c31a:	31 c0                	xor    eax,eax
c001c31c:	5e                   	pop    esi
c001c31d:	5f                   	pop    edi
c001c31e:	c3                   	ret    

c001c31f <sysGetUnixTime(regs*)>:
c001c31f:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001c324:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c32a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c32e:	e9 5f 7b ff ff       	jmp    c0013e92 <Clock::timeInSecondsLocal()>

c001c333 <string_ends_with(char const*, char const*)>:
c001c333:	57                   	push   edi
c001c334:	56                   	push   esi
c001c335:	53                   	push   ebx
c001c336:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c33a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c33e:	83 ec 0c             	sub    esp,0xc
c001c341:	53                   	push   ebx
c001c342:	e8 4d 44 fe ff       	call   c0000794 <strlen>
c001c347:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c34a:	89 c6                	mov    esi,eax
c001c34c:	e8 43 44 fe ff       	call   c0000794 <strlen>
c001c351:	83 c4 10             	add    esp,0x10
c001c354:	39 c6                	cmp    esi,eax
c001c356:	7d 06                	jge    c001c35e <string_ends_with(char const*, char const*)+0x2b>
c001c358:	5b                   	pop    ebx
c001c359:	31 c0                	xor    eax,eax
c001c35b:	5e                   	pop    esi
c001c35c:	5f                   	pop    edi
c001c35d:	c3                   	ret    
c001c35e:	83 ec 08             	sub    esp,0x8
c001c361:	29 c6                	sub    esi,eax
c001c363:	57                   	push   edi
c001c364:	01 f3                	add    ebx,esi
c001c366:	53                   	push   ebx
c001c367:	e8 54 45 fe ff       	call   c00008c0 <strcmp>
c001c36c:	83 c4 10             	add    esp,0x10
c001c36f:	85 c0                	test   eax,eax
c001c371:	5b                   	pop    ebx
c001c372:	0f 94 c0             	sete   al
c001c375:	5e                   	pop    esi
c001c376:	0f b6 c0             	movzx  eax,al
c001c379:	5f                   	pop    edi
c001c37a:	c3                   	ret    

c001c37b <sysCallOpen(regs*)>:
c001c37b:	56                   	push   esi
c001c37c:	53                   	push   ebx
c001c37d:	81 ec 04 01 00 00    	sub    esp,0x104
c001c383:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c38a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c38d:	85 c9                	test   ecx,ecx
c001c38f:	0f 84 b3 00 00 00    	je     c001c448 <sysCallOpen(regs*)+0xcd>
c001c395:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c398:	85 c0                	test   eax,eax
c001c39a:	0f 84 a8 00 00 00    	je     c001c448 <sysCallOpen(regs*)+0xcd>
c001c3a0:	52                   	push   edx
c001c3a1:	68 71 be 02 c0       	push   0xc002be71
c001c3a6:	50                   	push   eax
c001c3a7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3ab:	56                   	push   esi
c001c3ac:	e8 4d 6f ff ff       	call   c00132fe <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3b1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3b4:	e8 db 43 fe ff       	call   c0000794 <strlen>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	48                   	dec    eax
c001c3bd:	74 1d                	je     c001c3dc <sysCallOpen(regs*)+0x61>
c001c3bf:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3c2:	eb 0f                	jmp    c001c3d3 <sysCallOpen(regs*)+0x58>
c001c3c4:	80 fa 3a             	cmp    dl,0x3a
c001c3c7:	74 0f                	je     c001c3d8 <sysCallOpen(regs*)+0x5d>
c001c3c9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3cd:	48                   	dec    eax
c001c3ce:	74 0c                	je     c001c3dc <sysCallOpen(regs*)+0x61>
c001c3d0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3d3:	80 fa 2e             	cmp    dl,0x2e
c001c3d6:	75 ec                	jne    c001c3c4 <sysCallOpen(regs*)+0x49>
c001c3d8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3dc:	83 ec 08             	sub    esp,0x8
c001c3df:	68 75 be 02 c0       	push   0xc002be75
c001c3e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3e7:	e8 47 ff ff ff       	call   c001c333 <string_ends_with(char const*, char const*)>
c001c3ec:	83 c4 10             	add    esp,0x10
c001c3ef:	85 c0                	test   eax,eax
c001c3f1:	75 17                	jne    c001c40a <sysCallOpen(regs*)+0x8f>
c001c3f3:	83 ec 08             	sub    esp,0x8
c001c3f6:	68 96 be 02 c0       	push   0xc002be96
c001c3fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3fe:	e8 30 ff ff ff       	call   c001c333 <string_ends_with(char const*, char const*)>
c001c403:	83 c4 10             	add    esp,0x10
c001c406:	85 c0                	test   eax,eax
c001c408:	74 51                	je     c001c45b <sysCallOpen(regs*)+0xe0>
c001c40a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c40d:	83 ec 08             	sub    esp,0x8
c001c410:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c416:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c41d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c420:	ff 30                	push   DWORD PTR [eax]
c001c422:	68 7a be 02 c0       	push   0xc002be7a
c001c427:	e8 24 6b ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c42c:	c7 04 24 89 be 02 c0 	mov    DWORD PTR [esp],0xc002be89
c001c433:	e8 18 6b ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	81 c4 04 01 00 00    	add    esp,0x104
c001c441:	31 c0                	xor    eax,eax
c001c443:	31 d2                	xor    edx,edx
c001c445:	5b                   	pop    ebx
c001c446:	5e                   	pop    esi
c001c447:	c3                   	ret    
c001c448:	81 c4 04 01 00 00    	add    esp,0x104
c001c44e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c453:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c458:	5b                   	pop    ebx
c001c459:	5e                   	pop    esi
c001c45a:	c3                   	ret    
c001c45b:	83 ec 08             	sub    esp,0x8
c001c45e:	68 76 be 02 c0       	push   0xc002be76
c001c463:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c466:	e8 55 44 fe ff       	call   c00008c0 <strcmp>
c001c46b:	83 c4 10             	add    esp,0x10
c001c46e:	85 c0                	test   eax,eax
c001c470:	74 98                	je     c001c40a <sysCallOpen(regs*)+0x8f>
c001c472:	83 ec 08             	sub    esp,0x8
c001c475:	68 75 be 02 c0       	push   0xc002be75
c001c47a:	56                   	push   esi
c001c47b:	e8 b3 fe ff ff       	call   c001c333 <string_ends_with(char const*, char const*)>
c001c480:	83 c4 10             	add    esp,0x10
c001c483:	85 c0                	test   eax,eax
c001c485:	75 83                	jne    c001c40a <sysCallOpen(regs*)+0x8f>
c001c487:	83 ec 08             	sub    esp,0x8
c001c48a:	68 9b be 02 c0       	push   0xc002be9b
c001c48f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c492:	e8 9c fe ff ff       	call   c001c333 <string_ends_with(char const*, char const*)>
c001c497:	83 c4 10             	add    esp,0x10
c001c49a:	85 c0                	test   eax,eax
c001c49c:	0f 85 d9 00 00 00    	jne    c001c57b <sysCallOpen(regs*)+0x200>
c001c4a2:	83 ec 08             	sub    esp,0x8
c001c4a5:	68 a0 be 02 c0       	push   0xc002bea0
c001c4aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ad:	e8 81 fe ff ff       	call   c001c333 <string_ends_with(char const*, char const*)>
c001c4b2:	83 c4 10             	add    esp,0x10
c001c4b5:	85 c0                	test   eax,eax
c001c4b7:	0f 85 be 00 00 00    	jne    c001c57b <sysCallOpen(regs*)+0x200>
c001c4bd:	83 ec 08             	sub    esp,0x8
c001c4c0:	68 9c be 02 c0       	push   0xc002be9c
c001c4c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c8:	e8 f3 43 fe ff       	call   c00008c0 <strcmp>
c001c4cd:	83 c4 10             	add    esp,0x10
c001c4d0:	85 c0                	test   eax,eax
c001c4d2:	0f 84 a3 00 00 00    	je     c001c57b <sysCallOpen(regs*)+0x200>
c001c4d8:	83 ec 08             	sub    esp,0x8
c001c4db:	68 9b be 02 c0       	push   0xc002be9b
c001c4e0:	56                   	push   esi
c001c4e1:	e8 4d fe ff ff       	call   c001c333 <string_ends_with(char const*, char const*)>
c001c4e6:	83 c4 10             	add    esp,0x10
c001c4e9:	85 c0                	test   eax,eax
c001c4eb:	0f 85 8a 00 00 00    	jne    c001c57b <sysCallOpen(regs*)+0x200>
c001c4f1:	83 ec 0c             	sub    esp,0xc
c001c4f4:	68 14 01 00 00       	push   0x114
c001c4f9:	e8 42 33 ff ff       	call   c000f840 <malloc>
c001c4fe:	83 c4 0c             	add    esp,0xc
c001c501:	89 c6                	mov    esi,eax
c001c503:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c508:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c50b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c50e:	56                   	push   esi
c001c50f:	e8 94 6f ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001c514:	83 c4 10             	add    esp,0x10
c001c517:	85 f6                	test   esi,esi
c001c519:	0f 84 29 ff ff ff    	je     c001c448 <sysCallOpen(regs*)+0xcd>
c001c51f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c522:	0f b6 c2             	movzx  eax,dl
c001c525:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c528:	89 d0                	mov    eax,edx
c001c52a:	83 e0 01             	and    eax,0x1
c001c52d:	f6 c2 02             	test   dl,0x2
c001c530:	74 03                	je     c001c535 <sysCallOpen(regs*)+0x1ba>
c001c532:	83 c8 02             	or     eax,0x2
c001c535:	f6 c2 04             	test   dl,0x4
c001c538:	74 03                	je     c001c53d <sysCallOpen(regs*)+0x1c2>
c001c53a:	83 c8 04             	or     eax,0x4
c001c53d:	f6 c2 08             	test   dl,0x8
c001c540:	74 03                	je     c001c545 <sysCallOpen(regs*)+0x1ca>
c001c542:	83 c8 0a             	or     eax,0xa
c001c545:	83 e2 10             	and    edx,0x10
c001c548:	74 03                	je     c001c54d <sysCallOpen(regs*)+0x1d2>
c001c54a:	83 c8 12             	or     eax,0x12
c001c54d:	83 ec 08             	sub    esp,0x8
c001c550:	50                   	push   eax
c001c551:	56                   	push   esi
c001c552:	e8 b5 6f ff ff       	call   c001350c <File::open(FileOpenMode)>
c001c557:	83 c4 10             	add    esp,0x10
c001c55a:	85 c0                	test   eax,eax
c001c55c:	0f 85 e6 fe ff ff    	jne    c001c448 <sysCallOpen(regs*)+0xcd>
c001c562:	83 ec 0c             	sub    esp,0xc
c001c565:	56                   	push   esi
c001c566:	e8 eb 51 ff ff       	call   c0011756 <UnixFile::getFileDescriptor()>
c001c56b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c56e:	89 02                	mov    DWORD PTR [edx],eax
c001c570:	c1 f8 1f             	sar    eax,0x1f
c001c573:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c576:	e9 bd fe ff ff       	jmp    c001c438 <sysCallOpen(regs*)+0xbd>
c001c57b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c57e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c584:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c58b:	e9 ab fe ff ff       	jmp    c001c43b <sysCallOpen(regs*)+0xc0>

c001c590 <Sys::loadSyscalls()>:
c001c590:	c7 05 40 0f 03 c0 9d b6 01 c0 	mov    DWORD PTR ds:0xc0030f40,0xc001b69d
c001c59a:	c7 05 44 0f 03 c0 86 b2 01 c0 	mov    DWORD PTR ds:0xc0030f44,0xc001b286
c001c5a4:	c7 05 48 0f 03 c0 f0 b3 01 c0 	mov    DWORD PTR ds:0xc0030f48,0xc001b3f0
c001c5ae:	c7 05 4c 0f 03 c0 d3 b5 01 c0 	mov    DWORD PTR ds:0xc0030f4c,0xc001b5d3
c001c5b8:	c7 05 50 0f 03 c0 88 b3 01 c0 	mov    DWORD PTR ds:0xc0030f50,0xc001b388
c001c5c2:	c7 05 54 0f 03 c0 bd b2 01 c0 	mov    DWORD PTR ds:0xc0030f54,0xc001b2bd
c001c5cc:	c7 05 58 0f 03 c0 9e b2 01 c0 	mov    DWORD PTR ds:0xc0030f58,0xc001b29e
c001c5d6:	c7 05 5c 0f 03 c0 45 b4 01 c0 	mov    DWORD PTR ds:0xc0030f5c,0xc001b445
c001c5e0:	c7 05 64 0f 03 c0 cd bb 01 c0 	mov    DWORD PTR ds:0xc0030f64,0xc001bbcd
c001c5ea:	c7 05 60 0f 03 c0 7b c3 01 c0 	mov    DWORD PTR ds:0xc0030f60,0xc001c37b
c001c5f4:	c7 05 68 0f 03 c0 55 bc 01 c0 	mov    DWORD PTR ds:0xc0030f68,0xc001bc55
c001c5fe:	c7 05 6c 0f 03 c0 bc b8 01 c0 	mov    DWORD PTR ds:0xc0030f6c,0xc001b8bc
c001c608:	c7 05 70 0f 03 c0 d8 b6 01 c0 	mov    DWORD PTR ds:0xc0030f70,0xc001b6d8
c001c612:	c7 05 74 0f 03 c0 dd b6 01 c0 	mov    DWORD PTR ds:0xc0030f74,0xc001b6dd
c001c61c:	c7 05 78 0f 03 c0 30 bd 01 c0 	mov    DWORD PTR ds:0xc0030f78,0xc001bd30
c001c626:	c7 05 7c 0f 03 c0 ca bc 01 c0 	mov    DWORD PTR ds:0xc0030f7c,0xc001bcca
c001c630:	c7 05 80 0f 03 c0 a4 b9 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001b9a4
c001c63a:	c7 05 84 0f 03 c0 0d ba 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001ba0d
c001c644:	c7 05 88 0f 03 c0 8a ba 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001ba8a
c001c64e:	c7 05 8c 0f 03 c0 e2 b6 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b6e2
c001c658:	c7 05 90 0f 03 c0 a0 bd 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001bda0
c001c662:	c7 05 94 0f 03 c0 ba bd 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001bdba
c001c66c:	c7 05 98 0f 03 c0 ba bd 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001bdba
c001c676:	c7 05 9c 0f 03 c0 fb bd 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001bdfb
c001c680:	c7 05 a0 0f 03 c0 5f be 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001be5f
c001c68a:	c7 05 a4 0f 03 c0 8e b8 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001b88e
c001c694:	c7 05 a8 0f 03 c0 c3 be 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001bec3
c001c69e:	c7 05 ac 0f 03 c0 4b b8 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b84b
c001c6a8:	c7 05 b0 0f 03 c0 0f bf 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001bf0f
c001c6b2:	c7 05 b4 0f 03 c0 4a b9 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001b94a
c001c6bc:	c7 05 b8 0f 03 c0 92 bf 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001bf92
c001c6c6:	c7 05 bc 0f 03 c0 0d bb 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001bb0d
c001c6d0:	c7 05 c0 0f 03 c0 b9 bf 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001bfb9
c001c6da:	c7 05 c4 0f 03 c0 11 c0 01 c0 	mov    DWORD PTR ds:0xc0030fc4,0xc001c011
c001c6e4:	c7 05 c8 0f 03 c0 49 c1 01 c0 	mov    DWORD PTR ds:0xc0030fc8,0xc001c149
c001c6ee:	c7 05 cc 0f 03 c0 ec b6 01 c0 	mov    DWORD PTR ds:0xc0030fcc,0xc001b6ec
c001c6f8:	c7 05 d0 0f 03 c0 56 b7 01 c0 	mov    DWORD PTR ds:0xc0030fd0,0xc001b756
c001c702:	c7 05 d4 0f 03 c0 9c b7 01 c0 	mov    DWORD PTR ds:0xc0030fd4,0xc001b79c
c001c70c:	c7 05 d8 0f 03 c0 68 c2 01 c0 	mov    DWORD PTR ds:0xc0030fd8,0xc001c268
c001c716:	c7 05 dc 0f 03 c0 d5 bd 01 c0 	mov    DWORD PTR ds:0xc0030fdc,0xc001bdd5
c001c720:	c7 05 e0 0f 03 c0 ed b7 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001b7ed
c001c72a:	c7 05 e4 0f 03 c0 da c2 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001c2da
c001c734:	c7 05 e8 0f 03 c0 1f c3 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001c31f
c001c73e:	c7 05 ec 0f 03 c0 e0 b2 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b2e0
c001c748:	c7 05 f0 0f 03 c0 61 b4 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001b461
c001c752:	c7 05 f4 0f 03 c0 89 b5 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b589
c001c75c:	c7 05 f8 0f 03 c0 50 b2 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001b250
c001c766:	c7 05 fc 0f 03 c0 3b b6 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001b63b
c001c770:	c7 05 00 10 03 c0 c9 b2 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001b2c9
c001c77a:	c3                   	ret    

c001c77b <Sys::systemCall(regs*, void*)>:
c001c77b:	53                   	push   ebx
c001c77c:	83 ec 08             	sub    esp,0x8
c001c77f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c783:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c786:	83 f8 7f             	cmp    eax,0x7f
c001c789:	77 16                	ja     c001c7a1 <Sys::systemCall(regs*, void*)+0x26>
c001c78b:	8b 14 85 40 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0c0]
c001c792:	85 d2                	test   edx,edx
c001c794:	74 0b                	je     c001c7a1 <Sys::systemCall(regs*, void*)+0x26>
c001c796:	83 ec 0c             	sub    esp,0xc
c001c799:	53                   	push   ebx
c001c79a:	ff d2                	call   edx
c001c79c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c79f:	eb 0d                	jmp    c001c7ae <Sys::systemCall(regs*, void*)+0x33>
c001c7a1:	52                   	push   edx
c001c7a2:	52                   	push   edx
c001c7a3:	50                   	push   eax
c001c7a4:	68 a5 be 02 c0       	push   0xc002bea5
c001c7a9:	e8 a2 67 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7b6:	31 d2                	xor    edx,edx
c001c7b8:	83 c4 08             	add    esp,0x8
c001c7bb:	5b                   	pop    ebx
c001c7bc:	c3                   	ret    

c001c7bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7bd:	55                   	push   ebp
c001c7be:	57                   	push   edi
c001c7bf:	56                   	push   esi
c001c7c0:	53                   	push   ebx
c001c7c1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7c7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7ce:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7d5:	85 c0                	test   eax,eax
c001c7d7:	0f 95 c1             	setne  cl
c001c7da:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7e2:	0f 94 c2             	sete   dl
c001c7e5:	84 d1                	test   cl,dl
c001c7e7:	74 23                	je     c001c80c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7e9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c7ef:	74 1b                	je     c001c80c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c7f7:	89 da                	mov    edx,ebx
c001c7f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c7ff:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c805:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c80c:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c813:	05 ff 0f 00 00       	add    eax,0xfff
c001c818:	83 ec 0c             	sub    esp,0xc
c001c81b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c81f:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c825:	c1 e8 0c             	shr    eax,0xc
c001c828:	89 ef                	mov    edi,ebp
c001c82a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c82e:	c1 ef 0c             	shr    edi,0xc
c001c831:	6a 01                	push   0x1
c001c833:	e8 69 53 ff ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c001c838:	89 c6                	mov    esi,eax
c001c83a:	58                   	pop    eax
c001c83b:	5a                   	pop    edx
c001c83c:	57                   	push   edi
c001c83d:	68 2b bf 02 c0       	push   0xc002bf2b
c001c842:	e8 09 67 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c847:	59                   	pop    ecx
c001c848:	58                   	pop    eax
c001c849:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c84d:	68 3d bf 02 c0       	push   0xc002bf3d
c001c852:	e8 f9 66 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c860:	0f 86 24 01 00 00    	jbe    c001c98a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c866:	c1 e7 0c             	shl    edi,0xc
c001c869:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c86c:	89 df                	mov    edi,ebx
c001c86e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c872:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c879:	01 dd                	add    ebp,ebx
c001c87b:	29 fd                	sub    ebp,edi
c001c87d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c881:	0f 84 01 01 00 00    	je     c001c988 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c887:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c88d:	76 05                	jbe    c001c894 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c88f:	bd 00 10 00 00       	mov    ebp,0x1000
c001c894:	83 ec 0c             	sub    esp,0xc
c001c897:	31 d2                	xor    edx,edx
c001c899:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8a6:	50                   	push   eax
c001c8a7:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8ab:	50                   	push   eax
c001c8ac:	52                   	push   edx
c001c8ad:	55                   	push   ebp
c001c8ae:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8b8:	83 c4 20             	add    esp,0x20
c001c8bb:	85 c0                	test   eax,eax
c001c8bd:	74 0a                	je     c001c8c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8bf:	53                   	push   ebx
c001c8c0:	53                   	push   ebx
c001c8c1:	50                   	push   eax
c001c8c2:	68 4f bf 02 c0       	push   0xc002bf4f
c001c8c7:	eb 0f                	jmp    c001c8d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8c9:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8cd:	74 20                	je     c001c8ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8cf:	51                   	push   ecx
c001c8d0:	51                   	push   ecx
c001c8d1:	6a 00                	push   0x0
c001c8d3:	68 7a bf 02 c0       	push   0xc002bf7a
c001c8d8:	e8 73 66 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001c8dd:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8e0:	e8 2c 57 ff ff       	call   c0012011 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	31 c0                	xor    eax,eax
c001c8ea:	e9 55 01 00 00       	jmp    c001ca44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c8ef:	e8 d8 14 00 00       	call   c001ddcc <lockScheduler()>
c001c8f4:	e8 e9 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c8f9:	6a 07                	push   0x7
c001c8fb:	89 c5                	mov    ebp,eax
c001c8fd:	56                   	push   esi
c001c8fe:	50                   	push   eax
c001c8ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c904:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c907:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c90d:	e8 66 5a ff ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c912:	83 c4 0c             	add    esp,0xc
c001c915:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c91c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c922:	6a 00                	push   0x0
c001c924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c929:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c92c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c932:	e8 ab 58 ff ff       	call   c00121e2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c937:	58                   	pop    eax
c001c938:	5a                   	pop    edx
c001c939:	68 07 0c 00 00       	push   0xc07
c001c93e:	57                   	push   edi
c001c93f:	81 c7 00 10 00 00    	add    edi,0x1000
c001c945:	55                   	push   ebp
c001c946:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c94d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c953:	6a 00                	push   0x0
c001c955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c95a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c963:	e8 ca 5d ff ff       	call   c0012732 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c968:	83 c4 1c             	add    esp,0x1c
c001c96b:	68 00 10 00 00       	push   0x1000
c001c970:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c974:	50                   	push   eax
c001c975:	56                   	push   esi
c001c976:	e8 c9 3d fe ff       	call   c0000744 <memcpy>
c001c97b:	e8 4e 14 00 00       	call   c001ddce <unlockScheduler()>
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	e9 ea fe ff ff       	jmp    c001c872 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c988:	89 fb                	mov    ebx,edi
c001c98a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c992:	0f 86 9e 00 00 00    	jbe    c001ca36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c998:	e8 2f 14 00 00       	call   c001ddcc <lockScheduler()>
c001c99d:	51                   	push   ecx
c001c99e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9a5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ab:	6a 00                	push   0x0
c001c9ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9bb:	e8 22 58 ff ff       	call   c00121e2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9c4:	c1 e7 0c             	shl    edi,0xc
c001c9c7:	01 df                	add    edi,ebx
c001c9c9:	83 c4 10             	add    esp,0x10
c001c9cc:	39 fb                	cmp    ebx,edi
c001c9ce:	74 61                	je     c001ca31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9d0:	e8 0d 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c9d5:	6a 07                	push   0x7
c001c9d7:	89 c5                	mov    ebp,eax
c001c9d9:	56                   	push   esi
c001c9da:	50                   	push   eax
c001c9db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9e3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9e9:	e8 8a 59 ff ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9ee:	58                   	pop    eax
c001c9ef:	5a                   	pop    edx
c001c9f0:	68 07 0c 00 00       	push   0xc07
c001c9f5:	53                   	push   ebx
c001c9f6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c9fc:	55                   	push   ebp
c001c9fd:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca04:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca0a:	6a 00                	push   0x0
c001ca0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca14:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca1a:	e8 13 5d ff ff       	call   c0012732 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca1f:	83 c4 1c             	add    esp,0x1c
c001ca22:	68 00 10 00 00       	push   0x1000
c001ca27:	6a 00                	push   0x0
c001ca29:	56                   	push   esi
c001ca2a:	e8 49 3d fe ff       	call   c0000778 <memset>
c001ca2f:	eb 98                	jmp    c001c9c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca31:	e8 98 13 00 00       	call   c001ddce <unlockScheduler()>
c001ca36:	83 ec 0c             	sub    esp,0xc
c001ca39:	56                   	push   esi
c001ca3a:	e8 d2 55 ff ff       	call   c0012011 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca3f:	83 c4 10             	add    esp,0x10
c001ca42:	b0 01                	mov    al,0x1
c001ca44:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca4a:	5b                   	pop    ebx
c001ca4b:	5e                   	pop    esi
c001ca4c:	5f                   	pop    edi
c001ca4d:	5d                   	pop    ebp
c001ca4e:	c3                   	ret    

c001ca4f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca4f:	55                   	push   ebp
c001ca50:	57                   	push   edi
c001ca51:	56                   	push   esi
c001ca52:	53                   	push   ebx
c001ca53:	83 ec 48             	sub    esp,0x48
c001ca56:	68 14 01 00 00       	push   0x114
c001ca5b:	e8 e0 2d ff ff       	call   c000f840 <malloc>
c001ca60:	83 c4 0c             	add    esp,0xc
c001ca63:	89 c6                	mov    esi,eax
c001ca65:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca69:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca6d:	50                   	push   eax
c001ca6e:	e8 35 6a ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001ca73:	58                   	pop    eax
c001ca74:	5a                   	pop    edx
c001ca75:	6a 01                	push   0x1
c001ca77:	56                   	push   esi
c001ca78:	e8 8f 6a ff ff       	call   c001350c <File::open(FileOpenMode)>
c001ca7d:	83 c4 10             	add    esp,0x10
c001ca80:	85 c0                	test   eax,eax
c001ca82:	0f 85 47 01 00 00    	jne    c001cbcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca88:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca90:	83 ec 0c             	sub    esp,0xc
c001ca93:	6a 34                	push   0x34
c001ca95:	e8 a6 2d ff ff       	call   c000f840 <malloc>
c001ca9a:	89 c3                	mov    ebx,eax
c001ca9c:	58                   	pop    eax
c001ca9d:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca9f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001caa3:	57                   	push   edi
c001caa4:	53                   	push   ebx
c001caa5:	6a 00                	push   0x0
c001caa7:	6a 34                	push   0x34
c001caa9:	56                   	push   esi
c001caaa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001caad:	83 c4 20             	add    esp,0x20
c001cab0:	85 c0                	test   eax,eax
c001cab2:	0f 85 17 01 00 00    	jne    c001cbcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cab8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cabe:	0f 85 0b 01 00 00    	jne    c001cbcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cac7:	85 c0                	test   eax,eax
c001cac9:	0f 84 00 01 00 00    	je     c001cbcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cacf:	31 d2                	xor    edx,edx
c001cad1:	55                   	push   ebp
c001cad2:	52                   	push   edx
c001cad3:	50                   	push   eax
c001cad4:	56                   	push   esi
c001cad5:	e8 f0 6a ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	85 c0                	test   eax,eax
c001cadf:	0f 85 ea 00 00 00    	jne    c001cbcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae5:	83 ec 0c             	sub    esp,0xc
c001cae8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001caeb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001caef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001caf3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001caf7:	0f af c2             	imul   eax,edx
c001cafa:	50                   	push   eax
c001cafb:	e8 40 2d ff ff       	call   c000f840 <malloc>
c001cb00:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb06:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb0d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb11:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb15:	0f af c2             	imul   eax,edx
c001cb18:	99                   	cdq    
c001cb19:	52                   	push   edx
c001cb1a:	50                   	push   eax
c001cb1b:	56                   	push   esi
c001cb1c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb1f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb22:	83 c4 20             	add    esp,0x20
c001cb25:	85 c0                	test   eax,eax
c001cb27:	0f 84 a2 00 00 00    	je     c001cbcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb2d:	31 d2                	xor    edx,edx
c001cb2f:	51                   	push   ecx
c001cb30:	52                   	push   edx
c001cb31:	50                   	push   eax
c001cb32:	56                   	push   esi
c001cb33:	e8 92 6a ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001cb38:	83 c4 10             	add    esp,0x10
c001cb3b:	85 c0                	test   eax,eax
c001cb3d:	0f 85 8c 00 00 00    	jne    c001cbcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb43:	83 ec 0c             	sub    esp,0xc
c001cb46:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb4a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb4e:	31 ed                	xor    ebp,ebp
c001cb50:	0f af c2             	imul   eax,edx
c001cb53:	50                   	push   eax
c001cb54:	e8 e7 2c ff ff       	call   c000f840 <malloc>
c001cb59:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb5f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb66:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb6a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb6e:	0f af c2             	imul   eax,edx
c001cb71:	99                   	cdq    
c001cb72:	52                   	push   edx
c001cb73:	50                   	push   eax
c001cb74:	56                   	push   esi
c001cb75:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb78:	83 c4 20             	add    esp,0x20
c001cb7b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb83:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb87:	0f 86 80 00 00 00    	jbe    c001cc0d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb8d:	0f b7 fd             	movzx  edi,bp
c001cb90:	c1 e7 05             	shl    edi,0x5
c001cb93:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb97:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb9a:	75 6b                	jne    c001cc07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb9c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cba3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cba6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbaa:	52                   	push   edx
c001cbab:	31 d2                	xor    edx,edx
c001cbad:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbb0:	52                   	push   edx
c001cbb1:	50                   	push   eax
c001cbb2:	56                   	push   esi
c001cbb3:	e8 12 6a ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001cbb8:	83 c4 10             	add    esp,0x10
c001cbbb:	85 c0                	test   eax,eax
c001cbbd:	74 17                	je     c001cbd6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbbf:	83 ec 0c             	sub    esp,0xc
c001cbc2:	68 a6 bf 02 c0       	push   0xc002bfa6
c001cbc7:	e8 84 63 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001cbcc:	83 c4 10             	add    esp,0x10
c001cbcf:	31 c0                	xor    eax,eax
c001cbd1:	e9 87 00 00 00       	jmp    c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbd6:	83 ec 0c             	sub    esp,0xc
c001cbd9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbdc:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbdf:	50                   	push   eax
c001cbe0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbe8:	56                   	push   esi
c001cbe9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cbed:	e8 cb fb ff ff       	call   c001c7bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cbf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbf6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cbfa:	83 c4 20             	add    esp,0x20
c001cbfd:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc01:	73 04                	jae    c001cc07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc07:	45                   	inc    ebp
c001cc08:	e9 76 ff ff ff       	jmp    c001cb83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc0d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc19:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc1f:	83 ec 0c             	sub    esp,0xc
c001cc22:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc28:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc2d:	05 00 10 00 00       	add    eax,0x1000
c001cc32:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc39:	e8 12 2c ff ff       	call   c000f850 <free>
c001cc3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc41:	e8 0a 2c ff ff       	call   c000f850 <free>
c001cc46:	58                   	pop    eax
c001cc47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc4b:	e8 00 2c ff ff       	call   c000f850 <free>
c001cc50:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc53:	e8 12 69 ff ff       	call   c001356a <File::close()>
c001cc58:	83 c4 10             	add    esp,0x10
c001cc5b:	b0 01                	mov    al,0x1
c001cc5d:	83 c4 3c             	add    esp,0x3c
c001cc60:	5b                   	pop    ebx
c001cc61:	5e                   	pop    esi
c001cc62:	5f                   	pop    edi
c001cc63:	5d                   	pop    ebp
c001cc64:	c3                   	ret    

c001cc65 <Thr::runtimeReferenceHelper()>:
c001cc65:	83 ec 18             	sub    esp,0x18
c001cc68:	68 ae bf 02 c0       	push   0xc002bfae
c001cc6d:	e8 de 62 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001cc72:	fa                   	cli    
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	eb fe                	jmp    c001cc76 <Thr::runtimeReferenceHelper()+0x11>

c001cc78 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc78:	57                   	push   edi
c001cc79:	56                   	push   esi
c001cc7a:	53                   	push   ebx
c001cc7b:	31 db                	xor    ebx,ebx
c001cc7d:	39 1d e0 18 03 c0    	cmp    DWORD PTR ds:0xc00318e0,ebx
c001cc83:	7e 3c                	jle    c001ccc1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc85:	8b 34 9d 60 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce7a0]
c001cc8c:	31 ff                	xor    edi,edi
c001cc8e:	39 3c 9d 60 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce8a0],edi
c001cc95:	7e 27                	jle    c001ccbe <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc97:	50                   	push   eax
c001cc98:	50                   	push   eax
c001cc99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc9d:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc9f:	03 04 9d e0 17 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce820]
c001cca6:	50                   	push   eax
c001cca7:	e8 14 3c fe ff       	call   c00008c0 <strcmp>
c001ccac:	83 c4 10             	add    esp,0x10
c001ccaf:	85 c0                	test   eax,eax
c001ccb1:	75 05                	jne    c001ccb8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccb3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccb6:	eb 0b                	jmp    c001ccc3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccb8:	83 c6 10             	add    esi,0x10
c001ccbb:	47                   	inc    edi
c001ccbc:	eb d0                	jmp    c001cc8e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccbe:	43                   	inc    ebx
c001ccbf:	eb bc                	jmp    c001cc7d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccc1:	31 c0                	xor    eax,eax
c001ccc3:	5b                   	pop    ebx
c001ccc4:	5e                   	pop    esi
c001ccc5:	5f                   	pop    edi
c001ccc6:	c3                   	ret    

c001ccc7 <Thr::loadKernelSymbolTable(char const*)>:
c001ccc7:	55                   	push   ebp
c001ccc8:	57                   	push   edi
c001ccc9:	56                   	push   esi
c001ccca:	53                   	push   ebx
c001cccb:	83 ec 68             	sub    esp,0x68
c001ccce:	8b 35 34 19 03 c0    	mov    esi,DWORD PTR ds:0xc0031934
c001ccd4:	68 14 01 00 00       	push   0x114
c001ccd9:	e8 62 2b ff ff       	call   c000f840 <malloc>
c001ccde:	83 c4 0c             	add    esp,0xc
c001cce1:	89 c3                	mov    ebx,eax
c001cce3:	56                   	push   esi
c001cce4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cce8:	50                   	push   eax
c001cce9:	e8 ba 67 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001ccee:	5e                   	pop    esi
c001ccef:	5f                   	pop    edi
c001ccf0:	6a 01                	push   0x1
c001ccf2:	53                   	push   ebx
c001ccf3:	e8 14 68 ff ff       	call   c001350c <File::open(FileOpenMode)>
c001ccf8:	83 c4 10             	add    esp,0x10
c001ccfb:	85 c0                	test   eax,eax
c001ccfd:	74 0a                	je     c001cd09 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ccff:	83 ec 0c             	sub    esp,0xc
c001cd02:	68 d0 bf 02 c0       	push   0xc002bfd0
c001cd07:	eb 34                	jmp    c001cd3d <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd09:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd11:	83 ec 0c             	sub    esp,0xc
c001cd14:	6a 34                	push   0x34
c001cd16:	e8 25 2b ff ff       	call   c000f840 <malloc>
c001cd1b:	59                   	pop    ecx
c001cd1c:	89 c7                	mov    edi,eax
c001cd1e:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd24:	56                   	push   esi
c001cd25:	57                   	push   edi
c001cd26:	6a 00                	push   0x0
c001cd28:	6a 34                	push   0x34
c001cd2a:	53                   	push   ebx
c001cd2b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd2e:	83 c4 20             	add    esp,0x20
c001cd31:	85 c0                	test   eax,eax
c001cd33:	74 17                	je     c001cd4c <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd35:	83 ec 0c             	sub    esp,0xc
c001cd38:	68 e7 bf 02 c0       	push   0xc002bfe7
c001cd3d:	e8 af d8 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001cd42:	83 c4 10             	add    esp,0x10
c001cd45:	31 c0                	xor    eax,eax
c001cd47:	e9 31 02 00 00       	jmp    c001cf7d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd4c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd52:	75 e1                	jne    c001cd35 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd54:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd57:	85 c0                	test   eax,eax
c001cd59:	74 da                	je     c001cd35 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd5b:	52                   	push   edx
c001cd5c:	31 d2                	xor    edx,edx
c001cd5e:	52                   	push   edx
c001cd5f:	50                   	push   eax
c001cd60:	53                   	push   ebx
c001cd61:	e8 64 68 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001cd66:	83 c4 10             	add    esp,0x10
c001cd69:	85 c0                	test   eax,eax
c001cd6b:	75 c8                	jne    c001cd35 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd6d:	83 ec 0c             	sub    esp,0xc
c001cd70:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd74:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd78:	31 ed                	xor    ebp,ebp
c001cd7a:	0f af c2             	imul   eax,edx
c001cd7d:	50                   	push   eax
c001cd7e:	e8 bd 2a ff ff       	call   c000f840 <malloc>
c001cd83:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd89:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd90:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd94:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd98:	0f af c2             	imul   eax,edx
c001cd9b:	99                   	cdq    
c001cd9c:	52                   	push   edx
c001cd9d:	50                   	push   eax
c001cd9e:	53                   	push   ebx
c001cd9f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cda2:	83 c4 20             	add    esp,0x20
c001cda5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdb5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdc5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cdc9:	0f 86 aa 00 00 00    	jbe    c001ce79 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cdcf:	0f b7 f5             	movzx  esi,bp
c001cdd2:	6b f6 28             	imul   esi,esi,0x28
c001cdd5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cdd9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cddc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cde0:	50                   	push   eax
c001cde1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cde5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cde9:	8b 16                	mov    edx,DWORD PTR [esi]
c001cdeb:	6b c0 28             	imul   eax,eax,0x28
c001cdee:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cdf2:	89 d0                	mov    eax,edx
c001cdf4:	31 d2                	xor    edx,edx
c001cdf6:	52                   	push   edx
c001cdf7:	50                   	push   eax
c001cdf8:	53                   	push   ebx
c001cdf9:	e8 cc 67 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001cdfe:	83 c4 0c             	add    esp,0xc
c001ce01:	6a 20                	push   0x20
c001ce03:	6a 00                	push   0x0
c001ce05:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce09:	52                   	push   edx
c001ce0a:	e8 69 39 fe ff       	call   c0000778 <memset>
c001ce0f:	58                   	pop    eax
c001ce10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce12:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce16:	51                   	push   ecx
c001ce17:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce1b:	52                   	push   edx
c001ce1c:	6a 00                	push   0x0
c001ce1e:	6a 1f                	push   0x1f
c001ce20:	53                   	push   ebx
c001ce21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce24:	83 c4 18             	add    esp,0x18
c001ce27:	68 fe bf 02 c0       	push   0xc002bffe
c001ce2c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce30:	52                   	push   edx
c001ce31:	e8 8a 3a fe ff       	call   c00008c0 <strcmp>
c001ce36:	83 c4 10             	add    esp,0x10
c001ce39:	85 c0                	test   eax,eax
c001ce3b:	75 0f                	jne    c001ce4c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce3d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce4c:	50                   	push   eax
c001ce4d:	50                   	push   eax
c001ce4e:	68 06 c0 02 c0       	push   0xc002c006
c001ce53:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce57:	50                   	push   eax
c001ce58:	e8 63 3a fe ff       	call   c00008c0 <strcmp>
c001ce5d:	83 c4 10             	add    esp,0x10
c001ce60:	85 c0                	test   eax,eax
c001ce62:	75 0f                	jne    c001ce73 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce64:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce73:	45                   	inc    ebp
c001ce74:	e9 4c ff ff ff       	jmp    c001cdc5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce79:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce7e:	75 10                	jne    c001ce90 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce80:	83 ec 0c             	sub    esp,0xc
c001ce83:	68 0e c0 02 c0       	push   0xc002c00e
c001ce88:	e8 64 d7 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001ce8d:	83 c4 10             	add    esp,0x10
c001ce90:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce95:	75 10                	jne    c001cea7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce97:	83 ec 0c             	sub    esp,0xc
c001ce9a:	68 0e c0 02 c0       	push   0xc002c00e
c001ce9f:	e8 4d d7 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001cea4:	83 c4 10             	add    esp,0x10
c001cea7:	31 d2                	xor    edx,edx
c001cea9:	50                   	push   eax
c001ceaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceae:	52                   	push   edx
c001ceaf:	50                   	push   eax
c001ceb0:	53                   	push   ebx
c001ceb1:	e8 14 67 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001ceb6:	5a                   	pop    edx
c001ceb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cebb:	e8 80 29 ff ff       	call   c000f840 <malloc>
c001cec0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cec4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cec8:	31 c9                	xor    ecx,ecx
c001ceca:	5e                   	pop    esi
c001cecb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cecd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ced1:	55                   	push   ebp
c001ced2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced6:	51                   	push   ecx
c001ced7:	52                   	push   edx
c001ced8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cedc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cee0:	53                   	push   ebx
c001cee1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cee4:	83 c4 14             	add    esp,0x14
c001cee7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ceeb:	e8 50 29 ff ff       	call   c000f840 <malloc>
c001cef0:	89 c6                	mov    esi,eax
c001cef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cef4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cef7:	56                   	push   esi
c001cef8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cefc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf00:	51                   	push   ecx
c001cf01:	52                   	push   edx
c001cf02:	53                   	push   ebx
c001cf03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf0a:	8b 15 e0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318e0
c001cf10:	83 c4 1c             	add    esp,0x1c
c001cf13:	c1 e8 04             	shr    eax,0x4
c001cf16:	89 04 95 60 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce8a0],eax
c001cf1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf21:	31 d2                	xor    edx,edx
c001cf23:	52                   	push   edx
c001cf24:	50                   	push   eax
c001cf25:	53                   	push   ebx
c001cf26:	e8 9f 66 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001cf2b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf2d:	31 d2                	xor    edx,edx
c001cf2f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf32:	56                   	push   esi
c001cf33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf37:	52                   	push   edx
c001cf38:	50                   	push   eax
c001cf39:	53                   	push   ebx
c001cf3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf3d:	83 c4 14             	add    esp,0x14
c001cf40:	53                   	push   ebx
c001cf41:	e8 24 66 ff ff       	call   c001356a <File::close()>
c001cf46:	5d                   	pop    ebp
c001cf47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf4b:	e8 00 29 ff ff       	call   c000f850 <free>
c001cf50:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf53:	e8 f8 28 ff ff       	call   c000f850 <free>
c001cf58:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c001cf5d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf61:	8d 50 01             	lea    edx,[eax+0x1]
c001cf64:	89 0c 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],ecx
c001cf6b:	89 34 85 e0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce820],esi
c001cf72:	89 15 e0 18 03 c0    	mov    DWORD PTR ds:0xc00318e0,edx
c001cf78:	83 c4 10             	add    esp,0x10
c001cf7b:	b0 01                	mov    al,0x1
c001cf7d:	83 c4 5c             	add    esp,0x5c
c001cf80:	5b                   	pop    ebx
c001cf81:	5e                   	pop    esi
c001cf82:	5f                   	pop    edi
c001cf83:	5d                   	pop    ebp
c001cf84:	c3                   	ret    

c001cf85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf85:	55                   	push   ebp
c001cf86:	57                   	push   edi
c001cf87:	56                   	push   esi
c001cf88:	53                   	push   ebx
c001cf89:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf8f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf96:	8b 1d 34 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031934
c001cf9c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfa0:	68 14 01 00 00       	push   0x114
c001cfa5:	e8 96 28 ff ff       	call   c000f840 <malloc>
c001cfaa:	83 c4 0c             	add    esp,0xc
c001cfad:	89 c5                	mov    ebp,eax
c001cfaf:	53                   	push   ebx
c001cfb0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfb7:	50                   	push   eax
c001cfb8:	e8 eb 64 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001cfbd:	5e                   	pop    esi
c001cfbe:	5f                   	pop    edi
c001cfbf:	6a 01                	push   0x1
c001cfc1:	55                   	push   ebp
c001cfc2:	e8 45 65 ff ff       	call   c001350c <File::open(FileOpenMode)>
c001cfc7:	83 c4 10             	add    esp,0x10
c001cfca:	85 c0                	test   eax,eax
c001cfcc:	0f 85 8d 06 00 00    	jne    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfd2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfda:	83 ec 0c             	sub    esp,0xc
c001cfdd:	6a 34                	push   0x34
c001cfdf:	e8 5c 28 ff ff       	call   c000f840 <malloc>
c001cfe4:	5b                   	pop    ebx
c001cfe5:	89 c7                	mov    edi,eax
c001cfe7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfeb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfee:	53                   	push   ebx
c001cfef:	57                   	push   edi
c001cff0:	6a 00                	push   0x0
c001cff2:	6a 34                	push   0x34
c001cff4:	55                   	push   ebp
c001cff5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cff8:	83 c4 20             	add    esp,0x20
c001cffb:	85 c0                	test   eax,eax
c001cffd:	0f 85 5c 06 00 00    	jne    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d003:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d009:	0f 85 50 06 00 00    	jne    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d00f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d012:	85 c0                	test   eax,eax
c001d014:	0f 84 45 06 00 00    	je     c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d01a:	31 d2                	xor    edx,edx
c001d01c:	51                   	push   ecx
c001d01d:	52                   	push   edx
c001d01e:	50                   	push   eax
c001d01f:	55                   	push   ebp
c001d020:	e8 a5 65 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001d025:	83 c4 10             	add    esp,0x10
c001d028:	85 c0                	test   eax,eax
c001d02a:	0f 85 2f 06 00 00    	jne    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d030:	83 ec 0c             	sub    esp,0xc
c001d033:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d036:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d03a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d03e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d042:	0f af c2             	imul   eax,edx
c001d045:	50                   	push   eax
c001d046:	e8 f5 27 ff ff       	call   c000f840 <malloc>
c001d04b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d052:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d055:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d059:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d05d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d061:	0f af c2             	imul   eax,edx
c001d064:	99                   	cdq    
c001d065:	52                   	push   edx
c001d066:	50                   	push   eax
c001d067:	55                   	push   ebp
c001d068:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d06b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d06e:	83 c4 20             	add    esp,0x20
c001d071:	85 c0                	test   eax,eax
c001d073:	0f 84 e6 05 00 00    	je     c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d079:	52                   	push   edx
c001d07a:	31 d2                	xor    edx,edx
c001d07c:	52                   	push   edx
c001d07d:	50                   	push   eax
c001d07e:	55                   	push   ebp
c001d07f:	e8 46 65 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001d084:	83 c4 10             	add    esp,0x10
c001d087:	85 c0                	test   eax,eax
c001d089:	0f 85 d0 05 00 00    	jne    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d08f:	83 ec 0c             	sub    esp,0xc
c001d092:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d096:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d09a:	31 f6                	xor    esi,esi
c001d09c:	0f af c2             	imul   eax,edx
c001d09f:	50                   	push   eax
c001d0a0:	e8 9b 27 ff ff       	call   c000f840 <malloc>
c001d0a5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0b3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0b7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0bb:	0f af c2             	imul   eax,edx
c001d0be:	99                   	cdq    
c001d0bf:	52                   	push   edx
c001d0c0:	50                   	push   eax
c001d0c1:	55                   	push   ebp
c001d0c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0c5:	83 c4 20             	add    esp,0x20
c001d0c8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0cc:	0f 86 8a 00 00 00    	jbe    c001d15c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0d2:	0f b7 de             	movzx  ebx,si
c001d0d5:	c1 e3 05             	shl    ebx,0x5
c001d0d8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0dc:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0df:	75 75                	jne    c001d156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0e4:	31 d2                	xor    edx,edx
c001d0e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0f1:	50                   	push   eax
c001d0f2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d0f5:	52                   	push   edx
c001d0f6:	50                   	push   eax
c001d0f7:	55                   	push   ebp
c001d0f8:	e8 cd 64 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001d0fd:	83 c4 10             	add    esp,0x10
c001d100:	85 c0                	test   eax,eax
c001d102:	0f 85 57 05 00 00    	jne    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d108:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d10f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d112:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d116:	31 d2                	xor    edx,edx
c001d118:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d11c:	83 ec 0c             	sub    esp,0xc
c001d11f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d123:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d12a:	50                   	push   eax
c001d12b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d12f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d133:	52                   	push   edx
c001d134:	50                   	push   eax
c001d135:	55                   	push   ebp
c001d136:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d139:	83 c4 1c             	add    esp,0x1c
c001d13c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d13f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d142:	50                   	push   eax
c001d143:	6a 00                	push   0x0
c001d145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d149:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d14d:	50                   	push   eax
c001d14e:	e8 25 36 fe ff       	call   c0000778 <memset>
c001d153:	83 c4 10             	add    esp,0x10
c001d156:	46                   	inc    esi
c001d157:	e9 6c ff ff ff       	jmp    c001d0c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d15c:	53                   	push   ebx
c001d15d:	31 db                	xor    ebx,ebx
c001d15f:	68 00 01 00 00       	push   0x100
c001d164:	6a 00                	push   0x0
c001d166:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d16a:	50                   	push   eax
c001d16b:	e8 08 36 fe ff       	call   c0000778 <memset>
c001d170:	83 c4 0c             	add    esp,0xc
c001d173:	68 00 01 00 00       	push   0x100
c001d178:	6a 00                	push   0x0
c001d17a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d181:	50                   	push   eax
c001d182:	e8 f1 35 fe ff       	call   c0000778 <memset>
c001d187:	83 c4 10             	add    esp,0x10
c001d18a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d192:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d19a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1a2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1aa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1b2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1b6:	0f 86 30 01 00 00    	jbe    c001d2ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1bc:	0f b7 f3             	movzx  esi,bx
c001d1bf:	6b f6 28             	imul   esi,esi,0x28
c001d1c2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1c6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1cd:	52                   	push   edx
c001d1ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1d2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1d6:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1d8:	6b d2 28             	imul   edx,edx,0x28
c001d1db:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1df:	31 d2                	xor    edx,edx
c001d1e1:	52                   	push   edx
c001d1e2:	50                   	push   eax
c001d1e3:	55                   	push   ebp
c001d1e4:	e8 e1 63 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001d1e9:	83 c4 0c             	add    esp,0xc
c001d1ec:	6a 20                	push   0x20
c001d1ee:	6a 00                	push   0x0
c001d1f0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1f7:	51                   	push   ecx
c001d1f8:	e8 7b 35 fe ff       	call   c0000778 <memset>
c001d1fd:	59                   	pop    ecx
c001d1fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d201:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d205:	52                   	push   edx
c001d206:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d20d:	51                   	push   ecx
c001d20e:	6a 00                	push   0x0
c001d210:	6a 1f                	push   0x1f
c001d212:	55                   	push   ebp
c001d213:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d216:	83 c4 1c             	add    esp,0x1c
c001d219:	6a 09                	push   0x9
c001d21b:	68 28 c0 02 c0       	push   0xc002c028
c001d220:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d227:	51                   	push   ecx
c001d228:	e8 13 34 fe ff       	call   c0000640 <memcmp>
c001d22d:	83 c4 10             	add    esp,0x10
c001d230:	85 c0                	test   eax,eax
c001d232:	75 21                	jne    c001d255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d238:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d23c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d240:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d244:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d247:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d24e:	89 d0                	mov    eax,edx
c001d250:	40                   	inc    eax
c001d251:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d255:	50                   	push   eax
c001d256:	6a 09                	push   0x9
c001d258:	68 32 c0 02 c0       	push   0xc002c032
c001d25d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d264:	50                   	push   eax
c001d265:	e8 d6 33 fe ff       	call   c0000640 <memcmp>
c001d26a:	83 c4 10             	add    esp,0x10
c001d26d:	85 c0                	test   eax,eax
c001d26f:	75 21                	jne    c001d292 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d275:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d279:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d27d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d281:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d284:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d28b:	89 d0                	mov    eax,edx
c001d28d:	40                   	inc    eax
c001d28e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d292:	50                   	push   eax
c001d293:	50                   	push   eax
c001d294:	68 fe bf 02 c0       	push   0xc002bffe
c001d299:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2a0:	50                   	push   eax
c001d2a1:	e8 1a 36 fe ff       	call   c00008c0 <strcmp>
c001d2a6:	83 c4 10             	add    esp,0x10
c001d2a9:	85 c0                	test   eax,eax
c001d2ab:	75 0f                	jne    c001d2bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2bc:	50                   	push   eax
c001d2bd:	50                   	push   eax
c001d2be:	68 06 c0 02 c0       	push   0xc002c006
c001d2c3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ca:	50                   	push   eax
c001d2cb:	e8 f0 35 fe ff       	call   c00008c0 <strcmp>
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	85 c0                	test   eax,eax
c001d2d5:	75 0f                	jne    c001d2e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2e6:	43                   	inc    ebx
c001d2e7:	e9 c6 fe ff ff       	jmp    c001d1b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2ec:	31 d2                	xor    edx,edx
c001d2ee:	50                   	push   eax
c001d2ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2f3:	52                   	push   edx
c001d2f4:	50                   	push   eax
c001d2f5:	55                   	push   ebp
c001d2f6:	e8 cf 62 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001d2fb:	58                   	pop    eax
c001d2fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d300:	e8 3b 25 ff ff       	call   c000f840 <malloc>
c001d305:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d30c:	31 d2                	xor    edx,edx
c001d30e:	58                   	pop    eax
c001d30f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d313:	53                   	push   ebx
c001d314:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d318:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d31c:	52                   	push   edx
c001d31d:	50                   	push   eax
c001d31e:	55                   	push   ebp
c001d31f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d322:	83 c4 14             	add    esp,0x14
c001d325:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d329:	e8 12 25 ff ff       	call   c000f840 <malloc>
c001d32e:	31 d2                	xor    edx,edx
c001d330:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d334:	83 c4 0c             	add    esp,0xc
c001d337:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d33b:	52                   	push   edx
c001d33c:	50                   	push   eax
c001d33d:	55                   	push   ebp
c001d33e:	e8 87 62 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001d343:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d346:	31 d2                	xor    edx,edx
c001d348:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d34b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d34f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d353:	52                   	push   edx
c001d354:	50                   	push   eax
c001d355:	55                   	push   ebp
c001d356:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d359:	83 c4 20             	add    esp,0x20
c001d35c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d364:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d368:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d36c:	0f 84 f1 02 00 00    	je     c001d663 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d372:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d379:	31 d2                	xor    edx,edx
c001d37b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d37f:	c1 e8 03             	shr    eax,0x3
c001d382:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d386:	51                   	push   ecx
c001d387:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d38b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d38f:	52                   	push   edx
c001d390:	50                   	push   eax
c001d391:	55                   	push   ebp
c001d392:	e8 33 62 ff ff       	call   c00135ca <File::seek(unsigned long long)>
c001d397:	5b                   	pop    ebx
c001d398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3a3:	e8 98 24 ff ff       	call   c000f840 <malloc>
c001d3a8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3af:	31 d2                	xor    edx,edx
c001d3b1:	5e                   	pop    esi
c001d3b2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3b6:	50                   	push   eax
c001d3b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3bf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3c6:	52                   	push   edx
c001d3c7:	50                   	push   eax
c001d3c8:	55                   	push   ebp
c001d3c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3cc:	83 c4 20             	add    esp,0x20
c001d3cf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3db:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3df:	0f 8d 62 02 00 00    	jge    c001d647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3ed:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d3f2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d3f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3fd:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d401:	89 d8                	mov    eax,ebx
c001d403:	c1 e8 08             	shr    eax,0x8
c001d406:	89 c6                	mov    esi,eax
c001d408:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d40c:	c1 e6 04             	shl    esi,0x4
c001d40f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d413:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d416:	85 d2                	test   edx,edx
c001d418:	0f 85 bf 00 00 00    	jne    c001d4dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d41e:	83 ec 0c             	sub    esp,0xc
c001d421:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d425:	03 06                	add    eax,DWORD PTR [esi]
c001d427:	50                   	push   eax
c001d428:	e8 4b f8 ff ff       	call   c001cc78 <Thr::getAddressOfKernelSymbol(char const*)>
c001d42d:	83 c4 10             	add    esp,0x10
c001d430:	89 c2                	mov    edx,eax
c001d432:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d437:	85 c0                	test   eax,eax
c001d439:	0f 85 9e 00 00 00    	jne    c001d4dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d43f:	83 ec 0c             	sub    esp,0xc
c001d442:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d446:	03 06                	add    eax,DWORD PTR [esi]
c001d448:	50                   	push   eax
c001d449:	e8 a7 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d44e:	83 c4 10             	add    esp,0x10
c001d451:	89 c2                	mov    edx,eax
c001d453:	85 c0                	test   eax,eax
c001d455:	0f 85 82 00 00 00    	jne    c001d4dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d45b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d45f:	50                   	push   eax
c001d460:	50                   	push   eax
c001d461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d465:	03 06                	add    eax,DWORD PTR [esi]
c001d467:	50                   	push   eax
c001d468:	68 3c c0 02 c0       	push   0xc002c03c
c001d46d:	e8 de 5a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001d472:	58                   	pop    eax
c001d473:	5a                   	pop    edx
c001d474:	68 56 c0 02 c0       	push   0xc002c056
c001d479:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d480:	50                   	push   eax
c001d481:	e8 ae 33 fe ff       	call   c0000834 <strcpy>
c001d486:	59                   	pop    ecx
c001d487:	58                   	pop    eax
c001d488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48c:	03 06                	add    eax,DWORD PTR [esi]
c001d48e:	50                   	push   eax
c001d48f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d496:	50                   	push   eax
c001d497:	e8 d8 34 fe ff       	call   c0000974 <strcat>
c001d49c:	58                   	pop    eax
c001d49d:	5a                   	pop    edx
c001d49e:	68 ec c0 02 c0       	push   0xc002c0ec
c001d4a3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4aa:	50                   	push   eax
c001d4ab:	e8 c4 34 fe ff       	call   c0000974 <strcat>
c001d4b0:	83 c4 10             	add    esp,0x10
c001d4b3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4b8:	0f 84 43 01 00 00    	je     c001d601 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4be:	83 ec 0c             	sub    esp,0xc
c001d4c1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4c8:	50                   	push   eax
c001d4c9:	e8 23 d1 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d4ce:	83 c4 10             	add    esp,0x10
c001d4d1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4d5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4d9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4dd:	80 fb 01             	cmp    bl,0x1
c001d4e0:	75 7d                	jne    c001d55f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4e2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4e9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4ed:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4f1:	01 ce                	add    esi,ecx
c001d4f3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4f9:	0f 94 c0             	sete   al
c001d4fc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d502:	0f 94 c3             	sete   bl
c001d505:	09 c3                	or     ebx,eax
c001d507:	8b 06                	mov    eax,DWORD PTR [esi]
c001d509:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d50e:	74 36                	je     c001d546 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d510:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d513:	84 db                	test   bl,bl
c001d515:	75 0a                	jne    c001d521 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d517:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d51b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d51f:	76 37                	jbe    c001d558 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d521:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d525:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d52a:	0f 84 d1 00 00 00    	je     c001d601 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	68 6d c0 02 c0       	push   0xc002c06d
c001d538:	e8 b4 d0 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d53d:	83 c4 10             	add    esp,0x10
c001d540:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d544:	eb 12                	jmp    c001d558 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d546:	01 c1                	add    ecx,eax
c001d548:	84 db                	test   bl,bl
c001d54a:	75 0c                	jne    c001d558 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d54c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d550:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d554:	77 02                	ja     c001d558 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d556:	01 d1                	add    ecx,edx
c001d558:	89 0e                	mov    DWORD PTR [esi],ecx
c001d55a:	e9 df 00 00 00       	jmp    c001d63e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d55f:	80 fb 02             	cmp    bl,0x2
c001d562:	75 71                	jne    c001d5d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d564:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d56b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d56f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d573:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d579:	74 15                	je     c001d590 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d57b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d581:	74 0d                	je     c001d590 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d583:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d587:	83 e8 04             	sub    eax,0x4
c001d58a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d58e:	76 1f                	jbe    c001d5af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d590:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d594:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d599:	74 66                	je     c001d601 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d59b:	83 ec 0c             	sub    esp,0xc
c001d59e:	68 89 c0 02 c0       	push   0xc002c089
c001d5a3:	e8 49 d0 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d5a8:	83 c4 10             	add    esp,0x10
c001d5ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5af:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5b1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5b6:	74 13                	je     c001d5cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5b8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5bc:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5c3:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5c7:	01 c8                	add    eax,ecx
c001d5c9:	eb 04                	jmp    c001d5cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5cb:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5cf:	01 c2                	add    edx,eax
c001d5d1:	89 16                	mov    DWORD PTR [esi],edx
c001d5d3:	eb 69                	jmp    c001d63e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5d5:	0f b6 db             	movzx  ebx,bl
c001d5d8:	50                   	push   eax
c001d5d9:	50                   	push   eax
c001d5da:	53                   	push   ebx
c001d5db:	68 a5 c0 02 c0       	push   0xc002c0a5
c001d5e0:	e8 6b 59 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001d5e5:	83 c4 10             	add    esp,0x10
c001d5e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ed:	74 12                	je     c001d601 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5ef:	83 ec 0c             	sub    esp,0xc
c001d5f2:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d5f7:	e8 f5 cf ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d5fc:	83 c4 10             	add    esp,0x10
c001d5ff:	eb 3d                	jmp    c001d63e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d601:	83 ec 0c             	sub    esp,0xc
c001d604:	55                   	push   ebp
c001d605:	e8 60 5f ff ff       	call   c001356a <File::close()>
c001d60a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d60d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d610:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d613:	59                   	pop    ecx
c001d614:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d618:	e8 33 22 ff ff       	call   c000f850 <free>
c001d61d:	5b                   	pop    ebx
c001d61e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d622:	e8 29 22 ff ff       	call   c000f850 <free>
c001d627:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d62a:	e8 21 22 ff ff       	call   c000f850 <free>
c001d62f:	5e                   	pop    esi
c001d630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d634:	e8 17 22 ff ff       	call   c000f850 <free>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	eb 21                	jmp    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d63e:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d642:	e9 90 fd ff ff       	jmp    c001d3d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d647:	83 ec 0c             	sub    esp,0xc
c001d64a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d64e:	e8 fd 21 ff ff       	call   c000f850 <free>
c001d653:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d657:	83 c4 10             	add    esp,0x10
c001d65a:	e9 05 fd ff ff       	jmp    c001d364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d65f:	31 c0                	xor    eax,eax
c001d661:	eb 33                	jmp    c001d696 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d663:	83 ec 0c             	sub    esp,0xc
c001d666:	55                   	push   ebp
c001d667:	e8 fe 5e ff ff       	call   c001356a <File::close()>
c001d66c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d66f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d672:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d675:	58                   	pop    eax
c001d676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d67a:	e8 d1 21 ff ff       	call   c000f850 <free>
c001d67f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d682:	e8 c9 21 ff ff       	call   c000f850 <free>
c001d687:	5a                   	pop    edx
c001d688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d68c:	e8 bf 21 ff ff       	call   c000f850 <free>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	b0 01                	mov    al,0x1
c001d696:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d69c:	5b                   	pop    ebx
c001d69d:	5e                   	pop    esi
c001d69e:	5f                   	pop    edi
c001d69f:	5d                   	pop    ebp
c001d6a0:	c3                   	ret    

c001d6a1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6a1:	56                   	push   esi
c001d6a2:	31 d2                	xor    edx,edx
c001d6a4:	53                   	push   ebx
c001d6a5:	8b 1d 40 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031140
c001d6ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6af:	39 d3                	cmp    ebx,edx
c001d6b1:	7e 1b                	jle    c001d6ce <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6b3:	8b 04 95 60 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceca0]
c001d6ba:	39 c8                	cmp    eax,ecx
c001d6bc:	77 0d                	ja     c001d6cb <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6be:	8b 34 95 60 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceea0]
c001d6c5:	01 c6                	add    esi,eax
c001d6c7:	39 ce                	cmp    esi,ecx
c001d6c9:	77 05                	ja     c001d6d0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6cb:	42                   	inc    edx
c001d6cc:	eb e1                	jmp    c001d6af <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6ce:	31 c0                	xor    eax,eax
c001d6d0:	5b                   	pop    ebx
c001d6d1:	5e                   	pop    esi
c001d6d2:	c3                   	ret    

c001d6d3 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6d3:	53                   	push   ebx
c001d6d4:	31 c0                	xor    eax,eax
c001d6d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6da:	8b 1d 40 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031140
c001d6e0:	39 c3                	cmp    ebx,eax
c001d6e2:	7e 22                	jle    c001d706 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6e4:	8b 14 85 60 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceca0]
c001d6eb:	39 ca                	cmp    edx,ecx
c001d6ed:	77 14                	ja     c001d703 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6ef:	03 14 85 60 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceea0]
c001d6f6:	39 ca                	cmp    edx,ecx
c001d6f8:	76 09                	jbe    c001d703 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6fa:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c001d701:	eb 05                	jmp    c001d708 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d703:	40                   	inc    eax
c001d704:	eb da                	jmp    c001d6e0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d706:	31 c0                	xor    eax,eax
c001d708:	5b                   	pop    ebx
c001d709:	c3                   	ret    

c001d70a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d70a:	53                   	push   ebx
c001d70b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d70f:	53                   	push   ebx
c001d710:	e8 8c ff ff ff       	call   c001d6a1 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d715:	5a                   	pop    edx
c001d716:	31 d2                	xor    edx,edx
c001d718:	85 c0                	test   eax,eax
c001d71a:	74 04                	je     c001d720 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d71c:	89 da                	mov    edx,ebx
c001d71e:	29 c2                	sub    edx,eax
c001d720:	89 d0                	mov    eax,edx
c001d722:	5b                   	pop    ebx
c001d723:	c3                   	ret    

c001d724 <Thr::loadDLL(char const*, bool)>:
c001d724:	55                   	push   ebp
c001d725:	57                   	push   edi
c001d726:	56                   	push   esi
c001d727:	53                   	push   ebx
c001d728:	81 ec 34 01 00 00    	sub    esp,0x134
c001d72e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d735:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d73c:	56                   	push   esi
c001d73d:	68 c8 c0 02 c0       	push   0xc002c0c8
c001d742:	e8 09 58 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001d747:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d74e:	e8 ed 20 ff ff       	call   c000f840 <malloc>
c001d753:	83 c4 0c             	add    esp,0xc
c001d756:	89 c3                	mov    ebx,eax
c001d758:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c001d75e:	56                   	push   esi
c001d75f:	50                   	push   eax
c001d760:	e8 43 5d ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001d765:	83 c4 10             	add    esp,0x10
c001d768:	85 db                	test   ebx,ebx
c001d76a:	75 3c                	jne    c001d7a8 <Thr::loadDLL(char const*, bool)+0x84>
c001d76c:	89 e8                	mov    eax,ebp
c001d76e:	84 c0                	test   al,al
c001d770:	0f 84 d5 01 00 00    	je     c001d94b <Thr::loadDLL(char const*, bool)+0x227>
c001d776:	57                   	push   edi
c001d777:	57                   	push   edi
c001d778:	68 d9 c0 02 c0       	push   0xc002c0d9
c001d77d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d781:	57                   	push   edi
c001d782:	e8 ad 30 fe ff       	call   c0000834 <strcpy>
c001d787:	58                   	pop    eax
c001d788:	5a                   	pop    edx
c001d789:	56                   	push   esi
c001d78a:	57                   	push   edi
c001d78b:	e8 e4 31 fe ff       	call   c0000974 <strcat>
c001d790:	59                   	pop    ecx
c001d791:	58                   	pop    eax
c001d792:	68 ec c0 02 c0       	push   0xc002c0ec
c001d797:	57                   	push   edi
c001d798:	e8 d7 31 fe ff       	call   c0000974 <strcat>
c001d79d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7a0:	e8 4c ce ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d7a5:	83 c4 10             	add    esp,0x10
c001d7a8:	51                   	push   ecx
c001d7a9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7ad:	50                   	push   eax
c001d7ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7b2:	50                   	push   eax
c001d7b3:	53                   	push   ebx
c001d7b4:	e8 ff 5f ff ff       	call   c00137b8 <File::stat(unsigned long long*, bool*)>
c001d7b9:	83 c4 10             	add    esp,0x10
c001d7bc:	85 db                	test   ebx,ebx
c001d7be:	74 0c                	je     c001d7cc <Thr::loadDLL(char const*, bool)+0xa8>
c001d7c0:	83 ec 0c             	sub    esp,0xc
c001d7c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7c5:	53                   	push   ebx
c001d7c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7c9:	83 c4 10             	add    esp,0x10
c001d7cc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7d1:	75 0a                	jne    c001d7dd <Thr::loadDLL(char const*, bool)+0xb9>
c001d7d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7d7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7db:	75 3c                	jne    c001d819 <Thr::loadDLL(char const*, bool)+0xf5>
c001d7dd:	89 e8                	mov    eax,ebp
c001d7df:	84 c0                	test   al,al
c001d7e1:	0f 84 4c 01 00 00    	je     c001d933 <Thr::loadDLL(char const*, bool)+0x20f>
c001d7e7:	51                   	push   ecx
c001d7e8:	51                   	push   ecx
c001d7e9:	68 d9 c0 02 c0       	push   0xc002c0d9
c001d7ee:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7f2:	53                   	push   ebx
c001d7f3:	e8 3c 30 fe ff       	call   c0000834 <strcpy>
c001d7f8:	5f                   	pop    edi
c001d7f9:	58                   	pop    eax
c001d7fa:	56                   	push   esi
c001d7fb:	53                   	push   ebx
c001d7fc:	e8 73 31 fe ff       	call   c0000974 <strcat>
c001d801:	58                   	pop    eax
c001d802:	5a                   	pop    edx
c001d803:	68 ec c0 02 c0       	push   0xc002c0ec
c001d808:	53                   	push   ebx
c001d809:	e8 66 31 fe ff       	call   c0000974 <strcat>
c001d80e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d811:	e8 db cd ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d816:	83 c4 10             	add    esp,0x10
c001d819:	e8 1e 46 ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c001d81e:	51                   	push   ecx
c001d81f:	6a 03                	push   0x3
c001d821:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d825:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d829:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d82f:	83 d3 00             	adc    ebx,0x0
c001d832:	89 ca                	mov    edx,ecx
c001d834:	89 d1                	mov    ecx,edx
c001d836:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d83a:	51                   	push   ecx
c001d83b:	50                   	push   eax
c001d83c:	e8 37 4c ff ff       	call   c0012478 <VAS::allocatePages(int, int)>
c001d841:	5f                   	pop    edi
c001d842:	89 c3                	mov    ebx,eax
c001d844:	58                   	pop    eax
c001d845:	53                   	push   ebx
c001d846:	68 ee c0 02 c0       	push   0xc002c0ee
c001d84b:	e8 00 57 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001d850:	89 34 24             	mov    DWORD PTR [esp],esi
c001d853:	e8 3c 2f fe ff       	call   c0000794 <strlen>
c001d858:	8b 3d 40 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031140
c001d85e:	40                   	inc    eax
c001d85f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d862:	e8 d9 1f ff ff       	call   c000f840 <malloc>
c001d867:	89 04 bd 60 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffceaa0],eax
c001d86e:	58                   	pop    eax
c001d86f:	a1 40 11 03 c0       	mov    eax,ds:0xc0031140
c001d874:	5a                   	pop    edx
c001d875:	56                   	push   esi
c001d876:	ff 34 85 60 15 03 c0 	push   DWORD PTR [eax*4-0x3ffceaa0]
c001d87d:	e8 b2 2f fe ff       	call   c0000834 <strcpy>
c001d882:	a1 40 11 03 c0       	mov    eax,ds:0xc0031140
c001d887:	8d 50 01             	lea    edx,[eax+0x1]
c001d88a:	89 1c 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],ebx
c001d891:	89 15 40 11 03 c0    	mov    DWORD PTR ds:0xc0031140,edx
c001d897:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d89b:	83 c4 0c             	add    esp,0xc
c001d89e:	89 14 85 60 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceea0],edx
c001d8a5:	6a 01                	push   0x1
c001d8a7:	53                   	push   ebx
c001d8a8:	56                   	push   esi
c001d8a9:	e8 d7 f6 ff ff       	call   c001cf85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8ae:	83 c4 10             	add    esp,0x10
c001d8b1:	89 c7                	mov    edi,eax
c001d8b3:	84 c0                	test   al,al
c001d8b5:	0f 85 8c 00 00 00    	jne    c001d947 <Thr::loadDLL(char const*, bool)+0x223>
c001d8bb:	89 e8                	mov    eax,ebp
c001d8bd:	84 c0                	test   al,al
c001d8bf:	74 76                	je     c001d937 <Thr::loadDLL(char const*, bool)+0x213>
c001d8c1:	83 ec 0c             	sub    esp,0xc
c001d8c4:	68 fb c0 02 c0       	push   0xc002c0fb
c001d8c9:	e8 23 cd ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d8ce:	83 c4 10             	add    esp,0x10
c001d8d1:	eb 64                	jmp    c001d937 <Thr::loadDLL(char const*, bool)+0x213>
c001d8d3:	e8 64 45 ff ff       	call   c0011e3c <Virt::getAKernelVAS()>
c001d8d8:	89 f5                	mov    ebp,esi
c001d8da:	c1 e5 0c             	shl    ebp,0xc
c001d8dd:	52                   	push   edx
c001d8de:	01 dd                	add    ebp,ebx
c001d8e0:	52                   	push   edx
c001d8e1:	55                   	push   ebp
c001d8e2:	50                   	push   eax
c001d8e3:	e8 0a 47 ff ff       	call   c0011ff2 <VAS::getPageTableEntry(unsigned long)>
c001d8e8:	83 c4 10             	add    esp,0x10
c001d8eb:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8ee:	75 0c                	jne    c001d8fc <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8f0:	83 ec 0c             	sub    esp,0xc
c001d8f3:	55                   	push   ebp
c001d8f4:	e8 5f 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d8f9:	83 c4 10             	add    esp,0x10
c001d8fc:	46                   	inc    esi
c001d8fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d901:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d905:	05 ff 0f 00 00       	add    eax,0xfff
c001d90a:	83 d2 00             	adc    edx,0x0
c001d90d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d911:	c1 ea 0c             	shr    edx,0xc
c001d914:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d918:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d91c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d920:	ba 00 00 00 00       	mov    edx,0x0
c001d925:	89 d0                	mov    eax,edx
c001d927:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d92b:	72 a6                	jb     c001d8d3 <Thr::loadDLL(char const*, bool)+0x1af>
c001d92d:	89 f8                	mov    eax,edi
c001d92f:	84 c0                	test   al,al
c001d931:	75 18                	jne    c001d94b <Thr::loadDLL(char const*, bool)+0x227>
c001d933:	31 db                	xor    ebx,ebx
c001d935:	eb 14                	jmp    c001d94b <Thr::loadDLL(char const*, bool)+0x227>
c001d937:	83 ec 0c             	sub    esp,0xc
c001d93a:	68 1a c1 02 c0       	push   0xc002c11a
c001d93f:	e8 ad cc ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d944:	83 c4 10             	add    esp,0x10
c001d947:	31 f6                	xor    esi,esi
c001d949:	eb b2                	jmp    c001d8fd <Thr::loadDLL(char const*, bool)+0x1d9>
c001d94b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d951:	89 d8                	mov    eax,ebx
c001d953:	5b                   	pop    ebx
c001d954:	5e                   	pop    esi
c001d955:	5f                   	pop    edi
c001d956:	5d                   	pop    ebp
c001d957:	c3                   	ret    

c001d958 <Thr::executeDLL(unsigned long, void*)>:
c001d958:	56                   	push   esi
c001d959:	53                   	push   ebx
c001d95a:	52                   	push   edx
c001d95b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d95f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d963:	85 db                	test   ebx,ebx
c001d965:	75 10                	jne    c001d977 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d967:	83 ec 0c             	sub    esp,0xc
c001d96a:	68 36 c1 02 c0       	push   0xc002c136
c001d96f:	e8 7d cc ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001d974:	83 c4 10             	add    esp,0x10
c001d977:	50                   	push   eax
c001d978:	50                   	push   eax
c001d979:	53                   	push   ebx
c001d97a:	68 60 c1 02 c0       	push   0xc002c160
c001d97f:	e8 cc 55 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001d984:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d988:	89 d8                	mov    eax,ebx
c001d98a:	83 c4 14             	add    esp,0x14
c001d98d:	5b                   	pop    ebx
c001d98e:	5e                   	pop    esi
c001d98f:	ff e0                	jmp    eax
c001d991:	90                   	nop

c001d992 <changeTSS>:
c001d992:	83 ec 14             	sub    esp,0x14
c001d995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d99a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d99d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9a2:	c1 e2 15             	shl    edx,0x15
c001d9a5:	29 d0                	sub    eax,edx
c001d9a7:	50                   	push   eax
c001d9a8:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001d9ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9b3:	05 7c 11 00 00       	add    eax,0x117c
c001d9b8:	50                   	push   eax
c001d9b9:	e8 22 3b ff ff       	call   c00114e0 <TSS::setESP(unsigned long)>
c001d9be:	83 c4 1c             	add    esp,0x1c
c001d9c1:	c3                   	ret    

c001d9c2 <Process::addArgs(char**)>:
c001d9c2:	57                   	push   edi
c001d9c3:	56                   	push   esi
c001d9c4:	53                   	push   ebx
c001d9c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9c9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9cd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9d7:	85 ff                	test   edi,edi
c001d9d9:	74 3d                	je     c001da18 <Process::addArgs(char**)+0x56>
c001d9db:	8b 07                	mov    eax,DWORD PTR [edi]
c001d9dd:	85 c0                	test   eax,eax
c001d9df:	74 37                	je     c001da18 <Process::addArgs(char**)+0x56>
c001d9e1:	31 db                	xor    ebx,ebx
c001d9e3:	83 ec 0c             	sub    esp,0xc
c001d9e6:	50                   	push   eax
c001d9e7:	e8 a8 2d fe ff       	call   c0000794 <strlen>
c001d9ec:	40                   	inc    eax
c001d9ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9f0:	e8 4b 1e ff ff       	call   c000f840 <malloc>
c001d9f5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d9fc:	5a                   	pop    edx
c001d9fd:	59                   	pop    ecx
c001d9fe:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da01:	43                   	inc    ebx
c001da02:	50                   	push   eax
c001da03:	e8 2c 2e fe ff       	call   c0000834 <strcpy>
c001da08:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da0e:	83 c4 10             	add    esp,0x10
c001da11:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da14:	85 c0                	test   eax,eax
c001da16:	75 cb                	jne    c001d9e3 <Process::addArgs(char**)+0x21>
c001da18:	5b                   	pop    ebx
c001da19:	5e                   	pop    esi
c001da1a:	5f                   	pop    edi
c001da1b:	c3                   	ret    

c001da1c <Process::Process(char const*, Process*, char**)>:
c001da1c:	56                   	push   esi
c001da1d:	53                   	push   ebx
c001da1e:	83 ec 14             	sub    esp,0x14
c001da21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da25:	05 0c 02 00 00       	add    eax,0x20c
c001da2a:	bb 07 00 00 00       	mov    ebx,0x7
c001da2f:	89 c6                	mov    esi,eax
c001da31:	85 db                	test   ebx,ebx
c001da33:	78 12                	js     c001da47 <Process::Process(char const*, Process*, char**)+0x2b>
c001da35:	83 ec 0c             	sub    esp,0xc
c001da38:	56                   	push   esi
c001da39:	e8 24 b2 00 00       	call   c0028c62 <ThreadControlBlock::ThreadControlBlock()>
c001da3e:	83 c4 10             	add    esp,0x10
c001da41:	83 c6 63             	add    esi,0x63
c001da44:	4b                   	dec    ebx
c001da45:	eb ea                	jmp    c001da31 <Process::Process(char const*, Process*, char**)+0x15>
c001da47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da4b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da52:	83 ec 0c             	sub    esp,0xc
c001da55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da59:	e8 e4 c9 ff ff       	call   c001a442 <Krnl::newProcessEnv(Process*)>
c001da5e:	83 c4 10             	add    esp,0x10
c001da61:	89 c2                	mov    edx,eax
c001da63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da67:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da71:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da7a:	a1 30 d9 02 c0       	mov    eax,ds:0xc002d930
c001da7f:	8d 50 01             	lea    edx,[eax+0x1]
c001da82:	89 15 30 d9 02 c0    	mov    DWORD PTR ds:0xc002d930,edx
c001da88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da8c:	89 02                	mov    DWORD PTR [edx],eax
c001da8e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001da96:	83 ec 0c             	sub    esp,0xc
c001da99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da9d:	e8 9e 1d ff ff       	call   c000f840 <malloc>
c001daa2:	83 c4 10             	add    esp,0x10
c001daa5:	89 c3                	mov    ebx,eax
c001daa7:	83 ec 08             	sub    esp,0x8
c001daaa:	6a 00                	push   0x0
c001daac:	53                   	push   ebx
c001daad:	e8 6e 4d ff ff       	call   c0012820 <VAS::VAS(bool)>
c001dab2:	83 c4 10             	add    esp,0x10
c001dab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dacd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dad5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dadb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dadf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dae5:	85 c0                	test   eax,eax
c001dae7:	74 42                	je     c001db2b <Process::Process(char const*, Process*, char**)+0x10f>
c001dae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daf3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001daf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dafd:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db07:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db0d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db17:	05 0c 01 00 00       	add    eax,0x10c
c001db1c:	83 ec 08             	sub    esp,0x8
c001db1f:	52                   	push   edx
c001db20:	50                   	push   eax
c001db21:	e8 0e 2d fe ff       	call   c0000834 <strcpy>
c001db26:	83 c4 10             	add    esp,0x10
c001db29:	eb 63                	jmp    c001db8e <Process::Process(char const*, Process*, char**)+0x172>
c001db2b:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db33:	83 ec 0c             	sub    esp,0xc
c001db36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db3a:	e8 01 1d ff ff       	call   c000f840 <malloc>
c001db3f:	83 c4 10             	add    esp,0x10
c001db42:	89 c3                	mov    ebx,eax
c001db44:	83 ec 08             	sub    esp,0x8
c001db47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db4b:	53                   	push   ebx
c001db4c:	e8 8d 36 ff ff       	call   c00111de <VgaText::VgaText(char const*)>
c001db51:	83 c4 10             	add    esp,0x10
c001db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db58:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db62:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db68:	83 ec 0c             	sub    esp,0xc
c001db6b:	50                   	push   eax
c001db6c:	e8 60 2a ff ff       	call   c00105d1 <addToTerminalCycle(VgaText*)>
c001db71:	83 c4 10             	add    esp,0x10
c001db74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db78:	05 0c 01 00 00       	add    eax,0x10c
c001db7d:	83 ec 08             	sub    esp,0x8
c001db80:	68 7f c1 02 c0       	push   0xc002c17f
c001db85:	50                   	push   eax
c001db86:	e8 a9 2c fe ff       	call   c0000834 <strcpy>
c001db8b:	83 c4 10             	add    esp,0x10
c001db8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db92:	83 c0 0c             	add    eax,0xc
c001db95:	83 ec 08             	sub    esp,0x8
c001db98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db9c:	50                   	push   eax
c001db9d:	e8 92 2c fe ff       	call   c0000834 <strcpy>
c001dba2:	83 c4 10             	add    esp,0x10
c001dba5:	83 ec 08             	sub    esp,0x8
c001dba8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbb0:	e8 0d fe ff ff       	call   c001d9c2 <Process::addArgs(char**)>
c001dbb5:	83 c4 10             	add    esp,0x10
c001dbb8:	83 ec 08             	sub    esp,0x8
c001dbbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbc3:	e8 87 ee ff ff       	call   c001ca4f <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbcf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbd3:	83 f0 01             	xor    eax,0x1
c001dbd6:	88 c2                	mov    dl,al
c001dbd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdc:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dbe2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dbe7:	83 ec 08             	sub    esp,0x8
c001dbea:	50                   	push   eax
c001dbeb:	68 7c c2 02 c0       	push   0xc002c27c
c001dbf0:	e8 5b 53 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001dbf5:	83 c4 10             	add    esp,0x10
c001dbf8:	90                   	nop
c001dbf9:	83 c4 14             	add    esp,0x14
c001dbfc:	5b                   	pop    ebx
c001dbfd:	5e                   	pop    esi
c001dbfe:	c3                   	ret    
c001dbff:	90                   	nop

c001dc00 <Process::Process(bool, char const*, Process*, char**)>:
c001dc00:	56                   	push   esi
c001dc01:	53                   	push   ebx
c001dc02:	83 ec 24             	sub    esp,0x24
c001dc05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc09:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc11:	05 0c 02 00 00       	add    eax,0x20c
c001dc16:	bb 07 00 00 00       	mov    ebx,0x7
c001dc1b:	89 c6                	mov    esi,eax
c001dc1d:	85 db                	test   ebx,ebx
c001dc1f:	78 12                	js     c001dc33 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc21:	83 ec 0c             	sub    esp,0xc
c001dc24:	56                   	push   esi
c001dc25:	e8 38 b0 00 00       	call   c0028c62 <ThreadControlBlock::ThreadControlBlock()>
c001dc2a:	83 c4 10             	add    esp,0x10
c001dc2d:	83 c6 63             	add    esi,0x63
c001dc30:	4b                   	dec    ebx
c001dc31:	eb ea                	jmp    c001dc1d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc37:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc3e:	83 ec 0c             	sub    esp,0xc
c001dc41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc45:	e8 f8 c7 ff ff       	call   c001a442 <Krnl::newProcessEnv(Process*)>
c001dc4a:	83 c4 10             	add    esp,0x10
c001dc4d:	89 c2                	mov    edx,eax
c001dc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc53:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc66:	a1 30 d9 02 c0       	mov    eax,ds:0xc002d930
c001dc6b:	8d 50 01             	lea    edx,[eax+0x1]
c001dc6e:	89 15 30 d9 02 c0    	mov    DWORD PTR ds:0xc002d930,edx
c001dc74:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc78:	89 02                	mov    DWORD PTR [edx],eax
c001dc7a:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dc82:	83 ec 0c             	sub    esp,0xc
c001dc85:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc89:	e8 b2 1b ff ff       	call   c000f840 <malloc>
c001dc8e:	83 c4 10             	add    esp,0x10
c001dc91:	89 c3                	mov    ebx,eax
c001dc93:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc98:	83 ec 08             	sub    esp,0x8
c001dc9b:	50                   	push   eax
c001dc9c:	53                   	push   ebx
c001dc9d:	e8 7e 4b ff ff       	call   c0012820 <VAS::VAS(bool)>
c001dca2:	83 c4 10             	add    esp,0x10
c001dca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dcbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcc5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcd5:	85 c0                	test   eax,eax
c001dcd7:	74 42                	je     c001dd1b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dcd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dce3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dce9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dced:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dcf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcfd:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd07:	05 0c 01 00 00       	add    eax,0x10c
c001dd0c:	83 ec 08             	sub    esp,0x8
c001dd0f:	52                   	push   edx
c001dd10:	50                   	push   eax
c001dd11:	e8 1e 2b fe ff       	call   c0000834 <strcpy>
c001dd16:	83 c4 10             	add    esp,0x10
c001dd19:	eb 63                	jmp    c001dd7e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd1b:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd23:	83 ec 0c             	sub    esp,0xc
c001dd26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd2a:	e8 11 1b ff ff       	call   c000f840 <malloc>
c001dd2f:	83 c4 10             	add    esp,0x10
c001dd32:	89 c3                	mov    ebx,eax
c001dd34:	83 ec 08             	sub    esp,0x8
c001dd37:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd3b:	53                   	push   ebx
c001dd3c:	e8 9d 34 ff ff       	call   c00111de <VgaText::VgaText(char const*)>
c001dd41:	83 c4 10             	add    esp,0x10
c001dd44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd48:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd52:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd58:	83 ec 0c             	sub    esp,0xc
c001dd5b:	50                   	push   eax
c001dd5c:	e8 70 28 ff ff       	call   c00105d1 <addToTerminalCycle(VgaText*)>
c001dd61:	83 c4 10             	add    esp,0x10
c001dd64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd68:	05 0c 01 00 00       	add    eax,0x10c
c001dd6d:	83 ec 08             	sub    esp,0x8
c001dd70:	68 7f c1 02 c0       	push   0xc002c17f
c001dd75:	50                   	push   eax
c001dd76:	e8 b9 2a fe ff       	call   c0000834 <strcpy>
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd82:	83 c0 0c             	add    eax,0xc
c001dd85:	83 ec 08             	sub    esp,0x8
c001dd88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd8c:	50                   	push   eax
c001dd8d:	e8 a2 2a fe ff       	call   c0000834 <strcpy>
c001dd92:	83 c4 10             	add    esp,0x10
c001dd95:	83 ec 08             	sub    esp,0x8
c001dd98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd9c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dda0:	e8 1d fc ff ff       	call   c001d9c2 <Process::addArgs(char**)>
c001dda5:	83 c4 10             	add    esp,0x10
c001dda8:	90                   	nop
c001dda9:	83 c4 24             	add    esp,0x24
c001ddac:	5b                   	pop    ebx
c001ddad:	5e                   	pop    esi
c001ddae:	c3                   	ret    

c001ddaf <disableIRQs()>:
c001ddaf:	fa                   	cli    
c001ddb0:	ff 05 0c 19 03 c0    	inc    DWORD PTR ds:0xc003190c
c001ddb6:	c3                   	ret    

c001ddb7 <getIRQNestingLevel()>:
c001ddb7:	a1 0c 19 03 c0       	mov    eax,ds:0xc003190c
c001ddbc:	c3                   	ret    

c001ddbd <enableIRQs()>:
c001ddbd:	a1 0c 19 03 c0       	mov    eax,ds:0xc003190c
c001ddc2:	48                   	dec    eax
c001ddc3:	a3 0c 19 03 c0       	mov    ds:0xc003190c,eax
c001ddc8:	75 01                	jne    c001ddcb <enableIRQs()+0xe>
c001ddca:	fb                   	sti    
c001ddcb:	c3                   	ret    

c001ddcc <lockScheduler()>:
c001ddcc:	eb e1                	jmp    c001ddaf <disableIRQs()>

c001ddce <unlockScheduler()>:
c001ddce:	eb ed                	jmp    c001ddbd <enableIRQs()>

c001ddd0 <userModeEntryPoint(void*)>:
c001ddd0:	83 ec 0c             	sub    esp,0xc
c001ddd3:	e8 f6 ff ff ff       	call   c001ddce <unlockScheduler()>
c001ddd8:	fb                   	sti    
c001ddd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddde:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dde1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dde7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddeb:	83 c4 0c             	add    esp,0xc
c001ddee:	e9 37 25 fe ff       	jmp    c000032a <goToUsermode>

c001ddf3 <lockStuff()>:
c001ddf3:	e8 b7 ff ff ff       	call   c001ddaf <disableIRQs()>
c001ddf8:	ff 05 08 19 03 c0    	inc    DWORD PTR ds:0xc0031908
c001ddfe:	c3                   	ret    

c001ddff <taskStartupFunction>:
c001ddff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de04:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de07:	c3                   	ret    

c001de08 <updateTimeUsed()>:
c001de08:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001de0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de13:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de1a:	74 50                	je     c001de6c <updateTimeUsed()+0x64>
c001de1c:	57                   	push   edi
c001de1d:	56                   	push   esi
c001de1e:	53                   	push   ebx
c001de1f:	0f 31                	rdtsc  
c001de21:	89 c1                	mov    ecx,eax
c001de23:	a3 48 19 03 c0       	mov    ds:0xc0031948,eax
c001de28:	2b 0d 38 19 03 c0    	sub    ecx,DWORD PTR ds:0xc0031938
c001de2e:	89 d3                	mov    ebx,edx
c001de30:	89 0d 40 19 03 c0    	mov    DWORD PTR ds:0xc0031940,ecx
c001de36:	1b 1d 3c 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc003193c
c001de3c:	a3 38 19 03 c0       	mov    ds:0xc0031938,eax
c001de41:	89 1d 44 19 03 c0    	mov    DWORD PTR ds:0xc0031944,ebx
c001de47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de4c:	89 15 4c 19 03 c0    	mov    DWORD PTR ds:0xc003194c,edx
c001de52:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de55:	89 15 3c 19 03 c0    	mov    DWORD PTR ds:0xc003193c,edx
c001de5b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de5e:	01 f1                	add    ecx,esi
c001de60:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de63:	11 fb                	adc    ebx,edi
c001de65:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de68:	5b                   	pop    ebx
c001de69:	5e                   	pop    esi
c001de6a:	5f                   	pop    edi
c001de6b:	c3                   	ret    
c001de6c:	c3                   	ret    

c001de6d <switchToThread(ThreadControlBlock*)>:
c001de6d:	53                   	push   ebx
c001de6e:	83 ec 08             	sub    esp,0x8
c001de71:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c001de76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de7a:	85 c0                	test   eax,eax
c001de7c:	75 30                	jne    c001deae <switchToThread(ThreadControlBlock*)+0x41>
c001de7e:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de81:	3c ff                	cmp    al,0xff
c001de83:	74 25                	je     c001deaa <switchToThread(ThreadControlBlock*)+0x3d>
c001de85:	0f b6 d0             	movzx  edx,al
c001de88:	b8 84 03 00 00       	mov    eax,0x384
c001de8d:	29 d0                	sub    eax,edx
c001de8f:	c1 e0 10             	shl    eax,0x10
c001de92:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de95:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001de98:	e8 6b ff ff ff       	call   c001de08 <updateTimeUsed()>
c001de9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dea1:	83 c4 08             	add    esp,0x8
c001dea4:	5b                   	pop    ebx
c001dea5:	e9 b8 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001deaa:	31 c0                	xor    eax,eax
c001deac:	eb e7                	jmp    c001de95 <switchToThread(ThreadControlBlock*)+0x28>
c001deae:	c7 05 04 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031904,0x1
c001deb8:	83 c4 08             	add    esp,0x8
c001debb:	5b                   	pop    ebx
c001debc:	c3                   	ret    
c001debd:	90                   	nop

c001debe <Semaphore::Semaphore(int)>:
c001debe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dec6:	89 10                	mov    DWORD PTR [eax],edx
c001dec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001decc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ded3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dee9:	90                   	nop
c001deea:	c3                   	ret    
c001deeb:	90                   	nop

c001deec <Mutex::Mutex()>:
c001deec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def0:	6a 01                	push   0x1
c001def2:	50                   	push   eax
c001def3:	e8 c6 ff ff ff       	call   c001debe <Semaphore::Semaphore(int)>
c001def8:	83 c4 08             	add    esp,0x8
c001defb:	90                   	nop
c001defc:	c3                   	ret    
c001defd:	90                   	nop

c001defe <Process::createThread(void (*)(void*), void*, int)>:
c001defe:	55                   	push   ebp
c001deff:	31 c9                	xor    ecx,ecx
c001df01:	57                   	push   edi
c001df02:	56                   	push   esi
c001df03:	53                   	push   ebx
c001df04:	83 ec 1c             	sub    esp,0x1c
c001df07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df0b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df12:	89 f2                	mov    edx,esi
c001df14:	0f b7 c2             	movzx  eax,dx
c001df17:	83 e2 01             	and    edx,0x1
c001df1a:	74 14                	je     c001df30 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df1c:	d1 f8                	sar    eax,1
c001df1e:	41                   	inc    ecx
c001df1f:	89 c2                	mov    edx,eax
c001df21:	83 f9 10             	cmp    ecx,0x10
c001df24:	75 ee                	jne    c001df14 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df26:	83 c4 1c             	add    esp,0x1c
c001df29:	31 c0                	xor    eax,eax
c001df2b:	5b                   	pop    ebx
c001df2c:	5e                   	pop    esi
c001df2d:	5f                   	pop    edi
c001df2e:	5d                   	pop    ebp
c001df2f:	c3                   	ret    
c001df30:	83 ec 08             	sub    esp,0x8
c001df33:	b8 01 00 00 00       	mov    eax,0x1
c001df38:	d3 e0                	shl    eax,cl
c001df3a:	09 c6                	or     esi,eax
c001df3c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df42:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df49:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df4c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df4f:	01 ce                	add    esi,ecx
c001df51:	89 f0                	mov    eax,esi
c001df53:	c1 e0 05             	shl    eax,0x5
c001df56:	01 c6                	add    esi,eax
c001df58:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df5b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df61:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df67:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df6b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df71:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df77:	89 ca                	mov    edx,ecx
c001df79:	f7 da                	neg    edx
c001df7b:	c1 e2 15             	shl    edx,0x15
c001df7e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df84:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df8a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df8e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df98:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfa2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfa8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfb2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfbc:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dfc3:	50                   	push   eax
c001dfc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfc8:	68 28 19 03 c0       	push   0xc0031928
c001dfcd:	e8 1e ab 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfd2:	83 c4 10             	add    esp,0x10
c001dfd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfd9:	83 c4 1c             	add    esp,0x1c
c001dfdc:	5b                   	pop    ebx
c001dfdd:	5e                   	pop    esi
c001dfde:	5f                   	pop    edi
c001dfdf:	5d                   	pop    ebp
c001dfe0:	c3                   	ret    
c001dfe1:	90                   	nop

c001dfe2 <Process::createUserThread()>:
c001dfe2:	83 ec 0c             	sub    esp,0xc
c001dfe5:	68 80 00 00 00       	push   0x80
c001dfea:	6a 00                	push   0x0
c001dfec:	68 d0 dd 01 c0       	push   0xc001ddd0
c001dff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dff5:	e8 04 ff ff ff       	call   c001defe <Process::createThread(void (*)(void*), void*, int)>
c001dffa:	83 c4 1c             	add    esp,0x1c
c001dffd:	c3                   	ret    

c001dffe <setupMultitasking(void (*)())>:
c001dffe:	56                   	push   esi
c001dfff:	53                   	push   ebx
c001e000:	53                   	push   ebx
c001e001:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e005:	eb 10                	jmp    c001e017 <setupMultitasking(void (*)())+0x19>
c001e007:	83 ec 0c             	sub    esp,0xc
c001e00a:	68 28 19 03 c0       	push   0xc0031928
c001e00f:	e8 2e aa 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e014:	83 c4 10             	add    esp,0x10
c001e017:	83 ec 0c             	sub    esp,0xc
c001e01a:	68 28 19 03 c0       	push   0xc0031928
c001e01f:	e8 02 aa 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e024:	83 c4 10             	add    esp,0x10
c001e027:	84 c0                	test   al,al
c001e029:	74 dc                	je     c001e007 <setupMultitasking(void (*)())+0x9>
c001e02b:	83 ec 0c             	sub    esp,0xc
c001e02e:	68 3f 07 00 00       	push   0x73f
c001e033:	e8 08 18 ff ff       	call   c000f840 <malloc>
c001e038:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e03f:	89 c3                	mov    ebx,eax
c001e041:	6a 00                	push   0x0
c001e043:	68 83 c1 02 c0       	push   0xc002c183
c001e048:	6a 01                	push   0x1
c001e04a:	50                   	push   eax
c001e04b:	e8 b0 fb ff ff       	call   c001dc00 <Process::Process(bool, char const*, Process*, char**)>
c001e050:	83 c4 18             	add    esp,0x18
c001e053:	89 1d 34 19 03 c0    	mov    DWORD PTR ds:0xc0031934,ebx
c001e059:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e05f:	68 a4 c2 02 c0       	push   0xc002c2a4
c001e064:	e8 e7 4e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e069:	58                   	pop    eax
c001e06a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e070:	e8 de 2c ff ff       	call   c0010d53 <setActiveTerminal(VgaText*)>
c001e075:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e07d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e083:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e086:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e090:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e096:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e09c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0a6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0b0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0ba:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0c0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0c6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0d0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0d6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0e0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0e6:	5a                   	pop    edx
c001e0e7:	59                   	pop    ecx
c001e0e8:	68 7f c1 02 c0       	push   0xc002c17f
c001e0ed:	50                   	push   eax
c001e0ee:	e8 41 27 fe ff       	call   c0000834 <strcpy>
c001e0f3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0fa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0fe:	83 c4 14             	add    esp,0x14
c001e101:	5b                   	pop    ebx
c001e102:	5e                   	pop    esi
c001e103:	e9 4c 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e108 <schedule()>:
c001e108:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c001e10d:	85 c0                	test   eax,eax
c001e10f:	74 0b                	je     c001e11c <schedule()+0x14>
c001e111:	c7 05 04 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031904,0x1
c001e11b:	c3                   	ret    
c001e11c:	53                   	push   ebx
c001e11d:	83 ec 14             	sub    esp,0x14
c001e120:	68 28 19 03 c0       	push   0xc0031928
c001e125:	e8 fc a8 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e12a:	83 c4 10             	add    esp,0x10
c001e12d:	84 c0                	test   al,al
c001e12f:	75 38                	jne    c001e169 <schedule()+0x61>
c001e131:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e136:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e139:	4a                   	dec    edx
c001e13a:	74 32                	je     c001e16e <schedule()+0x66>
c001e13c:	83 ec 0c             	sub    esp,0xc
c001e13f:	68 28 19 03 c0       	push   0xc0031928
c001e144:	e8 d5 a8 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e149:	c7 04 24 28 19 03 c0 	mov    DWORD PTR [esp],0xc0031928
c001e150:	89 c3                	mov    ebx,eax
c001e152:	e8 eb a8 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e157:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e15e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e161:	e8 07 fd ff ff       	call   c001de6d <switchToThread(ThreadControlBlock*)>
c001e166:	83 c4 10             	add    esp,0x10
c001e169:	83 c4 08             	add    esp,0x8
c001e16c:	5b                   	pop    ebx
c001e16d:	c3                   	ret    
c001e16e:	83 ec 08             	sub    esp,0x8
c001e171:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e178:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e17e:	68 28 19 03 c0       	push   0xc0031928
c001e183:	e8 68 a9 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e188:	83 c4 10             	add    esp,0x10
c001e18b:	eb af                	jmp    c001e13c <schedule()+0x34>

c001e18d <unlockStuff()>:
c001e18d:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c001e192:	48                   	dec    eax
c001e193:	a3 08 19 03 c0       	mov    ds:0xc0031908,eax
c001e198:	75 09                	jne    c001e1a3 <unlockStuff()+0x16>
c001e19a:	a1 04 19 03 c0       	mov    eax,ds:0xc0031904
c001e19f:	85 c0                	test   eax,eax
c001e1a1:	75 05                	jne    c001e1a8 <unlockStuff()+0x1b>
c001e1a3:	e9 15 fc ff ff       	jmp    c001ddbd <enableIRQs()>
c001e1a8:	83 ec 0c             	sub    esp,0xc
c001e1ab:	c7 05 04 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031904,0x0
c001e1b5:	e8 4e ff ff ff       	call   c001e108 <schedule()>
c001e1ba:	83 c4 0c             	add    esp,0xc
c001e1bd:	e9 fb fb ff ff       	jmp    c001ddbd <enableIRQs()>

c001e1c2 <Semaphore::tryAcquire()>:
c001e1c2:	83 ec 0c             	sub    esp,0xc
c001e1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c9:	e8 25 fc ff ff       	call   c001ddf3 <lockStuff()>
c001e1ce:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1d1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1d3:	7c 0b                	jl     c001e1e0 <Semaphore::tryAcquire()+0x1e>
c001e1d5:	e8 b3 ff ff ff       	call   c001e18d <unlockStuff()>
c001e1da:	31 c0                	xor    eax,eax
c001e1dc:	83 c4 0c             	add    esp,0xc
c001e1df:	c3                   	ret    
c001e1e0:	42                   	inc    edx
c001e1e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1e4:	e8 a4 ff ff ff       	call   c001e18d <unlockStuff()>
c001e1e9:	b0 01                	mov    al,0x1
c001e1eb:	83 c4 0c             	add    esp,0xc
c001e1ee:	c3                   	ret    
c001e1ef:	90                   	nop

c001e1f0 <Semaphore::assertLocked(char const*)>:
c001e1f0:	83 ec 0c             	sub    esp,0xc
c001e1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1fb:	e8 f3 fb ff ff       	call   c001ddf3 <lockStuff()>
c001e200:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e202:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e205:	7c 05                	jl     c001e20c <Semaphore::assertLocked(char const*)+0x1c>
c001e207:	83 c4 0c             	add    esp,0xc
c001e20a:	eb 81                	jmp    c001e18d <unlockStuff()>
c001e20c:	83 ec 0c             	sub    esp,0xc
c001e20f:	52                   	push   edx
c001e210:	e8 dc c3 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001e215:	83 c4 10             	add    esp,0x10
c001e218:	83 c4 0c             	add    esp,0xc
c001e21b:	e9 6d ff ff ff       	jmp    c001e18d <unlockStuff()>

c001e220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e220:	83 ec 0c             	sub    esp,0xc
c001e223:	e8 8f fb ff ff       	call   c001ddb7 <getIRQNestingLevel()>
c001e228:	83 ec 08             	sub    esp,0x8
c001e22b:	50                   	push   eax
c001e22c:	68 d8 c2 02 c0       	push   0xc002c2d8
c001e231:	e8 1a 4d ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e236:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e23a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e23f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e242:	e8 c1 fe ff ff       	call   c001e108 <schedule()>
c001e247:	e8 82 fb ff ff       	call   c001ddce <unlockScheduler()>
c001e24c:	e8 66 fb ff ff       	call   c001ddb7 <getIRQNestingLevel()>
c001e251:	5a                   	pop    edx
c001e252:	59                   	pop    ecx
c001e253:	50                   	push   eax
c001e254:	68 0c c3 02 c0       	push   0xc002c30c
c001e259:	e8 f2 4c ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e25e:	83 c4 1c             	add    esp,0x1c
c001e261:	c3                   	ret    

c001e262 <blockTask(TaskState)>:
c001e262:	83 ec 0c             	sub    esp,0xc
c001e265:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e269:	e8 5e fb ff ff       	call   c001ddcc <lockScheduler()>
c001e26e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e273:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e276:	e8 8d fe ff ff       	call   c001e108 <schedule()>
c001e27b:	83 c4 0c             	add    esp,0xc
c001e27e:	e9 4b fb ff ff       	jmp    c001ddce <unlockScheduler()>

c001e283 <waitTask(int, int*, int)>:
c001e283:	83 ec 18             	sub    esp,0x18
c001e286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e28b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e28f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e292:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e296:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e29b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e29e:	6a 07                	push   0x7
c001e2a0:	e8 bd ff ff ff       	call   c001e262 <blockTask(TaskState)>
c001e2a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2aa:	83 c4 10             	add    esp,0x10
c001e2ad:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2b0:	85 d2                	test   edx,edx
c001e2b2:	74 0a                	je     c001e2be <waitTask(int, int*, int)+0x3b>
c001e2b4:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2b7:	89 02                	mov    DWORD PTR [edx],eax
c001e2b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2be:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2c1:	83 c4 0c             	add    esp,0xc
c001e2c4:	c3                   	ret    

c001e2c5 <nanoSleepUntil(unsigned long long)>:
c001e2c5:	83 ec 0c             	sub    esp,0xc
c001e2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2d0:	3b 05 50 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea50
c001e2d6:	89 d1                	mov    ecx,edx
c001e2d8:	1b 0d 54 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea54
c001e2de:	73 04                	jae    c001e2e4 <nanoSleepUntil(unsigned long long)+0x1f>
c001e2e0:	83 c4 0c             	add    esp,0xc
c001e2e3:	c3                   	ret    
c001e2e4:	e8 0a fb ff ff       	call   c001ddf3 <lockStuff()>
c001e2e9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2ef:	83 ec 08             	sub    esp,0x8
c001e2f2:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e2f5:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e2f8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e2fe:	68 1c 19 03 c0       	push   0xc003191c
c001e303:	e8 e8 a7 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e308:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e30f:	e8 4e ff ff ff       	call   c001e262 <blockTask(TaskState)>
c001e314:	83 c4 1c             	add    esp,0x1c
c001e317:	e9 71 fe ff ff       	jmp    c001e18d <unlockStuff()>

c001e31c <nanoSleep(unsigned long long)>:
c001e31c:	a1 50 ea 02 c0       	mov    eax,ds:0xc002ea50
c001e321:	8b 15 54 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea54
c001e327:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e32b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e32f:	eb 94                	jmp    c001e2c5 <nanoSleepUntil(unsigned long long)>

c001e331 <sleep(unsigned long long)>:
c001e331:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e339:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e33e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e342:	01 ca                	add    edx,ecx
c001e344:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e348:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e34c:	eb ce                	jmp    c001e31c <nanoSleep(unsigned long long)>

c001e34e <Semaphore::acquire()>:
c001e34e:	83 ec 0c             	sub    esp,0xc
c001e351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e355:	e8 99 fa ff ff       	call   c001ddf3 <lockStuff()>
c001e35a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e35d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e35f:	7d 0c                	jge    c001e36d <Semaphore::acquire()+0x1f>
c001e361:	42                   	inc    edx
c001e362:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e365:	83 c4 0c             	add    esp,0xc
c001e368:	e9 20 fe ff ff       	jmp    c001e18d <unlockStuff()>
c001e36d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e373:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e37a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e37d:	85 d2                	test   edx,edx
c001e37f:	74 2a                	je     c001e3ab <Semaphore::acquire()+0x5d>
c001e381:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e384:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e38a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e38d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e393:	83 ec 0c             	sub    esp,0xc
c001e396:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e399:	6a 05                	push   0x5
c001e39b:	e8 c2 fe ff ff       	call   c001e262 <blockTask(TaskState)>
c001e3a0:	83 c4 10             	add    esp,0x10
c001e3a3:	83 c4 0c             	add    esp,0xc
c001e3a6:	e9 e2 fd ff ff       	jmp    c001e18d <unlockStuff()>
c001e3ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3b4:	eb d7                	jmp    c001e38d <Semaphore::acquire()+0x3f>

c001e3b6 <taskReturned>:
c001e3b6:	83 ec 18             	sub    esp,0x18
c001e3b9:	68 40 c3 02 c0       	push   0xc002c340
c001e3be:	e8 2e c2 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001e3c3:	83 c4 10             	add    esp,0x10
c001e3c6:	83 ec 0c             	sub    esp,0xc
c001e3c9:	6a 02                	push   0x2
c001e3cb:	e8 92 fe ff ff       	call   c001e262 <blockTask(TaskState)>
c001e3d0:	e8 f7 f9 ff ff       	call   c001ddcc <lockScheduler()>
c001e3d5:	e8 2e fd ff ff       	call   c001e108 <schedule()>
c001e3da:	e8 ef f9 ff ff       	call   c001ddce <unlockScheduler()>
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	eb e2                	jmp    c001e3c6 <taskReturned+0x10>

c001e3e4 <unblockTask(ThreadControlBlock*)>:
c001e3e4:	53                   	push   ebx
c001e3e5:	83 ec 08             	sub    esp,0x8
c001e3e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3ec:	e8 db f9 ff ff       	call   c001ddcc <lockScheduler()>
c001e3f1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3f4:	85 c0                	test   eax,eax
c001e3f6:	74 5c                	je     c001e454 <unblockTask(ThreadControlBlock*)+0x70>
c001e3f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3fb:	48                   	dec    eax
c001e3fc:	74 31                	je     c001e42f <unblockTask(ThreadControlBlock*)+0x4b>
c001e3fe:	83 ec 0c             	sub    esp,0xc
c001e401:	68 28 19 03 c0       	push   0xc0031928
c001e406:	e8 13 a6 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e40b:	83 c4 10             	add    esp,0x10
c001e40e:	85 c0                	test   eax,eax
c001e410:	75 17                	jne    c001e429 <unblockTask(ThreadControlBlock*)+0x45>
c001e412:	eb 65                	jmp    c001e479 <unblockTask(ThreadControlBlock*)+0x95>
c001e414:	83 ec 08             	sub    esp,0x8
c001e417:	50                   	push   eax
c001e418:	68 28 19 03 c0       	push   0xc0031928
c001e41d:	e8 d6 a8 00 00       	call   c0028cf8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e422:	83 c4 10             	add    esp,0x10
c001e425:	85 c0                	test   eax,eax
c001e427:	74 50                	je     c001e479 <unblockTask(ThreadControlBlock*)+0x95>
c001e429:	39 c3                	cmp    ebx,eax
c001e42b:	75 e7                	jne    c001e414 <unblockTask(ThreadControlBlock*)+0x30>
c001e42d:	eb 1c                	jmp    c001e44b <unblockTask(ThreadControlBlock*)+0x67>
c001e42f:	83 ec 0c             	sub    esp,0xc
c001e432:	68 30 c4 02 c0       	push   0xc002c430
c001e437:	e8 14 4b ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e43c:	c7 04 24 bc c3 02 c0 	mov    DWORD PTR [esp],0xc002c3bc
c001e443:	e8 08 4b ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e448:	83 c4 10             	add    esp,0x10
c001e44b:	83 c4 08             	add    esp,0x8
c001e44e:	5b                   	pop    ebx
c001e44f:	e9 7a f9 ff ff       	jmp    c001ddce <unlockScheduler()>
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	68 74 c3 02 c0       	push   0xc002c374
c001e45c:	e8 ef 4a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e461:	c7 04 24 bc c3 02 c0 	mov    DWORD PTR [esp],0xc002c3bc
c001e468:	e8 e3 4a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e46d:	83 c4 10             	add    esp,0x10
c001e470:	83 c4 08             	add    esp,0x8
c001e473:	5b                   	pop    ebx
c001e474:	e9 55 f9 ff ff       	jmp    c001ddce <unlockScheduler()>
c001e479:	83 ec 08             	sub    esp,0x8
c001e47c:	53                   	push   ebx
c001e47d:	68 28 19 03 c0       	push   0xc0031928
c001e482:	e8 69 a6 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e487:	83 c4 10             	add    esp,0x10
c001e48a:	83 c4 08             	add    esp,0x8
c001e48d:	5b                   	pop    ebx
c001e48e:	e9 3b f9 ff ff       	jmp    c001ddce <unlockScheduler()>

c001e493 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e493:	55                   	push   ebp
c001e494:	57                   	push   edi
c001e495:	56                   	push   esi
c001e496:	53                   	push   ebx
c001e497:	83 ec 1c             	sub    esp,0x1c
c001e49a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e49e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4a1:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4a7:	85 ff                	test   edi,edi
c001e4a9:	7e 20                	jle    c001e4cb <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4ab:	31 f6                	xor    esi,esi
c001e4ad:	83 ec 0c             	sub    esp,0xc
c001e4b0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4b7:	46                   	inc    esi
c001e4b8:	e8 93 13 ff ff       	call   c000f850 <free>
c001e4bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4c0:	83 c4 10             	add    esp,0x10
c001e4c3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4c9:	7f e2                	jg     c001e4ad <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4cb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4d5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4da:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4dd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4e0:	d3 c0                	rol    eax,cl
c001e4e2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4e9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4ec:	89 f7                	mov    edi,esi
c001e4ee:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e4f6:	0f 85 74 01 00 00    	jne    c001e670 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e4fc:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e502:	85 ed                	test   ebp,ebp
c001e504:	74 1b                	je     c001e521 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e506:	83 ec 0c             	sub    esp,0xc
c001e509:	55                   	push   ebp
c001e50a:	e8 4f be ff ff       	call   c001a35e <EnvVarContainer::~EnvVarContainer()>
c001e50f:	59                   	pop    ecx
c001e510:	5e                   	pop    esi
c001e511:	6a 0c                	push   0xc
c001e513:	55                   	push   ebp
c001e514:	e8 57 49 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c001e519:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e51c:	83 c4 10             	add    esp,0x10
c001e51f:	89 f7                	mov    edi,esi
c001e521:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e527:	85 c0                	test   eax,eax
c001e529:	0f 84 aa 00 00 00    	je     c001e5d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e52f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e532:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e536:	31 c9                	xor    ecx,ecx
c001e538:	eb 10                	jmp    c001e54a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e53a:	41                   	inc    ecx
c001e53b:	83 f9 10             	cmp    ecx,0x10
c001e53e:	0f 84 95 00 00 00    	je     c001e5d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e544:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e54a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e551:	d3 fa                	sar    edx,cl
c001e553:	83 e2 01             	and    edx,0x1
c001e556:	74 e2                	je     c001e53a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e558:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e55b:	01 ca                	add    edx,ecx
c001e55d:	89 d5                	mov    ebp,edx
c001e55f:	c1 e5 05             	shl    ebp,0x5
c001e562:	01 ea                	add    edx,ebp
c001e564:	01 d0                	add    eax,edx
c001e566:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e56c:	83 fd 07             	cmp    ebp,0x7
c001e56f:	75 c9                	jne    c001e53a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e571:	05 40 02 00 00       	add    eax,0x240
c001e576:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e579:	83 fd ff             	cmp    ebp,0xffffffff
c001e57c:	0f 8c 08 01 00 00    	jl     c001e68a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e582:	0f 84 b9 01 00 00    	je     c001e741 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e588:	85 ed                	test   ebp,ebp
c001e58a:	0f 84 a0 01 00 00    	je     c001e730 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e590:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e592:	75 a6                	jne    c001e53a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e594:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e59a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e59e:	01 d0                	add    eax,edx
c001e5a0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5a4:	83 ec 0c             	sub    esp,0xc
c001e5a7:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5ad:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5b6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5bd:	50                   	push   eax
c001e5be:	e8 21 fe ff ff       	call   c001e3e4 <unblockTask(ThreadControlBlock*)>
c001e5c3:	83 c4 10             	add    esp,0x10
c001e5c6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5cd:	89 f7                	mov    edi,esi
c001e5cf:	41                   	inc    ecx
c001e5d0:	83 f9 10             	cmp    ecx,0x10
c001e5d3:	0f 85 6b ff ff ff    	jne    c001e544 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5d9:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5df:	85 c0                	test   eax,eax
c001e5e1:	74 5d                	je     c001e640 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5e3:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5e9:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5ef:	74 4f                	je     c001e640 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5f1:	83 ec 0c             	sub    esp,0xc
c001e5f4:	68 28 19 03 c0       	push   0xc0031928
c001e5f9:	e8 20 a4 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5fe:	c7 04 24 28 19 03 c0 	mov    DWORD PTR [esp],0xc0031928
c001e605:	89 c7                	mov    edi,eax
c001e607:	e8 1a a4 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e60c:	83 c4 10             	add    esp,0x10
c001e60f:	84 c0                	test   al,al
c001e611:	0f 84 e4 00 00 00    	je     c001e6fb <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e617:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e61a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e620:	85 d2                	test   edx,edx
c001e622:	74 0f                	je     c001e633 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e624:	83 ec 0c             	sub    esp,0xc
c001e627:	8b 02                	mov    eax,DWORD PTR [edx]
c001e629:	52                   	push   edx
c001e62a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e62d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e630:	83 c4 10             	add    esp,0x10
c001e633:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e63d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e640:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e646:	85 db                	test   ebx,ebx
c001e648:	74 16                	je     c001e660 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e64a:	83 ec 0c             	sub    esp,0xc
c001e64d:	53                   	push   ebx
c001e64e:	e8 b9 3b ff ff       	call   c001220c <VAS::~VAS()>
c001e653:	58                   	pop    eax
c001e654:	5a                   	pop    edx
c001e655:	6a 10                	push   0x10
c001e657:	53                   	push   ebx
c001e658:	e8 13 48 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c001e65d:	83 c4 10             	add    esp,0x10
c001e660:	83 ec 0c             	sub    esp,0xc
c001e663:	68 8a c1 02 c0       	push   0xc002c18a
c001e668:	e8 e3 48 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e66d:	83 c4 10             	add    esp,0x10
c001e670:	83 ec 08             	sub    esp,0x8
c001e673:	68 3f 07 00 00       	push   0x73f
c001e678:	68 98 c1 02 c0       	push   0xc002c198
c001e67d:	e8 ce 48 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e682:	83 c4 2c             	add    esp,0x2c
c001e685:	5b                   	pop    ebx
c001e686:	5e                   	pop    esi
c001e687:	5f                   	pop    edi
c001e688:	5d                   	pop    ebp
c001e689:	c3                   	ret    
c001e68a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e68e:	83 ec 0c             	sub    esp,0xc
c001e691:	68 74 c4 02 c0       	push   0xc002c474
c001e696:	e8 56 bf ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001e69b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e69e:	83 c4 10             	add    esp,0x10
c001e6a1:	89 f7                	mov    edi,esi
c001e6a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6a7:	e9 8e fe ff ff       	jmp    c001e53a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6ac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6b2:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6b8:	75 1c                	jne    c001e6d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6ba:	83 ec 0c             	sub    esp,0xc
c001e6bd:	68 dc c4 02 c0       	push   0xc002c4dc
c001e6c2:	e8 89 48 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e6c7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6ce:	e8 8f fb ff ff       	call   c001e262 <blockTask(TaskState)>
c001e6d3:	83 c4 10             	add    esp,0x10
c001e6d6:	83 ec 08             	sub    esp,0x8
c001e6d9:	56                   	push   esi
c001e6da:	68 28 19 03 c0       	push   0xc0031928
c001e6df:	e8 0c a4 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6e4:	c7 04 24 28 19 03 c0 	mov    DWORD PTR [esp],0xc0031928
c001e6eb:	e8 2e a3 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6f0:	83 c4 10             	add    esp,0x10
c001e6f3:	39 f8                	cmp    eax,edi
c001e6f5:	0f 84 1c ff ff ff    	je     c001e617 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e6fb:	83 ec 0c             	sub    esp,0xc
c001e6fe:	68 28 19 03 c0       	push   0xc0031928
c001e703:	e8 16 a3 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e708:	c7 04 24 28 19 03 c0 	mov    DWORD PTR [esp],0xc0031928
c001e70f:	89 c6                	mov    esi,eax
c001e711:	e8 2c a3 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e716:	83 c4 10             	add    esp,0x10
c001e719:	39 f3                	cmp    ebx,esi
c001e71b:	74 b9                	je     c001e6d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e71d:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e720:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e723:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e729:	75 ab                	jne    c001e6d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e72b:	e9 7c ff ff ff       	jmp    c001e6ac <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e730:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e734:	83 ec 0c             	sub    esp,0xc
c001e737:	68 a8 c4 02 c0       	push   0xc002c4a8
c001e73c:	e9 55 ff ff ff       	jmp    c001e696 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e741:	8b 36                	mov    esi,DWORD PTR [esi]
c001e743:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e747:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e74a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e74d:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e753:	01 d7                	add    edi,edx
c001e755:	89 f8                	mov    eax,edi
c001e757:	e9 44 fe ff ff       	jmp    c001e5a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e75c <cleanerTaskFunction(void*)>:
c001e75c:	53                   	push   ebx
c001e75d:	83 ec 08             	sub    esp,0x8
c001e760:	e8 69 f6 ff ff       	call   c001ddce <unlockScheduler()>
c001e765:	e8 62 f6 ff ff       	call   c001ddcc <lockScheduler()>
c001e76a:	80 3d ec 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318ec,0x0
c001e771:	0f 85 8e 00 00 00    	jne    c001e805 <cleanerTaskFunction(void*)+0xa9>
c001e777:	83 ec 0c             	sub    esp,0xc
c001e77a:	6a 02                	push   0x2
c001e77c:	e8 9f fa ff ff       	call   c001e220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e781:	83 c4 10             	add    esp,0x10
c001e784:	c6 05 ec 18 03 c0 00 	mov    BYTE PTR ds:0xc00318ec,0x0
c001e78b:	e8 63 f6 ff ff       	call   c001ddf3 <lockStuff()>
c001e790:	e8 37 f6 ff ff       	call   c001ddcc <lockScheduler()>
c001e795:	83 ec 0c             	sub    esp,0xc
c001e798:	68 10 19 03 c0       	push   0xc0031910
c001e79d:	e8 84 a2 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7a2:	83 c4 10             	add    esp,0x10
c001e7a5:	84 c0                	test   al,al
c001e7a7:	75 40                	jne    c001e7e9 <cleanerTaskFunction(void*)+0x8d>
c001e7a9:	83 ec 0c             	sub    esp,0xc
c001e7ac:	68 10 19 03 c0       	push   0xc0031910
c001e7b1:	e8 68 a2 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7b6:	c7 04 24 10 19 03 c0 	mov    DWORD PTR [esp],0xc0031910
c001e7bd:	89 c3                	mov    ebx,eax
c001e7bf:	e8 7e a2 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7c4:	c7 04 24 ae c1 02 c0 	mov    DWORD PTR [esp],0xc002c1ae
c001e7cb:	e8 80 47 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e7d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7d3:	e8 bb fc ff ff       	call   c001e493 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7d8:	c7 04 24 c7 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1c7
c001e7df:	e8 6c 47 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e7e4:	83 c4 10             	add    esp,0x10
c001e7e7:	eb ac                	jmp    c001e795 <cleanerTaskFunction(void*)+0x39>
c001e7e9:	e8 e0 f5 ff ff       	call   c001ddce <unlockScheduler()>
c001e7ee:	e8 9a f9 ff ff       	call   c001e18d <unlockStuff()>
c001e7f3:	e8 d4 f5 ff ff       	call   c001ddcc <lockScheduler()>
c001e7f8:	80 3d ec 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318ec,0x0
c001e7ff:	0f 84 72 ff ff ff    	je     c001e777 <cleanerTaskFunction(void*)+0x1b>
c001e805:	e8 c4 f5 ff ff       	call   c001ddce <unlockScheduler()>
c001e80a:	e9 75 ff ff ff       	jmp    c001e784 <cleanerTaskFunction(void*)+0x28>

c001e80f <terminateTask(int)>:
c001e80f:	83 ec 14             	sub    esp,0x14
c001e812:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e817:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e81a:	83 c0 0c             	add    eax,0xc
c001e81d:	50                   	push   eax
c001e81e:	68 04 c5 02 c0       	push   0xc002c504
c001e823:	e8 28 47 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e828:	e8 c6 f5 ff ff       	call   c001ddf3 <lockStuff()>
c001e82d:	e8 9a f5 ff ff       	call   c001ddcc <lockScheduler()>
c001e832:	c7 04 24 da c1 02 c0 	mov    DWORD PTR [esp],0xc002c1da
c001e839:	e8 12 47 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e83e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e847:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e84a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e84f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e852:	5a                   	pop    edx
c001e853:	59                   	pop    ecx
c001e854:	50                   	push   eax
c001e855:	68 10 19 03 c0       	push   0xc0031910
c001e85a:	e8 91 a2 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e85f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e864:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e86b:	c7 04 24 f4 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1f4
c001e872:	e8 d9 46 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e877:	83 c4 10             	add    esp,0x10
c001e87a:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c001e87f:	85 c0                	test   eax,eax
c001e881:	74 5a                	je     c001e8dd <terminateTask(int)+0xce>
c001e883:	83 ec 0c             	sub    esp,0xc
c001e886:	68 0e c2 02 c0       	push   0xc002c20e
c001e88b:	e8 c0 46 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e890:	58                   	pop    eax
c001e891:	c6 05 ec 18 03 c0 01 	mov    BYTE PTR ds:0xc00318ec,0x1
c001e898:	ff 35 e8 18 03 c0    	push   DWORD PTR ds:0xc00318e8
c001e89e:	e8 41 fb ff ff       	call   c001e3e4 <unblockTask(ThreadControlBlock*)>
c001e8a3:	c7 04 24 28 c2 02 c0 	mov    DWORD PTR [esp],0xc002c228
c001e8aa:	e8 a1 46 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e8af:	83 c4 10             	add    esp,0x10
c001e8b2:	e8 17 f5 ff ff       	call   c001ddce <unlockScheduler()>
c001e8b7:	e8 d1 f8 ff ff       	call   c001e18d <unlockStuff()>
c001e8bc:	83 ec 0c             	sub    esp,0xc
c001e8bf:	68 60 c2 02 c0       	push   0xc002c260
c001e8c4:	e8 87 46 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e8c9:	83 c4 10             	add    esp,0x10
c001e8cc:	e8 fb f4 ff ff       	call   c001ddcc <lockScheduler()>
c001e8d1:	e8 32 f8 ff ff       	call   c001e108 <schedule()>
c001e8d6:	e8 f3 f4 ff ff       	call   c001ddce <unlockScheduler()>
c001e8db:	eb ef                	jmp    c001e8cc <terminateTask(int)+0xbd>
c001e8dd:	83 ec 0c             	sub    esp,0xc
c001e8e0:	68 42 c2 02 c0       	push   0xc002c242
c001e8e5:	e8 66 46 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001e8ea:	83 c4 10             	add    esp,0x10
c001e8ed:	eb c3                	jmp    c001e8b2 <terminateTask(int)+0xa3>

c001e8ef <Thr::terminateFromIRQ(int)>:
c001e8ef:	83 ec 18             	sub    esp,0x18
c001e8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8f6:	e8 14 ff ff ff       	call   c001e80f <terminateTask(int)>
c001e8fb:	90                   	nop

c001e8fc <Semaphore::release()>:
c001e8fc:	83 ec 0c             	sub    esp,0xc
c001e8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e903:	e8 eb f4 ff ff       	call   c001ddf3 <lockStuff()>
c001e908:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e90b:	85 d2                	test   edx,edx
c001e90d:	74 1a                	je     c001e929 <Semaphore::release()+0x2d>
c001e90f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e912:	83 ec 0c             	sub    esp,0xc
c001e915:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e918:	52                   	push   edx
c001e919:	e8 c6 fa ff ff       	call   c001e3e4 <unblockTask(ThreadControlBlock*)>
c001e91e:	83 c4 10             	add    esp,0x10
c001e921:	83 c4 0c             	add    esp,0xc
c001e924:	e9 64 f8 ff ff       	jmp    c001e18d <unlockStuff()>
c001e929:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e92c:	83 c4 0c             	add    esp,0xc
c001e92f:	e9 59 f8 ff ff       	jmp    c001e18d <unlockStuff()>

c001e934 <__static_initialization_and_destruction_0(int, int)>:
c001e934:	83 ec 0c             	sub    esp,0xc
c001e937:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e93c:	0f 85 88 00 00 00    	jne    c001e9ca <__static_initialization_and_destruction_0(int, int)+0x96>
c001e942:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e94a:	75 7e                	jne    c001e9ca <__static_initialization_and_destruction_0(int, int)+0x96>
c001e94c:	83 ec 0c             	sub    esp,0xc
c001e94f:	68 28 19 03 c0       	push   0xc0031928
c001e954:	e8 47 a3 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	83 ec 04             	sub    esp,0x4
c001e95f:	68 bc d2 02 c0       	push   0xc002d2bc
c001e964:	68 28 19 03 c0       	push   0xc0031928
c001e969:	68 60 8c 02 c0       	push   0xc0028c60
c001e96e:	e8 77 44 ff ff       	call   c0012dea <__cxa_atexit>
c001e973:	83 c4 10             	add    esp,0x10
c001e976:	83 ec 0c             	sub    esp,0xc
c001e979:	68 1c 19 03 c0       	push   0xc003191c
c001e97e:	e8 1d a3 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e983:	83 c4 10             	add    esp,0x10
c001e986:	83 ec 04             	sub    esp,0x4
c001e989:	68 bc d2 02 c0       	push   0xc002d2bc
c001e98e:	68 1c 19 03 c0       	push   0xc003191c
c001e993:	68 60 8c 02 c0       	push   0xc0028c60
c001e998:	e8 4d 44 ff ff       	call   c0012dea <__cxa_atexit>
c001e99d:	83 c4 10             	add    esp,0x10
c001e9a0:	83 ec 0c             	sub    esp,0xc
c001e9a3:	68 10 19 03 c0       	push   0xc0031910
c001e9a8:	e8 f3 a2 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9ad:	83 c4 10             	add    esp,0x10
c001e9b0:	83 ec 04             	sub    esp,0x4
c001e9b3:	68 bc d2 02 c0       	push   0xc002d2bc
c001e9b8:	68 10 19 03 c0       	push   0xc0031910
c001e9bd:	68 60 8c 02 c0       	push   0xc0028c60
c001e9c2:	e8 23 44 ff ff       	call   c0012dea <__cxa_atexit>
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	90                   	nop
c001e9cb:	83 c4 0c             	add    esp,0xc
c001e9ce:	c3                   	ret    

c001e9cf <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9cf:	83 ec 0c             	sub    esp,0xc
c001e9d2:	83 ec 08             	sub    esp,0x8
c001e9d5:	68 ff ff 00 00       	push   0xffff
c001e9da:	6a 01                	push   0x1
c001e9dc:	e8 53 ff ff ff       	call   c001e934 <__static_initialization_and_destruction_0(int, int)>
c001e9e1:	83 c4 10             	add    esp,0x10
c001e9e4:	83 c4 0c             	add    esp,0xc
c001e9e7:	c3                   	ret    

c001e9e8 <Vm::inbv(unsigned short)>:
c001e9e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9ec:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9f1:	75 06                	jne    c001e9f9 <Vm::inbv(unsigned short)+0x11>
c001e9f3:	a0 6c 19 03 c0       	mov    al,ds:0xc003196c
c001e9f8:	c3                   	ret    
c001e9f9:	ec                   	in     al,dx
c001e9fa:	c3                   	ret    

c001e9fb <Vm::outbv(unsigned short, unsigned char)>:
c001e9fb:	53                   	push   ebx
c001e9fc:	83 ec 08             	sub    esp,0x8
c001e9ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea07:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea0c:	75 38                	jne    c001ea46 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea0e:	0f b6 c3             	movzx  eax,bl
c001ea11:	51                   	push   ecx
c001ea12:	51                   	push   ecx
c001ea13:	50                   	push   eax
c001ea14:	68 23 c5 02 c0       	push   0xc002c523
c001ea19:	e8 32 45 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001ea1e:	8b 15 6c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003196c
c001ea24:	83 c4 10             	add    esp,0x10
c001ea27:	8d 42 01             	lea    eax,[edx+0x1]
c001ea2a:	88 9a 80 19 03 c0    	mov    BYTE PTR [edx-0x3ffce680],bl
c001ea30:	a3 6c 19 03 c0       	mov    ds:0xc003196c,eax
c001ea35:	83 f8 20             	cmp    eax,0x20
c001ea38:	75 0f                	jne    c001ea49 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea3a:	c7 05 6c 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003196c,0x1f
c001ea44:	eb 03                	jmp    c001ea49 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea46:	88 d8                	mov    al,bl
c001ea48:	ee                   	out    dx,al
c001ea49:	83 c4 08             	add    esp,0x8
c001ea4c:	5b                   	pop    ebx
c001ea4d:	c3                   	ret    

c001ea4e <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea4e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea53:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea58:	c1 e0 04             	shl    eax,0x4
c001ea5b:	01 d0                	add    eax,edx
c001ea5d:	c3                   	ret    

c001ea5e <Vm::getSegment(unsigned int)>:
c001ea5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea62:	c1 e8 10             	shr    eax,0x10
c001ea65:	c3                   	ret    

c001ea66 <Vm::getOffset(unsigned int)>:
c001ea66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea6a:	c3                   	ret    

c001ea6b <Vm::mainloop2()>:
c001ea6b:	83 ec 0c             	sub    esp,0xc
c001ea6e:	e8 59 f3 ff ff       	call   c001ddcc <lockScheduler()>
c001ea73:	83 ec 0c             	sub    esp,0xc
c001ea76:	c6 05 65 19 03 c0 01 	mov    BYTE PTR ds:0xc0031965,0x1
c001ea7d:	6a 02                	push   0x2
c001ea7f:	e8 9c f7 ff ff       	call   c001e220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea89:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea8d:	52                   	push   edx
c001ea8e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea92:	52                   	push   edx
c001ea93:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea97:	52                   	push   edx
c001ea98:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea9c:	50                   	push   eax
c001ea9d:	e8 58 18 fe ff       	call   c00002fa <goToVM86>
c001eaa2:	83 c4 2c             	add    esp,0x2c
c001eaa5:	c3                   	ret    

c001eaa6 <Vm::mainVm8086Loop(void*)>:
c001eaa6:	83 ec 0c             	sub    esp,0xc
c001eaa9:	e8 20 f3 ff ff       	call   c001ddce <unlockScheduler()>
c001eaae:	83 c4 0c             	add    esp,0xc
c001eab1:	eb b8                	jmp    c001ea6b <Vm::mainloop2()>

c001eab3 <Vm::mainloop3(unsigned long)>:
c001eab3:	53                   	push   ebx
c001eab4:	83 ec 08             	sub    esp,0x8
c001eab7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eabb:	e8 0c f3 ff ff       	call   c001ddcc <lockScheduler()>
c001eac0:	83 ec 0c             	sub    esp,0xc
c001eac3:	89 1d 60 19 03 c0    	mov    DWORD PTR ds:0xc0031960,ebx
c001eac9:	6a 02                	push   0x2
c001eacb:	c6 05 64 19 03 c0 01 	mov    BYTE PTR ds:0xc0031964,0x1
c001ead2:	e8 49 f7 ff ff       	call   c001e220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ead7:	83 c4 18             	add    esp,0x18
c001eada:	5b                   	pop    ebx
c001eadb:	eb 8e                	jmp    c001ea6b <Vm::mainloop2()>

c001eadd <Vm::initialise8086()>:
c001eadd:	83 ec 0c             	sub    esp,0xc
c001eae0:	68 80 00 00 00       	push   0x80
c001eae5:	6a 00                	push   0x0
c001eae7:	68 a6 ea 01 c0       	push   0xc001eaa6
c001eaec:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c001eaf2:	e8 07 f4 ff ff       	call   c001defe <Process::createThread(void (*)(void*), void*, int)>
c001eaf7:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eafe:	a3 68 19 03 c0       	mov    ds:0xc0031968,eax
c001eb03:	68 00 01 00 00       	push   0x100
c001eb08:	a1 34 19 03 c0       	mov    eax,ds:0xc0031934
c001eb0d:	6a 00                	push   0x0
c001eb0f:	6a 00                	push   0x0
c001eb11:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb17:	e8 50 3b ff ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb1c:	83 c4 2c             	add    esp,0x2c
c001eb1f:	c3                   	ret    

c001eb20 <Vm::finish8086()>:
c001eb20:	53                   	push   ebx
c001eb21:	83 ec 08             	sub    esp,0x8
c001eb24:	e8 a3 f2 ff ff       	call   c001ddcc <lockScheduler()>
c001eb29:	80 3d 64 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031964,0x0
c001eb30:	75 0c                	jne    c001eb3e <Vm::finish8086()+0x1e>
c001eb32:	e8 d1 f5 ff ff       	call   c001e108 <schedule()>
c001eb37:	e8 92 f2 ff ff       	call   c001ddce <unlockScheduler()>
c001eb3c:	eb e6                	jmp    c001eb24 <Vm::finish8086()+0x4>
c001eb3e:	83 ec 0c             	sub    esp,0xc
c001eb41:	8b 1d 60 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031960
c001eb47:	ff 35 68 19 03 c0    	push   DWORD PTR ds:0xc0031968
c001eb4d:	c6 05 64 19 03 c0 00 	mov    BYTE PTR ds:0xc0031964,0x0
c001eb54:	e8 8b f8 ff ff       	call   c001e3e4 <unblockTask(ThreadControlBlock*)>
c001eb59:	e8 70 f2 ff ff       	call   c001ddce <unlockScheduler()>
c001eb5e:	89 d8                	mov    eax,ebx
c001eb60:	83 c4 18             	add    esp,0x18
c001eb63:	5b                   	pop    ebx
c001eb64:	c3                   	ret    

c001eb65 <Vm::getOutput8086(unsigned char*)>:
c001eb65:	83 ec 10             	sub    esp,0x10
c001eb68:	ff 35 6c 19 03 c0    	push   DWORD PTR ds:0xc003196c
c001eb6e:	68 80 19 03 c0       	push   0xc0031980
c001eb73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb77:	e8 c8 1b fe ff       	call   c0000744 <memcpy>
c001eb7c:	a1 6c 19 03 c0       	mov    eax,ds:0xc003196c
c001eb81:	c7 05 6c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003196c,0x0
c001eb8b:	83 c4 1c             	add    esp,0x1c
c001eb8e:	c3                   	ret    

c001eb8f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb8f:	55                   	push   ebp
c001eb90:	57                   	push   edi
c001eb91:	56                   	push   esi
c001eb92:	53                   	push   ebx
c001eb93:	83 ec 2c             	sub    esp,0x2c
c001eb96:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eb9a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eb9e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eba2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eba6:	e8 21 f2 ff ff       	call   c001ddcc <lockScheduler()>
c001ebab:	a0 65 19 03 c0       	mov    al,ds:0xc0031965
c001ebb0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebb4:	84 c0                	test   al,al
c001ebb6:	75 0c                	jne    c001ebc4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebb8:	e8 4b f5 ff ff       	call   c001e108 <schedule()>
c001ebbd:	e8 0c f2 ff ff       	call   c001ddce <unlockScheduler()>
c001ebc2:	eb e2                	jmp    c001eba6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebc4:	a1 68 19 03 c0       	mov    eax,ds:0xc0031968
c001ebc9:	c7 05 6c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003196c,0x0
c001ebd3:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ebd7:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ebdb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ebdf:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ebe3:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebe7:	50                   	push   eax
c001ebe8:	6a 20                	push   0x20
c001ebea:	6a 00                	push   0x0
c001ebec:	68 80 19 03 c0       	push   0xc0031980
c001ebf1:	e8 82 1b fe ff       	call   c0000778 <memset>
c001ebf6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ebfd:	e8 3e 0c ff ff       	call   c000f840 <malloc>
c001ec02:	83 c4 0c             	add    esp,0xc
c001ec05:	89 c7                	mov    edi,eax
c001ec07:	ff 35 34 19 03 c0    	push   DWORD PTR ds:0xc0031934
c001ec0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec11:	50                   	push   eax
c001ec12:	e8 91 48 ff ff       	call   c00134a8 <File::File(char const*, Process*)>
c001ec17:	83 c4 10             	add    esp,0x10
c001ec1a:	85 ff                	test   edi,edi
c001ec1c:	75 0a                	jne    c001ec28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	68 3f c5 02 c0       	push   0xc002c53f
c001ec26:	eb 27                	jmp    c001ec4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec28:	50                   	push   eax
c001ec29:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec2d:	50                   	push   eax
c001ec2e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec32:	50                   	push   eax
c001ec33:	57                   	push   edi
c001ec34:	e8 7f 4b ff ff       	call   c00137b8 <File::stat(unsigned long long*, bool*)>
c001ec39:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	89 e8                	mov    eax,ebp
c001ec43:	84 c0                	test   al,al
c001ec45:	74 19                	je     c001ec60 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec47:	83 ec 0c             	sub    esp,0xc
c001ec4a:	68 53 c5 02 c0       	push   0xc002c553
c001ec4f:	e8 9d b9 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001ec54:	31 ed                	xor    ebp,ebp
c001ec56:	e8 73 f1 ff ff       	call   c001ddce <unlockScheduler()>
c001ec5b:	83 c4 10             	add    esp,0x10
c001ec5e:	eb 75                	jmp    c001ecd5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec60:	50                   	push   eax
c001ec61:	50                   	push   eax
c001ec62:	6a 01                	push   0x1
c001ec64:	57                   	push   edi
c001ec65:	e8 a2 48 ff ff       	call   c001350c <File::open(FileOpenMode)>
c001ec6a:	83 c4 10             	add    esp,0x10
c001ec6d:	85 c0                	test   eax,eax
c001ec6f:	74 17                	je     c001ec88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec71:	83 ec 0c             	sub    esp,0xc
c001ec74:	68 6c c5 02 c0       	push   0xc002c56c
c001ec79:	e8 73 b9 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001ec7e:	e8 4b f1 ff ff       	call   c001ddce <unlockScheduler()>
c001ec83:	83 c4 10             	add    esp,0x10
c001ec86:	eb 4d                	jmp    c001ecd5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec88:	0f b7 f6             	movzx  esi,si
c001ec8b:	50                   	push   eax
c001ec8c:	0f b7 db             	movzx  ebx,bx
c001ec8f:	50                   	push   eax
c001ec90:	56                   	push   esi
c001ec91:	53                   	push   ebx
c001ec92:	e8 b7 fd ff ff       	call   c001ea4e <Vm::realToLinear(unsigned short, unsigned short)>
c001ec97:	5a                   	pop    edx
c001ec98:	8b 17                	mov    edx,DWORD PTR [edi]
c001ec9a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec9e:	51                   	push   ecx
c001ec9f:	50                   	push   eax
c001eca0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eca4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eca8:	57                   	push   edi
c001eca9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecac:	83 c4 14             	add    esp,0x14
c001ecaf:	57                   	push   edi
c001ecb0:	e8 b5 48 ff ff       	call   c001356a <File::close()>
c001ecb5:	c6 05 65 19 03 c0 00 	mov    BYTE PTR ds:0xc0031965,0x0
c001ecbc:	e8 0d f1 ff ff       	call   c001ddce <unlockScheduler()>
c001ecc1:	59                   	pop    ecx
c001ecc2:	ff 35 68 19 03 c0    	push   DWORD PTR ds:0xc0031968
c001ecc8:	e8 17 f7 ff ff       	call   c001e3e4 <unblockTask(ThreadControlBlock*)>
c001eccd:	83 c4 10             	add    esp,0x10
c001ecd0:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ecd5:	83 c4 2c             	add    esp,0x2c
c001ecd8:	89 e8                	mov    eax,ebp
c001ecda:	5b                   	pop    ebx
c001ecdb:	5e                   	pop    esi
c001ecdc:	5f                   	pop    edi
c001ecdd:	5d                   	pop    ebp
c001ecde:	c3                   	ret    

c001ecdf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ecdf:	57                   	push   edi
c001ece0:	56                   	push   esi
c001ece1:	53                   	push   ebx
c001ece2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ece6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecee:	83 e8 06             	sub    eax,0x6
c001ecf1:	0f b7 c0             	movzx  eax,ax
c001ecf4:	50                   	push   eax
c001ecf5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ecfa:	50                   	push   eax
c001ecfb:	e8 4e fd ff ff       	call   c001ea4e <Vm::realToLinear(unsigned short, unsigned short)>
c001ed00:	5a                   	pop    edx
c001ed01:	5e                   	pop    esi
c001ed02:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed05:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed08:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed0e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed11:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed14:	83 c2 02             	add    edx,0x2
c001ed17:	66 89 10             	mov    WORD PTR [eax],dx
c001ed1a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed1d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed21:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed24:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed28:	89 d6                	mov    esi,edx
c001ed2a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed30:	66 81 e6 ff fd       	and    si,0xfdff
c001ed35:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed39:	74 07                	je     c001ed42 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed3b:	89 d6                	mov    esi,edx
c001ed3d:	66 81 ce 00 02       	or     si,0x200
c001ed42:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed4b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed4f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed57:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed5a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed62:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed65:	5b                   	pop    ebx
c001ed66:	5e                   	pop    esi
c001ed67:	5f                   	pop    edi
c001ed68:	c3                   	ret    

c001ed69 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed69:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed6e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed73:	c1 e0 04             	shl    eax,0x4
c001ed76:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed79:	c3                   	ret    

c001ed7a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed84:	c1 e0 04             	shl    eax,0x4
c001ed87:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed8b:	c3                   	ret    

c001ed8c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed8c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed91:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed96:	c1 e0 04             	shl    eax,0x4
c001ed99:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed9c:	c3                   	ret    

c001ed9d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed9d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eda2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda7:	c1 e0 04             	shl    eax,0x4
c001edaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edae:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edb1:	c3                   	ret    

c001edb2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edb2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edb7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edbc:	c1 e0 04             	shl    eax,0x4
c001edbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edc3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edc7:	c3                   	ret    

c001edc8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edc8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edcd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edd2:	c1 e0 04             	shl    eax,0x4
c001edd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edd9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eddc:	c3                   	ret    

c001eddd <Vm::faultHandler(regs*)>:
c001eddd:	55                   	push   ebp
c001edde:	57                   	push   edi
c001eddf:	56                   	push   esi
c001ede0:	53                   	push   ebx
c001ede1:	83 ec 1c             	sub    esp,0x1c
c001ede4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ede8:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001edeb:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001edee:	0f b7 c1             	movzx  eax,cx
c001edf1:	50                   	push   eax
c001edf2:	0f b7 c3             	movzx  eax,bx
c001edf5:	c1 e3 04             	shl    ebx,0x4
c001edf8:	50                   	push   eax
c001edf9:	e8 50 fc ff ff       	call   c001ea4e <Vm::realToLinear(unsigned short, unsigned short)>
c001edfe:	5a                   	pop    edx
c001edff:	89 c5                	mov    ebp,eax
c001ee01:	5e                   	pop    esi
c001ee02:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee06:	50                   	push   eax
c001ee07:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee0b:	50                   	push   eax
c001ee0c:	e8 3d fc ff ff       	call   c001ea4e <Vm::realToLinear(unsigned short, unsigned short)>
c001ee11:	01 cb                	add    ebx,ecx
c001ee13:	89 c6                	mov    esi,eax
c001ee15:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee19:	50                   	push   eax
c001ee1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee1e:	50                   	push   eax
c001ee1f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee23:	50                   	push   eax
c001ee24:	55                   	push   ebp
c001ee25:	53                   	push   ebx
c001ee26:	b3 06                	mov    bl,0x6
c001ee28:	68 85 c5 02 c0       	push   0xc002c585
c001ee2d:	e8 1e 41 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001ee32:	83 c4 20             	add    esp,0x20
c001ee35:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee3a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee3f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee43:	3c 9d                	cmp    al,0x9d
c001ee45:	0f 84 d7 02 00 00    	je     c001f122 <Vm::faultHandler(regs*)+0x345>
c001ee4b:	0f 87 a3 00 00 00    	ja     c001eef4 <Vm::faultHandler(regs*)+0x117>
c001ee51:	3c 66                	cmp    al,0x66
c001ee53:	0f 84 15 02 00 00    	je     c001f06e <Vm::faultHandler(regs*)+0x291>
c001ee59:	77 5f                	ja     c001eeba <Vm::faultHandler(regs*)+0xdd>
c001ee5b:	3c 36                	cmp    al,0x36
c001ee5d:	0f 84 f1 01 00 00    	je     c001f054 <Vm::faultHandler(regs*)+0x277>
c001ee63:	77 28                	ja     c001ee8d <Vm::faultHandler(regs*)+0xb0>
c001ee65:	3c 26                	cmp    al,0x26
c001ee67:	0f 84 99 01 00 00    	je     c001f006 <Vm::faultHandler(regs*)+0x229>
c001ee6d:	3c 2e                	cmp    al,0x2e
c001ee6f:	0f 85 3b 07 00 00    	jne    c001f5b0 <Vm::faultHandler(regs*)+0x7d3>
c001ee75:	83 ec 0c             	sub    esp,0xc
c001ee78:	31 db                	xor    ebx,ebx
c001ee7a:	68 9a c5 02 c0       	push   0xc002c59a
c001ee7f:	e8 cc 40 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001ee84:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee87:	83 c4 10             	add    esp,0x10
c001ee8a:	45                   	inc    ebp
c001ee8b:	eb b2                	jmp    c001ee3f <Vm::faultHandler(regs*)+0x62>
c001ee8d:	3c 64                	cmp    al,0x64
c001ee8f:	0f 84 8b 01 00 00    	je     c001f020 <Vm::faultHandler(regs*)+0x243>
c001ee95:	0f 87 9f 01 00 00    	ja     c001f03a <Vm::faultHandler(regs*)+0x25d>
c001ee9b:	3c 3e                	cmp    al,0x3e
c001ee9d:	0f 85 0d 07 00 00    	jne    c001f5b0 <Vm::faultHandler(regs*)+0x7d3>
c001eea3:	83 ec 0c             	sub    esp,0xc
c001eea6:	b3 01                	mov    bl,0x1
c001eea8:	68 9e c5 02 c0       	push   0xc002c59e
c001eead:	e8 9e 40 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001eeb2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeb5:	83 c4 10             	add    esp,0x10
c001eeb8:	eb d0                	jmp    c001ee8a <Vm::faultHandler(regs*)+0xad>
c001eeba:	3c 6d                	cmp    al,0x6d
c001eebc:	0f 84 af 03 00 00    	je     c001f271 <Vm::faultHandler(regs*)+0x494>
c001eec2:	77 15                	ja     c001eed9 <Vm::faultHandler(regs*)+0xfc>
c001eec4:	3c 67                	cmp    al,0x67
c001eec6:	0f 84 bf 01 00 00    	je     c001f08b <Vm::faultHandler(regs*)+0x2ae>
c001eecc:	3c 6c                	cmp    al,0x6c
c001eece:	0f 84 3f 03 00 00    	je     c001f213 <Vm::faultHandler(regs*)+0x436>
c001eed4:	e9 d7 06 00 00       	jmp    c001f5b0 <Vm::faultHandler(regs*)+0x7d3>
c001eed9:	3c 6f                	cmp    al,0x6f
c001eedb:	0f 84 a4 04 00 00    	je     c001f385 <Vm::faultHandler(regs*)+0x5a8>
c001eee1:	0f 82 11 04 00 00    	jb     c001f2f8 <Vm::faultHandler(regs*)+0x51b>
c001eee7:	3c 9c                	cmp    al,0x9c
c001eee9:	0f 84 ba 01 00 00    	je     c001f0a9 <Vm::faultHandler(regs*)+0x2cc>
c001eeef:	e9 bc 06 00 00       	jmp    c001f5b0 <Vm::faultHandler(regs*)+0x7d3>
c001eef4:	3c ec                	cmp    al,0xec
c001eef6:	0f 84 24 06 00 00    	je     c001f520 <Vm::faultHandler(regs*)+0x743>
c001eefc:	0f 87 93 00 00 00    	ja     c001ef95 <Vm::faultHandler(regs*)+0x1b8>
c001ef02:	3c e4                	cmp    al,0xe4
c001ef04:	0f 84 5c 05 00 00    	je     c001f466 <Vm::faultHandler(regs*)+0x689>
c001ef0a:	77 6a                	ja     c001ef76 <Vm::faultHandler(regs*)+0x199>
c001ef0c:	3c cd                	cmp    al,0xcd
c001ef0e:	0f 84 7e 02 00 00    	je     c001f192 <Vm::faultHandler(regs*)+0x3b5>
c001ef14:	3c cf                	cmp    al,0xcf
c001ef16:	0f 85 94 06 00 00    	jne    c001f5b0 <Vm::faultHandler(regs*)+0x7d3>
c001ef1c:	83 ec 0c             	sub    esp,0xc
c001ef1f:	68 e2 c5 02 c0       	push   0xc002c5e2
c001ef24:	e8 27 40 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001ef29:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef2c:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef2f:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef33:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef36:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef3a:	0d 00 02 02 00       	or     eax,0x20200
c001ef3f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef42:	56                   	push   esi
c001ef43:	53                   	push   ebx
c001ef44:	52                   	push   edx
c001ef45:	68 e8 c5 02 c0       	push   0xc002c5e8
c001ef4a:	e8 01 40 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001ef4f:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef53:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef59:	66 c1 e8 09          	shr    ax,0x9
c001ef5d:	83 e0 01             	and    eax,0x1
c001ef60:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef63:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef66:	83 c0 06             	add    eax,0x6
c001ef69:	25 ff ff 00 00       	and    eax,0xffff
c001ef6e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef71:	e9 95 02 00 00       	jmp    c001f20b <Vm::faultHandler(regs*)+0x42e>
c001ef76:	3c e6                	cmp    al,0xe6
c001ef78:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef7c:	0f 84 4e 05 00 00    	je     c001f4d0 <Vm::faultHandler(regs*)+0x6f3>
c001ef82:	0f 82 0a 05 00 00    	jb     c001f492 <Vm::faultHandler(regs*)+0x6b5>
c001ef88:	3c e7                	cmp    al,0xe7
c001ef8a:	0f 84 69 05 00 00    	je     c001f4f9 <Vm::faultHandler(regs*)+0x71c>
c001ef90:	e9 1b 06 00 00       	jmp    c001f5b0 <Vm::faultHandler(regs*)+0x7d3>
c001ef95:	3c ef                	cmp    al,0xef
c001ef97:	0f 84 e6 05 00 00    	je     c001f583 <Vm::faultHandler(regs*)+0x7a6>
c001ef9d:	77 37                	ja     c001efd6 <Vm::faultHandler(regs*)+0x1f9>
c001ef9f:	3c ed                	cmp    al,0xed
c001efa1:	0f 84 a3 05 00 00    	je     c001f54a <Vm::faultHandler(regs*)+0x76d>
c001efa7:	3c ee                	cmp    al,0xee
c001efa9:	0f 85 01 06 00 00    	jne    c001f5b0 <Vm::faultHandler(regs*)+0x7d3>
c001efaf:	52                   	push   edx
c001efb0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efb3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efb6:	68 83 c6 02 c0       	push   0xc002c683
c001efbb:	e8 90 3f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001efc0:	59                   	pop    ecx
c001efc1:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001efc5:	5b                   	pop    ebx
c001efc6:	50                   	push   eax
c001efc7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001efcb:	50                   	push   eax
c001efcc:	e8 2a fa ff ff       	call   c001e9fb <Vm::outbv(unsigned short, unsigned char)>
c001efd1:	e9 a5 05 00 00       	jmp    c001f57b <Vm::faultHandler(regs*)+0x79e>
c001efd6:	3c fa                	cmp    al,0xfa
c001efd8:	0f 84 f7 01 00 00    	je     c001f1d5 <Vm::faultHandler(regs*)+0x3f8>
c001efde:	3c fb                	cmp    al,0xfb
c001efe0:	0f 84 0a 02 00 00    	je     c001f1f0 <Vm::faultHandler(regs*)+0x413>
c001efe6:	3c f3                	cmp    al,0xf3
c001efe8:	0f 85 c2 05 00 00    	jne    c001f5b0 <Vm::faultHandler(regs*)+0x7d3>
c001efee:	83 ec 0c             	sub    esp,0xc
c001eff1:	68 bb c5 02 c0       	push   0xc002c5bb
c001eff6:	e8 55 3f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001effb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001effe:	83 c4 10             	add    esp,0x10
c001f001:	e9 84 fe ff ff       	jmp    c001ee8a <Vm::faultHandler(regs*)+0xad>
c001f006:	83 ec 0c             	sub    esp,0xc
c001f009:	b3 02                	mov    bl,0x2
c001f00b:	68 96 c5 02 c0       	push   0xc002c596
c001f010:	e8 3b 3f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f015:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f018:	83 c4 10             	add    esp,0x10
c001f01b:	e9 6a fe ff ff       	jmp    c001ee8a <Vm::faultHandler(regs*)+0xad>
c001f020:	83 ec 0c             	sub    esp,0xc
c001f023:	b3 03                	mov    bl,0x3
c001f025:	68 a2 c5 02 c0       	push   0xc002c5a2
c001f02a:	e8 21 3f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f02f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f032:	83 c4 10             	add    esp,0x10
c001f035:	e9 50 fe ff ff       	jmp    c001ee8a <Vm::faultHandler(regs*)+0xad>
c001f03a:	83 ec 0c             	sub    esp,0xc
c001f03d:	b3 04                	mov    bl,0x4
c001f03f:	68 a6 c5 02 c0       	push   0xc002c5a6
c001f044:	e8 07 3f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f049:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f04c:	83 c4 10             	add    esp,0x10
c001f04f:	e9 36 fe ff ff       	jmp    c001ee8a <Vm::faultHandler(regs*)+0xad>
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	b3 05                	mov    bl,0x5
c001f059:	68 aa c5 02 c0       	push   0xc002c5aa
c001f05e:	e8 ed 3e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f063:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f066:	83 c4 10             	add    esp,0x10
c001f069:	e9 1c fe ff ff       	jmp    c001ee8a <Vm::faultHandler(regs*)+0xad>
c001f06e:	83 ec 0c             	sub    esp,0xc
c001f071:	68 ae c5 02 c0       	push   0xc002c5ae
c001f076:	e8 d5 3e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f07b:	83 c4 10             	add    esp,0x10
c001f07e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f081:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f086:	e9 ff fd ff ff       	jmp    c001ee8a <Vm::faultHandler(regs*)+0xad>
c001f08b:	50                   	push   eax
c001f08c:	50                   	push   eax
c001f08d:	6a 01                	push   0x1
c001f08f:	68 b3 c5 02 c0       	push   0xc002c5b3
c001f094:	e8 b7 3e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f099:	83 c4 10             	add    esp,0x10
c001f09c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f09f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0a4:	e9 e1 fd ff ff       	jmp    c001ee8a <Vm::faultHandler(regs*)+0xad>
c001f0a9:	83 ec 0c             	sub    esp,0xc
c001f0ac:	68 c1 c5 02 c0       	push   0xc002c5c1
c001f0b1:	e8 9a 3e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f0b6:	83 c4 10             	add    esp,0x10
c001f0b9:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0bc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0c1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0c4:	74 2f                	je     c001f0f5 <Vm::faultHandler(regs*)+0x318>
c001f0c6:	83 ea 04             	sub    edx,0x4
c001f0c9:	25 ff 0d 00 00       	and    eax,0xdff
c001f0ce:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0d4:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0d7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0e0:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0e4:	0f 84 bf 04 00 00    	je     c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f0ea:	80 cc 02             	or     ah,0x2
c001f0ed:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0f0:	e9 b4 04 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f0f5:	83 ea 02             	sub    edx,0x2
c001f0f8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0fe:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f101:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f105:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f10b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f10f:	74 05                	je     c001f116 <Vm::faultHandler(regs*)+0x339>
c001f111:	80 cc 02             	or     ah,0x2
c001f114:	eb 03                	jmp    c001f119 <Vm::faultHandler(regs*)+0x33c>
c001f116:	80 e4 fd             	and    ah,0xfd
c001f119:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f11d:	e9 87 04 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f122:	83 ec 0c             	sub    esp,0xc
c001f125:	68 c8 c5 02 c0       	push   0xc002c5c8
c001f12a:	e8 21 3e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f12f:	83 c4 10             	add    esp,0x10
c001f132:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f137:	74 28                	je     c001f161 <Vm::faultHandler(regs*)+0x384>
c001f139:	8b 06                	mov    eax,DWORD PTR [esi]
c001f13b:	25 ff 0d 00 00       	and    eax,0xdff
c001f140:	0d 00 02 02 00       	or     eax,0x20200
c001f145:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f148:	8b 06                	mov    eax,DWORD PTR [esi]
c001f14a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f150:	c1 e8 09             	shr    eax,0x9
c001f153:	83 e0 01             	and    eax,0x1
c001f156:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f159:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f15c:	83 c0 04             	add    eax,0x4
c001f15f:	eb 24                	jmp    c001f185 <Vm::faultHandler(regs*)+0x3a8>
c001f161:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f164:	0d 00 02 02 00       	or     eax,0x20200
c001f169:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f16c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f16f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f175:	66 c1 e8 09          	shr    ax,0x9
c001f179:	83 e0 01             	and    eax,0x1
c001f17c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f17f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f182:	83 c0 02             	add    eax,0x2
c001f185:	25 ff ff 00 00       	and    eax,0xffff
c001f18a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f18d:	e9 17 04 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f192:	53                   	push   ebx
c001f193:	53                   	push   ebx
c001f194:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f198:	50                   	push   eax
c001f199:	68 ce c5 02 c0       	push   0xc002c5ce
c001f19e:	e8 ad 3d ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f1a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1a7:	83 c4 10             	add    esp,0x10
c001f1aa:	3c ee                	cmp    al,0xee
c001f1ac:	75 10                	jne    c001f1be <Vm::faultHandler(regs*)+0x3e1>
c001f1ae:	83 ec 0c             	sub    esp,0xc
c001f1b1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1b4:	e8 fa f8 ff ff       	call   c001eab3 <Vm::mainloop3(unsigned long)>
c001f1b9:	e9 c0 03 00 00       	jmp    c001f57e <Vm::faultHandler(regs*)+0x7a1>
c001f1be:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1c2:	83 ec 0c             	sub    esp,0xc
c001f1c5:	53                   	push   ebx
c001f1c6:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1ca:	53                   	push   ebx
c001f1cb:	55                   	push   ebp
c001f1cc:	50                   	push   eax
c001f1cd:	57                   	push   edi
c001f1ce:	e8 0c fb ff ff       	call   c001ecdf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f1d3:	eb 36                	jmp    c001f20b <Vm::faultHandler(regs*)+0x42e>
c001f1d5:	83 ec 0c             	sub    esp,0xc
c001f1d8:	68 d8 c5 02 c0       	push   0xc002c5d8
c001f1dd:	e8 6e 3d ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f1e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1e7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f1eb:	e9 8b 03 00 00       	jmp    c001f57b <Vm::faultHandler(regs*)+0x79e>
c001f1f0:	83 ec 0c             	sub    esp,0xc
c001f1f3:	68 dd c5 02 c0       	push   0xc002c5dd
c001f1f8:	e8 53 3d ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f1fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f202:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f206:	e9 70 03 00 00       	jmp    c001f57b <Vm::faultHandler(regs*)+0x79e>
c001f20b:	83 c4 20             	add    esp,0x20
c001f20e:	e9 99 03 00 00       	jmp    c001f5ac <Vm::faultHandler(regs*)+0x7cf>
c001f213:	83 ec 0c             	sub    esp,0xc
c001f216:	68 1b c6 02 c0       	push   0xc002c61b
c001f21b:	e8 30 3d ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f220:	83 c4 10             	add    esp,0x10
c001f223:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f226:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f22b:	74 0d                	je     c001f23a <Vm::faultHandler(regs*)+0x45d>
c001f22d:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f234:	0f 87 9e 01 00 00    	ja     c001f3d8 <Vm::faultHandler(regs*)+0x5fb>
c001f23a:	83 ec 0c             	sub    esp,0xc
c001f23d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f241:	0f b7 db             	movzx  ebx,bx
c001f244:	50                   	push   eax
c001f245:	e8 9e f7 ff ff       	call   c001e9e8 <Vm::inbv(unsigned short)>
c001f24a:	83 c4 0c             	add    esp,0xc
c001f24d:	0f b6 c0             	movzx  eax,al
c001f250:	50                   	push   eax
c001f251:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f255:	50                   	push   eax
c001f256:	53                   	push   ebx
c001f257:	e8 41 fb ff ff       	call   c001ed9d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f25c:	83 c4 10             	add    esp,0x10
c001f25f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f262:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f266:	74 03                	je     c001f26b <Vm::faultHandler(regs*)+0x48e>
c001f268:	48                   	dec    eax
c001f269:	eb 01                	jmp    c001f26c <Vm::faultHandler(regs*)+0x48f>
c001f26b:	40                   	inc    eax
c001f26c:	0f b7 c0             	movzx  eax,ax
c001f26f:	eb 7f                	jmp    c001f2f0 <Vm::faultHandler(regs*)+0x513>
c001f271:	83 ec 0c             	sub    esp,0xc
c001f274:	68 4d c6 02 c0       	push   0xc002c64d
c001f279:	e8 d2 3c ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f27e:	83 c4 10             	add    esp,0x10
c001f281:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f284:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f289:	74 0d                	je     c001f298 <Vm::faultHandler(regs*)+0x4bb>
c001f28b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f292:	0f 87 40 01 00 00    	ja     c001f3d8 <Vm::faultHandler(regs*)+0x5fb>
c001f298:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f29b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f29f:	0f b7 db             	movzx  ebx,bx
c001f2a2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2a7:	74 20                	je     c001f2c9 <Vm::faultHandler(regs*)+0x4ec>
c001f2a9:	ed                   	in     eax,dx
c001f2aa:	51                   	push   ecx
c001f2ab:	50                   	push   eax
c001f2ac:	56                   	push   esi
c001f2ad:	53                   	push   ebx
c001f2ae:	e8 15 fb ff ff       	call   c001edc8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2b3:	83 c4 10             	add    esp,0x10
c001f2b6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2b9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2bd:	74 05                	je     c001f2c4 <Vm::faultHandler(regs*)+0x4e7>
c001f2bf:	83 e8 04             	sub    eax,0x4
c001f2c2:	eb 27                	jmp    c001f2eb <Vm::faultHandler(regs*)+0x50e>
c001f2c4:	83 c0 04             	add    eax,0x4
c001f2c7:	eb 22                	jmp    c001f2eb <Vm::faultHandler(regs*)+0x50e>
c001f2c9:	66 ed                	in     ax,dx
c001f2cb:	0f b7 c0             	movzx  eax,ax
c001f2ce:	52                   	push   edx
c001f2cf:	50                   	push   eax
c001f2d0:	56                   	push   esi
c001f2d1:	53                   	push   ebx
c001f2d2:	e8 db fa ff ff       	call   c001edb2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f2d7:	83 c4 10             	add    esp,0x10
c001f2da:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2dd:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2e1:	74 05                	je     c001f2e8 <Vm::faultHandler(regs*)+0x50b>
c001f2e3:	83 e8 02             	sub    eax,0x2
c001f2e6:	eb 03                	jmp    c001f2eb <Vm::faultHandler(regs*)+0x50e>
c001f2e8:	83 c0 02             	add    eax,0x2
c001f2eb:	25 ff ff 00 00       	and    eax,0xffff
c001f2f0:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f2f3:	e9 b1 02 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f2f8:	83 ec 0c             	sub    esp,0xc
c001f2fb:	4b                   	dec    ebx
c001f2fc:	68 53 c6 02 c0       	push   0xc002c653
c001f301:	e8 4a 3c ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f306:	83 c4 10             	add    esp,0x10
c001f309:	80 fb 05             	cmp    bl,0x5
c001f30c:	77 0a                	ja     c001f318 <Vm::faultHandler(regs*)+0x53b>
c001f30e:	0f b6 db             	movzx  ebx,bl
c001f311:	ff 24 9d c4 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd393c]
c001f318:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f31c:	eb 1b                	jmp    c001f339 <Vm::faultHandler(regs*)+0x55c>
c001f31e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f322:	eb 15                	jmp    c001f339 <Vm::faultHandler(regs*)+0x55c>
c001f324:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f328:	eb 0f                	jmp    c001f339 <Vm::faultHandler(regs*)+0x55c>
c001f32a:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f32e:	eb 09                	jmp    c001f339 <Vm::faultHandler(regs*)+0x55c>
c001f330:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f333:	eb 04                	jmp    c001f339 <Vm::faultHandler(regs*)+0x55c>
c001f335:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f339:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f33e:	74 0d                	je     c001f34d <Vm::faultHandler(regs*)+0x570>
c001f340:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f347:	0f 87 8b 00 00 00    	ja     c001f3d8 <Vm::faultHandler(regs*)+0x5fb>
c001f34d:	53                   	push   ebx
c001f34e:	53                   	push   ebx
c001f34f:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f353:	52                   	push   edx
c001f354:	50                   	push   eax
c001f355:	e8 0f fa ff ff       	call   c001ed69 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f35a:	5e                   	pop    esi
c001f35b:	0f b6 c0             	movzx  eax,al
c001f35e:	5d                   	pop    ebp
c001f35f:	50                   	push   eax
c001f360:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f364:	50                   	push   eax
c001f365:	e8 91 f6 ff ff       	call   c001e9fb <Vm::outbv(unsigned short, unsigned char)>
c001f36a:	83 c4 10             	add    esp,0x10
c001f36d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f370:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f374:	74 03                	je     c001f379 <Vm::faultHandler(regs*)+0x59c>
c001f376:	48                   	dec    eax
c001f377:	eb 01                	jmp    c001f37a <Vm::faultHandler(regs*)+0x59d>
c001f379:	40                   	inc    eax
c001f37a:	0f b7 c0             	movzx  eax,ax
c001f37d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f380:	e9 24 02 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f385:	83 ec 0c             	sub    esp,0xc
c001f388:	4b                   	dec    ebx
c001f389:	68 53 c6 02 c0       	push   0xc002c653
c001f38e:	e8 bd 3b ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	80 fb 05             	cmp    bl,0x5
c001f399:	77 0a                	ja     c001f3a5 <Vm::faultHandler(regs*)+0x5c8>
c001f39b:	0f b6 db             	movzx  ebx,bl
c001f39e:	ff 24 9d dc c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3924]
c001f3a5:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3a9:	eb 1b                	jmp    c001f3c6 <Vm::faultHandler(regs*)+0x5e9>
c001f3ab:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3af:	eb 15                	jmp    c001f3c6 <Vm::faultHandler(regs*)+0x5e9>
c001f3b1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3b5:	eb 0f                	jmp    c001f3c6 <Vm::faultHandler(regs*)+0x5e9>
c001f3b7:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3bb:	eb 09                	jmp    c001f3c6 <Vm::faultHandler(regs*)+0x5e9>
c001f3bd:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3c0:	eb 04                	jmp    c001f3c6 <Vm::faultHandler(regs*)+0x5e9>
c001f3c2:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3c6:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3c9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3ce:	74 39                	je     c001f409 <Vm::faultHandler(regs*)+0x62c>
c001f3d0:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f3d6:	76 31                	jbe    c001f409 <Vm::faultHandler(regs*)+0x62c>
c001f3d8:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f3dc:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f3e0:	51                   	push   ecx
c001f3e1:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f3e5:	51                   	push   ecx
c001f3e6:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f3ea:	51                   	push   ecx
c001f3eb:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f3ef:	51                   	push   ecx
c001f3f0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3f4:	52                   	push   edx
c001f3f5:	50                   	push   eax
c001f3f6:	50                   	push   eax
c001f3f7:	68 20 c6 02 c0       	push   0xc002c620
c001f3fc:	e8 4f 3b ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f401:	83 c4 20             	add    esp,0x20
c001f404:	e9 fb 01 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x827>
c001f409:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f40c:	0f b7 d3             	movzx  edx,bx
c001f40f:	81 e6 00 04 00 00    	and    esi,0x400
c001f415:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f418:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f41d:	74 1d                	je     c001f43c <Vm::faultHandler(regs*)+0x65f>
c001f41f:	51                   	push   ecx
c001f420:	51                   	push   ecx
c001f421:	52                   	push   edx
c001f422:	50                   	push   eax
c001f423:	e8 64 f9 ff ff       	call   c001ed8c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f428:	83 c4 10             	add    esp,0x10
c001f42b:	89 ea                	mov    edx,ebp
c001f42d:	ef                   	out    dx,eax
c001f42e:	85 f6                	test   esi,esi
c001f430:	74 05                	je     c001f437 <Vm::faultHandler(regs*)+0x65a>
c001f432:	83 eb 04             	sub    ebx,0x4
c001f435:	eb 21                	jmp    c001f458 <Vm::faultHandler(regs*)+0x67b>
c001f437:	83 c3 04             	add    ebx,0x4
c001f43a:	eb 1c                	jmp    c001f458 <Vm::faultHandler(regs*)+0x67b>
c001f43c:	51                   	push   ecx
c001f43d:	51                   	push   ecx
c001f43e:	52                   	push   edx
c001f43f:	50                   	push   eax
c001f440:	e8 35 f9 ff ff       	call   c001ed7a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f445:	83 c4 10             	add    esp,0x10
c001f448:	89 ea                	mov    edx,ebp
c001f44a:	66 ef                	out    dx,ax
c001f44c:	85 f6                	test   esi,esi
c001f44e:	74 05                	je     c001f455 <Vm::faultHandler(regs*)+0x678>
c001f450:	83 eb 02             	sub    ebx,0x2
c001f453:	eb 03                	jmp    c001f458 <Vm::faultHandler(regs*)+0x67b>
c001f455:	83 c3 02             	add    ebx,0x2
c001f458:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f45e:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f461:	e9 43 01 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f466:	53                   	push   ebx
c001f467:	53                   	push   ebx
c001f468:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f46c:	50                   	push   eax
c001f46d:	68 59 c6 02 c0       	push   0xc002c659
c001f472:	e8 d9 3a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f477:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f47e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f482:	89 04 24             	mov    DWORD PTR [esp],eax
c001f485:	e8 5e f5 ff ff       	call   c001e9e8 <Vm::inbv(unsigned short)>
c001f48a:	0f b6 c0             	movzx  eax,al
c001f48d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f490:	eb 5e                	jmp    c001f4f0 <Vm::faultHandler(regs*)+0x713>
c001f492:	51                   	push   ecx
c001f493:	51                   	push   ecx
c001f494:	53                   	push   ebx
c001f495:	68 5f c6 02 c0       	push   0xc002c65f
c001f49a:	e8 b1 3a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f49f:	83 c4 10             	add    esp,0x10
c001f4a2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4a7:	74 07                	je     c001f4b0 <Vm::faultHandler(regs*)+0x6d3>
c001f4a9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4ad:	ed                   	in     eax,dx
c001f4ae:	eb 14                	jmp    c001f4c4 <Vm::faultHandler(regs*)+0x6e7>
c001f4b0:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4b3:	66 31 db             	xor    bx,bx
c001f4b6:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4b9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4bd:	66 ed                	in     ax,dx
c001f4bf:	0f b7 c0             	movzx  eax,ax
c001f4c2:	09 d8                	or     eax,ebx
c001f4c4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4c7:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4cb:	e9 dc 00 00 00       	jmp    c001f5ac <Vm::faultHandler(regs*)+0x7cf>
c001f4d0:	50                   	push   eax
c001f4d1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4d4:	53                   	push   ebx
c001f4d5:	68 65 c6 02 c0       	push   0xc002c665
c001f4da:	e8 71 3a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f4df:	58                   	pop    eax
c001f4e0:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f4e4:	5a                   	pop    edx
c001f4e5:	50                   	push   eax
c001f4e6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4ea:	50                   	push   eax
c001f4eb:	e8 0b f5 ff ff       	call   c001e9fb <Vm::outbv(unsigned short, unsigned char)>
c001f4f0:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4f4:	e9 85 00 00 00       	jmp    c001f57e <Vm::faultHandler(regs*)+0x7a1>
c001f4f9:	50                   	push   eax
c001f4fa:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4fd:	53                   	push   ebx
c001f4fe:	68 6e c6 02 c0       	push   0xc002c66e
c001f503:	e8 48 3a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f508:	83 c4 10             	add    esp,0x10
c001f50b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f50f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f514:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f517:	74 03                	je     c001f51c <Vm::faultHandler(regs*)+0x73f>
c001f519:	ef                   	out    dx,eax
c001f51a:	eb ab                	jmp    c001f4c7 <Vm::faultHandler(regs*)+0x6ea>
c001f51c:	66 ef                	out    dx,ax
c001f51e:	eb a7                	jmp    c001f4c7 <Vm::faultHandler(regs*)+0x6ea>
c001f520:	55                   	push   ebp
c001f521:	55                   	push   ebp
c001f522:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f525:	68 77 c6 02 c0       	push   0xc002c677
c001f52a:	e8 21 3a ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f52f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f536:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f53a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f53d:	e8 a6 f4 ff ff       	call   c001e9e8 <Vm::inbv(unsigned short)>
c001f542:	0f b6 c0             	movzx  eax,al
c001f545:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f548:	eb 31                	jmp    c001f57b <Vm::faultHandler(regs*)+0x79e>
c001f54a:	56                   	push   esi
c001f54b:	56                   	push   esi
c001f54c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f54f:	68 7d c6 02 c0       	push   0xc002c67d
c001f554:	e8 f7 39 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f559:	83 c4 10             	add    esp,0x10
c001f55c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f55f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f564:	74 03                	je     c001f569 <Vm::faultHandler(regs*)+0x78c>
c001f566:	ed                   	in     eax,dx
c001f567:	eb 0d                	jmp    c001f576 <Vm::faultHandler(regs*)+0x799>
c001f569:	66 ed                	in     ax,dx
c001f56b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f56e:	0f b7 c0             	movzx  eax,ax
c001f571:	66 31 d2             	xor    dx,dx
c001f574:	09 d0                	or     eax,edx
c001f576:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f579:	eb 2e                	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f57b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f57e:	83 c4 10             	add    esp,0x10
c001f581:	eb 29                	jmp    c001f5ac <Vm::faultHandler(regs*)+0x7cf>
c001f583:	50                   	push   eax
c001f584:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f587:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f58a:	68 8c c6 02 c0       	push   0xc002c68c
c001f58f:	e8 bc 39 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f594:	83 c4 10             	add    esp,0x10
c001f597:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f59a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f59f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5a2:	74 03                	je     c001f5a7 <Vm::faultHandler(regs*)+0x7ca>
c001f5a4:	ef                   	out    dx,eax
c001f5a5:	eb 02                	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x7cc>
c001f5a7:	66 ef                	out    dx,ax
c001f5a9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5ac:	b0 01                	mov    al,0x1
c001f5ae:	eb 56                	jmp    c001f606 <Vm::faultHandler(regs*)+0x829>
c001f5b0:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5b4:	51                   	push   ecx
c001f5b5:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5b9:	51                   	push   ecx
c001f5ba:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5be:	51                   	push   ecx
c001f5bf:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5c3:	51                   	push   ecx
c001f5c4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5c8:	52                   	push   edx
c001f5c9:	50                   	push   eax
c001f5ca:	50                   	push   eax
c001f5cb:	68 95 c6 02 c0       	push   0xc002c695
c001f5d0:	e8 7b 39 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c001f5d5:	83 c4 20             	add    esp,0x20
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	6a 60                	push   0x60
c001f5dd:	e8 06 f4 ff ff       	call   c001e9e8 <Vm::inbv(unsigned short)>
c001f5e2:	83 c4 10             	add    esp,0x10
c001f5e5:	3c 1c                	cmp    al,0x1c
c001f5e7:	74 04                	je     c001f5ed <Vm::faultHandler(regs*)+0x810>
c001f5e9:	3c 5a                	cmp    al,0x5a
c001f5eb:	75 eb                	jne    c001f5d8 <Vm::faultHandler(regs*)+0x7fb>
c001f5ed:	3c 1c                	cmp    al,0x1c
c001f5ef:	74 04                	je     c001f5f5 <Vm::faultHandler(regs*)+0x818>
c001f5f1:	3c 5a                	cmp    al,0x5a
c001f5f3:	75 0f                	jne    c001f604 <Vm::faultHandler(regs*)+0x827>
c001f5f5:	83 ec 0c             	sub    esp,0xc
c001f5f8:	6a 60                	push   0x60
c001f5fa:	e8 e9 f3 ff ff       	call   c001e9e8 <Vm::inbv(unsigned short)>
c001f5ff:	83 c4 10             	add    esp,0x10
c001f602:	eb e9                	jmp    c001f5ed <Vm::faultHandler(regs*)+0x810>
c001f604:	31 c0                	xor    eax,eax
c001f606:	83 c4 1c             	add    esp,0x1c
c001f609:	5b                   	pop    ebx
c001f60a:	5e                   	pop    esi
c001f60b:	5f                   	pop    edi
c001f60c:	5d                   	pop    ebp
c001f60d:	c3                   	ret    

c001f60e <Vm::fpuInternalTo32(unsigned long long)>:
c001f60e:	57                   	push   edi
c001f60f:	56                   	push   esi
c001f610:	53                   	push   ebx
c001f611:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f619:	89 d6                	mov    esi,edx
c001f61b:	89 d7                	mov    edi,edx
c001f61d:	89 c1                	mov    ecx,eax
c001f61f:	c1 ef 14             	shr    edi,0x14
c001f622:	89 d3                	mov    ebx,edx
c001f624:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f62a:	31 d2                	xor    edx,edx
c001f62c:	89 f8                	mov    eax,edi
c001f62e:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f634:	bf ff 00 00 00       	mov    edi,0xff
c001f639:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f63e:	83 d2 ff             	adc    edx,0xffffffff
c001f641:	39 c7                	cmp    edi,eax
c001f643:	bf 00 00 00 00       	mov    edi,0x0
c001f648:	19 d7                	sbb    edi,edx
c001f64a:	72 15                	jb     c001f661 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f64c:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f650:	c1 e0 17             	shl    eax,0x17
c001f653:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f659:	09 f1                	or     ecx,esi
c001f65b:	09 c1                	or     ecx,eax
c001f65d:	89 cf                	mov    edi,ecx
c001f65f:	eb 02                	jmp    c001f663 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f661:	31 ff                	xor    edi,edi
c001f663:	89 f8                	mov    eax,edi
c001f665:	5b                   	pop    ebx
c001f666:	5e                   	pop    esi
c001f667:	5f                   	pop    edi
c001f668:	c3                   	ret    

c001f669 <Vm::fpuInternalTo64(unsigned long long)>:
c001f669:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f66d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f671:	c3                   	ret    

c001f672 <Vm::fpu32ToInternal(unsigned int)>:
c001f672:	57                   	push   edi
c001f673:	31 ff                	xor    edi,edi
c001f675:	56                   	push   esi
c001f676:	53                   	push   ebx
c001f677:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f67b:	89 cb                	mov    ebx,ecx
c001f67d:	89 ce                	mov    esi,ecx
c001f67f:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f685:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f68b:	c1 e9 17             	shr    ecx,0x17
c001f68e:	89 f0                	mov    eax,esi
c001f690:	0f b6 d1             	movzx  edx,cl
c001f693:	81 c2 80 03 00 00    	add    edx,0x380
c001f699:	89 d1                	mov    ecx,edx
c001f69b:	89 fa                	mov    edx,edi
c001f69d:	c1 e1 14             	shl    ecx,0x14
c001f6a0:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6a4:	c1 e0 1d             	shl    eax,0x1d
c001f6a7:	89 d7                	mov    edi,edx
c001f6a9:	89 c6                	mov    esi,eax
c001f6ab:	89 ca                	mov    edx,ecx
c001f6ad:	89 f0                	mov    eax,esi
c001f6af:	09 fa                	or     edx,edi
c001f6b1:	09 da                	or     edx,ebx
c001f6b3:	5b                   	pop    ebx
c001f6b4:	5e                   	pop    esi
c001f6b5:	5f                   	pop    edi
c001f6b6:	c3                   	ret    

c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>:
c001f6b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6bf:	c3                   	ret    

c001f6c0 <Vm::fpuFloatToLong(unsigned long long)>:
c001f6c0:	57                   	push   edi
c001f6c1:	31 c0                	xor    eax,eax
c001f6c3:	56                   	push   esi
c001f6c4:	31 d2                	xor    edx,edx
c001f6c6:	53                   	push   ebx
c001f6c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6cf:	89 d9                	mov    ecx,ebx
c001f6d1:	c1 e9 14             	shr    ecx,0x14
c001f6d4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6da:	89 cf                	mov    edi,ecx
c001f6dc:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6e2:	78 33                	js     c001f717 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6e4:	89 d9                	mov    ecx,ebx
c001f6e6:	89 f0                	mov    eax,esi
c001f6e8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6ee:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f6f4:	89 ca                	mov    edx,ecx
c001f6f6:	b9 34 00 00 00       	mov    ecx,0x34
c001f6fb:	29 f9                	sub    ecx,edi
c001f6fd:	0f ad d0             	shrd   eax,edx,cl
c001f700:	d3 fa                	sar    edx,cl
c001f702:	f6 c1 20             	test   cl,0x20
c001f705:	74 05                	je     c001f70c <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f707:	89 d0                	mov    eax,edx
c001f709:	c1 fa 1f             	sar    edx,0x1f
c001f70c:	85 db                	test   ebx,ebx
c001f70e:	79 07                	jns    c001f717 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f710:	f7 d8                	neg    eax
c001f712:	83 d2 00             	adc    edx,0x0
c001f715:	f7 da                	neg    edx
c001f717:	5b                   	pop    ebx
c001f718:	5e                   	pop    esi
c001f719:	5f                   	pop    edi
c001f71a:	c3                   	ret    

c001f71b <Vm::fpuULongToFloat(unsigned long long)>:
c001f71b:	57                   	push   edi
c001f71c:	31 c9                	xor    ecx,ecx
c001f71e:	56                   	push   esi
c001f71f:	53                   	push   ebx
c001f720:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f724:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f728:	0f ba e7 14          	bt     edi,0x14
c001f72c:	72 07                	jb     c001f735 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f72e:	01 f6                	add    esi,esi
c001f730:	11 ff                	adc    edi,edi
c001f732:	41                   	inc    ecx
c001f733:	eb f3                	jmp    c001f728 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f735:	89 fa                	mov    edx,edi
c001f737:	89 f0                	mov    eax,esi
c001f739:	bb 33 04 00 00       	mov    ebx,0x433
c001f73e:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f744:	29 cb                	sub    ebx,ecx
c001f746:	89 d9                	mov    ecx,ebx
c001f748:	5b                   	pop    ebx
c001f749:	c1 e1 14             	shl    ecx,0x14
c001f74c:	5e                   	pop    esi
c001f74d:	09 ca                	or     edx,ecx
c001f74f:	5f                   	pop    edi
c001f750:	c3                   	ret    

c001f751 <Vm::fpuLongToFloat(long long)>:
c001f751:	56                   	push   esi
c001f752:	31 c0                	xor    eax,eax
c001f754:	53                   	push   ebx
c001f755:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f759:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f75d:	39 c8                	cmp    eax,ecx
c001f75f:	19 d8                	sbb    eax,ebx
c001f761:	7d 04                	jge    c001f767 <Vm::fpuLongToFloat(long long)+0x16>
c001f763:	31 f6                	xor    esi,esi
c001f765:	eb 0c                	jmp    c001f773 <Vm::fpuLongToFloat(long long)+0x22>
c001f767:	f7 d9                	neg    ecx
c001f769:	be 01 00 00 00       	mov    esi,0x1
c001f76e:	83 d3 00             	adc    ebx,0x0
c001f771:	f7 db                	neg    ebx
c001f773:	31 c0                	xor    eax,eax
c001f775:	0f ba e3 14          	bt     ebx,0x14
c001f779:	72 07                	jb     c001f782 <Vm::fpuLongToFloat(long long)+0x31>
c001f77b:	01 c9                	add    ecx,ecx
c001f77d:	11 db                	adc    ebx,ebx
c001f77f:	40                   	inc    eax
c001f780:	eb f3                	jmp    c001f775 <Vm::fpuLongToFloat(long long)+0x24>
c001f782:	ba 33 04 00 00       	mov    edx,0x433
c001f787:	29 c2                	sub    edx,eax
c001f789:	89 c8                	mov    eax,ecx
c001f78b:	c1 e2 14             	shl    edx,0x14
c001f78e:	89 d9                	mov    ecx,ebx
c001f790:	89 f3                	mov    ebx,esi
c001f792:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f798:	09 ca                	or     edx,ecx
c001f79a:	84 db                	test   bl,bl
c001f79c:	74 06                	je     c001f7a4 <Vm::fpuLongToFloat(long long)+0x53>
c001f79e:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7a4:	5b                   	pop    ebx
c001f7a5:	5e                   	pop    esi
c001f7a6:	c3                   	ret    

c001f7a7 <Vm::fpuGet0()>:
c001f7a7:	31 c0                	xor    eax,eax
c001f7a9:	31 d2                	xor    edx,edx
c001f7ab:	c3                   	ret    

c001f7ac <Vm::fpuGet1()>:
c001f7ac:	b8 01 00 00 00       	mov    eax,0x1
c001f7b1:	31 d2                	xor    edx,edx
c001f7b3:	c3                   	ret    

c001f7b4 <Vm::fpuGetPi()>:
c001f7b4:	b8 03 00 00 00       	mov    eax,0x3
c001f7b9:	31 d2                	xor    edx,edx
c001f7bb:	c3                   	ret    

c001f7bc <Vm::fpuGetLog2E()>:
c001f7bc:	83 ec 18             	sub    esp,0x18
c001f7bf:	68 f4 c6 02 c0       	push   0xc002c6f4
c001f7c4:	e8 28 ae ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001f7c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7ce:	31 d2                	xor    edx,edx
c001f7d0:	83 c4 1c             	add    esp,0x1c
c001f7d3:	c3                   	ret    

c001f7d4 <Vm::fpuGetLogE2()>:
c001f7d4:	83 ec 18             	sub    esp,0x18
c001f7d7:	68 00 c7 02 c0       	push   0xc002c700
c001f7dc:	e8 10 ae ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001f7e1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7e6:	31 d2                	xor    edx,edx
c001f7e8:	83 c4 1c             	add    esp,0x1c
c001f7eb:	c3                   	ret    

c001f7ec <Vm::fpuGetLog210()>:
c001f7ec:	83 ec 18             	sub    esp,0x18
c001f7ef:	68 0c c7 02 c0       	push   0xc002c70c
c001f7f4:	e8 f8 ad ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001f7f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7fe:	31 d2                	xor    edx,edx
c001f800:	83 c4 1c             	add    esp,0x1c
c001f803:	c3                   	ret    

c001f804 <Vm::fpuGetLog102()>:
c001f804:	83 ec 18             	sub    esp,0x18
c001f807:	68 19 c7 02 c0       	push   0xc002c719
c001f80c:	e8 e0 ad ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001f811:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f816:	31 d2                	xor    edx,edx
c001f818:	83 c4 1c             	add    esp,0x1c
c001f81b:	c3                   	ret    

c001f81c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f81c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f820:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f828:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f82c:	0f 92 c0             	setb   al
c001f82f:	c3                   	ret    

c001f830 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f830:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f838:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f83c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f840:	09 c2                	or     edx,eax
c001f842:	0f 94 c0             	sete   al
c001f845:	c3                   	ret    

c001f846 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f846:	57                   	push   edi
c001f847:	56                   	push   esi
c001f848:	53                   	push   ebx
c001f849:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f84d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f851:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f855:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f859:	57                   	push   edi
c001f85a:	56                   	push   esi
c001f85b:	53                   	push   ebx
c001f85c:	51                   	push   ecx
c001f85d:	e8 ce ff ff ff       	call   c001f830 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f862:	83 c4 10             	add    esp,0x10
c001f865:	88 c2                	mov    dl,al
c001f867:	31 c0                	xor    eax,eax
c001f869:	84 d2                	test   dl,dl
c001f86b:	75 0c                	jne    c001f879 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f86d:	57                   	push   edi
c001f86e:	56                   	push   esi
c001f86f:	53                   	push   ebx
c001f870:	51                   	push   ecx
c001f871:	e8 a6 ff ff ff       	call   c001f81c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f876:	83 c4 10             	add    esp,0x10
c001f879:	83 e0 01             	and    eax,0x1
c001f87c:	5b                   	pop    ebx
c001f87d:	88 c1                	mov    cl,al
c001f87f:	83 e2 01             	and    edx,0x1
c001f882:	a0 a1 19 03 c0       	mov    al,ds:0xc00319a1
c001f887:	c1 e2 06             	shl    edx,0x6
c001f88a:	83 e0 ba             	and    eax,0xffffffba
c001f88d:	5e                   	pop    esi
c001f88e:	09 c8                	or     eax,ecx
c001f890:	5f                   	pop    edi
c001f891:	09 d0                	or     eax,edx
c001f893:	a2 a1 19 03 c0       	mov    ds:0xc00319a1,al
c001f898:	c3                   	ret    

c001f899 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f89d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8a1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8a5:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8a9:	c3                   	ret    

c001f8aa <Vm::fpuAbs(unsigned long long)>:
c001f8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8b2:	c3                   	ret    

c001f8b3 <Vm::fpuChs(unsigned long long)>:
c001f8b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8bb:	f7 d8                	neg    eax
c001f8bd:	83 d2 00             	adc    edx,0x0
c001f8c0:	f7 da                	neg    edx
c001f8c2:	c3                   	ret    

c001f8c3 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8c3:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8c7:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8cc:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8d0:	eb c7                	jmp    c001f899 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8d2:	53                   	push   ebx
c001f8d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8e3:	0f af ca             	imul   ecx,edx
c001f8e6:	0f af d8             	imul   ebx,eax
c001f8e9:	f7 e2                	mul    edx
c001f8eb:	01 d9                	add    ecx,ebx
c001f8ed:	5b                   	pop    ebx
c001f8ee:	01 ca                	add    edx,ecx
c001f8f0:	c3                   	ret    

c001f8f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8f1:	83 ec 0c             	sub    esp,0xc
c001f8f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f904:	e8 a3 70 00 00       	call   c00269ac <__udivdi3>
c001f909:	83 c4 1c             	add    esp,0x1c
c001f90c:	c3                   	ret    

c001f90d <Vm::fpuSquare(unsigned long long)>:
c001f90d:	50                   	push   eax
c001f90e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f912:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f916:	52                   	push   edx
c001f917:	50                   	push   eax
c001f918:	52                   	push   edx
c001f919:	50                   	push   eax
c001f91a:	e8 b3 ff ff ff       	call   c001f8d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f91f:	83 c4 14             	add    esp,0x14
c001f922:	c3                   	ret    

c001f923 <Vm::fpuGetReg(int)>:
c001f923:	83 ec 0c             	sub    esp,0xc
c001f926:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f92b:	76 10                	jbe    c001f93d <Vm::fpuGetReg(int)+0x1a>
c001f92d:	83 ec 0c             	sub    esp,0xc
c001f930:	68 26 c7 02 c0       	push   0xc002c726
c001f935:	e8 b7 ac ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001f93a:	83 c4 10             	add    esp,0x10
c001f93d:	a0 a1 19 03 c0       	mov    al,ds:0xc00319a1
c001f942:	b9 08 00 00 00       	mov    ecx,0x8
c001f947:	c0 e8 03             	shr    al,0x3
c001f94a:	83 e0 07             	and    eax,0x7
c001f94d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f951:	99                   	cdq    
c001f952:	f7 f9                	idiv   ecx
c001f954:	8b 04 d5 a4 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce65c]
c001f95b:	8b 14 d5 a8 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce658]
c001f962:	83 c4 0c             	add    esp,0xc
c001f965:	c3                   	ret    

c001f966 <Vm::fpuSetReg(int, unsigned long long)>:
c001f966:	57                   	push   edi
c001f967:	56                   	push   esi
c001f968:	52                   	push   edx
c001f969:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f96d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f971:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f976:	76 10                	jbe    c001f988 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f978:	83 ec 0c             	sub    esp,0xc
c001f97b:	68 39 c7 02 c0       	push   0xc002c739
c001f980:	e8 6c ac ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c001f985:	83 c4 10             	add    esp,0x10
c001f988:	a0 a1 19 03 c0       	mov    al,ds:0xc00319a1
c001f98d:	b9 08 00 00 00       	mov    ecx,0x8
c001f992:	c0 e8 03             	shr    al,0x3
c001f995:	83 e0 07             	and    eax,0x7
c001f998:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f99c:	99                   	cdq    
c001f99d:	f7 f9                	idiv   ecx
c001f99f:	89 34 d5 a4 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce65c],esi
c001f9a6:	89 3c d5 a8 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce658],edi
c001f9ad:	58                   	pop    eax
c001f9ae:	5e                   	pop    esi
c001f9af:	5f                   	pop    edi
c001f9b0:	c3                   	ret    

c001f9b1 <Vm::fpuPush(unsigned long long)>:
c001f9b1:	a0 a1 19 03 c0       	mov    al,ds:0xc00319a1
c001f9b6:	c0 e8 03             	shr    al,0x3
c001f9b9:	83 e0 07             	and    eax,0x7
c001f9bc:	83 c0 07             	add    eax,0x7
c001f9bf:	88 c2                	mov    dl,al
c001f9c1:	83 e0 07             	and    eax,0x7
c001f9c4:	83 e2 07             	and    edx,0x7
c001f9c7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9ce:	8a 15 a1 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319a1
c001f9d4:	83 e2 c7             	and    edx,0xffffffc7
c001f9d7:	09 ca                	or     edx,ecx
c001f9d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9dd:	88 15 a1 19 03 c0    	mov    BYTE PTR ds:0xc00319a1,dl
c001f9e3:	89 0c c5 a8 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce658],ecx
c001f9ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9ee:	89 14 c5 a4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce65c],edx
c001f9f5:	a1 e4 19 03 c0       	mov    eax,ds:0xc00319e4
c001f9fa:	83 f8 08             	cmp    eax,0x8
c001f9fd:	75 08                	jne    c001fa07 <Vm::fpuPush(unsigned long long)+0x56>
c001f9ff:	80 0d a0 19 03 c0 40 	or     BYTE PTR ds:0xc00319a0,0x40
c001fa06:	c3                   	ret    
c001fa07:	40                   	inc    eax
c001fa08:	a3 e4 19 03 c0       	mov    ds:0xc00319e4,eax
c001fa0d:	c3                   	ret    

c001fa0e <Vm::fpuPop()>:
c001fa0e:	8a 0d a1 19 03 c0    	mov    cl,BYTE PTR ds:0xc00319a1
c001fa14:	53                   	push   ebx
c001fa15:	c0 e9 03             	shr    cl,0x3
c001fa18:	8a 1d a1 19 03 c0    	mov    bl,BYTE PTR ds:0xc00319a1
c001fa1e:	83 e1 07             	and    ecx,0x7
c001fa21:	83 e3 c7             	and    ebx,0xffffffc7
c001fa24:	8b 04 cd a4 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce65c]
c001fa2b:	8b 14 cd a8 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce658]
c001fa32:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa39:	83 e1 38             	and    ecx,0x38
c001fa3c:	09 d9                	or     ecx,ebx
c001fa3e:	88 0d a1 19 03 c0    	mov    BYTE PTR ds:0xc00319a1,cl
c001fa44:	8b 0d e4 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319e4
c001fa4a:	85 c9                	test   ecx,ecx
c001fa4c:	74 09                	je     c001fa57 <Vm::fpuPop()+0x49>
c001fa4e:	49                   	dec    ecx
c001fa4f:	89 0d e4 19 03 c0    	mov    DWORD PTR ds:0xc00319e4,ecx
c001fa55:	eb 07                	jmp    c001fa5e <Vm::fpuPop()+0x50>
c001fa57:	80 0d a0 19 03 c0 40 	or     BYTE PTR ds:0xc00319a0,0x40
c001fa5e:	5b                   	pop    ebx
c001fa5f:	c3                   	ret    

c001fa60 <Vm::x87Handler(regs*)>:
c001fa60:	55                   	push   ebp
c001fa61:	57                   	push   edi
c001fa62:	56                   	push   esi
c001fa63:	53                   	push   ebx
c001fa64:	83 ec 1c             	sub    esp,0x1c
c001fa67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa6b:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa70:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa73:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa7b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa7f:	50                   	push   eax
c001fa80:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa84:	50                   	push   eax
c001fa85:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa89:	50                   	push   eax
c001fa8a:	53                   	push   ebx
c001fa8b:	e8 28 a2 ff ff       	call   c0019cb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa90:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa93:	83 c4 10             	add    esp,0x10
c001fa96:	89 c6                	mov    esi,eax
c001fa98:	80 fa d9             	cmp    dl,0xd9
c001fa9b:	0f 85 52 01 00 00    	jne    c001fbf3 <Vm::x87Handler(regs*)+0x193>
c001faa1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faa5:	8d 50 20             	lea    edx,[eax+0x20]
c001faa8:	80 fa 0e             	cmp    dl,0xe
c001faab:	0f 87 86 00 00 00    	ja     c001fb37 <Vm::x87Handler(regs*)+0xd7>
c001fab1:	0f b6 d2             	movzx  edx,dl
c001fab4:	ff 24 95 4c c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd38b4]
c001fabb:	e8 e7 fc ff ff       	call   c001f7a7 <Vm::fpuGet0()>
c001fac0:	eb 05                	jmp    c001fac7 <Vm::x87Handler(regs*)+0x67>
c001fac2:	e8 e5 fc ff ff       	call   c001f7ac <Vm::fpuGet1()>
c001fac7:	57                   	push   edi
c001fac8:	57                   	push   edi
c001fac9:	52                   	push   edx
c001faca:	50                   	push   eax
c001facb:	e8 e1 fe ff ff       	call   c001f9b1 <Vm::fpuPush(unsigned long long)>
c001fad0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fad4:	83 c4 10             	add    esp,0x10
c001fad7:	b0 01                	mov    al,0x1
c001fad9:	e9 e3 09 00 00       	jmp    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c001fade:	83 ec 0c             	sub    esp,0xc
c001fae1:	6a 00                	push   0x0
c001fae3:	e8 3b fe ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fae8:	59                   	pop    ecx
c001fae9:	5e                   	pop    esi
c001faea:	52                   	push   edx
c001faeb:	50                   	push   eax
c001faec:	e8 c2 fd ff ff       	call   c001f8b3 <Vm::fpuChs(unsigned long long)>
c001faf1:	eb 13                	jmp    c001fb06 <Vm::x87Handler(regs*)+0xa6>
c001faf3:	83 ec 0c             	sub    esp,0xc
c001faf6:	6a 00                	push   0x0
c001faf8:	e8 26 fe ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fafd:	5f                   	pop    edi
c001fafe:	5d                   	pop    ebp
c001faff:	52                   	push   edx
c001fb00:	50                   	push   eax
c001fb01:	e8 a4 fd ff ff       	call   c001f8aa <Vm::fpuAbs(unsigned long long)>
c001fb06:	83 c4 0c             	add    esp,0xc
c001fb09:	52                   	push   edx
c001fb0a:	50                   	push   eax
c001fb0b:	6a 00                	push   0x0
c001fb0d:	e8 54 fe ff ff       	call   c001f966 <Vm::fpuSetReg(int, unsigned long long)>
c001fb12:	eb bc                	jmp    c001fad0 <Vm::x87Handler(regs*)+0x70>
c001fb14:	e8 d3 fc ff ff       	call   c001f7ec <Vm::fpuGetLog210()>
c001fb19:	eb ac                	jmp    c001fac7 <Vm::x87Handler(regs*)+0x67>
c001fb1b:	e8 9c fc ff ff       	call   c001f7bc <Vm::fpuGetLog2E()>
c001fb20:	eb a5                	jmp    c001fac7 <Vm::x87Handler(regs*)+0x67>
c001fb22:	e8 8d fc ff ff       	call   c001f7b4 <Vm::fpuGetPi()>
c001fb27:	eb 9e                	jmp    c001fac7 <Vm::x87Handler(regs*)+0x67>
c001fb29:	e8 d6 fc ff ff       	call   c001f804 <Vm::fpuGetLog102()>
c001fb2e:	eb 97                	jmp    c001fac7 <Vm::x87Handler(regs*)+0x67>
c001fb30:	e8 9f fc ff ff       	call   c001f7d4 <Vm::fpuGetLogE2()>
c001fb35:	eb 90                	jmp    c001fac7 <Vm::x87Handler(regs*)+0x67>
c001fb37:	8d 50 40             	lea    edx,[eax+0x40]
c001fb3a:	80 fa 07             	cmp    dl,0x7
c001fb3d:	77 15                	ja     c001fb54 <Vm::x87Handler(regs*)+0xf4>
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	2d c0 00 00 00       	sub    eax,0xc0
c001fb47:	50                   	push   eax
c001fb48:	e8 d6 fd ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fb4d:	59                   	pop    ecx
c001fb4e:	5e                   	pop    esi
c001fb4f:	e9 75 ff ff ff       	jmp    c001fac9 <Vm::x87Handler(regs*)+0x69>
c001fb54:	8d 50 38             	lea    edx,[eax+0x38]
c001fb57:	80 fa 07             	cmp    dl,0x7
c001fb5a:	77 3c                	ja     c001fb98 <Vm::x87Handler(regs*)+0x138>
c001fb5c:	83 ec 0c             	sub    esp,0xc
c001fb5f:	2d c8 00 00 00       	sub    eax,0xc8
c001fb64:	50                   	push   eax
c001fb65:	e8 b9 fd ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fb6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb71:	89 c6                	mov    esi,eax
c001fb73:	89 d7                	mov    edi,edx
c001fb75:	e8 a9 fd ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fb7a:	83 c4 0c             	add    esp,0xc
c001fb7d:	52                   	push   edx
c001fb7e:	50                   	push   eax
c001fb7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb83:	2d c8 00 00 00       	sub    eax,0xc8
c001fb88:	50                   	push   eax
c001fb89:	e8 d8 fd ff ff       	call   c001f966 <Vm::fpuSetReg(int, unsigned long long)>
c001fb8e:	83 c4 0c             	add    esp,0xc
c001fb91:	57                   	push   edi
c001fb92:	56                   	push   esi
c001fb93:	e9 73 ff ff ff       	jmp    c001fb0b <Vm::x87Handler(regs*)+0xab>
c001fb98:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb9c:	84 d2                	test   dl,dl
c001fb9e:	75 0f                	jne    c001fbaf <Vm::x87Handler(regs*)+0x14f>
c001fba0:	83 ec 0c             	sub    esp,0xc
c001fba3:	ff 36                	push   DWORD PTR [esi]
c001fba5:	e8 c8 fa ff ff       	call   c001f672 <Vm::fpu32ToInternal(unsigned int)>
c001fbaa:	e9 bf 00 00 00       	jmp    c001fc6e <Vm::x87Handler(regs*)+0x20e>
c001fbaf:	80 fa 03             	cmp    dl,0x3
c001fbb2:	75 13                	jne    c001fbc7 <Vm::x87Handler(regs*)+0x167>
c001fbb4:	e8 55 fe ff ff       	call   c001fa0e <Vm::fpuPop()>
c001fbb9:	55                   	push   ebp
c001fbba:	55                   	push   ebp
c001fbbb:	52                   	push   edx
c001fbbc:	50                   	push   eax
c001fbbd:	e8 4c fa ff ff       	call   c001f60e <Vm::fpuInternalTo32(unsigned long long)>
c001fbc2:	e9 88 00 00 00       	jmp    c001fc4f <Vm::x87Handler(regs*)+0x1ef>
c001fbc7:	80 fa 05             	cmp    dl,0x5
c001fbca:	75 0e                	jne    c001fbda <Vm::x87Handler(regs*)+0x17a>
c001fbcc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbcf:	66 a3 a2 19 03 c0    	mov    ds:0xc00319a2,ax
c001fbd5:	e9 df 00 00 00       	jmp    c001fcb9 <Vm::x87Handler(regs*)+0x259>
c001fbda:	31 c0                	xor    eax,eax
c001fbdc:	80 fa 07             	cmp    dl,0x7
c001fbdf:	0f 85 dc 08 00 00    	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c001fbe5:	66 a1 a2 19 03 c0    	mov    ax,ds:0xc00319a2
c001fbeb:	66 89 06             	mov    WORD PTR [esi],ax
c001fbee:	e9 c6 00 00 00       	jmp    c001fcb9 <Vm::x87Handler(regs*)+0x259>
c001fbf3:	80 fa d8             	cmp    dl,0xd8
c001fbf6:	0f 84 c9 00 00 00    	je     c001fcc5 <Vm::x87Handler(regs*)+0x265>
c001fbfc:	80 fa dc             	cmp    dl,0xdc
c001fbff:	0f 84 0d 02 00 00    	je     c001fe12 <Vm::x87Handler(regs*)+0x3b2>
c001fc05:	80 fa de             	cmp    dl,0xde
c001fc08:	0f 84 cd 02 00 00    	je     c001fedb <Vm::x87Handler(regs*)+0x47b>
c001fc0e:	80 fa dd             	cmp    dl,0xdd
c001fc11:	0f 84 5f 04 00 00    	je     c0020076 <Vm::x87Handler(regs*)+0x616>
c001fc17:	80 fa da             	cmp    dl,0xda
c001fc1a:	0f 84 24 05 00 00    	je     c0020144 <Vm::x87Handler(regs*)+0x6e4>
c001fc20:	80 fa df             	cmp    dl,0xdf
c001fc23:	0f 84 68 05 00 00    	je     c0020191 <Vm::x87Handler(regs*)+0x731>
c001fc29:	31 c0                	xor    eax,eax
c001fc2b:	80 fa db             	cmp    dl,0xdb
c001fc2e:	0f 85 8d 08 00 00    	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c001fc34:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc38:	80 fa 03             	cmp    dl,0x3
c001fc3b:	0f 85 70 06 00 00    	jne    c00202b1 <Vm::x87Handler(regs*)+0x851>
c001fc41:	e8 c8 fd ff ff       	call   c001fa0e <Vm::fpuPop()>
c001fc46:	55                   	push   ebp
c001fc47:	55                   	push   ebp
c001fc48:	52                   	push   edx
c001fc49:	50                   	push   eax
c001fc4a:	e8 71 fa ff ff       	call   c001f6c0 <Vm::fpuFloatToLong(unsigned long long)>
c001fc4f:	83 c4 10             	add    esp,0x10
c001fc52:	89 06                	mov    DWORD PTR [esi],eax
c001fc54:	eb 63                	jmp    c001fcb9 <Vm::x87Handler(regs*)+0x259>
c001fc56:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc5a:	84 d2                	test   dl,dl
c001fc5c:	0f 85 e6 05 00 00    	jne    c0020248 <Vm::x87Handler(regs*)+0x7e8>
c001fc62:	57                   	push   edi
c001fc63:	57                   	push   edi
c001fc64:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc67:	ff 36                	push   DWORD PTR [esi]
c001fc69:	e8 49 fa ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c001fc6e:	5e                   	pop    esi
c001fc6f:	5f                   	pop    edi
c001fc70:	52                   	push   edx
c001fc71:	50                   	push   eax
c001fc72:	e8 3a fd ff ff       	call   c001f9b1 <Vm::fpuPush(unsigned long long)>
c001fc77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc7b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc7e:	e9 51 fe ff ff       	jmp    c001fad4 <Vm::x87Handler(regs*)+0x74>
c001fc83:	80 fa 03             	cmp    dl,0x3
c001fc86:	0f 85 d7 06 00 00    	jne    c0020363 <Vm::x87Handler(regs*)+0x903>
c001fc8c:	57                   	push   edi
c001fc8d:	57                   	push   edi
c001fc8e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc91:	ff 36                	push   DWORD PTR [esi]
c001fc93:	e8 1f fa ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c001fc98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc9f:	89 c6                	mov    esi,eax
c001fca1:	89 d7                	mov    edi,edx
c001fca3:	e8 7b fc ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fca8:	57                   	push   edi
c001fca9:	56                   	push   esi
c001fcaa:	52                   	push   edx
c001fcab:	50                   	push   eax
c001fcac:	e8 95 fb ff ff       	call   c001f846 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcb1:	83 c4 20             	add    esp,0x20
c001fcb4:	e8 55 fd ff ff       	call   c001fa0e <Vm::fpuPop()>
c001fcb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcbd:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcc0:	e9 12 fe ff ff       	jmp    c001fad7 <Vm::x87Handler(regs*)+0x77>
c001fcc5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc9:	8d 50 40             	lea    edx,[eax+0x40]
c001fccc:	80 fa 07             	cmp    dl,0x7
c001fccf:	77 29                	ja     c001fcfa <Vm::x87Handler(regs*)+0x29a>
c001fcd1:	83 ec 0c             	sub    esp,0xc
c001fcd4:	2d c0 00 00 00       	sub    eax,0xc0
c001fcd9:	50                   	push   eax
c001fcda:	e8 44 fc ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fcdf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fce6:	89 c6                	mov    esi,eax
c001fce8:	89 d7                	mov    edi,edx
c001fcea:	e8 34 fc ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fcef:	57                   	push   edi
c001fcf0:	56                   	push   esi
c001fcf1:	52                   	push   edx
c001fcf2:	50                   	push   eax
c001fcf3:	e8 a1 fb ff ff       	call   c001f899 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcf8:	eb 2f                	jmp    c001fd29 <Vm::x87Handler(regs*)+0x2c9>
c001fcfa:	8d 50 38             	lea    edx,[eax+0x38]
c001fcfd:	80 fa 07             	cmp    dl,0x7
c001fd00:	77 2f                	ja     c001fd31 <Vm::x87Handler(regs*)+0x2d1>
c001fd02:	83 ec 0c             	sub    esp,0xc
c001fd05:	2d c8 00 00 00       	sub    eax,0xc8
c001fd0a:	50                   	push   eax
c001fd0b:	e8 13 fc ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fd10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd17:	89 c6                	mov    esi,eax
c001fd19:	89 d7                	mov    edi,edx
c001fd1b:	e8 03 fc ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fd20:	57                   	push   edi
c001fd21:	56                   	push   esi
c001fd22:	52                   	push   edx
c001fd23:	50                   	push   eax
c001fd24:	e8 a9 fb ff ff       	call   c001f8d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd29:	83 c4 1c             	add    esp,0x1c
c001fd2c:	e9 d8 fd ff ff       	jmp    c001fb09 <Vm::x87Handler(regs*)+0xa9>
c001fd31:	8d 50 30             	lea    edx,[eax+0x30]
c001fd34:	80 fa 07             	cmp    dl,0x7
c001fd37:	77 0d                	ja     c001fd46 <Vm::x87Handler(regs*)+0x2e6>
c001fd39:	83 ec 0c             	sub    esp,0xc
c001fd3c:	2d d0 00 00 00       	sub    eax,0xd0
c001fd41:	e9 99 03 00 00       	jmp    c00200df <Vm::x87Handler(regs*)+0x67f>
c001fd46:	8d 50 28             	lea    edx,[eax+0x28]
c001fd49:	80 fa 07             	cmp    dl,0x7
c001fd4c:	77 0d                	ja     c001fd5b <Vm::x87Handler(regs*)+0x2fb>
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	2d d8 00 00 00       	sub    eax,0xd8
c001fd56:	e9 c0 03 00 00       	jmp    c002011b <Vm::x87Handler(regs*)+0x6bb>
c001fd5b:	8d 50 20             	lea    edx,[eax+0x20]
c001fd5e:	80 fa 07             	cmp    dl,0x7
c001fd61:	77 1b                	ja     c001fd7e <Vm::x87Handler(regs*)+0x31e>
c001fd63:	83 ec 0c             	sub    esp,0xc
c001fd66:	2d e0 00 00 00       	sub    eax,0xe0
c001fd6b:	50                   	push   eax
c001fd6c:	e8 b2 fb ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fd71:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd78:	89 c6                	mov    esi,eax
c001fd7a:	89 d7                	mov    edi,edx
c001fd7c:	eb 22                	jmp    c001fda0 <Vm::x87Handler(regs*)+0x340>
c001fd7e:	8d 50 18             	lea    edx,[eax+0x18]
c001fd81:	80 fa 07             	cmp    dl,0x7
c001fd84:	77 2d                	ja     c001fdb3 <Vm::x87Handler(regs*)+0x353>
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	6a 00                	push   0x0
c001fd8b:	e8 93 fb ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fd90:	89 c6                	mov    esi,eax
c001fd92:	89 d7                	mov    edi,edx
c001fd94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd98:	2d e8 00 00 00       	sub    eax,0xe8
c001fd9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fda0:	e8 7e fb ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fda5:	57                   	push   edi
c001fda6:	56                   	push   esi
c001fda7:	52                   	push   edx
c001fda8:	50                   	push   eax
c001fda9:	e8 15 fb ff ff       	call   c001f8c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdae:	e9 76 ff ff ff       	jmp    c001fd29 <Vm::x87Handler(regs*)+0x2c9>
c001fdb3:	8d 50 10             	lea    edx,[eax+0x10]
c001fdb6:	80 fa 07             	cmp    dl,0x7
c001fdb9:	77 1b                	ja     c001fdd6 <Vm::x87Handler(regs*)+0x376>
c001fdbb:	83 ec 0c             	sub    esp,0xc
c001fdbe:	2d f0 00 00 00       	sub    eax,0xf0
c001fdc3:	50                   	push   eax
c001fdc4:	e8 5a fb ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fdc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdd0:	89 c6                	mov    esi,eax
c001fdd2:	89 d7                	mov    edi,edx
c001fdd4:	eb 22                	jmp    c001fdf8 <Vm::x87Handler(regs*)+0x398>
c001fdd6:	3c f7                	cmp    al,0xf7
c001fdd8:	0f 86 d1 03 00 00    	jbe    c00201af <Vm::x87Handler(regs*)+0x74f>
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	6a 00                	push   0x0
c001fde3:	e8 3b fb ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fde8:	89 c6                	mov    esi,eax
c001fdea:	89 d7                	mov    edi,edx
c001fdec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdf0:	2d f8 00 00 00       	sub    eax,0xf8
c001fdf5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdf8:	e8 26 fb ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fdfd:	57                   	push   edi
c001fdfe:	56                   	push   esi
c001fdff:	52                   	push   edx
c001fe00:	50                   	push   eax
c001fe01:	e8 eb fa ff ff       	call   c001f8f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe06:	83 c4 1c             	add    esp,0x1c
c001fe09:	52                   	push   edx
c001fe0a:	50                   	push   eax
c001fe0b:	6a 00                	push   0x0
c001fe0d:	e9 51 02 00 00       	jmp    c0020063 <Vm::x87Handler(regs*)+0x603>
c001fe12:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe16:	8d 50 40             	lea    edx,[eax+0x40]
c001fe19:	80 fa 07             	cmp    dl,0x7
c001fe1c:	77 37                	ja     c001fe55 <Vm::x87Handler(regs*)+0x3f5>
c001fe1e:	83 ec 0c             	sub    esp,0xc
c001fe21:	2d c0 00 00 00       	sub    eax,0xc0
c001fe26:	50                   	push   eax
c001fe27:	e8 f7 fa ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fe2c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe33:	89 c6                	mov    esi,eax
c001fe35:	89 d7                	mov    edi,edx
c001fe37:	e8 e7 fa ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fe3c:	57                   	push   edi
c001fe3d:	56                   	push   esi
c001fe3e:	52                   	push   edx
c001fe3f:	50                   	push   eax
c001fe40:	e8 54 fa ff ff       	call   c001f899 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe45:	83 c4 1c             	add    esp,0x1c
c001fe48:	52                   	push   edx
c001fe49:	50                   	push   eax
c001fe4a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe4e:	2d c0 00 00 00       	sub    eax,0xc0
c001fe53:	eb 3d                	jmp    c001fe92 <Vm::x87Handler(regs*)+0x432>
c001fe55:	8d 50 38             	lea    edx,[eax+0x38]
c001fe58:	80 fa 07             	cmp    dl,0x7
c001fe5b:	77 3b                	ja     c001fe98 <Vm::x87Handler(regs*)+0x438>
c001fe5d:	83 ec 0c             	sub    esp,0xc
c001fe60:	2d c8 00 00 00       	sub    eax,0xc8
c001fe65:	50                   	push   eax
c001fe66:	e8 b8 fa ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fe6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe72:	89 c6                	mov    esi,eax
c001fe74:	89 d7                	mov    edi,edx
c001fe76:	e8 a8 fa ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fe7b:	57                   	push   edi
c001fe7c:	56                   	push   esi
c001fe7d:	52                   	push   edx
c001fe7e:	50                   	push   eax
c001fe7f:	e8 4e fa ff ff       	call   c001f8d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe84:	83 c4 1c             	add    esp,0x1c
c001fe87:	52                   	push   edx
c001fe88:	50                   	push   eax
c001fe89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe8d:	2d c8 00 00 00       	sub    eax,0xc8
c001fe92:	50                   	push   eax
c001fe93:	e9 75 fc ff ff       	jmp    c001fb0d <Vm::x87Handler(regs*)+0xad>
c001fe98:	83 c0 18             	add    eax,0x18
c001fe9b:	3c 07                	cmp    al,0x7
c001fe9d:	0f 87 3b 04 00 00    	ja     c00202de <Vm::x87Handler(regs*)+0x87e>
c001fea3:	83 ec 0c             	sub    esp,0xc
c001fea6:	6a 00                	push   0x0
c001fea8:	e8 76 fa ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fead:	89 c6                	mov    esi,eax
c001feaf:	89 d7                	mov    edi,edx
c001feb1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb5:	2d e8 00 00 00       	sub    eax,0xe8
c001feba:	89 04 24             	mov    DWORD PTR [esp],eax
c001febd:	e8 61 fa ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fec2:	57                   	push   edi
c001fec3:	56                   	push   esi
c001fec4:	52                   	push   edx
c001fec5:	50                   	push   eax
c001fec6:	e8 f8 f9 ff ff       	call   c001f8c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fecb:	83 c4 1c             	add    esp,0x1c
c001fece:	52                   	push   edx
c001fecf:	50                   	push   eax
c001fed0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed4:	2d e8 00 00 00       	sub    eax,0xe8
c001fed9:	eb b7                	jmp    c001fe92 <Vm::x87Handler(regs*)+0x432>
c001fedb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedf:	8d 50 40             	lea    edx,[eax+0x40]
c001fee2:	80 fa 07             	cmp    dl,0x7
c001fee5:	77 3a                	ja     c001ff21 <Vm::x87Handler(regs*)+0x4c1>
c001fee7:	83 ec 0c             	sub    esp,0xc
c001feea:	2d c0 00 00 00       	sub    eax,0xc0
c001feef:	50                   	push   eax
c001fef0:	e8 2e fa ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fef5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fefc:	89 c6                	mov    esi,eax
c001fefe:	89 d7                	mov    edi,edx
c001ff00:	e8 1e fa ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001ff05:	57                   	push   edi
c001ff06:	56                   	push   esi
c001ff07:	52                   	push   edx
c001ff08:	50                   	push   eax
c001ff09:	e8 8b f9 ff ff       	call   c001f899 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff0e:	83 c4 1c             	add    esp,0x1c
c001ff11:	52                   	push   edx
c001ff12:	50                   	push   eax
c001ff13:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff17:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1c:	e9 9e 01 00 00       	jmp    c00200bf <Vm::x87Handler(regs*)+0x65f>
c001ff21:	8d 50 20             	lea    edx,[eax+0x20]
c001ff24:	80 fa 07             	cmp    dl,0x7
c001ff27:	77 3a                	ja     c001ff63 <Vm::x87Handler(regs*)+0x503>
c001ff29:	83 ec 0c             	sub    esp,0xc
c001ff2c:	2d e0 00 00 00       	sub    eax,0xe0
c001ff31:	50                   	push   eax
c001ff32:	e8 ec f9 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001ff37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff3e:	89 c6                	mov    esi,eax
c001ff40:	89 d7                	mov    edi,edx
c001ff42:	e8 dc f9 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001ff47:	57                   	push   edi
c001ff48:	56                   	push   esi
c001ff49:	52                   	push   edx
c001ff4a:	50                   	push   eax
c001ff4b:	e8 73 f9 ff ff       	call   c001f8c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff50:	83 c4 1c             	add    esp,0x1c
c001ff53:	52                   	push   edx
c001ff54:	50                   	push   eax
c001ff55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff59:	2d e0 00 00 00       	sub    eax,0xe0
c001ff5e:	e9 5c 01 00 00       	jmp    c00200bf <Vm::x87Handler(regs*)+0x65f>
c001ff63:	8d 50 18             	lea    edx,[eax+0x18]
c001ff66:	80 fa 07             	cmp    dl,0x7
c001ff69:	77 3b                	ja     c001ffa6 <Vm::x87Handler(regs*)+0x546>
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	6a 00                	push   0x0
c001ff70:	e8 ae f9 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001ff75:	89 c6                	mov    esi,eax
c001ff77:	89 d7                	mov    edi,edx
c001ff79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff7d:	2d e8 00 00 00       	sub    eax,0xe8
c001ff82:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff85:	e8 99 f9 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001ff8a:	57                   	push   edi
c001ff8b:	56                   	push   esi
c001ff8c:	52                   	push   edx
c001ff8d:	50                   	push   eax
c001ff8e:	e8 30 f9 ff ff       	call   c001f8c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff93:	83 c4 1c             	add    esp,0x1c
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9c:	2d e8 00 00 00       	sub    eax,0xe8
c001ffa1:	e9 19 01 00 00       	jmp    c00200bf <Vm::x87Handler(regs*)+0x65f>
c001ffa6:	8d 50 38             	lea    edx,[eax+0x38]
c001ffa9:	80 fa 07             	cmp    dl,0x7
c001ffac:	77 37                	ja     c001ffe5 <Vm::x87Handler(regs*)+0x585>
c001ffae:	83 ec 0c             	sub    esp,0xc
c001ffb1:	2d c8 00 00 00       	sub    eax,0xc8
c001ffb6:	50                   	push   eax
c001ffb7:	e8 67 f9 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001ffbc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc3:	89 c6                	mov    esi,eax
c001ffc5:	89 d7                	mov    edi,edx
c001ffc7:	e8 57 f9 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001ffcc:	57                   	push   edi
c001ffcd:	56                   	push   esi
c001ffce:	52                   	push   edx
c001ffcf:	50                   	push   eax
c001ffd0:	e8 fd f8 ff ff       	call   c001f8d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffd5:	83 c4 1c             	add    esp,0x1c
c001ffd8:	52                   	push   edx
c001ffd9:	50                   	push   eax
c001ffda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffde:	2d c8 00 00 00       	sub    eax,0xc8
c001ffe3:	eb 7d                	jmp    c0020062 <Vm::x87Handler(regs*)+0x602>
c001ffe5:	3c f7                	cmp    al,0xf7
c001ffe7:	76 38                	jbe    c0020021 <Vm::x87Handler(regs*)+0x5c1>
c001ffe9:	83 ec 0c             	sub    esp,0xc
c001ffec:	6a 00                	push   0x0
c001ffee:	e8 30 f9 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c001fff3:	89 c6                	mov    esi,eax
c001fff5:	89 d7                	mov    edi,edx
c001fff7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fffb:	2d f8 00 00 00       	sub    eax,0xf8
c0020000:	89 04 24             	mov    DWORD PTR [esp],eax
c0020003:	e8 1b f9 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020008:	57                   	push   edi
c0020009:	56                   	push   esi
c002000a:	52                   	push   edx
c002000b:	50                   	push   eax
c002000c:	e8 e0 f8 ff ff       	call   c001f8f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020011:	83 c4 1c             	add    esp,0x1c
c0020014:	52                   	push   edx
c0020015:	50                   	push   eax
c0020016:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002001a:	2d f8 00 00 00       	sub    eax,0xf8
c002001f:	eb 41                	jmp    c0020062 <Vm::x87Handler(regs*)+0x602>
c0020021:	8d 50 10             	lea    edx,[eax+0x10]
c0020024:	80 fa 07             	cmp    dl,0x7
c0020027:	0f 87 5a 01 00 00    	ja     c0020187 <Vm::x87Handler(regs*)+0x727>
c002002d:	83 ec 0c             	sub    esp,0xc
c0020030:	2d f0 00 00 00       	sub    eax,0xf0
c0020035:	50                   	push   eax
c0020036:	e8 e8 f8 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c002003b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020042:	89 c6                	mov    esi,eax
c0020044:	89 d7                	mov    edi,edx
c0020046:	e8 d8 f8 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c002004b:	57                   	push   edi
c002004c:	56                   	push   esi
c002004d:	52                   	push   edx
c002004e:	50                   	push   eax
c002004f:	e8 9d f8 ff ff       	call   c001f8f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020054:	83 c4 1c             	add    esp,0x1c
c0020057:	52                   	push   edx
c0020058:	50                   	push   eax
c0020059:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002005d:	2d f0 00 00 00       	sub    eax,0xf0
c0020062:	50                   	push   eax
c0020063:	e8 fe f8 ff ff       	call   c001f966 <Vm::fpuSetReg(int, unsigned long long)>
c0020068:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002006c:	e8 9d f9 ff ff       	call   c001fa0e <Vm::fpuPop()>
c0020071:	e9 5e fa ff ff       	jmp    c001fad4 <Vm::x87Handler(regs*)+0x74>
c0020076:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002007a:	8d 50 30             	lea    edx,[eax+0x30]
c002007d:	80 fa 07             	cmp    dl,0x7
c0020080:	77 1d                	ja     c002009f <Vm::x87Handler(regs*)+0x63f>
c0020082:	83 ec 0c             	sub    esp,0xc
c0020085:	6a 00                	push   0x0
c0020087:	e8 97 f8 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c002008c:	83 c4 0c             	add    esp,0xc
c002008f:	52                   	push   edx
c0020090:	50                   	push   eax
c0020091:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020095:	2d d0 00 00 00       	sub    eax,0xd0
c002009a:	e9 f3 fd ff ff       	jmp    c001fe92 <Vm::x87Handler(regs*)+0x432>
c002009f:	8d 50 28             	lea    edx,[eax+0x28]
c00200a2:	80 fa 07             	cmp    dl,0x7
c00200a5:	77 28                	ja     c00200cf <Vm::x87Handler(regs*)+0x66f>
c00200a7:	83 ec 0c             	sub    esp,0xc
c00200aa:	6a 00                	push   0x0
c00200ac:	e8 72 f8 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c00200b1:	83 c4 0c             	add    esp,0xc
c00200b4:	52                   	push   edx
c00200b5:	50                   	push   eax
c00200b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ba:	2d d8 00 00 00       	sub    eax,0xd8
c00200bf:	50                   	push   eax
c00200c0:	e8 a1 f8 ff ff       	call   c001f966 <Vm::fpuSetReg(int, unsigned long long)>
c00200c5:	e8 44 f9 ff ff       	call   c001fa0e <Vm::fpuPop()>
c00200ca:	e9 01 fa ff ff       	jmp    c001fad0 <Vm::x87Handler(regs*)+0x70>
c00200cf:	8d 50 20             	lea    edx,[eax+0x20]
c00200d2:	80 fa 07             	cmp    dl,0x7
c00200d5:	77 30                	ja     c0020107 <Vm::x87Handler(regs*)+0x6a7>
c00200d7:	83 ec 0c             	sub    esp,0xc
c00200da:	2d e0 00 00 00       	sub    eax,0xe0
c00200df:	50                   	push   eax
c00200e0:	e8 3e f8 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c00200e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200ec:	89 c6                	mov    esi,eax
c00200ee:	89 d7                	mov    edi,edx
c00200f0:	e8 2e f8 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c00200f5:	57                   	push   edi
c00200f6:	56                   	push   esi
c00200f7:	52                   	push   edx
c00200f8:	50                   	push   eax
c00200f9:	e8 48 f7 ff ff       	call   c001f846 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200fe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020102:	e9 54 02 00 00       	jmp    c002035b <Vm::x87Handler(regs*)+0x8fb>
c0020107:	8d 50 18             	lea    edx,[eax+0x18]
c002010a:	80 fa 07             	cmp    dl,0x7
c002010d:	0f 87 43 fb ff ff    	ja     c001fc56 <Vm::x87Handler(regs*)+0x1f6>
c0020113:	83 ec 0c             	sub    esp,0xc
c0020116:	2d e8 00 00 00       	sub    eax,0xe8
c002011b:	50                   	push   eax
c002011c:	e8 02 f8 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020121:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020128:	89 c6                	mov    esi,eax
c002012a:	89 d7                	mov    edi,edx
c002012c:	e8 f2 f7 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020131:	57                   	push   edi
c0020132:	56                   	push   esi
c0020133:	52                   	push   edx
c0020134:	50                   	push   eax
c0020135:	e8 0c f7 ff ff       	call   c001f846 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002013a:	83 c4 20             	add    esp,0x20
c002013d:	e8 cc f8 ff ff       	call   c001fa0e <Vm::fpuPop()>
c0020142:	eb 62                	jmp    c00201a6 <Vm::x87Handler(regs*)+0x746>
c0020144:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020148:	0f 85 0f 01 00 00    	jne    c002025d <Vm::x87Handler(regs*)+0x7fd>
c002014e:	83 ec 0c             	sub    esp,0xc
c0020151:	6a 01                	push   0x1
c0020153:	e8 cb f7 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020158:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002015f:	89 c6                	mov    esi,eax
c0020161:	89 d7                	mov    edi,edx
c0020163:	e8 bb f7 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020168:	57                   	push   edi
c0020169:	56                   	push   esi
c002016a:	52                   	push   edx
c002016b:	50                   	push   eax
c002016c:	e8 d5 f6 ff ff       	call   c001f846 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020171:	83 c4 20             	add    esp,0x20
c0020174:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020178:	e8 91 f8 ff ff       	call   c001fa0e <Vm::fpuPop()>
c002017d:	e8 8c f8 ff ff       	call   c001fa0e <Vm::fpuPop()>
c0020182:	e9 50 f9 ff ff       	jmp    c001fad7 <Vm::x87Handler(regs*)+0x77>
c0020187:	3c d9                	cmp    al,0xd9
c0020189:	0f 85 b5 02 00 00    	jne    c0020444 <Vm::x87Handler(regs*)+0x9e4>
c002018f:	eb bd                	jmp    c002014e <Vm::x87Handler(regs*)+0x6ee>
c0020191:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020195:	0f 85 ea 02 00 00    	jne    c0020485 <Vm::x87Handler(regs*)+0xa25>
c002019b:	0f b7 05 a0 19 03 c0 	movzx  eax,WORD PTR ds:0xc00319a0
c00201a2:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201a6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201aa:	e9 28 f9 ff ff       	jmp    c001fad7 <Vm::x87Handler(regs*)+0x77>
c00201af:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201b3:	84 d2                	test   dl,dl
c00201b5:	75 0f                	jne    c00201c6 <Vm::x87Handler(regs*)+0x766>
c00201b7:	83 ec 0c             	sub    esp,0xc
c00201ba:	ff 36                	push   DWORD PTR [esi]
c00201bc:	e8 b1 f4 ff ff       	call   c001f672 <Vm::fpu32ToInternal(unsigned int)>
c00201c1:	e9 2c 01 00 00       	jmp    c00202f2 <Vm::x87Handler(regs*)+0x892>
c00201c6:	80 fa 01             	cmp    dl,0x1
c00201c9:	75 0f                	jne    c00201da <Vm::x87Handler(regs*)+0x77a>
c00201cb:	83 ec 0c             	sub    esp,0xc
c00201ce:	ff 36                	push   DWORD PTR [esi]
c00201d0:	e8 9d f4 ff ff       	call   c001f672 <Vm::fpu32ToInternal(unsigned int)>
c00201d5:	e9 81 02 00 00       	jmp    c002045b <Vm::x87Handler(regs*)+0x9fb>
c00201da:	80 fa 04             	cmp    dl,0x4
c00201dd:	75 0f                	jne    c00201ee <Vm::x87Handler(regs*)+0x78e>
c00201df:	83 ec 0c             	sub    esp,0xc
c00201e2:	ff 36                	push   DWORD PTR [esi]
c00201e4:	e8 89 f4 ff ff       	call   c001f672 <Vm::fpu32ToInternal(unsigned int)>
c00201e9:	e9 86 01 00 00       	jmp    c0020374 <Vm::x87Handler(regs*)+0x914>
c00201ee:	80 fa 05             	cmp    dl,0x5
c00201f1:	75 1b                	jne    c002020e <Vm::x87Handler(regs*)+0x7ae>
c00201f3:	83 ec 0c             	sub    esp,0xc
c00201f6:	6a 00                	push   0x0
c00201f8:	e8 26 f7 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c00201fd:	89 c7                	mov    edi,eax
c00201ff:	89 d5                	mov    ebp,edx
c0020201:	58                   	pop    eax
c0020202:	ff 36                	push   DWORD PTR [esi]
c0020204:	e8 69 f4 ff ff       	call   c001f672 <Vm::fpu32ToInternal(unsigned int)>
c0020209:	e9 a3 01 00 00       	jmp    c00203b1 <Vm::x87Handler(regs*)+0x951>
c002020e:	80 fa 06             	cmp    dl,0x6
c0020211:	75 0f                	jne    c0020222 <Vm::x87Handler(regs*)+0x7c2>
c0020213:	83 ec 0c             	sub    esp,0xc
c0020216:	ff 36                	push   DWORD PTR [esi]
c0020218:	e8 55 f4 ff ff       	call   c001f672 <Vm::fpu32ToInternal(unsigned int)>
c002021d:	e9 ae 01 00 00       	jmp    c00203d0 <Vm::x87Handler(regs*)+0x970>
c0020222:	31 c0                	xor    eax,eax
c0020224:	80 fa 07             	cmp    dl,0x7
c0020227:	0f 85 94 02 00 00    	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c002022d:	83 ec 0c             	sub    esp,0xc
c0020230:	6a 00                	push   0x0
c0020232:	e8 ec f6 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020237:	89 c7                	mov    edi,eax
c0020239:	89 d5                	mov    ebp,edx
c002023b:	58                   	pop    eax
c002023c:	ff 36                	push   DWORD PTR [esi]
c002023e:	e8 2f f4 ff ff       	call   c001f672 <Vm::fpu32ToInternal(unsigned int)>
c0020243:	e9 cb 01 00 00       	jmp    c0020413 <Vm::x87Handler(regs*)+0x9b3>
c0020248:	80 fa 03             	cmp    dl,0x3
c002024b:	0f 85 d3 01 00 00    	jne    c0020424 <Vm::x87Handler(regs*)+0x9c4>
c0020251:	e8 b8 f7 ff ff       	call   c001fa0e <Vm::fpuPop()>
c0020256:	51                   	push   ecx
c0020257:	51                   	push   ecx
c0020258:	e9 de 01 00 00       	jmp    c002043b <Vm::x87Handler(regs*)+0x9db>
c002025d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020261:	80 fa 01             	cmp    dl,0x1
c0020264:	75 09                	jne    c002026f <Vm::x87Handler(regs*)+0x80f>
c0020266:	57                   	push   edi
c0020267:	57                   	push   edi
c0020268:	8b 06                	mov    eax,DWORD PTR [esi]
c002026a:	e9 e3 01 00 00       	jmp    c0020452 <Vm::x87Handler(regs*)+0x9f2>
c002026f:	80 fa 04             	cmp    dl,0x4
c0020272:	75 12                	jne    c0020286 <Vm::x87Handler(regs*)+0x826>
c0020274:	31 d2                	xor    edx,edx
c0020276:	51                   	push   ecx
c0020277:	51                   	push   ecx
c0020278:	8b 06                	mov    eax,DWORD PTR [esi]
c002027a:	52                   	push   edx
c002027b:	50                   	push   eax
c002027c:	e8 d0 f4 ff ff       	call   c001f751 <Vm::fpuLongToFloat(long long)>
c0020281:	e9 ee 00 00 00       	jmp    c0020374 <Vm::x87Handler(regs*)+0x914>
c0020286:	31 c0                	xor    eax,eax
c0020288:	80 fa 07             	cmp    dl,0x7
c002028b:	0f 85 30 02 00 00    	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c0020291:	83 ec 0c             	sub    esp,0xc
c0020294:	6a 00                	push   0x0
c0020296:	e8 88 f6 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c002029b:	89 c7                	mov    edi,eax
c002029d:	89 d5                	mov    ebp,edx
c002029f:	58                   	pop    eax
c00202a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00202a2:	5a                   	pop    edx
c00202a3:	31 d2                	xor    edx,edx
c00202a5:	52                   	push   edx
c00202a6:	50                   	push   eax
c00202a7:	e8 a5 f4 ff ff       	call   c001f751 <Vm::fpuLongToFloat(long long)>
c00202ac:	e9 62 01 00 00       	jmp    c0020413 <Vm::x87Handler(regs*)+0x9b3>
c00202b1:	84 d2                	test   dl,dl
c00202b3:	75 0d                	jne    c00202c2 <Vm::x87Handler(regs*)+0x862>
c00202b5:	31 d2                	xor    edx,edx
c00202b7:	55                   	push   ebp
c00202b8:	55                   	push   ebp
c00202b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00202bb:	52                   	push   edx
c00202bc:	50                   	push   eax
c00202bd:	e9 d3 01 00 00       	jmp    c0020495 <Vm::x87Handler(regs*)+0xa35>
c00202c2:	31 c0                	xor    eax,eax
c00202c4:	80 fa 02             	cmp    dl,0x2
c00202c7:	0f 85 f4 01 00 00    	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c00202cd:	83 ec 0c             	sub    esp,0xc
c00202d0:	6a 00                	push   0x0
c00202d2:	e8 4c f6 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c00202d7:	59                   	pop    ecx
c00202d8:	5f                   	pop    edi
c00202d9:	e9 6a f9 ff ff       	jmp    c001fc48 <Vm::x87Handler(regs*)+0x1e8>
c00202de:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202e2:	84 d2                	test   dl,dl
c00202e4:	75 2a                	jne    c0020310 <Vm::x87Handler(regs*)+0x8b0>
c00202e6:	50                   	push   eax
c00202e7:	50                   	push   eax
c00202e8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202eb:	ff 36                	push   DWORD PTR [esi]
c00202ed:	e8 c5 f3 ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c00202f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202f9:	89 c6                	mov    esi,eax
c00202fb:	89 d7                	mov    edi,edx
c00202fd:	e8 21 f6 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020302:	57                   	push   edi
c0020303:	56                   	push   esi
c0020304:	52                   	push   edx
c0020305:	50                   	push   eax
c0020306:	e8 8e f5 ff ff       	call   c001f899 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002030b:	e9 64 01 00 00       	jmp    c0020474 <Vm::x87Handler(regs*)+0xa14>
c0020310:	80 fa 01             	cmp    dl,0x1
c0020313:	75 11                	jne    c0020326 <Vm::x87Handler(regs*)+0x8c6>
c0020315:	50                   	push   eax
c0020316:	50                   	push   eax
c0020317:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002031a:	ff 36                	push   DWORD PTR [esi]
c002031c:	e8 96 f3 ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c0020321:	e9 35 01 00 00       	jmp    c002045b <Vm::x87Handler(regs*)+0x9fb>
c0020326:	80 fa 02             	cmp    dl,0x2
c0020329:	0f 85 54 f9 ff ff    	jne    c001fc83 <Vm::x87Handler(regs*)+0x223>
c002032f:	55                   	push   ebp
c0020330:	55                   	push   ebp
c0020331:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020334:	ff 36                	push   DWORD PTR [esi]
c0020336:	e8 7c f3 ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c002033b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020342:	89 c6                	mov    esi,eax
c0020344:	89 d7                	mov    edi,edx
c0020346:	e8 d8 f5 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c002034b:	57                   	push   edi
c002034c:	56                   	push   esi
c002034d:	52                   	push   edx
c002034e:	50                   	push   eax
c002034f:	e8 f2 f4 ff ff       	call   c001f846 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020354:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020358:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002035b:	83 c4 20             	add    esp,0x20
c002035e:	e9 74 f7 ff ff       	jmp    c001fad7 <Vm::x87Handler(regs*)+0x77>
c0020363:	80 fa 04             	cmp    dl,0x4
c0020366:	75 2a                	jne    c0020392 <Vm::x87Handler(regs*)+0x932>
c0020368:	51                   	push   ecx
c0020369:	51                   	push   ecx
c002036a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002036d:	ff 36                	push   DWORD PTR [esi]
c002036f:	e8 43 f3 ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c0020374:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002037b:	89 c6                	mov    esi,eax
c002037d:	89 d7                	mov    edi,edx
c002037f:	e8 9f f5 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020384:	57                   	push   edi
c0020385:	56                   	push   esi
c0020386:	52                   	push   edx
c0020387:	50                   	push   eax
c0020388:	e8 36 f5 ff ff       	call   c001f8c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002038d:	e9 e2 00 00 00       	jmp    c0020474 <Vm::x87Handler(regs*)+0xa14>
c0020392:	80 fa 05             	cmp    dl,0x5
c0020395:	75 28                	jne    c00203bf <Vm::x87Handler(regs*)+0x95f>
c0020397:	83 ec 0c             	sub    esp,0xc
c002039a:	6a 00                	push   0x0
c002039c:	e8 82 f5 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c00203a1:	89 c7                	mov    edi,eax
c00203a3:	89 d5                	mov    ebp,edx
c00203a5:	58                   	pop    eax
c00203a6:	5a                   	pop    edx
c00203a7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203aa:	ff 36                	push   DWORD PTR [esi]
c00203ac:	e8 06 f3 ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c00203b1:	83 c4 10             	add    esp,0x10
c00203b4:	55                   	push   ebp
c00203b5:	57                   	push   edi
c00203b6:	52                   	push   edx
c00203b7:	50                   	push   eax
c00203b8:	e8 06 f5 ff ff       	call   c001f8c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203bd:	eb 60                	jmp    c002041f <Vm::x87Handler(regs*)+0x9bf>
c00203bf:	80 fa 06             	cmp    dl,0x6
c00203c2:	75 2a                	jne    c00203ee <Vm::x87Handler(regs*)+0x98e>
c00203c4:	51                   	push   ecx
c00203c5:	51                   	push   ecx
c00203c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c9:	ff 36                	push   DWORD PTR [esi]
c00203cb:	e8 e7 f2 ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c00203d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203d7:	89 c6                	mov    esi,eax
c00203d9:	89 d7                	mov    edi,edx
c00203db:	e8 43 f5 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c00203e0:	57                   	push   edi
c00203e1:	56                   	push   esi
c00203e2:	52                   	push   edx
c00203e3:	50                   	push   eax
c00203e4:	e8 08 f5 ff ff       	call   c001f8f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203e9:	e9 86 00 00 00       	jmp    c0020474 <Vm::x87Handler(regs*)+0xa14>
c00203ee:	31 c0                	xor    eax,eax
c00203f0:	80 fa 07             	cmp    dl,0x7
c00203f3:	0f 85 c8 00 00 00    	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c00203f9:	83 ec 0c             	sub    esp,0xc
c00203fc:	6a 00                	push   0x0
c00203fe:	e8 20 f5 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020403:	89 c7                	mov    edi,eax
c0020405:	89 d5                	mov    ebp,edx
c0020407:	58                   	pop    eax
c0020408:	5a                   	pop    edx
c0020409:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002040c:	ff 36                	push   DWORD PTR [esi]
c002040e:	e8 a4 f2 ff ff       	call   c001f6b7 <Vm::fpu64ToInternal(unsigned long long)>
c0020413:	83 c4 10             	add    esp,0x10
c0020416:	55                   	push   ebp
c0020417:	57                   	push   edi
c0020418:	52                   	push   edx
c0020419:	50                   	push   eax
c002041a:	e8 d2 f4 ff ff       	call   c001f8f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002041f:	83 c4 0c             	add    esp,0xc
c0020422:	eb 53                	jmp    c0020477 <Vm::x87Handler(regs*)+0xa17>
c0020424:	31 c0                	xor    eax,eax
c0020426:	80 fa 02             	cmp    dl,0x2
c0020429:	0f 85 92 00 00 00    	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c002042f:	83 ec 0c             	sub    esp,0xc
c0020432:	6a 00                	push   0x0
c0020434:	e8 ea f4 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c0020439:	59                   	pop    ecx
c002043a:	5f                   	pop    edi
c002043b:	52                   	push   edx
c002043c:	50                   	push   eax
c002043d:	e8 27 f2 ff ff       	call   c001f669 <Vm::fpuInternalTo64(unsigned long long)>
c0020442:	eb 70                	jmp    c00204b4 <Vm::x87Handler(regs*)+0xa54>
c0020444:	31 c0                	xor    eax,eax
c0020446:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002044b:	75 74                	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c002044d:	50                   	push   eax
c002044e:	50                   	push   eax
c002044f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020452:	31 d2                	xor    edx,edx
c0020454:	52                   	push   edx
c0020455:	50                   	push   eax
c0020456:	e8 f6 f2 ff ff       	call   c001f751 <Vm::fpuLongToFloat(long long)>
c002045b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020462:	89 c6                	mov    esi,eax
c0020464:	89 d7                	mov    edi,edx
c0020466:	e8 b8 f4 ff ff       	call   c001f923 <Vm::fpuGetReg(int)>
c002046b:	57                   	push   edi
c002046c:	56                   	push   esi
c002046d:	52                   	push   edx
c002046e:	50                   	push   eax
c002046f:	e8 5e f4 ff ff       	call   c001f8d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020474:	83 c4 1c             	add    esp,0x1c
c0020477:	52                   	push   edx
c0020478:	50                   	push   eax
c0020479:	6a 00                	push   0x0
c002047b:	e8 e6 f4 ff ff       	call   c001f966 <Vm::fpuSetReg(int, unsigned long long)>
c0020480:	e9 f2 f7 ff ff       	jmp    c001fc77 <Vm::x87Handler(regs*)+0x217>
c0020485:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020489:	80 fa 05             	cmp    dl,0x5
c002048c:	75 11                	jne    c002049f <Vm::x87Handler(regs*)+0xa3f>
c002048e:	55                   	push   ebp
c002048f:	55                   	push   ebp
c0020490:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020493:	ff 36                	push   DWORD PTR [esi]
c0020495:	e8 81 f2 ff ff       	call   c001f71b <Vm::fpuULongToFloat(unsigned long long)>
c002049a:	e9 cf f7 ff ff       	jmp    c001fc6e <Vm::x87Handler(regs*)+0x20e>
c002049f:	31 c0                	xor    eax,eax
c00204a1:	80 fa 07             	cmp    dl,0x7
c00204a4:	75 1b                	jne    c00204c1 <Vm::x87Handler(regs*)+0xa61>
c00204a6:	e8 63 f5 ff ff       	call   c001fa0e <Vm::fpuPop()>
c00204ab:	51                   	push   ecx
c00204ac:	51                   	push   ecx
c00204ad:	52                   	push   edx
c00204ae:	50                   	push   eax
c00204af:	e8 0c f2 ff ff       	call   c001f6c0 <Vm::fpuFloatToLong(unsigned long long)>
c00204b4:	83 c4 10             	add    esp,0x10
c00204b7:	89 06                	mov    DWORD PTR [esi],eax
c00204b9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204bc:	e9 f8 f7 ff ff       	jmp    c001fcb9 <Vm::x87Handler(regs*)+0x259>
c00204c1:	83 c4 1c             	add    esp,0x1c
c00204c4:	5b                   	pop    ebx
c00204c5:	5e                   	pop    esi
c00204c6:	5f                   	pop    edi
c00204c7:	5d                   	pop    ebp
c00204c8:	c3                   	ret    

c00204c9 <__static_initialization_and_destruction_0(int, int)>:
c00204c9:	83 ec 0c             	sub    esp,0xc
c00204cc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204d1:	75 1a                	jne    c00204ed <__static_initialization_and_destruction_0(int, int)+0x24>
c00204d3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204db:	75 10                	jne    c00204ed <__static_initialization_and_destruction_0(int, int)+0x24>
c00204dd:	83 ec 0c             	sub    esp,0xc
c00204e0:	68 a0 19 03 c0       	push   0xc00319a0
c00204e5:	e8 16 88 00 00       	call   c0028d00 <Vm::_FPUState::_FPUState()>
c00204ea:	83 c4 10             	add    esp,0x10
c00204ed:	90                   	nop
c00204ee:	83 c4 0c             	add    esp,0xc
c00204f1:	c3                   	ret    

c00204f2 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204f2:	83 ec 0c             	sub    esp,0xc
c00204f5:	83 ec 08             	sub    esp,0x8
c00204f8:	68 ff ff 00 00       	push   0xffff
c00204fd:	6a 01                	push   0x1
c00204ff:	e8 c5 ff ff ff       	call   c00204c9 <__static_initialization_and_destruction_0(int, int)>
c0020504:	83 c4 10             	add    esp,0x10
c0020507:	83 c4 0c             	add    esp,0xc
c002050a:	c3                   	ret    
c002050b:	90                   	nop

c002050c <FAT::getName()>:
c002050c:	b8 88 c7 02 c0       	mov    eax,0xc002c788
c0020511:	c3                   	ret    

c0020512 <FAT::tell(void*, unsigned long long*)>:
c0020512:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020517:	75 06                	jne    c002051f <FAT::tell(void*, unsigned long long*)+0xd>
c0020519:	b8 04 00 00 00       	mov    eax,0x4
c002051e:	c3                   	ret    
c002051f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020524:	75 06                	jne    c002052c <FAT::tell(void*, unsigned long long*)+0x1a>
c0020526:	b8 04 00 00 00       	mov    eax,0x4
c002052b:	c3                   	ret    
c002052c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020530:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020533:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020536:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002053a:	89 01                	mov    DWORD PTR [ecx],eax
c002053c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002053f:	b8 00 00 00 00       	mov    eax,0x0
c0020544:	c3                   	ret    
c0020545:	90                   	nop

c0020546 <FAT::stat(void*, unsigned long long*)>:
c0020546:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002054b:	75 06                	jne    c0020553 <FAT::stat(void*, unsigned long long*)+0xd>
c002054d:	b8 04 00 00 00       	mov    eax,0x4
c0020552:	c3                   	ret    
c0020553:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020558:	75 06                	jne    c0020560 <FAT::stat(void*, unsigned long long*)+0x1a>
c002055a:	b8 04 00 00 00       	mov    eax,0x4
c002055f:	c3                   	ret    
c0020560:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020564:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020567:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002056a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002056e:	89 01                	mov    DWORD PTR [ecx],eax
c0020570:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020573:	b8 00 00 00 00       	mov    eax,0x0
c0020578:	c3                   	ret    
c0020579:	90                   	nop

c002057a <FAT::~FAT()>:
c002057a:	83 ec 0c             	sub    esp,0xc
c002057d:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c0020582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020586:	89 10                	mov    DWORD PTR [eax],edx
c0020588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002058c:	83 ec 0c             	sub    esp,0xc
c002058f:	50                   	push   eax
c0020590:	e8 e3 2c ff ff       	call   c0013278 <Filesystem::~Filesystem()>
c0020595:	83 c4 10             	add    esp,0x10
c0020598:	90                   	nop
c0020599:	83 c4 0c             	add    esp,0xc
c002059c:	c3                   	ret    
c002059d:	90                   	nop

c002059e <FAT::~FAT()>:
c002059e:	83 ec 0c             	sub    esp,0xc
c00205a1:	83 ec 0c             	sub    esp,0xc
c00205a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205a8:	e8 cd ff ff ff       	call   c002057a <FAT::~FAT()>
c00205ad:	83 c4 10             	add    esp,0x10
c00205b0:	83 ec 08             	sub    esp,0x8
c00205b3:	6a 08                	push   0x8
c00205b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b9:	e8 b2 28 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00205be:	83 c4 10             	add    esp,0x10
c00205c1:	83 c4 0c             	add    esp,0xc
c00205c4:	c3                   	ret    
c00205c5:	90                   	nop

c00205c6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205c6:	83 ec 1c             	sub    esp,0x1c
c00205c9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205d0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205d9:	8b 04 85 20 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5e0]
c00205e0:	83 f8 ff             	cmp    eax,0xffffffff
c00205e3:	75 34                	jne    c0020619 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205e5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205e9:	88 c2                	mov    dl,al
c00205eb:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c00205f0:	01 d0                	add    eax,edx
c00205f2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205f6:	8b 15 00 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a00
c00205fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020600:	89 14 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],edx
c0020607:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c002060c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020610:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c0020617:	eb 17                	jmp    c0020630 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020619:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002061d:	88 c2                	mov    dl,al
c002061f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020623:	8b 04 85 20 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5e0]
c002062a:	01 d0                	add    eax,edx
c002062c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020630:	83 ec 04             	sub    esp,0x4
c0020633:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020637:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002063b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002063f:	50                   	push   eax
c0020640:	e8 f3 66 fe ff       	call   c0006d38 <f_getlabel>
c0020645:	83 c4 10             	add    esp,0x10
c0020648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002064c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020651:	75 07                	jne    c002065a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020653:	b8 00 00 00 00       	mov    eax,0x0
c0020658:	eb 05                	jmp    c002065f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002065a:	b8 01 00 00 00       	mov    eax,0x1
c002065f:	83 c4 1c             	add    esp,0x1c
c0020662:	c3                   	ret    
c0020663:	90                   	nop

c0020664 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020664:	57                   	push   edi
c0020665:	83 ec 58             	sub    esp,0x58
c0020668:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020670:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020674:	b9 0f 00 00 00       	mov    ecx,0xf
c0020679:	b8 00 00 00 00       	mov    eax,0x0
c002067e:	fc                   	cld    
c002067f:	89 d7                	mov    edi,edx
c0020681:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020683:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020687:	8b 04 85 20 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5e0]
c002068e:	83 f8 ff             	cmp    eax,0xffffffff
c0020691:	75 34                	jne    c00206c7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020693:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020697:	88 c2                	mov    dl,al
c0020699:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c002069e:	01 d0                	add    eax,edx
c00206a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206a4:	8b 15 00 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a00
c00206aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206ae:	89 14 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],edx
c00206b5:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c00206ba:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206be:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c00206c5:	eb 17                	jmp    c00206de <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206c7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206cb:	88 c2                	mov    dl,al
c00206cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206d1:	8b 04 85 20 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5e0]
c00206d8:	01 d0                	add    eax,edx
c00206da:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206de:	83 ec 08             	sub    esp,0x8
c00206e1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206e9:	50                   	push   eax
c00206ea:	e8 85 02 fe ff       	call   c0000974 <strcat>
c00206ef:	83 c4 10             	add    esp,0x10
c00206f2:	83 ec 0c             	sub    esp,0xc
c00206f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206f9:	50                   	push   eax
c00206fa:	e8 27 68 fe ff       	call   c0006f26 <f_setlabel>
c00206ff:	83 c4 10             	add    esp,0x10
c0020702:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020706:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002070b:	75 07                	jne    c0020714 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002070d:	b8 00 00 00 00       	mov    eax,0x0
c0020712:	eb 05                	jmp    c0020719 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020714:	b8 01 00 00 00       	mov    eax,0x1
c0020719:	83 c4 58             	add    esp,0x58
c002071c:	5f                   	pop    edi
c002071d:	c3                   	ret    

c002071e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002071e:	83 ec 2c             	sub    esp,0x2c
c0020721:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020729:	83 ec 08             	sub    esp,0x8
c002072c:	68 ac c7 02 c0       	push   0xc002c7ac
c0020731:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020735:	e8 86 01 fe ff       	call   c00008c0 <strcmp>
c002073a:	83 c4 10             	add    esp,0x10
c002073d:	85 c0                	test   eax,eax
c002073f:	0f 94 c0             	sete   al
c0020742:	84 c0                	test   al,al
c0020744:	74 0d                	je     c0020753 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020746:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002074e:	e9 a6 00 00 00       	jmp    c00207f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020753:	83 ec 08             	sub    esp,0x8
c0020756:	68 9e c7 02 c0       	push   0xc002c79e
c002075b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002075f:	e8 5c 01 fe ff       	call   c00008c0 <strcmp>
c0020764:	83 c4 10             	add    esp,0x10
c0020767:	85 c0                	test   eax,eax
c0020769:	0f 94 c0             	sete   al
c002076c:	84 c0                	test   al,al
c002076e:	74 0a                	je     c002077a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020770:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020778:	eb 7f                	jmp    c00207f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002077a:	83 ec 08             	sub    esp,0x8
c002077d:	68 a4 c7 02 c0       	push   0xc002c7a4
c0020782:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020786:	e8 35 01 fe ff       	call   c00008c0 <strcmp>
c002078b:	83 c4 10             	add    esp,0x10
c002078e:	85 c0                	test   eax,eax
c0020790:	0f 94 c0             	sete   al
c0020793:	84 c0                	test   al,al
c0020795:	74 0a                	je     c00207a1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020797:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002079f:	eb 58                	jmp    c00207f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207a1:	83 ec 08             	sub    esp,0x8
c00207a4:	68 6c 94 02 c0       	push   0xc002946c
c00207a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ad:	e8 0e 01 fe ff       	call   c00008c0 <strcmp>
c00207b2:	83 c4 10             	add    esp,0x10
c00207b5:	85 c0                	test   eax,eax
c00207b7:	0f 94 c0             	sete   al
c00207ba:	84 c0                	test   al,al
c00207bc:	74 0a                	je     c00207c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207be:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207c6:	eb 31                	jmp    c00207f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207c8:	83 ec 08             	sub    esp,0x8
c00207cb:	68 aa c7 02 c0       	push   0xc002c7aa
c00207d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207d4:	e8 e7 00 fe ff       	call   c00008c0 <strcmp>
c00207d9:	83 c4 10             	add    esp,0x10
c00207dc:	85 c0                	test   eax,eax
c00207de:	0f 94 c0             	sete   al
c00207e1:	84 c0                	test   al,al
c00207e3:	74 0a                	je     c00207ef <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207e5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207ed:	eb 0a                	jmp    c00207f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207ef:	b8 08 00 00 00       	mov    eax,0x8
c00207f4:	e9 04 01 00 00       	jmp    c00208fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207f9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020800:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020805:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020809:	8b 04 85 20 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5e0]
c0020810:	83 f8 ff             	cmp    eax,0xffffffff
c0020813:	75 34                	jne    c0020849 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020815:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020819:	88 c2                	mov    dl,al
c002081b:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c0020820:	01 d0                	add    eax,edx
c0020822:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020826:	8b 15 00 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a00
c002082c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020830:	89 14 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],edx
c0020837:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c002083c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020840:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c0020847:	eb 17                	jmp    c0020860 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020849:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002084d:	88 c2                	mov    dl,al
c002084f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020853:	8b 04 85 20 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5e0]
c002085a:	01 d0                	add    eax,edx
c002085c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020860:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020864:	88 04 24             	mov    BYTE PTR [esp],al
c0020867:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002086b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002086f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020877:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002087c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020884:	83 ec 0c             	sub    esp,0xc
c0020887:	68 00 20 00 00       	push   0x2000
c002088c:	e8 af ef fe ff       	call   c000f840 <malloc>
c0020891:	83 c4 10             	add    esp,0x10
c0020894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020898:	68 00 20 00 00       	push   0x2000
c002089d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208a1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208a5:	50                   	push   eax
c00208a6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208aa:	50                   	push   eax
c00208ab:	e8 c1 6a fe ff       	call   c0007371 <f_mkfs>
c00208b0:	83 c4 10             	add    esp,0x10
c00208b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208bc:	75 07                	jne    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208be:	b8 00 00 00 00       	mov    eax,0x0
c00208c3:	eb 38                	jmp    c00208fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208c5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208ca:	75 17                	jne    c00208e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208cc:	83 ec 0c             	sub    esp,0xc
c00208cf:	68 dc c7 02 c0       	push   0xc002c7dc
c00208d4:	e8 77 26 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00208d9:	83 c4 10             	add    esp,0x10
c00208dc:	b8 09 00 00 00       	mov    eax,0x9
c00208e1:	eb 1a                	jmp    c00208fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208e7:	83 ec 08             	sub    esp,0x8
c00208ea:	50                   	push   eax
c00208eb:	68 b0 c7 02 c0       	push   0xc002c7b0
c00208f0:	e8 5b 26 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00208f5:	83 c4 10             	add    esp,0x10
c00208f8:	b8 01 00 00 00       	mov    eax,0x1
c00208fd:	83 c4 2c             	add    esp,0x2c
c0020900:	c3                   	ret    
c0020901:	90                   	nop

c0020902 <FAT::tryMount(LogicalDisk*, int)>:
c0020902:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020908:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c002090d:	83 f8 14             	cmp    eax,0x14
c0020910:	75 17                	jne    c0020929 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020912:	83 ec 0c             	sub    esp,0xc
c0020915:	68 c2 c7 02 c0       	push   0xc002c7c2
c002091a:	e8 d2 9c ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c002091f:	83 c4 10             	add    esp,0x10
c0020922:	b0 00                	mov    al,0x0
c0020924:	e9 d7 01 00 00       	jmp    c0020b00 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020929:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020930:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020936:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002093c:	3d 00 02 00 00       	cmp    eax,0x200
c0020941:	74 07                	je     c002094a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020943:	b0 00                	mov    al,0x0
c0020945:	e9 b6 01 00 00       	jmp    c0020b00 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002094a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020952:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020959:	8b 04 85 20 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5e0]
c0020960:	83 f8 ff             	cmp    eax,0xffffffff
c0020963:	74 07                	je     c002096c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020965:	b0 01                	mov    al,0x1
c0020967:	e9 94 01 00 00       	jmp    c0020b00 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002096c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020976:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002097e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020985:	88 c2                	mov    dl,al
c0020987:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c002098c:	01 d0                	add    eax,edx
c002098e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020995:	8b 15 00 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a00
c002099b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209a2:	89 14 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],edx
c00209a9:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c00209ae:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209b5:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c00209bc:	83 ec 0c             	sub    esp,0xc
c00209bf:	68 54 02 00 00       	push   0x254
c00209c4:	e8 77 ee fe ff       	call   c000f840 <malloc>
c00209c9:	83 c4 10             	add    esp,0x10
c00209cc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209d3:	83 ec 04             	sub    esp,0x4
c00209d6:	6a 00                	push   0x0
c00209d8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209df:	50                   	push   eax
c00209e0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209e7:	e8 43 45 fe ff       	call   c0004f2f <f_mount>
c00209ec:	83 c4 10             	add    esp,0x10
c00209ef:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209f6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00209fe:	74 19                	je     c0020a19 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a00:	83 ec 0c             	sub    esp,0xc
c0020a03:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a0a:	e8 51 ee fe ff       	call   c000f860 <rfree>
c0020a0f:	83 c4 10             	add    esp,0x10
c0020a12:	b0 00                	mov    al,0x0
c0020a14:	e9 e7 00 00 00       	jmp    c0020b00 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a19:	83 ec 04             	sub    esp,0x4
c0020a1c:	68 00 01 00 00       	push   0x100
c0020a21:	6a 00                	push   0x0
c0020a23:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a2a:	50                   	push   eax
c0020a2b:	e8 48 fd fd ff       	call   c0000778 <memset>
c0020a30:	83 c4 10             	add    esp,0x10
c0020a33:	83 ec 08             	sub    esp,0x8
c0020a36:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a3d:	50                   	push   eax
c0020a3e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a45:	50                   	push   eax
c0020a46:	e8 29 ff fd ff       	call   c0000974 <strcat>
c0020a4b:	83 c4 10             	add    esp,0x10
c0020a4e:	83 ec 08             	sub    esp,0x8
c0020a51:	68 d0 c7 02 c0       	push   0xc002c7d0
c0020a56:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a5d:	50                   	push   eax
c0020a5e:	e8 11 ff fd ff       	call   c0000974 <strcat>
c0020a63:	83 c4 10             	add    esp,0x10
c0020a66:	83 ec 04             	sub    esp,0x4
c0020a69:	6a 01                	push   0x1
c0020a6b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a72:	50                   	push   eax
c0020a73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a77:	50                   	push   eax
c0020a78:	e8 14 45 fe ff       	call   c0004f91 <f_open>
c0020a7d:	83 c4 10             	add    esp,0x10
c0020a80:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a87:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a8e:	85 c0                	test   eax,eax
c0020a90:	74 0a                	je     c0020a9c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a92:	78 2d                	js     c0020ac1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a94:	83 e8 04             	sub    eax,0x4
c0020a97:	83 f8 01             	cmp    eax,0x1
c0020a9a:	77 25                	ja     c0020ac1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a9c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020aa4:	83 ec 0c             	sub    esp,0xc
c0020aa7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020aab:	50                   	push   eax
c0020aac:	e8 32 50 fe ff       	call   c0005ae3 <f_close>
c0020ab1:	83 c4 10             	add    esp,0x10
c0020ab4:	90                   	nop
c0020ab5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020abd:	74 3a                	je     c0020af9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020abf:	eb 2d                	jmp    c0020aee <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020ac1:	83 ec 0c             	sub    esp,0xc
c0020ac4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020acb:	e8 90 ed fe ff       	call   c000f860 <rfree>
c0020ad0:	83 c4 10             	add    esp,0x10
c0020ad3:	83 ec 04             	sub    esp,0x4
c0020ad6:	6a 00                	push   0x0
c0020ad8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020adf:	50                   	push   eax
c0020ae0:	6a 00                	push   0x0
c0020ae2:	e8 48 44 fe ff       	call   c0004f2f <f_mount>
c0020ae7:	83 c4 10             	add    esp,0x10
c0020aea:	b0 00                	mov    al,0x0
c0020aec:	eb 12                	jmp    c0020b00 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020aee:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c0020af3:	40                   	inc    eax
c0020af4:	a3 00 1a 03 c0       	mov    ds:0xc0031a00,eax
c0020af9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b00:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b06:	c3                   	ret    
c0020b07:	90                   	nop

c0020b08 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b08:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b0e:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b16:	74 0a                	je     c0020b22 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b18:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b20:	75 0a                	jne    c0020b2c <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b22:	b8 04 00 00 00       	mov    eax,0x4
c0020b27:	e9 db 00 00 00       	jmp    c0020c07 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b2c:	83 ec 08             	sub    esp,0x8
c0020b2f:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b36:	50                   	push   eax
c0020b37:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b3e:	e8 aa 55 fe ff       	call   c00060ed <f_readdir>
c0020b43:	83 c4 10             	add    esp,0x10
c0020b46:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b4d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b53:	83 ec 0c             	sub    esp,0xc
c0020b56:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b5d:	83 c0 1a             	add    eax,0x1a
c0020b60:	50                   	push   eax
c0020b61:	e8 2e fc fd ff       	call   c0000794 <strlen>
c0020b66:	83 c4 10             	add    esp,0x10
c0020b69:	ba 00 00 00 00       	mov    edx,0x0
c0020b6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b72:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b76:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b7d:	0f b6 c0             	movzx  eax,al
c0020b80:	83 e0 10             	and    eax,0x10
c0020b83:	74 07                	je     c0020b8c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b85:	b8 02 00 00 00       	mov    eax,0x2
c0020b8a:	eb 05                	jmp    c0020b91 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b8c:	b8 01 00 00 00       	mov    eax,0x1
c0020b91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b95:	83 ec 08             	sub    esp,0x8
c0020b98:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b9f:	83 c0 1a             	add    eax,0x1a
c0020ba2:	50                   	push   eax
c0020ba3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ba7:	83 c0 10             	add    eax,0x10
c0020baa:	50                   	push   eax
c0020bab:	e8 84 fc fd ff       	call   c0000834 <strcpy>
c0020bb0:	83 c4 10             	add    esp,0x10
c0020bb3:	83 ec 04             	sub    esp,0x4
c0020bb6:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bbd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bc1:	50                   	push   eax
c0020bc2:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bc9:	e8 76 fb fd ff       	call   c0000744 <memcpy>
c0020bce:	83 c4 10             	add    esp,0x10
c0020bd1:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020bd8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bde:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020be5:	84 c0                	test   al,al
c0020be7:	75 07                	jne    c0020bf0 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020be9:	b8 07 00 00 00       	mov    eax,0x7
c0020bee:	eb 17                	jmp    c0020c07 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bf0:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020bf7:	85 c0                	test   eax,eax
c0020bf9:	75 07                	jne    c0020c02 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020bfb:	b8 00 00 00 00       	mov    eax,0x0
c0020c00:	eb 05                	jmp    c0020c07 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c02:	b8 01 00 00 00       	mov    eax,0x1
c0020c07:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c0d:	c3                   	ret    

c0020c0e <FAT::read(void*, unsigned long, void*, int*)>:
c0020c0e:	83 ec 1c             	sub    esp,0x1c
c0020c11:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c16:	74 07                	je     c0020c1f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c18:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c1d:	75 07                	jne    c0020c26 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c1f:	b8 04 00 00 00       	mov    eax,0x4
c0020c24:	eb 3d                	jmp    c0020c63 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c26:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c2a:	50                   	push   eax
c0020c2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c37:	e8 91 47 fe ff       	call   c00053cd <f_read>
c0020c3c:	83 c4 10             	add    esp,0x10
c0020c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c47:	89 c2                	mov    edx,eax
c0020c49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c4d:	89 10                	mov    DWORD PTR [eax],edx
c0020c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c53:	85 c0                	test   eax,eax
c0020c55:	75 07                	jne    c0020c5e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c57:	b8 00 00 00 00       	mov    eax,0x0
c0020c5c:	eb 05                	jmp    c0020c63 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c5e:	b8 01 00 00 00       	mov    eax,0x1
c0020c63:	83 c4 1c             	add    esp,0x1c
c0020c66:	c3                   	ret    
c0020c67:	90                   	nop

c0020c68 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c68:	83 ec 1c             	sub    esp,0x1c
c0020c6b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c70:	74 07                	je     c0020c79 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c72:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c77:	75 07                	jne    c0020c80 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c79:	b8 04 00 00 00       	mov    eax,0x4
c0020c7e:	eb 3d                	jmp    c0020cbd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c84:	50                   	push   eax
c0020c85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c91:	e8 b7 49 fe ff       	call   c000564d <f_write>
c0020c96:	83 c4 10             	add    esp,0x10
c0020c99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ca1:	89 c2                	mov    edx,eax
c0020ca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ca7:	89 10                	mov    DWORD PTR [eax],edx
c0020ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cad:	85 c0                	test   eax,eax
c0020caf:	75 07                	jne    c0020cb8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cb1:	b8 00 00 00 00       	mov    eax,0x0
c0020cb6:	eb 05                	jmp    c0020cbd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cb8:	b8 01 00 00 00       	mov    eax,0x1
c0020cbd:	83 c4 1c             	add    esp,0x1c
c0020cc0:	c3                   	ret    
c0020cc1:	90                   	nop

c0020cc2 <FAT::close(void*)>:
c0020cc2:	83 ec 1c             	sub    esp,0x1c
c0020cc5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cca:	75 07                	jne    c0020cd3 <FAT::close(void*)+0x11>
c0020ccc:	b8 04 00 00 00       	mov    eax,0x4
c0020cd1:	eb 36                	jmp    c0020d09 <FAT::close(void*)+0x47>
c0020cd3:	83 ec 0c             	sub    esp,0xc
c0020cd6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cda:	e8 04 4e fe ff       	call   c0005ae3 <f_close>
c0020cdf:	83 c4 10             	add    esp,0x10
c0020ce2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ce6:	83 ec 0c             	sub    esp,0xc
c0020ce9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ced:	e8 5e eb fe ff       	call   c000f850 <free>
c0020cf2:	83 c4 10             	add    esp,0x10
c0020cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cf9:	85 c0                	test   eax,eax
c0020cfb:	75 07                	jne    c0020d04 <FAT::close(void*)+0x42>
c0020cfd:	b8 00 00 00 00       	mov    eax,0x0
c0020d02:	eb 05                	jmp    c0020d09 <FAT::close(void*)+0x47>
c0020d04:	b8 01 00 00 00       	mov    eax,0x1
c0020d09:	83 c4 1c             	add    esp,0x1c
c0020d0c:	c3                   	ret    
c0020d0d:	90                   	nop

c0020d0e <FAT::closeDir(void*)>:
c0020d0e:	83 ec 1c             	sub    esp,0x1c
c0020d11:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d16:	75 07                	jne    c0020d1f <FAT::closeDir(void*)+0x11>
c0020d18:	b8 04 00 00 00       	mov    eax,0x4
c0020d1d:	eb 36                	jmp    c0020d55 <FAT::closeDir(void*)+0x47>
c0020d1f:	83 ec 0c             	sub    esp,0xc
c0020d22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d26:	e8 a0 53 fe ff       	call   c00060cb <f_closedir>
c0020d2b:	83 c4 10             	add    esp,0x10
c0020d2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d32:	83 ec 0c             	sub    esp,0xc
c0020d35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d39:	e8 12 eb fe ff       	call   c000f850 <free>
c0020d3e:	83 c4 10             	add    esp,0x10
c0020d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d45:	85 c0                	test   eax,eax
c0020d47:	75 07                	jne    c0020d50 <FAT::closeDir(void*)+0x42>
c0020d49:	b8 00 00 00 00       	mov    eax,0x0
c0020d4e:	eb 05                	jmp    c0020d55 <FAT::closeDir(void*)+0x47>
c0020d50:	b8 01 00 00 00       	mov    eax,0x1
c0020d55:	83 c4 1c             	add    esp,0x1c
c0020d58:	c3                   	ret    
c0020d59:	90                   	nop

c0020d5a <FAT::seek(void*, unsigned long long)>:
c0020d5a:	83 ec 2c             	sub    esp,0x2c
c0020d5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d65:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d6d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d72:	75 07                	jne    c0020d7b <FAT::seek(void*, unsigned long long)+0x21>
c0020d74:	b8 04 00 00 00       	mov    eax,0x4
c0020d79:	eb 2f                	jmp    c0020daa <FAT::seek(void*, unsigned long long)+0x50>
c0020d7b:	83 ec 04             	sub    esp,0x4
c0020d7e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d82:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d86:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d8a:	e8 83 4d fe ff       	call   c0005b12 <f_lseek>
c0020d8f:	83 c4 10             	add    esp,0x10
c0020d92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d9a:	85 c0                	test   eax,eax
c0020d9c:	75 07                	jne    c0020da5 <FAT::seek(void*, unsigned long long)+0x4b>
c0020d9e:	b8 00 00 00 00       	mov    eax,0x0
c0020da3:	eb 05                	jmp    c0020daa <FAT::seek(void*, unsigned long long)+0x50>
c0020da5:	b8 01 00 00 00       	mov    eax,0x1
c0020daa:	83 c4 2c             	add    esp,0x2c
c0020dad:	c3                   	ret    

c0020dae <fatWrapperReadDisk>:
c0020dae:	83 ec 1c             	sub    esp,0x1c
c0020db1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020db5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020db9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dcd:	8b 04 85 e0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1620]
c0020dd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dd8:	83 ec 0c             	sub    esp,0xc
c0020ddb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ddf:	52                   	push   edx
c0020de0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020de4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020de8:	50                   	push   eax
c0020de9:	e8 72 59 ff ff       	call   c0016760 <LogicalDisk::read(unsigned long long, int, void*)>
c0020dee:	83 c4 20             	add    esp,0x20
c0020df1:	83 c4 1c             	add    esp,0x1c
c0020df4:	c3                   	ret    

c0020df5 <fatWrapperWriteDisk>:
c0020df5:	83 ec 1c             	sub    esp,0x1c
c0020df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dfc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e04:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e0f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e14:	8b 04 85 e0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1620]
c0020e1b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e1f:	83 ec 0c             	sub    esp,0xc
c0020e22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e26:	52                   	push   edx
c0020e27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e2f:	50                   	push   eax
c0020e30:	e8 97 59 ff ff       	call   c00167cc <LogicalDisk::write(unsigned long long, int, void*)>
c0020e35:	83 c4 20             	add    esp,0x20
c0020e38:	83 c4 1c             	add    esp,0x1c
c0020e3b:	c3                   	ret    

c0020e3c <fatWrapperIoctl>:
c0020e3c:	53                   	push   ebx
c0020e3d:	83 ec 28             	sub    esp,0x28
c0020e40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e48:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e50:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e55:	75 31                	jne    c0020e88 <fatWrapperIoctl+0x4c>
c0020e57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e5f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e64:	8b 04 85 e0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1620]
c0020e6b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e71:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e7b:	66 89 02             	mov    WORD PTR [edx],ax
c0020e7e:	b8 00 00 00 00       	mov    eax,0x0
c0020e83:	e9 b2 00 00 00       	jmp    c0020f3a <fatWrapperIoctl+0xfe>
c0020e88:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e8d:	75 6a                	jne    c0020ef9 <fatWrapperIoctl+0xbd>
c0020e8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e97:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e9c:	8b 04 85 e0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1620]
c0020ea3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ea9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020eaf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020eb5:	89 c8                	mov    eax,ecx
c0020eb7:	89 da                	mov    edx,ebx
c0020eb9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ebd:	c1 e0 0a             	shl    eax,0xa
c0020ec0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ec5:	8b 0c 8d e0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1620]
c0020ecc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ed2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ed8:	89 cb                	mov    ebx,ecx
c0020eda:	c1 fb 1f             	sar    ebx,0x1f
c0020edd:	53                   	push   ebx
c0020ede:	51                   	push   ecx
c0020edf:	52                   	push   edx
c0020ee0:	50                   	push   eax
c0020ee1:	e8 c6 5a 00 00       	call   c00269ac <__udivdi3>
c0020ee6:	83 c4 10             	add    esp,0x10
c0020ee9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020eed:	89 01                	mov    DWORD PTR [ecx],eax
c0020eef:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ef2:	b8 00 00 00 00       	mov    eax,0x0
c0020ef7:	eb 41                	jmp    c0020f3a <fatWrapperIoctl+0xfe>
c0020ef9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020efe:	75 07                	jne    c0020f07 <fatWrapperIoctl+0xcb>
c0020f00:	b8 00 00 00 00       	mov    eax,0x0
c0020f05:	eb 33                	jmp    c0020f3a <fatWrapperIoctl+0xfe>
c0020f07:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f0c:	75 19                	jne    c0020f27 <fatWrapperIoctl+0xeb>
c0020f0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f1a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f20:	b8 00 00 00 00       	mov    eax,0x0
c0020f25:	eb 13                	jmp    c0020f3a <fatWrapperIoctl+0xfe>
c0020f27:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f2c:	75 07                	jne    c0020f35 <fatWrapperIoctl+0xf9>
c0020f2e:	b8 00 00 00 00       	mov    eax,0x0
c0020f33:	eb 05                	jmp    c0020f3a <fatWrapperIoctl+0xfe>
c0020f35:	b8 04 00 00 00       	mov    eax,0x4
c0020f3a:	83 c4 28             	add    esp,0x28
c0020f3d:	5b                   	pop    ebx
c0020f3e:	c3                   	ret    
c0020f3f:	90                   	nop

c0020f40 <FAT::FAT()>:
c0020f40:	83 ec 1c             	sub    esp,0x1c
c0020f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f47:	83 ec 0c             	sub    esp,0xc
c0020f4a:	50                   	push   eax
c0020f4b:	e8 04 23 ff ff       	call   c0013254 <Filesystem::Filesystem()>
c0020f50:	83 c4 10             	add    esp,0x10
c0020f53:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c0020f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f5c:	89 10                	mov    DWORD PTR [eax],edx
c0020f5e:	c7 05 00 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a00,0x0
c0020f68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f70:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f75:	7f 15                	jg     c0020f8c <FAT::FAT()+0x4c>
c0020f77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f7b:	c7 04 85 20 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce5e0],0xffffffff
c0020f86:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f8a:	eb e4                	jmp    c0020f70 <FAT::FAT()+0x30>
c0020f8c:	90                   	nop
c0020f8d:	83 c4 1c             	add    esp,0x1c
c0020f90:	c3                   	ret    
c0020f91:	90                   	nop

c0020f92 <FAT::fixFilepath(char*)>:
c0020f92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f96:	8a 00                	mov    al,BYTE PTR [eax]
c0020f98:	3c 40                	cmp    al,0x40
c0020f9a:	7e 2c                	jle    c0020fc8 <FAT::fixFilepath(char*)+0x36>
c0020f9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fa0:	8a 00                	mov    al,BYTE PTR [eax]
c0020fa2:	83 e8 41             	sub    eax,0x41
c0020fa5:	88 c2                	mov    dl,al
c0020fa7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fab:	88 10                	mov    BYTE PTR [eax],dl
c0020fad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb1:	8a 00                	mov    al,BYTE PTR [eax]
c0020fb3:	0f be c0             	movsx  eax,al
c0020fb6:	8b 04 85 20 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5e0]
c0020fbd:	83 c0 30             	add    eax,0x30
c0020fc0:	88 c2                	mov    dl,al
c0020fc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fc6:	88 10                	mov    BYTE PTR [eax],dl
c0020fc8:	90                   	nop
c0020fc9:	c3                   	ret    

c0020fca <FAT::open(char const*, void**, FileOpenMode)>:
c0020fca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fd0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fd8:	74 0a                	je     c0020fe4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fda:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fe2:	75 0a                	jne    c0020fee <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fe4:	b8 04 00 00 00       	mov    eax,0x4
c0020fe9:	e9 fd 00 00 00       	jmp    c00210eb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fee:	83 ec 08             	sub    esp,0x8
c0020ff1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ff8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ffc:	50                   	push   eax
c0020ffd:	e8 32 f8 fd ff       	call   c0000834 <strcpy>
c0021002:	83 c4 10             	add    esp,0x10
c0021005:	83 ec 08             	sub    esp,0x8
c0021008:	8d 44 24 10          	lea    eax,[esp+0x10]
c002100c:	50                   	push   eax
c002100d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021014:	e8 79 ff ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c0021019:	83 c4 10             	add    esp,0x10
c002101c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021024:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002102b:	83 e0 01             	and    eax,0x1
c002102e:	74 08                	je     c0021038 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021030:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021038:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002103f:	83 e0 04             	and    eax,0x4
c0021042:	74 10                	je     c0021054 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021044:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002104c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021054:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002105b:	83 e0 02             	and    eax,0x2
c002105e:	74 08                	je     c0021068 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021060:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021068:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002106f:	83 e0 08             	and    eax,0x8
c0021072:	74 08                	je     c002107c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021074:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002107c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021083:	83 e0 10             	and    eax,0x10
c0021086:	74 08                	je     c0021090 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021088:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021090:	83 ec 0c             	sub    esp,0xc
c0021093:	68 50 02 00 00       	push   0x250
c0021098:	e8 a3 e7 fe ff       	call   c000f840 <malloc>
c002109d:	83 c4 10             	add    esp,0x10
c00210a0:	89 c2                	mov    edx,eax
c00210a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210a9:	89 10                	mov    DWORD PTR [eax],edx
c00210ab:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210b3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00210bc:	83 ec 04             	sub    esp,0x4
c00210bf:	52                   	push   edx
c00210c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210c4:	52                   	push   edx
c00210c5:	50                   	push   eax
c00210c6:	e8 c6 3e fe ff       	call   c0004f91 <f_open>
c00210cb:	83 c4 10             	add    esp,0x10
c00210ce:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210d5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210dd:	74 07                	je     c00210e6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210df:	b8 01 00 00 00       	mov    eax,0x1
c00210e4:	eb 05                	jmp    c00210eb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210e6:	b8 00 00 00 00       	mov    eax,0x0
c00210eb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210f1:	c3                   	ret    

c00210f2 <FAT::openDir(char const*, void**)>:
c00210f2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210f8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021100:	74 0a                	je     c002110c <FAT::openDir(char const*, void**)+0x1a>
c0021102:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002110a:	75 07                	jne    c0021113 <FAT::openDir(char const*, void**)+0x21>
c002110c:	b8 04 00 00 00       	mov    eax,0x4
c0021111:	eb 7d                	jmp    c0021190 <FAT::openDir(char const*, void**)+0x9e>
c0021113:	83 ec 08             	sub    esp,0x8
c0021116:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002111d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021121:	50                   	push   eax
c0021122:	e8 0d f7 fd ff       	call   c0000834 <strcpy>
c0021127:	83 c4 10             	add    esp,0x10
c002112a:	83 ec 08             	sub    esp,0x8
c002112d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021131:	50                   	push   eax
c0021132:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021139:	e8 54 fe ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c002113e:	83 c4 10             	add    esp,0x10
c0021141:	83 ec 0c             	sub    esp,0xc
c0021144:	6a 4c                	push   0x4c
c0021146:	e8 f5 e6 fe ff       	call   c000f840 <malloc>
c002114b:	83 c4 10             	add    esp,0x10
c002114e:	89 c2                	mov    edx,eax
c0021150:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021157:	89 10                	mov    DWORD PTR [eax],edx
c0021159:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021160:	8b 00                	mov    eax,DWORD PTR [eax]
c0021162:	83 ec 08             	sub    esp,0x8
c0021165:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021169:	52                   	push   edx
c002116a:	50                   	push   eax
c002116b:	e8 59 4e fe ff       	call   c0005fc9 <f_opendir>
c0021170:	83 c4 10             	add    esp,0x10
c0021173:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002117a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021182:	74 07                	je     c002118b <FAT::openDir(char const*, void**)+0x99>
c0021184:	b8 01 00 00 00       	mov    eax,0x1
c0021189:	eb 05                	jmp    c0021190 <FAT::openDir(char const*, void**)+0x9e>
c002118b:	b8 00 00 00 00       	mov    eax,0x0
c0021190:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021196:	c3                   	ret    
c0021197:	90                   	nop

c0021198 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021198:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002119e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211a6:	75 0a                	jne    c00211b2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211a8:	b8 04 00 00 00       	mov    eax,0x4
c00211ad:	e9 c9 00 00 00       	jmp    c002127b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211b2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211ba:	75 0a                	jne    c00211c6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211bc:	b8 04 00 00 00       	mov    eax,0x4
c00211c1:	e9 b5 00 00 00       	jmp    c002127b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211c6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211ce:	75 0a                	jne    c00211da <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211d0:	b8 04 00 00 00       	mov    eax,0x4
c00211d5:	e9 a1 00 00 00       	jmp    c002127b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211da:	83 ec 08             	sub    esp,0x8
c00211dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211e4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211eb:	50                   	push   eax
c00211ec:	e8 43 f6 fd ff       	call   c0000834 <strcpy>
c00211f1:	83 c4 10             	add    esp,0x10
c00211f4:	83 ec 08             	sub    esp,0x8
c00211f7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211fe:	50                   	push   eax
c00211ff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021206:	e8 87 fd ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c002120b:	83 c4 10             	add    esp,0x10
c002120e:	83 ec 08             	sub    esp,0x8
c0021211:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021215:	50                   	push   eax
c0021216:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002121d:	50                   	push   eax
c002121e:	e8 65 4f fe ff       	call   c0006188 <f_stat>
c0021223:	83 c4 10             	add    esp,0x10
c0021226:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002122d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021234:	85 c0                	test   eax,eax
c0021236:	74 07                	je     c002123f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021238:	83 f8 04             	cmp    eax,0x4
c002123b:	74 32                	je     c002126f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002123d:	eb 37                	jmp    c0021276 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002123f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021243:	0f b6 c0             	movzx  eax,al
c0021246:	83 e0 10             	and    eax,0x10
c0021249:	0f 95 c2             	setne  dl
c002124c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021253:	88 10                	mov    BYTE PTR [eax],dl
c0021255:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002125c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021263:	89 01                	mov    DWORD PTR [ecx],eax
c0021265:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021268:	b8 00 00 00 00       	mov    eax,0x0
c002126d:	eb 0c                	jmp    c002127b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002126f:	b8 02 00 00 00       	mov    eax,0x2
c0021274:	eb 05                	jmp    c002127b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021276:	b8 01 00 00 00       	mov    eax,0x1
c002127b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021281:	c3                   	ret    

c0021282 <FAT::unlink(char const*)>:
c0021282:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021288:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021290:	75 07                	jne    c0021299 <FAT::unlink(char const*)+0x17>
c0021292:	b8 04 00 00 00       	mov    eax,0x4
c0021297:	eb 5c                	jmp    c00212f5 <FAT::unlink(char const*)+0x73>
c0021299:	83 ec 08             	sub    esp,0x8
c002129c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212a7:	50                   	push   eax
c00212a8:	e8 87 f5 fd ff       	call   c0000834 <strcpy>
c00212ad:	83 c4 10             	add    esp,0x10
c00212b0:	83 ec 08             	sub    esp,0x8
c00212b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212b7:	50                   	push   eax
c00212b8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212bf:	e8 ce fc ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c00212c4:	83 c4 10             	add    esp,0x10
c00212c7:	83 ec 0c             	sub    esp,0xc
c00212ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212ce:	50                   	push   eax
c00212cf:	e8 06 52 fe ff       	call   c00064da <f_unlink>
c00212d4:	83 c4 10             	add    esp,0x10
c00212d7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212de:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212e5:	85 c0                	test   eax,eax
c00212e7:	75 07                	jne    c00212f0 <FAT::unlink(char const*)+0x6e>
c00212e9:	b8 00 00 00 00       	mov    eax,0x0
c00212ee:	eb 05                	jmp    c00212f5 <FAT::unlink(char const*)+0x73>
c00212f0:	b8 01 00 00 00       	mov    eax,0x1
c00212f5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212fb:	c3                   	ret    

c00212fc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212fc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021302:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021309:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021310:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021314:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021318:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021320:	75 0a                	jne    c002132c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021322:	b8 04 00 00 00       	mov    eax,0x4
c0021327:	e9 1c 01 00 00       	jmp    c0021448 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002132c:	83 ec 08             	sub    esp,0x8
c002132f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021336:	8d 44 24 24          	lea    eax,[esp+0x24]
c002133a:	50                   	push   eax
c002133b:	e8 f4 f4 fd ff       	call   c0000834 <strcpy>
c0021340:	83 c4 10             	add    esp,0x10
c0021343:	83 ec 08             	sub    esp,0x8
c0021346:	8d 44 24 20          	lea    eax,[esp+0x20]
c002134a:	50                   	push   eax
c002134b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021352:	e8 3b fc ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c0021357:	83 c4 10             	add    esp,0x10
c002135a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021362:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002136a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002136f:	83 e0 01             	and    eax,0x1
c0021372:	74 08                	je     c002137c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021374:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002137c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021381:	83 e0 02             	and    eax,0x2
c0021384:	74 08                	je     c002138e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021386:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002138e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021393:	83 e0 04             	and    eax,0x4
c0021396:	74 08                	je     c00213a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021398:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213a5:	83 e0 08             	and    eax,0x8
c00213a8:	74 08                	je     c00213b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213aa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213b7:	83 e0 01             	and    eax,0x1
c00213ba:	74 08                	je     c00213c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213bc:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c9:	83 e0 02             	and    eax,0x2
c00213cc:	74 08                	je     c00213d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213ce:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213db:	83 e0 04             	and    eax,0x4
c00213de:	74 08                	je     c00213e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213e0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213ed:	83 e0 08             	and    eax,0x8
c00213f0:	74 08                	je     c00213fa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213f2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213fa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021401:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021408:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021410:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021418:	83 ec 04             	sub    esp,0x4
c002141b:	52                   	push   edx
c002141c:	50                   	push   eax
c002141d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021421:	50                   	push   eax
c0021422:	e8 55 57 fe ff       	call   c0006b7c <f_chmod>
c0021427:	83 c4 10             	add    esp,0x10
c002142a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021431:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021438:	85 c0                	test   eax,eax
c002143a:	75 07                	jne    c0021443 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002143c:	b8 00 00 00 00       	mov    eax,0x0
c0021441:	eb 05                	jmp    c0021448 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021443:	b8 01 00 00 00       	mov    eax,0x1
c0021448:	81 c4 2c 01 00 00    	add    esp,0x12c
c002144e:	c3                   	ret    
c002144f:	90                   	nop

c0021450 <FAT::rename(char const*, char const*)>:
c0021450:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021456:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002145e:	74 0a                	je     c002146a <FAT::rename(char const*, char const*)+0x1a>
c0021460:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021468:	75 0a                	jne    c0021474 <FAT::rename(char const*, char const*)+0x24>
c002146a:	b8 04 00 00 00       	mov    eax,0x4
c002146f:	e9 98 00 00 00       	jmp    c002150c <FAT::rename(char const*, char const*)+0xbc>
c0021474:	83 ec 08             	sub    esp,0x8
c0021477:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002147e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021485:	50                   	push   eax
c0021486:	e8 a9 f3 fd ff       	call   c0000834 <strcpy>
c002148b:	83 c4 10             	add    esp,0x10
c002148e:	83 ec 08             	sub    esp,0x8
c0021491:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021498:	50                   	push   eax
c0021499:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214a0:	e8 ed fa ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c00214a5:	83 c4 10             	add    esp,0x10
c00214a8:	83 ec 08             	sub    esp,0x8
c00214ab:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214b6:	50                   	push   eax
c00214b7:	e8 78 f3 fd ff       	call   c0000834 <strcpy>
c00214bc:	83 c4 10             	add    esp,0x10
c00214bf:	83 ec 08             	sub    esp,0x8
c00214c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214c6:	50                   	push   eax
c00214c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ce:	e8 bf fa ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c00214d3:	83 c4 10             	add    esp,0x10
c00214d6:	83 ec 08             	sub    esp,0x8
c00214d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214dd:	50                   	push   eax
c00214de:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214e5:	50                   	push   eax
c00214e6:	e8 9e 53 fe ff       	call   c0006889 <f_rename>
c00214eb:	83 c4 10             	add    esp,0x10
c00214ee:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214f5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214fc:	85 c0                	test   eax,eax
c00214fe:	75 07                	jne    c0021507 <FAT::rename(char const*, char const*)+0xb7>
c0021500:	b8 00 00 00 00       	mov    eax,0x0
c0021505:	eb 05                	jmp    c002150c <FAT::rename(char const*, char const*)+0xbc>
c0021507:	b8 01 00 00 00       	mov    eax,0x1
c002150c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021512:	c3                   	ret    
c0021513:	90                   	nop

c0021514 <FAT::mkdir(char const*)>:
c0021514:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002151a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021522:	75 07                	jne    c002152b <FAT::mkdir(char const*)+0x17>
c0021524:	b8 04 00 00 00       	mov    eax,0x4
c0021529:	eb 5c                	jmp    c0021587 <FAT::mkdir(char const*)+0x73>
c002152b:	83 ec 08             	sub    esp,0x8
c002152e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021535:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021539:	50                   	push   eax
c002153a:	e8 f5 f2 fd ff       	call   c0000834 <strcpy>
c002153f:	83 c4 10             	add    esp,0x10
c0021542:	83 ec 08             	sub    esp,0x8
c0021545:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021549:	50                   	push   eax
c002154a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021551:	e8 3c fa ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c0021556:	83 c4 10             	add    esp,0x10
c0021559:	83 ec 0c             	sub    esp,0xc
c002155c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021560:	50                   	push   eax
c0021561:	e8 f7 50 fe ff       	call   c000665d <f_mkdir>
c0021566:	83 c4 10             	add    esp,0x10
c0021569:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021570:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021577:	85 c0                	test   eax,eax
c0021579:	75 07                	jne    c0021582 <FAT::mkdir(char const*)+0x6e>
c002157b:	b8 00 00 00 00       	mov    eax,0x0
c0021580:	eb 05                	jmp    c0021587 <FAT::mkdir(char const*)+0x73>
c0021582:	b8 01 00 00 00       	mov    eax,0x1
c0021587:	81 c4 1c 01 00 00    	add    esp,0x11c
c002158d:	c3                   	ret    

c002158e <FAT::exists(char const*)>:
c002158e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021594:	83 ec 08             	sub    esp,0x8
c0021597:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002159e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215a2:	50                   	push   eax
c00215a3:	e8 8c f2 fd ff       	call   c0000834 <strcpy>
c00215a8:	83 c4 10             	add    esp,0x10
c00215ab:	83 ec 08             	sub    esp,0x8
c00215ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215b2:	50                   	push   eax
c00215b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215ba:	e8 d3 f9 ff ff       	call   c0020f92 <FAT::fixFilepath(char*)>
c00215bf:	83 c4 10             	add    esp,0x10
c00215c2:	83 ec 08             	sub    esp,0x8
c00215c5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215cc:	50                   	push   eax
c00215cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215d1:	50                   	push   eax
c00215d2:	e8 b1 4b fe ff       	call   c0006188 <f_stat>
c00215d7:	83 c4 10             	add    esp,0x10
c00215da:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215e1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215e8:	85 c0                	test   eax,eax
c00215ea:	75 04                	jne    c00215f0 <FAT::exists(char const*)+0x62>
c00215ec:	b0 01                	mov    al,0x1
c00215ee:	eb 02                	jmp    c00215f2 <FAT::exists(char const*)+0x64>
c00215f0:	b0 00                	mov    al,0x0
c00215f2:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215f8:	c3                   	ret    
c00215f9:	90                   	nop

c00215fa <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215fa:	b8 08 00 00 00       	mov    eax,0x8
c00215ff:	c3                   	ret    

c0021600 <ISO9660::seek(void*, unsigned long long)>:
c0021600:	53                   	push   ebx
c0021601:	b8 04 00 00 00       	mov    eax,0x4
c0021606:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002160a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002160e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021612:	85 d2                	test   edx,edx
c0021614:	74 17                	je     c002162d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021616:	89 c8                	mov    eax,ecx
c0021618:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002161b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002161e:	b8 01 00 00 00       	mov    eax,0x1
c0021623:	73 08                	jae    c002162d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021625:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021628:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002162b:	31 c0                	xor    eax,eax
c002162d:	5b                   	pop    ebx
c002162e:	c3                   	ret    
c002162f:	90                   	nop

c0021630 <ISO9660::tell(void*, unsigned long long*)>:
c0021630:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021634:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021638:	85 d2                	test   edx,edx
c002163a:	74 12                	je     c002164e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002163c:	85 c0                	test   eax,eax
c002163e:	74 0e                	je     c002164e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021640:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021643:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021646:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021649:	89 10                	mov    DWORD PTR [eax],edx
c002164b:	31 c0                	xor    eax,eax
c002164d:	c3                   	ret    
c002164e:	b8 04 00 00 00       	mov    eax,0x4
c0021653:	c3                   	ret    

c0021654 <ISO9660::getName()>:
c0021654:	b8 68 c8 02 c0       	mov    eax,0xc002c868
c0021659:	c3                   	ret    

c002165a <ISO9660::stat(void*, unsigned long long*)>:
c002165a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002165e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021662:	85 d2                	test   edx,edx
c0021664:	74 12                	je     c0021678 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021666:	85 c0                	test   eax,eax
c0021668:	74 0e                	je     c0021678 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002166a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002166d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021670:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021673:	89 10                	mov    DWORD PTR [eax],edx
c0021675:	31 c0                	xor    eax,eax
c0021677:	c3                   	ret    
c0021678:	b8 04 00 00 00       	mov    eax,0x4
c002167d:	c3                   	ret    

c002167e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002167e:	b8 01 00 00 00       	mov    eax,0x1
c0021683:	c3                   	ret    

c0021684 <ISO9660::unlink(char const*)>:
c0021684:	b8 01 00 00 00       	mov    eax,0x1
c0021689:	c3                   	ret    

c002168a <ISO9660::write(void*, unsigned long, void*, int*)>:
c002168a:	b8 01 00 00 00       	mov    eax,0x1
c002168f:	c3                   	ret    

c0021690 <ISO9660::rename(char const*, char const*)>:
c0021690:	b8 01 00 00 00       	mov    eax,0x1
c0021695:	c3                   	ret    

c0021696 <ISO9660::mkdir(char const*)>:
c0021696:	b8 01 00 00 00       	mov    eax,0x1
c002169b:	c3                   	ret    

c002169c <ISO9660::close(void*)>:
c002169c:	83 ec 0c             	sub    esp,0xc
c002169f:	b8 04 00 00 00       	mov    eax,0x4
c00216a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216a8:	85 d2                	test   edx,edx
c00216aa:	74 0e                	je     c00216ba <ISO9660::close(void*)+0x1e>
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	52                   	push   edx
c00216b0:	e8 9b e1 fe ff       	call   c000f850 <free>
c00216b5:	83 c4 10             	add    esp,0x10
c00216b8:	31 c0                	xor    eax,eax
c00216ba:	83 c4 0c             	add    esp,0xc
c00216bd:	c3                   	ret    

c00216be <ISO9660::closeDir(void*)>:
c00216be:	83 ec 0c             	sub    esp,0xc
c00216c1:	b8 04 00 00 00       	mov    eax,0x4
c00216c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216ca:	85 d2                	test   edx,edx
c00216cc:	74 0e                	je     c00216dc <ISO9660::closeDir(void*)+0x1e>
c00216ce:	83 ec 0c             	sub    esp,0xc
c00216d1:	52                   	push   edx
c00216d2:	e8 79 e1 fe ff       	call   c000f850 <free>
c00216d7:	83 c4 10             	add    esp,0x10
c00216da:	31 c0                	xor    eax,eax
c00216dc:	83 c4 0c             	add    esp,0xc
c00216df:	c3                   	ret    

c00216e0 <ISO9660::~ISO9660()>:
c00216e0:	83 ec 0c             	sub    esp,0xc
c00216e3:	ba cc c8 02 c0       	mov    edx,0xc002c8cc
c00216e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ec:	89 10                	mov    DWORD PTR [eax],edx
c00216ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f2:	83 ec 0c             	sub    esp,0xc
c00216f5:	50                   	push   eax
c00216f6:	e8 7d 1b ff ff       	call   c0013278 <Filesystem::~Filesystem()>
c00216fb:	83 c4 10             	add    esp,0x10
c00216fe:	90                   	nop
c00216ff:	83 c4 0c             	add    esp,0xc
c0021702:	c3                   	ret    
c0021703:	90                   	nop

c0021704 <ISO9660::~ISO9660()>:
c0021704:	83 ec 0c             	sub    esp,0xc
c0021707:	83 ec 0c             	sub    esp,0xc
c002170a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002170e:	e8 cd ff ff ff       	call   c00216e0 <ISO9660::~ISO9660()>
c0021713:	83 c4 10             	add    esp,0x10
c0021716:	83 ec 08             	sub    esp,0x8
c0021719:	6a 08                	push   0x8
c002171b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002171f:	e8 4c 17 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0021724:	83 c4 10             	add    esp,0x10
c0021727:	83 c4 0c             	add    esp,0xc
c002172a:	c3                   	ret    

c002172b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002172b:	55                   	push   ebp
c002172c:	31 c9                	xor    ecx,ecx
c002172e:	57                   	push   edi
c002172f:	56                   	push   esi
c0021730:	53                   	push   ebx
c0021731:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021735:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021739:	89 eb                	mov    ebx,ebp
c002173b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002173f:	39 ce                	cmp    esi,ecx
c0021741:	7e 17                	jle    c002175a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021743:	31 d2                	xor    edx,edx
c0021745:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021749:	7d 13                	jge    c002175e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002174b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002174f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021752:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021755:	75 0d                	jne    c0021764 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021757:	42                   	inc    edx
c0021758:	eb eb                	jmp    c0021745 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002175a:	31 c0                	xor    eax,eax
c002175c:	eb 0a                	jmp    c0021768 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002175e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021762:	eb 04                	jmp    c0021768 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021764:	41                   	inc    ecx
c0021765:	43                   	inc    ebx
c0021766:	eb d7                	jmp    c002173f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021768:	5b                   	pop    ebx
c0021769:	5e                   	pop    esi
c002176a:	5f                   	pop    edi
c002176b:	5d                   	pop    ebp
c002176c:	c3                   	ret    

c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002176d:	56                   	push   esi
c002176e:	53                   	push   ebx
c002176f:	52                   	push   edx
c0021770:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021774:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021778:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002177c:	39 0d 00 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b00,ecx
c0021782:	75 08                	jne    c002178c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021784:	38 05 34 d9 02 c0    	cmp    BYTE PTR ds:0xc002d934,al
c002178a:	74 2b                	je     c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002178c:	83 ec 0c             	sub    esp,0xc
c002178f:	a2 34 d9 02 c0       	mov    ds:0xc002d934,al
c0021794:	68 20 1b 03 c0       	push   0xc0031b20
c0021799:	0f be c0             	movsx  eax,al
c002179c:	6a 01                	push   0x1
c002179e:	89 0d 00 1b 03 c0    	mov    DWORD PTR ds:0xc0031b00,ecx
c00217a4:	31 db                	xor    ebx,ebx
c00217a6:	53                   	push   ebx
c00217a7:	51                   	push   ecx
c00217a8:	ff 34 85 dc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1724]
c00217af:	e8 ac 4f ff ff       	call   c0016760 <LogicalDisk::read(unsigned long long, int, void*)>
c00217b4:	83 c4 20             	add    esp,0x20
c00217b7:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217bf:	c7 44 24 14 20 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031b20
c00217c7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217cb:	58                   	pop    eax
c00217cc:	5b                   	pop    ebx
c00217cd:	5e                   	pop    esi
c00217ce:	e9 71 ef fd ff       	jmp    c0000744 <memcpy>
c00217d3:	90                   	nop

c00217d4 <ISO9660::tryMount(LogicalDisk*, int)>:
c00217d4:	81 ec 10 08 00 00    	sub    esp,0x810
c00217da:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217e1:	83 c0 41             	add    eax,0x41
c00217e4:	0f be c0             	movsx  eax,al
c00217e7:	50                   	push   eax
c00217e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217ec:	50                   	push   eax
c00217ed:	6a 10                	push   0x10
c00217ef:	e8 79 ff ff ff       	call   c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217f4:	83 c4 10             	add    esp,0x10
c00217f7:	31 c0                	xor    eax,eax
c00217f9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217fe:	75 1d                	jne    c002181d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021800:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021805:	75 16                	jne    c002181d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021807:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002180c:	75 0f                	jne    c002181d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002180e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021813:	75 08                	jne    c002181d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021815:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002181a:	0f 94 c0             	sete   al
c002181d:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021823:	c3                   	ret    

c0021824 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021824:	55                   	push   ebp
c0021825:	57                   	push   edi
c0021826:	56                   	push   esi
c0021827:	53                   	push   ebx
c0021828:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002182e:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021835:	85 ed                	test   ebp,ebp
c0021837:	0f 84 d6 01 00 00    	je     c0021a13 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002183d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021845:	0f 84 c8 01 00 00    	je     c0021a13 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002184b:	b8 01 00 00 00       	mov    eax,0x1
c0021850:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021854:	0f 85 be 01 00 00    	jne    c0021a18 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002185a:	31 d2                	xor    edx,edx
c002185c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021863:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021866:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021869:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002186d:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021870:	89 04 24             	mov    DWORD PTR [esp],eax
c0021873:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021877:	01 f0                	add    eax,esi
c0021879:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002187c:	11 fa                	adc    edx,edi
c002187e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021882:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021886:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002188a:	19 d1                	sbb    ecx,edx
c002188c:	72 0a                	jb     c0021898 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002188e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021892:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021896:	eb 13                	jmp    c00218ab <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002189c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218a0:	29 f0                	sub    eax,esi
c00218a2:	19 fa                	sbb    edx,edi
c00218a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00218a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218ae:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218b1:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218b5:	51                   	push   ecx
c00218b6:	c1 e0 0b             	shl    eax,0xb
c00218b9:	01 c6                	add    esi,eax
c00218bb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218bf:	11 d7                	adc    edi,edx
c00218c1:	50                   	push   eax
c00218c2:	89 fa                	mov    edx,edi
c00218c4:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218c8:	89 f0                	mov    eax,esi
c00218ca:	53                   	push   ebx
c00218cb:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218cf:	50                   	push   eax
c00218d0:	e8 98 fe ff ff       	call   c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218d9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218dc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218e0:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218e6:	83 c4 10             	add    esp,0x10
c00218e9:	b8 00 08 00 00       	mov    eax,0x800
c00218ee:	29 d0                	sub    eax,edx
c00218f0:	39 c1                	cmp    ecx,eax
c00218f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00218f6:	83 d9 00             	sbb    ecx,0x0
c00218f9:	7d 1c                	jge    c0021917 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00218fb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021900:	75 12                	jne    c0021914 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021902:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021909:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002190f:	e9 fb 00 00 00       	jmp    c0021a0f <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021914:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021917:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002191a:	31 d2                	xor    edx,edx
c002191c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021920:	39 c2                	cmp    edx,eax
c0021922:	7d 14                	jge    c0021938 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021924:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002192b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002192f:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021932:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021935:	42                   	inc    edx
c0021936:	eb e8                	jmp    c0021920 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021938:	89 c3                	mov    ebx,eax
c002193a:	85 c0                	test   eax,eax
c002193c:	79 02                	jns    c0021940 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002193e:	31 db                	xor    ebx,ebx
c0021940:	99                   	cdq    
c0021941:	01 c3                	add    ebx,eax
c0021943:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002194a:	01 c6                	add    esi,eax
c002194c:	11 d7                	adc    edi,edx
c002194e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021952:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021956:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021959:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002195d:	29 c6                	sub    esi,eax
c002195f:	19 d7                	sbb    edi,edx
c0021961:	89 34 24             	mov    DWORD PTR [esp],esi
c0021964:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021968:	b8 ff 07 00 00       	mov    eax,0x7ff
c002196d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021970:	b8 00 00 00 00       	mov    eax,0x0
c0021975:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021979:	7d 3e                	jge    c00219b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c002197b:	52                   	push   edx
c002197c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021980:	50                   	push   eax
c0021981:	53                   	push   ebx
c0021982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021986:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002198a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002198e:	50                   	push   eax
c002198f:	e8 d9 fd ff ff       	call   c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021994:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002199c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219a1:	81 c3 00 08 00 00    	add    ebx,0x800
c00219a7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219af:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219b4:	83 c4 10             	add    esp,0x10
c00219b7:	eb af                	jmp    c0021968 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219bd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219c0:	74 32                	je     c00219f4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219c2:	50                   	push   eax
c00219c3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219c7:	50                   	push   eax
c00219c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219cc:	50                   	push   eax
c00219cd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219d1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219d5:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219d9:	56                   	push   esi
c00219da:	e8 8e fd ff ff       	call   c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219df:	83 c4 0c             	add    esp,0xc
c00219e2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219ea:	50                   	push   eax
c00219eb:	53                   	push   ebx
c00219ec:	e8 53 ed fd ff       	call   c0000744 <memcpy>
c00219f1:	83 c4 10             	add    esp,0x10
c00219f4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a03:	89 38                	mov    DWORD PTR [eax],edi
c0021a05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a09:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a0c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a0f:	31 c0                	xor    eax,eax
c0021a11:	eb 05                	jmp    c0021a18 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a13:	b8 04 00 00 00       	mov    eax,0x4
c0021a18:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a1e:	5b                   	pop    ebx
c0021a1f:	5e                   	pop    esi
c0021a20:	5f                   	pop    edi
c0021a21:	5d                   	pop    ebp
c0021a22:	c3                   	ret    
c0021a23:	90                   	nop

c0021a24 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a24:	55                   	push   ebp
c0021a25:	57                   	push   edi
c0021a26:	56                   	push   esi
c0021a27:	53                   	push   ebx
c0021a28:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a2e:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a35:	85 f6                	test   esi,esi
c0021a37:	0f 84 64 02 00 00    	je     c0021ca1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a3d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a45:	0f 84 56 02 00 00    	je     c0021ca1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a4b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a4e:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a51:	75 0a                	jne    c0021a5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a53:	b8 07 00 00 00       	mov    eax,0x7
c0021a58:	e9 49 02 00 00       	jmp    c0021ca6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a5d:	50                   	push   eax
c0021a5e:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a62:	50                   	push   eax
c0021a63:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a6a:	53                   	push   ebx
c0021a6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a6d:	c1 e0 0b             	shl    eax,0xb
c0021a70:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a73:	c1 e8 0b             	shr    eax,0xb
c0021a76:	50                   	push   eax
c0021a77:	e8 f1 fc ff ff       	call   c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a7c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a7f:	83 c4 10             	add    esp,0x10
c0021a82:	89 c1                	mov    ecx,eax
c0021a84:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a87:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a8d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a90:	84 db                	test   bl,bl
c0021a92:	0f 85 90 00 00 00    	jne    c0021b28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a98:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a9e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021aa4:	29 c7                	sub    edi,eax
c0021aa6:	89 fb                	mov    ebx,edi
c0021aa8:	c1 fb 1f             	sar    ebx,0x1f
c0021aab:	01 f8                	add    eax,edi
c0021aad:	11 da                	adc    edx,ebx
c0021aaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ab3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ab7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021aba:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021abd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021ac0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ac3:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ac6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021aca:	89 d8                	mov    eax,ebx
c0021acc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021acf:	ba 00 00 00 00       	mov    edx,0x0
c0021ad4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ad8:	b8 00 00 00 00       	mov    eax,0x0
c0021add:	73 0b                	jae    c0021aea <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021adf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ae2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ae6:	29 f8                	sub    eax,edi
c0021ae8:	19 da                	sbb    edx,ebx
c0021aea:	89 d3                	mov    ebx,edx
c0021aec:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021aef:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021af2:	09 c3                	or     ebx,eax
c0021af4:	0f 84 59 ff ff ff    	je     c0021a53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021afa:	55                   	push   ebp
c0021afb:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021aff:	50                   	push   eax
c0021b00:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b07:	53                   	push   ebx
c0021b08:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b0a:	c1 e0 0b             	shl    eax,0xb
c0021b0d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b11:	c1 e8 0b             	shr    eax,0xb
c0021b14:	50                   	push   eax
c0021b15:	e8 53 fc ff ff       	call   c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b1a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b1d:	83 c4 10             	add    esp,0x10
c0021b20:	25 ff 07 00 00       	and    eax,0x7ff
c0021b25:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b28:	57                   	push   edi
c0021b29:	6a 28                	push   0x28
c0021b2b:	6a 00                	push   0x0
c0021b2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b31:	50                   	push   eax
c0021b32:	e8 41 ec fd ff       	call   c0000778 <memset>
c0021b37:	31 d2                	xor    edx,edx
c0021b39:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b3c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b42:	89 f8                	mov    eax,edi
c0021b44:	83 c0 21             	add    eax,0x21
c0021b47:	83 d2 00             	adc    edx,0x0
c0021b4a:	89 c7                	mov    edi,eax
c0021b4c:	89 d5                	mov    ebp,edx
c0021b4e:	83 c4 10             	add    esp,0x10
c0021b51:	31 c9                	xor    ecx,ecx
c0021b53:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b5a:	83 f9 28             	cmp    ecx,0x28
c0021b5d:	88 04 24             	mov    BYTE PTR [esp],al
c0021b60:	0f 94 c2             	sete   dl
c0021b63:	88 d0                	mov    al,dl
c0021b65:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b6a:	39 fa                	cmp    edx,edi
c0021b6c:	ba 00 00 00 00       	mov    edx,0x0
c0021b71:	19 ea                	sbb    edx,ebp
c0021b73:	0f 92 c2             	setb   dl
c0021b76:	09 c2                	or     edx,eax
c0021b78:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b7c:	0f 94 c0             	sete   al
c0021b7f:	08 d0                	or     al,dl
c0021b81:	75 16                	jne    c0021b99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b83:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b87:	74 10                	je     c0021b99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b89:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b8c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b90:	41                   	inc    ecx
c0021b91:	83 c7 01             	add    edi,0x1
c0021b94:	83 d5 00             	adc    ebp,0x0
c0021b97:	eb ba                	jmp    c0021b53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b99:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021ba0:	83 ec 0c             	sub    esp,0xc
c0021ba3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021ba7:	57                   	push   edi
c0021ba8:	e8 e7 eb fd ff       	call   c0000794 <strlen>
c0021bad:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bb9:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bc0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bc3:	5a                   	pop    edx
c0021bc4:	25 ff 07 00 00       	and    eax,0x7ff
c0021bc9:	01 c8                	add    eax,ecx
c0021bcb:	59                   	pop    ecx
c0021bcc:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bd2:	83 e0 02             	and    eax,0x2
c0021bd5:	3c 01                	cmp    al,0x1
c0021bd7:	19 c0                	sbb    eax,eax
c0021bd9:	83 c0 02             	add    eax,0x2
c0021bdc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021be0:	57                   	push   edi
c0021be1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021be5:	50                   	push   eax
c0021be6:	e8 49 ec fd ff       	call   c0000834 <strcpy>
c0021beb:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bef:	83 c4 10             	add    esp,0x10
c0021bf2:	84 c0                	test   al,al
c0021bf4:	75 21                	jne    c0021c17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021bf6:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bfe:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c06:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c0e:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c15:	eb 28                	jmp    c0021c3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c17:	fe c8                	dec    al
c0021c19:	75 24                	jne    c0021c3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c1b:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c23:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c2b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c33:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c3a:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c3f:	0f b6 fb             	movzx  edi,bl
c0021c42:	31 db                	xor    ebx,ebx
c0021c44:	50                   	push   eax
c0021c45:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c4c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c50:	50                   	push   eax
c0021c51:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c58:	e8 e7 ea fd ff       	call   c0000744 <memcpy>
c0021c5d:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c64:	89 f9                	mov    ecx,edi
c0021c66:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c6c:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c6f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c72:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c75:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c78:	83 c4 10             	add    esp,0x10
c0021c7b:	39 c7                	cmp    edi,eax
c0021c7d:	89 df                	mov    edi,ebx
c0021c7f:	19 d7                	sbb    edi,edx
c0021c81:	72 10                	jb     c0021c93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c83:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c8a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c91:	eb 0a                	jmp    c0021c9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c93:	29 c8                	sub    eax,ecx
c0021c95:	19 da                	sbb    edx,ebx
c0021c97:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c9a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c9d:	31 c0                	xor    eax,eax
c0021c9f:	eb 05                	jmp    c0021ca6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ca1:	b8 04 00 00 00       	mov    eax,0x4
c0021ca6:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cac:	5b                   	pop    ebx
c0021cad:	5e                   	pop    esi
c0021cae:	5f                   	pop    edi
c0021caf:	5d                   	pop    ebp
c0021cb0:	c3                   	ret    

c0021cb1 <readRoot(unsigned int*, unsigned int*, char)>:
c0021cb1:	81 ec 40 08 00 00    	sub    esp,0x840
c0021cb7:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cbf:	50                   	push   eax
c0021cc0:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cc4:	50                   	push   eax
c0021cc5:	6a 10                	push   0x10
c0021cc7:	e8 a1 fa ff ff       	call   c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ccc:	83 c4 0c             	add    esp,0xc
c0021ccf:	6a 22                	push   0x22
c0021cd1:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021cd8:	50                   	push   eax
c0021cd9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021cdd:	50                   	push   eax
c0021cde:	e8 61 ea fd ff       	call   c0000744 <memcpy>
c0021ce3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cee:	89 10                	mov    DWORD PTR [eax],edx
c0021cf0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021cf7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cfb:	89 10                	mov    DWORD PTR [eax],edx
c0021cfd:	b0 01                	mov    al,0x1
c0021cff:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d05:	c3                   	ret    

c0021d06 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d06:	55                   	push   ebp
c0021d07:	57                   	push   edi
c0021d08:	56                   	push   esi
c0021d09:	53                   	push   ebx
c0021d0a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d10:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d17:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d22:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d26:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d2a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d2e:	75 03                	jne    c0021d33 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d30:	83 c3 02             	add    ebx,0x2
c0021d33:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d36:	75 03                	jne    c0021d3b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d38:	43                   	inc    ebx
c0021d39:	eb f8                	jmp    c0021d33 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d3b:	51                   	push   ecx
c0021d3c:	68 00 01 00 00       	push   0x100
c0021d41:	6a 00                	push   0x0
c0021d43:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d47:	50                   	push   eax
c0021d48:	e8 2b ea fd ff       	call   c0000778 <memset>
c0021d4d:	83 c4 10             	add    esp,0x10
c0021d50:	31 d2                	xor    edx,edx
c0021d52:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d55:	84 c0                	test   al,al
c0021d57:	74 21                	je     c0021d7a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d59:	3c 2f                	cmp    al,0x2f
c0021d5b:	75 0b                	jne    c0021d68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d5d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d61:	bd 01 00 00 00       	mov    ebp,0x1
c0021d66:	eb 14                	jmp    c0021d7c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d68:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d6b:	80 f9 19             	cmp    cl,0x19
c0021d6e:	77 03                	ja     c0021d73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d70:	83 e8 20             	sub    eax,0x20
c0021d73:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d77:	42                   	inc    edx
c0021d78:	eb d8                	jmp    c0021d52 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d7a:	31 ed                	xor    ebp,ebp
c0021d7c:	83 ec 0c             	sub    esp,0xc
c0021d7f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d86:	e8 b5 da fe ff       	call   c000f840 <malloc>
c0021d8b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d92:	89 c6                	mov    esi,eax
c0021d94:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d9a:	c1 ef 0b             	shr    edi,0xb
c0021d9d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021da4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021da8:	83 c4 10             	add    esp,0x10
c0021dab:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021db0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021db4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021dbb:	74 28                	je     c0021de5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021dbd:	52                   	push   edx
c0021dbe:	57                   	push   edi
c0021dbf:	50                   	push   eax
c0021dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dc4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021dcb:	e8 9d f9 ff ff       	call   c002176d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dd4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ddb:	05 00 08 00 00       	add    eax,0x800
c0021de0:	83 c4 10             	add    esp,0x10
c0021de3:	eb cb                	jmp    c0021db0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021de5:	83 ec 0c             	sub    esp,0xc
c0021de8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021dec:	57                   	push   edi
c0021ded:	e8 a2 e9 fd ff       	call   c0000794 <strlen>
c0021df2:	50                   	push   eax
c0021df3:	57                   	push   edi
c0021df4:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021dfb:	56                   	push   esi
c0021dfc:	e8 2a f9 ff ff       	call   c002172b <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e01:	83 c4 20             	add    esp,0x20
c0021e04:	85 c0                	test   eax,eax
c0021e06:	75 13                	jne    c0021e1b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e08:	83 ec 0c             	sub    esp,0xc
c0021e0b:	56                   	push   esi
c0021e0c:	e8 3f da fe ff       	call   c000f850 <free>
c0021e11:	83 c4 10             	add    esp,0x10
c0021e14:	31 c0                	xor    eax,eax
c0021e16:	e9 b3 00 00 00       	jmp    c0021ece <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e1b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e1f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e23:	c1 e7 08             	shl    edi,0x8
c0021e26:	c1 e2 10             	shl    edx,0x10
c0021e29:	09 d7                	or     edi,edx
c0021e2b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e2f:	09 d7                	or     edi,edx
c0021e31:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e35:	c1 e2 18             	shl    edx,0x18
c0021e38:	09 d7                	or     edi,edx
c0021e3a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e3e:	89 d1                	mov    ecx,edx
c0021e40:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e44:	c1 e1 08             	shl    ecx,0x8
c0021e47:	c1 e2 10             	shl    edx,0x10
c0021e4a:	09 ca                	or     edx,ecx
c0021e4c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e50:	09 ca                	or     edx,ecx
c0021e52:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e56:	c1 e1 18             	shl    ecx,0x18
c0021e59:	09 ca                	or     edx,ecx
c0021e5b:	89 e9                	mov    ecx,ebp
c0021e5d:	84 c9                	test   cl,cl
c0021e5f:	74 3c                	je     c0021e9d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e61:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e65:	83 ec 0c             	sub    esp,0xc
c0021e68:	56                   	push   esi
c0021e69:	e8 e2 d9 fe ff       	call   c000f850 <free>
c0021e6e:	83 c4 0c             	add    esp,0xc
c0021e71:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e78:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e7d:	50                   	push   eax
c0021e7e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e85:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e90:	52                   	push   edx
c0021e91:	57                   	push   edi
c0021e92:	53                   	push   ebx
c0021e93:	e8 6e fe ff ff       	call   c0021d06 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e98:	83 c4 20             	add    esp,0x20
c0021e9b:	eb 31                	jmp    c0021ece <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e9d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ea0:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ea7:	d0 e8                	shr    al,1
c0021ea9:	89 3b                	mov    DWORD PTR [ebx],edi
c0021eab:	83 e0 01             	and    eax,0x1
c0021eae:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021eb5:	83 ec 0c             	sub    esp,0xc
c0021eb8:	89 13                	mov    DWORD PTR [ebx],edx
c0021eba:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ec1:	89 03                	mov    DWORD PTR [ebx],eax
c0021ec3:	56                   	push   esi
c0021ec4:	e8 87 d9 fe ff       	call   c000f850 <free>
c0021ec9:	83 c4 10             	add    esp,0x10
c0021ecc:	b0 01                	mov    al,0x1
c0021ece:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ed4:	5b                   	pop    ebx
c0021ed5:	5e                   	pop    esi
c0021ed6:	5f                   	pop    edi
c0021ed7:	5d                   	pop    ebp
c0021ed8:	c3                   	ret    

c0021ed9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ed9:	55                   	push   ebp
c0021eda:	57                   	push   edi
c0021edb:	56                   	push   esi
c0021edc:	53                   	push   ebx
c0021edd:	83 ec 20             	sub    esp,0x20
c0021ee0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ee4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ee8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021eec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ef4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021efc:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f01:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f07:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f0d:	57                   	push   edi
c0021f0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f12:	50                   	push   eax
c0021f13:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f17:	50                   	push   eax
c0021f18:	e8 94 fd ff ff       	call   c0021cb1 <readRoot(unsigned int*, unsigned int*, char)>
c0021f1d:	5a                   	pop    edx
c0021f1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f22:	e8 6d e8 fd ff       	call   c0000794 <strlen>
c0021f27:	83 c4 10             	add    esp,0x10
c0021f2a:	83 f8 03             	cmp    eax,0x3
c0021f2d:	77 17                	ja     c0021f46 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f33:	89 03                	mov    DWORD PTR [ebx],eax
c0021f35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f39:	89 06                	mov    DWORD PTR [esi],eax
c0021f3b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f42:	b0 01                	mov    al,0x1
c0021f44:	eb 19                	jmp    c0021f5f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f46:	50                   	push   eax
c0021f47:	55                   	push   ebp
c0021f48:	57                   	push   edi
c0021f49:	56                   	push   esi
c0021f4a:	53                   	push   ebx
c0021f4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f57:	e8 aa fd ff ff       	call   c0021d06 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f5c:	83 c4 20             	add    esp,0x20
c0021f5f:	83 c4 1c             	add    esp,0x1c
c0021f62:	5b                   	pop    ebx
c0021f63:	5e                   	pop    esi
c0021f64:	5f                   	pop    edi
c0021f65:	5d                   	pop    ebp
c0021f66:	c3                   	ret    
c0021f67:	90                   	nop

c0021f68 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f68:	57                   	push   edi
c0021f69:	56                   	push   esi
c0021f6a:	53                   	push   ebx
c0021f6b:	83 ec 10             	sub    esp,0x10
c0021f6e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f72:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f76:	85 ff                	test   edi,edi
c0021f78:	0f 84 9d 00 00 00    	je     c002201b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f7e:	85 f6                	test   esi,esi
c0021f80:	0f 84 95 00 00 00    	je     c002201b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f86:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f8b:	74 17                	je     c0021fa4 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f8d:	83 ec 0c             	sub    esp,0xc
c0021f90:	68 83 c8 02 c0       	push   0xc002c883
c0021f95:	e8 b6 0f ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0021f9a:	83 c4 10             	add    esp,0x10
c0021f9d:	b8 03 00 00 00       	mov    eax,0x3
c0021fa2:	eb 7c                	jmp    c0022020 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fa4:	83 ec 0c             	sub    esp,0xc
c0021fa7:	6a 1c                	push   0x1c
c0021fa9:	e8 92 d8 fe ff       	call   c000f840 <malloc>
c0021fae:	89 07                	mov    DWORD PTR [edi],eax
c0021fb0:	89 c3                	mov    ebx,eax
c0021fb2:	58                   	pop    eax
c0021fb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fb7:	50                   	push   eax
c0021fb8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fbb:	50                   	push   eax
c0021fbc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fc0:	50                   	push   eax
c0021fc1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fc5:	50                   	push   eax
c0021fc6:	56                   	push   esi
c0021fc7:	e8 0d ff ff ff       	call   c0021ed9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fcc:	83 c4 20             	add    esp,0x20
c0021fcf:	84 c0                	test   al,al
c0021fd1:	74 07                	je     c0021fda <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fd3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fd8:	74 0b                	je     c0021fe5 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fda:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fde:	b8 01 00 00 00       	mov    eax,0x1
c0021fe3:	eb 3b                	jmp    c0022020 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fe9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fed:	89 03                	mov    DWORD PTR [ebx],eax
c0021fef:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ffa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022001:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002200b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022012:	8a 06                	mov    al,BYTE PTR [esi]
c0022014:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022017:	31 c0                	xor    eax,eax
c0022019:	eb 05                	jmp    c0022020 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002201b:	b8 04 00 00 00       	mov    eax,0x4
c0022020:	83 c4 10             	add    esp,0x10
c0022023:	5b                   	pop    ebx
c0022024:	5e                   	pop    esi
c0022025:	5f                   	pop    edi
c0022026:	c3                   	ret    
c0022027:	90                   	nop

c0022028 <ISO9660::exists(char const*)>:
c0022028:	83 ec 28             	sub    esp,0x28
c002202b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002202f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022033:	52                   	push   edx
c0022034:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022037:	52                   	push   edx
c0022038:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002203c:	52                   	push   edx
c002203d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022041:	52                   	push   edx
c0022042:	50                   	push   eax
c0022043:	e8 91 fe ff ff       	call   c0021ed9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022048:	83 c4 3c             	add    esp,0x3c
c002204b:	c3                   	ret    

c002204c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002204c:	56                   	push   esi
c002204d:	53                   	push   ebx
c002204e:	83 ec 14             	sub    esp,0x14
c0022051:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022055:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022059:	85 db                	test   ebx,ebx
c002205b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002205f:	0f 94 c2             	sete   dl
c0022062:	85 f6                	test   esi,esi
c0022064:	0f 94 c0             	sete   al
c0022067:	08 c2                	or     dl,al
c0022069:	75 68                	jne    c00220d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002206b:	85 c9                	test   ecx,ecx
c002206d:	74 64                	je     c00220d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002206f:	83 ec 0c             	sub    esp,0xc
c0022072:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022075:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022079:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002207f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022086:	50                   	push   eax
c0022087:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002208a:	50                   	push   eax
c002208b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002208f:	50                   	push   eax
c0022090:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022094:	50                   	push   eax
c0022095:	51                   	push   ecx
c0022096:	e8 3e fe ff ff       	call   c0021ed9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002209b:	83 c4 20             	add    esp,0x20
c002209e:	ba 01 00 00 00       	mov    edx,0x1
c00220a3:	84 c0                	test   al,al
c00220a5:	74 31                	je     c00220d8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220b2:	89 03                	mov    DWORD PTR [ebx],eax
c00220b4:	ba 00 00 00 00       	mov    edx,0x0
c00220b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220bd:	85 c0                	test   eax,eax
c00220bf:	0f 95 06             	setne  BYTE PTR [esi]
c00220c2:	74 14                	je     c00220d8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220c4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220ca:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220d1:	eb 05                	jmp    c00220d8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220d3:	ba 04 00 00 00       	mov    edx,0x4
c00220d8:	83 c4 14             	add    esp,0x14
c00220db:	89 d0                	mov    eax,edx
c00220dd:	5b                   	pop    ebx
c00220de:	5e                   	pop    esi
c00220df:	c3                   	ret    

c00220e0 <ISO9660::openDir(char const*, void**)>:
c00220e0:	57                   	push   edi
c00220e1:	56                   	push   esi
c00220e2:	53                   	push   ebx
c00220e3:	83 ec 10             	sub    esp,0x10
c00220e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220ea:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220ee:	85 ff                	test   edi,edi
c00220f0:	0f 84 95 00 00 00    	je     c002218b <ISO9660::openDir(char const*, void**)+0xab>
c00220f6:	85 f6                	test   esi,esi
c00220f8:	0f 84 8d 00 00 00    	je     c002218b <ISO9660::openDir(char const*, void**)+0xab>
c00220fe:	83 ec 0c             	sub    esp,0xc
c0022101:	6a 1c                	push   0x1c
c0022103:	e8 38 d7 fe ff       	call   c000f840 <malloc>
c0022108:	89 07                	mov    DWORD PTR [edi],eax
c002210a:	89 c3                	mov    ebx,eax
c002210c:	59                   	pop    ecx
c002210d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022111:	50                   	push   eax
c0022112:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022115:	50                   	push   eax
c0022116:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002211a:	50                   	push   eax
c002211b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002211f:	50                   	push   eax
c0022120:	56                   	push   esi
c0022121:	e8 b3 fd ff ff       	call   c0021ed9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022126:	83 c4 20             	add    esp,0x20
c0022129:	84 c0                	test   al,al
c002212b:	74 07                	je     c0022134 <ISO9660::openDir(char const*, void**)+0x54>
c002212d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022132:	75 21                	jne    c0022155 <ISO9660::openDir(char const*, void**)+0x75>
c0022134:	0f b6 c0             	movzx  eax,al
c0022137:	52                   	push   edx
c0022138:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002213c:	50                   	push   eax
c002213d:	68 a9 c8 02 c0       	push   0xc002c8a9
c0022142:	e8 09 0e ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0022147:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002214b:	83 c4 10             	add    esp,0x10
c002214e:	b8 01 00 00 00       	mov    eax,0x1
c0022153:	eb 3b                	jmp    c0022190 <ISO9660::openDir(char const*, void**)+0xb0>
c0022155:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022159:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002215d:	89 03                	mov    DWORD PTR [ebx],eax
c002215f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022166:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002216a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022171:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022178:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002217b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022182:	8a 06                	mov    al,BYTE PTR [esi]
c0022184:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022187:	31 c0                	xor    eax,eax
c0022189:	eb 05                	jmp    c0022190 <ISO9660::openDir(char const*, void**)+0xb0>
c002218b:	b8 04 00 00 00       	mov    eax,0x4
c0022190:	83 c4 10             	add    esp,0x10
c0022193:	5b                   	pop    ebx
c0022194:	5e                   	pop    esi
c0022195:	5f                   	pop    edi
c0022196:	c3                   	ret    
c0022197:	90                   	nop

c0022198 <ISO9660::ISO9660()>:
c0022198:	83 ec 0c             	sub    esp,0xc
c002219b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219f:	83 ec 0c             	sub    esp,0xc
c00221a2:	50                   	push   eax
c00221a3:	e8 ac 10 ff ff       	call   c0013254 <Filesystem::Filesystem()>
c00221a8:	83 c4 10             	add    esp,0x10
c00221ab:	ba cc c8 02 c0       	mov    edx,0xc002c8cc
c00221b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b4:	89 10                	mov    DWORD PTR [eax],edx
c00221b6:	90                   	nop
c00221b7:	83 c4 0c             	add    esp,0xc
c00221ba:	c3                   	ret    
c00221bb:	90                   	nop

c00221bc <SoundChannel::~SoundChannel()>:
c00221bc:	83 ec 0c             	sub    esp,0xc
c00221bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	50                   	push   eax
c00221ca:	e8 81 d6 fe ff       	call   c000f850 <free>
c00221cf:	83 c4 10             	add    esp,0x10
c00221d2:	90                   	nop
c00221d3:	83 c4 0c             	add    esp,0xc
c00221d6:	c3                   	ret    
c00221d7:	90                   	nop

c00221d8 <SoundChannel::setSpeed(float)>:
c00221d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221e0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221e3:	c3                   	ret    

c00221e4 <SoundChannel::getSpeed()>:
c00221e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221eb:	c3                   	ret    

c00221ec <SoundChannel::setVolume(int)>:
c00221ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221f0:	83 f8 64             	cmp    eax,0x64
c00221f3:	7e 05                	jle    c00221fa <SoundChannel::setVolume(int)+0xe>
c00221f5:	b8 64 00 00 00       	mov    eax,0x64
c00221fa:	85 c0                	test   eax,eax
c00221fc:	79 02                	jns    c0022200 <SoundChannel::setVolume(int)+0x14>
c00221fe:	31 c0                	xor    eax,eax
c0022200:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022204:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022207:	c3                   	ret    

c0022208 <SoundChannel::getVolume()>:
c0022208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002220f:	c3                   	ret    

c0022210 <SoundChannel::pause()>:
c0022210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022214:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022218:	c3                   	ret    
c0022219:	90                   	nop

c002221a <SoundChannel::SoundChannel(int, int, int, int)>:
c002221a:	83 ec 1c             	sub    esp,0x1c
c002221d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022221:	e8 ea ff ff ff       	call   c0022210 <SoundChannel::pause()>
c0022226:	83 c4 04             	add    esp,0x4
c0022229:	6a 50                	push   0x50
c002222b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002222f:	e8 b8 ff ff ff       	call   c00221ec <SoundChannel::setVolume(int)>
c0022234:	83 c4 08             	add    esp,0x8
c0022237:	a1 44 c9 02 c0       	mov    eax,ds:0xc002c944
c002223c:	50                   	push   eax
c002223d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022241:	e8 92 ff ff ff       	call   c00221d8 <SoundChannel::setSpeed(float)>
c0022246:	83 c4 08             	add    esp,0x8
c0022249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002224d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022251:	89 10                	mov    DWORD PTR [eax],edx
c0022253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022257:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002225b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002225e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022262:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022266:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022269:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002226e:	75 23                	jne    c0022293 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022274:	8b 10                	mov    edx,DWORD PTR [eax]
c0022276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002227d:	0f af c2             	imul   eax,edx
c0022280:	85 c0                	test   eax,eax
c0022282:	79 03                	jns    c0022287 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022284:	83 c0 03             	add    eax,0x3
c0022287:	c1 f8 02             	sar    eax,0x2
c002228a:	05 a0 0f 00 00       	add    eax,0xfa0
c002228f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022297:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002229b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002229e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ad:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222bb:	c1 e0 02             	shl    eax,0x2
c00222be:	83 ec 0c             	sub    esp,0xc
c00222c1:	50                   	push   eax
c00222c2:	e8 79 d5 fe ff       	call   c000f840 <malloc>
c00222c7:	83 c4 10             	add    esp,0x10
c00222ca:	89 c2                	mov    edx,eax
c00222cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222d3:	83 ec 04             	sub    esp,0x4
c00222d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222da:	50                   	push   eax
c00222db:	6a 01                	push   0x1
c00222dd:	6a 04                	push   0x4
c00222df:	e8 bb 68 fe ff       	call   c0008b9f <src_new>
c00222e4:	83 c4 10             	add    esp,0x10
c00222e7:	89 c2                	mov    edx,eax
c00222e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ed:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222f4:	85 c0                	test   eax,eax
c00222f6:	74 10                	je     c0022308 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00222f8:	83 ec 0c             	sub    esp,0xc
c00222fb:	68 28 c9 02 c0       	push   0xc002c928
c0022300:	e8 ec 82 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0022305:	83 c4 10             	add    esp,0x10
c0022308:	a0 20 27 03 c0       	mov    al,ds:0xc0032720
c002230d:	83 f0 01             	xor    eax,0x1
c0022310:	84 c0                	test   al,al
c0022312:	74 57                	je     c002236b <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022314:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0022319:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002231d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022325:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002232d:	7f 35                	jg     c0022364 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002232f:	83 ec 0c             	sub    esp,0xc
c0022332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022336:	e8 9c 4f 00 00       	call   c00272d7 <__floatsisf>
c002233b:	83 c4 10             	add    esp,0x10
c002233e:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c0022344:	83 ec 08             	sub    esp,0x8
c0022347:	52                   	push   edx
c0022348:	50                   	push   eax
c0022349:	e8 9b 4b 00 00       	call   c0026ee9 <__mulsf3>
c002234e:	83 c4 10             	add    esp,0x10
c0022351:	89 c2                	mov    edx,eax
c0022353:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022357:	89 14 85 20 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdce0],edx
c002235e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022362:	eb c1                	jmp    c0022325 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022364:	c6 05 20 27 03 c0 01 	mov    BYTE PTR ds:0xc0032720,0x1
c002236b:	90                   	nop
c002236c:	83 c4 1c             	add    esp,0x1c
c002236f:	c3                   	ret    

c0022370 <SoundChannel::play()>:
c0022370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022374:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022378:	c3                   	ret    
c0022379:	90                   	nop

c002237a <SoundChannel::paused()>:
c002237a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002237e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022381:	c3                   	ret    

c0022382 <SoundChannel::getSampleRate()>:
c0022382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022386:	8b 00                	mov    eax,DWORD PTR [eax]
c0022388:	c3                   	ret    
c0022389:	90                   	nop

c002238a <SoundChannel::getBits()>:
c002238a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022391:	c3                   	ret    

c0022392 <SoundChannel::getBufferUsed()>:
c0022392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022396:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022399:	c3                   	ret    

c002239a <SoundChannel::getBufferSize()>:
c002239a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223a1:	c3                   	ret    

c00223a2 <SoundChannel::unbuffer(float*, int, int)>:
c00223a2:	56                   	push   esi
c00223a3:	53                   	push   ebx
c00223a4:	83 ec 40             	sub    esp,0x40
c00223a7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223b2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223b9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223cd:	e8 05 4f 00 00       	call   c00272d7 <__floatsisf>
c00223d2:	5a                   	pop    edx
c00223d3:	89 c6                	mov    esi,eax
c00223d5:	ff 33                	push   DWORD PTR [ebx]
c00223d7:	e8 fb 4e 00 00       	call   c00272d7 <__floatsisf>
c00223dc:	59                   	pop    ecx
c00223dd:	5a                   	pop    edx
c00223de:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223e1:	50                   	push   eax
c00223e2:	e8 02 4b 00 00       	call   c0026ee9 <__mulsf3>
c00223e7:	59                   	pop    ecx
c00223e8:	5a                   	pop    edx
c00223e9:	50                   	push   eax
c00223ea:	56                   	push   esi
c00223eb:	e8 bc 4c 00 00       	call   c00270ac <__divsf3>
c00223f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00223f3:	e8 af 61 00 00       	call   c00285a7 <__extendsfdf2>
c00223f8:	59                   	pop    ecx
c00223f9:	5e                   	pop    esi
c00223fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223fe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022402:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002240a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002240e:	50                   	push   eax
c002240f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022412:	e8 7d 63 fe ff       	call   c0008794 <src_process>
c0022417:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002241b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002241e:	83 c4 0c             	add    esp,0xc
c0022421:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022424:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022427:	29 d0                	sub    eax,edx
c0022429:	c1 e0 02             	shl    eax,0x2
c002242c:	50                   	push   eax
c002242d:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022430:	50                   	push   eax
c0022431:	51                   	push   ecx
c0022432:	e8 45 e2 fd ff       	call   c000067c <memmove>
c0022437:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002243b:	83 c4 44             	add    esp,0x44
c002243e:	5b                   	pop    ebx
c002243f:	5e                   	pop    esi
c0022440:	c3                   	ret    
c0022441:	90                   	nop

c0022442 <SoundChannel::buffer8(unsigned char*, int)>:
c0022442:	55                   	push   ebp
c0022443:	57                   	push   edi
c0022444:	56                   	push   esi
c0022445:	53                   	push   ebx
c0022446:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002244a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002244e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022451:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022455:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022458:	74 7a                	je     c00224d4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002245a:	85 ff                	test   edi,edi
c002245c:	7e 76                	jle    c00224d4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002245e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022462:	8d 70 01             	lea    esi,[eax+0x1]
c0022465:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022468:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002246b:	8b 1c 9d 20 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdce0]
c0022472:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022475:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022478:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002247b:	74 5e                	je     c00224db <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002247d:	83 ff 01             	cmp    edi,0x1
c0022480:	74 4b                	je     c00224cd <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022482:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022486:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022489:	8d 70 01             	lea    esi,[eax+0x1]
c002248c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002248f:	8b 1c 9d 20 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdce0]
c0022496:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022499:	b8 02 00 00 00       	mov    eax,0x2
c002249e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224a1:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224a4:	75 23                	jne    c00224c9 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224a6:	eb 27                	jmp    c00224cf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224a8:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224ad:	8d 71 01             	lea    esi,[ecx+0x1]
c00224b0:	40                   	inc    eax
c00224b1:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224b4:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224b7:	8b 1c 9d 20 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdce0]
c00224be:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224c1:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224c4:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224c7:	74 06                	je     c00224cf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224c9:	39 c7                	cmp    edi,eax
c00224cb:	75 db                	jne    c00224a8 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224cd:	89 f8                	mov    eax,edi
c00224cf:	5b                   	pop    ebx
c00224d0:	5e                   	pop    esi
c00224d1:	5f                   	pop    edi
c00224d2:	5d                   	pop    ebp
c00224d3:	c3                   	ret    
c00224d4:	5b                   	pop    ebx
c00224d5:	31 c0                	xor    eax,eax
c00224d7:	5e                   	pop    esi
c00224d8:	5f                   	pop    edi
c00224d9:	5d                   	pop    ebp
c00224da:	c3                   	ret    
c00224db:	b8 01 00 00 00       	mov    eax,0x1
c00224e0:	eb ed                	jmp    c00224cf <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224e2 <SoundDevice::SoundDevice(char const*)>:
c00224e2:	83 ec 1c             	sub    esp,0x1c
c00224e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224e9:	83 ec 08             	sub    esp,0x8
c00224ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224f0:	50                   	push   eax
c00224f1:	e8 70 20 ff ff       	call   c0014566 <Device::Device(char const*)>
c00224f6:	83 c4 10             	add    esp,0x10
c00224f9:	ba 54 c9 02 c0       	mov    edx,0xc002c954
c00224fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022502:	89 10                	mov    DWORD PTR [eax],edx
c0022504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022508:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022516:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022520:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022528:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002252d:	7f 19                	jg     c0022548 <SoundDevice::SoundDevice(char const*)+0x66>
c002252f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022533:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022537:	83 c2 54             	add    edx,0x54
c002253a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022542:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022546:	eb e0                	jmp    c0022528 <SoundDevice::SoundDevice(char const*)+0x46>
c0022548:	90                   	nop
c0022549:	83 c4 1c             	add    esp,0x1c
c002254c:	c3                   	ret    
c002254d:	90                   	nop

c002254e <SoundDevice::~SoundDevice()>:
c002254e:	53                   	push   ebx
c002254f:	83 ec 18             	sub    esp,0x18
c0022552:	ba 54 c9 02 c0       	mov    edx,0xc002c954
c0022557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255b:	89 10                	mov    DWORD PTR [eax],edx
c002255d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022565:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002256a:	7f 46                	jg     c00225b2 <SoundDevice::~SoundDevice()+0x64>
c002256c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022570:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022574:	83 c2 54             	add    edx,0x54
c0022577:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002257b:	85 c0                	test   eax,eax
c002257d:	74 2d                	je     c00225ac <SoundDevice::~SoundDevice()+0x5e>
c002257f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022583:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022587:	83 c2 54             	add    edx,0x54
c002258a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002258e:	85 db                	test   ebx,ebx
c0022590:	74 1a                	je     c00225ac <SoundDevice::~SoundDevice()+0x5e>
c0022592:	83 ec 0c             	sub    esp,0xc
c0022595:	53                   	push   ebx
c0022596:	e8 21 fc ff ff       	call   c00221bc <SoundChannel::~SoundChannel()>
c002259b:	83 c4 10             	add    esp,0x10
c002259e:	83 ec 08             	sub    esp,0x8
c00225a1:	6a 2c                	push   0x2c
c00225a3:	53                   	push   ebx
c00225a4:	e8 c7 08 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00225a9:	83 c4 10             	add    esp,0x10
c00225ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225b0:	eb b3                	jmp    c0022565 <SoundDevice::~SoundDevice()+0x17>
c00225b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b6:	83 ec 0c             	sub    esp,0xc
c00225b9:	50                   	push   eax
c00225ba:	e8 89 1c ff ff       	call   c0014248 <Device::~Device()>
c00225bf:	83 c4 10             	add    esp,0x10
c00225c2:	90                   	nop
c00225c3:	83 c4 18             	add    esp,0x18
c00225c6:	5b                   	pop    ebx
c00225c7:	c3                   	ret    

c00225c8 <SoundDevice::~SoundDevice()>:
c00225c8:	83 ec 0c             	sub    esp,0xc
c00225cb:	83 ec 0c             	sub    esp,0xc
c00225ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225d2:	e8 77 ff ff ff       	call   c002254e <SoundDevice::~SoundDevice()>
c00225d7:	83 c4 10             	add    esp,0x10
c00225da:	83 ec 08             	sub    esp,0x8
c00225dd:	68 e4 01 00 00       	push   0x1e4
c00225e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225e6:	e8 85 08 ff ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00225eb:	83 c4 10             	add    esp,0x10
c00225ee:	83 c4 0c             	add    esp,0xc
c00225f1:	c3                   	ret    

c00225f2 <SoundDevice::getFreeChannelNum()>:
c00225f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225f6:	31 c0                	xor    eax,eax
c00225f8:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022600:	74 09                	je     c002260b <SoundDevice::getFreeChannelNum()+0x19>
c0022602:	40                   	inc    eax
c0022603:	83 f8 20             	cmp    eax,0x20
c0022606:	75 f0                	jne    c00225f8 <SoundDevice::getFreeChannelNum()+0x6>
c0022608:	83 c8 ff             	or     eax,0xffffffff
c002260b:	c3                   	ret    

c002260c <SoundDevice::addChannel(SoundChannel*)>:
c002260c:	56                   	push   esi
c002260d:	53                   	push   ebx
c002260e:	51                   	push   ecx
c002260f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022613:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022617:	53                   	push   ebx
c0022618:	e8 d5 ff ff ff       	call   c00225f2 <SoundDevice::getFreeChannelNum()>
c002261d:	5a                   	pop    edx
c002261e:	83 f8 ff             	cmp    eax,0xffffffff
c0022621:	74 51                	je     c0022674 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022623:	85 f6                	test   esi,esi
c0022625:	74 4d                	je     c0022674 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022627:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002262e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022635:	75 30                	jne    c0022667 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022637:	83 ec 0c             	sub    esp,0xc
c002263a:	56                   	push   esi
c002263b:	e8 42 fd ff ff       	call   c0022382 <SoundChannel::getSampleRate()>
c0022640:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022646:	89 34 24             	mov    DWORD PTR [esp],esi
c0022649:	e8 3c fd ff ff       	call   c002238a <SoundChannel::getBits()>
c002264e:	83 c4 0c             	add    esp,0xc
c0022651:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022657:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022659:	50                   	push   eax
c002265a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022660:	53                   	push   ebx
c0022661:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022664:	83 c4 10             	add    esp,0x10
c0022667:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002266d:	b8 01 00 00 00       	mov    eax,0x1
c0022672:	eb 03                	jmp    c0022677 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022674:	83 c8 ff             	or     eax,0xffffffff
c0022677:	5a                   	pop    edx
c0022678:	5b                   	pop    ebx
c0022679:	5e                   	pop    esi
c002267a:	c3                   	ret    
c002267b:	90                   	nop

c002267c <SoundDevice::removeChannel(int)>:
c002267c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022684:	83 fa 1f             	cmp    edx,0x1f
c0022687:	77 23                	ja     c00226ac <SoundDevice::removeChannel(int)+0x30>
c0022689:	8d 14 90             	lea    edx,[eax+edx*4]
c002268c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022693:	74 17                	je     c00226ac <SoundDevice::removeChannel(int)+0x30>
c0022695:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002269f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226a5:	75 05                	jne    c00226ac <SoundDevice::removeChannel(int)+0x30>
c00226a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00226a9:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226ac:	c3                   	ret    
c00226ad:	90                   	nop

c00226ae <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226ae:	57                   	push   edi
c00226af:	56                   	push   esi
c00226b0:	53                   	push   ebx
c00226b1:	31 db                	xor    ebx,ebx
c00226b3:	83 ec 10             	sub    esp,0x10
c00226b6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226ba:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226be:	0f 8d cb 00 00 00    	jge    c002278f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226c4:	83 ec 0c             	sub    esp,0xc
c00226c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226cb:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226ce:	e8 d4 5e 00 00       	call   c00285a7 <__extendsfdf2>
c00226d3:	83 c4 10             	add    esp,0x10
c00226d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226de:	68 00 00 f0 3f       	push   0x3ff00000
c00226e3:	6a 00                	push   0x0
c00226e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ed:	e8 41 4e 00 00       	call   c0027533 <__adddf3>
c00226f2:	83 c4 10             	add    esp,0x10
c00226f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226fd:	68 00 00 e0 3f       	push   0x3fe00000
c0022702:	6a 00                	push   0x0
c0022704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022708:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270c:	e8 9f 54 00 00       	call   c0027bb0 <__muldf3>
c0022711:	83 c4 10             	add    esp,0x10
c0022714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022718:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002271c:	68 00 00 60 40       	push   0x40600000
c0022721:	6a 00                	push   0x0
c0022723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002272b:	e8 80 54 00 00       	call   c0027bb0 <__muldf3>
c0022730:	59                   	pop    ecx
c0022731:	5f                   	pop    edi
c0022732:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022736:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002273a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022742:	e8 3c 5d 00 00       	call   c0028483 <__truncdfsf2>
c0022747:	5a                   	pop    edx
c0022748:	89 c7                	mov    edi,eax
c002274a:	59                   	pop    ecx
c002274b:	68 00 00 fe 42       	push   0x42fe0000
c0022750:	50                   	push   eax
c0022751:	e8 d7 4d 00 00       	call   c002752d <__gesf2>
c0022756:	83 c4 10             	add    esp,0x10
c0022759:	85 c0                	test   eax,eax
c002275b:	78 06                	js     c0022763 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002275d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022761:	eb 26                	jmp    c0022789 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022763:	50                   	push   eax
c0022764:	50                   	push   eax
c0022765:	6a 00                	push   0x0
c0022767:	57                   	push   edi
c0022768:	e8 c4 4d 00 00       	call   c0027531 <__lesf2>
c002276d:	83 c4 10             	add    esp,0x10
c0022770:	85 c0                	test   eax,eax
c0022772:	7f 06                	jg     c002277a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022774:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022778:	eb 0f                	jmp    c0022789 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002277a:	83 ec 0c             	sub    esp,0xc
c002277d:	57                   	push   edi
c002277e:	e8 b9 5e 00 00       	call   c002863c <lrintf>
c0022783:	83 c4 10             	add    esp,0x10
c0022786:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022789:	43                   	inc    ebx
c002278a:	e9 2b ff ff ff       	jmp    c00226ba <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002278f:	83 c4 10             	add    esp,0x10
c0022792:	5b                   	pop    ebx
c0022793:	5e                   	pop    esi
c0022794:	5f                   	pop    edi
c0022795:	c3                   	ret    

c0022796 <SoundDevice::getAudio(int, float*, float*)>:
c0022796:	55                   	push   ebp
c0022797:	57                   	push   edi
c0022798:	56                   	push   esi
c0022799:	53                   	push   ebx
c002279a:	31 db                	xor    ebx,ebx
c002279c:	83 ec 20             	sub    esp,0x20
c002279f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227a3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227a7:	c1 e0 02             	shl    eax,0x2
c00227aa:	50                   	push   eax
c00227ab:	6a 00                	push   0x0
c00227ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227b1:	e8 c2 df fd ff       	call   c0000778 <memset>
c00227b6:	83 c4 10             	add    esp,0x10
c00227b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227bd:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227c4:	85 c0                	test   eax,eax
c00227c6:	0f 84 d7 00 00 00    	je     c00228a3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227cc:	83 ec 0c             	sub    esp,0xc
c00227cf:	50                   	push   eax
c00227d0:	e8 a5 fb ff ff       	call   c002237a <SoundChannel::paused()>
c00227d5:	83 c4 10             	add    esp,0x10
c00227d8:	84 c0                	test   al,al
c00227da:	0f 85 c3 00 00 00    	jne    c00228a3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227e0:	83 ec 0c             	sub    esp,0xc
c00227e3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227ea:	e8 19 fa ff ff       	call   c0022208 <SoundChannel::getVolume()>
c00227ef:	83 c4 10             	add    esp,0x10
c00227f2:	85 c0                	test   eax,eax
c00227f4:	0f 84 a9 00 00 00    	je     c00228a3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227fa:	83 ec 0c             	sub    esp,0xc
c00227fd:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022804:	e8 ff f9 ff ff       	call   c0022208 <SoundChannel::getVolume()>
c0022809:	83 ec 0c             	sub    esp,0xc
c002280c:	50                   	push   eax
c002280d:	e8 c5 4a 00 00       	call   c00272d7 <__floatsisf>
c0022812:	59                   	pop    ecx
c0022813:	5d                   	pop    ebp
c0022814:	31 ed                	xor    ebp,ebp
c0022816:	68 00 00 c8 42       	push   0x42c80000
c002281b:	50                   	push   eax
c002281c:	e8 8b 48 00 00       	call   c00270ac <__divsf3>
c0022821:	83 c4 10             	add    esp,0x10
c0022824:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022828:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002282c:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022832:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022836:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002283d:	e8 60 fb ff ff       	call   c00223a2 <SoundChannel::unbuffer(float*, int, int)>
c0022842:	83 c4 20             	add    esp,0x20
c0022845:	89 c1                	mov    ecx,eax
c0022847:	39 cd                	cmp    ebp,ecx
c0022849:	7d 52                	jge    c002289d <SoundDevice::getAudio(int, float*, float*)+0x107>
c002284b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002284f:	50                   	push   eax
c0022850:	50                   	push   eax
c0022851:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022855:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022858:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002285c:	e8 88 46 00 00       	call   c0026ee9 <__mulsf3>
c0022861:	5a                   	pop    edx
c0022862:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022866:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002286c:	e8 66 4a 00 00       	call   c00272d7 <__floatsisf>
c0022871:	59                   	pop    ecx
c0022872:	5a                   	pop    edx
c0022873:	50                   	push   eax
c0022874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022878:	e8 2f 48 00 00       	call   c00270ac <__divsf3>
c002287d:	59                   	pop    ecx
c002287e:	5a                   	pop    edx
c002287f:	50                   	push   eax
c0022880:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022884:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022887:	e8 3a 43 00 00       	call   c0026bc6 <__addsf3>
c002288c:	83 c4 10             	add    esp,0x10
c002288f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022893:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022897:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002289a:	45                   	inc    ebp
c002289b:	eb aa                	jmp    c0022847 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002289d:	39 cf                	cmp    edi,ecx
c002289f:	7e 02                	jle    c00228a3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228a1:	89 cf                	mov    edi,ecx
c00228a3:	43                   	inc    ebx
c00228a4:	83 fb 20             	cmp    ebx,0x20
c00228a7:	0f 85 10 ff ff ff    	jne    c00227bd <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228ad:	83 c4 1c             	add    esp,0x1c
c00228b0:	89 f8                	mov    eax,edi
c00228b2:	5b                   	pop    ebx
c00228b3:	5e                   	pop    esi
c00228b4:	5f                   	pop    edi
c00228b5:	5d                   	pop    ebp
c00228b6:	c3                   	ret    
c00228b7:	90                   	nop

c00228b8 <PCI::open(int, int, void*)>:
c00228b8:	83 ec 18             	sub    esp,0x18
c00228bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00228c1:	50                   	push   eax
c00228c2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228c5:	31 c0                	xor    eax,eax
c00228c7:	83 c4 1c             	add    esp,0x1c
c00228ca:	c3                   	ret    
c00228cb:	90                   	nop

c00228cc <PCI::close(int, int, void*)>:
c00228cc:	31 c0                	xor    eax,eax
c00228ce:	c3                   	ret    
c00228cf:	90                   	nop

c00228d0 <PCI::PCI()>:
c00228d0:	83 ec 0c             	sub    esp,0xc
c00228d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d7:	83 ec 08             	sub    esp,0x8
c00228da:	68 84 c9 02 c0       	push   0xc002c984
c00228df:	50                   	push   eax
c00228e0:	e8 05 13 ff ff       	call   c0013bea <Bus::Bus(char const*)>
c00228e5:	83 c4 10             	add    esp,0x10
c00228e8:	ba f0 c9 02 c0       	mov    edx,0xc002c9f0
c00228ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f1:	89 10                	mov    DWORD PTR [eax],edx
c00228f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228fd:	0f b6 d0             	movzx  edx,al
c0022900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022904:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002290b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022915:	0f b6 d0             	movzx  edx,al
c0022918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022925:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002292b:	8d 50 01             	lea    edx,[eax+0x1]
c002292e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022932:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022938:	0f b6 d0             	movzx  edx,al
c002293b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022943:	83 c9 c0             	or     ecx,0xffffffc0
c0022946:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002294a:	90                   	nop
c002294b:	83 c4 0c             	add    esp,0xc
c002294e:	c3                   	ret    
c002294f:	90                   	nop

c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022950:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022954:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022959:	89 ca                	mov    edx,ecx
c002295b:	c1 e0 10             	shl    eax,0x10
c002295e:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022964:	09 d0                	or     eax,edx
c0022966:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002296b:	c1 e2 08             	shl    edx,0x8
c002296e:	09 d0                	or     eax,edx
c0022970:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022975:	c1 e2 0b             	shl    edx,0xb
c0022978:	09 d0                	or     eax,edx
c002297a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002297f:	0d 00 00 00 80       	or     eax,0x80000000
c0022984:	ef                   	out    dx,eax
c0022985:	ba fc 0c 00 00       	mov    edx,0xcfc
c002298a:	ed                   	in     eax,dx
c002298b:	83 e1 02             	and    ecx,0x2
c002298e:	0f b6 c9             	movzx  ecx,cl
c0022991:	c1 e1 03             	shl    ecx,0x3
c0022994:	d3 e8                	shr    eax,cl
c0022996:	c3                   	ret    
c0022997:	90                   	nop

c0022998 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022998:	6a 00                	push   0x0
c002299a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002299f:	50                   	push   eax
c00229a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229a5:	50                   	push   eax
c00229a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ab:	50                   	push   eax
c00229ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229b0:	e8 9b ff ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229b5:	83 c4 14             	add    esp,0x14
c00229b8:	c3                   	ret    
c00229b9:	90                   	nop

c00229ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229ba:	6a 0e                	push   0xe
c00229bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c1:	50                   	push   eax
c00229c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c7:	50                   	push   eax
c00229c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cd:	50                   	push   eax
c00229ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229d2:	e8 79 ff ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229d7:	83 c4 14             	add    esp,0x14
c00229da:	0f b6 c0             	movzx  eax,al
c00229dd:	c3                   	ret    

c00229de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229de:	55                   	push   ebp
c00229df:	57                   	push   edi
c00229e0:	56                   	push   esi
c00229e1:	53                   	push   ebx
c00229e2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229e7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229ec:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229f1:	6a 0a                	push   0xa
c00229f3:	56                   	push   esi
c00229f4:	55                   	push   ebp
c00229f5:	57                   	push   edi
c00229f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229fa:	e8 51 ff ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229ff:	6a 0a                	push   0xa
c0022a01:	89 c3                	mov    ebx,eax
c0022a03:	56                   	push   esi
c0022a04:	0f b6 db             	movzx  ebx,bl
c0022a07:	55                   	push   ebp
c0022a08:	57                   	push   edi
c0022a09:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a0d:	e8 3e ff ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a12:	83 c4 28             	add    esp,0x28
c0022a15:	25 00 ff 00 00       	and    eax,0xff00
c0022a1a:	09 d8                	or     eax,ebx
c0022a1c:	5b                   	pop    ebx
c0022a1d:	5e                   	pop    esi
c0022a1e:	5f                   	pop    edi
c0022a1f:	5d                   	pop    ebp
c0022a20:	c3                   	ret    
c0022a21:	90                   	nop

c0022a22 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a22:	6a 08                	push   0x8
c0022a24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a29:	50                   	push   eax
c0022a2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a2f:	50                   	push   eax
c0022a30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a35:	50                   	push   eax
c0022a36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a3a:	e8 11 ff ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a3f:	83 c4 14             	add    esp,0x14
c0022a42:	0f b6 c4             	movzx  eax,ah
c0022a45:	c3                   	ret    

c0022a46 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a46:	6a 08                	push   0x8
c0022a48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4d:	50                   	push   eax
c0022a4e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a53:	50                   	push   eax
c0022a54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a59:	50                   	push   eax
c0022a5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a5e:	e8 ed fe ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a63:	83 c4 14             	add    esp,0x14
c0022a66:	c3                   	ret    
c0022a67:	90                   	nop

c0022a68 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a68:	6a 3c                	push   0x3c
c0022a6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6f:	50                   	push   eax
c0022a70:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a75:	50                   	push   eax
c0022a76:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7b:	50                   	push   eax
c0022a7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a80:	e8 cb fe ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a85:	83 c4 14             	add    esp,0x14
c0022a88:	c3                   	ret    
c0022a89:	90                   	nop

c0022a8a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a8a:	6a 18                	push   0x18
c0022a8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a91:	50                   	push   eax
c0022a92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a97:	50                   	push   eax
c0022a98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9d:	50                   	push   eax
c0022a9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa2:	e8 a9 fe ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa7:	83 c4 14             	add    esp,0x14
c0022aaa:	0f b6 c4             	movzx  eax,ah
c0022aad:	c3                   	ret    

c0022aae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aae:	55                   	push   ebp
c0022aaf:	57                   	push   edi
c0022ab0:	56                   	push   esi
c0022ab1:	53                   	push   ebx
c0022ab2:	50                   	push   eax
c0022ab3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022ab7:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022abc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ac1:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022ac6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022acd:	8d 43 12             	lea    eax,[ebx+0x12]
c0022ad0:	83 c3 10             	add    ebx,0x10
c0022ad3:	0f b6 c0             	movzx  eax,al
c0022ad6:	0f b6 db             	movzx  ebx,bl
c0022ad9:	50                   	push   eax
c0022ada:	51                   	push   ecx
c0022adb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022adf:	57                   	push   edi
c0022ae0:	55                   	push   ebp
c0022ae1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022ae5:	e8 66 fe ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aea:	53                   	push   ebx
c0022aeb:	89 c6                	mov    esi,eax
c0022aed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022af1:	c1 e6 10             	shl    esi,0x10
c0022af4:	51                   	push   ecx
c0022af5:	57                   	push   edi
c0022af6:	55                   	push   ebp
c0022af7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022afb:	e8 50 fe ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b00:	83 c4 2c             	add    esp,0x2c
c0022b03:	0f b7 c0             	movzx  eax,ax
c0022b06:	5b                   	pop    ebx
c0022b07:	09 f0                	or     eax,esi
c0022b09:	5e                   	pop    esi
c0022b0a:	5f                   	pop    edi
c0022b0b:	5d                   	pop    ebp
c0022b0c:	c3                   	ret    
c0022b0d:	90                   	nop

c0022b0e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b0e:	53                   	push   ebx
c0022b0f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b14:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b1d:	c1 e1 10             	shl    ecx,0x10
c0022b20:	25 fc 00 00 00       	and    eax,0xfc
c0022b25:	09 c1                	or     ecx,eax
c0022b27:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b2c:	c1 e0 08             	shl    eax,0x8
c0022b2f:	09 c1                	or     ecx,eax
c0022b31:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b36:	c1 e0 0b             	shl    eax,0xb
c0022b39:	09 c1                	or     ecx,eax
c0022b3b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b41:	89 c8                	mov    eax,ecx
c0022b43:	ef                   	out    dx,eax
c0022b44:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b49:	ed                   	in     eax,dx
c0022b4a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b4f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b54:	74 0a                	je     c0022b60 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b56:	0f b7 d8             	movzx  ebx,ax
c0022b59:	89 d0                	mov    eax,edx
c0022b5b:	c1 e0 10             	shl    eax,0x10
c0022b5e:	eb 05                	jmp    c0022b65 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b60:	66 31 c0             	xor    ax,ax
c0022b63:	89 d3                	mov    ebx,edx
c0022b65:	09 c3                	or     ebx,eax
c0022b67:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b6c:	89 c8                	mov    eax,ecx
c0022b6e:	ef                   	out    dx,eax
c0022b6f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b74:	89 d8                	mov    eax,ebx
c0022b76:	ef                   	out    dx,eax
c0022b77:	5b                   	pop    ebx
c0022b78:	c3                   	ret    
c0022b79:	90                   	nop

c0022b7a <PCI::checkBus(unsigned char)>:
c0022b7a:	56                   	push   esi
c0022b7b:	53                   	push   ebx
c0022b7c:	31 db                	xor    ebx,ebx
c0022b7e:	51                   	push   ecx
c0022b7f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b84:	52                   	push   edx
c0022b85:	53                   	push   ebx
c0022b86:	43                   	inc    ebx
c0022b87:	56                   	push   esi
c0022b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b8c:	e8 2b 03 00 00       	call   c0022ebc <PCI::checkDevice(unsigned char, unsigned char)>
c0022b91:	83 c4 10             	add    esp,0x10
c0022b94:	83 fb 20             	cmp    ebx,0x20
c0022b97:	75 eb                	jne    c0022b84 <PCI::checkBus(unsigned char)+0xa>
c0022b99:	58                   	pop    eax
c0022b9a:	5b                   	pop    ebx
c0022b9b:	5e                   	pop    esi
c0022b9c:	c3                   	ret    
c0022b9d:	90                   	nop

c0022b9e <PCI::foundDevice(PCIDeviceInfo)>:
c0022b9e:	55                   	push   ebp
c0022b9f:	57                   	push   edi
c0022ba0:	56                   	push   esi
c0022ba1:	53                   	push   ebx
c0022ba2:	83 ec 1c             	sub    esp,0x1c
c0022ba5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ba9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022baf:	0f 84 52 01 00 00    	je     c0022d07 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bb5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bb9:	66 81 f9 06 04       	cmp    cx,0x406
c0022bbe:	75 2c                	jne    c0022bec <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bc0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bc5:	50                   	push   eax
c0022bc6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bcb:	50                   	push   eax
c0022bcc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bd1:	50                   	push   eax
c0022bd2:	56                   	push   esi
c0022bd3:	e8 b2 fe ff ff       	call   c0022a8a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022bd8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022bdc:	0f b6 c0             	movzx  eax,al
c0022bdf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022be3:	83 c4 2c             	add    esp,0x2c
c0022be6:	5b                   	pop    ebx
c0022be7:	5e                   	pop    esi
c0022be8:	5f                   	pop    edi
c0022be9:	5d                   	pop    ebp
c0022bea:	eb 8e                	jmp    c0022b7a <PCI::checkBus(unsigned char)>
c0022bec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bf0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bf6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bfa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bfe:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c02:	88 d3                	mov    bl,dl
c0022c04:	85 c0                	test   eax,eax
c0022c06:	74 33                	je     c0022c3b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c0b:	85 d2                	test   edx,edx
c0022c0d:	74 28                	je     c0022c37 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c0f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c15:	31 ef                	xor    edi,ebp
c0022c17:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c1d:	75 18                	jne    c0022c37 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c23:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c29:	75 0c                	jne    c0022c37 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c2b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c31:	0f 84 d0 00 00 00    	je     c0022d07 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c39:	eb c9                	jmp    c0022c04 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c3b:	66 81 f9 01 06       	cmp    cx,0x601
c0022c40:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c44:	75 19                	jne    c0022c5f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c46:	83 ec 0c             	sub    esp,0xc
c0022c49:	68 64 01 00 00       	push   0x164
c0022c4e:	e8 ed cb fe ff       	call   c000f840 <malloc>
c0022c53:	89 c5                	mov    ebp,eax
c0022c55:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c58:	e8 95 0f 00 00       	call   c0023bf2 <SATABus::SATABus()>
c0022c5d:	eb 1e                	jmp    c0022c7d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c5f:	66 81 f9 01 01       	cmp    cx,0x101
c0022c64:	75 60                	jne    c0022cc6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c66:	83 ec 0c             	sub    esp,0xc
c0022c69:	68 70 02 00 00       	push   0x270
c0022c6e:	e8 cd cb fe ff       	call   c000f840 <malloc>
c0022c73:	89 c5                	mov    ebp,eax
c0022c75:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c78:	e8 03 03 00 00       	call   c0022f80 <IDE::IDE()>
c0022c7d:	58                   	pop    eax
c0022c7e:	5a                   	pop    edx
c0022c7f:	55                   	push   ebp
c0022c80:	56                   	push   esi
c0022c81:	e8 f0 16 ff ff       	call   c0014376 <Device::addChild(Device*)>
c0022c86:	83 ec 1c             	sub    esp,0x1c
c0022c89:	b9 09 00 00 00       	mov    ecx,0x9
c0022c8e:	fc                   	cld    
c0022c8f:	89 e7                	mov    edi,esp
c0022c91:	89 de                	mov    esi,ebx
c0022c93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c95:	55                   	push   ebp
c0022c96:	e8 e5 15 ff ff       	call   c0014280 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c9e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022ca2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022caa:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cb2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cbd:	83 c4 4c             	add    esp,0x4c
c0022cc0:	5b                   	pop    ebx
c0022cc1:	5e                   	pop    esi
c0022cc2:	5f                   	pop    edi
c0022cc3:	5d                   	pop    ebp
c0022cc4:	ff e0                	jmp    eax
c0022cc6:	83 ec 0c             	sub    esp,0xc
c0022cc9:	68 58 01 00 00       	push   0x158
c0022cce:	e8 6d cb fe ff       	call   c000f840 <malloc>
c0022cd3:	89 c5                	mov    ebp,eax
c0022cd5:	58                   	pop    eax
c0022cd6:	5a                   	pop    edx
c0022cd7:	68 8c c9 02 c0       	push   0xc002c98c
c0022cdc:	55                   	push   ebp
c0022cdd:	e8 8a 19 ff ff       	call   c001466c <DriverlessDevice::DriverlessDevice(char const*)>
c0022ce2:	59                   	pop    ecx
c0022ce3:	5f                   	pop    edi
c0022ce4:	55                   	push   ebp
c0022ce5:	56                   	push   esi
c0022ce6:	e8 8b 16 ff ff       	call   c0014376 <Device::addChild(Device*)>
c0022ceb:	b9 09 00 00 00       	mov    ecx,0x9
c0022cf0:	fc                   	cld    
c0022cf1:	89 df                	mov    edi,ebx
c0022cf3:	89 de                	mov    esi,ebx
c0022cf5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cf7:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022cfb:	83 c4 2c             	add    esp,0x2c
c0022cfe:	5b                   	pop    ebx
c0022cff:	5e                   	pop    esi
c0022d00:	5f                   	pop    edi
c0022d01:	5d                   	pop    ebp
c0022d02:	e9 79 15 ff ff       	jmp    c0014280 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d07:	83 c4 1c             	add    esp,0x1c
c0022d0a:	5b                   	pop    ebx
c0022d0b:	5e                   	pop    esi
c0022d0c:	5f                   	pop    edi
c0022d0d:	5d                   	pop    ebp
c0022d0e:	c3                   	ret    
c0022d0f:	90                   	nop

c0022d10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d10:	55                   	push   ebp
c0022d11:	57                   	push   edi
c0022d12:	56                   	push   esi
c0022d13:	53                   	push   ebx
c0022d14:	83 ec 5c             	sub    esp,0x5c
c0022d17:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d1f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d23:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d2c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d30:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d39:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d3e:	6a 0c                	push   0xc
c0022d40:	55                   	push   ebp
c0022d41:	53                   	push   ebx
c0022d42:	57                   	push   edi
c0022d43:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d4a:	e8 01 fc ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d4f:	55                   	push   ebp
c0022d50:	53                   	push   ebx
c0022d51:	57                   	push   edi
c0022d52:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d59:	e8 80 fc ff ff       	call   c00229de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d5e:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d63:	83 c4 24             	add    esp,0x24
c0022d66:	55                   	push   ebp
c0022d67:	53                   	push   ebx
c0022d68:	57                   	push   edi
c0022d69:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d6d:	e8 f6 fc ff ff       	call   c0022a68 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d72:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d76:	6a 3c                	push   0x3c
c0022d78:	55                   	push   ebp
c0022d79:	53                   	push   ebx
c0022d7a:	57                   	push   edi
c0022d7b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d82:	e8 c9 fb ff ff       	call   c0022950 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d87:	0f b6 c4             	movzx  eax,ah
c0022d8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d8e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d92:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d96:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0022d9b:	83 c4 24             	add    esp,0x24
c0022d9e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022da4:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022dab:	74 6c                	je     c0022e19 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dad:	31 f6                	xor    esi,esi
c0022daf:	8b 15 a8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a8
c0022db5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dbb:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022dc1:	7e 56                	jle    c0022e19 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dc3:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022dc6:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dcd:	39 cb                	cmp    ebx,ecx
c0022dcf:	75 45                	jne    c0022e16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dd1:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022dd8:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ddc:	75 38                	jne    c0022e16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dde:	83 ec 0c             	sub    esp,0xc
c0022de1:	68 a6 c9 02 c0       	push   0xc002c9a6
c0022de6:	e8 65 01 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0022deb:	8b 15 a8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a8
c0022df1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022df7:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022dff:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e03:	52                   	push   edx
c0022e04:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e08:	53                   	push   ebx
c0022e09:	68 cb c9 02 c0       	push   0xc002c9cb
c0022e0e:	e8 3d 01 ff ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0022e13:	83 c4 20             	add    esp,0x20
c0022e16:	46                   	inc    esi
c0022e17:	eb 96                	jmp    c0022daf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e19:	31 d2                	xor    edx,edx
c0022e1b:	83 ec 0c             	sub    esp,0xc
c0022e1e:	55                   	push   ebp
c0022e1f:	53                   	push   ebx
c0022e20:	57                   	push   edi
c0022e21:	52                   	push   edx
c0022e22:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e26:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e2d:	e8 7c fc ff ff       	call   c0022aae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e32:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e36:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e3a:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e3e:	42                   	inc    edx
c0022e3f:	83 c4 20             	add    esp,0x20
c0022e42:	83 fa 06             	cmp    edx,0x6
c0022e45:	75 d4                	jne    c0022e1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e47:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e4b:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e4f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e53:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e57:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e5b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e5f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e64:	86 e0                	xchg   al,ah
c0022e66:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e6b:	55                   	push   ebp
c0022e6c:	53                   	push   ebx
c0022e6d:	57                   	push   edi
c0022e6e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e72:	e8 ab fb ff ff       	call   c0022a22 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e77:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e7b:	55                   	push   ebp
c0022e7c:	53                   	push   ebx
c0022e7d:	57                   	push   edi
c0022e7e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e85:	e8 0e fb ff ff       	call   c0022998 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e8a:	83 ec 0c             	sub    esp,0xc
c0022e8d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e92:	b9 09 00 00 00       	mov    ecx,0x9
c0022e97:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e9b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e9f:	fc                   	cld    
c0022ea0:	89 e7                	mov    edi,esp
c0022ea2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ea4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022eab:	e8 ee fc ff ff       	call   c0022b9e <PCI::foundDevice(PCIDeviceInfo)>
c0022eb0:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022eb6:	5b                   	pop    ebx
c0022eb7:	5e                   	pop    esi
c0022eb8:	5f                   	pop    edi
c0022eb9:	5d                   	pop    ebp
c0022eba:	c3                   	ret    
c0022ebb:	90                   	nop

c0022ebc <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ebc:	55                   	push   ebp
c0022ebd:	57                   	push   edi
c0022ebe:	56                   	push   esi
c0022ebf:	53                   	push   ebx
c0022ec0:	83 ec 0c             	sub    esp,0xc
c0022ec3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ec7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ecc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ed1:	6a 00                	push   0x0
c0022ed3:	56                   	push   esi
c0022ed4:	57                   	push   edi
c0022ed5:	55                   	push   ebp
c0022ed6:	e8 bd fa ff ff       	call   c0022998 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022edb:	6a 00                	push   0x0
c0022edd:	56                   	push   esi
c0022ede:	57                   	push   edi
c0022edf:	55                   	push   ebp
c0022ee0:	e8 2b fe ff ff       	call   c0022d10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ee5:	83 c4 20             	add    esp,0x20
c0022ee8:	6a 00                	push   0x0
c0022eea:	56                   	push   esi
c0022eeb:	57                   	push   edi
c0022eec:	55                   	push   ebp
c0022eed:	e8 c8 fa ff ff       	call   c00229ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ef2:	83 c4 10             	add    esp,0x10
c0022ef5:	84 c0                	test   al,al
c0022ef7:	79 27                	jns    c0022f20 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ef9:	bb 01 00 00 00       	mov    ebx,0x1
c0022efe:	53                   	push   ebx
c0022eff:	56                   	push   esi
c0022f00:	57                   	push   edi
c0022f01:	55                   	push   ebp
c0022f02:	e8 91 fa ff ff       	call   c0022998 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f07:	83 c4 10             	add    esp,0x10
c0022f0a:	66 40                	inc    ax
c0022f0c:	74 0c                	je     c0022f1a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f0e:	53                   	push   ebx
c0022f0f:	56                   	push   esi
c0022f10:	57                   	push   edi
c0022f11:	55                   	push   ebp
c0022f12:	e8 f9 fd ff ff       	call   c0022d10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f17:	83 c4 10             	add    esp,0x10
c0022f1a:	43                   	inc    ebx
c0022f1b:	83 fb 08             	cmp    ebx,0x8
c0022f1e:	75 de                	jne    c0022efe <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f20:	83 c4 0c             	add    esp,0xc
c0022f23:	5b                   	pop    ebx
c0022f24:	5e                   	pop    esi
c0022f25:	5f                   	pop    edi
c0022f26:	5d                   	pop    ebp
c0022f27:	c3                   	ret    

c0022f28 <PCI::detect()>:
c0022f28:	56                   	push   esi
c0022f29:	53                   	push   ebx
c0022f2a:	53                   	push   ebx
c0022f2b:	31 db                	xor    ebx,ebx
c0022f2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f31:	6a 00                	push   0x0
c0022f33:	6a 00                	push   0x0
c0022f35:	6a 00                	push   0x0
c0022f37:	56                   	push   esi
c0022f38:	e8 7d fa ff ff       	call   c00229ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f3d:	83 c4 10             	add    esp,0x10
c0022f40:	a8 80                	test   al,0x80
c0022f42:	75 21                	jne    c0022f65 <PCI::detect()+0x3d>
c0022f44:	51                   	push   ecx
c0022f45:	51                   	push   ecx
c0022f46:	6a 00                	push   0x0
c0022f48:	56                   	push   esi
c0022f49:	e8 2c fc ff ff       	call   c0022b7a <PCI::checkBus(unsigned char)>
c0022f4e:	83 c4 10             	add    esp,0x10
c0022f51:	eb 24                	jmp    c0022f77 <PCI::detect()+0x4f>
c0022f53:	52                   	push   edx
c0022f54:	52                   	push   edx
c0022f55:	53                   	push   ebx
c0022f56:	43                   	inc    ebx
c0022f57:	56                   	push   esi
c0022f58:	e8 1d fc ff ff       	call   c0022b7a <PCI::checkBus(unsigned char)>
c0022f5d:	83 c4 10             	add    esp,0x10
c0022f60:	83 fb 08             	cmp    ebx,0x8
c0022f63:	74 12                	je     c0022f77 <PCI::detect()+0x4f>
c0022f65:	53                   	push   ebx
c0022f66:	6a 00                	push   0x0
c0022f68:	6a 00                	push   0x0
c0022f6a:	56                   	push   esi
c0022f6b:	e8 28 fa ff ff       	call   c0022998 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f70:	83 c4 10             	add    esp,0x10
c0022f73:	66 40                	inc    ax
c0022f75:	74 dc                	je     c0022f53 <PCI::detect()+0x2b>
c0022f77:	58                   	pop    eax
c0022f78:	5b                   	pop    ebx
c0022f79:	5e                   	pop    esi
c0022f7a:	c3                   	ret    
c0022f7b:	90                   	nop

c0022f7c <IDE::close(int, int, void*)>:
c0022f7c:	83 c8 ff             	or     eax,0xffffffff
c0022f7f:	c3                   	ret    

c0022f80 <IDE::IDE()>:
c0022f80:	83 ec 0c             	sub    esp,0xc
c0022f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f87:	83 ec 08             	sub    esp,0x8
c0022f8a:	68 14 ca 02 c0       	push   0xc002ca14
c0022f8f:	50                   	push   eax
c0022f90:	e8 6d 17 ff ff       	call   c0014702 <HardDiskController::HardDiskController(char const*)>
c0022f95:	83 c4 10             	add    esp,0x10
c0022f98:	ba 54 cc 02 c0       	mov    edx,0xc002cc54
c0022f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa1:	89 10                	mov    DWORD PTR [eax],edx
c0022fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fae:	90                   	nop
c0022faf:	83 c4 0c             	add    esp,0xc
c0022fb2:	c3                   	ret    
c0022fb3:	90                   	nop

c0022fb4 <IDE::prepareInterrupt(unsigned char)>:
c0022fb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fbd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fc5:	c3                   	ret    

c0022fc6 <selectDrive(unsigned char, unsigned char)>:
c0022fc6:	c3                   	ret    
c0022fc7:	90                   	nop

c0022fc8 <IDE::getBase(unsigned char)>:
c0022fc8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fd1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fd9:	c3                   	ret    

c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fda:	55                   	push   ebp
c0022fdb:	57                   	push   edi
c0022fdc:	56                   	push   esi
c0022fdd:	53                   	push   ebx
c0022fde:	83 ec 1c             	sub    esp,0x1c
c0022fe1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fe5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fe9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ff0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ff4:	80 f9 03             	cmp    cl,0x3
c0022ff7:	77 51                	ja     c002304a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022ff9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ffd:	0f b6 f2             	movzx  esi,dl
c0023000:	0f b6 db             	movzx  ebx,bl
c0023003:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023006:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002300a:	83 ca 80             	or     edx,0xffffff80
c002300d:	0f b6 d2             	movzx  edx,dl
c0023010:	52                   	push   edx
c0023011:	6a 0c                	push   0xc
c0023013:	56                   	push   esi
c0023014:	57                   	push   edi
c0023015:	e8 c0 ff ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c002301a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002301f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023023:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023027:	ee                   	out    dx,al
c0023028:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002302d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023031:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023035:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023039:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023041:	83 c4 2c             	add    esp,0x2c
c0023044:	5b                   	pop    ebx
c0023045:	5e                   	pop    esi
c0023046:	5f                   	pop    edi
c0023047:	5d                   	pop    ebp
c0023048:	eb 90                	jmp    c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c002304a:	80 fb 07             	cmp    bl,0x7
c002304d:	77 12                	ja     c0023061 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002304f:	0f b6 d2             	movzx  edx,dl
c0023052:	0f b6 db             	movzx  ebx,bl
c0023055:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002305d:	89 da                	mov    edx,ebx
c002305f:	eb 2f                	jmp    c0023090 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023061:	80 fb 0d             	cmp    bl,0xd
c0023064:	77 13                	ja     c0023079 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023066:	0f b6 d2             	movzx  edx,dl
c0023069:	0f b6 db             	movzx  ebx,bl
c002306c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023073:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023077:	eb 17                	jmp    c0023090 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023079:	80 fb 15             	cmp    bl,0x15
c002307c:	77 13                	ja     c0023091 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002307e:	0f b6 d2             	movzx  edx,dl
c0023081:	0f b6 db             	movzx  ebx,bl
c0023084:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002308c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023090:	ee                   	out    dx,al
c0023091:	83 c4 1c             	add    esp,0x1c
c0023094:	5b                   	pop    ebx
c0023095:	5e                   	pop    esi
c0023096:	5f                   	pop    edi
c0023097:	5d                   	pop    ebp
c0023098:	c3                   	ret    
c0023099:	90                   	nop

c002309a <IDE::read(unsigned char, unsigned char)>:
c002309a:	55                   	push   ebp
c002309b:	57                   	push   edi
c002309c:	56                   	push   esi
c002309d:	53                   	push   ebx
c002309e:	83 ec 1c             	sub    esp,0x1c
c00230a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230b0:	3c 03                	cmp    al,0x3
c00230b2:	77 43                	ja     c00230f7 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230b4:	0f b6 f2             	movzx  esi,dl
c00230b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230ba:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230be:	83 c8 80             	or     eax,0xffffff80
c00230c1:	0f b6 c0             	movzx  eax,al
c00230c4:	50                   	push   eax
c00230c5:	6a 0c                	push   0xc
c00230c7:	56                   	push   esi
c00230c8:	57                   	push   edi
c00230c9:	e8 0c ff ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ce:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230d3:	0f b6 c3             	movzx  eax,bl
c00230d6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230da:	ec                   	in     al,dx
c00230db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230df:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230e4:	52                   	push   edx
c00230e5:	6a 0c                	push   0xc
c00230e7:	56                   	push   esi
c00230e8:	57                   	push   edi
c00230e9:	e8 ec fe ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ee:	83 c4 20             	add    esp,0x20
c00230f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230f5:	eb 49                	jmp    c0023140 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230f7:	80 fb 07             	cmp    bl,0x7
c00230fa:	77 12                	ja     c002310e <IDE::read(unsigned char, unsigned char)+0x74>
c00230fc:	0f b6 d2             	movzx  edx,dl
c00230ff:	0f b6 c3             	movzx  eax,bl
c0023102:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002310a:	89 c2                	mov    edx,eax
c002310c:	eb 31                	jmp    c002313f <IDE::read(unsigned char, unsigned char)+0xa5>
c002310e:	80 fb 0d             	cmp    bl,0xd
c0023111:	77 13                	ja     c0023126 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023113:	0f b6 d2             	movzx  edx,dl
c0023116:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002311d:	0f b6 d3             	movzx  edx,bl
c0023120:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023124:	eb 19                	jmp    c002313f <IDE::read(unsigned char, unsigned char)+0xa5>
c0023126:	31 c0                	xor    eax,eax
c0023128:	80 fb 15             	cmp    bl,0x15
c002312b:	77 13                	ja     c0023140 <IDE::read(unsigned char, unsigned char)+0xa6>
c002312d:	0f b6 d2             	movzx  edx,dl
c0023130:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023138:	0f b6 d3             	movzx  edx,bl
c002313b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002313f:	ec                   	in     al,dx
c0023140:	83 c4 1c             	add    esp,0x1c
c0023143:	5b                   	pop    ebx
c0023144:	5e                   	pop    esi
c0023145:	5f                   	pop    edi
c0023146:	5d                   	pop    ebp
c0023147:	c3                   	ret    

c0023148 <IDE::waitInterrupt(unsigned char)>:
c0023148:	55                   	push   ebp
c0023149:	57                   	push   edi
c002314a:	56                   	push   esi
c002314b:	53                   	push   ebx
c002314c:	31 db                	xor    ebx,ebx
c002314e:	83 ec 0c             	sub    esp,0xc
c0023151:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023155:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002315a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023162:	89 e8                	mov    eax,ebp
c0023164:	84 c0                	test   al,al
c0023166:	75 34                	jne    c002319c <IDE::waitInterrupt(unsigned char)+0x54>
c0023168:	52                   	push   edx
c0023169:	6a 0c                	push   0xc
c002316b:	56                   	push   esi
c002316c:	57                   	push   edi
c002316d:	e8 28 ff ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023172:	83 c4 10             	add    esp,0x10
c0023175:	a8 01                	test   al,0x1
c0023177:	75 2b                	jne    c00231a4 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023179:	f6 c3 04             	test   bl,0x4
c002317c:	75 16                	jne    c0023194 <IDE::waitInterrupt(unsigned char)+0x4c>
c002317e:	83 fb 32             	cmp    ebx,0x32
c0023181:	7e 11                	jle    c0023194 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023183:	50                   	push   eax
c0023184:	50                   	push   eax
c0023185:	6a 00                	push   0x0
c0023187:	68 80 96 98 00       	push   0x989680
c002318c:	e8 8b b1 ff ff       	call   c001e31c <nanoSleep(unsigned long long)>
c0023191:	83 c4 10             	add    esp,0x10
c0023194:	83 fb 3c             	cmp    ebx,0x3c
c0023197:	74 0b                	je     c00231a4 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023199:	43                   	inc    ebx
c002319a:	eb be                	jmp    c002315a <IDE::waitInterrupt(unsigned char)+0x12>
c002319c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231a4:	83 c4 0c             	add    esp,0xc
c00231a7:	89 e8                	mov    eax,ebp
c00231a9:	5b                   	pop    ebx
c00231aa:	5e                   	pop    esi
c00231ab:	5f                   	pop    edi
c00231ac:	5d                   	pop    ebp
c00231ad:	c3                   	ret    

c00231ae <ideChannel0IRQHandler(regs*, void*)>:
c00231ae:	83 ec 10             	sub    esp,0x10
c00231b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231b5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231bc:	6a 07                	push   0x7
c00231be:	6a 00                	push   0x0
c00231c0:	50                   	push   eax
c00231c1:	e8 d4 fe ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00231c6:	83 c4 1c             	add    esp,0x1c
c00231c9:	c3                   	ret    

c00231ca <ideChannel1IRQHandler(regs*, void*)>:
c00231ca:	83 ec 10             	sub    esp,0x10
c00231cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231d1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231d8:	6a 07                	push   0x7
c00231da:	6a 01                	push   0x1
c00231dc:	50                   	push   eax
c00231dd:	e8 b8 fe ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00231e2:	83 c4 1c             	add    esp,0x1c
c00231e5:	c3                   	ret    

c00231e6 <IDE::enableIRQs(unsigned char, bool)>:
c00231e6:	57                   	push   edi
c00231e7:	56                   	push   esi
c00231e8:	be 04 00 00 00       	mov    esi,0x4
c00231ed:	53                   	push   ebx
c00231ee:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231f7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231fc:	0f 94 c0             	sete   al
c00231ff:	d1 e0                	shl    eax,1
c0023201:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023208:	0f b6 c0             	movzx  eax,al
c002320b:	50                   	push   eax
c002320c:	6a 0c                	push   0xc
c002320e:	57                   	push   edi
c002320f:	53                   	push   ebx
c0023210:	e8 c5 fd ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023215:	83 c4 10             	add    esp,0x10
c0023218:	50                   	push   eax
c0023219:	6a 0c                	push   0xc
c002321b:	57                   	push   edi
c002321c:	53                   	push   ebx
c002321d:	e8 78 fe ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023222:	83 c4 10             	add    esp,0x10
c0023225:	4e                   	dec    esi
c0023226:	75 f0                	jne    c0023218 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023228:	5b                   	pop    ebx
c0023229:	5e                   	pop    esi
c002322a:	5f                   	pop    edi
c002322b:	c3                   	ret    

c002322c <IDE::open(int, int, void*)>:
c002322c:	55                   	push   ebp
c002322d:	57                   	push   edi
c002322e:	56                   	push   esi
c002322f:	53                   	push   ebx
c0023230:	83 ec 1c             	sub    esp,0x1c
c0023233:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023237:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023240:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023249:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023250:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023257:	0f 85 b0 02 00 00    	jne    c002350d <IDE::open(int, int, void*)+0x2e1>
c002325d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023263:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023267:	83 e0 7f             	and    eax,0x7f
c002326a:	3c 05                	cmp    al,0x5
c002326c:	74 04                	je     c0023272 <IDE::open(int, int, void*)+0x46>
c002326e:	3c 0f                	cmp    al,0xf
c0023270:	75 32                	jne    c00232a4 <IDE::open(int, int, void*)+0x78>
c0023272:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023278:	83 e0 fc             	and    eax,0xfffffffc
c002327b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023282:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023288:	83 e0 fc             	and    eax,0xfffffffc
c002328b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023292:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023298:	83 e0 fc             	and    eax,0xfffffffc
c002329b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232a2:	eb 14                	jmp    c00232b8 <IDE::open(int, int, void*)+0x8c>
c00232a4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232ae:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232b8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232bf:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232ca:	89 c6                	mov    esi,eax
c00232cc:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232d1:	c1 e6 10             	shl    esi,0x10
c00232d4:	89 e8                	mov    eax,ebp
c00232d6:	89 fa                	mov    edx,edi
c00232d8:	c1 e0 0b             	shl    eax,0xb
c00232db:	09 f0                	or     eax,esi
c00232dd:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232e4:	c1 e6 08             	shl    esi,0x8
c00232e7:	09 c6                	or     esi,eax
c00232e9:	89 f0                	mov    eax,esi
c00232eb:	0d 08 00 00 80       	or     eax,0x80000008
c00232f0:	ef                   	out    dx,eax
c00232f1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232f6:	89 ca                	mov    edx,ecx
c00232f8:	ed                   	in     eax,dx
c00232f9:	c1 e8 10             	shr    eax,0x10
c00232fc:	3d ff ff 00 00       	cmp    eax,0xffff
c0023301:	0f 84 f5 00 00 00    	je     c00233fc <IDE::open(int, int, void*)+0x1d0>
c0023307:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002330d:	89 fa                	mov    edx,edi
c002330f:	89 f0                	mov    eax,esi
c0023311:	ef                   	out    dx,eax
c0023312:	b0 fe                	mov    al,0xfe
c0023314:	89 ca                	mov    edx,ecx
c0023316:	ee                   	out    dx,al
c0023317:	89 f0                	mov    eax,esi
c0023319:	89 fa                	mov    edx,edi
c002331b:	ef                   	out    dx,eax
c002331c:	89 ca                	mov    edx,ecx
c002331e:	ed                   	in     eax,dx
c002331f:	3c fe                	cmp    al,0xfe
c0023321:	0f 85 a9 00 00 00    	jne    c00233d0 <IDE::open(int, int, void*)+0x1a4>
c0023327:	8b 15 a8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3a8
c002332d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023334:	74 33                	je     c0023369 <IDE::open(int, int, void*)+0x13d>
c0023336:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002333c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023340:	40                   	inc    eax
c0023341:	83 ec 0c             	sub    esp,0xc
c0023344:	0f b6 c0             	movzx  eax,al
c0023347:	50                   	push   eax
c0023348:	55                   	push   ebp
c0023349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002334d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023353:	51                   	push   ecx
c0023354:	e8 f1 4e ff ff       	call   c001824a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023359:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002335e:	83 c4 1c             	add    esp,0x1c
c0023361:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023367:	eb 0a                	jmp    c0023373 <IDE::open(int, int, void*)+0x147>
c0023369:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023373:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002337a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023381:	c1 e1 10             	shl    ecx,0x10
c0023384:	c1 e0 08             	shl    eax,0x8
c0023387:	bf f8 0c 00 00       	mov    edi,0xcf8
c002338c:	09 c1                	or     ecx,eax
c002338e:	89 fa                	mov    edx,edi
c0023390:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023397:	c1 e0 0b             	shl    eax,0xb
c002339a:	09 c1                	or     ecx,eax
c002339c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233a2:	89 c8                	mov    eax,ecx
c00233a4:	ef                   	out    dx,eax
c00233a5:	be fc 0c 00 00       	mov    esi,0xcfc
c00233aa:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233b0:	89 f2                	mov    edx,esi
c00233b2:	ee                   	out    dx,al
c00233b3:	89 c8                	mov    eax,ecx
c00233b5:	89 fa                	mov    edx,edi
c00233b7:	ef                   	out    dx,eax
c00233b8:	89 f2                	mov    edx,esi
c00233ba:	ed                   	in     eax,dx
c00233bb:	0f b6 c0             	movzx  eax,al
c00233be:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233c4:	74 46                	je     c002340c <IDE::open(int, int, void*)+0x1e0>
c00233c6:	83 ec 0c             	sub    esp,0xc
c00233c9:	68 2c ca 02 c0       	push   0xc002ca2c
c00233ce:	eb 34                	jmp    c0023404 <IDE::open(int, int, void*)+0x1d8>
c00233d0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233d9:	75 17                	jne    c00233f2 <IDE::open(int, int, void*)+0x1c6>
c00233db:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233e0:	74 07                	je     c00233e9 <IDE::open(int, int, void*)+0x1bd>
c00233e2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233e7:	75 09                	jne    c00233f2 <IDE::open(int, int, void*)+0x1c6>
c00233e9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233f0:	eb 1a                	jmp    c002340c <IDE::open(int, int, void*)+0x1e0>
c00233f2:	83 ec 0c             	sub    esp,0xc
c00233f5:	68 34 ca 02 c0       	push   0xc002ca34
c00233fa:	eb 08                	jmp    c0023404 <IDE::open(int, int, void*)+0x1d8>
c00233fc:	83 ec 0c             	sub    esp,0xc
c00233ff:	68 65 ca 02 c0       	push   0xc002ca65
c0023404:	e8 e8 71 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0023409:	83 c4 10             	add    esp,0x10
c002340c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023413:	79 1a                	jns    c002342f <IDE::open(int, int, void*)+0x203>
c0023415:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002341b:	83 e0 fc             	and    eax,0xfffffffc
c002341e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023425:	83 c0 08             	add    eax,0x8
c0023428:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002342f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023435:	89 c2                	mov    edx,eax
c0023437:	83 e2 0f             	and    edx,0xf
c002343a:	66 83 fa 08          	cmp    dx,0x8
c002343e:	75 0a                	jne    c002344a <IDE::open(int, int, void*)+0x21e>
c0023440:	83 e8 02             	sub    eax,0x2
c0023443:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002344a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023450:	89 c2                	mov    edx,eax
c0023452:	83 e2 0f             	and    edx,0xf
c0023455:	66 83 fa 08          	cmp    dx,0x8
c0023459:	75 0a                	jne    c0023465 <IDE::open(int, int, void*)+0x239>
c002345b:	83 e8 02             	sub    eax,0x2
c002345e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023465:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002346c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023473:	89 d0                	mov    eax,edx
c0023475:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023478:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002347c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023480:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023483:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023488:	0f b6 c9             	movzx  ecx,cl
c002348b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023492:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023495:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023499:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002349d:	8d 50 02             	lea    edx,[eax+0x2]
c00234a0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234a5:	0f b6 d2             	movzx  edx,dl
c00234a8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234ae:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234b1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234b5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234b9:	8d 48 03             	lea    ecx,[eax+0x3]
c00234bc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234c1:	0f b6 c9             	movzx  ecx,cl
c00234c4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234ca:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234cd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234d1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234d5:	8d 50 04             	lea    edx,[eax+0x4]
c00234d8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234de:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234e3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234ea:	66 85 f6             	test   si,si
c00234ed:	74 3e                	je     c002352d <IDE::open(int, int, void*)+0x301>
c00234ef:	0f b6 d2             	movzx  edx,dl
c00234f2:	83 c0 05             	add    eax,0x5
c00234f5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234f8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234fc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023500:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023506:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002350b:	eb 20                	jmp    c002352d <IDE::open(int, int, void*)+0x301>
c002350d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023517:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023521:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023528:	e9 02 ff ff ff       	jmp    c002342f <IDE::open(int, int, void*)+0x203>
c002352d:	52                   	push   edx
c002352e:	52                   	push   edx
c002352f:	6a 00                	push   0x0
c0023531:	53                   	push   ebx
c0023532:	e8 7d fa ff ff       	call   c0022fb4 <IDE::prepareInterrupt(unsigned char)>
c0023537:	59                   	pop    ecx
c0023538:	5e                   	pop    esi
c0023539:	6a 01                	push   0x1
c002353b:	53                   	push   ebx
c002353c:	e8 73 fa ff ff       	call   c0022fb4 <IDE::prepareInterrupt(unsigned char)>
c0023541:	83 c4 0c             	add    esp,0xc
c0023544:	6a 00                	push   0x0
c0023546:	6a 00                	push   0x0
c0023548:	53                   	push   ebx
c0023549:	e8 98 fc ff ff       	call   c00231e6 <IDE::enableIRQs(unsigned char, bool)>
c002354e:	83 c4 0c             	add    esp,0xc
c0023551:	6a 00                	push   0x0
c0023553:	6a 01                	push   0x1
c0023555:	53                   	push   ebx
c0023556:	e8 8b fc ff ff       	call   c00231e6 <IDE::enableIRQs(unsigned char, bool)>
c002355b:	83 c4 10             	add    esp,0x10
c002355e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023565:	74 40                	je     c00235a7 <IDE::open(int, int, void*)+0x37b>
c0023567:	83 ec 0c             	sub    esp,0xc
c002356a:	68 8f ca 02 c0       	push   0xc002ca8f
c002356f:	e8 dc f9 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023574:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023577:	6a 01                	push   0x1
c0023579:	68 ae 31 02 c0       	push   0xc00231ae
c002357e:	6a 0e                	push   0xe
c0023580:	53                   	push   ebx
c0023581:	e8 74 0d ff ff       	call   c00142fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023586:	83 c4 14             	add    esp,0x14
c0023589:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002358f:	53                   	push   ebx
c0023590:	6a 01                	push   0x1
c0023592:	68 ca 31 02 c0       	push   0xc00231ca
c0023597:	6a 0f                	push   0xf
c0023599:	53                   	push   ebx
c002359a:	e8 5b 0d ff ff       	call   c00142fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002359f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235a5:	eb 4a                	jmp    c00235f1 <IDE::open(int, int, void*)+0x3c5>
c00235a7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235b1:	50                   	push   eax
c00235b2:	6a 0f                	push   0xf
c00235b4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235ba:	68 ab ca 02 c0       	push   0xc002caab
c00235bf:	e8 8c f9 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c00235c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235c7:	6a 00                	push   0x0
c00235c9:	68 ae 31 02 c0       	push   0xc00231ae
c00235ce:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235d4:	53                   	push   ebx
c00235d5:	e8 20 0d ff ff       	call   c00142fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235da:	83 c4 14             	add    esp,0x14
c00235dd:	53                   	push   ebx
c00235de:	6a 00                	push   0x0
c00235e0:	68 ca 31 02 c0       	push   0xc00231ca
c00235e5:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235eb:	53                   	push   ebx
c00235ec:	e8 09 0d ff ff       	call   c00142fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235f3:	83 c4 20             	add    esp,0x20
c00235f6:	83 ec 0c             	sub    esp,0xc
c00235f9:	53                   	push   ebx
c00235fa:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235fd:	83 c4 0c             	add    esp,0xc
c0023600:	6a 07                	push   0x7
c0023602:	6a 00                	push   0x0
c0023604:	53                   	push   ebx
c0023605:	e8 90 fa ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c002360a:	83 c4 0c             	add    esp,0xc
c002360d:	6a 07                	push   0x7
c002360f:	6a 01                	push   0x1
c0023611:	53                   	push   ebx
c0023612:	e8 83 fa ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023617:	83 c4 0c             	add    esp,0xc
c002361a:	6a 01                	push   0x1
c002361c:	6a 00                	push   0x0
c002361e:	53                   	push   ebx
c002361f:	e8 c2 fb ff ff       	call   c00231e6 <IDE::enableIRQs(unsigned char, bool)>
c0023624:	83 c4 0c             	add    esp,0xc
c0023627:	6a 01                	push   0x1
c0023629:	6a 01                	push   0x1
c002362b:	53                   	push   ebx
c002362c:	e8 b5 fb ff ff       	call   c00231e6 <IDE::enableIRQs(unsigned char, bool)>
c0023631:	83 c4 2c             	add    esp,0x2c
c0023634:	31 c0                	xor    eax,eax
c0023636:	5b                   	pop    ebx
c0023637:	5e                   	pop    esi
c0023638:	5f                   	pop    edi
c0023639:	5d                   	pop    ebp
c002363a:	c3                   	ret    
c002363b:	90                   	nop

c002363c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002363c:	55                   	push   ebp
c002363d:	57                   	push   edi
c002363e:	56                   	push   esi
c002363f:	53                   	push   ebx
c0023640:	83 ec 1c             	sub    esp,0x1c
c0023643:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023647:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002364b:	8d 50 f8             	lea    edx,[eax-0x8]
c002364e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023652:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023656:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002365a:	80 fa 03             	cmp    dl,0x3
c002365d:	77 5d                	ja     c00236bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002365f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023667:	0f b6 db             	movzx  ebx,bl
c002366a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002366d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023671:	83 ca 80             	or     edx,0xffffff80
c0023674:	0f b6 d2             	movzx  edx,dl
c0023677:	52                   	push   edx
c0023678:	6a 0c                	push   0xc
c002367a:	53                   	push   ebx
c002367b:	56                   	push   esi
c002367c:	e8 59 f9 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023681:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023686:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002368a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002368e:	0f b6 c0             	movzx  eax,al
c0023691:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023695:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023697:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002369c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236a0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236a8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236b0:	83 c4 2c             	add    esp,0x2c
c00236b3:	5b                   	pop    ebx
c00236b4:	5e                   	pop    esi
c00236b5:	5f                   	pop    edi
c00236b6:	5d                   	pop    ebp
c00236b7:	e9 1e f9 ff ff       	jmp    c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236bc:	3c 07                	cmp    al,0x7
c00236be:	77 10                	ja     c00236d0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236c0:	0f b6 db             	movzx  ebx,bl
c00236c3:	0f b6 d0             	movzx  edx,al
c00236c6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236ce:	eb 2d                	jmp    c00236fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236d0:	3c 0d                	cmp    al,0xd
c00236d2:	77 13                	ja     c00236e7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236d4:	0f b6 db             	movzx  ebx,bl
c00236d7:	0f b6 c0             	movzx  eax,al
c00236da:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236e1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236e5:	eb 16                	jmp    c00236fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236e7:	3c 15                	cmp    al,0x15
c00236e9:	77 14                	ja     c00236ff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236eb:	0f b6 db             	movzx  ebx,bl
c00236ee:	0f b6 c0             	movzx  eax,al
c00236f1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236f9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236fd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236ff:	83 c4 1c             	add    esp,0x1c
c0023702:	5b                   	pop    ebx
c0023703:	5e                   	pop    esi
c0023704:	5f                   	pop    edi
c0023705:	5d                   	pop    ebp
c0023706:	c3                   	ret    
c0023707:	90                   	nop

c0023708 <IDE::detect()>:
c0023708:	55                   	push   ebp
c0023709:	57                   	push   edi
c002370a:	56                   	push   esi
c002370b:	53                   	push   ebx
c002370c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023712:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023719:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023720:	0f 85 be 02 00 00    	jne    c00239e4 <IDE::detect()+0x2dc>
c0023726:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002372d:	31 f6                	xor    esi,esi
c002372f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023737:	31 ed                	xor    ebp,ebp
c0023739:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002373d:	c1 e0 06             	shl    eax,0x6
c0023740:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023748:	89 e8                	mov    eax,ebp
c002374a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002374e:	c1 e0 04             	shl    eax,0x4
c0023751:	83 c8 a0             	or     eax,0xffffffa0
c0023754:	0f b6 c0             	movzx  eax,al
c0023757:	50                   	push   eax
c0023758:	6a 06                	push   0x6
c002375a:	56                   	push   esi
c002375b:	53                   	push   ebx
c002375c:	e8 79 f8 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023761:	83 c4 0c             	add    esp,0xc
c0023764:	6a 0c                	push   0xc
c0023766:	56                   	push   esi
c0023767:	53                   	push   ebx
c0023768:	e8 2d f9 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c002376d:	83 c4 0c             	add    esp,0xc
c0023770:	6a 0c                	push   0xc
c0023772:	56                   	push   esi
c0023773:	53                   	push   ebx
c0023774:	e8 21 f9 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023779:	83 c4 0c             	add    esp,0xc
c002377c:	6a 0c                	push   0xc
c002377e:	56                   	push   esi
c002377f:	53                   	push   ebx
c0023780:	e8 15 f9 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023785:	83 c4 0c             	add    esp,0xc
c0023788:	6a 0c                	push   0xc
c002378a:	56                   	push   esi
c002378b:	53                   	push   ebx
c002378c:	e8 09 f9 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023791:	68 ec 00 00 00       	push   0xec
c0023796:	6a 07                	push   0x7
c0023798:	56                   	push   esi
c0023799:	53                   	push   ebx
c002379a:	e8 3b f8 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c002379f:	83 c4 1c             	add    esp,0x1c
c00237a2:	6a 0c                	push   0xc
c00237a4:	56                   	push   esi
c00237a5:	53                   	push   ebx
c00237a6:	e8 ef f8 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00237ab:	83 c4 0c             	add    esp,0xc
c00237ae:	6a 0c                	push   0xc
c00237b0:	56                   	push   esi
c00237b1:	53                   	push   ebx
c00237b2:	e8 e3 f8 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00237b7:	83 c4 0c             	add    esp,0xc
c00237ba:	6a 0c                	push   0xc
c00237bc:	56                   	push   esi
c00237bd:	53                   	push   ebx
c00237be:	e8 d7 f8 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00237c3:	83 c4 0c             	add    esp,0xc
c00237c6:	6a 0c                	push   0xc
c00237c8:	56                   	push   esi
c00237c9:	53                   	push   ebx
c00237ca:	e8 cb f8 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00237cf:	83 c4 0c             	add    esp,0xc
c00237d2:	6a 0c                	push   0xc
c00237d4:	56                   	push   esi
c00237d5:	53                   	push   ebx
c00237d6:	e8 bf f8 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00237db:	83 c4 10             	add    esp,0x10
c00237de:	84 c0                	test   al,al
c00237e0:	0f 84 8b 01 00 00    	je     c0023971 <IDE::detect()+0x269>
c00237e6:	31 ff                	xor    edi,edi
c00237e8:	50                   	push   eax
c00237e9:	6a 0c                	push   0xc
c00237eb:	56                   	push   esi
c00237ec:	53                   	push   ebx
c00237ed:	e8 a8 f8 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00237f2:	83 c4 10             	add    esp,0x10
c00237f5:	a8 01                	test   al,0x1
c00237f7:	0f 85 8e 01 00 00    	jne    c002398b <IDE::detect()+0x283>
c00237fd:	84 c0                	test   al,al
c00237ff:	78 04                	js     c0023805 <IDE::detect()+0xfd>
c0023801:	a8 08                	test   al,0x8
c0023803:	75 27                	jne    c002382c <IDE::detect()+0x124>
c0023805:	47                   	inc    edi
c0023806:	81 ff 17 01 00 00    	cmp    edi,0x117
c002380c:	7e da                	jle    c00237e8 <IDE::detect()+0xe0>
c002380e:	50                   	push   eax
c002380f:	50                   	push   eax
c0023810:	6a 00                	push   0x0
c0023812:	68 40 4b 4c 00       	push   0x4c4b40
c0023817:	e8 00 ab ff ff       	call   c001e31c <nanoSleep(unsigned long long)>
c002381c:	83 c4 10             	add    esp,0x10
c002381f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023825:	75 c1                	jne    c00237e8 <IDE::detect()+0xe0>
c0023827:	e9 5f 01 00 00       	jmp    c002398b <IDE::detect()+0x283>
c002382c:	31 c9                	xor    ecx,ecx
c002382e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023832:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023836:	83 ec 0c             	sub    esp,0xc
c0023839:	68 80 00 00 00       	push   0x80
c002383e:	57                   	push   edi
c002383f:	6a 00                	push   0x0
c0023841:	56                   	push   esi
c0023842:	53                   	push   ebx
c0023843:	e8 f4 fd ff ff       	call   c002363c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023848:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002384d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023851:	89 d1                	mov    ecx,edx
c0023853:	c1 e0 06             	shl    eax,0x6
c0023856:	01 d8                	add    eax,ebx
c0023858:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002385f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023866:	89 f2                	mov    edx,esi
c0023868:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002386e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023872:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023878:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002387c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023883:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002388b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023892:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002389a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238a0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238a7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238ad:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238b5:	83 c4 20             	add    esp,0x20
c00238b8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238bb:	83 c0 02             	add    eax,0x2
c00238be:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238c4:	83 c7 02             	add    edi,0x2
c00238c7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238ca:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238d0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238d4:	75 e2                	jne    c00238b8 <IDE::detect()+0x1b0>
c00238d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238da:	c1 e0 06             	shl    eax,0x6
c00238dd:	01 d8                	add    eax,ebx
c00238df:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238e5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238ec:	66 c1 ea 09          	shr    dx,0x9
c00238f0:	83 e2 01             	and    edx,0x1
c00238f3:	84 c9                	test   cl,cl
c00238f5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238fb:	75 2f                	jne    c002392c <IDE::detect()+0x224>
c00238fd:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023903:	85 c0                	test   eax,eax
c0023905:	74 66                	je     c002396d <IDE::detect()+0x265>
c0023907:	50                   	push   eax
c0023908:	55                   	push   ebp
c0023909:	56                   	push   esi
c002390a:	68 c7 ca 02 c0       	push   0xc002cac7
c002390f:	e8 3c f6 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023914:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002391b:	e8 20 bf fe ff       	call   c000f840 <malloc>
c0023920:	89 c7                	mov    edi,eax
c0023922:	89 04 24             	mov    DWORD PTR [esp],eax
c0023925:	e8 78 06 00 00       	call   c0023fa2 <ATA::ATA()>
c002392a:	eb 28                	jmp    c0023954 <IDE::detect()+0x24c>
c002392c:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023932:	55                   	push   ebp
c0023933:	56                   	push   esi
c0023934:	68 f6 ca 02 c0       	push   0xc002caf6
c0023939:	e8 12 f6 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c002393e:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023945:	e8 f6 be fe ff       	call   c000f840 <malloc>
c002394a:	89 c7                	mov    edi,eax
c002394c:	89 04 24             	mov    DWORD PTR [esp],eax
c002394f:	e8 8e 0c 00 00       	call   c00245e2 <ATAPI::ATAPI()>
c0023954:	5a                   	pop    edx
c0023955:	59                   	pop    ecx
c0023956:	57                   	push   edi
c0023957:	53                   	push   ebx
c0023958:	e8 19 0a ff ff       	call   c0014376 <Device::addChild(Device*)>
c002395d:	8b 07                	mov    eax,DWORD PTR [edi]
c002395f:	53                   	push   ebx
c0023960:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023964:	6a 00                	push   0x0
c0023966:	57                   	push   edi
c0023967:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002396a:	83 c4 20             	add    esp,0x20
c002396d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023971:	4d                   	dec    ebp
c0023972:	74 0a                	je     c002397e <IDE::detect()+0x276>
c0023974:	bd 01 00 00 00       	mov    ebp,0x1
c0023979:	e9 bb fd ff ff       	jmp    c0023739 <IDE::detect()+0x31>
c002397e:	4e                   	dec    esi
c002397f:	74 63                	je     c00239e4 <IDE::detect()+0x2dc>
c0023981:	be 01 00 00 00       	mov    esi,0x1
c0023986:	e9 ac fd ff ff       	jmp    c0023737 <IDE::detect()+0x2f>
c002398b:	50                   	push   eax
c002398c:	6a 04                	push   0x4
c002398e:	56                   	push   esi
c002398f:	53                   	push   ebx
c0023990:	e8 05 f7 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023995:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023999:	83 c4 0c             	add    esp,0xc
c002399c:	6a 05                	push   0x5
c002399e:	56                   	push   esi
c002399f:	53                   	push   ebx
c00239a0:	e8 f5 f6 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c00239a5:	83 c4 10             	add    esp,0x10
c00239a8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239ac:	80 fa 14             	cmp    dl,0x14
c00239af:	75 04                	jne    c00239b5 <IDE::detect()+0x2ad>
c00239b1:	3c eb                	cmp    al,0xeb
c00239b3:	eb 07                	jmp    c00239bc <IDE::detect()+0x2b4>
c00239b5:	3c 96                	cmp    al,0x96
c00239b7:	75 b8                	jne    c0023971 <IDE::detect()+0x269>
c00239b9:	80 fa 69             	cmp    dl,0x69
c00239bc:	75 b3                	jne    c0023971 <IDE::detect()+0x269>
c00239be:	68 a1 00 00 00       	push   0xa1
c00239c3:	6a 07                	push   0x7
c00239c5:	56                   	push   esi
c00239c6:	53                   	push   ebx
c00239c7:	e8 0e f6 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239cc:	5f                   	pop    edi
c00239cd:	58                   	pop    eax
c00239ce:	6a 00                	push   0x0
c00239d0:	68 40 42 0f 00       	push   0xf4240
c00239d5:	e8 42 a9 ff ff       	call   c001e31c <nanoSleep(unsigned long long)>
c00239da:	83 c4 10             	add    esp,0x10
c00239dd:	b1 01                	mov    cl,0x1
c00239df:	e9 4a fe ff ff       	jmp    c002382e <IDE::detect()+0x126>
c00239e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239ea:	5b                   	pop    ebx
c00239eb:	5e                   	pop    esi
c00239ec:	5f                   	pop    edi
c00239ed:	5d                   	pop    ebp
c00239ee:	c3                   	ret    
c00239ef:	90                   	nop

c00239f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239f0:	55                   	push   ebp
c00239f1:	57                   	push   edi
c00239f2:	56                   	push   esi
c00239f3:	53                   	push   ebx
c00239f4:	83 ec 1c             	sub    esp,0x1c
c00239f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a03:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a07:	88 c3                	mov    bl,al
c0023a09:	84 c0                	test   al,al
c0023a0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a0f:	0f 84 67 01 00 00    	je     c0023b7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a15:	83 ec 0c             	sub    esp,0xc
c0023a18:	68 27 cb 02 c0       	push   0xc002cb27
c0023a1d:	e8 2e f5 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023a22:	83 c4 10             	add    esp,0x10
c0023a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a29:	3c 01                	cmp    al,0x1
c0023a2b:	75 17                	jne    c0023a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a2d:	83 ec 0c             	sub    esp,0xc
c0023a30:	b3 13                	mov    bl,0x13
c0023a32:	68 33 cb 02 c0       	push   0xc002cb33
c0023a37:	e8 14 f5 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023a3c:	83 c4 10             	add    esp,0x10
c0023a3f:	e9 25 01 00 00       	jmp    c0023b69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a44:	3c 02                	cmp    al,0x2
c0023a46:	0f 85 ef 00 00 00    	jne    c0023b3b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a4c:	d1 e6                	shl    esi,1
c0023a4e:	09 ee                	or     esi,ebp
c0023a50:	52                   	push   edx
c0023a51:	89 f0                	mov    eax,esi
c0023a53:	6a 01                	push   0x1
c0023a55:	0f b6 f0             	movzx  esi,al
c0023a58:	c1 e6 06             	shl    esi,0x6
c0023a5b:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a63:	50                   	push   eax
c0023a64:	57                   	push   edi
c0023a65:	e8 30 f6 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023a6a:	83 c4 10             	add    esp,0x10
c0023a6d:	89 c6                	mov    esi,eax
c0023a6f:	a8 01                	test   al,0x1
c0023a71:	74 12                	je     c0023a85 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a73:	83 ec 0c             	sub    esp,0xc
c0023a76:	b3 07                	mov    bl,0x7
c0023a78:	68 48 cb 02 c0       	push   0xc002cb48
c0023a7d:	e8 ce f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023a82:	83 c4 10             	add    esp,0x10
c0023a85:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a8b:	74 12                	je     c0023a9f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a8d:	83 ec 0c             	sub    esp,0xc
c0023a90:	b3 03                	mov    bl,0x3
c0023a92:	68 66 cb 02 c0       	push   0xc002cb66
c0023a97:	e8 b4 f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023a9c:	83 c4 10             	add    esp,0x10
c0023a9f:	f7 c6 04 00 00 00    	test   esi,0x4
c0023aa5:	74 12                	je     c0023ab9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023aa7:	83 ec 0c             	sub    esp,0xc
c0023aaa:	b3 14                	mov    bl,0x14
c0023aac:	68 86 cb 02 c0       	push   0xc002cb86
c0023ab1:	e8 9a f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023ab6:	83 c4 10             	add    esp,0x10
c0023ab9:	f7 c6 08 00 00 00    	test   esi,0x8
c0023abf:	74 12                	je     c0023ad3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023ac1:	83 ec 0c             	sub    esp,0xc
c0023ac4:	b3 03                	mov    bl,0x3
c0023ac6:	68 66 cb 02 c0       	push   0xc002cb66
c0023acb:	e8 80 f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023ad0:	83 c4 10             	add    esp,0x10
c0023ad3:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ad9:	74 12                	je     c0023aed <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023adb:	83 ec 0c             	sub    esp,0xc
c0023ade:	b3 15                	mov    bl,0x15
c0023ae0:	68 9e cb 02 c0       	push   0xc002cb9e
c0023ae5:	e8 66 f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023aea:	83 c4 10             	add    esp,0x10
c0023aed:	f7 c6 20 00 00 00    	test   esi,0x20
c0023af3:	74 12                	je     c0023b07 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023af5:	83 ec 0c             	sub    esp,0xc
c0023af8:	b3 03                	mov    bl,0x3
c0023afa:	68 66 cb 02 c0       	push   0xc002cb66
c0023aff:	e8 4c f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023b04:	83 c4 10             	add    esp,0x10
c0023b07:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b0d:	74 12                	je     c0023b21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b0f:	83 ec 0c             	sub    esp,0xc
c0023b12:	b3 16                	mov    bl,0x16
c0023b14:	68 b8 cb 02 c0       	push   0xc002cbb8
c0023b19:	e8 32 f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023b1e:	83 c4 10             	add    esp,0x10
c0023b21:	89 f0                	mov    eax,esi
c0023b23:	84 c0                	test   al,al
c0023b25:	79 42                	jns    c0023b69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b27:	83 ec 0c             	sub    esp,0xc
c0023b2a:	b3 0d                	mov    bl,0xd
c0023b2c:	68 d9 cb 02 c0       	push   0xc002cbd9
c0023b31:	e8 1a f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023b36:	83 c4 10             	add    esp,0x10
c0023b39:	eb 2e                	jmp    c0023b69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b3b:	3c 03                	cmp    al,0x3
c0023b3d:	75 14                	jne    c0023b53 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b3f:	83 ec 0c             	sub    esp,0xc
c0023b42:	b3 17                	mov    bl,0x17
c0023b44:	68 ed cb 02 c0       	push   0xc002cbed
c0023b49:	e8 02 f4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023b4e:	83 c4 10             	add    esp,0x10
c0023b51:	eb 16                	jmp    c0023b69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b53:	3c 04                	cmp    al,0x4
c0023b55:	75 12                	jne    c0023b69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b57:	83 ec 0c             	sub    esp,0xc
c0023b5a:	b3 08                	mov    bl,0x8
c0023b5c:	68 03 cc 02 c0       	push   0xc002cc03
c0023b61:	e8 ea f3 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023b66:	83 c4 10             	add    esp,0x10
c0023b69:	50                   	push   eax
c0023b6a:	50                   	push   eax
c0023b6b:	0f b6 c3             	movzx  eax,bl
c0023b6e:	50                   	push   eax
c0023b6f:	68 1b cc 02 c0       	push   0xc002cc1b
c0023b74:	e8 d7 f3 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023b79:	83 c4 10             	add    esp,0x10
c0023b7c:	83 c4 1c             	add    esp,0x1c
c0023b7f:	88 d8                	mov    al,bl
c0023b81:	5b                   	pop    ebx
c0023b82:	5e                   	pop    esi
c0023b83:	5f                   	pop    edi
c0023b84:	5d                   	pop    ebp
c0023b85:	c3                   	ret    

c0023b86 <IDE::polling(unsigned char, unsigned int)>:
c0023b86:	57                   	push   edi
c0023b87:	56                   	push   esi
c0023b88:	53                   	push   ebx
c0023b89:	bb 04 00 00 00       	mov    ebx,0x4
c0023b8e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b92:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b97:	52                   	push   edx
c0023b98:	6a 0c                	push   0xc
c0023b9a:	56                   	push   esi
c0023b9b:	57                   	push   edi
c0023b9c:	e8 f9 f4 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023ba1:	83 c4 10             	add    esp,0x10
c0023ba4:	4b                   	dec    ebx
c0023ba5:	75 f0                	jne    c0023b97 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023ba7:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bac:	50                   	push   eax
c0023bad:	6a 0c                	push   0xc
c0023baf:	56                   	push   esi
c0023bb0:	57                   	push   edi
c0023bb1:	e8 e4 f4 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0023bb6:	83 c4 10             	add    esp,0x10
c0023bb9:	a8 01                	test   al,0x1
c0023bbb:	74 12                	je     c0023bcf <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bbd:	83 ec 0c             	sub    esp,0xc
c0023bc0:	68 35 cc 02 c0       	push   0xc002cc35
c0023bc5:	e8 86 f3 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023bca:	83 c4 10             	add    esp,0x10
c0023bcd:	eb 17                	jmp    c0023be6 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bcf:	a8 20                	test   al,0x20
c0023bd1:	75 0f                	jne    c0023be2 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023bd3:	4b                   	dec    ebx
c0023bd4:	74 10                	je     c0023be6 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bd6:	84 c0                	test   al,al
c0023bd8:	78 d2                	js     c0023bac <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bda:	a8 08                	test   al,0x8
c0023bdc:	74 ce                	je     c0023bac <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bde:	31 c0                	xor    eax,eax
c0023be0:	eb 06                	jmp    c0023be8 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023be2:	b0 01                	mov    al,0x1
c0023be4:	eb 02                	jmp    c0023be8 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023be6:	b0 02                	mov    al,0x2
c0023be8:	5b                   	pop    ebx
c0023be9:	5e                   	pop    esi
c0023bea:	5f                   	pop    edi
c0023beb:	c3                   	ret    

c0023bec <SATABus::close(int, int, void*)>:
c0023bec:	31 c0                	xor    eax,eax
c0023bee:	c3                   	ret    
c0023bef:	90                   	nop

c0023bf0 <SATABus::detect()>:
c0023bf0:	c3                   	ret    
c0023bf1:	90                   	nop

c0023bf2 <SATABus::SATABus()>:
c0023bf2:	83 ec 0c             	sub    esp,0xc
c0023bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf9:	83 ec 08             	sub    esp,0x8
c0023bfc:	68 78 cc 02 c0       	push   0xc002cc78
c0023c01:	50                   	push   eax
c0023c02:	e8 fb 0a ff ff       	call   c0014702 <HardDiskController::HardDiskController(char const*)>
c0023c07:	83 c4 10             	add    esp,0x10
c0023c0a:	ba 34 cd 02 c0       	mov    edx,0xc002cd34
c0023c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c13:	89 10                	mov    DWORD PTR [eax],edx
c0023c15:	83 ec 0c             	sub    esp,0xc
c0023c18:	6a 50                	push   0x50
c0023c1a:	e8 09 c4 fe ff       	call   c0010028 <Phys::allocateContiguousPages(int)>
c0023c1f:	83 c4 10             	add    esp,0x10
c0023c22:	89 c2                	mov    edx,eax
c0023c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c28:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c2e:	83 ec 0c             	sub    esp,0xc
c0023c31:	6a 50                	push   0x50
c0023c33:	e8 69 df fe ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c0023c38:	83 c4 10             	add    esp,0x10
c0023c3b:	89 c2                	mov    edx,eax
c0023c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c41:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c47:	e8 f0 e1 fe ff       	call   c0011e3c <Virt::getAKernelVAS()>
c0023c4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c50:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c5a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c60:	83 ec 0c             	sub    esp,0xc
c0023c63:	6a 03                	push   0x3
c0023c65:	6a 50                	push   0x50
c0023c67:	51                   	push   ecx
c0023c68:	52                   	push   edx
c0023c69:	50                   	push   eax
c0023c6a:	e8 fd e9 fe ff       	call   c001266c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c6f:	83 c4 20             	add    esp,0x20
c0023c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c76:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c86:	83 ec 04             	sub    esp,0x4
c0023c89:	52                   	push   edx
c0023c8a:	50                   	push   eax
c0023c8b:	68 9c cc 02 c0       	push   0xc002cc9c
c0023c90:	e8 bb f2 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023c95:	83 c4 10             	add    esp,0x10
c0023c98:	90                   	nop
c0023c99:	83 c4 0c             	add    esp,0xc
c0023c9c:	c3                   	ret    
c0023c9d:	90                   	nop

c0023c9e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c9e:	83 ec 0c             	sub    esp,0xc
c0023ca1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ca5:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023ca8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cab:	09 c2                	or     edx,eax
c0023cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cb7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023cb9:	31 c0                	xor    eax,eax
c0023cbb:	c1 e9 08             	shr    ecx,0x8
c0023cbe:	83 e1 0f             	and    ecx,0xf
c0023cc1:	39 c8                	cmp    eax,ecx
c0023cc3:	74 0a                	je     c0023ccf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cc5:	f6 c2 01             	test   dl,0x1
c0023cc8:	74 18                	je     c0023ce2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cca:	d1 ea                	shr    edx,1
c0023ccc:	40                   	inc    eax
c0023ccd:	eb f2                	jmp    c0023cc1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ccf:	83 ec 0c             	sub    esp,0xc
c0023cd2:	68 c0 cc 02 c0       	push   0xc002ccc0
c0023cd7:	e8 15 69 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0023cdc:	83 c4 10             	add    esp,0x10
c0023cdf:	83 c8 ff             	or     eax,0xffffffff
c0023ce2:	83 c4 0c             	add    esp,0xc
c0023ce5:	c3                   	ret    

c0023ce6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023ce6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ced:	89 c2                	mov    edx,eax
c0023cef:	c1 ea 08             	shr    edx,0x8
c0023cf2:	83 e2 0f             	and    edx,0xf
c0023cf5:	fe ca                	dec    dl
c0023cf7:	75 31                	jne    c0023d2a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cf9:	83 e0 0f             	and    eax,0xf
c0023cfc:	3c 03                	cmp    al,0x3
c0023cfe:	75 2a                	jne    c0023d2a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d00:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d03:	b8 02 00 00 00       	mov    eax,0x2
c0023d08:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d0e:	74 1c                	je     c0023d2c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d10:	b8 04 00 00 00       	mov    eax,0x4
c0023d15:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d1b:	74 0f                	je     c0023d2c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d1d:	31 c0                	xor    eax,eax
c0023d1f:	83 fa 03             	cmp    edx,0x3
c0023d22:	0f 94 c0             	sete   al
c0023d25:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d29:	c3                   	ret    
c0023d2a:	31 c0                	xor    eax,eax
c0023d2c:	c3                   	ret    
c0023d2d:	90                   	nop

c0023d2e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d35:	0f ba e2 0f          	bt     edx,0xf
c0023d39:	72 f7                	jb     c0023d32 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d3e:	83 ca 10             	or     edx,0x10
c0023d41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d44:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d47:	83 ca 01             	or     edx,0x1
c0023d4a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d4d:	c3                   	ret    

c0023d4e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d55:	83 e2 fe             	and    edx,0xfffffffe
c0023d58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d5b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d5e:	83 e2 ef             	and    edx,0xffffffef
c0023d61:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d67:	0f ba e2 0e          	bt     edx,0xe
c0023d6b:	72 f7                	jb     c0023d64 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d6d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d70:	0f ba e2 0f          	bt     edx,0xf
c0023d74:	72 ee                	jb     c0023d64 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d76:	c3                   	ret    
c0023d77:	90                   	nop

c0023d78 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d78:	55                   	push   ebp
c0023d79:	57                   	push   edi
c0023d7a:	56                   	push   esi
c0023d7b:	53                   	push   ebx
c0023d7c:	83 ec 1c             	sub    esp,0x1c
c0023d7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d87:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d8b:	53                   	push   ebx
c0023d8c:	89 fd                	mov    ebp,edi
c0023d8e:	56                   	push   esi
c0023d8f:	c1 e5 0a             	shl    ebp,0xa
c0023d92:	e8 b7 ff ff ff       	call   c0023d4e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d97:	83 ec 0c             	sub    esp,0xc
c0023d9a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023da0:	01 e8                	add    eax,ebp
c0023da2:	89 03                	mov    DWORD PTR [ebx],eax
c0023da4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023da6:	68 00 04 00 00       	push   0x400
c0023dab:	6a 00                	push   0x0
c0023dad:	50                   	push   eax
c0023dae:	e8 c5 c9 fd ff       	call   c0000778 <memset>
c0023db3:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023db9:	89 fa                	mov    edx,edi
c0023dbb:	01 e8                	add    eax,ebp
c0023dbd:	c1 e7 0d             	shl    edi,0xd
c0023dc0:	89 03                	mov    DWORD PTR [ebx],eax
c0023dc2:	c1 e2 08             	shl    edx,0x8
c0023dc5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023dcc:	81 c2 00 80 00 00    	add    edx,0x8000
c0023dd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023dd6:	89 d0                	mov    eax,edx
c0023dd8:	83 c4 1c             	add    esp,0x1c
c0023ddb:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023de1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023de4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023de7:	68 00 01 00 00       	push   0x100
c0023dec:	6a 00                	push   0x0
c0023dee:	50                   	push   eax
c0023def:	e8 84 c9 fd ff       	call   c0000778 <memset>
c0023df4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023df8:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023dfe:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e08:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e0b:	83 c4 10             	add    esp,0x10
c0023e0e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e15:	31 ff                	xor    edi,edi
c0023e17:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e1d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e27:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e2d:	83 c5 20             	add    ebp,0x20
c0023e30:	01 f8                	add    eax,edi
c0023e32:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e35:	52                   	push   edx
c0023e36:	68 00 01 00 00       	push   0x100
c0023e3b:	6a 00                	push   0x0
c0023e3d:	50                   	push   eax
c0023e3e:	e8 35 c9 fd ff       	call   c0000778 <memset>
c0023e43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e47:	83 c4 10             	add    esp,0x10
c0023e4a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e50:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e57:	01 f8                	add    eax,edi
c0023e59:	81 c7 00 01 00 00    	add    edi,0x100
c0023e5f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e62:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e68:	75 b3                	jne    c0023e1d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e6a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e6e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e72:	83 c4 1c             	add    esp,0x1c
c0023e75:	5b                   	pop    ebx
c0023e76:	5e                   	pop    esi
c0023e77:	5f                   	pop    edi
c0023e78:	5d                   	pop    ebp
c0023e79:	e9 b0 fe ff ff       	jmp    c0023d2e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e7e:	55                   	push   ebp
c0023e7f:	57                   	push   edi
c0023e80:	56                   	push   esi
c0023e81:	53                   	push   ebx
c0023e82:	31 db                	xor    ebx,ebx
c0023e84:	83 ec 0c             	sub    esp,0xc
c0023e87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e8b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e8f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e92:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e98:	0f 84 aa 00 00 00    	je     c0023f48 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ea2:	89 d8                	mov    eax,ebx
c0023ea4:	c1 e0 07             	shl    eax,0x7
c0023ea7:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023eae:	55                   	push   ebp
c0023eaf:	56                   	push   esi
c0023eb0:	e8 31 fe ff ff       	call   c0023ce6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023eb5:	5a                   	pop    edx
c0023eb6:	83 f8 01             	cmp    eax,0x1
c0023eb9:	59                   	pop    ecx
c0023eba:	75 30                	jne    c0023eec <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023ebc:	50                   	push   eax
c0023ebd:	50                   	push   eax
c0023ebe:	53                   	push   ebx
c0023ebf:	68 e5 cc 02 c0       	push   0xc002cce5
c0023ec4:	e8 87 f0 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023ec9:	83 c4 0c             	add    esp,0xc
c0023ecc:	53                   	push   ebx
c0023ecd:	55                   	push   ebp
c0023ece:	56                   	push   esi
c0023ecf:	e8 a4 fe ff ff       	call   c0023d78 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ed4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023edb:	e8 60 b9 fe ff       	call   c000f840 <malloc>
c0023ee0:	89 c5                	mov    ebp,eax
c0023ee2:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ee5:	e8 60 0d 00 00       	call   c0024c4a <SATA::SATA()>
c0023eea:	eb 33                	jmp    c0023f1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023eec:	83 f8 04             	cmp    eax,0x4
c0023eef:	75 47                	jne    c0023f38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023ef1:	50                   	push   eax
c0023ef2:	50                   	push   eax
c0023ef3:	53                   	push   ebx
c0023ef4:	68 fc cc 02 c0       	push   0xc002ccfc
c0023ef9:	e8 52 f0 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023efe:	83 c4 0c             	add    esp,0xc
c0023f01:	53                   	push   ebx
c0023f02:	55                   	push   ebp
c0023f03:	56                   	push   esi
c0023f04:	e8 6f fe ff ff       	call   c0023d78 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f09:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f10:	e8 2b b9 fe ff       	call   c000f840 <malloc>
c0023f15:	89 c5                	mov    ebp,eax
c0023f17:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f1a:	e8 d7 10 00 00       	call   c0024ff6 <SATAPI::SATAPI()>
c0023f1f:	5a                   	pop    edx
c0023f20:	59                   	pop    ecx
c0023f21:	55                   	push   ebp
c0023f22:	56                   	push   esi
c0023f23:	e8 4e 04 ff ff       	call   c0014376 <Device::addChild(Device*)>
c0023f28:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f2b:	56                   	push   esi
c0023f2c:	6a 00                	push   0x0
c0023f2e:	53                   	push   ebx
c0023f2f:	55                   	push   ebp
c0023f30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f33:	83 c4 20             	add    esp,0x20
c0023f36:	eb 10                	jmp    c0023f48 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f38:	50                   	push   eax
c0023f39:	50                   	push   eax
c0023f3a:	53                   	push   ebx
c0023f3b:	68 15 cd 02 c0       	push   0xc002cd15
c0023f40:	e8 0b f0 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0023f45:	83 c4 10             	add    esp,0x10
c0023f48:	d1 ef                	shr    edi,1
c0023f4a:	43                   	inc    ebx
c0023f4b:	83 fb 20             	cmp    ebx,0x20
c0023f4e:	0f 85 3e ff ff ff    	jne    c0023e92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f54:	83 c4 0c             	add    esp,0xc
c0023f57:	5b                   	pop    ebx
c0023f58:	5e                   	pop    esi
c0023f59:	5f                   	pop    edi
c0023f5a:	5d                   	pop    ebp
c0023f5b:	c3                   	ret    

c0023f5c <SATABus::open(int, int, void*)>:
c0023f5c:	83 ec 14             	sub    esp,0x14
c0023f5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f63:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f69:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f6f:	52                   	push   edx
c0023f70:	50                   	push   eax
c0023f71:	e8 08 ff ff ff       	call   c0023e7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f76:	31 c0                	xor    eax,eax
c0023f78:	83 c4 1c             	add    esp,0x1c
c0023f7b:	c3                   	ret    

c0023f7c <ATA::close(int, int, void*)>:
c0023f7c:	83 ec 0c             	sub    esp,0xc
c0023f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f83:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f89:	85 c0                	test   eax,eax
c0023f8b:	74 0c                	je     c0023f99 <ATA::close(int, int, void*)+0x1d>
c0023f8d:	83 ec 0c             	sub    esp,0xc
c0023f90:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f92:	50                   	push   eax
c0023f93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f96:	83 c4 10             	add    esp,0x10
c0023f99:	31 c0                	xor    eax,eax
c0023f9b:	83 c4 0c             	add    esp,0xc
c0023f9e:	c3                   	ret    
c0023f9f:	90                   	nop

c0023fa0 <ATA::powerSaving(PowerSavingLevel)>:
c0023fa0:	c3                   	ret    
c0023fa1:	90                   	nop

c0023fa2 <ATA::ATA()>:
c0023fa2:	83 ec 0c             	sub    esp,0xc
c0023fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fa9:	83 ec 04             	sub    esp,0x4
c0023fac:	68 00 02 00 00       	push   0x200
c0023fb1:	68 fd cd 02 c0       	push   0xc002cdfd
c0023fb6:	50                   	push   eax
c0023fb7:	e8 de 07 ff ff       	call   c001479a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fbc:	83 c4 10             	add    esp,0x10
c0023fbf:	ba 80 cd 02 c0       	mov    edx,0xc002cd80
c0023fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fc8:	89 10                	mov    DWORD PTR [eax],edx
c0023fca:	90                   	nop
c0023fcb:	83 c4 0c             	add    esp,0xc
c0023fce:	c3                   	ret    
c0023fcf:	90                   	nop

c0023fd0 <ATA::flush(bool)>:
c0023fd0:	53                   	push   ebx
c0023fd1:	83 ec 08             	sub    esp,0x8
c0023fd4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fdd:	19 c0                	sbb    eax,eax
c0023fdf:	83 e0 fd             	and    eax,0xfffffffd
c0023fe2:	05 ea 00 00 00       	add    eax,0xea
c0023fe7:	50                   	push   eax
c0023fe8:	6a 07                	push   0x7
c0023fea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff1:	50                   	push   eax
c0023ff2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ff8:	e8 dd ef ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ffd:	83 c4 0c             	add    esp,0xc
c0024000:	6a 00                	push   0x0
c0024002:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024009:	50                   	push   eax
c002400a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024010:	e8 71 fb ff ff       	call   c0023b86 <IDE::polling(unsigned char, unsigned int)>
c0024015:	83 c4 18             	add    esp,0x18
c0024018:	5b                   	pop    ebx
c0024019:	c3                   	ret    

c002401a <ATA::readyForCommand()>:
c002401a:	56                   	push   esi
c002401b:	53                   	push   ebx
c002401c:	31 db                	xor    ebx,ebx
c002401e:	50                   	push   eax
c002401f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024023:	50                   	push   eax
c0024024:	6a 0c                	push   0xc
c0024026:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002402d:	50                   	push   eax
c002402e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024034:	e8 61 f0 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0024039:	83 c4 10             	add    esp,0x10
c002403c:	a8 88                	test   al,0x88
c002403e:	74 23                	je     c0024063 <ATA::readyForCommand()+0x49>
c0024040:	43                   	inc    ebx
c0024041:	83 fb 63             	cmp    ebx,0x63
c0024044:	7e dd                	jle    c0024023 <ATA::readyForCommand()+0x9>
c0024046:	51                   	push   ecx
c0024047:	51                   	push   ecx
c0024048:	6a 00                	push   0x0
c002404a:	68 40 42 0f 00       	push   0xf4240
c002404f:	e8 c8 a2 ff ff       	call   c001e31c <nanoSleep(unsigned long long)>
c0024054:	83 c4 10             	add    esp,0x10
c0024057:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002405d:	75 c4                	jne    c0024023 <ATA::readyForCommand()+0x9>
c002405f:	31 c0                	xor    eax,eax
c0024061:	eb 02                	jmp    c0024065 <ATA::readyForCommand()+0x4b>
c0024063:	b0 01                	mov    al,0x1
c0024065:	5a                   	pop    edx
c0024066:	5b                   	pop    ebx
c0024067:	5e                   	pop    esi
c0024068:	c3                   	ret    
c0024069:	90                   	nop

c002406a <ATA::access(unsigned long long, int, void*, bool)>:
c002406a:	55                   	push   ebp
c002406b:	57                   	push   edi
c002406c:	56                   	push   esi
c002406d:	53                   	push   ebx
c002406e:	83 ec 2c             	sub    esp,0x2c
c0024071:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024075:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024079:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002407d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024081:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024085:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024089:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002408d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024093:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024097:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002409d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240a1:	c1 e0 06             	shl    eax,0x6
c00240a4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240ac:	74 5d                	je     c002410b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240ae:	89 fa                	mov    edx,edi
c00240b0:	89 f0                	mov    eax,esi
c00240b2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240b6:	c1 ea 1c             	shr    edx,0x1c
c00240b9:	89 d1                	mov    ecx,edx
c00240bb:	09 c1                	or     ecx,eax
c00240bd:	74 25                	je     c00240e4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240bf:	31 ed                	xor    ebp,ebp
c00240c1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240c8:	89 fa                	mov    edx,edi
c00240ca:	89 f0                	mov    eax,esi
c00240cc:	0f ad d0             	shrd   eax,edx,cl
c00240cf:	d3 ea                	shr    edx,cl
c00240d1:	f6 c1 20             	test   cl,0x20
c00240d4:	74 02                	je     c00240d8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240d6:	89 d0                	mov    eax,edx
c00240d8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240dc:	45                   	inc    ebp
c00240dd:	83 fd 06             	cmp    ebp,0x6
c00240e0:	75 df                	jne    c00240c1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240e2:	eb 76                	jmp    c002415a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240e4:	89 f0                	mov    eax,esi
c00240e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240eb:	89 fa                	mov    edx,edi
c00240ed:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240f4:	0f ac d0 10          	shrd   eax,edx,0x10
c00240f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240fd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024101:	c1 ee 18             	shr    esi,0x18
c0024104:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024109:	eb 56                	jmp    c0024161 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002410b:	6a 00                	push   0x0
c002410d:	6a 3f                	push   0x3f
c002410f:	57                   	push   edi
c0024110:	56                   	push   esi
c0024111:	e8 96 29 00 00       	call   c0026aac <__umoddi3>
c0024116:	83 c4 10             	add    esp,0x10
c0024119:	40                   	inc    eax
c002411a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002411e:	6a 00                	push   0x0
c0024120:	68 f0 03 00 00       	push   0x3f0
c0024125:	57                   	push   edi
c0024126:	56                   	push   esi
c0024127:	e8 80 28 00 00       	call   c00269ac <__udivdi3>
c002412c:	83 c4 10             	add    esp,0x10
c002412f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024134:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002413b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024140:	6a 00                	push   0x0
c0024142:	6a 3f                	push   0x3f
c0024144:	57                   	push   edi
c0024145:	56                   	push   esi
c0024146:	e8 61 28 00 00       	call   c00269ac <__udivdi3>
c002414b:	83 c4 10             	add    esp,0x10
c002414e:	89 c6                	mov    esi,eax
c0024150:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024155:	83 e6 0f             	and    esi,0xf
c0024158:	eb 07                	jmp    c0024161 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002415a:	31 f6                	xor    esi,esi
c002415c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024161:	bf 01 00 00 00       	mov    edi,0x1
c0024166:	50                   	push   eax
c0024167:	6a 00                	push   0x0
c0024169:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024170:	50                   	push   eax
c0024171:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024175:	e8 6c f0 ff ff       	call   c00231e6 <IDE::enableIRQs(unsigned char, bool)>
c002417a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002417d:	e8 98 fe ff ff       	call   c002401a <ATA::readyForCommand()>
c0024182:	83 c4 10             	add    esp,0x10
c0024185:	84 c0                	test   al,al
c0024187:	0f 84 5a 02 00 00    	je     c00243e7 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002418d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024193:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024199:	c1 e0 04             	shl    eax,0x4
c002419c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241a3:	09 c6                	or     esi,eax
c00241a5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241aa:	75 05                	jne    c00241b1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241ac:	83 ce a0             	or     esi,0xffffffa0
c00241af:	eb 03                	jmp    c00241b4 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241b1:	83 ce e0             	or     esi,0xffffffe0
c00241b4:	89 f0                	mov    eax,esi
c00241b6:	0f b6 f0             	movzx  esi,al
c00241b9:	56                   	push   esi
c00241ba:	6a 06                	push   0x6
c00241bc:	51                   	push   ecx
c00241bd:	52                   	push   edx
c00241be:	e8 17 ee ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241c3:	83 c4 10             	add    esp,0x10
c00241c6:	6a 00                	push   0x0
c00241c8:	6a 01                	push   0x1
c00241ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241d1:	50                   	push   eax
c00241d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241d8:	e8 fd ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241dd:	83 c4 10             	add    esp,0x10
c00241e0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241e5:	75 6e                	jne    c0024255 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241e7:	6a 00                	push   0x0
c00241e9:	6a 08                	push   0x8
c00241eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f2:	50                   	push   eax
c00241f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241f9:	e8 dc ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241fe:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024203:	50                   	push   eax
c0024204:	6a 09                	push   0x9
c0024206:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002420d:	50                   	push   eax
c002420e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024214:	e8 c1 ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024219:	83 c4 20             	add    esp,0x20
c002421c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024221:	50                   	push   eax
c0024222:	6a 0a                	push   0xa
c0024224:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002422b:	50                   	push   eax
c002422c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024232:	e8 a3 ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024237:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002423c:	50                   	push   eax
c002423d:	6a 0b                	push   0xb
c002423f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024246:	50                   	push   eax
c0024247:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424d:	e8 88 ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024252:	83 c4 20             	add    esp,0x20
c0024255:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002425a:	50                   	push   eax
c002425b:	6a 02                	push   0x2
c002425d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024264:	50                   	push   eax
c0024265:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002426b:	e8 6a ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024270:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024275:	50                   	push   eax
c0024276:	6a 03                	push   0x3
c0024278:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427f:	50                   	push   eax
c0024280:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024286:	e8 4f ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428b:	83 c4 20             	add    esp,0x20
c002428e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024293:	50                   	push   eax
c0024294:	6a 04                	push   0x4
c0024296:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002429d:	50                   	push   eax
c002429e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a4:	e8 31 ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242ae:	50                   	push   eax
c00242af:	6a 05                	push   0x5
c00242b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b8:	50                   	push   eax
c00242b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242bf:	e8 16 ed ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c4:	83 c4 20             	add    esp,0x20
c00242c7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242cc:	0f 94 c0             	sete   al
c00242cf:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242d4:	74 09                	je     c00242df <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242d6:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242dd:	eb 07                	jmp    c00242e6 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242df:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242e6:	0f b6 c0             	movzx  eax,al
c00242e9:	50                   	push   eax
c00242ea:	6a 07                	push   0x7
c00242ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f3:	50                   	push   eax
c00242f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242fa:	e8 db ec ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ff:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024303:	83 c4 10             	add    esp,0x10
c0024306:	85 f6                	test   esi,esi
c0024308:	0f 84 ba 00 00 00    	je     c00243c8 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002430e:	50                   	push   eax
c002430f:	6a 01                	push   0x1
c0024311:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024318:	50                   	push   eax
c0024319:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002431f:	e8 62 f8 ff ff       	call   c0023b86 <IDE::polling(unsigned char, unsigned int)>
c0024324:	83 c4 10             	add    esp,0x10
c0024327:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002432d:	84 c0                	test   al,al
c002432f:	74 2c                	je     c002435d <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024331:	0f b6 f8             	movzx  edi,al
c0024334:	0f b6 d2             	movzx  edx,dl
c0024337:	57                   	push   edi
c0024338:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002433f:	50                   	push   eax
c0024340:	52                   	push   edx
c0024341:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024347:	e8 a4 f6 ff ff       	call   c00239f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002434c:	c7 04 24 58 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd58
c0024353:	e8 f8 eb fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0024358:	e9 87 00 00 00       	jmp    c00243e4 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002435d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024362:	74 33                	je     c0024397 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024364:	31 ed                	xor    ebp,ebp
c0024366:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002436a:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002436e:	50                   	push   eax
c002436f:	50                   	push   eax
c0024370:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024377:	50                   	push   eax
c0024378:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002437e:	e8 45 ec ff ff       	call   c0022fc8 <IDE::getBase(unsigned char)>
c0024383:	89 c2                	mov    edx,eax
c0024385:	89 f8                	mov    eax,edi
c0024387:	66 ef                	out    dx,ax
c0024389:	45                   	inc    ebp
c002438a:	83 c4 10             	add    esp,0x10
c002438d:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024393:	75 d1                	jne    c0024366 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024395:	eb 23                	jmp    c00243ba <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024397:	0f b6 d2             	movzx  edx,dl
c002439a:	51                   	push   ecx
c002439b:	51                   	push   ecx
c002439c:	52                   	push   edx
c002439d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243a3:	e8 20 ec ff ff       	call   c0022fc8 <IDE::getBase(unsigned char)>
c00243a8:	b9 00 01 00 00       	mov    ecx,0x100
c00243ad:	89 c2                	mov    edx,eax
c00243af:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243b3:	fc                   	cld    
c00243b4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243b7:	83 c4 10             	add    esp,0x10
c00243ba:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243c2:	4e                   	dec    esi
c00243c3:	e9 3e ff ff ff       	jmp    c0024306 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243c8:	31 ff                	xor    edi,edi
c00243ca:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243cf:	74 16                	je     c00243e7 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243d1:	50                   	push   eax
c00243d2:	50                   	push   eax
c00243d3:	31 c0                	xor    eax,eax
c00243d5:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243da:	0f 94 c0             	sete   al
c00243dd:	50                   	push   eax
c00243de:	53                   	push   ebx
c00243df:	e8 ec fb ff ff       	call   c0023fd0 <ATA::flush(bool)>
c00243e4:	83 c4 10             	add    esp,0x10
c00243e7:	83 c4 2c             	add    esp,0x2c
c00243ea:	89 f8                	mov    eax,edi
c00243ec:	5b                   	pop    ebx
c00243ed:	5e                   	pop    esi
c00243ee:	5f                   	pop    edi
c00243ef:	5d                   	pop    ebp
c00243f0:	c3                   	ret    
c00243f1:	90                   	nop

c00243f2 <ATA::read(unsigned long long, int, void*)>:
c00243f2:	57                   	push   edi
c00243f3:	b8 04 00 00 00       	mov    eax,0x4
c00243f8:	56                   	push   esi
c00243f9:	53                   	push   ebx
c00243fa:	83 ec 10             	sub    esp,0x10
c00243fd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024401:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024405:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024408:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002440c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024410:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024416:	77 3b                	ja     c0024453 <ATA::read(unsigned long long, int, void*)+0x61>
c0024418:	b8 06 00 00 00       	mov    eax,0x6
c002441d:	85 d2                	test   edx,edx
c002441f:	74 32                	je     c0024453 <ATA::read(unsigned long long, int, void*)+0x61>
c0024421:	50                   	push   eax
c0024422:	50                   	push   eax
c0024423:	6a 00                	push   0x0
c0024425:	52                   	push   edx
c0024426:	53                   	push   ebx
c0024427:	57                   	push   edi
c0024428:	56                   	push   esi
c0024429:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002442d:	e8 38 fc ff ff       	call   c002406a <ATA::access(unsigned long long, int, void*, bool)>
c0024432:	83 c4 20             	add    esp,0x20
c0024435:	85 c0                	test   eax,eax
c0024437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002443b:	75 11                	jne    c002444e <ATA::read(unsigned long long, int, void*)+0x5c>
c002443d:	01 1d 28 27 03 c0    	add    DWORD PTR ds:0xc0032728,ebx
c0024443:	e8 ae c5 fe ff       	call   c00109f6 <VgaText::updateDiskUsage()>
c0024448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002444c:	eb 05                	jmp    c0024453 <ATA::read(unsigned long long, int, void*)+0x61>
c002444e:	b8 01 00 00 00       	mov    eax,0x1
c0024453:	83 c4 10             	add    esp,0x10
c0024456:	5b                   	pop    ebx
c0024457:	5e                   	pop    esi
c0024458:	5f                   	pop    edi
c0024459:	c3                   	ret    

c002445a <ATA::write(unsigned long long, int, void*)>:
c002445a:	57                   	push   edi
c002445b:	b8 04 00 00 00       	mov    eax,0x4
c0024460:	56                   	push   esi
c0024461:	53                   	push   ebx
c0024462:	83 ec 10             	sub    esp,0x10
c0024465:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024469:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002446d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024470:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024474:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024478:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002447e:	77 3b                	ja     c00244bb <ATA::write(unsigned long long, int, void*)+0x61>
c0024480:	b8 06 00 00 00       	mov    eax,0x6
c0024485:	85 d2                	test   edx,edx
c0024487:	74 32                	je     c00244bb <ATA::write(unsigned long long, int, void*)+0x61>
c0024489:	50                   	push   eax
c002448a:	50                   	push   eax
c002448b:	6a 01                	push   0x1
c002448d:	52                   	push   edx
c002448e:	53                   	push   ebx
c002448f:	57                   	push   edi
c0024490:	56                   	push   esi
c0024491:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024495:	e8 d0 fb ff ff       	call   c002406a <ATA::access(unsigned long long, int, void*, bool)>
c002449a:	83 c4 20             	add    esp,0x20
c002449d:	85 c0                	test   eax,eax
c002449f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244a3:	75 11                	jne    c00244b6 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244a5:	01 1d 24 27 03 c0    	add    DWORD PTR ds:0xc0032724,ebx
c00244ab:	e8 46 c5 fe ff       	call   c00109f6 <VgaText::updateDiskUsage()>
c00244b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244b4:	eb 05                	jmp    c00244bb <ATA::write(unsigned long long, int, void*)+0x61>
c00244b6:	b8 01 00 00 00       	mov    eax,0x1
c00244bb:	83 c4 10             	add    esp,0x10
c00244be:	5b                   	pop    ebx
c00244bf:	5e                   	pop    esi
c00244c0:	5f                   	pop    edi
c00244c1:	c3                   	ret    

c00244c2 <ATA::detectCHS()>:
c00244c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244c6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244cc:	c1 e0 06             	shl    eax,0x6
c00244cf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244d5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244df:	c7 44 24 04 63 cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd63
c00244e7:	e9 05 61 ff ff       	jmp    c001a5f1 <Krnl::panic(char const*)>

c00244ec <ATA::open(int, int, void*)>:
c00244ec:	53                   	push   ebx
c00244ed:	83 ec 08             	sub    esp,0x8
c00244f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244fc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024502:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024508:	c1 e0 06             	shl    eax,0x6
c002450b:	01 d0                	add    eax,edx
c002450d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024514:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002451a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024521:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002452b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024531:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024538:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002453f:	75 0c                	jne    c002454d <ATA::open(int, int, void*)+0x61>
c0024541:	83 ec 0c             	sub    esp,0xc
c0024544:	53                   	push   ebx
c0024545:	e8 78 ff ff ff       	call   c00244c2 <ATA::detectCHS()>
c002454a:	83 c4 10             	add    esp,0x10
c002454d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024553:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024559:	c1 e0 06             	shl    eax,0x6
c002455c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024563:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002456d:	d1 e8                	shr    eax,1
c002456f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024575:	6a 04                	push   0x4
c0024577:	6a 0c                	push   0xc
c0024579:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024580:	50                   	push   eax
c0024581:	52                   	push   edx
c0024582:	e8 53 ea ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024587:	90                   	nop
c0024588:	90                   	nop
c0024589:	6a 00                	push   0x0
c002458b:	6a 0c                	push   0xc
c002458d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024594:	50                   	push   eax
c0024595:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002459b:	e8 3a ea ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245a0:	83 c4 14             	add    esp,0x14
c00245a3:	53                   	push   ebx
c00245a4:	e8 59 02 ff ff       	call   c0014802 <PhysicalDisk::startCache()>
c00245a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245ac:	e8 c7 23 ff ff       	call   c0016978 <createPartitionsForDisk(PhysicalDisk*)>
c00245b1:	31 c0                	xor    eax,eax
c00245b3:	83 c4 18             	add    esp,0x18
c00245b6:	5b                   	pop    ebx
c00245b7:	c3                   	ret    

c00245b8 <ATAPI::write(unsigned long long, int, void*)>:
c00245b8:	b8 03 00 00 00       	mov    eax,0x3
c00245bd:	c3                   	ret    

c00245be <ATAPI::close(int, int, void*)>:
c00245be:	83 ec 0c             	sub    esp,0xc
c00245c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245c5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245cb:	85 c0                	test   eax,eax
c00245cd:	74 0c                	je     c00245db <ATAPI::close(int, int, void*)+0x1d>
c00245cf:	83 ec 0c             	sub    esp,0xc
c00245d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00245d4:	50                   	push   eax
c00245d5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245d8:	83 c4 10             	add    esp,0x10
c00245db:	31 c0                	xor    eax,eax
c00245dd:	83 c4 0c             	add    esp,0xc
c00245e0:	c3                   	ret    
c00245e1:	90                   	nop

c00245e2 <ATAPI::ATAPI()>:
c00245e2:	83 ec 0c             	sub    esp,0xc
c00245e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245e9:	83 ec 04             	sub    esp,0x4
c00245ec:	68 00 08 00 00       	push   0x800
c00245f1:	68 9d ce 02 c0       	push   0xc002ce9d
c00245f6:	50                   	push   eax
c00245f7:	e8 9e 01 ff ff       	call   c001479a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245fc:	83 c4 10             	add    esp,0x10
c00245ff:	ba b8 cd 02 c0       	mov    edx,0xc002cdb8
c0024604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024608:	89 10                	mov    DWORD PTR [eax],edx
c002460a:	90                   	nop
c002460b:	83 c4 0c             	add    esp,0xc
c002460e:	c3                   	ret    
c002460f:	90                   	nop

c0024610 <ATAPI::readyForCommand()>:
c0024610:	56                   	push   esi
c0024611:	53                   	push   ebx
c0024612:	31 db                	xor    ebx,ebx
c0024614:	50                   	push   eax
c0024615:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024619:	50                   	push   eax
c002461a:	6a 0c                	push   0xc
c002461c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024623:	50                   	push   eax
c0024624:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002462a:	e8 6b ea ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c002462f:	83 c4 10             	add    esp,0x10
c0024632:	a8 88                	test   al,0x88
c0024634:	74 23                	je     c0024659 <ATAPI::readyForCommand()+0x49>
c0024636:	43                   	inc    ebx
c0024637:	83 fb 63             	cmp    ebx,0x63
c002463a:	7e dd                	jle    c0024619 <ATAPI::readyForCommand()+0x9>
c002463c:	51                   	push   ecx
c002463d:	51                   	push   ecx
c002463e:	6a 00                	push   0x0
c0024640:	68 40 42 0f 00       	push   0xf4240
c0024645:	e8 d2 9c ff ff       	call   c001e31c <nanoSleep(unsigned long long)>
c002464a:	83 c4 10             	add    esp,0x10
c002464d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024653:	75 c4                	jne    c0024619 <ATAPI::readyForCommand()+0x9>
c0024655:	31 c0                	xor    eax,eax
c0024657:	eb 02                	jmp    c002465b <ATAPI::readyForCommand()+0x4b>
c0024659:	b0 01                	mov    al,0x1
c002465b:	5a                   	pop    edx
c002465c:	5b                   	pop    ebx
c002465d:	5e                   	pop    esi
c002465e:	c3                   	ret    
c002465f:	90                   	nop

c0024660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024660:	55                   	push   ebp
c0024661:	57                   	push   edi
c0024662:	56                   	push   esi
c0024663:	53                   	push   ebx
c0024664:	83 ec 20             	sub    esp,0x20
c0024667:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002466b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002466f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024673:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024677:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002467b:	6a 01                	push   0x1
c002467d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024684:	50                   	push   eax
c0024685:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002468b:	e8 56 eb ff ff       	call   c00231e6 <IDE::enableIRQs(unsigned char, bool)>
c0024690:	5e                   	pop    esi
c0024691:	58                   	pop    eax
c0024692:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024699:	50                   	push   eax
c002469a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a0:	e8 0f e9 ff ff       	call   c0022fb4 <IDE::prepareInterrupt(unsigned char)>
c00246a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246a8:	e8 63 ff ff ff       	call   c0024610 <ATAPI::readyForCommand()>
c00246ad:	83 c4 10             	add    esp,0x10
c00246b0:	84 c0                	test   al,al
c00246b2:	75 0a                	jne    c00246be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246b4:	bb 01 00 00 00       	mov    ebx,0x1
c00246b9:	e9 57 02 00 00       	jmp    c0024915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246be:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246c4:	c1 e0 04             	shl    eax,0x4
c00246c7:	0f b6 c0             	movzx  eax,al
c00246ca:	50                   	push   eax
c00246cb:	6a 06                	push   0x6
c00246cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d4:	50                   	push   eax
c00246d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246db:	e8 fa e8 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e0:	6a 00                	push   0x0
c00246e2:	6a 01                	push   0x1
c00246e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246eb:	50                   	push   eax
c00246ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f2:	e8 e3 e8 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246f7:	83 c4 20             	add    esp,0x20
c00246fa:	0f b6 c3             	movzx  eax,bl
c00246fd:	0f b6 df             	movzx  ebx,bh
c0024700:	50                   	push   eax
c0024701:	6a 04                	push   0x4
c0024703:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470a:	50                   	push   eax
c002470b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024711:	e8 c4 e8 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024716:	53                   	push   ebx
c0024717:	6a 05                	push   0x5
c0024719:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024720:	50                   	push   eax
c0024721:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024727:	e8 ae e8 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c002472c:	83 c4 20             	add    esp,0x20
c002472f:	68 a0 00 00 00       	push   0xa0
c0024734:	6a 07                	push   0x7
c0024736:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002473d:	50                   	push   eax
c002473e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024744:	e8 91 e8 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024749:	83 c4 0c             	add    esp,0xc
c002474c:	6a 01                	push   0x1
c002474e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024755:	50                   	push   eax
c0024756:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002475c:	e8 25 f4 ff ff       	call   c0023b86 <IDE::polling(unsigned char, unsigned int)>
c0024761:	83 c4 10             	add    esp,0x10
c0024764:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002476a:	84 c0                	test   al,al
c002476c:	74 23                	je     c0024791 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002476e:	0f b6 d8             	movzx  ebx,al
c0024771:	0f b6 d2             	movzx  edx,dl
c0024774:	53                   	push   ebx
c0024775:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002477c:	50                   	push   eax
c002477d:	52                   	push   edx
c002477e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024784:	e8 67 f2 ff ff       	call   c00239f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024789:	83 c4 10             	add    esp,0x10
c002478c:	e9 84 01 00 00       	jmp    c0024915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024791:	0f b6 d2             	movzx  edx,dl
c0024794:	53                   	push   ebx
c0024795:	53                   	push   ebx
c0024796:	52                   	push   edx
c0024797:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002479d:	e8 26 e8 ff ff       	call   c0022fc8 <IDE::getBase(unsigned char)>
c00247a2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247a6:	b9 06 00 00 00       	mov    ecx,0x6
c00247ab:	89 c2                	mov    edx,eax
c00247ad:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247b0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247b4:	83 c4 10             	add    esp,0x10
c00247b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247c4:	85 db                	test   ebx,ebx
c00247c6:	0f 84 ec 00 00 00    	je     c00248b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247cc:	51                   	push   ecx
c00247cd:	51                   	push   ecx
c00247ce:	52                   	push   edx
c00247cf:	50                   	push   eax
c00247d0:	e8 73 e9 ff ff       	call   c0023148 <IDE::waitInterrupt(unsigned char)>
c00247d5:	83 c4 10             	add    esp,0x10
c00247d8:	84 c0                	test   al,al
c00247da:	0f 84 d4 fe ff ff    	je     c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247e0:	56                   	push   esi
c00247e1:	56                   	push   esi
c00247e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e9:	50                   	push   eax
c00247ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f0:	e8 bf e7 ff ff       	call   c0022fb4 <IDE::prepareInterrupt(unsigned char)>
c00247f5:	83 c4 0c             	add    esp,0xc
c00247f8:	6a 04                	push   0x4
c00247fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024801:	50                   	push   eax
c0024802:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024808:	e8 8d e8 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c002480d:	83 c4 0c             	add    esp,0xc
c0024810:	89 c6                	mov    esi,eax
c0024812:	6a 05                	push   0x5
c0024814:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002481b:	50                   	push   eax
c002481c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024822:	e8 73 e8 ff ff       	call   c002309a <IDE::read(unsigned char, unsigned char)>
c0024827:	89 f1                	mov    ecx,esi
c0024829:	0f b6 c0             	movzx  eax,al
c002482c:	0f b6 f1             	movzx  esi,cl
c002482f:	c1 e0 08             	shl    eax,0x8
c0024832:	09 c6                	or     esi,eax
c0024834:	d1 fe                	sar    esi,1
c0024836:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002483a:	83 c4 10             	add    esp,0x10
c002483d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024842:	74 41                	je     c0024885 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024844:	31 c9                	xor    ecx,ecx
c0024846:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002484c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024853:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024857:	75 0a                	jne    c0024863 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024859:	01 c9                	add    ecx,ecx
c002485b:	01 cd                	add    ebp,ecx
c002485d:	4b                   	dec    ebx
c002485e:	e9 54 ff ff ff       	jmp    c00247b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024863:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024868:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002486c:	51                   	push   ecx
c002486d:	51                   	push   ecx
c002486e:	52                   	push   edx
c002486f:	50                   	push   eax
c0024870:	e8 53 e7 ff ff       	call   c0022fc8 <IDE::getBase(unsigned char)>
c0024875:	89 c2                	mov    edx,eax
c0024877:	89 f0                	mov    eax,esi
c0024879:	66 ef                	out    dx,ax
c002487b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002487f:	83 c4 10             	add    esp,0x10
c0024882:	41                   	inc    ecx
c0024883:	eb c1                	jmp    c0024846 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024885:	31 f6                	xor    esi,esi
c0024887:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002488d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024894:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024898:	75 06                	jne    c00248a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002489a:	01 f6                	add    esi,esi
c002489c:	01 f5                	add    ebp,esi
c002489e:	eb bd                	jmp    c002485d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248a0:	51                   	push   ecx
c00248a1:	51                   	push   ecx
c00248a2:	52                   	push   edx
c00248a3:	50                   	push   eax
c00248a4:	e8 1f e7 ff ff       	call   c0022fc8 <IDE::getBase(unsigned char)>
c00248a9:	89 c2                	mov    edx,eax
c00248ab:	66 ed                	in     ax,dx
c00248ad:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248b2:	83 c4 10             	add    esp,0x10
c00248b5:	46                   	inc    esi
c00248b6:	eb cf                	jmp    c0024887 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248b8:	51                   	push   ecx
c00248b9:	51                   	push   ecx
c00248ba:	52                   	push   edx
c00248bb:	50                   	push   eax
c00248bc:	e8 87 e8 ff ff       	call   c0023148 <IDE::waitInterrupt(unsigned char)>
c00248c1:	83 c4 10             	add    esp,0x10
c00248c4:	84 c0                	test   al,al
c00248c6:	0f 84 e8 fd ff ff    	je     c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248cc:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248d1:	52                   	push   edx
c00248d2:	52                   	push   edx
c00248d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248da:	50                   	push   eax
c00248db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248e1:	e8 ce e6 ff ff       	call   c0022fb4 <IDE::prepareInterrupt(unsigned char)>
c00248e6:	83 c4 10             	add    esp,0x10
c00248e9:	50                   	push   eax
c00248ea:	50                   	push   eax
c00248eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248f2:	50                   	push   eax
c00248f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248f9:	e8 ca e6 ff ff       	call   c0022fc8 <IDE::getBase(unsigned char)>
c00248fe:	8d 50 07             	lea    edx,[eax+0x7]
c0024901:	ec                   	in     al,dx
c0024902:	83 c4 10             	add    esp,0x10
c0024905:	a8 88                	test   al,0x88
c0024907:	74 0a                	je     c0024913 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024909:	4b                   	dec    ebx
c002490a:	75 dd                	jne    c00248e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002490c:	bb 02 00 00 00       	mov    ebx,0x2
c0024911:	eb 02                	jmp    c0024915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024913:	31 db                	xor    ebx,ebx
c0024915:	83 c4 1c             	add    esp,0x1c
c0024918:	89 d8                	mov    eax,ebx
c002491a:	5b                   	pop    ebx
c002491b:	5e                   	pop    esi
c002491c:	5f                   	pop    edi
c002491d:	5d                   	pop    ebp
c002491e:	c3                   	ret    
c002491f:	90                   	nop

c0024920 <ATAPI::diskRemoved()>:
c0024920:	83 ec 18             	sub    esp,0x18
c0024923:	68 a9 ce 02 c0       	push   0xc002cea9
c0024928:	e8 23 e6 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c002492d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024931:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024938:	83 c4 1c             	add    esp,0x1c
c002493b:	c3                   	ret    

c002493c <ATAPI::eject()>:
c002493c:	57                   	push   edi
c002493d:	b9 03 00 00 00       	mov    ecx,0x3
c0024942:	53                   	push   ebx
c0024943:	83 ec 14             	sub    esp,0x14
c0024946:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002494a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002494e:	fc                   	cld    
c002494f:	31 c0                	xor    eax,eax
c0024951:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024953:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024958:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002495d:	50                   	push   eax
c002495e:	50                   	push   eax
c002495f:	6a 00                	push   0x0
c0024961:	6a 00                	push   0x0
c0024963:	6a 00                	push   0x0
c0024965:	6a 02                	push   0x2
c0024967:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002496b:	50                   	push   eax
c002496c:	53                   	push   ebx
c002496d:	e8 ee fc ff ff       	call   c0024660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024972:	83 c4 14             	add    esp,0x14
c0024975:	53                   	push   ebx
c0024976:	e8 a5 ff ff ff       	call   c0024920 <ATAPI::diskRemoved()>
c002497b:	83 c4 24             	add    esp,0x24
c002497e:	31 c0                	xor    eax,eax
c0024980:	5b                   	pop    ebx
c0024981:	5f                   	pop    edi
c0024982:	c3                   	ret    
c0024983:	90                   	nop

c0024984 <ATAPI::diskInserted()>:
c0024984:	53                   	push   ebx
c0024985:	83 ec 14             	sub    esp,0x14
c0024988:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002498c:	68 c0 ce 02 c0       	push   0xc002cec0
c0024991:	e8 ba e5 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0024996:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002499d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249a0:	e8 5d fe fe ff       	call   c0014802 <PhysicalDisk::startCache()>
c00249a5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249a9:	83 c4 18             	add    esp,0x18
c00249ac:	5b                   	pop    ebx
c00249ad:	e9 c6 1f ff ff       	jmp    c0016978 <createPartitionsForDisk(PhysicalDisk*)>

c00249b2 <ATAPI::detectMedia()>:
c00249b2:	56                   	push   esi
c00249b3:	53                   	push   ebx
c00249b4:	83 ec 28             	sub    esp,0x28
c00249b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249bb:	6a 0c                	push   0xc
c00249bd:	6a 00                	push   0x0
c00249bf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249c3:	56                   	push   esi
c00249c4:	e8 af bd fd ff       	call   c0000778 <memset>
c00249c9:	58                   	pop    eax
c00249ca:	5a                   	pop    edx
c00249cb:	6a 00                	push   0x0
c00249cd:	6a 00                	push   0x0
c00249cf:	6a 00                	push   0x0
c00249d1:	6a 00                	push   0x0
c00249d3:	56                   	push   esi
c00249d4:	53                   	push   ebx
c00249d5:	e8 86 fc ff ff       	call   c0024660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249da:	83 c4 1c             	add    esp,0x1c
c00249dd:	6a 0c                	push   0xc
c00249df:	6a 00                	push   0x0
c00249e1:	56                   	push   esi
c00249e2:	e8 91 bd fd ff       	call   c0000778 <memset>
c00249e7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249ec:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249f1:	59                   	pop    ecx
c00249f2:	58                   	pop    eax
c00249f3:	6a 01                	push   0x1
c00249f5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249f9:	50                   	push   eax
c00249fa:	6a 00                	push   0x0
c00249fc:	6a 12                	push   0x12
c00249fe:	56                   	push   esi
c00249ff:	53                   	push   ebx
c0024a00:	e8 5b fc ff ff       	call   c0024660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a05:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a09:	83 c4 20             	add    esp,0x20
c0024a0c:	83 e0 7f             	and    eax,0x7f
c0024a0f:	3c 70                	cmp    al,0x70
c0024a11:	74 15                	je     c0024a28 <ATAPI::detectMedia()+0x76>
c0024a13:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a1a:	75 0c                	jne    c0024a28 <ATAPI::detectMedia()+0x76>
c0024a1c:	83 ec 0c             	sub    esp,0xc
c0024a1f:	53                   	push   ebx
c0024a20:	e8 5f ff ff ff       	call   c0024984 <ATAPI::diskInserted()>
c0024a25:	83 c4 10             	add    esp,0x10
c0024a28:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a2c:	83 e0 0f             	and    eax,0xf
c0024a2f:	3c 02                	cmp    al,0x2
c0024a31:	75 1b                	jne    c0024a4e <ATAPI::detectMedia()+0x9c>
c0024a33:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a38:	75 2d                	jne    c0024a67 <ATAPI::detectMedia()+0xb5>
c0024a3a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a41:	74 24                	je     c0024a67 <ATAPI::detectMedia()+0xb5>
c0024a43:	83 ec 0c             	sub    esp,0xc
c0024a46:	53                   	push   ebx
c0024a47:	e8 d4 fe ff ff       	call   c0024920 <ATAPI::diskRemoved()>
c0024a4c:	eb 16                	jmp    c0024a64 <ATAPI::detectMedia()+0xb2>
c0024a4e:	84 c0                	test   al,al
c0024a50:	75 15                	jne    c0024a67 <ATAPI::detectMedia()+0xb5>
c0024a52:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a59:	75 0c                	jne    c0024a67 <ATAPI::detectMedia()+0xb5>
c0024a5b:	83 ec 0c             	sub    esp,0xc
c0024a5e:	53                   	push   ebx
c0024a5f:	e8 20 ff ff ff       	call   c0024984 <ATAPI::diskInserted()>
c0024a64:	83 c4 10             	add    esp,0x10
c0024a67:	83 c4 24             	add    esp,0x24
c0024a6a:	5b                   	pop    ebx
c0024a6b:	5e                   	pop    esi
c0024a6c:	c3                   	ret    
c0024a6d:	90                   	nop

c0024a6e <ATAPI::open(int, int, void*)>:
c0024a6e:	53                   	push   ebx
c0024a6f:	83 ec 08             	sub    esp,0x8
c0024a72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a7e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a84:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a8a:	c1 e0 06             	shl    eax,0x6
c0024a8d:	01 d0                	add    eax,edx
c0024a8f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a96:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a9c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024aa3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024aad:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ab3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024aba:	6a 04                	push   0x4
c0024abc:	6a 0c                	push   0xc
c0024abe:	51                   	push   ecx
c0024abf:	52                   	push   edx
c0024ac0:	e8 15 e5 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac5:	90                   	nop
c0024ac6:	90                   	nop
c0024ac7:	6a 00                	push   0x0
c0024ac9:	6a 0c                	push   0xc
c0024acb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ad2:	50                   	push   eax
c0024ad3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad9:	e8 fc e4 ff ff       	call   c0022fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ade:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024ae5:	83 c4 14             	add    esp,0x14
c0024ae8:	53                   	push   ebx
c0024ae9:	e8 c4 fe ff ff       	call   c00249b2 <ATAPI::detectMedia()>
c0024aee:	31 c0                	xor    eax,eax
c0024af0:	83 c4 18             	add    esp,0x18
c0024af3:	5b                   	pop    ebx
c0024af4:	c3                   	ret    
c0024af5:	90                   	nop

c0024af6 <ATAPI::read(unsigned long long, int, void*)>:
c0024af6:	55                   	push   ebp
c0024af7:	57                   	push   edi
c0024af8:	56                   	push   esi
c0024af9:	53                   	push   ebx
c0024afa:	83 ec 1c             	sub    esp,0x1c
c0024afd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b01:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b05:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b09:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b10:	74 41                	je     c0024b53 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b12:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b16:	b9 03 00 00 00       	mov    ecx,0x3
c0024b1b:	fc                   	cld    
c0024b1c:	31 c0                	xor    eax,eax
c0024b1e:	86 fb                	xchg   bl,bh
c0024b20:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b22:	c1 c3 10             	rol    ebx,0x10
c0024b25:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b2a:	89 e8                	mov    eax,ebp
c0024b2c:	86 fb                	xchg   bl,bh
c0024b2e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b32:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b36:	50                   	push   eax
c0024b37:	50                   	push   eax
c0024b38:	55                   	push   ebp
c0024b39:	c1 e5 0b             	shl    ebp,0xb
c0024b3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b40:	6a 00                	push   0x0
c0024b42:	55                   	push   ebp
c0024b43:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b47:	50                   	push   eax
c0024b48:	56                   	push   esi
c0024b49:	e8 12 fb ff ff       	call   c0024660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b4e:	83 c4 20             	add    esp,0x20
c0024b51:	eb 1a                	jmp    c0024b6d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b53:	83 ec 0c             	sub    esp,0xc
c0024b56:	56                   	push   esi
c0024b57:	e8 56 fe ff ff       	call   c00249b2 <ATAPI::detectMedia()>
c0024b5c:	83 c4 10             	add    esp,0x10
c0024b5f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b66:	75 aa                	jne    c0024b12 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b68:	b8 02 00 00 00       	mov    eax,0x2
c0024b6d:	83 c4 1c             	add    esp,0x1c
c0024b70:	5b                   	pop    ebx
c0024b71:	5e                   	pop    esi
c0024b72:	5f                   	pop    edi
c0024b73:	5d                   	pop    ebp
c0024b74:	c3                   	ret    
c0024b75:	90                   	nop

c0024b76 <SATA::close(int, int, void*)>:
c0024b76:	83 ec 0c             	sub    esp,0xc
c0024b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b7d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b83:	85 c0                	test   eax,eax
c0024b85:	74 0c                	je     c0024b93 <SATA::close(int, int, void*)+0x1d>
c0024b87:	83 ec 0c             	sub    esp,0xc
c0024b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b8c:	50                   	push   eax
c0024b8d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b90:	83 c4 10             	add    esp,0x10
c0024b93:	31 c0                	xor    eax,eax
c0024b95:	83 c4 0c             	add    esp,0xc
c0024b98:	c3                   	ret    
c0024b99:	90                   	nop

c0024b9a <SATA::powerSaving(PowerSavingLevel)>:
c0024b9a:	c3                   	ret    
c0024b9b:	90                   	nop

c0024b9c <SATA::open(int, int, void*)>:
c0024b9c:	56                   	push   esi
c0024b9d:	53                   	push   ebx
c0024b9e:	50                   	push   eax
c0024b9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ba3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ba7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bb1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bb7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bc5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bcf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024bd5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024bdc:	e8 01 b3 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024be1:	89 c6                	mov    esi,eax
c0024be3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024be9:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bef:	e8 ee b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024bf4:	39 c6                	cmp    esi,eax
c0024bf6:	74 10                	je     c0024c08 <SATA::open(int, int, void*)+0x6c>
c0024bf8:	83 ec 0c             	sub    esp,0xc
c0024bfb:	68 e8 cd 02 c0       	push   0xc002cde8
c0024c00:	e8 ec 59 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0024c05:	83 c4 10             	add    esp,0x10
c0024c08:	83 ec 0c             	sub    esp,0xc
c0024c0b:	6a 02                	push   0x2
c0024c0d:	e8 8f cf fe ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c0024c12:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c18:	e8 1f d2 fe ff       	call   c0011e3c <Virt::getAKernelVAS()>
c0024c1d:	6a 03                	push   0x3
c0024c1f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c25:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c2b:	50                   	push   eax
c0024c2c:	e8 47 d7 fe ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c31:	83 c4 14             	add    esp,0x14
c0024c34:	53                   	push   ebx
c0024c35:	e8 c8 fb fe ff       	call   c0014802 <PhysicalDisk::startCache()>
c0024c3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c3d:	e8 36 1d ff ff       	call   c0016978 <createPartitionsForDisk(PhysicalDisk*)>
c0024c42:	83 c4 14             	add    esp,0x14
c0024c45:	31 c0                	xor    eax,eax
c0024c47:	5b                   	pop    ebx
c0024c48:	5e                   	pop    esi
c0024c49:	c3                   	ret    

c0024c4a <SATA::SATA()>:
c0024c4a:	83 ec 0c             	sub    esp,0xc
c0024c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c51:	83 ec 04             	sub    esp,0x4
c0024c54:	68 00 02 00 00       	push   0x200
c0024c59:	68 fc cd 02 c0       	push   0xc002cdfc
c0024c5e:	50                   	push   eax
c0024c5f:	e8 36 fb fe ff       	call   c001479a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c64:	83 c4 10             	add    esp,0x10
c0024c67:	ba 6c ce 02 c0       	mov    edx,0xc002ce6c
c0024c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c70:	89 10                	mov    DWORD PTR [eax],edx
c0024c72:	90                   	nop
c0024c73:	83 c4 0c             	add    esp,0xc
c0024c76:	c3                   	ret    
c0024c77:	90                   	nop

c0024c78 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c78:	55                   	push   ebp
c0024c79:	57                   	push   edi
c0024c7a:	56                   	push   esi
c0024c7b:	53                   	push   ebx
c0024c7c:	83 ec 2c             	sub    esp,0x2c
c0024c7f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c83:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c8b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c8f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c93:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c9c:	7e 10                	jle    c0024cae <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c9e:	83 ec 0c             	sub    esp,0xc
c0024ca1:	68 0c ce 02 c0       	push   0xc002ce0c
c0024ca6:	e8 46 59 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0024cab:	83 c4 10             	add    esp,0x10
c0024cae:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cb4:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cc4:	89 f0                	mov    eax,esi
c0024cc6:	c1 e0 07             	shl    eax,0x7
c0024cc9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024ccd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024cd7:	53                   	push   ebx
c0024cd8:	8d 46 02             	lea    eax,[esi+0x2]
c0024cdb:	53                   	push   ebx
c0024cdc:	c1 e0 07             	shl    eax,0x7
c0024cdf:	bb 01 00 00 00       	mov    ebx,0x1
c0024ce4:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024ce8:	50                   	push   eax
c0024ce9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cef:	e8 aa ef ff ff       	call   c0023c9e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cf4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024cf8:	83 c4 10             	add    esp,0x10
c0024cfb:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d00:	0f 84 ce 01 00 00    	je     c0024ed4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d0a:	c1 e0 09             	shl    eax,0x9
c0024d0d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d16:	74 17                	je     c0024d2f <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d18:	51                   	push   ecx
c0024d19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d1d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d21:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d27:	e8 18 ba fd ff       	call   c0000744 <memcpy>
c0024d2c:	83 c4 10             	add    esp,0x10
c0024d2f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d35:	8d 46 02             	lea    eax,[esi+0x2]
c0024d38:	c1 e0 07             	shl    eax,0x7
c0024d3b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d41:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d47:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d4d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d51:	c1 e1 05             	shl    ecx,0x5
c0024d54:	01 c8                	add    eax,ecx
c0024d56:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d5a:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d5c:	83 e1 01             	and    ecx,0x1
c0024d5f:	83 e3 bf             	and    ebx,0xffffffbf
c0024d62:	c1 e1 06             	shl    ecx,0x6
c0024d65:	09 d9                	or     ecx,ebx
c0024d67:	88 08                	mov    BYTE PTR [eax],cl
c0024d69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d6b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d71:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d77:	89 08                	mov    DWORD PTR [eax],ecx
c0024d79:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d7f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d85:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d8b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d8e:	52                   	push   edx
c0024d8f:	68 90 00 00 00       	push   0x90
c0024d94:	6a 00                	push   0x0
c0024d96:	53                   	push   ebx
c0024d97:	e8 dc b9 fd ff       	call   c0000778 <memset>
c0024d9c:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024da2:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024da6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024dac:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024db0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024db4:	83 c4 10             	add    esp,0x10
c0024db7:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dba:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dc0:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dc6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dcb:	09 c8                	or     eax,ecx
c0024dcd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024dd3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dd6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ddd:	66 25 00 7f          	and    ax,0x7f00
c0024de1:	66 0d 27 80          	or     ax,0x8027
c0024de5:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024dea:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ded:	19 c0                	sbb    eax,eax
c0024def:	83 e0 f0             	and    eax,0xfffffff0
c0024df2:	83 c0 35             	add    eax,0x35
c0024df5:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024df8:	89 f8                	mov    eax,edi
c0024dfa:	c1 e8 10             	shr    eax,0x10
c0024dfd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e00:	89 f8                	mov    eax,edi
c0024e02:	c1 e8 18             	shr    eax,0x18
c0024e05:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e08:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e0c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e13:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e16:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e1a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e1e:	89 f3                	mov    ebx,esi
c0024e20:	31 c0                	xor    eax,eax
c0024e22:	c1 e3 07             	shl    ebx,0x7
c0024e25:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e29:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e2f:	80 e1 88             	and    cl,0x88
c0024e32:	74 0a                	je     c0024e3e <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e34:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e39:	74 0a                	je     c0024e45 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e3b:	40                   	inc    eax
c0024e3c:	eb eb                	jmp    c0024e29 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e3e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e43:	75 0a                	jne    c0024e4f <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e45:	83 ec 0c             	sub    esp,0xc
c0024e48:	68 45 ce 02 c0       	push   0xc002ce45
c0024e4d:	eb 56                	jmp    c0024ea5 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e4f:	b8 01 00 00 00       	mov    eax,0x1
c0024e54:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e58:	c1 e6 07             	shl    esi,0x7
c0024e5b:	d3 e0                	shl    eax,cl
c0024e5d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e61:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e67:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e6d:	85 c8                	test   eax,ecx
c0024e6f:	74 20                	je     c0024e91 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e71:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e77:	0f ba e1 1e          	bt     ecx,0x1e
c0024e7b:	73 ea                	jae    c0024e67 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e7d:	83 ec 0c             	sub    esp,0xc
c0024e80:	31 db                	xor    ebx,ebx
c0024e82:	68 53 ce 02 c0       	push   0xc002ce53
c0024e87:	e8 65 57 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0024e8c:	83 c4 10             	add    esp,0x10
c0024e8f:	eb 43                	jmp    c0024ed4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e91:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e97:	0f ba e0 1e          	bt     eax,0x1e
c0024e9b:	73 17                	jae    c0024eb4 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e9d:	83 ec 0c             	sub    esp,0xc
c0024ea0:	68 53 ce 02 c0       	push   0xc002ce53
c0024ea5:	e8 47 57 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0024eaa:	bb 01 00 00 00       	mov    ebx,0x1
c0024eaf:	83 c4 10             	add    esp,0x10
c0024eb2:	eb 20                	jmp    c0024ed4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024eb4:	31 db                	xor    ebx,ebx
c0024eb6:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ebb:	75 17                	jne    c0024ed4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ebd:	50                   	push   eax
c0024ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ec2:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ec8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024ecc:	e8 73 b8 fd ff       	call   c0000744 <memcpy>
c0024ed1:	83 c4 10             	add    esp,0x10
c0024ed4:	83 c4 2c             	add    esp,0x2c
c0024ed7:	89 d8                	mov    eax,ebx
c0024ed9:	5b                   	pop    ebx
c0024eda:	5e                   	pop    esi
c0024edb:	5f                   	pop    edi
c0024edc:	5d                   	pop    ebp
c0024edd:	c3                   	ret    

c0024ede <SATA::read(unsigned long long, int, void*)>:
c0024ede:	57                   	push   edi
c0024edf:	b8 04 00 00 00       	mov    eax,0x4
c0024ee4:	56                   	push   esi
c0024ee5:	53                   	push   ebx
c0024ee6:	83 ec 10             	sub    esp,0x10
c0024ee9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024eed:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ef1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ef4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ef8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024efc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f02:	77 3b                	ja     c0024f3f <SATA::read(unsigned long long, int, void*)+0x61>
c0024f04:	b8 06 00 00 00       	mov    eax,0x6
c0024f09:	85 d2                	test   edx,edx
c0024f0b:	74 32                	je     c0024f3f <SATA::read(unsigned long long, int, void*)+0x61>
c0024f0d:	50                   	push   eax
c0024f0e:	50                   	push   eax
c0024f0f:	6a 00                	push   0x0
c0024f11:	52                   	push   edx
c0024f12:	53                   	push   ebx
c0024f13:	57                   	push   edi
c0024f14:	56                   	push   esi
c0024f15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f19:	e8 5a fd ff ff       	call   c0024c78 <SATA::access(unsigned long long, int, void*, bool)>
c0024f1e:	83 c4 20             	add    esp,0x20
c0024f21:	85 c0                	test   eax,eax
c0024f23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f27:	75 11                	jne    c0024f3a <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f29:	01 1d 28 27 03 c0    	add    DWORD PTR ds:0xc0032728,ebx
c0024f2f:	e8 c2 ba fe ff       	call   c00109f6 <VgaText::updateDiskUsage()>
c0024f34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f38:	eb 05                	jmp    c0024f3f <SATA::read(unsigned long long, int, void*)+0x61>
c0024f3a:	b8 01 00 00 00       	mov    eax,0x1
c0024f3f:	83 c4 10             	add    esp,0x10
c0024f42:	5b                   	pop    ebx
c0024f43:	5e                   	pop    esi
c0024f44:	5f                   	pop    edi
c0024f45:	c3                   	ret    

c0024f46 <SATA::write(unsigned long long, int, void*)>:
c0024f46:	55                   	push   ebp
c0024f47:	b8 04 00 00 00       	mov    eax,0x4
c0024f4c:	57                   	push   edi
c0024f4d:	56                   	push   esi
c0024f4e:	53                   	push   ebx
c0024f4f:	83 ec 1c             	sub    esp,0x1c
c0024f52:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f56:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f5a:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f5d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f61:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f65:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f6b:	77 56                	ja     c0024fc3 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f6d:	b8 06 00 00 00       	mov    eax,0x6
c0024f72:	85 ff                	test   edi,edi
c0024f74:	74 4d                	je     c0024fc3 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f76:	89 ee                	mov    esi,ebp
c0024f78:	c1 e6 09             	shl    esi,0x9
c0024f7b:	01 fe                	add    esi,edi
c0024f7d:	89 c8                	mov    eax,ecx
c0024f7f:	89 da                	mov    edx,ebx
c0024f81:	83 c0 01             	add    eax,0x1
c0024f84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f88:	83 d2 00             	adc    edx,0x0
c0024f8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f8f:	50                   	push   eax
c0024f90:	50                   	push   eax
c0024f91:	6a 01                	push   0x1
c0024f93:	57                   	push   edi
c0024f94:	81 c7 00 02 00 00    	add    edi,0x200
c0024f9a:	6a 01                	push   0x1
c0024f9c:	53                   	push   ebx
c0024f9d:	51                   	push   ecx
c0024f9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fa2:	e8 d1 fc ff ff       	call   c0024c78 <SATA::access(unsigned long long, int, void*, bool)>
c0024fa7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024faf:	83 c4 20             	add    esp,0x20
c0024fb2:	39 f7                	cmp    edi,esi
c0024fb4:	75 c7                	jne    c0024f7d <SATA::write(unsigned long long, int, void*)+0x37>
c0024fb6:	01 2d 24 27 03 c0    	add    DWORD PTR ds:0xc0032724,ebp
c0024fbc:	e8 35 ba fe ff       	call   c00109f6 <VgaText::updateDiskUsage()>
c0024fc1:	31 c0                	xor    eax,eax
c0024fc3:	83 c4 1c             	add    esp,0x1c
c0024fc6:	5b                   	pop    ebx
c0024fc7:	5e                   	pop    esi
c0024fc8:	5f                   	pop    edi
c0024fc9:	5d                   	pop    ebp
c0024fca:	c3                   	ret    
c0024fcb:	90                   	nop

c0024fcc <SATAPI::write(unsigned long long, int, void*)>:
c0024fcc:	b8 03 00 00 00       	mov    eax,0x3
c0024fd1:	c3                   	ret    

c0024fd2 <SATAPI::close(int, int, void*)>:
c0024fd2:	83 ec 0c             	sub    esp,0xc
c0024fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fdf:	85 c0                	test   eax,eax
c0024fe1:	74 0c                	je     c0024fef <SATAPI::close(int, int, void*)+0x1d>
c0024fe3:	83 ec 0c             	sub    esp,0xc
c0024fe6:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fe8:	50                   	push   eax
c0024fe9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fec:	83 c4 10             	add    esp,0x10
c0024fef:	31 c0                	xor    eax,eax
c0024ff1:	83 c4 0c             	add    esp,0xc
c0024ff4:	c3                   	ret    
c0024ff5:	90                   	nop

c0024ff6 <SATAPI::SATAPI()>:
c0024ff6:	83 ec 0c             	sub    esp,0xc
c0024ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ffd:	83 ec 04             	sub    esp,0x4
c0025000:	68 00 08 00 00       	push   0x800
c0025005:	68 9c ce 02 c0       	push   0xc002ce9c
c002500a:	50                   	push   eax
c002500b:	e8 8a f7 fe ff       	call   c001479a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025010:	83 c4 10             	add    esp,0x10
c0025013:	ba 48 cf 02 c0       	mov    edx,0xc002cf48
c0025018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002501c:	89 10                	mov    DWORD PTR [eax],edx
c002501e:	90                   	nop
c002501f:	83 c4 0c             	add    esp,0xc
c0025022:	c3                   	ret    
c0025023:	90                   	nop

c0025024 <SATAPI::diskRemoved()>:
c0025024:	83 ec 18             	sub    esp,0x18
c0025027:	68 a8 ce 02 c0       	push   0xc002cea8
c002502c:	e8 1f df fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0025031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025035:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002503c:	83 c4 1c             	add    esp,0x1c
c002503f:	c3                   	ret    

c0025040 <SATAPI::diskInserted()>:
c0025040:	53                   	push   ebx
c0025041:	83 ec 14             	sub    esp,0x14
c0025044:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025048:	68 bf ce 02 c0       	push   0xc002cebf
c002504d:	e8 fe de fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0025052:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025059:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002505c:	e8 a1 f7 fe ff       	call   c0014802 <PhysicalDisk::startCache()>
c0025061:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025065:	83 c4 18             	add    esp,0x18
c0025068:	5b                   	pop    ebx
c0025069:	e9 0a 19 ff ff       	jmp    c0016978 <createPartitionsForDisk(PhysicalDisk*)>

c002506e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002506e:	55                   	push   ebp
c002506f:	57                   	push   edi
c0025070:	56                   	push   esi
c0025071:	53                   	push   ebx
c0025072:	83 ec 24             	sub    esp,0x24
c0025075:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025079:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002507d:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025083:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025087:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002508b:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025091:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025094:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002509a:	c1 e3 07             	shl    ebx,0x7
c002509d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250a1:	89 f8                	mov    eax,edi
c00250a3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250a7:	c1 e0 07             	shl    eax,0x7
c00250aa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250b2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250bc:	53                   	push   ebx
c00250bd:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250c3:	e8 d6 eb ff ff       	call   c0023c9e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250cc:	83 c4 10             	add    esp,0x10
c00250cf:	b8 01 00 00 00       	mov    eax,0x1
c00250d4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250d9:	0f 84 8a 01 00 00    	je     c0025269 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250df:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250e7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250ed:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00250f7:	c1 e1 05             	shl    ecx,0x5
c00250fa:	01 c8                	add    eax,ecx
c00250fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250fe:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025104:	81 c9 25 00 01 00    	or     ecx,0x10025
c002510a:	89 08                	mov    DWORD PTR [eax],ecx
c002510c:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025112:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025118:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002511e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025121:	52                   	push   edx
c0025122:	68 90 00 00 00       	push   0x90
c0025127:	6a 00                	push   0x0
c0025129:	53                   	push   ebx
c002512a:	e8 49 b6 fd ff       	call   c0000778 <memset>
c002512f:	83 c4 0c             	add    esp,0xc
c0025132:	8d 43 40             	lea    eax,[ebx+0x40]
c0025135:	6a 0c                	push   0xc
c0025137:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002513b:	50                   	push   eax
c002513c:	e8 03 b6 fd ff       	call   c0000744 <memcpy>
c0025141:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025147:	89 ea                	mov    edx,ebp
c0025149:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002514f:	c1 ea 18             	shr    edx,0x18
c0025152:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025156:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025159:	8d 48 ff             	lea    ecx,[eax-0x1]
c002515c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025160:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025166:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002516c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025171:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025175:	09 c8                	or     eax,ecx
c0025177:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002517b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025181:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025184:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002518b:	66 25 00 7f          	and    ax,0x7f00
c002518f:	66 0d 27 80          	or     ax,0x8027
c0025193:	66 89 03             	mov    WORD PTR [ebx],ax
c0025196:	89 e8                	mov    eax,ebp
c0025198:	c1 e8 10             	shr    eax,0x10
c002519b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002519e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251a2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251a9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251b0:	83 c4 10             	add    esp,0x10
c00251b3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251bb:	31 c0                	xor    eax,eax
c00251bd:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251c3:	80 e1 88             	and    cl,0x88
c00251c6:	74 0a                	je     c00251d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251cd:	74 0a                	je     c00251d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251cf:	40                   	inc    eax
c00251d0:	eb eb                	jmp    c00251bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251d2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251d7:	75 0f                	jne    c00251e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251d9:	83 ec 0c             	sub    esp,0xc
c00251dc:	68 45 ce 02 c0       	push   0xc002ce45
c00251e1:	e8 0b 54 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c00251e6:	eb 3a                	jmp    c0025222 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251e8:	b8 01 00 00 00       	mov    eax,0x1
c00251ed:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251f1:	c1 e7 07             	shl    edi,0x7
c00251f4:	d3 e0                	shl    eax,cl
c00251f6:	03 3c 24             	add    edi,DWORD PTR [esp]
c00251f9:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00251ff:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025205:	85 d0                	test   eax,edx
c0025207:	74 23                	je     c002522c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025209:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002520f:	0f ba e2 1e          	bt     edx,0x1e
c0025213:	73 ea                	jae    c00251ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025215:	83 ec 0c             	sub    esp,0xc
c0025218:	68 d7 ce 02 c0       	push   0xc002ced7
c002521d:	e8 2e dd fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0025222:	83 c4 10             	add    esp,0x10
c0025225:	b8 01 00 00 00       	mov    eax,0x1
c002522a:	eb 3d                	jmp    c0025269 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002522c:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025232:	0f ba e0 1e          	bt     eax,0x1e
c0025236:	73 0a                	jae    c0025242 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025238:	83 ec 0c             	sub    esp,0xc
c002523b:	68 ea ce 02 c0       	push   0xc002ceea
c0025240:	eb db                	jmp    c002521d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025242:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025247:	74 1e                	je     c0025267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025249:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002524e:	74 17                	je     c0025267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025250:	50                   	push   eax
c0025251:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025255:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c002525b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002525f:	e8 e0 b4 fd ff       	call   c0000744 <memcpy>
c0025264:	83 c4 10             	add    esp,0x10
c0025267:	31 c0                	xor    eax,eax
c0025269:	83 c4 1c             	add    esp,0x1c
c002526c:	5b                   	pop    ebx
c002526d:	5e                   	pop    esi
c002526e:	5f                   	pop    edi
c002526f:	5d                   	pop    ebp
c0025270:	c3                   	ret    
c0025271:	90                   	nop

c0025272 <SATAPI::eject()>:
c0025272:	57                   	push   edi
c0025273:	b9 03 00 00 00       	mov    ecx,0x3
c0025278:	53                   	push   ebx
c0025279:	83 ec 14             	sub    esp,0x14
c002527c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025280:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025284:	fc                   	cld    
c0025285:	31 c0                	xor    eax,eax
c0025287:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025289:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002528e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025293:	50                   	push   eax
c0025294:	6a 00                	push   0x0
c0025296:	6a 00                	push   0x0
c0025298:	6a 00                	push   0x0
c002529a:	6a 00                	push   0x0
c002529c:	6a 02                	push   0x2
c002529e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252a2:	50                   	push   eax
c00252a3:	53                   	push   ebx
c00252a4:	e8 c5 fd ff ff       	call   c002506e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252a9:	83 c4 14             	add    esp,0x14
c00252ac:	53                   	push   ebx
c00252ad:	e8 72 fd ff ff       	call   c0025024 <SATAPI::diskRemoved()>
c00252b2:	83 c4 24             	add    esp,0x24
c00252b5:	31 c0                	xor    eax,eax
c00252b7:	5b                   	pop    ebx
c00252b8:	5f                   	pop    edi
c00252b9:	c3                   	ret    

c00252ba <SATAPI::detectMedia()>:
c00252ba:	56                   	push   esi
c00252bb:	53                   	push   ebx
c00252bc:	83 ec 28             	sub    esp,0x28
c00252bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252c3:	6a 0c                	push   0xc
c00252c5:	6a 00                	push   0x0
c00252c7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252cb:	56                   	push   esi
c00252cc:	e8 a7 b4 fd ff       	call   c0000778 <memset>
c00252d1:	83 c4 0c             	add    esp,0xc
c00252d4:	6a 00                	push   0x0
c00252d6:	6a 00                	push   0x0
c00252d8:	6a 00                	push   0x0
c00252da:	6a 00                	push   0x0
c00252dc:	6a 00                	push   0x0
c00252de:	56                   	push   esi
c00252df:	53                   	push   ebx
c00252e0:	e8 89 fd ff ff       	call   c002506e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252e5:	83 c4 1c             	add    esp,0x1c
c00252e8:	6a 0c                	push   0xc
c00252ea:	6a 00                	push   0x0
c00252ec:	56                   	push   esi
c00252ed:	e8 86 b4 fd ff       	call   c0000778 <memset>
c00252f2:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00252f7:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252fc:	83 c4 0c             	add    esp,0xc
c00252ff:	6a 01                	push   0x1
c0025301:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025305:	50                   	push   eax
c0025306:	6a 00                	push   0x0
c0025308:	6a 00                	push   0x0
c002530a:	6a 12                	push   0x12
c002530c:	56                   	push   esi
c002530d:	53                   	push   ebx
c002530e:	e8 5b fd ff ff       	call   c002506e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025313:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025317:	83 c4 20             	add    esp,0x20
c002531a:	83 e0 7f             	and    eax,0x7f
c002531d:	3c 70                	cmp    al,0x70
c002531f:	74 15                	je     c0025336 <SATAPI::detectMedia()+0x7c>
c0025321:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025328:	75 0c                	jne    c0025336 <SATAPI::detectMedia()+0x7c>
c002532a:	83 ec 0c             	sub    esp,0xc
c002532d:	53                   	push   ebx
c002532e:	e8 0d fd ff ff       	call   c0025040 <SATAPI::diskInserted()>
c0025333:	83 c4 10             	add    esp,0x10
c0025336:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002533a:	83 e0 0f             	and    eax,0xf
c002533d:	3c 02                	cmp    al,0x2
c002533f:	75 1b                	jne    c002535c <SATAPI::detectMedia()+0xa2>
c0025341:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025346:	75 2d                	jne    c0025375 <SATAPI::detectMedia()+0xbb>
c0025348:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002534f:	74 24                	je     c0025375 <SATAPI::detectMedia()+0xbb>
c0025351:	83 ec 0c             	sub    esp,0xc
c0025354:	53                   	push   ebx
c0025355:	e8 ca fc ff ff       	call   c0025024 <SATAPI::diskRemoved()>
c002535a:	eb 16                	jmp    c0025372 <SATAPI::detectMedia()+0xb8>
c002535c:	84 c0                	test   al,al
c002535e:	75 15                	jne    c0025375 <SATAPI::detectMedia()+0xbb>
c0025360:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025367:	75 0c                	jne    c0025375 <SATAPI::detectMedia()+0xbb>
c0025369:	83 ec 0c             	sub    esp,0xc
c002536c:	53                   	push   ebx
c002536d:	e8 ce fc ff ff       	call   c0025040 <SATAPI::diskInserted()>
c0025372:	83 c4 10             	add    esp,0x10
c0025375:	83 c4 24             	add    esp,0x24
c0025378:	5b                   	pop    ebx
c0025379:	5e                   	pop    esi
c002537a:	c3                   	ret    
c002537b:	90                   	nop

c002537c <SATAPI::open(int, int, void*)>:
c002537c:	56                   	push   esi
c002537d:	53                   	push   ebx
c002537e:	50                   	push   eax
c002537f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025383:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025387:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025391:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025397:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253a5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253af:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253b5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253bc:	e8 21 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253c1:	89 c6                	mov    esi,eax
c00253c3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253c9:	81 c6 00 10 00 00    	add    esi,0x1000
c00253cf:	e8 0e ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253d4:	39 c6                	cmp    esi,eax
c00253d6:	74 10                	je     c00253e8 <SATAPI::open(int, int, void*)+0x6c>
c00253d8:	83 ec 0c             	sub    esp,0xc
c00253db:	68 ff ce 02 c0       	push   0xc002ceff
c00253e0:	e8 0c 52 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c00253e5:	83 c4 10             	add    esp,0x10
c00253e8:	83 ec 0c             	sub    esp,0xc
c00253eb:	6a 02                	push   0x2
c00253ed:	e8 af c7 fe ff       	call   c0011ba1 <Virt::allocateKernelVirtualPages(int)>
c00253f2:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253f8:	e8 3f ca fe ff       	call   c0011e3c <Virt::getAKernelVAS()>
c00253fd:	6a 03                	push   0x3
c00253ff:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025405:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002540b:	50                   	push   eax
c002540c:	e8 67 cf fe ff       	call   c0012378 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025411:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025418:	83 c4 14             	add    esp,0x14
c002541b:	53                   	push   ebx
c002541c:	e8 99 fe ff ff       	call   c00252ba <SATAPI::detectMedia()>
c0025421:	83 c4 14             	add    esp,0x14
c0025424:	31 c0                	xor    eax,eax
c0025426:	5b                   	pop    ebx
c0025427:	5e                   	pop    esi
c0025428:	c3                   	ret    
c0025429:	90                   	nop

c002542a <SATAPI::read(unsigned long long, int, void*)>:
c002542a:	55                   	push   ebp
c002542b:	57                   	push   edi
c002542c:	56                   	push   esi
c002542d:	53                   	push   ebx
c002542e:	83 ec 1c             	sub    esp,0x1c
c0025431:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025435:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025439:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002543d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025444:	74 19                	je     c002545f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025446:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002544b:	7e 2e                	jle    c002547b <SATAPI::read(unsigned long long, int, void*)+0x51>
c002544d:	83 ec 0c             	sub    esp,0xc
c0025450:	68 15 cf 02 c0       	push   0xc002cf15
c0025455:	e8 97 51 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c002545a:	83 c4 10             	add    esp,0x10
c002545d:	eb 1c                	jmp    c002547b <SATAPI::read(unsigned long long, int, void*)+0x51>
c002545f:	83 ec 0c             	sub    esp,0xc
c0025462:	55                   	push   ebp
c0025463:	e8 52 fe ff ff       	call   c00252ba <SATAPI::detectMedia()>
c0025468:	83 c4 10             	add    esp,0x10
c002546b:	b8 02 00 00 00       	mov    eax,0x2
c0025470:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025477:	75 cd                	jne    c0025446 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025479:	eb 49                	jmp    c00254c4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002547b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002547f:	b9 03 00 00 00       	mov    ecx,0x3
c0025484:	fc                   	cld    
c0025485:	31 c0                	xor    eax,eax
c0025487:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025489:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002548e:	89 d8                	mov    eax,ebx
c0025490:	86 e0                	xchg   al,ah
c0025492:	c1 c0 10             	rol    eax,0x10
c0025495:	86 e0                	xchg   al,ah
c0025497:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002549b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002549f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254a3:	50                   	push   eax
c00254a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254ac:	56                   	push   esi
c00254ad:	53                   	push   ebx
c00254ae:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254b2:	c1 e0 0b             	shl    eax,0xb
c00254b5:	50                   	push   eax
c00254b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254ba:	50                   	push   eax
c00254bb:	55                   	push   ebp
c00254bc:	e8 ad fb ff ff       	call   c002506e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254c1:	83 c4 20             	add    esp,0x20
c00254c4:	83 c4 1c             	add    esp,0x1c
c00254c7:	5b                   	pop    ebx
c00254c8:	5e                   	pop    esi
c00254c9:	5f                   	pop    edi
c00254ca:	5d                   	pop    ebp
c00254cb:	c3                   	ret    

c00254cc <AVX::open(int, int, void*)>:
c00254cc:	83 ec 0c             	sub    esp,0xc
c00254cf:	e8 44 11 00 00       	call   c0026618 <avxInit>
c00254d4:	b8 00 00 00 00       	mov    eax,0x0
c00254d9:	83 c4 0c             	add    esp,0xc
c00254dc:	c3                   	ret    
c00254dd:	90                   	nop

c00254de <AVX::close(int, int, void*)>:
c00254de:	83 ec 0c             	sub    esp,0xc
c00254e1:	e8 33 11 00 00       	call   c0026619 <avxClose>
c00254e6:	b8 00 00 00 00       	mov    eax,0x0
c00254eb:	83 c4 0c             	add    esp,0xc
c00254ee:	c3                   	ret    
c00254ef:	90                   	nop

c00254f0 <AVX::available()>:
c00254f0:	83 ec 0c             	sub    esp,0xc
c00254f3:	e8 18 11 00 00       	call   c0026610 <avxDetect>
c00254f8:	85 c0                	test   eax,eax
c00254fa:	0f 95 c0             	setne  al
c00254fd:	83 c4 0c             	add    esp,0xc
c0025500:	c3                   	ret    
c0025501:	90                   	nop

c0025502 <AVX::save(void*)>:
c0025502:	83 ec 0c             	sub    esp,0xc
c0025505:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025509:	83 ec 0c             	sub    esp,0xc
c002550c:	50                   	push   eax
c002550d:	e8 04 11 00 00       	call   c0026616 <avxSave>
c0025512:	83 c4 10             	add    esp,0x10
c0025515:	90                   	nop
c0025516:	83 c4 0c             	add    esp,0xc
c0025519:	c3                   	ret    

c002551a <AVX::load(void*)>:
c002551a:	83 ec 0c             	sub    esp,0xc
c002551d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025521:	83 ec 0c             	sub    esp,0xc
c0025524:	50                   	push   eax
c0025525:	e8 ed 10 00 00       	call   c0026617 <avxLoad>
c002552a:	83 c4 10             	add    esp,0x10
c002552d:	90                   	nop
c002552e:	83 c4 0c             	add    esp,0xc
c0025531:	c3                   	ret    

c0025532 <AVX::AVX()>:
c0025532:	83 ec 0c             	sub    esp,0xc
c0025535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025539:	83 ec 08             	sub    esp,0x8
c002553c:	68 78 cf 02 c0       	push   0xc002cf78
c0025541:	50                   	push   eax
c0025542:	e8 31 f3 fe ff       	call   c0014878 <FPU::FPU(char const*)>
c0025547:	83 c4 10             	add    esp,0x10
c002554a:	ba 88 cf 02 c0       	mov    edx,0xc002cf88
c002554f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025553:	89 10                	mov    DWORD PTR [eax],edx
c0025555:	90                   	nop
c0025556:	83 c4 0c             	add    esp,0xc
c0025559:	c3                   	ret    

c002555a <MMX::available()>:
c002555a:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c002555f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025565:	83 e0 20             	and    eax,0x20
c0025568:	84 c0                	test   al,al
c002556a:	0f 95 c0             	setne  al
c002556d:	c3                   	ret    

c002556e <MMX::open(int, int, void*)>:
c002556e:	83 ec 0c             	sub    esp,0xc
c0025571:	e8 26 11 00 00       	call   c002669c <x87Init>
c0025576:	b8 00 00 00 00       	mov    eax,0x0
c002557b:	83 c4 0c             	add    esp,0xc
c002557e:	c3                   	ret    
c002557f:	90                   	nop

c0025580 <MMX::close(int, int, void*)>:
c0025580:	83 ec 0c             	sub    esp,0xc
c0025583:	e8 2e 11 00 00       	call   c00266b6 <x87Close>
c0025588:	b8 00 00 00 00       	mov    eax,0x0
c002558d:	83 c4 0c             	add    esp,0xc
c0025590:	c3                   	ret    
c0025591:	90                   	nop

c0025592 <MMX::save(void*)>:
c0025592:	83 ec 0c             	sub    esp,0xc
c0025595:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025599:	83 ec 0c             	sub    esp,0xc
c002559c:	50                   	push   eax
c002559d:	e8 ef 10 00 00       	call   c0026691 <x87Save>
c00255a2:	83 c4 10             	add    esp,0x10
c00255a5:	90                   	nop
c00255a6:	83 c4 0c             	add    esp,0xc
c00255a9:	c3                   	ret    

c00255aa <MMX::load(void*)>:
c00255aa:	83 ec 0c             	sub    esp,0xc
c00255ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255b1:	83 ec 0c             	sub    esp,0xc
c00255b4:	50                   	push   eax
c00255b5:	e8 dd 10 00 00       	call   c0026697 <x87Load>
c00255ba:	83 c4 10             	add    esp,0x10
c00255bd:	90                   	nop
c00255be:	83 c4 0c             	add    esp,0xc
c00255c1:	c3                   	ret    

c00255c2 <MMX::MMX()>:
c00255c2:	83 ec 0c             	sub    esp,0xc
c00255c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c9:	83 ec 08             	sub    esp,0x8
c00255cc:	68 b8 cf 02 c0       	push   0xc002cfb8
c00255d1:	50                   	push   eax
c00255d2:	e8 a1 f2 fe ff       	call   c0014878 <FPU::FPU(char const*)>
c00255d7:	83 c4 10             	add    esp,0x10
c00255da:	ba c8 cf 02 c0       	mov    edx,0xc002cfc8
c00255df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e3:	89 10                	mov    DWORD PTR [eax],edx
c00255e5:	90                   	nop
c00255e6:	83 c4 0c             	add    esp,0xc
c00255e9:	c3                   	ret    

c00255ea <SSE::open(int, int, void*)>:
c00255ea:	83 ec 0c             	sub    esp,0xc
c00255ed:	e8 62 10 00 00       	call   c0026654 <sseInit>
c00255f2:	b8 00 00 00 00       	mov    eax,0x0
c00255f7:	83 c4 0c             	add    esp,0xc
c00255fa:	c3                   	ret    
c00255fb:	90                   	nop

c00255fc <SSE::close(int, int, void*)>:
c00255fc:	83 ec 0c             	sub    esp,0xc
c00255ff:	e8 60 10 00 00       	call   c0026664 <sseClose>
c0025604:	b8 00 00 00 00       	mov    eax,0x0
c0025609:	83 c4 0c             	add    esp,0xc
c002560c:	c3                   	ret    
c002560d:	90                   	nop

c002560e <SSE::available()>:
c002560e:	83 ec 1c             	sub    esp,0x1c
c0025611:	e8 1a 10 00 00       	call   c0026630 <absolutelyNoChanceInHell>
c0025616:	85 c0                	test   eax,eax
c0025618:	0f 95 c0             	setne  al
c002561b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002561f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025623:	83 c4 1c             	add    esp,0x1c
c0025626:	c3                   	ret    
c0025627:	90                   	nop

c0025628 <SSE::save(void*)>:
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002562f:	83 ec 0c             	sub    esp,0xc
c0025632:	50                   	push   eax
c0025633:	e8 10 10 00 00       	call   c0026648 <sseSave>
c0025638:	83 c4 10             	add    esp,0x10
c002563b:	90                   	nop
c002563c:	83 c4 0c             	add    esp,0xc
c002563f:	c3                   	ret    

c0025640 <SSE::load(void*)>:
c0025640:	83 ec 0c             	sub    esp,0xc
c0025643:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025647:	83 ec 0c             	sub    esp,0xc
c002564a:	50                   	push   eax
c002564b:	e8 fe 0f 00 00       	call   c002664e <sseLoad>
c0025650:	83 c4 10             	add    esp,0x10
c0025653:	90                   	nop
c0025654:	83 c4 0c             	add    esp,0xc
c0025657:	c3                   	ret    

c0025658 <SSE::SSE()>:
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002565f:	83 ec 08             	sub    esp,0x8
c0025662:	68 f8 cf 02 c0       	push   0xc002cff8
c0025667:	50                   	push   eax
c0025668:	e8 0b f2 fe ff       	call   c0014878 <FPU::FPU(char const*)>
c002566d:	83 c4 10             	add    esp,0x10
c0025670:	ba 08 d0 02 c0       	mov    edx,0xc002d008
c0025675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025679:	89 10                	mov    DWORD PTR [eax],edx
c002567b:	90                   	nop
c002567c:	83 c4 0c             	add    esp,0xc
c002567f:	c3                   	ret    

c0025680 <x87::open(int, int, void*)>:
c0025680:	83 ec 0c             	sub    esp,0xc
c0025683:	e8 14 10 00 00       	call   c002669c <x87Init>
c0025688:	b8 00 00 00 00       	mov    eax,0x0
c002568d:	83 c4 0c             	add    esp,0xc
c0025690:	c3                   	ret    
c0025691:	90                   	nop

c0025692 <x87::close(int, int, void*)>:
c0025692:	83 ec 0c             	sub    esp,0xc
c0025695:	e8 1c 10 00 00       	call   c00266b6 <x87Close>
c002569a:	b8 00 00 00 00       	mov    eax,0x0
c002569f:	83 c4 0c             	add    esp,0xc
c00256a2:	c3                   	ret    
c00256a3:	90                   	nop

c00256a4 <x87::available()>:
c00256a4:	83 ec 0c             	sub    esp,0xc
c00256a7:	e8 ca 0f 00 00       	call   c0026676 <x87Detect>
c00256ac:	85 c0                	test   eax,eax
c00256ae:	0f 95 c0             	setne  al
c00256b1:	83 c4 0c             	add    esp,0xc
c00256b4:	c3                   	ret    
c00256b5:	90                   	nop

c00256b6 <x87::save(void*)>:
c00256b6:	83 ec 0c             	sub    esp,0xc
c00256b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256bd:	83 ec 0c             	sub    esp,0xc
c00256c0:	50                   	push   eax
c00256c1:	e8 cb 0f 00 00       	call   c0026691 <x87Save>
c00256c6:	83 c4 10             	add    esp,0x10
c00256c9:	90                   	nop
c00256ca:	83 c4 0c             	add    esp,0xc
c00256cd:	c3                   	ret    

c00256ce <x87::load(void*)>:
c00256ce:	83 ec 0c             	sub    esp,0xc
c00256d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256d5:	83 ec 0c             	sub    esp,0xc
c00256d8:	50                   	push   eax
c00256d9:	e8 b9 0f 00 00       	call   c0026697 <x87Load>
c00256de:	83 c4 10             	add    esp,0x10
c00256e1:	90                   	nop
c00256e2:	83 c4 0c             	add    esp,0xc
c00256e5:	c3                   	ret    

c00256e6 <x87::x87()>:
c00256e6:	83 ec 0c             	sub    esp,0xc
c00256e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ed:	83 ec 08             	sub    esp,0x8
c00256f0:	68 38 d0 02 c0       	push   0xc002d038
c00256f5:	50                   	push   eax
c00256f6:	e8 7d f1 fe ff       	call   c0014878 <FPU::FPU(char const*)>
c00256fb:	83 c4 10             	add    esp,0x10
c00256fe:	ba 48 d0 02 c0       	mov    edx,0xc002d048
c0025703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025707:	89 10                	mov    DWORD PTR [eax],edx
c0025709:	90                   	nop
c002570a:	83 c4 0c             	add    esp,0xc
c002570d:	c3                   	ret    

c002570e <APIC::disable()>:
c002570e:	90                   	nop
c002570f:	c3                   	ret    

c0025710 <APIC::close(int, int, void*)>:
c0025710:	55                   	push   ebp
c0025711:	89 e5                	mov    ebp,esp
c0025713:	83 ec 08             	sub    esp,0x8
c0025716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025719:	8b 00                	mov    eax,DWORD PTR [eax]
c002571b:	83 c0 3c             	add    eax,0x3c
c002571e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025720:	83 ec 0c             	sub    esp,0xc
c0025723:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025726:	ff d0                	call   eax
c0025728:	83 c4 10             	add    esp,0x10
c002572b:	b8 00 00 00 00       	mov    eax,0x0
c0025730:	c9                   	leave  
c0025731:	c3                   	ret    

c0025732 <IOAPIC::close(int, int, void*)>:
c0025732:	b8 00 00 00 00       	mov    eax,0x0
c0025737:	c3                   	ret    

c0025738 <APIC::io_wait()>:
c0025738:	eb 00                	jmp    c002573a <APIC::io_wait()+0x2>
c002573a:	eb 00                	jmp    c002573c <APIC::io_wait()+0x4>
c002573c:	90                   	nop
c002573d:	c3                   	ret    

c002573e <APIC::getBase()>:
c002573e:	55                   	push   ebp
c002573f:	89 e5                	mov    ebp,esp
c0025741:	83 ec 18             	sub    esp,0x18
c0025744:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0025749:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002574f:	83 e0 08             	and    eax,0x8
c0025752:	84 c0                	test   al,al
c0025754:	75 07                	jne    c002575d <APIC::getBase()+0x1f>
c0025756:	b8 00 00 00 00       	mov    eax,0x0
c002575b:	eb 21                	jmp    c002577e <APIC::getBase()+0x40>
c002575d:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0025762:	83 ec 08             	sub    esp,0x8
c0025765:	6a 1b                	push   0x1b
c0025767:	50                   	push   eax
c0025768:	e8 7b 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002576d:	83 c4 10             	add    esp,0x10
c0025770:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025773:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025776:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025779:	25 00 f0 ff ff       	and    eax,0xfffff000
c002577e:	c9                   	leave  
c002577f:	c3                   	ret    

c0025780 <APIC::eoi(unsigned char)>:
c0025780:	55                   	push   ebp
c0025781:	89 e5                	mov    ebp,esp
c0025783:	83 ec 28             	sub    esp,0x28
c0025786:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025789:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002578c:	83 ec 0c             	sub    esp,0xc
c002578f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025792:	e8 a7 ff ff ff       	call   c002573e <APIC::getBase()>
c0025797:	83 c4 10             	add    esp,0x10
c002579a:	05 b0 00 00 00       	add    eax,0xb0
c002579f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257a5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257ab:	90                   	nop
c00257ac:	c9                   	leave  
c00257ad:	c3                   	ret    

c00257ae <APIC::open(int, int, void*)>:
c00257ae:	55                   	push   ebp
c00257af:	89 e5                	mov    ebp,esp
c00257b1:	57                   	push   edi
c00257b2:	56                   	push   esi
c00257b3:	53                   	push   ebx
c00257b4:	83 ec 2c             	sub    esp,0x2c
c00257b7:	83 ec 0c             	sub    esp,0xc
c00257ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257bd:	e8 7c ff ff ff       	call   c002573e <APIC::getBase()>
c00257c2:	83 c4 10             	add    esp,0x10
c00257c5:	89 c2                	mov    edx,eax
c00257c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ca:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257d0:	0f b6 f8             	movzx  edi,al
c00257d3:	89 d0                	mov    eax,edx
c00257d5:	ba 00 00 00 00       	mov    edx,0x0
c00257da:	89 c1                	mov    ecx,eax
c00257dc:	80 e5 ff             	and    ch,0xff
c00257df:	89 cb                	mov    ebx,ecx
c00257e1:	0f b6 f2             	movzx  esi,dl
c00257e4:	89 d8                	mov    eax,ebx
c00257e6:	89 f2                	mov    edx,esi
c00257e8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257eb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257ee:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257f2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257f6:	83 e0 00             	and    eax,0x0
c00257f9:	09 d0                	or     eax,edx
c00257fb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025802:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025808:	8d 50 01             	lea    edx,[eax+0x1]
c002580b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002580e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025814:	0f b6 d0             	movzx  edx,al
c0025817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002581a:	83 c2 08             	add    edx,0x8
c002581d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025821:	0f b6 c9             	movzx  ecx,cl
c0025824:	81 c9 00 00 01 00    	or     ecx,0x10000
c002582a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002582e:	83 ec 0c             	sub    esp,0xc
c0025831:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025834:	e8 05 ff ff ff       	call   c002573e <APIC::getBase()>
c0025839:	83 c4 10             	add    esp,0x10
c002583c:	05 f0 00 00 00       	add    eax,0xf0
c0025841:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025844:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025847:	8b 00                	mov    eax,DWORD PTR [eax]
c0025849:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002584c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025853:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002585a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002585d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025860:	89 10                	mov    DWORD PTR [eax],edx
c0025862:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025869:	a1 b0 0c 03 c0       	mov    eax,ds:0xc0030cb0
c002586e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025871:	7d 7c                	jge    c00258ef <APIC::open(int, int, void*)+0x141>
c0025873:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025876:	8b 04 85 c0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf340]
c002587d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025880:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025883:	8b 04 85 c0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf340]
c002588a:	c1 e8 08             	shr    eax,0x8
c002588d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025891:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025894:	8b 04 85 c0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf340]
c002589b:	c1 e8 18             	shr    eax,0x18
c002589e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258a1:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258a5:	75 40                	jne    c00258e7 <APIC::open(int, int, void*)+0x139>
c00258a7:	83 ec 0c             	sub    esp,0xc
c00258aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ad:	e8 8c fe ff ff       	call   c002573e <APIC::getBase()>
c00258b2:	83 c4 10             	add    esp,0x10
c00258b5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258b9:	75 07                	jne    c00258c2 <APIC::open(int, int, void*)+0x114>
c00258bb:	ba 60 03 00 00       	mov    edx,0x360
c00258c0:	eb 05                	jmp    c00258c7 <APIC::open(int, int, void*)+0x119>
c00258c2:	ba 50 03 00 00       	mov    edx,0x350
c00258c7:	01 d0                	add    eax,edx
c00258c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00258d1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258d4:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258db:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258df:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258e2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258e5:	89 10                	mov    DWORD PTR [eax],edx
c00258e7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258ea:	e9 7a ff ff ff       	jmp    c0025869 <APIC::open(int, int, void*)+0xbb>
c00258ef:	b8 00 00 00 00       	mov    eax,0x0
c00258f4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258f7:	5b                   	pop    ebx
c00258f8:	5e                   	pop    esi
c00258f9:	5f                   	pop    edi
c00258fa:	5d                   	pop    ebp
c00258fb:	c3                   	ret    

c00258fc <IOAPIC::IOAPIC()>:
c00258fc:	83 ec 0c             	sub    esp,0xc
c00258ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025903:	83 ec 08             	sub    esp,0x8
c0025906:	68 78 d0 02 c0       	push   0xc002d078
c002590b:	50                   	push   eax
c002590c:	e8 55 ec fe ff       	call   c0014566 <Device::Device(char const*)>
c0025911:	83 c4 10             	add    esp,0x10
c0025914:	ba a0 d1 02 c0       	mov    edx,0xc002d1a0
c0025919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002591d:	89 10                	mov    DWORD PTR [eax],edx
c002591f:	90                   	nop
c0025920:	83 c4 0c             	add    esp,0xc
c0025923:	c3                   	ret    

c0025924 <APIC::APIC()>:
c0025924:	53                   	push   ebx
c0025925:	83 ec 18             	sub    esp,0x18
c0025928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002592c:	83 ec 08             	sub    esp,0x8
c002592f:	68 80 d0 02 c0       	push   0xc002d080
c0025934:	50                   	push   eax
c0025935:	e8 98 f3 fe ff       	call   c0014cd2 <InterruptController::InterruptController(char const*)>
c002593a:	83 c4 10             	add    esp,0x10
c002593d:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c0025942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025946:	89 10                	mov    DWORD PTR [eax],edx
c0025948:	a0 80 27 03 c0       	mov    al,ds:0xc0032780
c002594d:	83 f0 01             	xor    eax,0x1
c0025950:	84 c0                	test   al,al
c0025952:	0f 84 a1 00 00 00    	je     c00259f9 <APIC::APIC()+0xd5>
c0025958:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002595d:	a0 60 0d 03 c0       	mov    al,ds:0xc0030d60
c0025962:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025966:	0f 83 86 00 00 00    	jae    c00259f2 <APIC::APIC()+0xce>
c002596c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025974:	83 ec 0c             	sub    esp,0xc
c0025977:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002597b:	e8 c0 9e fe ff       	call   c000f840 <malloc>
c0025980:	83 c4 10             	add    esp,0x10
c0025983:	89 c3                	mov    ebx,eax
c0025985:	83 ec 0c             	sub    esp,0xc
c0025988:	53                   	push   ebx
c0025989:	e8 6e ff ff ff       	call   c00258fc <IOAPIC::IOAPIC()>
c002598e:	83 c4 10             	add    esp,0x10
c0025991:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025995:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002599a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002599e:	89 14 85 60 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8a0],edx
c00259a5:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c00259aa:	40                   	inc    eax
c00259ab:	a3 40 27 03 c0       	mov    ds:0xc0032740,eax
c00259b0:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c00259b5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259bb:	83 ec 08             	sub    esp,0x8
c00259be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259c2:	50                   	push   eax
c00259c3:	e8 ae e9 fe ff       	call   c0014376 <Device::addChild(Device*)>
c00259c8:	83 c4 10             	add    esp,0x10
c00259cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00259d1:	83 c0 08             	add    eax,0x8
c00259d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00259d6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259db:	6a 00                	push   0x0
c00259dd:	6a 00                	push   0x0
c00259df:	52                   	push   edx
c00259e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259e4:	ff d0                	call   eax
c00259e6:	83 c4 10             	add    esp,0x10
c00259e9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259ed:	e9 6b ff ff ff       	jmp    c002595d <APIC::APIC()+0x39>
c00259f2:	c6 05 80 27 03 c0 01 	mov    BYTE PTR ds:0xc0032780,0x1
c00259f9:	90                   	nop
c00259fa:	83 c4 18             	add    esp,0x18
c00259fd:	5b                   	pop    ebx
c00259fe:	c3                   	ret    
c00259ff:	90                   	nop

c0025a00 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a00:	55                   	push   ebp
c0025a01:	89 e5                	mov    ebp,esp
c0025a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a0c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a0f:	72 1d                	jb     c0025a2e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a14:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a1d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a23:	01 d0                	add    eax,edx
c0025a25:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a28:	73 04                	jae    c0025a2e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a2a:	b0 01                	mov    al,0x1
c0025a2c:	eb 02                	jmp    c0025a30 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a2e:	b0 00                	mov    al,0x0
c0025a30:	5d                   	pop    ebp
c0025a31:	c3                   	ret    

c0025a32 <IOAPIC::read(int)>:
c0025a32:	55                   	push   ebp
c0025a33:	89 e5                	mov    ebp,esp
c0025a35:	83 ec 10             	sub    esp,0x10
c0025a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a41:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a47:	0f b6 d0             	movzx  edx,al
c0025a4a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a4d:	89 10                	mov    DWORD PTR [eax],edx
c0025a4f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a52:	83 c0 10             	add    eax,0x10
c0025a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a57:	c9                   	leave  
c0025a58:	c3                   	ret    
c0025a59:	90                   	nop

c0025a5a <IOAPIC::open(int, int, void*)>:
c0025a5a:	55                   	push   ebp
c0025a5b:	89 e5                	mov    ebp,esp
c0025a5d:	57                   	push   edi
c0025a5e:	56                   	push   esi
c0025a5f:	53                   	push   ebx
c0025a60:	83 ec 0c             	sub    esp,0xc
c0025a63:	83 ec 0c             	sub    esp,0xc
c0025a66:	68 ab d0 02 c0       	push   0xc002d0ab
c0025a6b:	e8 e0 d4 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0025a70:	83 c4 10             	add    esp,0x10
c0025a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a82:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a88:	8b 14 85 a0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf260]
c0025a8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a9b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aa1:	8b 14 85 20 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1e0]
c0025aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aab:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ac3:	0f b6 f8             	movzx  edi,al
c0025ac6:	89 d0                	mov    eax,edx
c0025ac8:	ba 00 00 00 00       	mov    edx,0x0
c0025acd:	89 c1                	mov    ecx,eax
c0025acf:	80 e5 ff             	and    ch,0xff
c0025ad2:	89 cb                	mov    ebx,ecx
c0025ad4:	0f b6 f2             	movzx  esi,dl
c0025ad7:	89 d8                	mov    eax,ebx
c0025ad9:	89 f2                	mov    edx,esi
c0025adb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ade:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ae1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ae5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ae9:	83 e0 00             	and    eax,0x0
c0025aec:	09 d0                	or     eax,edx
c0025aee:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025afb:	8d 50 01             	lea    edx,[eax+0x1]
c0025afe:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b01:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b07:	0f b6 d0             	movzx  edx,al
c0025b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0d:	83 c2 08             	add    edx,0x8
c0025b10:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b14:	0f b6 c9             	movzx  ecx,cl
c0025b17:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b1d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b21:	83 ec 08             	sub    esp,0x8
c0025b24:	6a 01                	push   0x1
c0025b26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b29:	e8 04 ff ff ff       	call   c0025a32 <IOAPIC::read(int)>
c0025b2e:	83 c4 10             	add    esp,0x10
c0025b31:	c1 f8 10             	sar    eax,0x10
c0025b34:	0f b6 c0             	movzx  eax,al
c0025b37:	8d 50 01             	lea    edx,[eax+0x1]
c0025b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b43:	b8 00 00 00 00       	mov    eax,0x0
c0025b48:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b4b:	5b                   	pop    ebx
c0025b4c:	5e                   	pop    esi
c0025b4d:	5f                   	pop    edi
c0025b4e:	5d                   	pop    ebp
c0025b4f:	c3                   	ret    

c0025b50 <IOAPIC::write(int, int)>:
c0025b50:	55                   	push   ebp
c0025b51:	89 e5                	mov    ebp,esp
c0025b53:	83 ec 10             	sub    esp,0x10
c0025b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b59:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b5f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b65:	0f b6 d0             	movzx  edx,al
c0025b68:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b6b:	89 10                	mov    DWORD PTR [eax],edx
c0025b6d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b70:	8d 50 10             	lea    edx,[eax+0x10]
c0025b73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b76:	89 02                	mov    DWORD PTR [edx],eax
c0025b78:	90                   	nop
c0025b79:	c9                   	leave  
c0025b7a:	c3                   	ret    
c0025b7b:	90                   	nop

c0025b7c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b7c:	55                   	push   ebp
c0025b7d:	89 e5                	mov    ebp,esp
c0025b7f:	53                   	push   ebx
c0025b80:	83 ec 2c             	sub    esp,0x2c
c0025b83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b86:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b89:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b8c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b98:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b9b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b9e:	88 d8                	mov    al,bl
c0025ba0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025ba3:	88 c8                	mov    al,cl
c0025ba5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025ba8:	88 d0                	mov    al,dl
c0025baa:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bb1:	83 c0 08             	add    eax,0x8
c0025bb4:	01 c0                	add    eax,eax
c0025bb6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bb9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bbd:	83 c0 08             	add    eax,0x8
c0025bc0:	01 c0                	add    eax,eax
c0025bc2:	40                   	inc    eax
c0025bc3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bc6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bc9:	50                   	push   eax
c0025bca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bcd:	e8 60 fe ff ff       	call   c0025a32 <IOAPIC::read(int)>
c0025bd2:	83 c4 08             	add    esp,0x8
c0025bd5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025bd8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025bdf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025be2:	c1 e0 18             	shl    eax,0x18
c0025be5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025be8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025beb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bee:	52                   	push   edx
c0025bef:	50                   	push   eax
c0025bf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf3:	e8 58 ff ff ff       	call   c0025b50 <IOAPIC::write(int, int)>
c0025bf8:	83 c4 0c             	add    esp,0xc
c0025bfb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bfe:	50                   	push   eax
c0025bff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c02:	e8 2b fe ff ff       	call   c0025a32 <IOAPIC::read(int)>
c0025c07:	83 c4 08             	add    esp,0x8
c0025c0a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c0d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c14:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c1b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c22:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c26:	74 09                	je     c0025c31 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c28:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c2f:	eb 07                	jmp    c0025c38 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c31:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c38:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c3c:	74 09                	je     c0025c47 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c3e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c45:	eb 07                	jmp    c0025c4e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c47:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c4e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c55:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c59:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c5c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c62:	52                   	push   edx
c0025c63:	50                   	push   eax
c0025c64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c67:	e8 e4 fe ff ff       	call   c0025b50 <IOAPIC::write(int, int)>
c0025c6c:	83 c4 0c             	add    esp,0xc
c0025c6f:	90                   	nop
c0025c70:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c73:	c9                   	leave  
c0025c74:	c3                   	ret    
c0025c75:	90                   	nop

c0025c76 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c76:	55                   	push   ebp
c0025c77:	89 e5                	mov    ebp,esp
c0025c79:	57                   	push   edi
c0025c7a:	56                   	push   esi
c0025c7b:	53                   	push   ebx
c0025c7c:	83 ec 2c             	sub    esp,0x2c
c0025c7f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c82:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c85:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c89:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c8d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c91:	74 5a                	je     c0025ced <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c93:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c97:	7f 44                	jg     c0025cdd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c9c:	05 00 d6 02 c0       	add    eax,0xc002d600
c0025ca1:	8a 00                	mov    al,BYTE PTR [eax]
c0025ca3:	0f b6 c0             	movzx  eax,al
c0025ca6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025ca9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cac:	66 8b 84 00 40 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf2c0]
c0025cb4:	0f b7 c0             	movzx  eax,ax
c0025cb7:	83 e0 02             	and    eax,0x2
c0025cba:	85 c0                	test   eax,eax
c0025cbc:	74 04                	je     c0025cc2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cbe:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cc5:	66 8b 84 00 40 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf2c0]
c0025ccd:	0f b7 c0             	movzx  eax,ax
c0025cd0:	83 e0 08             	and    eax,0x8
c0025cd3:	85 c0                	test   eax,eax
c0025cd5:	74 16                	je     c0025ced <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cd7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cdb:	eb 10                	jmp    c0025ced <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cdd:	83 ec 0c             	sub    esp,0xc
c0025ce0:	68 bc d0 02 c0       	push   0xc002d0bc
c0025ce5:	e8 07 49 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0025cea:	83 c4 10             	add    esp,0x10
c0025ced:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cf1:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c0025cf6:	83 ec 08             	sub    esp,0x8
c0025cf9:	50                   	push   eax
c0025cfa:	68 f4 d0 02 c0       	push   0xc002d0f4
c0025cff:	e8 4c d2 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0025d04:	83 c4 10             	add    esp,0x10
c0025d07:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d0e:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c0025d13:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d16:	7d 67                	jge    c0025d7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d18:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d1b:	8b 04 85 60 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8a0]
c0025d22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d25:	83 ec 08             	sub    esp,0x8
c0025d28:	52                   	push   edx
c0025d29:	50                   	push   eax
c0025d2a:	e8 d1 fc ff ff       	call   c0025a00 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d2f:	83 c4 10             	add    esp,0x10
c0025d32:	84 c0                	test   al,al
c0025d34:	74 44                	je     c0025d7a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d36:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d39:	8b 1c 85 60 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd8a0]
c0025d40:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d44:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d47:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d4e:	83 c0 20             	add    eax,0x20
c0025d51:	0f b6 f0             	movzx  esi,al
c0025d54:	b8 00 00 00 00       	mov    eax,0x0
c0025d59:	99                   	cdq    
c0025d5a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d5d:	0f b6 c9             	movzx  ecx,cl
c0025d60:	83 ec 04             	sub    esp,0x4
c0025d63:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d66:	57                   	push   edi
c0025d67:	56                   	push   esi
c0025d68:	52                   	push   edx
c0025d69:	50                   	push   eax
c0025d6a:	51                   	push   ecx
c0025d6b:	53                   	push   ebx
c0025d6c:	e8 0b fe ff ff       	call   c0025b7c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d71:	83 c4 20             	add    esp,0x20
c0025d74:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d78:	eb 05                	jmp    c0025d7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d7a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d7d:	eb 8f                	jmp    c0025d0e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d7f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d82:	83 f0 01             	xor    eax,0x1
c0025d85:	84 c0                	test   al,al
c0025d87:	74 10                	je     c0025d99 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d89:	83 ec 0c             	sub    esp,0xc
c0025d8c:	68 0b d1 02 c0       	push   0xc002d10b
c0025d91:	e8 5b 48 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0025d96:	83 c4 10             	add    esp,0x10
c0025d99:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d9d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025da4:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025da8:	7f 65                	jg     c0025e0f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025db0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025db7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dba:	01 ca                	add    edx,ecx
c0025dbc:	83 c2 54             	add    edx,0x54
c0025dbf:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025dc3:	85 c0                	test   eax,eax
c0025dc5:	75 43                	jne    c0025e0a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dcd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dd4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dd7:	01 ca                	add    edx,ecx
c0025dd9:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ddc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ddf:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025de6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025de9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025df0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025df3:	01 ca                	add    edx,ecx
c0025df5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025dfb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025dfe:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e05:	83 e8 20             	sub    eax,0x20
c0025e08:	eb 1a                	jmp    c0025e24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e0a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e0d:	eb 95                	jmp    c0025da4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e0f:	83 ec 0c             	sub    esp,0xc
c0025e12:	68 18 d1 02 c0       	push   0xc002d118
c0025e17:	e8 d5 47 ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0025e1c:	83 c4 10             	add    esp,0x10
c0025e1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e24:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e27:	5b                   	pop    ebx
c0025e28:	5e                   	pop    esi
c0025e29:	5f                   	pop    edi
c0025e2a:	5d                   	pop    ebp
c0025e2b:	c3                   	ret    

c0025e2c <PIC::disable()>:
c0025e2c:	55                   	push   ebp
c0025e2d:	89 e5                	mov    ebp,esp
c0025e2f:	83 ec 10             	sub    esp,0x10
c0025e32:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e38:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e3c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e3f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e43:	ee                   	out    dx,al
c0025e44:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e4a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e4e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e51:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e55:	ee                   	out    dx,al
c0025e56:	90                   	nop
c0025e57:	c9                   	leave  
c0025e58:	c3                   	ret    
c0025e59:	90                   	nop

c0025e5a <PIC::close(int, int, void*)>:
c0025e5a:	55                   	push   ebp
c0025e5b:	89 e5                	mov    ebp,esp
c0025e5d:	83 ec 08             	sub    esp,0x8
c0025e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e65:	83 c0 3c             	add    eax,0x3c
c0025e68:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e6a:	83 ec 0c             	sub    esp,0xc
c0025e6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e70:	ff d0                	call   eax
c0025e72:	83 c4 10             	add    esp,0x10
c0025e75:	b8 00 00 00 00       	mov    eax,0x0
c0025e7a:	c9                   	leave  
c0025e7b:	c3                   	ret    

c0025e7c <PIC::PIC()>:
c0025e7c:	83 ec 0c             	sub    esp,0xc
c0025e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e83:	83 ec 08             	sub    esp,0x8
c0025e86:	68 c4 d1 02 c0       	push   0xc002d1c4
c0025e8b:	50                   	push   eax
c0025e8c:	e8 41 ee fe ff       	call   c0014cd2 <InterruptController::InterruptController(char const*)>
c0025e91:	83 c4 10             	add    esp,0x10
c0025e94:	ba f0 d1 02 c0       	mov    edx,0xc002d1f0
c0025e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e9d:	89 10                	mov    DWORD PTR [eax],edx
c0025e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ea9:	0f b6 d0             	movzx  edx,al
c0025eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ec1:	0f b6 d0             	movzx  edx,al
c0025ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ed7:	8d 50 01             	lea    edx,[eax+0x1]
c0025eda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ede:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ee4:	0f b6 d0             	movzx  edx,al
c0025ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eeb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025eef:	83 e1 3f             	and    ecx,0x3f
c0025ef2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f00:	0f b6 d0             	movzx  edx,al
c0025f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f07:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f12:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f18:	0f b6 d0             	movzx  edx,al
c0025f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f2e:	8d 50 01             	lea    edx,[eax+0x1]
c0025f31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f35:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f3b:	0f b6 d0             	movzx  edx,al
c0025f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f42:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f46:	83 e1 3f             	and    ecx,0x3f
c0025f49:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f4d:	90                   	nop
c0025f4e:	83 c4 0c             	add    esp,0xc
c0025f51:	c3                   	ret    

c0025f52 <PIC::ioWait()>:
c0025f52:	eb 00                	jmp    c0025f54 <PIC::ioWait()+0x2>
c0025f54:	eb 00                	jmp    c0025f56 <PIC::ioWait()+0x4>
c0025f56:	90                   	nop
c0025f57:	c3                   	ret    

c0025f58 <PIC::getIRQReg(int)>:
c0025f58:	55                   	push   ebp
c0025f59:	89 e5                	mov    ebp,esp
c0025f5b:	83 ec 10             	sub    esp,0x10
c0025f5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f61:	0f b6 c0             	movzx  eax,al
c0025f64:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f6a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f6d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f70:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f74:	ee                   	out    dx,al
c0025f75:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f78:	0f b6 c0             	movzx  eax,al
c0025f7b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f81:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f84:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f87:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f8b:	ee                   	out    dx,al
c0025f8c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f92:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f96:	89 c2                	mov    edx,eax
c0025f98:	ec                   	in     al,dx
c0025f99:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f9c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f9f:	0f b6 c0             	movzx  eax,al
c0025fa2:	c1 e0 08             	shl    eax,0x8
c0025fa5:	89 c1                	mov    ecx,eax
c0025fa7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fad:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fb1:	89 c2                	mov    edx,eax
c0025fb3:	ec                   	in     al,dx
c0025fb4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fb7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fba:	0f b6 c0             	movzx  eax,al
c0025fbd:	09 c8                	or     eax,ecx
c0025fbf:	c9                   	leave  
c0025fc0:	c3                   	ret    
c0025fc1:	90                   	nop

c0025fc2 <PIC::eoi(unsigned char)>:
c0025fc2:	55                   	push   ebp
c0025fc3:	89 e5                	mov    ebp,esp
c0025fc5:	83 ec 14             	sub    esp,0x14
c0025fc8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fcb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fce:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fd2:	75 1e                	jne    c0025ff2 <PIC::eoi(unsigned char)+0x30>
c0025fd4:	6a 0b                	push   0xb
c0025fd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fd9:	e8 7a ff ff ff       	call   c0025f58 <PIC::getIRQReg(int)>
c0025fde:	83 c4 08             	add    esp,0x8
c0025fe1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025fe5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025fe9:	25 80 00 00 00       	and    eax,0x80
c0025fee:	85 c0                	test   eax,eax
c0025ff0:	74 5f                	je     c0026051 <PIC::eoi(unsigned char)+0x8f>
c0025ff2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025ff6:	75 2d                	jne    c0026025 <PIC::eoi(unsigned char)+0x63>
c0025ff8:	6a 0b                	push   0xb
c0025ffa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ffd:	e8 56 ff ff ff       	call   c0025f58 <PIC::getIRQReg(int)>
c0026002:	83 c4 08             	add    esp,0x8
c0026005:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026009:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002600c:	66 85 c0             	test   ax,ax
c002600f:	78 14                	js     c0026025 <PIC::eoi(unsigned char)+0x63>
c0026011:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026017:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002601b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002601e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026022:	ee                   	out    dx,al
c0026023:	eb 2d                	jmp    c0026052 <PIC::eoi(unsigned char)+0x90>
c0026025:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026029:	76 12                	jbe    c002603d <PIC::eoi(unsigned char)+0x7b>
c002602b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026031:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026035:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026038:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002603c:	ee                   	out    dx,al
c002603d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026043:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026047:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002604a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002604e:	ee                   	out    dx,al
c002604f:	eb 01                	jmp    c0026052 <PIC::eoi(unsigned char)+0x90>
c0026051:	90                   	nop
c0026052:	c9                   	leave  
c0026053:	c3                   	ret    

c0026054 <PIC::remap()>:
c0026054:	55                   	push   ebp
c0026055:	89 e5                	mov    ebp,esp
c0026057:	83 ec 48             	sub    esp,0x48
c002605a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026061:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026068:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002606e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026071:	89 c2                	mov    edx,eax
c0026073:	ec                   	in     al,dx
c0026074:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026077:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002607a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002607d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026083:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026086:	89 c2                	mov    edx,eax
c0026088:	ec                   	in     al,dx
c0026089:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002608c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002608f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026092:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026098:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002609c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002609f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260a2:	ee                   	out    dx,al
c00260a3:	83 ec 0c             	sub    esp,0xc
c00260a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a9:	e8 a4 fe ff ff       	call   c0025f52 <PIC::ioWait()>
c00260ae:	83 c4 10             	add    esp,0x10
c00260b1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260b7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260bb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260be:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260c1:	ee                   	out    dx,al
c00260c2:	83 ec 0c             	sub    esp,0xc
c00260c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c8:	e8 85 fe ff ff       	call   c0025f52 <PIC::ioWait()>
c00260cd:	83 c4 10             	add    esp,0x10
c00260d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260d3:	0f b6 c0             	movzx  eax,al
c00260d6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260dc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260df:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260e2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260e5:	ee                   	out    dx,al
c00260e6:	83 ec 0c             	sub    esp,0xc
c00260e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260ec:	e8 61 fe ff ff       	call   c0025f52 <PIC::ioWait()>
c00260f1:	83 c4 10             	add    esp,0x10
c00260f4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260f7:	0f b6 c0             	movzx  eax,al
c00260fa:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026100:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026103:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026106:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026109:	ee                   	out    dx,al
c002610a:	83 ec 0c             	sub    esp,0xc
c002610d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026110:	e8 3d fe ff ff       	call   c0025f52 <PIC::ioWait()>
c0026115:	83 c4 10             	add    esp,0x10
c0026118:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002611e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026122:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026125:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026128:	ee                   	out    dx,al
c0026129:	83 ec 0c             	sub    esp,0xc
c002612c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002612f:	e8 1e fe ff ff       	call   c0025f52 <PIC::ioWait()>
c0026134:	83 c4 10             	add    esp,0x10
c0026137:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002613d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026141:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026144:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026147:	ee                   	out    dx,al
c0026148:	83 ec 0c             	sub    esp,0xc
c002614b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002614e:	e8 ff fd ff ff       	call   c0025f52 <PIC::ioWait()>
c0026153:	83 c4 10             	add    esp,0x10
c0026156:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002615c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026160:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026163:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026166:	ee                   	out    dx,al
c0026167:	83 ec 0c             	sub    esp,0xc
c002616a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002616d:	e8 e0 fd ff ff       	call   c0025f52 <PIC::ioWait()>
c0026172:	83 c4 10             	add    esp,0x10
c0026175:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002617b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002617f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026182:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026185:	ee                   	out    dx,al
c0026186:	83 ec 0c             	sub    esp,0xc
c0026189:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002618c:	e8 c1 fd ff ff       	call   c0025f52 <PIC::ioWait()>
c0026191:	83 c4 10             	add    esp,0x10
c0026194:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026198:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002619e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261a1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261a4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261a7:	ee                   	out    dx,al
c00261a8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261ac:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261b2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261b5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261b8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261bb:	ee                   	out    dx,al
c00261bc:	90                   	nop
c00261bd:	c9                   	leave  
c00261be:	c3                   	ret    
c00261bf:	90                   	nop

c00261c0 <PIC::open(int, int, void*)>:
c00261c0:	55                   	push   ebp
c00261c1:	89 e5                	mov    ebp,esp
c00261c3:	83 ec 18             	sub    esp,0x18
c00261c6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261cc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261d0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261d3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261d7:	ee                   	out    dx,al
c00261d8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261de:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261e2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261e5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261e9:	ee                   	out    dx,al
c00261ea:	83 ec 0c             	sub    esp,0xc
c00261ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f0:	e8 5f fe ff ff       	call   c0026054 <PIC::remap()>
c00261f5:	83 c4 10             	add    esp,0x10
c00261f8:	b8 00 00 00 00       	mov    eax,0x0
c00261fd:	c9                   	leave  
c00261fe:	c3                   	ret    
c00261ff:	90                   	nop

c0026200 <APICTimer::close(int, int, void*)>:
c0026200:	b8 00 00 00 00       	mov    eax,0x0
c0026205:	c3                   	ret    

c0026206 <apicTimerHandler(regs*, void*)>:
c0026206:	83 ec 0c             	sub    esp,0xc
c0026209:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002620d:	8b 00                	mov    eax,DWORD PTR [eax]
c002620f:	99                   	cdq    
c0026210:	52                   	push   edx
c0026211:	50                   	push   eax
c0026212:	6a 00                	push   0x0
c0026214:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026219:	e8 8e 07 00 00       	call   c00269ac <__udivdi3>
c002621e:	83 c4 10             	add    esp,0x10
c0026221:	83 ec 08             	sub    esp,0x8
c0026224:	52                   	push   edx
c0026225:	50                   	push   eax
c0026226:	e8 f2 0a ff ff       	call   c0016d1d <timerHandler(unsigned long long)>
c002622b:	83 c4 10             	add    esp,0x10
c002622e:	90                   	nop
c002622f:	83 c4 0c             	add    esp,0xc
c0026232:	c3                   	ret    
c0026233:	90                   	nop

c0026234 <APICTimer::write(int)>:
c0026234:	53                   	push   ebx
c0026235:	83 ec 28             	sub    esp,0x28
c0026238:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002623c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026240:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026246:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c002624b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026251:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026257:	83 ec 0c             	sub    esp,0xc
c002625a:	50                   	push   eax
c002625b:	e8 de f4 ff ff       	call   c002573e <APIC::getBase()>
c0026260:	83 c4 10             	add    esp,0x10
c0026263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026267:	a1 50 ea 02 c0       	mov    eax,ds:0xc002ea50
c002626c:	8b 15 54 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea54
c0026272:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026276:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002627a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002627e:	05 e0 03 00 00       	add    eax,0x3e0
c0026283:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026289:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002628d:	05 80 03 00 00       	add    eax,0x380
c0026292:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026298:	fb                   	sti    
c0026299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262a1:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262a6:	83 d2 00             	adc    edx,0x0
c00262a9:	89 c1                	mov    ecx,eax
c00262ab:	89 d3                	mov    ebx,edx
c00262ad:	a1 50 ea 02 c0       	mov    eax,ds:0xc002ea50
c00262b2:	8b 15 54 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea54
c00262b8:	39 c8                	cmp    eax,ecx
c00262ba:	89 d0                	mov    eax,edx
c00262bc:	19 d8                	sbb    eax,ebx
c00262be:	73 02                	jae    c00262c2 <APICTimer::write(int)+0x8e>
c00262c0:	eb d7                	jmp    c0026299 <APICTimer::write(int)+0x65>
c00262c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262c6:	05 20 03 00 00       	add    eax,0x320
c00262cb:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d5:	05 90 03 00 00       	add    eax,0x390
c00262da:	8b 00                	mov    eax,DWORD PTR [eax]
c00262dc:	f7 d0                	not    eax
c00262de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262e2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262ea:	ba 00 00 00 00       	mov    edx,0x0
c00262ef:	f7 f3                	div    ebx
c00262f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262ff:	0d 00 00 02 00       	or     eax,0x20000
c0026304:	89 c2                	mov    edx,eax
c0026306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002630a:	05 20 03 00 00       	add    eax,0x320
c002630f:	89 10                	mov    DWORD PTR [eax],edx
c0026311:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026315:	05 e0 03 00 00       	add    eax,0x3e0
c002631a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026320:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026324:	05 80 03 00 00       	add    eax,0x380
c0026329:	89 c2                	mov    edx,eax
c002632b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002632f:	89 02                	mov    DWORD PTR [edx],eax
c0026331:	90                   	nop
c0026332:	83 c4 28             	add    esp,0x28
c0026335:	5b                   	pop    ebx
c0026336:	c3                   	ret    
c0026337:	90                   	nop

c0026338 <APICTimer::open(int, int, void*)>:
c0026338:	57                   	push   edi
c0026339:	56                   	push   esi
c002633a:	53                   	push   ebx
c002633b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026341:	83 c0 24             	add    eax,0x24
c0026344:	8b 00                	mov    eax,DWORD PTR [eax]
c0026346:	83 ec 08             	sub    esp,0x8
c0026349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002634d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026351:	ff d0                	call   eax
c0026353:	83 c4 10             	add    esp,0x10
c0026356:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c002635b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026361:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026367:	83 ec 0c             	sub    esp,0xc
c002636a:	50                   	push   eax
c002636b:	e8 ce f3 ff ff       	call   c002573e <APIC::getBase()>
c0026370:	83 c4 10             	add    esp,0x10
c0026373:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026383:	0f b6 f8             	movzx  edi,al
c0026386:	89 d0                	mov    eax,edx
c0026388:	ba 00 00 00 00       	mov    edx,0x0
c002638d:	89 c1                	mov    ecx,eax
c002638f:	80 e5 ff             	and    ch,0xff
c0026392:	89 cb                	mov    ebx,ecx
c0026394:	0f b6 f2             	movzx  esi,dl
c0026397:	89 d8                	mov    eax,ebx
c0026399:	89 f2                	mov    edx,esi
c002639b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002639f:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263a2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263a6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263aa:	83 e0 00             	and    eax,0x0
c00263ad:	09 d0                	or     eax,edx
c00263af:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263bd:	8d 50 01             	lea    edx,[eax+0x1]
c00263c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263c4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263ca:	0f b6 d0             	movzx  edx,al
c00263cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d1:	83 c2 08             	add    edx,0x8
c00263d4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263d8:	0f b6 c9             	movzx  ecx,cl
c00263db:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263e1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263ed:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263fb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026401:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026405:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002640b:	83 ec 0c             	sub    esp,0xc
c002640e:	51                   	push   ecx
c002640f:	6a 01                	push   0x1
c0026411:	68 06 62 02 c0       	push   0xc0026206
c0026416:	52                   	push   edx
c0026417:	50                   	push   eax
c0026418:	e8 dd de fe ff       	call   c00142fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002641d:	83 c4 20             	add    esp,0x20
c0026420:	89 c2                	mov    edx,eax
c0026422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026426:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002642c:	b8 00 00 00 00       	mov    eax,0x0
c0026431:	5b                   	pop    ebx
c0026432:	5e                   	pop    esi
c0026433:	5f                   	pop    edi
c0026434:	c3                   	ret    
c0026435:	90                   	nop

c0026436 <APICTimer::APICTimer()>:
c0026436:	83 ec 0c             	sub    esp,0xc
c0026439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002643d:	83 ec 08             	sub    esp,0x8
c0026440:	68 30 d2 02 c0       	push   0xc002d230
c0026445:	50                   	push   eax
c0026446:	e8 43 08 ff ff       	call   c0016c8e <Timer::Timer(char const*)>
c002644b:	83 c4 10             	add    esp,0x10
c002644e:	ba 44 d2 02 c0       	mov    edx,0xc002d244
c0026453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026457:	89 10                	mov    DWORD PTR [eax],edx
c0026459:	90                   	nop
c002645a:	83 c4 0c             	add    esp,0xc
c002645d:	c3                   	ret    

c002645e <PIT::write(int)>:
c002645e:	83 ec 10             	sub    esp,0x10
c0026461:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026465:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026469:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002646f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026473:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c0026478:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002647d:	99                   	cdq    
c002647e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026482:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026486:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002648d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026492:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026496:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002649b:	ee                   	out    dx,al
c002649c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264a0:	0f b6 c0             	movzx  eax,al
c00264a3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264aa:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264ae:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264b2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264b7:	ee                   	out    dx,al
c00264b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264bc:	c1 f8 08             	sar    eax,0x8
c00264bf:	0f b6 c0             	movzx  eax,al
c00264c2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264c9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264cd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264d1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264d6:	ee                   	out    dx,al
c00264d7:	90                   	nop
c00264d8:	83 c4 10             	add    esp,0x10
c00264db:	c3                   	ret    

c00264dc <pitHandler(regs*, void*)>:
c00264dc:	83 ec 0c             	sub    esp,0xc
c00264df:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c00264e4:	99                   	cdq    
c00264e5:	52                   	push   edx
c00264e6:	50                   	push   eax
c00264e7:	6a 00                	push   0x0
c00264e9:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264ee:	e8 b9 04 00 00       	call   c00269ac <__udivdi3>
c00264f3:	83 c4 10             	add    esp,0x10
c00264f6:	83 ec 08             	sub    esp,0x8
c00264f9:	52                   	push   edx
c00264fa:	50                   	push   eax
c00264fb:	e8 1d 08 ff ff       	call   c0016d1d <timerHandler(unsigned long long)>
c0026500:	83 c4 10             	add    esp,0x10
c0026503:	90                   	nop
c0026504:	83 c4 0c             	add    esp,0xc
c0026507:	c3                   	ret    

c0026508 <PIT::open(int, int, void*)>:
c0026508:	83 ec 0c             	sub    esp,0xc
c002650b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026511:	83 c0 24             	add    eax,0x24
c0026514:	8b 00                	mov    eax,DWORD PTR [eax]
c0026516:	83 ec 08             	sub    esp,0x8
c0026519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002651d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026521:	ff d0                	call   eax
c0026523:	83 c4 10             	add    esp,0x10
c0026526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002652a:	83 ec 0c             	sub    esp,0xc
c002652d:	6a 00                	push   0x0
c002652f:	6a 01                	push   0x1
c0026531:	68 dc 64 02 c0       	push   0xc00264dc
c0026536:	6a 00                	push   0x0
c0026538:	50                   	push   eax
c0026539:	e8 bc dd fe ff       	call   c00142fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002653e:	83 c4 20             	add    esp,0x20
c0026541:	89 c2                	mov    edx,eax
c0026543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026547:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002654d:	b8 00 00 00 00       	mov    eax,0x0
c0026552:	83 c4 0c             	add    esp,0xc
c0026555:	c3                   	ret    

c0026556 <PIT::close(int, int, void*)>:
c0026556:	83 ec 0c             	sub    esp,0xc
c0026559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002655d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656b:	6a 01                	push   0x1
c002656d:	68 dc 64 02 c0       	push   0xc00264dc
c0026572:	6a 00                	push   0x0
c0026574:	50                   	push   eax
c0026575:	e8 be dd fe ff       	call   c0014338 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002657a:	83 c4 10             	add    esp,0x10
c002657d:	b8 00 00 00 00       	mov    eax,0x0
c0026582:	83 c4 0c             	add    esp,0xc
c0026585:	c3                   	ret    

c0026586 <PIT::PIT()>:
c0026586:	83 ec 0c             	sub    esp,0xc
c0026589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658d:	83 ec 08             	sub    esp,0x8
c0026590:	68 6c d2 02 c0       	push   0xc002d26c
c0026595:	50                   	push   eax
c0026596:	e8 f3 06 ff ff       	call   c0016c8e <Timer::Timer(char const*)>
c002659b:	83 c4 10             	add    esp,0x10
c002659e:	ba 94 d2 02 c0       	mov    edx,0xc002d294
c00265a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a7:	89 10                	mov    DWORD PTR [eax],edx
c00265a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265b3:	0f b6 d0             	movzx  edx,al
c00265b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ba:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265cb:	0f b6 d0             	movzx  edx,al
c00265ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265e1:	8d 50 01             	lea    edx,[eax+0x1]
c00265e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265e8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265ee:	0f b6 d0             	movzx  edx,al
c00265f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00265f9:	83 e1 3f             	and    ecx,0x3f
c00265fc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026600:	90                   	nop
c0026601:	83 c4 0c             	add    esp,0xc
c0026604:	c3                   	ret    
c0026605:	66 90                	xchg   ax,ax
c0026607:	66 90                	xchg   ax,ax
c0026609:	66 90                	xchg   ax,ax
c002660b:	66 90                	xchg   ax,ax
c002660d:	66 90                	xchg   ax,ax
c002660f:	90                   	nop

c0026610 <avxDetect>:
c0026610:	b8 00 00 00 00       	mov    eax,0x0
c0026615:	c3                   	ret    

c0026616 <avxSave>:
c0026616:	c3                   	ret    

c0026617 <avxLoad>:
c0026617:	c3                   	ret    

c0026618 <avxInit>:
c0026618:	c3                   	ret    

c0026619 <avxClose>:
c0026619:	c3                   	ret    

c002661a <wouldSheSayYes>:
c002661a:	c3                   	ret    
c002661b:	49                   	dec    ecx
c002661c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026620:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026624:	75 20                	jne    c0026646 <sseDetect.noSSE+0x1>
c0026626:	4e                   	dec    esi
c0026627:	79 61                	jns    c002668a <x87Detect+0x14>
c0026629:	68 2e 2e 2e 00       	push   0x2e2e2e
c002662e:	66 90                	xchg   ax,ax

c0026630 <absolutelyNoChanceInHell>:
c0026630:	b8 01 00 00 00       	mov    eax,0x1
c0026635:	0f a2                	cpuid  
c0026637:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002663d:	74 06                	je     c0026645 <sseDetect.noSSE>
c002663f:	b8 01 00 00 00       	mov    eax,0x1
c0026644:	c3                   	ret    

c0026645 <sseDetect.noSSE>:
c0026645:	31 c0                	xor    eax,eax
c0026647:	c3                   	ret    

c0026648 <sseSave>:
c0026648:	0f ae 44 24 08       	fxsave [esp+0x8]
c002664d:	c3                   	ret    

c002664e <sseLoad>:
c002664e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026653:	c3                   	ret    

c0026654 <sseInit>:
c0026654:	e8 43 00 00 00       	call   c002669c <x87Init>
c0026659:	0f 20 e0             	mov    eax,cr4
c002665c:	66 0d 00 06          	or     ax,0x600
c0026660:	0f 22 e0             	mov    cr4,eax
c0026663:	c3                   	ret    

c0026664 <sseClose>:
c0026664:	c3                   	ret    
c0026665:	66 90                	xchg   ax,ax
c0026667:	66 90                	xchg   ax,ax
c0026669:	66 90                	xchg   ax,ax
c002666b:	66 90                	xchg   ax,ax
c002666d:	66 90                	xchg   ax,ax
c002666f:	90                   	nop

c0026670 <value_37F>:
c0026670:	7f 03                	jg     c0026675 <value_37A+0x1>

c0026672 <value_37E>:
c0026672:	7e 03                	jle    c0026677 <x87Detect+0x1>

c0026674 <value_37A>:
c0026674:	7a 03                	jp     c0026679 <x87Detect+0x3>

c0026676 <x87Detect>:
c0026676:	b8 01 00 00 00       	mov    eax,0x1
c002667b:	0f a2                	cpuid  
c002667d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026683:	74 06                	je     c002668b <x87Detect.nox87>
c0026685:	b8 01 00 00 00       	mov    eax,0x1
c002668a:	c3                   	ret    

c002668b <x87Detect.nox87>:
c002668b:	b8 00 00 00 00       	mov    eax,0x0
c0026690:	c3                   	ret    

c0026691 <x87Save>:
c0026691:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026696:	c3                   	ret    

c0026697 <x87Load>:
c0026697:	dd 64 24 08          	frstor [esp+0x8]
c002669b:	c3                   	ret    

c002669c <x87Init>:
c002669c:	9b db e3             	finit  
c002669f:	0f 20 c0             	mov    eax,cr0
c00266a2:	66 25 fb ff          	and    ax,0xfffb
c00266a6:	66 0d 22 00          	or     ax,0x22
c00266aa:	0f 22 c0             	mov    cr0,eax
c00266ad:	0f 06                	clts   
c00266af:	d9 2d 74 66 02 c0    	fldcw  WORD PTR ds:0xc0026674
c00266b5:	c3                   	ret    

c00266b6 <x87Close>:
c00266b6:	c3                   	ret    
c00266b7:	90                   	nop

c00266b8 <__do_global_ctors_aux>:
c00266b8:	a1 fc 91 02 c0       	mov    eax,ds:0xc00291fc
c00266bd:	83 f8 ff             	cmp    eax,0xffffffff
c00266c0:	74 1a                	je     c00266dc <__do_global_ctors_aux+0x24>
c00266c2:	55                   	push   ebp
c00266c3:	89 e5                	mov    ebp,esp
c00266c5:	53                   	push   ebx
c00266c6:	52                   	push   edx
c00266c7:	bb fc 91 02 c0       	mov    ebx,0xc00291fc
c00266cc:	ff d0                	call   eax
c00266ce:	83 eb 04             	sub    ebx,0x4
c00266d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266d3:	83 f8 ff             	cmp    eax,0xffffffff
c00266d6:	75 f4                	jne    c00266cc <__do_global_ctors_aux+0x14>
c00266d8:	58                   	pop    eax
c00266d9:	5b                   	pop    ebx
c00266da:	5d                   	pop    ebp
c00266db:	c3                   	ret    
c00266dc:	c3                   	ret    
c00266dd:	66 90                	xchg   ax,ax
c00266df:	90                   	nop

c00266e0 <__divdi3>:
c00266e0:	55                   	push   ebp
c00266e1:	57                   	push   edi
c00266e2:	56                   	push   esi
c00266e3:	53                   	push   ebx
c00266e4:	83 ec 1c             	sub    esp,0x1c
c00266e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266fe:	85 db                	test   ebx,ebx
c0026700:	0f 88 8e 00 00 00    	js     c0026794 <__divdi3+0xb4>
c0026706:	89 dd                	mov    ebp,ebx
c0026708:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026710:	89 d3                	mov    ebx,edx
c0026712:	85 d2                	test   edx,edx
c0026714:	79 0d                	jns    c0026723 <__divdi3+0x43>
c0026716:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002671a:	f7 d8                	neg    eax
c002671c:	83 d2 00             	adc    edx,0x0
c002671f:	f7 da                	neg    edx
c0026721:	89 d3                	mov    ebx,edx
c0026723:	89 c7                	mov    edi,eax
c0026725:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026728:	85 db                	test   ebx,ebx
c002672a:	75 48                	jne    c0026774 <__divdi3+0x94>
c002672c:	39 ef                	cmp    edi,ebp
c002672e:	76 24                	jbe    c0026754 <__divdi3+0x74>
c0026730:	89 ea                	mov    edx,ebp
c0026732:	f7 f7                	div    edi
c0026734:	89 c1                	mov    ecx,eax
c0026736:	31 f6                	xor    esi,esi
c0026738:	89 c8                	mov    eax,ecx
c002673a:	89 f2                	mov    edx,esi
c002673c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026740:	85 c9                	test   ecx,ecx
c0026742:	74 07                	je     c002674b <__divdi3+0x6b>
c0026744:	f7 d8                	neg    eax
c0026746:	83 d2 00             	adc    edx,0x0
c0026749:	f7 da                	neg    edx
c002674b:	83 c4 1c             	add    esp,0x1c
c002674e:	5b                   	pop    ebx
c002674f:	5e                   	pop    esi
c0026750:	5f                   	pop    edi
c0026751:	5d                   	pop    ebp
c0026752:	c3                   	ret    
c0026753:	90                   	nop
c0026754:	85 ff                	test   edi,edi
c0026756:	75 0b                	jne    c0026763 <__divdi3+0x83>
c0026758:	b8 01 00 00 00       	mov    eax,0x1
c002675d:	31 d2                	xor    edx,edx
c002675f:	f7 f3                	div    ebx
c0026761:	89 c7                	mov    edi,eax
c0026763:	31 d2                	xor    edx,edx
c0026765:	89 e8                	mov    eax,ebp
c0026767:	f7 f7                	div    edi
c0026769:	89 c6                	mov    esi,eax
c002676b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002676e:	f7 f7                	div    edi
c0026770:	89 c1                	mov    ecx,eax
c0026772:	eb c4                	jmp    c0026738 <__divdi3+0x58>
c0026774:	39 eb                	cmp    ebx,ebp
c0026776:	77 3c                	ja     c00267b4 <__divdi3+0xd4>
c0026778:	0f bd f3             	bsr    esi,ebx
c002677b:	83 f6 1f             	xor    esi,0x1f
c002677e:	75 40                	jne    c00267c0 <__divdi3+0xe0>
c0026780:	39 eb                	cmp    ebx,ebp
c0026782:	72 09                	jb     c002678d <__divdi3+0xad>
c0026784:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026787:	0f 87 97 00 00 00    	ja     c0026824 <__divdi3+0x144>
c002678d:	b9 01 00 00 00       	mov    ecx,0x1
c0026792:	eb a4                	jmp    c0026738 <__divdi3+0x58>
c0026794:	f7 d9                	neg    ecx
c0026796:	83 d3 00             	adc    ebx,0x0
c0026799:	f7 db                	neg    ebx
c002679b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002679e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267a2:	89 dd                	mov    ebp,ebx
c00267a4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267ac:	e9 5f ff ff ff       	jmp    c0026710 <__divdi3+0x30>
c00267b1:	8d 76 00             	lea    esi,[esi+0x0]
c00267b4:	31 f6                	xor    esi,esi
c00267b6:	31 c9                	xor    ecx,ecx
c00267b8:	e9 7b ff ff ff       	jmp    c0026738 <__divdi3+0x58>
c00267bd:	8d 76 00             	lea    esi,[esi+0x0]
c00267c0:	b8 20 00 00 00       	mov    eax,0x20
c00267c5:	29 f0                	sub    eax,esi
c00267c7:	89 f1                	mov    ecx,esi
c00267c9:	d3 e3                	shl    ebx,cl
c00267cb:	89 fa                	mov    edx,edi
c00267cd:	88 c1                	mov    cl,al
c00267cf:	d3 ea                	shr    edx,cl
c00267d1:	09 da                	or     edx,ebx
c00267d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267d7:	89 f1                	mov    ecx,esi
c00267d9:	d3 e7                	shl    edi,cl
c00267db:	89 eb                	mov    ebx,ebp
c00267dd:	88 c1                	mov    cl,al
c00267df:	d3 eb                	shr    ebx,cl
c00267e1:	89 f1                	mov    ecx,esi
c00267e3:	d3 e5                	shl    ebp,cl
c00267e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267e8:	88 c1                	mov    cl,al
c00267ea:	d3 ea                	shr    edx,cl
c00267ec:	09 d5                	or     ebp,edx
c00267ee:	89 e8                	mov    eax,ebp
c00267f0:	89 da                	mov    edx,ebx
c00267f2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267f6:	89 d3                	mov    ebx,edx
c00267f8:	89 c5                	mov    ebp,eax
c00267fa:	f7 e7                	mul    edi
c00267fc:	39 d3                	cmp    ebx,edx
c00267fe:	72 18                	jb     c0026818 <__divdi3+0x138>
c0026800:	74 0a                	je     c002680c <__divdi3+0x12c>
c0026802:	89 e9                	mov    ecx,ebp
c0026804:	31 f6                	xor    esi,esi
c0026806:	e9 2d ff ff ff       	jmp    c0026738 <__divdi3+0x58>
c002680b:	90                   	nop
c002680c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002680f:	89 f1                	mov    ecx,esi
c0026811:	d3 e7                	shl    edi,cl
c0026813:	39 c7                	cmp    edi,eax
c0026815:	73 eb                	jae    c0026802 <__divdi3+0x122>
c0026817:	90                   	nop
c0026818:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002681b:	31 f6                	xor    esi,esi
c002681d:	e9 16 ff ff ff       	jmp    c0026738 <__divdi3+0x58>
c0026822:	66 90                	xchg   ax,ax
c0026824:	31 c9                	xor    ecx,ecx
c0026826:	e9 0d ff ff ff       	jmp    c0026738 <__divdi3+0x58>
c002682b:	90                   	nop

c002682c <__moddi3>:
c002682c:	55                   	push   ebp
c002682d:	57                   	push   edi
c002682e:	56                   	push   esi
c002682f:	53                   	push   ebx
c0026830:	83 ec 2c             	sub    esp,0x2c
c0026833:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026837:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002683b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002683f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026843:	85 db                	test   ebx,ebx
c0026845:	0f 88 85 00 00 00    	js     c00268d0 <__moddi3+0xa4>
c002684b:	89 de                	mov    esi,ebx
c002684d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026855:	89 d7                	mov    edi,edx
c0026857:	85 d2                	test   edx,edx
c0026859:	79 09                	jns    c0026864 <__moddi3+0x38>
c002685b:	f7 d8                	neg    eax
c002685d:	83 d2 00             	adc    edx,0x0
c0026860:	f7 da                	neg    edx
c0026862:	89 d7                	mov    edi,edx
c0026864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026868:	89 cd                	mov    ebp,ecx
c002686a:	85 ff                	test   edi,edi
c002686c:	75 52                	jne    c00268c0 <__moddi3+0x94>
c002686e:	89 c3                	mov    ebx,eax
c0026870:	39 f0                	cmp    eax,esi
c0026872:	76 24                	jbe    c0026898 <__moddi3+0x6c>
c0026874:	89 c8                	mov    eax,ecx
c0026876:	89 f2                	mov    edx,esi
c0026878:	f7 f3                	div    ebx
c002687a:	89 d6                	mov    esi,edx
c002687c:	89 f0                	mov    eax,esi
c002687e:	31 d2                	xor    edx,edx
c0026880:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026884:	85 c9                	test   ecx,ecx
c0026886:	74 07                	je     c002688f <__moddi3+0x63>
c0026888:	f7 d8                	neg    eax
c002688a:	83 d2 00             	adc    edx,0x0
c002688d:	f7 da                	neg    edx
c002688f:	83 c4 2c             	add    esp,0x2c
c0026892:	5b                   	pop    ebx
c0026893:	5e                   	pop    esi
c0026894:	5f                   	pop    edi
c0026895:	5d                   	pop    ebp
c0026896:	c3                   	ret    
c0026897:	90                   	nop
c0026898:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002689c:	85 db                	test   ebx,ebx
c002689e:	75 0d                	jne    c00268ad <__moddi3+0x81>
c00268a0:	b8 01 00 00 00       	mov    eax,0x1
c00268a5:	31 d2                	xor    edx,edx
c00268a7:	f7 f7                	div    edi
c00268a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268ad:	89 f0                	mov    eax,esi
c00268af:	31 d2                	xor    edx,edx
c00268b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268b5:	f7 f7                	div    edi
c00268b7:	89 e8                	mov    eax,ebp
c00268b9:	f7 f7                	div    edi
c00268bb:	89 d6                	mov    esi,edx
c00268bd:	eb bd                	jmp    c002687c <__moddi3+0x50>
c00268bf:	90                   	nop
c00268c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268c4:	39 f7                	cmp    edi,esi
c00268c6:	76 20                	jbe    c00268e8 <__moddi3+0xbc>
c00268c8:	89 c8                	mov    eax,ecx
c00268ca:	89 f2                	mov    edx,esi
c00268cc:	eb b2                	jmp    c0026880 <__moddi3+0x54>
c00268ce:	66 90                	xchg   ax,ax
c00268d0:	f7 d9                	neg    ecx
c00268d2:	83 d3 00             	adc    ebx,0x0
c00268d5:	f7 db                	neg    ebx
c00268d7:	89 de                	mov    esi,ebx
c00268d9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268e1:	e9 6f ff ff ff       	jmp    c0026855 <__moddi3+0x29>
c00268e6:	66 90                	xchg   ax,ax
c00268e8:	0f bd c7             	bsr    eax,edi
c00268eb:	83 f0 1f             	xor    eax,0x1f
c00268ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268f2:	75 24                	jne    c0026918 <__moddi3+0xec>
c00268f4:	39 f7                	cmp    edi,esi
c00268f6:	72 06                	jb     c00268fe <__moddi3+0xd2>
c00268f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268fc:	77 0c                	ja     c002690a <__moddi3+0xde>
c00268fe:	89 e9                	mov    ecx,ebp
c0026900:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026904:	19 fe                	sbb    esi,edi
c0026906:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002690a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002690e:	89 f2                	mov    edx,esi
c0026910:	e9 6b ff ff ff       	jmp    c0026880 <__moddi3+0x54>
c0026915:	8d 76 00             	lea    esi,[esi+0x0]
c0026918:	b8 20 00 00 00       	mov    eax,0x20
c002691d:	89 c2                	mov    edx,eax
c002691f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026923:	29 da                	sub    edx,ebx
c0026925:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026929:	88 d9                	mov    cl,bl
c002692b:	d3 e7                	shl    edi,cl
c002692d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026931:	88 d1                	mov    cl,dl
c0026933:	d3 e8                	shr    eax,cl
c0026935:	09 c7                	or     edi,eax
c0026937:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002693b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002693f:	89 d8                	mov    eax,ebx
c0026941:	88 d9                	mov    cl,bl
c0026943:	d3 e7                	shl    edi,cl
c0026945:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026949:	89 f3                	mov    ebx,esi
c002694b:	88 d1                	mov    cl,dl
c002694d:	d3 eb                	shr    ebx,cl
c002694f:	89 c7                	mov    edi,eax
c0026951:	88 c1                	mov    cl,al
c0026953:	d3 e6                	shl    esi,cl
c0026955:	89 e8                	mov    eax,ebp
c0026957:	88 d1                	mov    cl,dl
c0026959:	d3 e8                	shr    eax,cl
c002695b:	09 f0                	or     eax,esi
c002695d:	89 f9                	mov    ecx,edi
c002695f:	d3 e5                	shl    ebp,cl
c0026961:	89 da                	mov    edx,ebx
c0026963:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026967:	89 d3                	mov    ebx,edx
c0026969:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002696d:	89 c6                	mov    esi,eax
c002696f:	89 d1                	mov    ecx,edx
c0026971:	39 d3                	cmp    ebx,edx
c0026973:	72 27                	jb     c002699c <__moddi3+0x170>
c0026975:	74 21                	je     c0026998 <__moddi3+0x16c>
c0026977:	29 f5                	sub    ebp,esi
c0026979:	19 cb                	sbb    ebx,ecx
c002697b:	89 de                	mov    esi,ebx
c002697d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026981:	d3 e6                	shl    esi,cl
c0026983:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026987:	89 f9                	mov    ecx,edi
c0026989:	d3 ed                	shr    ebp,cl
c002698b:	09 ee                	or     esi,ebp
c002698d:	89 f0                	mov    eax,esi
c002698f:	d3 eb                	shr    ebx,cl
c0026991:	89 da                	mov    edx,ebx
c0026993:	e9 e8 fe ff ff       	jmp    c0026880 <__moddi3+0x54>
c0026998:	39 c5                	cmp    ebp,eax
c002699a:	73 db                	jae    c0026977 <__moddi3+0x14b>
c002699c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269a0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269a4:	89 d1                	mov    ecx,edx
c00269a6:	89 c6                	mov    esi,eax
c00269a8:	eb cd                	jmp    c0026977 <__moddi3+0x14b>
c00269aa:	66 90                	xchg   ax,ax

c00269ac <__udivdi3>:
c00269ac:	55                   	push   ebp
c00269ad:	57                   	push   edi
c00269ae:	56                   	push   esi
c00269af:	53                   	push   ebx
c00269b0:	83 ec 1c             	sub    esp,0x1c
c00269b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269c3:	85 d2                	test   edx,edx
c00269c5:	75 41                	jne    c0026a08 <__udivdi3+0x5c>
c00269c7:	39 f7                	cmp    edi,esi
c00269c9:	76 15                	jbe    c00269e0 <__udivdi3+0x34>
c00269cb:	89 e8                	mov    eax,ebp
c00269cd:	89 f2                	mov    edx,esi
c00269cf:	f7 f7                	div    edi
c00269d1:	31 db                	xor    ebx,ebx
c00269d3:	89 da                	mov    edx,ebx
c00269d5:	83 c4 1c             	add    esp,0x1c
c00269d8:	5b                   	pop    ebx
c00269d9:	5e                   	pop    esi
c00269da:	5f                   	pop    edi
c00269db:	5d                   	pop    ebp
c00269dc:	c3                   	ret    
c00269dd:	8d 76 00             	lea    esi,[esi+0x0]
c00269e0:	89 f9                	mov    ecx,edi
c00269e2:	85 ff                	test   edi,edi
c00269e4:	75 0b                	jne    c00269f1 <__udivdi3+0x45>
c00269e6:	b8 01 00 00 00       	mov    eax,0x1
c00269eb:	31 d2                	xor    edx,edx
c00269ed:	f7 f7                	div    edi
c00269ef:	89 c1                	mov    ecx,eax
c00269f1:	31 d2                	xor    edx,edx
c00269f3:	89 f0                	mov    eax,esi
c00269f5:	f7 f1                	div    ecx
c00269f7:	89 c3                	mov    ebx,eax
c00269f9:	89 e8                	mov    eax,ebp
c00269fb:	f7 f1                	div    ecx
c00269fd:	89 da                	mov    edx,ebx
c00269ff:	83 c4 1c             	add    esp,0x1c
c0026a02:	5b                   	pop    ebx
c0026a03:	5e                   	pop    esi
c0026a04:	5f                   	pop    edi
c0026a05:	5d                   	pop    ebp
c0026a06:	c3                   	ret    
c0026a07:	90                   	nop
c0026a08:	39 f2                	cmp    edx,esi
c0026a0a:	77 1c                	ja     c0026a28 <__udivdi3+0x7c>
c0026a0c:	0f bd da             	bsr    ebx,edx
c0026a0f:	83 f3 1f             	xor    ebx,0x1f
c0026a12:	75 24                	jne    c0026a38 <__udivdi3+0x8c>
c0026a14:	39 f2                	cmp    edx,esi
c0026a16:	72 08                	jb     c0026a20 <__udivdi3+0x74>
c0026a18:	39 ef                	cmp    edi,ebp
c0026a1a:	0f 87 84 00 00 00    	ja     c0026aa4 <__udivdi3+0xf8>
c0026a20:	b8 01 00 00 00       	mov    eax,0x1
c0026a25:	eb ac                	jmp    c00269d3 <__udivdi3+0x27>
c0026a27:	90                   	nop
c0026a28:	31 db                	xor    ebx,ebx
c0026a2a:	31 c0                	xor    eax,eax
c0026a2c:	89 da                	mov    edx,ebx
c0026a2e:	83 c4 1c             	add    esp,0x1c
c0026a31:	5b                   	pop    ebx
c0026a32:	5e                   	pop    esi
c0026a33:	5f                   	pop    edi
c0026a34:	5d                   	pop    ebp
c0026a35:	c3                   	ret    
c0026a36:	66 90                	xchg   ax,ax
c0026a38:	b8 20 00 00 00       	mov    eax,0x20
c0026a3d:	29 d8                	sub    eax,ebx
c0026a3f:	88 d9                	mov    cl,bl
c0026a41:	d3 e2                	shl    edx,cl
c0026a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a47:	89 fa                	mov    edx,edi
c0026a49:	88 c1                	mov    cl,al
c0026a4b:	d3 ea                	shr    edx,cl
c0026a4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a51:	09 d1                	or     ecx,edx
c0026a53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a57:	88 d9                	mov    cl,bl
c0026a59:	d3 e7                	shl    edi,cl
c0026a5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a5f:	89 f7                	mov    edi,esi
c0026a61:	88 c1                	mov    cl,al
c0026a63:	d3 ef                	shr    edi,cl
c0026a65:	88 d9                	mov    cl,bl
c0026a67:	d3 e6                	shl    esi,cl
c0026a69:	89 ea                	mov    edx,ebp
c0026a6b:	88 c1                	mov    cl,al
c0026a6d:	d3 ea                	shr    edx,cl
c0026a6f:	09 d6                	or     esi,edx
c0026a71:	89 f0                	mov    eax,esi
c0026a73:	89 fa                	mov    edx,edi
c0026a75:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a79:	89 d7                	mov    edi,edx
c0026a7b:	89 c6                	mov    esi,eax
c0026a7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a81:	39 d7                	cmp    edi,edx
c0026a83:	72 13                	jb     c0026a98 <__udivdi3+0xec>
c0026a85:	74 09                	je     c0026a90 <__udivdi3+0xe4>
c0026a87:	89 f0                	mov    eax,esi
c0026a89:	31 db                	xor    ebx,ebx
c0026a8b:	e9 43 ff ff ff       	jmp    c00269d3 <__udivdi3+0x27>
c0026a90:	88 d9                	mov    cl,bl
c0026a92:	d3 e5                	shl    ebp,cl
c0026a94:	39 c5                	cmp    ebp,eax
c0026a96:	73 ef                	jae    c0026a87 <__udivdi3+0xdb>
c0026a98:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a9b:	31 db                	xor    ebx,ebx
c0026a9d:	e9 31 ff ff ff       	jmp    c00269d3 <__udivdi3+0x27>
c0026aa2:	66 90                	xchg   ax,ax
c0026aa4:	31 c0                	xor    eax,eax
c0026aa6:	e9 28 ff ff ff       	jmp    c00269d3 <__udivdi3+0x27>
c0026aab:	90                   	nop

c0026aac <__umoddi3>:
c0026aac:	55                   	push   ebp
c0026aad:	57                   	push   edi
c0026aae:	56                   	push   esi
c0026aaf:	53                   	push   ebx
c0026ab0:	83 ec 1c             	sub    esp,0x1c
c0026ab3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ab7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026abb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026abf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026ac3:	89 da                	mov    edx,ebx
c0026ac5:	85 c0                	test   eax,eax
c0026ac7:	75 37                	jne    c0026b00 <__umoddi3+0x54>
c0026ac9:	39 df                	cmp    edi,ebx
c0026acb:	76 13                	jbe    c0026ae0 <__umoddi3+0x34>
c0026acd:	89 f0                	mov    eax,esi
c0026acf:	f7 f7                	div    edi
c0026ad1:	89 d0                	mov    eax,edx
c0026ad3:	31 d2                	xor    edx,edx
c0026ad5:	83 c4 1c             	add    esp,0x1c
c0026ad8:	5b                   	pop    ebx
c0026ad9:	5e                   	pop    esi
c0026ada:	5f                   	pop    edi
c0026adb:	5d                   	pop    ebp
c0026adc:	c3                   	ret    
c0026add:	8d 76 00             	lea    esi,[esi+0x0]
c0026ae0:	89 fd                	mov    ebp,edi
c0026ae2:	85 ff                	test   edi,edi
c0026ae4:	75 0b                	jne    c0026af1 <__umoddi3+0x45>
c0026ae6:	b8 01 00 00 00       	mov    eax,0x1
c0026aeb:	31 d2                	xor    edx,edx
c0026aed:	f7 f7                	div    edi
c0026aef:	89 c5                	mov    ebp,eax
c0026af1:	89 d8                	mov    eax,ebx
c0026af3:	31 d2                	xor    edx,edx
c0026af5:	f7 f5                	div    ebp
c0026af7:	89 f0                	mov    eax,esi
c0026af9:	f7 f5                	div    ebp
c0026afb:	89 d0                	mov    eax,edx
c0026afd:	eb d4                	jmp    c0026ad3 <__umoddi3+0x27>
c0026aff:	90                   	nop
c0026b00:	89 f1                	mov    ecx,esi
c0026b02:	39 d8                	cmp    eax,ebx
c0026b04:	76 0a                	jbe    c0026b10 <__umoddi3+0x64>
c0026b06:	89 f0                	mov    eax,esi
c0026b08:	83 c4 1c             	add    esp,0x1c
c0026b0b:	5b                   	pop    ebx
c0026b0c:	5e                   	pop    esi
c0026b0d:	5f                   	pop    edi
c0026b0e:	5d                   	pop    ebp
c0026b0f:	c3                   	ret    
c0026b10:	0f bd e8             	bsr    ebp,eax
c0026b13:	83 f5 1f             	xor    ebp,0x1f
c0026b16:	75 1c                	jne    c0026b34 <__umoddi3+0x88>
c0026b18:	39 d8                	cmp    eax,ebx
c0026b1a:	72 04                	jb     c0026b20 <__umoddi3+0x74>
c0026b1c:	39 f7                	cmp    edi,esi
c0026b1e:	77 08                	ja     c0026b28 <__umoddi3+0x7c>
c0026b20:	89 da                	mov    edx,ebx
c0026b22:	29 fe                	sub    esi,edi
c0026b24:	19 c2                	sbb    edx,eax
c0026b26:	89 f1                	mov    ecx,esi
c0026b28:	89 c8                	mov    eax,ecx
c0026b2a:	83 c4 1c             	add    esp,0x1c
c0026b2d:	5b                   	pop    ebx
c0026b2e:	5e                   	pop    esi
c0026b2f:	5f                   	pop    edi
c0026b30:	5d                   	pop    ebp
c0026b31:	c3                   	ret    
c0026b32:	66 90                	xchg   ax,ax
c0026b34:	ba 20 00 00 00       	mov    edx,0x20
c0026b39:	29 ea                	sub    edx,ebp
c0026b3b:	89 e9                	mov    ecx,ebp
c0026b3d:	d3 e0                	shl    eax,cl
c0026b3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b43:	89 f8                	mov    eax,edi
c0026b45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b49:	88 d1                	mov    cl,dl
c0026b4b:	d3 e8                	shr    eax,cl
c0026b4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b51:	09 c1                	or     ecx,eax
c0026b53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b57:	89 e9                	mov    ecx,ebp
c0026b59:	d3 e7                	shl    edi,cl
c0026b5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b5f:	89 d8                	mov    eax,ebx
c0026b61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b65:	88 d1                	mov    cl,dl
c0026b67:	d3 e8                	shr    eax,cl
c0026b69:	89 c7                	mov    edi,eax
c0026b6b:	89 e9                	mov    ecx,ebp
c0026b6d:	d3 e3                	shl    ebx,cl
c0026b6f:	89 f0                	mov    eax,esi
c0026b71:	88 d1                	mov    cl,dl
c0026b73:	d3 e8                	shr    eax,cl
c0026b75:	09 d8                	or     eax,ebx
c0026b77:	89 e9                	mov    ecx,ebp
c0026b79:	d3 e6                	shl    esi,cl
c0026b7b:	89 f3                	mov    ebx,esi
c0026b7d:	89 fa                	mov    edx,edi
c0026b7f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b83:	89 d1                	mov    ecx,edx
c0026b85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b89:	89 c6                	mov    esi,eax
c0026b8b:	89 d7                	mov    edi,edx
c0026b8d:	39 d1                	cmp    ecx,edx
c0026b8f:	72 27                	jb     c0026bb8 <__umoddi3+0x10c>
c0026b91:	74 21                	je     c0026bb4 <__umoddi3+0x108>
c0026b93:	89 ca                	mov    edx,ecx
c0026b95:	29 f3                	sub    ebx,esi
c0026b97:	19 fa                	sbb    edx,edi
c0026b99:	89 d0                	mov    eax,edx
c0026b9b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b9f:	d3 e0                	shl    eax,cl
c0026ba1:	89 e9                	mov    ecx,ebp
c0026ba3:	d3 eb                	shr    ebx,cl
c0026ba5:	09 d8                	or     eax,ebx
c0026ba7:	d3 ea                	shr    edx,cl
c0026ba9:	83 c4 1c             	add    esp,0x1c
c0026bac:	5b                   	pop    ebx
c0026bad:	5e                   	pop    esi
c0026bae:	5f                   	pop    edi
c0026baf:	5d                   	pop    ebp
c0026bb0:	c3                   	ret    
c0026bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0026bb4:	39 c3                	cmp    ebx,eax
c0026bb6:	73 db                	jae    c0026b93 <__umoddi3+0xe7>
c0026bb8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bbc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bc0:	89 d7                	mov    edi,edx
c0026bc2:	89 c6                	mov    esi,eax
c0026bc4:	eb cd                	jmp    c0026b93 <__umoddi3+0xe7>

c0026bc6 <__addsf3>:
c0026bc6:	55                   	push   ebp
c0026bc7:	89 e5                	mov    ebp,esp
c0026bc9:	57                   	push   edi
c0026bca:	56                   	push   esi
c0026bcb:	53                   	push   ebx
c0026bcc:	83 ec 08             	sub    esp,0x8
c0026bcf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026bd2:	89 fa                	mov    edx,edi
c0026bd4:	89 f8                	mov    eax,edi
c0026bd6:	c1 f8 17             	sar    eax,0x17
c0026bd9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bdc:	c1 e2 08             	shl    edx,0x8
c0026bdf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026be5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026be8:	89 de                	mov    esi,ebx
c0026bea:	c1 fe 17             	sar    esi,0x17
c0026bed:	c1 e3 08             	shl    ebx,0x8
c0026bf0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026bf6:	31 f0                	xor    eax,esi
c0026bf8:	0f 88 3b 01 00 00    	js     c0026d39 <__addsf3+0x173>
c0026bfe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c01:	29 f1                	sub    ecx,esi
c0026c03:	85 c9                	test   ecx,ecx
c0026c05:	7e 54                	jle    c0026c5b <__addsf3+0x95>
c0026c07:	89 f0                	mov    eax,esi
c0026c09:	84 c0                	test   al,al
c0026c0b:	75 10                	jne    c0026c1d <__addsf3+0x57>
c0026c0d:	85 db                	test   ebx,ebx
c0026c0f:	0f 84 aa 02 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026c15:	49                   	dec    ecx
c0026c16:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c19:	74 38                	je     c0026c53 <__addsf3+0x8d>
c0026c1b:	eb 13                	jmp    c0026c30 <__addsf3+0x6a>
c0026c1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c20:	f7 d0                	not    eax
c0026c22:	84 c0                	test   al,al
c0026c24:	0f 84 95 02 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026c2a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c30:	83 f9 1f             	cmp    ecx,0x1f
c0026c33:	0f 8f 86 02 00 00    	jg     c0026ebf <__addsf3+0x2f9>
c0026c39:	89 de                	mov    esi,ebx
c0026c3b:	d3 ee                	shr    esi,cl
c0026c3d:	b8 20 00 00 00       	mov    eax,0x20
c0026c42:	29 c8                	sub    eax,ecx
c0026c44:	89 c1                	mov    ecx,eax
c0026c46:	d3 e3                	shl    ebx,cl
c0026c48:	31 c0                	xor    eax,eax
c0026c4a:	85 db                	test   ebx,ebx
c0026c4c:	0f 95 c0             	setne  al
c0026c4f:	09 f0                	or     eax,esi
c0026c51:	01 d0                	add    eax,edx
c0026c53:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c56:	e9 b6 00 00 00       	jmp    c0026d11 <__addsf3+0x14b>
c0026c5b:	74 5c                	je     c0026cb9 <__addsf3+0xf3>
c0026c5d:	89 f1                	mov    ecx,esi
c0026c5f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c62:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c65:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c69:	75 14                	jne    c0026c7f <__addsf3+0xb9>
c0026c6b:	85 d2                	test   edx,edx
c0026c6d:	0f 84 4c 02 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026c73:	49                   	dec    ecx
c0026c74:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c77:	0f 84 94 00 00 00    	je     c0026d11 <__addsf3+0x14b>
c0026c7d:	eb 12                	jmp    c0026c91 <__addsf3+0xcb>
c0026c7f:	89 f0                	mov    eax,esi
c0026c81:	f7 d0                	not    eax
c0026c83:	84 c0                	test   al,al
c0026c85:	0f 84 34 02 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026c8b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c91:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c94:	83 f9 1f             	cmp    ecx,0x1f
c0026c97:	0f 8f 22 02 00 00    	jg     c0026ebf <__addsf3+0x2f9>
c0026c9d:	89 d7                	mov    edi,edx
c0026c9f:	d3 ef                	shr    edi,cl
c0026ca1:	b8 20 00 00 00       	mov    eax,0x20
c0026ca6:	29 c8                	sub    eax,ecx
c0026ca8:	89 c1                	mov    ecx,eax
c0026caa:	d3 e2                	shl    edx,cl
c0026cac:	31 c0                	xor    eax,eax
c0026cae:	85 d2                	test   edx,edx
c0026cb0:	0f 95 c0             	setne  al
c0026cb3:	09 f8                	or     eax,edi
c0026cb5:	01 d8                	add    eax,ebx
c0026cb7:	eb 58                	jmp    c0026d11 <__addsf3+0x14b>
c0026cb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cbc:	8d 70 01             	lea    esi,[eax+0x1]
c0026cbf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cc5:	75 32                	jne    c0026cf9 <__addsf3+0x133>
c0026cc7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ccb:	75 1f                	jne    c0026cec <__addsf3+0x126>
c0026ccd:	85 d2                	test   edx,edx
c0026ccf:	0f 84 e0 01 00 00    	je     c0026eb5 <__addsf3+0x2ef>
c0026cd5:	85 db                	test   ebx,ebx
c0026cd7:	0f 84 e2 01 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026cdd:	89 d0                	mov    eax,edx
c0026cdf:	01 d8                	add    eax,ebx
c0026ce1:	0f 89 a9 01 00 00    	jns    c0026e90 <__addsf3+0x2ca>
c0026ce7:	e9 9d 01 00 00       	jmp    c0026e89 <__addsf3+0x2c3>
c0026cec:	85 d2                	test   edx,edx
c0026cee:	0f 85 cb 01 00 00    	jne    c0026ebf <__addsf3+0x2f9>
c0026cf4:	e9 bc 01 00 00       	jmp    c0026eb5 <__addsf3+0x2ef>
c0026cf9:	31 c0                	xor    eax,eax
c0026cfb:	89 f1                	mov    ecx,esi
c0026cfd:	f7 d1                	not    ecx
c0026cff:	84 c9                	test   cl,cl
c0026d01:	0f 84 90 01 00 00    	je     c0026e97 <__addsf3+0x2d1>
c0026d07:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d0a:	d1 e8                	shr    eax,1
c0026d0c:	e9 86 01 00 00       	jmp    c0026e97 <__addsf3+0x2d1>
c0026d11:	85 c0                	test   eax,eax
c0026d13:	0f 89 7e 01 00 00    	jns    c0026e97 <__addsf3+0x2d1>
c0026d19:	46                   	inc    esi
c0026d1a:	89 f2                	mov    edx,esi
c0026d1c:	f7 d2                	not    edx
c0026d1e:	84 d2                	test   dl,dl
c0026d20:	0f 84 6f 01 00 00    	je     c0026e95 <__addsf3+0x2cf>
c0026d26:	89 c2                	mov    edx,eax
c0026d28:	83 e2 01             	and    edx,0x1
c0026d2b:	d1 e8                	shr    eax,1
c0026d2d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d32:	09 d0                	or     eax,edx
c0026d34:	e9 5e 01 00 00       	jmp    c0026e97 <__addsf3+0x2d1>
c0026d39:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d40:	89 f0                	mov    eax,esi
c0026d42:	0f b6 c0             	movzx  eax,al
c0026d45:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d48:	29 c1                	sub    ecx,eax
c0026d4a:	85 c9                	test   ecx,ecx
c0026d4c:	7e 55                	jle    c0026da3 <__addsf3+0x1dd>
c0026d4e:	85 c0                	test   eax,eax
c0026d50:	75 11                	jne    c0026d63 <__addsf3+0x19d>
c0026d52:	85 db                	test   ebx,ebx
c0026d54:	0f 84 65 01 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026d5a:	49                   	dec    ecx
c0026d5b:	75 19                	jne    c0026d76 <__addsf3+0x1b0>
c0026d5d:	89 d0                	mov    eax,edx
c0026d5f:	29 d8                	sub    eax,ebx
c0026d61:	eb 38                	jmp    c0026d9b <__addsf3+0x1d5>
c0026d63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d66:	f7 d0                	not    eax
c0026d68:	84 c0                	test   al,al
c0026d6a:	0f 84 4f 01 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026d70:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d76:	83 f9 1f             	cmp    ecx,0x1f
c0026d79:	0f 8f 40 01 00 00    	jg     c0026ebf <__addsf3+0x2f9>
c0026d7f:	89 de                	mov    esi,ebx
c0026d81:	d3 ee                	shr    esi,cl
c0026d83:	b8 20 00 00 00       	mov    eax,0x20
c0026d88:	29 c8                	sub    eax,ecx
c0026d8a:	89 c1                	mov    ecx,eax
c0026d8c:	d3 e3                	shl    ebx,cl
c0026d8e:	31 c0                	xor    eax,eax
c0026d90:	85 db                	test   ebx,ebx
c0026d92:	0f 95 c0             	setne  al
c0026d95:	09 f0                	or     eax,esi
c0026d97:	29 c2                	sub    edx,eax
c0026d99:	89 d0                	mov    eax,edx
c0026d9b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d9e:	e9 af 00 00 00       	jmp    c0026e52 <__addsf3+0x28c>
c0026da3:	74 5c                	je     c0026e01 <__addsf3+0x23b>
c0026da5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026da8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dab:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026daf:	75 14                	jne    c0026dc5 <__addsf3+0x1ff>
c0026db1:	85 d2                	test   edx,edx
c0026db3:	0f 84 06 01 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026db9:	48                   	dec    eax
c0026dba:	75 1b                	jne    c0026dd7 <__addsf3+0x211>
c0026dbc:	89 d8                	mov    eax,ebx
c0026dbe:	29 d0                	sub    eax,edx
c0026dc0:	e9 8d 00 00 00       	jmp    c0026e52 <__addsf3+0x28c>
c0026dc5:	89 f1                	mov    ecx,esi
c0026dc7:	f7 d1                	not    ecx
c0026dc9:	84 c9                	test   cl,cl
c0026dcb:	0f 84 ee 00 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026dd1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dd7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dda:	83 f8 1f             	cmp    eax,0x1f
c0026ddd:	0f 8f dc 00 00 00    	jg     c0026ebf <__addsf3+0x2f9>
c0026de3:	89 d7                	mov    edi,edx
c0026de5:	88 c1                	mov    cl,al
c0026de7:	d3 ef                	shr    edi,cl
c0026de9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dee:	29 c1                	sub    ecx,eax
c0026df0:	d3 e2                	shl    edx,cl
c0026df2:	31 c0                	xor    eax,eax
c0026df4:	85 d2                	test   edx,edx
c0026df6:	0f 95 c0             	setne  al
c0026df9:	09 f8                	or     eax,edi
c0026dfb:	29 c3                	sub    ebx,eax
c0026dfd:	89 d8                	mov    eax,ebx
c0026dff:	eb 51                	jmp    c0026e52 <__addsf3+0x28c>
c0026e01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e04:	40                   	inc    eax
c0026e05:	a8 fe                	test   al,0xfe
c0026e07:	75 3d                	jne    c0026e46 <__addsf3+0x280>
c0026e09:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e0d:	0f 85 a7 00 00 00    	jne    c0026eba <__addsf3+0x2f4>
c0026e13:	85 d2                	test   edx,edx
c0026e15:	75 12                	jne    c0026e29 <__addsf3+0x263>
c0026e17:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e1a:	85 db                	test   ebx,ebx
c0026e1c:	0f 85 9d 00 00 00    	jne    c0026ebf <__addsf3+0x2f9>
c0026e22:	31 ff                	xor    edi,edi
c0026e24:	e9 96 00 00 00       	jmp    c0026ebf <__addsf3+0x2f9>
c0026e29:	85 db                	test   ebx,ebx
c0026e2b:	0f 84 8e 00 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026e31:	89 d0                	mov    eax,edx
c0026e33:	29 d8                	sub    eax,ebx
c0026e35:	79 06                	jns    c0026e3d <__addsf3+0x277>
c0026e37:	89 d8                	mov    eax,ebx
c0026e39:	29 d0                	sub    eax,edx
c0026e3b:	eb 5a                	jmp    c0026e97 <__addsf3+0x2d1>
c0026e3d:	bf 00 00 00 00       	mov    edi,0x0
c0026e42:	74 7b                	je     c0026ebf <__addsf3+0x2f9>
c0026e44:	eb 4a                	jmp    c0026e90 <__addsf3+0x2ca>
c0026e46:	89 d0                	mov    eax,edx
c0026e48:	29 d8                	sub    eax,ebx
c0026e4a:	79 12                	jns    c0026e5e <__addsf3+0x298>
c0026e4c:	89 d8                	mov    eax,ebx
c0026e4e:	29 d0                	sub    eax,edx
c0026e50:	eb 09                	jmp    c0026e5b <__addsf3+0x295>
c0026e52:	85 c0                	test   eax,eax
c0026e54:	79 41                	jns    c0026e97 <__addsf3+0x2d1>
c0026e56:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e5b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e5e:	31 f6                	xor    esi,esi
c0026e60:	85 c0                	test   eax,eax
c0026e62:	74 33                	je     c0026e97 <__addsf3+0x2d1>
c0026e64:	0f bd c8             	bsr    ecx,eax
c0026e67:	83 f1 1f             	xor    ecx,0x1f
c0026e6a:	d3 e0                	shl    eax,cl
c0026e6c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e70:	39 ca                	cmp    edx,ecx
c0026e72:	7f 10                	jg     c0026e84 <__addsf3+0x2be>
c0026e74:	29 d1                	sub    ecx,edx
c0026e76:	41                   	inc    ecx
c0026e77:	d3 e8                	shr    eax,cl
c0026e79:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e7c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e82:	eb 13                	jmp    c0026e97 <__addsf3+0x2d1>
c0026e84:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e87:	29 ce                	sub    esi,ecx
c0026e89:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e8e:	eb 07                	jmp    c0026e97 <__addsf3+0x2d1>
c0026e90:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e93:	eb 02                	jmp    c0026e97 <__addsf3+0x2d1>
c0026e95:	31 c0                	xor    eax,eax
c0026e97:	89 c2                	mov    edx,eax
c0026e99:	c1 ea 08             	shr    edx,0x8
c0026e9c:	a8 7f                	test   al,0x7f
c0026e9e:	0f 95 c1             	setne  cl
c0026ea1:	09 d1                	or     ecx,edx
c0026ea3:	83 e1 01             	and    ecx,0x1
c0026ea6:	c1 e8 07             	shr    eax,0x7
c0026ea9:	21 c8                	and    eax,ecx
c0026eab:	c1 e6 17             	shl    esi,0x17
c0026eae:	09 d6                	or     esi,edx
c0026eb0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026eb3:	eb 0a                	jmp    c0026ebf <__addsf3+0x2f9>
c0026eb5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eb8:	eb 05                	jmp    c0026ebf <__addsf3+0x2f9>
c0026eba:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ebf:	89 f8                	mov    eax,edi
c0026ec1:	5a                   	pop    edx
c0026ec2:	59                   	pop    ecx
c0026ec3:	5b                   	pop    ebx
c0026ec4:	5e                   	pop    esi
c0026ec5:	5f                   	pop    edi
c0026ec6:	5d                   	pop    ebp
c0026ec7:	c3                   	ret    

c0026ec8 <__subsf3>:
c0026ec8:	55                   	push   ebp
c0026ec9:	89 e5                	mov    ebp,esp
c0026ecb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ece:	05 00 00 00 80       	add    eax,0x80000000
c0026ed3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ed6:	5d                   	pop    ebp
c0026ed7:	e9 ea fc ff ff       	jmp    c0026bc6 <__addsf3>

c0026edc <__negsf2>:
c0026edc:	55                   	push   ebp
c0026edd:	89 e5                	mov    ebp,esp
c0026edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ee2:	05 00 00 00 80       	add    eax,0x80000000
c0026ee7:	5d                   	pop    ebp
c0026ee8:	c3                   	ret    

c0026ee9 <__mulsf3>:
c0026ee9:	55                   	push   ebp
c0026eea:	89 e5                	mov    ebp,esp
c0026eec:	57                   	push   edi
c0026eed:	56                   	push   esi
c0026eee:	53                   	push   ebx
c0026eef:	83 ec 1c             	sub    esp,0x1c
c0026ef2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026ef5:	89 f0                	mov    eax,esi
c0026ef7:	89 f1                	mov    ecx,esi
c0026ef9:	c1 f9 17             	sar    ecx,0x17
c0026efc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026eff:	c1 e0 08             	shl    eax,0x8
c0026f02:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f07:	89 c1                	mov    ecx,eax
c0026f09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f0c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f0f:	89 c7                	mov    edi,eax
c0026f11:	c1 ff 17             	sar    edi,0x17
c0026f14:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f18:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f1b:	89 f8                	mov    eax,edi
c0026f1d:	0f b6 c0             	movzx  eax,al
c0026f20:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f23:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f27:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f2a:	42                   	inc    edx
c0026f2b:	80 e2 fe             	and    dl,0xfe
c0026f2e:	75 7b                	jne    c0026fab <__mulsf3+0xc2>
c0026f30:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f34:	74 54                	je     c0026f8a <__mulsf3+0xa1>
c0026f36:	85 c9                	test   ecx,ecx
c0026f38:	0f 85 64 01 00 00    	jne    c00270a2 <__mulsf3+0x1b9>
c0026f3e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f41:	80 e2 fe             	and    dl,0xfe
c0026f44:	75 1f                	jne    c0026f65 <__mulsf3+0x7c>
c0026f46:	85 c0                	test   eax,eax
c0026f48:	b8 00 00 00 00       	mov    eax,0x0
c0026f4d:	74 29                	je     c0026f78 <__mulsf3+0x8f>
c0026f4f:	53                   	push   ebx
c0026f50:	53                   	push   ebx
c0026f51:	50                   	push   eax
c0026f52:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f55:	e8 96 05 00 00       	call   c00274f0 <__nesf2>
c0026f5a:	83 c4 10             	add    esp,0x10
c0026f5d:	85 c0                	test   eax,eax
c0026f5f:	0f 85 3a 01 00 00    	jne    c002709f <__mulsf3+0x1b6>
c0026f65:	85 ff                	test   edi,edi
c0026f67:	0f 89 35 01 00 00    	jns    c00270a2 <__mulsf3+0x1b9>
c0026f6d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f73:	e9 2a 01 00 00       	jmp    c00270a2 <__mulsf3+0x1b9>
c0026f78:	51                   	push   ecx
c0026f79:	51                   	push   ecx
c0026f7a:	50                   	push   eax
c0026f7b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f7e:	e8 6d 05 00 00       	call   c00274f0 <__nesf2>
c0026f83:	83 c4 10             	add    esp,0x10
c0026f86:	85 c0                	test   eax,eax
c0026f88:	eb 15                	jmp    c0026f9f <__mulsf3+0xb6>
c0026f8a:	85 c9                	test   ecx,ecx
c0026f8c:	74 0b                	je     c0026f99 <__mulsf3+0xb0>
c0026f8e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f91:	01 c9                	add    ecx,ecx
c0026f93:	78 16                	js     c0026fab <__mulsf3+0xc2>
c0026f95:	89 d3                	mov    ebx,edx
c0026f97:	eb f5                	jmp    c0026f8e <__mulsf3+0xa5>
c0026f99:	89 f8                	mov    eax,edi
c0026f9b:	f7 d0                	not    eax
c0026f9d:	84 c0                	test   al,al
c0026f9f:	75 c4                	jne    c0026f65 <__mulsf3+0x7c>
c0026fa1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fa6:	e9 f7 00 00 00       	jmp    c00270a2 <__mulsf3+0x1b9>
c0026fab:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fae:	c1 e6 08             	shl    esi,0x8
c0026fb1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fb7:	8d 57 01             	lea    edx,[edi+0x1]
c0026fba:	80 e2 fe             	and    dl,0xfe
c0026fbd:	75 63                	jne    c0027022 <__mulsf3+0x139>
c0026fbf:	85 c0                	test   eax,eax
c0026fc1:	74 2f                	je     c0026ff2 <__mulsf3+0x109>
c0026fc3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fc7:	0f 89 d2 00 00 00    	jns    c002709f <__mulsf3+0x1b6>
c0026fcd:	52                   	push   edx
c0026fce:	52                   	push   edx
c0026fcf:	6a 00                	push   0x0
c0026fd1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fd4:	e8 dc 04 00 00       	call   c00274b5 <__eqsf2>
c0026fd9:	83 c4 10             	add    esp,0x10
c0026fdc:	85 c0                	test   eax,eax
c0026fde:	0f 85 bb 00 00 00    	jne    c002709f <__mulsf3+0x1b6>
c0026fe4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fe7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026fed:	e9 b0 00 00 00       	jmp    c00270a2 <__mulsf3+0x1b9>
c0026ff2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ff5:	50                   	push   eax
c0026ff6:	50                   	push   eax
c0026ff7:	6a 00                	push   0x0
c0026ff9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ffc:	e8 b4 04 00 00       	call   c00274b5 <__eqsf2>
c0027001:	83 c4 10             	add    esp,0x10
c0027004:	85 c0                	test   eax,eax
c0027006:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027009:	75 0c                	jne    c0027017 <__mulsf3+0x12e>
c002700b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002700f:	0f 89 8a 00 00 00    	jns    c002709f <__mulsf3+0x1b6>
c0027015:	eb cd                	jmp    c0026fe4 <__mulsf3+0xfb>
c0027017:	8d 43 ff             	lea    eax,[ebx-0x1]
c002701a:	01 f6                	add    esi,esi
c002701c:	78 04                	js     c0027022 <__mulsf3+0x139>
c002701e:	89 c3                	mov    ebx,eax
c0027020:	eb f5                	jmp    c0027017 <__mulsf3+0x12e>
c0027022:	89 c8                	mov    eax,ecx
c0027024:	0d 00 00 00 80       	or     eax,0x80000000
c0027029:	81 ce 00 00 00 80    	or     esi,0x80000000
c002702f:	f7 e6                	mul    esi
c0027031:	85 c0                	test   eax,eax
c0027033:	0f 95 c0             	setne  al
c0027036:	0f b6 c0             	movzx  eax,al
c0027039:	09 c2                	or     edx,eax
c002703b:	78 03                	js     c0027040 <__mulsf3+0x157>
c002703d:	01 d2                	add    edx,edx
c002703f:	4b                   	dec    ebx
c0027040:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027046:	7f 22                	jg     c002706a <__mulsf3+0x181>
c0027048:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002704e:	85 db                	test   ebx,ebx
c0027050:	7f 23                	jg     c0027075 <__mulsf3+0x18c>
c0027052:	83 fb e9             	cmp    ebx,0xffffffe9
c0027055:	7c 1a                	jl     c0027071 <__mulsf3+0x188>
c0027057:	81 ca 00 00 00 80    	or     edx,0x80000000
c002705d:	b9 01 00 00 00       	mov    ecx,0x1
c0027062:	29 d9                	sub    ecx,ebx
c0027064:	d3 ea                	shr    edx,cl
c0027066:	31 db                	xor    ebx,ebx
c0027068:	eb 0b                	jmp    c0027075 <__mulsf3+0x18c>
c002706a:	bb ff 00 00 00       	mov    ebx,0xff
c002706f:	eb 02                	jmp    c0027073 <__mulsf3+0x18a>
c0027071:	31 db                	xor    ebx,ebx
c0027073:	31 d2                	xor    edx,edx
c0027075:	89 d0                	mov    eax,edx
c0027077:	c1 e8 08             	shr    eax,0x8
c002707a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002707d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027083:	09 fb                	or     ebx,edi
c0027085:	c1 e3 17             	shl    ebx,0x17
c0027088:	09 c3                	or     ebx,eax
c002708a:	f6 c2 7f             	test   dl,0x7f
c002708d:	0f 95 c1             	setne  cl
c0027090:	09 c8                	or     eax,ecx
c0027092:	83 e0 01             	and    eax,0x1
c0027095:	c1 ea 07             	shr    edx,0x7
c0027098:	21 c2                	and    edx,eax
c002709a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002709d:	eb 03                	jmp    c00270a2 <__mulsf3+0x1b9>
c002709f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270a2:	89 f0                	mov    eax,esi
c00270a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270a7:	5b                   	pop    ebx
c00270a8:	5e                   	pop    esi
c00270a9:	5f                   	pop    edi
c00270aa:	5d                   	pop    ebp
c00270ab:	c3                   	ret    

c00270ac <__divsf3>:
c00270ac:	55                   	push   ebp
c00270ad:	89 e5                	mov    ebp,esp
c00270af:	57                   	push   edi
c00270b0:	56                   	push   esi
c00270b1:	53                   	push   ebx
c00270b2:	83 ec 1c             	sub    esp,0x1c
c00270b5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270b8:	89 d8                	mov    eax,ebx
c00270ba:	89 d9                	mov    ecx,ebx
c00270bc:	c1 f9 17             	sar    ecx,0x17
c00270bf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270c2:	c1 e0 08             	shl    eax,0x8
c00270c5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270ca:	89 c1                	mov    ecx,eax
c00270cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270d2:	89 c7                	mov    edi,eax
c00270d4:	c1 ff 17             	sar    edi,0x17
c00270d7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270db:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270de:	89 f8                	mov    eax,edi
c00270e0:	0f b6 c0             	movzx  eax,al
c00270e3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270e6:	29 c6                	sub    esi,eax
c00270e8:	83 c6 7f             	add    esi,0x7f
c00270eb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270ee:	42                   	inc    edx
c00270ef:	80 e2 fe             	and    dl,0xfe
c00270f2:	0f 85 9c 00 00 00    	jne    c0027194 <__divsf3+0xe8>
c00270f8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270fc:	74 33                	je     c0027131 <__divsf3+0x85>
c00270fe:	85 c9                	test   ecx,ecx
c0027100:	0f 85 c7 01 00 00    	jne    c00272cd <__divsf3+0x221>
c0027106:	8d 57 01             	lea    edx,[edi+0x1]
c0027109:	80 e2 fe             	and    dl,0xfe
c002710c:	75 2f                	jne    c002713d <__divsf3+0x91>
c002710e:	85 c0                	test   eax,eax
c0027110:	74 2b                	je     c002713d <__divsf3+0x91>
c0027112:	51                   	push   ecx
c0027113:	51                   	push   ecx
c0027114:	6a 00                	push   0x0
c0027116:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027119:	e8 d2 03 00 00       	call   c00274f0 <__nesf2>
c002711e:	83 c4 10             	add    esp,0x10
c0027121:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027124:	85 c0                	test   eax,eax
c0027126:	0f 85 a1 01 00 00    	jne    c00272cd <__divsf3+0x221>
c002712c:	e9 92 01 00 00       	jmp    c00272c3 <__divsf3+0x217>
c0027131:	85 c9                	test   ecx,ecx
c0027133:	75 1b                	jne    c0027150 <__divsf3+0xa4>
c0027135:	8d 57 01             	lea    edx,[edi+0x1]
c0027138:	80 e2 fe             	and    dl,0xfe
c002713b:	74 1e                	je     c002715b <__divsf3+0xaf>
c002713d:	85 ff                	test   edi,edi
c002713f:	0f 89 88 01 00 00    	jns    c00272cd <__divsf3+0x221>
c0027145:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002714b:	e9 7d 01 00 00       	jmp    c00272cd <__divsf3+0x221>
c0027150:	8d 56 ff             	lea    edx,[esi-0x1]
c0027153:	01 c9                	add    ecx,ecx
c0027155:	78 3d                	js     c0027194 <__divsf3+0xe8>
c0027157:	89 d6                	mov    esi,edx
c0027159:	eb f5                	jmp    c0027150 <__divsf3+0xa4>
c002715b:	85 c0                	test   eax,eax
c002715d:	b8 00 00 00 00       	mov    eax,0x0
c0027162:	74 18                	je     c002717c <__divsf3+0xd0>
c0027164:	52                   	push   edx
c0027165:	52                   	push   edx
c0027166:	50                   	push   eax
c0027167:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002716a:	e8 81 03 00 00       	call   c00274f0 <__nesf2>
c002716f:	83 c4 10             	add    esp,0x10
c0027172:	85 c0                	test   eax,eax
c0027174:	0f 85 50 01 00 00    	jne    c00272ca <__divsf3+0x21e>
c002717a:	eb c1                	jmp    c002713d <__divsf3+0x91>
c002717c:	56                   	push   esi
c002717d:	56                   	push   esi
c002717e:	50                   	push   eax
c002717f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027182:	e8 69 03 00 00       	call   c00274f0 <__nesf2>
c0027187:	83 c4 10             	add    esp,0x10
c002718a:	85 c0                	test   eax,eax
c002718c:	0f 84 31 01 00 00    	je     c00272c3 <__divsf3+0x217>
c0027192:	eb a9                	jmp    c002713d <__divsf3+0x91>
c0027194:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027197:	c1 e3 08             	shl    ebx,0x8
c002719a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271a0:	8d 57 01             	lea    edx,[edi+0x1]
c00271a3:	80 e2 fe             	and    dl,0xfe
c00271a6:	75 71                	jne    c0027219 <__divsf3+0x16d>
c00271a8:	85 c0                	test   eax,eax
c00271aa:	ba 00 00 00 00       	mov    edx,0x0
c00271af:	74 2f                	je     c00271e0 <__divsf3+0x134>
c00271b1:	51                   	push   ecx
c00271b2:	51                   	push   ecx
c00271b3:	52                   	push   edx
c00271b4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271b7:	e8 f9 02 00 00       	call   c00274b5 <__eqsf2>
c00271bc:	83 c4 10             	add    esp,0x10
c00271bf:	85 c0                	test   eax,eax
c00271c1:	0f 85 03 01 00 00    	jne    c00272ca <__divsf3+0x21e>
c00271c7:	31 d2                	xor    edx,edx
c00271c9:	89 d3                	mov    ebx,edx
c00271cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271ce:	31 f8                	xor    eax,edi
c00271d0:	0f 89 f7 00 00 00    	jns    c00272cd <__divsf3+0x221>
c00271d6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271db:	e9 ed 00 00 00       	jmp    c00272cd <__divsf3+0x221>
c00271e0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271e3:	50                   	push   eax
c00271e4:	50                   	push   eax
c00271e5:	52                   	push   edx
c00271e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271e9:	e8 c7 02 00 00       	call   c00274b5 <__eqsf2>
c00271ee:	83 c4 10             	add    esp,0x10
c00271f1:	85 c0                	test   eax,eax
c00271f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271f6:	75 16                	jne    c002720e <__divsf3+0x162>
c00271f8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271fb:	31 fb                	xor    ebx,edi
c00271fd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027203:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027209:	e9 bf 00 00 00       	jmp    c00272cd <__divsf3+0x221>
c002720e:	8d 46 01             	lea    eax,[esi+0x1]
c0027211:	01 db                	add    ebx,ebx
c0027213:	78 04                	js     c0027219 <__divsf3+0x16d>
c0027215:	89 c6                	mov    esi,eax
c0027217:	eb f5                	jmp    c002720e <__divsf3+0x162>
c0027219:	89 c8                	mov    eax,ecx
c002721b:	0d 00 00 00 80       	or     eax,0x80000000
c0027220:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027226:	31 d2                	xor    edx,edx
c0027228:	39 d8                	cmp    eax,ebx
c002722a:	72 07                	jb     c0027233 <__divsf3+0x187>
c002722c:	29 d8                	sub    eax,ebx
c002722e:	ba 01 00 00 00       	mov    edx,0x1
c0027233:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002723a:	01 d2                	add    edx,edx
c002723c:	89 c1                	mov    ecx,eax
c002723e:	01 c0                	add    eax,eax
c0027240:	85 c9                	test   ecx,ecx
c0027242:	78 04                	js     c0027248 <__divsf3+0x19c>
c0027244:	39 c3                	cmp    ebx,eax
c0027246:	77 05                	ja     c002724d <__divsf3+0x1a1>
c0027248:	29 d8                	sub    eax,ebx
c002724a:	83 ca 01             	or     edx,0x1
c002724d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027250:	75 e8                	jne    c002723a <__divsf3+0x18e>
c0027252:	85 c0                	test   eax,eax
c0027254:	0f 95 c0             	setne  al
c0027257:	0f b6 c0             	movzx  eax,al
c002725a:	c1 e2 06             	shl    edx,0x6
c002725d:	09 c2                	or     edx,eax
c002725f:	78 03                	js     c0027264 <__divsf3+0x1b8>
c0027261:	01 d2                	add    edx,edx
c0027263:	4e                   	dec    esi
c0027264:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002726a:	7f 22                	jg     c002728e <__divsf3+0x1e2>
c002726c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027272:	85 f6                	test   esi,esi
c0027274:	7f 23                	jg     c0027299 <__divsf3+0x1ed>
c0027276:	83 fe e9             	cmp    esi,0xffffffe9
c0027279:	7c 1a                	jl     c0027295 <__divsf3+0x1e9>
c002727b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027281:	b9 01 00 00 00       	mov    ecx,0x1
c0027286:	29 f1                	sub    ecx,esi
c0027288:	d3 ea                	shr    edx,cl
c002728a:	31 f6                	xor    esi,esi
c002728c:	eb 0b                	jmp    c0027299 <__divsf3+0x1ed>
c002728e:	be ff 00 00 00       	mov    esi,0xff
c0027293:	eb 02                	jmp    c0027297 <__divsf3+0x1eb>
c0027295:	31 f6                	xor    esi,esi
c0027297:	31 d2                	xor    edx,edx
c0027299:	89 d0                	mov    eax,edx
c002729b:	c1 e8 08             	shr    eax,0x8
c002729e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272a1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272a7:	09 fe                	or     esi,edi
c00272a9:	c1 e6 17             	shl    esi,0x17
c00272ac:	09 c6                	or     esi,eax
c00272ae:	f6 c2 7f             	test   dl,0x7f
c00272b1:	0f 95 c1             	setne  cl
c00272b4:	09 c8                	or     eax,ecx
c00272b6:	83 e0 01             	and    eax,0x1
c00272b9:	c1 ea 07             	shr    edx,0x7
c00272bc:	21 c2                	and    edx,eax
c00272be:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272c1:	eb 0a                	jmp    c00272cd <__divsf3+0x221>
c00272c3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272c8:	eb 03                	jmp    c00272cd <__divsf3+0x221>
c00272ca:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272cd:	89 d8                	mov    eax,ebx
c00272cf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272d2:	5b                   	pop    ebx
c00272d3:	5e                   	pop    esi
c00272d4:	5f                   	pop    edi
c00272d5:	5d                   	pop    ebp
c00272d6:	c3                   	ret    

c00272d7 <__floatsisf>:
c00272d7:	55                   	push   ebp
c00272d8:	89 e5                	mov    ebp,esp
c00272da:	53                   	push   ebx
c00272db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272de:	85 d2                	test   edx,edx
c00272e0:	7e 2b                	jle    c002730d <__floatsisf+0x36>
c00272e2:	0f bd ca             	bsr    ecx,edx
c00272e5:	83 f1 1f             	xor    ecx,0x1f
c00272e8:	d3 e2                	shl    edx,cl
c00272ea:	89 d0                	mov    eax,edx
c00272ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272f1:	89 c3                	mov    ebx,eax
c00272f3:	c1 eb 08             	shr    ebx,0x8
c00272f6:	80 e2 7f             	and    dl,0x7f
c00272f9:	0f 95 c2             	setne  dl
c00272fc:	09 da                	or     edx,ebx
c00272fe:	83 e2 01             	and    edx,0x1
c0027301:	c1 e8 07             	shr    eax,0x7
c0027304:	21 c2                	and    edx,eax
c0027306:	b8 9e 00 00 00       	mov    eax,0x9e
c002730b:	eb 32                	jmp    c002733f <__floatsisf+0x68>
c002730d:	b8 00 00 00 00       	mov    eax,0x0
c0027312:	74 34                	je     c0027348 <__floatsisf+0x71>
c0027314:	f7 da                	neg    edx
c0027316:	0f bd ca             	bsr    ecx,edx
c0027319:	83 f1 1f             	xor    ecx,0x1f
c002731c:	d3 e2                	shl    edx,cl
c002731e:	89 d0                	mov    eax,edx
c0027320:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027325:	89 c3                	mov    ebx,eax
c0027327:	c1 eb 08             	shr    ebx,0x8
c002732a:	80 e2 7f             	and    dl,0x7f
c002732d:	0f 95 c2             	setne  dl
c0027330:	09 da                	or     edx,ebx
c0027332:	83 e2 01             	and    edx,0x1
c0027335:	c1 e8 07             	shr    eax,0x7
c0027338:	21 c2                	and    edx,eax
c002733a:	b8 9e 01 00 00       	mov    eax,0x19e
c002733f:	29 c8                	sub    eax,ecx
c0027341:	c1 e0 17             	shl    eax,0x17
c0027344:	09 d8                	or     eax,ebx
c0027346:	01 d0                	add    eax,edx
c0027348:	5b                   	pop    ebx
c0027349:	5d                   	pop    ebp
c002734a:	c3                   	ret    

c002734b <__floatunsisf>:
c002734b:	55                   	push   ebp
c002734c:	89 e5                	mov    ebp,esp
c002734e:	53                   	push   ebx
c002734f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027352:	31 c0                	xor    eax,eax
c0027354:	85 d2                	test   edx,edx
c0027356:	74 32                	je     c002738a <__floatunsisf+0x3f>
c0027358:	0f bd ca             	bsr    ecx,edx
c002735b:	83 f1 1f             	xor    ecx,0x1f
c002735e:	d3 e2                	shl    edx,cl
c0027360:	89 d0                	mov    eax,edx
c0027362:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027367:	89 c3                	mov    ebx,eax
c0027369:	c1 eb 08             	shr    ebx,0x8
c002736c:	80 e2 7f             	and    dl,0x7f
c002736f:	0f 95 c2             	setne  dl
c0027372:	09 da                	or     edx,ebx
c0027374:	83 e2 01             	and    edx,0x1
c0027377:	c1 e8 07             	shr    eax,0x7
c002737a:	21 c2                	and    edx,eax
c002737c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027381:	29 c8                	sub    eax,ecx
c0027383:	c1 e0 17             	shl    eax,0x17
c0027386:	09 d8                	or     eax,ebx
c0027388:	01 d0                	add    eax,edx
c002738a:	5b                   	pop    ebx
c002738b:	5d                   	pop    ebp
c002738c:	c3                   	ret    

c002738d <__fixsfsi>:
c002738d:	55                   	push   ebp
c002738e:	89 e5                	mov    ebp,esp
c0027390:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027393:	89 d1                	mov    ecx,edx
c0027395:	c1 e1 08             	shl    ecx,0x8
c0027398:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002739e:	c1 fa 17             	sar    edx,0x17
c00273a1:	78 1c                	js     c00273bf <__fixsfsi+0x32>
c00273a3:	83 ea 7f             	sub    edx,0x7f
c00273a6:	31 c0                	xor    eax,eax
c00273a8:	83 fa 1e             	cmp    edx,0x1e
c00273ab:	77 40                	ja     c00273ed <__fixsfsi+0x60>
c00273ad:	89 c8                	mov    eax,ecx
c00273af:	0d 00 00 00 80       	or     eax,0x80000000
c00273b4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273b9:	29 d1                	sub    ecx,edx
c00273bb:	d3 e8                	shr    eax,cl
c00273bd:	eb 2e                	jmp    c00273ed <__fixsfsi+0x60>
c00273bf:	31 c0                	xor    eax,eax
c00273c1:	81 c2 81 00 00 00    	add    edx,0x81
c00273c7:	78 24                	js     c00273ed <__fixsfsi+0x60>
c00273c9:	83 fa 1e             	cmp    edx,0x1e
c00273cc:	7e 09                	jle    c00273d7 <__fixsfsi+0x4a>
c00273ce:	83 fa 1f             	cmp    edx,0x1f
c00273d1:	75 18                	jne    c00273eb <__fixsfsi+0x5e>
c00273d3:	85 c9                	test   ecx,ecx
c00273d5:	75 14                	jne    c00273eb <__fixsfsi+0x5e>
c00273d7:	89 c8                	mov    eax,ecx
c00273d9:	0d 00 00 00 80       	or     eax,0x80000000
c00273de:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273e3:	29 d1                	sub    ecx,edx
c00273e5:	d3 e8                	shr    eax,cl
c00273e7:	f7 d8                	neg    eax
c00273e9:	eb 02                	jmp    c00273ed <__fixsfsi+0x60>
c00273eb:	31 c0                	xor    eax,eax
c00273ed:	5d                   	pop    ebp
c00273ee:	c3                   	ret    

c00273ef <__fixunssfsi>:
c00273ef:	55                   	push   ebp
c00273f0:	89 e5                	mov    ebp,esp
c00273f2:	53                   	push   ebx
c00273f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273f6:	89 d3                	mov    ebx,edx
c00273f8:	c1 fb 17             	sar    ebx,0x17
c00273fb:	83 eb 7f             	sub    ebx,0x7f
c00273fe:	31 c0                	xor    eax,eax
c0027400:	83 fb 1f             	cmp    ebx,0x1f
c0027403:	77 18                	ja     c002741d <__fixunssfsi+0x2e>
c0027405:	89 d0                	mov    eax,edx
c0027407:	c1 e0 08             	shl    eax,0x8
c002740a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002740f:	0d 00 00 00 80       	or     eax,0x80000000
c0027414:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027419:	29 d9                	sub    ecx,ebx
c002741b:	d3 e8                	shr    eax,cl
c002741d:	5b                   	pop    ebx
c002741e:	5d                   	pop    ebp
c002741f:	c3                   	ret    

c0027420 <__cmpsf2>:
c0027420:	55                   	push   ebp
c0027421:	89 e5                	mov    ebp,esp
c0027423:	57                   	push   edi
c0027424:	56                   	push   esi
c0027425:	53                   	push   ebx
c0027426:	83 ec 24             	sub    esp,0x24
c0027429:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002742c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002742f:	e8 4f 10 00 00       	call   c0028483 <__truncdfsf2>
c0027434:	5a                   	pop    edx
c0027435:	59                   	pop    ecx
c0027436:	89 c3                	mov    ebx,eax
c0027438:	c1 e8 17             	shr    eax,0x17
c002743b:	0f b6 f0             	movzx  esi,al
c002743e:	89 d8                	mov    eax,ebx
c0027440:	c1 e8 1f             	shr    eax,0x1f
c0027443:	31 c6                	xor    esi,eax
c0027445:	c1 e3 08             	shl    ebx,0x8
c0027448:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002744b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002744e:	e8 30 10 00 00       	call   c0028483 <__truncdfsf2>
c0027453:	83 c4 10             	add    esp,0x10
c0027456:	89 c1                	mov    ecx,eax
c0027458:	c1 e9 17             	shr    ecx,0x17
c002745b:	0f b6 c9             	movzx  ecx,cl
c002745e:	89 c7                	mov    edi,eax
c0027460:	c1 ef 1f             	shr    edi,0x1f
c0027463:	89 ca                	mov    edx,ecx
c0027465:	31 fa                	xor    edx,edi
c0027467:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002746a:	c1 e0 08             	shl    eax,0x8
c002746d:	89 c2                	mov    edx,eax
c002746f:	89 d8                	mov    eax,ebx
c0027471:	09 d0                	or     eax,edx
c0027473:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027478:	09 f0                	or     eax,esi
c002747a:	75 08                	jne    c0027484 <__cmpsf2+0x64>
c002747c:	31 c0                	xor    eax,eax
c002747e:	39 f9                	cmp    ecx,edi
c0027480:	75 0c                	jne    c002748e <__cmpsf2+0x6e>
c0027482:	eb 29                	jmp    c00274ad <__cmpsf2+0x8d>
c0027484:	b8 01 00 00 00       	mov    eax,0x1
c0027489:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002748c:	7f 1f                	jg     c00274ad <__cmpsf2+0x8d>
c002748e:	83 c8 ff             	or     eax,0xffffffff
c0027491:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027494:	7c 17                	jl     c00274ad <__cmpsf2+0x8d>
c0027496:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002749c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274a2:	b8 01 00 00 00       	mov    eax,0x1
c00274a7:	39 d3                	cmp    ebx,edx
c00274a9:	77 02                	ja     c00274ad <__cmpsf2+0x8d>
c00274ab:	19 c0                	sbb    eax,eax
c00274ad:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274b0:	5b                   	pop    ebx
c00274b1:	5e                   	pop    esi
c00274b2:	5f                   	pop    edi
c00274b3:	5d                   	pop    ebp
c00274b4:	c3                   	ret    

c00274b5 <__eqsf2>:
c00274b5:	55                   	push   ebp
c00274b6:	89 e5                	mov    ebp,esp
c00274b8:	83 ec 24             	sub    esp,0x24
c00274bb:	6a 01                	push   0x1
c00274bd:	83 ec 0c             	sub    esp,0xc
c00274c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274c3:	e8 df 10 00 00       	call   c00285a7 <__extendsfdf2>
c00274c8:	83 c4 10             	add    esp,0x10
c00274cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274d1:	52                   	push   edx
c00274d2:	50                   	push   eax
c00274d3:	50                   	push   eax
c00274d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274d7:	e8 cb 10 00 00       	call   c00285a7 <__extendsfdf2>
c00274dc:	59                   	pop    ecx
c00274dd:	59                   	pop    ecx
c00274de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274e4:	52                   	push   edx
c00274e5:	50                   	push   eax
c00274e6:	e8 35 ff ff ff       	call   c0027420 <__cmpsf2>
c00274eb:	83 c4 20             	add    esp,0x20
c00274ee:	c9                   	leave  
c00274ef:	c3                   	ret    

c00274f0 <__nesf2>:
c00274f0:	eb c3                	jmp    c00274b5 <__eqsf2>

c00274f2 <__gtsf2>:
c00274f2:	55                   	push   ebp
c00274f3:	89 e5                	mov    ebp,esp
c00274f5:	83 ec 24             	sub    esp,0x24
c00274f8:	6a ff                	push   0xffffffff
c00274fa:	83 ec 0c             	sub    esp,0xc
c00274fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027500:	e8 a2 10 00 00       	call   c00285a7 <__extendsfdf2>
c0027505:	83 c4 10             	add    esp,0x10
c0027508:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002750b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002750e:	52                   	push   edx
c002750f:	50                   	push   eax
c0027510:	50                   	push   eax
c0027511:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027514:	e8 8e 10 00 00       	call   c00285a7 <__extendsfdf2>
c0027519:	59                   	pop    ecx
c002751a:	59                   	pop    ecx
c002751b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002751e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027521:	52                   	push   edx
c0027522:	50                   	push   eax
c0027523:	e8 f8 fe ff ff       	call   c0027420 <__cmpsf2>
c0027528:	83 c4 20             	add    esp,0x20
c002752b:	c9                   	leave  
c002752c:	c3                   	ret    

c002752d <__gesf2>:
c002752d:	eb c3                	jmp    c00274f2 <__gtsf2>

c002752f <__ltsf2>:
c002752f:	eb 84                	jmp    c00274b5 <__eqsf2>

c0027531 <__lesf2>:
c0027531:	eb 82                	jmp    c00274b5 <__eqsf2>

c0027533 <__adddf3>:
c0027533:	55                   	push   ebp
c0027534:	89 e5                	mov    ebp,esp
c0027536:	57                   	push   edi
c0027537:	56                   	push   esi
c0027538:	53                   	push   ebx
c0027539:	83 ec 24             	sub    esp,0x24
c002753c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002753f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027542:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027545:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027548:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002754b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002754e:	89 c8                	mov    eax,ecx
c0027550:	89 ce                	mov    esi,ecx
c0027552:	c1 fe 14             	sar    esi,0x14
c0027555:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027558:	89 fb                	mov    ebx,edi
c002755a:	89 fa                	mov    edx,edi
c002755c:	c1 e2 0b             	shl    edx,0xb
c002755f:	c1 e0 0b             	shl    eax,0xb
c0027562:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027567:	c1 eb 15             	shr    ebx,0x15
c002756a:	09 d8                	or     eax,ebx
c002756c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002756f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027572:	c1 fe 14             	sar    esi,0x14
c0027575:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027578:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002757b:	89 f3                	mov    ebx,esi
c002757d:	c1 e3 0b             	shl    ebx,0xb
c0027580:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027583:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027586:	c1 e3 0b             	shl    ebx,0xb
c0027589:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002758f:	c1 ee 15             	shr    esi,0x15
c0027592:	09 f3                	or     ebx,esi
c0027594:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027597:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002759a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002759d:	0f 88 5f 02 00 00    	js     c0027802 <__adddf3+0x2cf>
c00275a3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275a6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275a9:	85 db                	test   ebx,ebx
c00275ab:	0f 8e c7 00 00 00    	jle    c0027678 <__adddf3+0x145>
c00275b1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275b8:	75 1a                	jne    c00275d4 <__adddf3+0xa1>
c00275ba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275bd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275c0:	0f 84 b2 05 00 00    	je     c0027b78 <__adddf3+0x645>
c00275c6:	4b                   	dec    ebx
c00275c7:	75 23                	jne    c00275ec <__adddf3+0xb9>
c00275c9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275cc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275cf:	e9 99 00 00 00       	jmp    c002766d <__adddf3+0x13a>
c00275d4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275d7:	f7 d6                	not    esi
c00275d9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275df:	0f 84 93 05 00 00    	je     c0027b78 <__adddf3+0x645>
c00275e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275ec:	83 fb 1f             	cmp    ebx,0x1f
c00275ef:	7e 42                	jle    c0027633 <__adddf3+0x100>
c00275f1:	83 fb 3f             	cmp    ebx,0x3f
c00275f4:	0f 8f 7e 05 00 00    	jg     c0027b78 <__adddf3+0x645>
c00275fa:	83 e3 1f             	and    ebx,0x1f
c00275fd:	89 d9                	mov    ecx,ebx
c00275ff:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027602:	d3 ef                	shr    edi,cl
c0027604:	31 db                	xor    ebx,ebx
c0027606:	85 c9                	test   ecx,ecx
c0027608:	74 15                	je     c002761f <__adddf3+0xec>
c002760a:	be 20 00 00 00       	mov    esi,0x20
c002760f:	29 ce                	sub    esi,ecx
c0027611:	89 f1                	mov    ecx,esi
c0027613:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027616:	d3 e6                	shl    esi,cl
c0027618:	31 db                	xor    ebx,ebx
c002761a:	85 f6                	test   esi,esi
c002761c:	0f 95 c3             	setne  bl
c002761f:	31 c9                	xor    ecx,ecx
c0027621:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027625:	0f 95 c1             	setne  cl
c0027628:	09 cf                	or     edi,ecx
c002762a:	09 fb                	or     ebx,edi
c002762c:	01 da                	add    edx,ebx
c002762e:	83 d0 00             	adc    eax,0x0
c0027631:	eb 3a                	jmp    c002766d <__adddf3+0x13a>
c0027633:	bf 20 00 00 00       	mov    edi,0x20
c0027638:	29 df                	sub    edi,ebx
c002763a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002763d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027640:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027643:	d3 e6                	shl    esi,cl
c0027645:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027648:	88 d9                	mov    cl,bl
c002764a:	d3 ef                	shr    edi,cl
c002764c:	09 fe                	or     esi,edi
c002764e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027651:	88 d9                	mov    cl,bl
c0027653:	d3 ef                	shr    edi,cl
c0027655:	89 fb                	mov    ebx,edi
c0027657:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002765a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002765d:	d3 e7                	shl    edi,cl
c002765f:	85 ff                	test   edi,edi
c0027661:	0f 95 c1             	setne  cl
c0027664:	0f b6 c9             	movzx  ecx,cl
c0027667:	09 ce                	or     esi,ecx
c0027669:	01 f2                	add    edx,esi
c002766b:	11 d8                	adc    eax,ebx
c002766d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027670:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027673:	e9 52 01 00 00       	jmp    c00277ca <__adddf3+0x297>
c0027678:	0f 84 d5 00 00 00    	je     c0027753 <__adddf3+0x220>
c002767e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027681:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027684:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027687:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002768a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027691:	75 20                	jne    c00276b3 <__adddf3+0x180>
c0027693:	89 d6                	mov    esi,edx
c0027695:	09 c6                	or     esi,eax
c0027697:	0f 84 db 04 00 00    	je     c0027b78 <__adddf3+0x645>
c002769d:	4b                   	dec    ebx
c002769e:	75 29                	jne    c00276c9 <__adddf3+0x196>
c00276a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276a6:	01 d1                	add    ecx,edx
c00276a8:	11 c6                	adc    esi,eax
c00276aa:	89 f0                	mov    eax,esi
c00276ac:	89 ca                	mov    edx,ecx
c00276ae:	e9 17 01 00 00       	jmp    c00277ca <__adddf3+0x297>
c00276b3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276b6:	f7 d6                	not    esi
c00276b8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276be:	0f 84 b4 04 00 00    	je     c0027b78 <__adddf3+0x645>
c00276c4:	0d 00 00 00 80       	or     eax,0x80000000
c00276c9:	83 fb 1f             	cmp    ebx,0x1f
c00276cc:	7e 48                	jle    c0027716 <__adddf3+0x1e3>
c00276ce:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276d1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276d4:	83 fb 3f             	cmp    ebx,0x3f
c00276d7:	0f 8f 9b 04 00 00    	jg     c0027b78 <__adddf3+0x645>
c00276dd:	83 e3 1f             	and    ebx,0x1f
c00276e0:	89 d9                	mov    ecx,ebx
c00276e2:	89 c7                	mov    edi,eax
c00276e4:	d3 ef                	shr    edi,cl
c00276e6:	31 db                	xor    ebx,ebx
c00276e8:	85 c9                	test   ecx,ecx
c00276ea:	74 12                	je     c00276fe <__adddf3+0x1cb>
c00276ec:	be 20 00 00 00       	mov    esi,0x20
c00276f1:	29 ce                	sub    esi,ecx
c00276f3:	89 f1                	mov    ecx,esi
c00276f5:	d3 e0                	shl    eax,cl
c00276f7:	31 db                	xor    ebx,ebx
c00276f9:	85 c0                	test   eax,eax
c00276fb:	0f 95 c3             	setne  bl
c00276fe:	31 c0                	xor    eax,eax
c0027700:	85 d2                	test   edx,edx
c0027702:	0f 95 c0             	setne  al
c0027705:	09 c7                	or     edi,eax
c0027707:	09 fb                	or     ebx,edi
c0027709:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002770c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002770f:	01 da                	add    edx,ebx
c0027711:	83 d6 00             	adc    esi,0x0
c0027714:	eb 39                	jmp    c002774f <__adddf3+0x21c>
c0027716:	be 20 00 00 00       	mov    esi,0x20
c002771b:	29 de                	sub    esi,ebx
c002771d:	89 c7                	mov    edi,eax
c002771f:	89 f1                	mov    ecx,esi
c0027721:	d3 e7                	shl    edi,cl
c0027723:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027726:	89 d7                	mov    edi,edx
c0027728:	88 d9                	mov    cl,bl
c002772a:	d3 ef                	shr    edi,cl
c002772c:	89 f9                	mov    ecx,edi
c002772e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027731:	09 cf                	or     edi,ecx
c0027733:	88 d9                	mov    cl,bl
c0027735:	d3 e8                	shr    eax,cl
c0027737:	89 f1                	mov    ecx,esi
c0027739:	d3 e2                	shl    edx,cl
c002773b:	85 d2                	test   edx,edx
c002773d:	0f 95 c2             	setne  dl
c0027740:	0f b6 d2             	movzx  edx,dl
c0027743:	09 d7                	or     edi,edx
c0027745:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027748:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002774b:	01 fa                	add    edx,edi
c002774d:	11 c6                	adc    esi,eax
c002774f:	89 f0                	mov    eax,esi
c0027751:	eb 77                	jmp    c00277ca <__adddf3+0x297>
c0027753:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027756:	46                   	inc    esi
c0027757:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002775a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027760:	75 41                	jne    c00277a3 <__adddf3+0x270>
c0027762:	89 d3                	mov    ebx,edx
c0027764:	09 c3                	or     ebx,eax
c0027766:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002776d:	75 27                	jne    c0027796 <__adddf3+0x263>
c002776f:	85 db                	test   ebx,ebx
c0027771:	0f 84 fb 03 00 00    	je     c0027b72 <__adddf3+0x63f>
c0027777:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002777a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002777d:	0f 84 f5 03 00 00    	je     c0027b78 <__adddf3+0x645>
c0027783:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027786:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027789:	85 c0                	test   eax,eax
c002778b:	0f 89 91 03 00 00    	jns    c0027b22 <__adddf3+0x5ef>
c0027791:	e9 85 03 00 00       	jmp    c0027b1b <__adddf3+0x5e8>
c0027796:	85 db                	test   ebx,ebx
c0027798:	0f 85 da 03 00 00    	jne    c0027b78 <__adddf3+0x645>
c002779e:	e9 cf 03 00 00       	jmp    c0027b72 <__adddf3+0x63f>
c00277a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277a9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277ac:	f7 d1                	not    ecx
c00277ae:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277b4:	0f 84 70 03 00 00    	je     c0027b2a <__adddf3+0x5f7>
c00277ba:	d1 ea                	shr    edx,1
c00277bc:	89 c1                	mov    ecx,eax
c00277be:	c1 e1 1f             	shl    ecx,0x1f
c00277c1:	09 ca                	or     edx,ecx
c00277c3:	d1 e8                	shr    eax,1
c00277c5:	e9 6f 03 00 00       	jmp    c0027b39 <__adddf3+0x606>
c00277ca:	85 c0                	test   eax,eax
c00277cc:	0f 89 67 03 00 00    	jns    c0027b39 <__adddf3+0x606>
c00277d2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277d5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277d8:	f7 d1                	not    ecx
c00277da:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277e0:	0f 84 44 03 00 00    	je     c0027b2a <__adddf3+0x5f7>
c00277e6:	89 d1                	mov    ecx,edx
c00277e8:	d1 e9                	shr    ecx,1
c00277ea:	83 e2 01             	and    edx,0x1
c00277ed:	09 ca                	or     edx,ecx
c00277ef:	89 c1                	mov    ecx,eax
c00277f1:	c1 e1 1f             	shl    ecx,0x1f
c00277f4:	09 ca                	or     edx,ecx
c00277f6:	d1 e8                	shr    eax,1
c00277f8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277fd:	e9 37 03 00 00       	jmp    c0027b39 <__adddf3+0x606>
c0027802:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027805:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002780b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002780e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027811:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027817:	29 de                	sub    esi,ebx
c0027819:	85 f6                	test   esi,esi
c002781b:	0f 8e bd 00 00 00    	jle    c00278de <__adddf3+0x3ab>
c0027821:	85 db                	test   ebx,ebx
c0027823:	75 17                	jne    c002783c <__adddf3+0x309>
c0027825:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027828:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002782b:	0f 84 47 03 00 00    	je     c0027b78 <__adddf3+0x645>
c0027831:	4e                   	dec    esi
c0027832:	75 20                	jne    c0027854 <__adddf3+0x321>
c0027834:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027837:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002783a:	eb 5b                	jmp    c0027897 <__adddf3+0x364>
c002783c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002783f:	f7 d3                	not    ebx
c0027841:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027847:	0f 84 2b 03 00 00    	je     c0027b78 <__adddf3+0x645>
c002784d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027854:	83 fe 1f             	cmp    esi,0x1f
c0027857:	7e 49                	jle    c00278a2 <__adddf3+0x36f>
c0027859:	83 fe 3f             	cmp    esi,0x3f
c002785c:	0f 8f 16 03 00 00    	jg     c0027b78 <__adddf3+0x645>
c0027862:	83 e6 1f             	and    esi,0x1f
c0027865:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027868:	89 f1                	mov    ecx,esi
c002786a:	d3 ef                	shr    edi,cl
c002786c:	31 db                	xor    ebx,ebx
c002786e:	85 f6                	test   esi,esi
c0027870:	74 13                	je     c0027885 <__adddf3+0x352>
c0027872:	b9 20 00 00 00       	mov    ecx,0x20
c0027877:	29 f1                	sub    ecx,esi
c0027879:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002787c:	d3 e6                	shl    esi,cl
c002787e:	31 db                	xor    ebx,ebx
c0027880:	85 f6                	test   esi,esi
c0027882:	0f 95 c3             	setne  bl
c0027885:	31 c9                	xor    ecx,ecx
c0027887:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002788b:	0f 95 c1             	setne  cl
c002788e:	09 cf                	or     edi,ecx
c0027890:	09 fb                	or     ebx,edi
c0027892:	29 da                	sub    edx,ebx
c0027894:	83 d8 00             	sbb    eax,0x0
c0027897:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002789a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002789d:	e9 aa 01 00 00       	jmp    c0027a4c <__adddf3+0x519>
c00278a2:	bf 20 00 00 00       	mov    edi,0x20
c00278a7:	29 f7                	sub    edi,esi
c00278a9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ac:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278af:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278b2:	d3 e3                	shl    ebx,cl
c00278b4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278b7:	89 f1                	mov    ecx,esi
c00278b9:	d3 ef                	shr    edi,cl
c00278bb:	09 fb                	or     ebx,edi
c00278bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278c0:	89 f1                	mov    ecx,esi
c00278c2:	d3 ef                	shr    edi,cl
c00278c4:	89 fe                	mov    esi,edi
c00278c6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278c9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278cc:	d3 e7                	shl    edi,cl
c00278ce:	85 ff                	test   edi,edi
c00278d0:	0f 95 c1             	setne  cl
c00278d3:	0f b6 c9             	movzx  ecx,cl
c00278d6:	09 cb                	or     ebx,ecx
c00278d8:	29 da                	sub    edx,ebx
c00278da:	19 f0                	sbb    eax,esi
c00278dc:	eb b9                	jmp    c0027897 <__adddf3+0x364>
c00278de:	0f 84 cd 00 00 00    	je     c00279b1 <__adddf3+0x47e>
c00278e4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278e7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278ed:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278f1:	75 1b                	jne    c002790e <__adddf3+0x3db>
c00278f3:	89 d6                	mov    esi,edx
c00278f5:	09 c6                	or     esi,eax
c00278f7:	0f 84 7b 02 00 00    	je     c0027b78 <__adddf3+0x645>
c00278fd:	4b                   	dec    ebx
c00278fe:	75 24                	jne    c0027924 <__adddf3+0x3f1>
c0027900:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027903:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027906:	29 d1                	sub    ecx,edx
c0027908:	19 c6                	sbb    esi,eax
c002790a:	89 ca                	mov    edx,ecx
c002790c:	eb 61                	jmp    c002796f <__adddf3+0x43c>
c002790e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027911:	f7 d6                	not    esi
c0027913:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027919:	0f 84 59 02 00 00    	je     c0027b78 <__adddf3+0x645>
c002791f:	0d 00 00 00 80       	or     eax,0x80000000
c0027924:	83 fb 1f             	cmp    ebx,0x1f
c0027927:	7e 4d                	jle    c0027976 <__adddf3+0x443>
c0027929:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002792c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002792f:	83 fb 3f             	cmp    ebx,0x3f
c0027932:	0f 8f 40 02 00 00    	jg     c0027b78 <__adddf3+0x645>
c0027938:	83 e3 1f             	and    ebx,0x1f
c002793b:	89 d9                	mov    ecx,ebx
c002793d:	89 c7                	mov    edi,eax
c002793f:	d3 ef                	shr    edi,cl
c0027941:	31 db                	xor    ebx,ebx
c0027943:	85 c9                	test   ecx,ecx
c0027945:	74 12                	je     c0027959 <__adddf3+0x426>
c0027947:	be 20 00 00 00       	mov    esi,0x20
c002794c:	29 ce                	sub    esi,ecx
c002794e:	89 f1                	mov    ecx,esi
c0027950:	d3 e0                	shl    eax,cl
c0027952:	31 db                	xor    ebx,ebx
c0027954:	85 c0                	test   eax,eax
c0027956:	0f 95 c3             	setne  bl
c0027959:	31 c0                	xor    eax,eax
c002795b:	85 d2                	test   edx,edx
c002795d:	0f 95 c0             	setne  al
c0027960:	09 c7                	or     edi,eax
c0027962:	09 fb                	or     ebx,edi
c0027964:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027967:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002796a:	29 da                	sub    edx,ebx
c002796c:	83 de 00             	sbb    esi,0x0
c002796f:	89 f0                	mov    eax,esi
c0027971:	e9 d6 00 00 00       	jmp    c0027a4c <__adddf3+0x519>
c0027976:	be 20 00 00 00       	mov    esi,0x20
c002797b:	29 de                	sub    esi,ebx
c002797d:	89 c7                	mov    edi,eax
c002797f:	89 f1                	mov    ecx,esi
c0027981:	d3 e7                	shl    edi,cl
c0027983:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027986:	89 d7                	mov    edi,edx
c0027988:	88 d9                	mov    cl,bl
c002798a:	d3 ef                	shr    edi,cl
c002798c:	89 f9                	mov    ecx,edi
c002798e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027991:	09 cf                	or     edi,ecx
c0027993:	88 d9                	mov    cl,bl
c0027995:	d3 e8                	shr    eax,cl
c0027997:	89 f1                	mov    ecx,esi
c0027999:	d3 e2                	shl    edx,cl
c002799b:	85 d2                	test   edx,edx
c002799d:	0f 95 c2             	setne  dl
c00279a0:	0f b6 d2             	movzx  edx,dl
c00279a3:	09 d7                	or     edi,edx
c00279a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279ab:	29 fa                	sub    edx,edi
c00279ad:	19 c6                	sbb    esi,eax
c00279af:	eb be                	jmp    c002796f <__adddf3+0x43c>
c00279b1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279b7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279bd:	75 6a                	jne    c0027a29 <__adddf3+0x4f6>
c00279bf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279c3:	75 58                	jne    c0027a1d <__adddf3+0x4ea>
c00279c5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279c8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279cb:	89 d6                	mov    esi,edx
c00279cd:	09 c6                	or     esi,eax
c00279cf:	75 17                	jne    c00279e8 <__adddf3+0x4b5>
c00279d1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279d4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279d7:	85 db                	test   ebx,ebx
c00279d9:	0f 85 99 01 00 00    	jne    c0027b78 <__adddf3+0x645>
c00279df:	31 ff                	xor    edi,edi
c00279e1:	31 c9                	xor    ecx,ecx
c00279e3:	e9 90 01 00 00       	jmp    c0027b78 <__adddf3+0x645>
c00279e8:	85 db                	test   ebx,ebx
c00279ea:	0f 84 88 01 00 00    	je     c0027b78 <__adddf3+0x645>
c00279f0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279f3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279f6:	85 c0                	test   eax,eax
c00279f8:	79 10                	jns    c0027a0a <__adddf3+0x4d7>
c00279fa:	31 c9                	xor    ecx,ecx
c00279fc:	f7 da                	neg    edx
c00279fe:	0f 95 c1             	setne  cl
c0027a01:	01 c8                	add    eax,ecx
c0027a03:	f7 d8                	neg    eax
c0027a05:	e9 2f 01 00 00       	jmp    c0027b39 <__adddf3+0x606>
c0027a0a:	31 ff                	xor    edi,edi
c0027a0c:	31 c9                	xor    ecx,ecx
c0027a0e:	89 c3                	mov    ebx,eax
c0027a10:	09 d3                	or     ebx,edx
c0027a12:	0f 84 60 01 00 00    	je     c0027b78 <__adddf3+0x645>
c0027a18:	e9 05 01 00 00       	jmp    c0027b22 <__adddf3+0x5ef>
c0027a1d:	31 ff                	xor    edi,edi
c0027a1f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a24:	e9 4f 01 00 00       	jmp    c0027b78 <__adddf3+0x645>
c0027a29:	89 c1                	mov    ecx,eax
c0027a2b:	89 d0                	mov    eax,edx
c0027a2d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a30:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a33:	89 ca                	mov    edx,ecx
c0027a35:	85 c9                	test   ecx,ecx
c0027a37:	79 2c                	jns    c0027a65 <__adddf3+0x532>
c0027a39:	31 c9                	xor    ecx,ecx
c0027a3b:	f7 d8                	neg    eax
c0027a3d:	0f 95 c1             	setne  cl
c0027a40:	01 ca                	add    edx,ecx
c0027a42:	f7 da                	neg    edx
c0027a44:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a47:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a4a:	eb 19                	jmp    c0027a65 <__adddf3+0x532>
c0027a4c:	85 c0                	test   eax,eax
c0027a4e:	0f 89 e5 00 00 00    	jns    c0027b39 <__adddf3+0x606>
c0027a54:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a59:	89 c1                	mov    ecx,eax
c0027a5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a5e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a61:	89 d0                	mov    eax,edx
c0027a63:	89 ca                	mov    edx,ecx
c0027a65:	85 d2                	test   edx,edx
c0027a67:	74 59                	je     c0027ac2 <__adddf3+0x58f>
c0027a69:	0f bd da             	bsr    ebx,edx
c0027a6c:	83 f3 1f             	xor    ebx,0x1f
c0027a6f:	88 d9                	mov    cl,bl
c0027a71:	d3 e2                	shl    edx,cl
c0027a73:	bf 20 00 00 00       	mov    edi,0x20
c0027a78:	89 f9                	mov    ecx,edi
c0027a7a:	29 d9                	sub    ecx,ebx
c0027a7c:	89 c6                	mov    esi,eax
c0027a7e:	d3 ee                	shr    esi,cl
c0027a80:	09 d6                	or     esi,edx
c0027a82:	88 d9                	mov    cl,bl
c0027a84:	d3 e0                	shl    eax,cl
c0027a86:	89 c2                	mov    edx,eax
c0027a88:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a8b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a90:	39 d8                	cmp    eax,ebx
c0027a92:	7f 22                	jg     c0027ab6 <__adddf3+0x583>
c0027a94:	29 c3                	sub    ebx,eax
c0027a96:	43                   	inc    ebx
c0027a97:	88 d9                	mov    cl,bl
c0027a99:	d3 ea                	shr    edx,cl
c0027a9b:	29 df                	sub    edi,ebx
c0027a9d:	89 f9                	mov    ecx,edi
c0027a9f:	89 f0                	mov    eax,esi
c0027aa1:	d3 e0                	shl    eax,cl
c0027aa3:	09 c2                	or     edx,eax
c0027aa5:	89 f0                	mov    eax,esi
c0027aa7:	88 d9                	mov    cl,bl
c0027aa9:	d3 e8                	shr    eax,cl
c0027aab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aae:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ab4:	eb 6f                	jmp    c0027b25 <__adddf3+0x5f2>
c0027ab6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ab9:	29 d8                	sub    eax,ebx
c0027abb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027abe:	89 f0                	mov    eax,esi
c0027ac0:	eb 59                	jmp    c0027b1b <__adddf3+0x5e8>
c0027ac2:	85 c0                	test   eax,eax
c0027ac4:	74 6a                	je     c0027b30 <__adddf3+0x5fd>
c0027ac6:	0f bd c8             	bsr    ecx,eax
c0027ac9:	83 f1 1f             	xor    ecx,0x1f
c0027acc:	d3 e0                	shl    eax,cl
c0027ace:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ad1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ad7:	83 c1 20             	add    ecx,0x20
c0027ada:	39 cb                	cmp    ebx,ecx
c0027adc:	7f 35                	jg     c0027b13 <__adddf3+0x5e0>
c0027ade:	29 d9                	sub    ecx,ebx
c0027ae0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ae3:	83 fe 1f             	cmp    esi,0x1f
c0027ae6:	7e 09                	jle    c0027af1 <__adddf3+0x5be>
c0027ae8:	83 e9 1f             	sub    ecx,0x1f
c0027aeb:	d3 e8                	shr    eax,cl
c0027aed:	89 c3                	mov    ebx,eax
c0027aef:	eb 11                	jmp    c0027b02 <__adddf3+0x5cf>
c0027af1:	b9 20 00 00 00       	mov    ecx,0x20
c0027af6:	29 f1                	sub    ecx,esi
c0027af8:	89 c3                	mov    ebx,eax
c0027afa:	d3 e3                	shl    ebx,cl
c0027afc:	89 f1                	mov    ecx,esi
c0027afe:	d3 e8                	shr    eax,cl
c0027b00:	89 c2                	mov    edx,eax
c0027b02:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b05:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b0d:	89 d0                	mov    eax,edx
c0027b0f:	89 da                	mov    edx,ebx
c0027b11:	eb 26                	jmp    c0027b39 <__adddf3+0x606>
c0027b13:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b16:	29 cf                	sub    edi,ecx
c0027b18:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b1b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b20:	eb 17                	jmp    c0027b39 <__adddf3+0x606>
c0027b22:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b25:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b28:	eb 0f                	jmp    c0027b39 <__adddf3+0x606>
c0027b2a:	31 d2                	xor    edx,edx
c0027b2c:	31 c0                	xor    eax,eax
c0027b2e:	eb 09                	jmp    c0027b39 <__adddf3+0x606>
c0027b30:	89 c2                	mov    edx,eax
c0027b32:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b39:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b3c:	c1 e1 14             	shl    ecx,0x14
c0027b3f:	89 c3                	mov    ebx,eax
c0027b41:	c1 eb 0b             	shr    ebx,0xb
c0027b44:	09 d9                	or     ecx,ebx
c0027b46:	89 d3                	mov    ebx,edx
c0027b48:	c1 eb 0b             	shr    ebx,0xb
c0027b4b:	c1 e0 15             	shl    eax,0x15
c0027b4e:	09 d8                	or     eax,ebx
c0027b50:	89 c7                	mov    edi,eax
c0027b52:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b58:	0f 95 c0             	setne  al
c0027b5b:	89 c6                	mov    esi,eax
c0027b5d:	09 f3                	or     ebx,esi
c0027b5f:	83 e3 01             	and    ebx,0x1
c0027b62:	c1 ea 0a             	shr    edx,0xa
c0027b65:	21 da                	and    edx,ebx
c0027b67:	89 f8                	mov    eax,edi
c0027b69:	01 d0                	add    eax,edx
c0027b6b:	83 d1 00             	adc    ecx,0x0
c0027b6e:	89 c7                	mov    edi,eax
c0027b70:	eb 06                	jmp    c0027b78 <__adddf3+0x645>
c0027b72:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b75:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b78:	89 f8                	mov    eax,edi
c0027b7a:	89 ca                	mov    edx,ecx
c0027b7c:	83 c4 24             	add    esp,0x24
c0027b7f:	5b                   	pop    ebx
c0027b80:	5e                   	pop    esi
c0027b81:	5f                   	pop    edi
c0027b82:	5d                   	pop    ebp
c0027b83:	c3                   	ret    

c0027b84 <__subdf3>:
c0027b84:	55                   	push   ebp
c0027b85:	89 e5                	mov    ebp,esp
c0027b87:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b8a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b8d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b93:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b96:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b99:	5d                   	pop    ebp
c0027b9a:	e9 94 f9 ff ff       	jmp    c0027533 <__adddf3>

c0027b9f <__negdf2>:
c0027b9f:	55                   	push   ebp
c0027ba0:	89 e5                	mov    ebp,esp
c0027ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027ba5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ba8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bae:	5d                   	pop    ebp
c0027baf:	c3                   	ret    

c0027bb0 <__muldf3>:
c0027bb0:	55                   	push   ebp
c0027bb1:	89 e5                	mov    ebp,esp
c0027bb3:	57                   	push   edi
c0027bb4:	56                   	push   esi
c0027bb5:	53                   	push   ebx
c0027bb6:	83 ec 24             	sub    esp,0x24
c0027bb9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bbf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bc2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bc5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bc8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bcb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bce:	89 c8                	mov    eax,ecx
c0027bd0:	c1 f8 14             	sar    eax,0x14
c0027bd3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bd6:	89 f8                	mov    eax,edi
c0027bd8:	89 fb                	mov    ebx,edi
c0027bda:	c1 e3 0b             	shl    ebx,0xb
c0027bdd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027be0:	c1 e1 0b             	shl    ecx,0xb
c0027be3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027be9:	c1 e8 15             	shr    eax,0x15
c0027bec:	09 c1                	or     ecx,eax
c0027bee:	89 d6                	mov    esi,edx
c0027bf0:	89 d0                	mov    eax,edx
c0027bf2:	c1 f8 14             	sar    eax,0x14
c0027bf5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027bf8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027bfb:	89 c3                	mov    ebx,eax
c0027bfd:	c1 e3 0b             	shl    ebx,0xb
c0027c00:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c03:	c1 e6 0b             	shl    esi,0xb
c0027c06:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c0c:	c1 e8 15             	shr    eax,0x15
c0027c0f:	09 c6                	or     esi,eax
c0027c11:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c14:	25 ff 07 00 00       	and    eax,0x7ff
c0027c19:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c1c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c1f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c24:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c27:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c2a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c2d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c37:	40                   	inc    eax
c0027c38:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c3d:	0f 85 8d 00 00 00    	jne    c0027cd0 <__muldf3+0x120>
c0027c43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c46:	09 c8                	or     eax,ecx
c0027c48:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c4c:	74 44                	je     c0027c92 <__muldf3+0xe2>
c0027c4e:	85 c0                	test   eax,eax
c0027c50:	0f 85 31 02 00 00    	jne    c0027e87 <__muldf3+0x2d7>
c0027c56:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c59:	40                   	inc    eax
c0027c5a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c5f:	75 13                	jne    c0027c74 <__muldf3+0xc4>
c0027c61:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c64:	09 f1                	or     ecx,esi
c0027c66:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c6a:	74 22                	je     c0027c8e <__muldf3+0xde>
c0027c6c:	85 c9                	test   ecx,ecx
c0027c6e:	0f 85 0d 02 00 00    	jne    c0027e81 <__muldf3+0x2d1>
c0027c74:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c78:	0f 89 09 02 00 00    	jns    c0027e87 <__muldf3+0x2d7>
c0027c7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c81:	05 00 00 00 80       	add    eax,0x80000000
c0027c86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c89:	e9 f9 01 00 00       	jmp    c0027e87 <__muldf3+0x2d7>
c0027c8e:	85 c9                	test   ecx,ecx
c0027c90:	eb 2e                	jmp    c0027cc0 <__muldf3+0x110>
c0027c92:	85 c0                	test   eax,eax
c0027c94:	74 20                	je     c0027cb6 <__muldf3+0x106>
c0027c96:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c9f:	c1 ef 1f             	shr    edi,0x1f
c0027ca2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027ca5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ca8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cab:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cae:	09 f9                	or     ecx,edi
c0027cb0:	78 1e                	js     c0027cd0 <__muldf3+0x120>
c0027cb2:	89 c3                	mov    ebx,eax
c0027cb4:	eb e0                	jmp    c0027c96 <__muldf3+0xe6>
c0027cb6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cb9:	f7 d0                	not    eax
c0027cbb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cc0:	75 b2                	jne    c0027c74 <__muldf3+0xc4>
c0027cc2:	31 ff                	xor    edi,edi
c0027cc4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027ccb:	e9 b7 01 00 00       	jmp    c0027e87 <__muldf3+0x2d7>
c0027cd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cd3:	40                   	inc    eax
c0027cd4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cd9:	75 57                	jne    c0027d32 <__muldf3+0x182>
c0027cdb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cde:	09 f0                	or     eax,esi
c0027ce0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ce4:	74 23                	je     c0027d09 <__muldf3+0x159>
c0027ce6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cea:	0f 89 91 01 00 00    	jns    c0027e81 <__muldf3+0x2d1>
c0027cf0:	85 c0                	test   eax,eax
c0027cf2:	0f 85 89 01 00 00    	jne    c0027e81 <__muldf3+0x2d1>
c0027cf8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027cfb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d04:	e9 7e 01 00 00       	jmp    c0027e87 <__muldf3+0x2d7>
c0027d09:	85 c0                	test   eax,eax
c0027d0b:	75 0c                	jne    c0027d19 <__muldf3+0x169>
c0027d0d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d11:	0f 89 6a 01 00 00    	jns    c0027e81 <__muldf3+0x2d1>
c0027d17:	eb df                	jmp    c0027cf8 <__muldf3+0x148>
c0027d19:	01 f6                	add    esi,esi
c0027d1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d1e:	c1 ea 1f             	shr    edx,0x1f
c0027d21:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d24:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d27:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d2a:	09 d6                	or     esi,edx
c0027d2c:	78 04                	js     c0027d32 <__muldf3+0x182>
c0027d2e:	89 c3                	mov    ebx,eax
c0027d30:	eb e7                	jmp    c0027d19 <__muldf3+0x169>
c0027d32:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d38:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d3e:	89 c8                	mov    eax,ecx
c0027d40:	f7 e6                	mul    esi
c0027d42:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d45:	89 c7                	mov    edi,eax
c0027d47:	89 c8                	mov    eax,ecx
c0027d49:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d4c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d4f:	89 c1                	mov    ecx,eax
c0027d51:	89 f0                	mov    eax,esi
c0027d53:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d56:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d59:	89 c6                	mov    esi,eax
c0027d5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d5e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d61:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d64:	31 c0                	xor    eax,eax
c0027d66:	01 f1                	add    ecx,esi
c0027d68:	0f 92 c0             	setb   al
c0027d6b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d6e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d71:	83 d6 00             	adc    esi,0x0
c0027d74:	01 c7                	add    edi,eax
c0027d76:	83 d6 00             	adc    esi,0x0
c0027d79:	01 ca                	add    edx,ecx
c0027d7b:	0f 92 c1             	setb   cl
c0027d7e:	0f b6 c9             	movzx  ecx,cl
c0027d81:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d84:	83 d6 00             	adc    esi,0x0
c0027d87:	01 cf                	add    edi,ecx
c0027d89:	83 d6 00             	adc    esi,0x0
c0027d8c:	31 c9                	xor    ecx,ecx
c0027d8e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d91:	0f 95 c1             	setne  cl
c0027d94:	09 cf                	or     edi,ecx
c0027d96:	85 f6                	test   esi,esi
c0027d98:	78 0c                	js     c0027da6 <__muldf3+0x1f6>
c0027d9a:	01 f6                	add    esi,esi
c0027d9c:	89 f8                	mov    eax,edi
c0027d9e:	c1 e8 1f             	shr    eax,0x1f
c0027da1:	09 c6                	or     esi,eax
c0027da3:	01 ff                	add    edi,edi
c0027da5:	4b                   	dec    ebx
c0027da6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dac:	0f 8f 85 00 00 00    	jg     c0027e37 <__muldf3+0x287>
c0027db2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027db8:	85 db                	test   ebx,ebx
c0027dba:	0f 8f 84 00 00 00    	jg     c0027e44 <__muldf3+0x294>
c0027dc0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027dc3:	7c 79                	jl     c0027e3e <__muldf3+0x28e>
c0027dc5:	ba 01 00 00 00       	mov    edx,0x1
c0027dca:	29 da                	sub    edx,ebx
c0027dcc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dd2:	83 fa 1f             	cmp    edx,0x1f
c0027dd5:	7e 30                	jle    c0027e07 <__muldf3+0x257>
c0027dd7:	83 fa 20             	cmp    edx,0x20
c0027dda:	75 0b                	jne    c0027de7 <__muldf3+0x237>
c0027ddc:	31 c0                	xor    eax,eax
c0027dde:	85 ff                	test   edi,edi
c0027de0:	0f 95 c0             	setne  al
c0027de3:	89 c7                	mov    edi,eax
c0027de5:	eb 1a                	jmp    c0027e01 <__muldf3+0x251>
c0027de7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027dea:	89 f0                	mov    eax,esi
c0027dec:	d3 e0                	shl    eax,cl
c0027dee:	09 f8                	or     eax,edi
c0027df0:	0f 95 c0             	setne  al
c0027df3:	0f b6 c0             	movzx  eax,al
c0027df6:	89 c7                	mov    edi,eax
c0027df8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dfd:	29 d9                	sub    ecx,ebx
c0027dff:	d3 ee                	shr    esi,cl
c0027e01:	09 f7                	or     edi,esi
c0027e03:	31 db                	xor    ebx,ebx
c0027e05:	eb 3b                	jmp    c0027e42 <__muldf3+0x292>
c0027e07:	83 c3 1f             	add    ebx,0x1f
c0027e0a:	89 f0                	mov    eax,esi
c0027e0c:	88 d9                	mov    cl,bl
c0027e0e:	d3 e0                	shl    eax,cl
c0027e10:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e13:	89 f8                	mov    eax,edi
c0027e15:	88 d1                	mov    cl,dl
c0027e17:	d3 e8                	shr    eax,cl
c0027e19:	89 c1                	mov    ecx,eax
c0027e1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e1e:	09 c8                	or     eax,ecx
c0027e20:	88 d9                	mov    cl,bl
c0027e22:	d3 e7                	shl    edi,cl
c0027e24:	31 db                	xor    ebx,ebx
c0027e26:	85 ff                	test   edi,edi
c0027e28:	0f 95 c3             	setne  bl
c0027e2b:	89 df                	mov    edi,ebx
c0027e2d:	09 c7                	or     edi,eax
c0027e2f:	88 d1                	mov    cl,dl
c0027e31:	d3 ee                	shr    esi,cl
c0027e33:	31 db                	xor    ebx,ebx
c0027e35:	eb 0d                	jmp    c0027e44 <__muldf3+0x294>
c0027e37:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e3c:	eb 02                	jmp    c0027e40 <__muldf3+0x290>
c0027e3e:	31 db                	xor    ebx,ebx
c0027e40:	31 ff                	xor    edi,edi
c0027e42:	31 f6                	xor    esi,esi
c0027e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e47:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e4a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e4f:	09 c3                	or     ebx,eax
c0027e51:	c1 e3 14             	shl    ebx,0x14
c0027e54:	89 f0                	mov    eax,esi
c0027e56:	c1 e8 0b             	shr    eax,0xb
c0027e59:	09 c3                	or     ebx,eax
c0027e5b:	89 f8                	mov    eax,edi
c0027e5d:	c1 e8 0b             	shr    eax,0xb
c0027e60:	c1 e6 15             	shl    esi,0x15
c0027e63:	09 c6                	or     esi,eax
c0027e65:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e6b:	0f 95 c1             	setne  cl
c0027e6e:	09 c8                	or     eax,ecx
c0027e70:	83 e0 01             	and    eax,0x1
c0027e73:	c1 ef 0a             	shr    edi,0xa
c0027e76:	21 c7                	and    edi,eax
c0027e78:	01 f7                	add    edi,esi
c0027e7a:	83 d3 00             	adc    ebx,0x0
c0027e7d:	89 da                	mov    edx,ebx
c0027e7f:	eb 03                	jmp    c0027e84 <__muldf3+0x2d4>
c0027e81:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e84:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e87:	89 f8                	mov    eax,edi
c0027e89:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e8c:	83 c4 24             	add    esp,0x24
c0027e8f:	5b                   	pop    ebx
c0027e90:	5e                   	pop    esi
c0027e91:	5f                   	pop    edi
c0027e92:	5d                   	pop    ebp
c0027e93:	c3                   	ret    

c0027e94 <__divdf3>:
c0027e94:	55                   	push   ebp
c0027e95:	89 e5                	mov    ebp,esp
c0027e97:	57                   	push   edi
c0027e98:	56                   	push   esi
c0027e99:	53                   	push   ebx
c0027e9a:	83 ec 2c             	sub    esp,0x2c
c0027e9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ea0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ea3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ea6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ea9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027eac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027eaf:	89 ce                	mov    esi,ecx
c0027eb1:	89 c8                	mov    eax,ecx
c0027eb3:	c1 f8 14             	sar    eax,0x14
c0027eb6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027eb9:	89 f8                	mov    eax,edi
c0027ebb:	89 fb                	mov    ebx,edi
c0027ebd:	c1 e3 0b             	shl    ebx,0xb
c0027ec0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ec3:	c1 e6 0b             	shl    esi,0xb
c0027ec6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ecc:	c1 e8 15             	shr    eax,0x15
c0027ecf:	09 c6                	or     esi,eax
c0027ed1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ed4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ed7:	89 c2                	mov    edx,eax
c0027ed9:	c1 fa 14             	sar    edx,0x14
c0027edc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027edf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ee2:	89 de                	mov    esi,ebx
c0027ee4:	c1 e6 0b             	shl    esi,0xb
c0027ee7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eea:	c1 e0 0b             	shl    eax,0xb
c0027eed:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ef2:	c1 eb 15             	shr    ebx,0x15
c0027ef5:	09 d8                	or     eax,ebx
c0027ef7:	89 c2                	mov    edx,eax
c0027ef9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027efc:	25 ff 07 00 00       	and    eax,0x7ff
c0027f01:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f04:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f07:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f0d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f10:	29 d8                	sub    eax,ebx
c0027f12:	05 ff 03 00 00       	add    eax,0x3ff
c0027f17:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f1a:	46                   	inc    esi
c0027f1b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f21:	0f 85 a5 00 00 00    	jne    c0027fcc <__divdf3+0x138>
c0027f27:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f2a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f2d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f31:	74 2a                	je     c0027f5d <__divdf3+0xc9>
c0027f33:	85 f6                	test   esi,esi
c0027f35:	0f 85 cc 02 00 00    	jne    c0028207 <__divdf3+0x373>
c0027f3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f3e:	40                   	inc    eax
c0027f3f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f44:	75 26                	jne    c0027f6c <__divdf3+0xd8>
c0027f46:	85 db                	test   ebx,ebx
c0027f48:	74 22                	je     c0027f6c <__divdf3+0xd8>
c0027f4a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f4d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f50:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f53:	09 d0                	or     eax,edx
c0027f55:	0f 85 ac 02 00 00    	jne    c0028207 <__divdf3+0x373>
c0027f5b:	eb 63                	jmp    c0027fc0 <__divdf3+0x12c>
c0027f5d:	85 f6                	test   esi,esi
c0027f5f:	75 22                	jne    c0027f83 <__divdf3+0xef>
c0027f61:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f64:	40                   	inc    eax
c0027f65:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f6a:	74 36                	je     c0027fa2 <__divdf3+0x10e>
c0027f6c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f70:	0f 89 91 02 00 00    	jns    c0028207 <__divdf3+0x373>
c0027f76:	89 f8                	mov    eax,edi
c0027f78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f7e:	e9 80 02 00 00       	jmp    c0028203 <__divdf3+0x36f>
c0027f83:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f86:	01 f6                	add    esi,esi
c0027f88:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f8b:	c1 ef 1f             	shr    edi,0x1f
c0027f8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f91:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f94:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f97:	09 f7                	or     edi,esi
c0027f99:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f9c:	78 2e                	js     c0027fcc <__divdf3+0x138>
c0027f9e:	89 c8                	mov    eax,ecx
c0027fa0:	eb e1                	jmp    c0027f83 <__divdf3+0xef>
c0027fa2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fa5:	09 d0                	or     eax,edx
c0027fa7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fab:	74 0f                	je     c0027fbc <__divdf3+0x128>
c0027fad:	85 c0                	test   eax,eax
c0027faf:	74 bb                	je     c0027f6c <__divdf3+0xd8>
c0027fb1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fb4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fb7:	e9 4b 02 00 00       	jmp    c0028207 <__divdf3+0x373>
c0027fbc:	85 c0                	test   eax,eax
c0027fbe:	75 ac                	jne    c0027f6c <__divdf3+0xd8>
c0027fc0:	31 ff                	xor    edi,edi
c0027fc2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fc7:	e9 3b 02 00 00       	jmp    c0028207 <__divdf3+0x373>
c0027fcc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fcf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fd2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fd8:	75 6b                	jne    c0028045 <__divdf3+0x1b1>
c0027fda:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fdd:	09 d6                	or     esi,edx
c0027fdf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fe3:	74 28                	je     c002800d <__divdf3+0x179>
c0027fe5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fe8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027feb:	85 f6                	test   esi,esi
c0027fed:	0f 85 14 02 00 00    	jne    c0028207 <__divdf3+0x373>
c0027ff3:	31 ff                	xor    edi,edi
c0027ff5:	31 c9                	xor    ecx,ecx
c0027ff7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ffa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ffd:	0f 89 04 02 00 00    	jns    c0028207 <__divdf3+0x373>
c0028003:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028008:	e9 fa 01 00 00       	jmp    c0028207 <__divdf3+0x373>
c002800d:	85 f6                	test   esi,esi
c002800f:	75 1b                	jne    c002802c <__divdf3+0x198>
c0028011:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028014:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028017:	25 00 00 00 80       	and    eax,0x80000000
c002801c:	31 c9                	xor    ecx,ecx
c002801e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028023:	89 cf                	mov    edi,ecx
c0028025:	89 c1                	mov    ecx,eax
c0028027:	e9 db 01 00 00       	jmp    c0028207 <__divdf3+0x373>
c002802c:	01 d2                	add    edx,edx
c002802e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028031:	c1 eb 1f             	shr    ebx,0x1f
c0028034:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028037:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002803a:	8d 48 01             	lea    ecx,[eax+0x1]
c002803d:	09 da                	or     edx,ebx
c002803f:	78 04                	js     c0028045 <__divdf3+0x1b1>
c0028041:	89 c8                	mov    eax,ecx
c0028043:	eb e7                	jmp    c002802c <__divdf3+0x198>
c0028045:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028048:	81 ce 00 00 00 80    	or     esi,0x80000000
c002804e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028054:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028057:	39 d6                	cmp    esi,edx
c0028059:	77 0d                	ja     c0028068 <__divdf3+0x1d4>
c002805b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002805e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028061:	72 1b                	jb     c002807e <__divdf3+0x1ea>
c0028063:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028066:	75 16                	jne    c002807e <__divdf3+0x1ea>
c0028068:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002806b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002806e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028071:	83 de 00             	sbb    esi,0x0
c0028074:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028077:	ba 01 00 00 00       	mov    edx,0x1
c002807c:	eb 02                	jmp    c0028080 <__divdf3+0x1ec>
c002807e:	31 d2                	xor    edx,edx
c0028080:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028087:	31 ff                	xor    edi,edi
c0028089:	01 ff                	add    edi,edi
c002808b:	89 d1                	mov    ecx,edx
c002808d:	c1 e9 1f             	shr    ecx,0x1f
c0028090:	09 cf                	or     edi,ecx
c0028092:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028095:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028098:	89 da                	mov    edx,ebx
c002809a:	89 f3                	mov    ebx,esi
c002809c:	8d 34 36             	lea    esi,[esi+esi*1]
c002809f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280a2:	c1 e9 1f             	shr    ecx,0x1f
c00280a5:	09 ce                	or     esi,ecx
c00280a7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280aa:	01 c9                	add    ecx,ecx
c00280ac:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280af:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280b2:	85 db                	test   ebx,ebx
c00280b4:	78 29                	js     c00280df <__divdf3+0x24b>
c00280b6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280b9:	72 07                	jb     c00280c2 <__divdf3+0x22e>
c00280bb:	75 3c                	jne    c00280f9 <__divdf3+0x265>
c00280bd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280c0:	77 37                	ja     c00280f9 <__divdf3+0x265>
c00280c2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280c5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280c8:	31 d2                	xor    edx,edx
c00280ca:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280cd:	0f 97 c2             	seta   dl
c00280d0:	29 d6                	sub    esi,edx
c00280d2:	89 d9                	mov    ecx,ebx
c00280d4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280d7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280da:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280dd:	eb 17                	jmp    c00280f6 <__divdf3+0x262>
c00280df:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280e2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280e8:	0f 97 c1             	seta   cl
c00280eb:	0f b6 c9             	movzx  ecx,cl
c00280ee:	29 ce                	sub    esi,ecx
c00280f0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280f3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280f6:	83 ca 01             	or     edx,0x1
c00280f9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280fc:	75 8b                	jne    c0028089 <__divdf3+0x1f5>
c00280fe:	c1 e7 09             	shl    edi,0x9
c0028101:	89 d1                	mov    ecx,edx
c0028103:	c1 e9 17             	shr    ecx,0x17
c0028106:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028109:	09 f3                	or     ebx,esi
c002810b:	0f 95 c3             	setne  bl
c002810e:	0f b6 db             	movzx  ebx,bl
c0028111:	c1 e2 09             	shl    edx,0x9
c0028114:	09 d3                	or     ebx,edx
c0028116:	89 ca                	mov    edx,ecx
c0028118:	09 fa                	or     edx,edi
c002811a:	78 0c                	js     c0028128 <__divdf3+0x294>
c002811c:	01 d2                	add    edx,edx
c002811e:	89 d9                	mov    ecx,ebx
c0028120:	c1 e9 1f             	shr    ecx,0x1f
c0028123:	09 ca                	or     edx,ecx
c0028125:	01 db                	add    ebx,ebx
c0028127:	48                   	dec    eax
c0028128:	3d fe 07 00 00       	cmp    eax,0x7fe
c002812d:	0f 8f 83 00 00 00    	jg     c00281b6 <__divdf3+0x322>
c0028133:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028139:	85 c0                	test   eax,eax
c002813b:	0f 8f 82 00 00 00    	jg     c00281c3 <__divdf3+0x32f>
c0028141:	83 f8 cc             	cmp    eax,0xffffffcc
c0028144:	7c 77                	jl     c00281bd <__divdf3+0x329>
c0028146:	be 01 00 00 00       	mov    esi,0x1
c002814b:	29 c6                	sub    esi,eax
c002814d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028153:	83 fe 1f             	cmp    esi,0x1f
c0028156:	7e 2f                	jle    c0028187 <__divdf3+0x2f3>
c0028158:	83 fe 20             	cmp    esi,0x20
c002815b:	75 0a                	jne    c0028167 <__divdf3+0x2d3>
c002815d:	85 db                	test   ebx,ebx
c002815f:	0f 95 c3             	setne  bl
c0028162:	0f b6 db             	movzx  ebx,bl
c0028165:	eb 1a                	jmp    c0028181 <__divdf3+0x2ed>
c0028167:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002816a:	89 d7                	mov    edi,edx
c002816c:	d3 e7                	shl    edi,cl
c002816e:	89 f9                	mov    ecx,edi
c0028170:	09 d9                	or     ecx,ebx
c0028172:	0f 95 c3             	setne  bl
c0028175:	0f b6 db             	movzx  ebx,bl
c0028178:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002817d:	29 c1                	sub    ecx,eax
c002817f:	d3 ea                	shr    edx,cl
c0028181:	09 d3                	or     ebx,edx
c0028183:	31 c0                	xor    eax,eax
c0028185:	eb 3a                	jmp    c00281c1 <__divdf3+0x32d>
c0028187:	83 c0 1f             	add    eax,0x1f
c002818a:	89 d7                	mov    edi,edx
c002818c:	88 c1                	mov    cl,al
c002818e:	d3 e7                	shl    edi,cl
c0028190:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028193:	89 df                	mov    edi,ebx
c0028195:	89 f1                	mov    ecx,esi
c0028197:	d3 ef                	shr    edi,cl
c0028199:	89 f9                	mov    ecx,edi
c002819b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002819e:	09 cf                	or     edi,ecx
c00281a0:	88 c1                	mov    cl,al
c00281a2:	d3 e3                	shl    ebx,cl
c00281a4:	85 db                	test   ebx,ebx
c00281a6:	0f 95 c3             	setne  bl
c00281a9:	0f b6 db             	movzx  ebx,bl
c00281ac:	09 fb                	or     ebx,edi
c00281ae:	89 f1                	mov    ecx,esi
c00281b0:	d3 ea                	shr    edx,cl
c00281b2:	31 c0                	xor    eax,eax
c00281b4:	eb 0d                	jmp    c00281c3 <__divdf3+0x32f>
c00281b6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281bb:	eb 02                	jmp    c00281bf <__divdf3+0x32b>
c00281bd:	31 c0                	xor    eax,eax
c00281bf:	31 db                	xor    ebx,ebx
c00281c1:	31 d2                	xor    edx,edx
c00281c3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281c6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281c9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281cf:	09 c8                	or     eax,ecx
c00281d1:	c1 e0 14             	shl    eax,0x14
c00281d4:	89 d1                	mov    ecx,edx
c00281d6:	c1 e9 0b             	shr    ecx,0xb
c00281d9:	09 c8                	or     eax,ecx
c00281db:	89 c6                	mov    esi,eax
c00281dd:	89 d9                	mov    ecx,ebx
c00281df:	c1 e9 0b             	shr    ecx,0xb
c00281e2:	c1 e2 15             	shl    edx,0x15
c00281e5:	09 ca                	or     edx,ecx
c00281e7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281ed:	0f 95 c0             	setne  al
c00281f0:	09 c1                	or     ecx,eax
c00281f2:	83 e1 01             	and    ecx,0x1
c00281f5:	c1 eb 0a             	shr    ebx,0xa
c00281f8:	21 cb                	and    ebx,ecx
c00281fa:	01 d3                	add    ebx,edx
c00281fc:	89 d8                	mov    eax,ebx
c00281fe:	83 d6 00             	adc    esi,0x0
c0028201:	89 f2                	mov    edx,esi
c0028203:	89 c7                	mov    edi,eax
c0028205:	89 d1                	mov    ecx,edx
c0028207:	89 f8                	mov    eax,edi
c0028209:	89 ca                	mov    edx,ecx
c002820b:	83 c4 2c             	add    esp,0x2c
c002820e:	5b                   	pop    ebx
c002820f:	5e                   	pop    esi
c0028210:	5f                   	pop    edi
c0028211:	5d                   	pop    ebp
c0028212:	c3                   	ret    

c0028213 <__floatsidf>:
c0028213:	55                   	push   ebp
c0028214:	89 e5                	mov    ebp,esp
c0028216:	56                   	push   esi
c0028217:	53                   	push   ebx
c0028218:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002821b:	85 db                	test   ebx,ebx
c002821d:	7e 15                	jle    c0028234 <__floatsidf+0x21>
c002821f:	0f bd cb             	bsr    ecx,ebx
c0028222:	83 f1 1f             	xor    ecx,0x1f
c0028225:	d3 e3                	shl    ebx,cl
c0028227:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002822d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028232:	eb 21                	jmp    c0028255 <__floatsidf+0x42>
c0028234:	b8 00 00 00 00       	mov    eax,0x0
c0028239:	ba 00 00 00 00       	mov    edx,0x0
c002823e:	74 2a                	je     c002826a <__floatsidf+0x57>
c0028240:	f7 db                	neg    ebx
c0028242:	0f bd cb             	bsr    ecx,ebx
c0028245:	83 f1 1f             	xor    ecx,0x1f
c0028248:	d3 e3                	shl    ebx,cl
c002824a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028250:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028255:	29 c8                	sub    eax,ecx
c0028257:	c1 e0 14             	shl    eax,0x14
c002825a:	89 c1                	mov    ecx,eax
c002825c:	89 de                	mov    esi,ebx
c002825e:	c1 ee 0b             	shr    esi,0xb
c0028261:	09 f1                	or     ecx,esi
c0028263:	89 ca                	mov    edx,ecx
c0028265:	c1 e3 15             	shl    ebx,0x15
c0028268:	89 d8                	mov    eax,ebx
c002826a:	5b                   	pop    ebx
c002826b:	5e                   	pop    esi
c002826c:	5d                   	pop    ebp
c002826d:	c3                   	ret    

c002826e <__floatunsidf>:
c002826e:	55                   	push   ebp
c002826f:	89 e5                	mov    ebp,esp
c0028271:	56                   	push   esi
c0028272:	53                   	push   ebx
c0028273:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028276:	85 db                	test   ebx,ebx
c0028278:	74 2a                	je     c00282a4 <__floatunsidf+0x36>
c002827a:	0f bd cb             	bsr    ecx,ebx
c002827d:	83 f1 1f             	xor    ecx,0x1f
c0028280:	d3 e3                	shl    ebx,cl
c0028282:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028288:	b8 1e 04 00 00       	mov    eax,0x41e
c002828d:	29 c8                	sub    eax,ecx
c002828f:	c1 e0 14             	shl    eax,0x14
c0028292:	89 c1                	mov    ecx,eax
c0028294:	89 de                	mov    esi,ebx
c0028296:	c1 ee 0b             	shr    esi,0xb
c0028299:	09 f1                	or     ecx,esi
c002829b:	89 ca                	mov    edx,ecx
c002829d:	c1 e3 15             	shl    ebx,0x15
c00282a0:	89 d8                	mov    eax,ebx
c00282a2:	eb 04                	jmp    c00282a8 <__floatunsidf+0x3a>
c00282a4:	31 c0                	xor    eax,eax
c00282a6:	31 d2                	xor    edx,edx
c00282a8:	5b                   	pop    ebx
c00282a9:	5e                   	pop    esi
c00282aa:	5d                   	pop    ebp
c00282ab:	c3                   	ret    

c00282ac <__fixdfsi>:
c00282ac:	55                   	push   ebp
c00282ad:	89 e5                	mov    ebp,esp
c00282af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282b2:	89 d1                	mov    ecx,edx
c00282b4:	c1 e1 0b             	shl    ecx,0xb
c00282b7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282c0:	c1 e8 15             	shr    eax,0x15
c00282c3:	09 c1                	or     ecx,eax
c00282c5:	c1 fa 14             	sar    edx,0x14
c00282c8:	78 1f                	js     c00282e9 <__fixdfsi+0x3d>
c00282ca:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282d0:	31 c0                	xor    eax,eax
c00282d2:	83 fa 1e             	cmp    edx,0x1e
c00282d5:	77 40                	ja     c0028317 <__fixdfsi+0x6b>
c00282d7:	89 c8                	mov    eax,ecx
c00282d9:	0d 00 00 00 80       	or     eax,0x80000000
c00282de:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282e3:	29 d1                	sub    ecx,edx
c00282e5:	d3 e8                	shr    eax,cl
c00282e7:	eb 2e                	jmp    c0028317 <__fixdfsi+0x6b>
c00282e9:	31 c0                	xor    eax,eax
c00282eb:	81 c2 01 04 00 00    	add    edx,0x401
c00282f1:	78 24                	js     c0028317 <__fixdfsi+0x6b>
c00282f3:	83 fa 1e             	cmp    edx,0x1e
c00282f6:	7e 09                	jle    c0028301 <__fixdfsi+0x55>
c00282f8:	83 fa 1f             	cmp    edx,0x1f
c00282fb:	75 18                	jne    c0028315 <__fixdfsi+0x69>
c00282fd:	85 c9                	test   ecx,ecx
c00282ff:	75 14                	jne    c0028315 <__fixdfsi+0x69>
c0028301:	89 c8                	mov    eax,ecx
c0028303:	0d 00 00 00 80       	or     eax,0x80000000
c0028308:	b9 1f 00 00 00       	mov    ecx,0x1f
c002830d:	29 d1                	sub    ecx,edx
c002830f:	d3 e8                	shr    eax,cl
c0028311:	f7 d8                	neg    eax
c0028313:	eb 02                	jmp    c0028317 <__fixdfsi+0x6b>
c0028315:	31 c0                	xor    eax,eax
c0028317:	5d                   	pop    ebp
c0028318:	c3                   	ret    

c0028319 <__fixunsdfsi>:
c0028319:	55                   	push   ebp
c002831a:	89 e5                	mov    ebp,esp
c002831c:	53                   	push   ebx
c002831d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028320:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028323:	89 d3                	mov    ebx,edx
c0028325:	c1 fb 14             	sar    ebx,0x14
c0028328:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002832e:	31 c0                	xor    eax,eax
c0028330:	83 fb 1f             	cmp    ebx,0x1f
c0028333:	77 1d                	ja     c0028352 <__fixunsdfsi+0x39>
c0028335:	89 d0                	mov    eax,edx
c0028337:	c1 e0 0b             	shl    eax,0xb
c002833a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002833f:	c1 e9 15             	shr    ecx,0x15
c0028342:	09 c8                	or     eax,ecx
c0028344:	0d 00 00 00 80       	or     eax,0x80000000
c0028349:	b9 1f 00 00 00       	mov    ecx,0x1f
c002834e:	29 d9                	sub    ecx,ebx
c0028350:	d3 e8                	shr    eax,cl
c0028352:	5b                   	pop    ebx
c0028353:	5d                   	pop    ebp
c0028354:	c3                   	ret    

c0028355 <__cmpdf2>:
c0028355:	55                   	push   ebp
c0028356:	89 e5                	mov    ebp,esp
c0028358:	57                   	push   edi
c0028359:	56                   	push   esi
c002835a:	53                   	push   ebx
c002835b:	83 ec 0c             	sub    esp,0xc
c002835e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028361:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028364:	89 ca                	mov    edx,ecx
c0028366:	c1 ea 14             	shr    edx,0x14
c0028369:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002836f:	89 cb                	mov    ebx,ecx
c0028371:	c1 fb 1f             	sar    ebx,0x1f
c0028374:	31 da                	xor    edx,ebx
c0028376:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028379:	89 df                	mov    edi,ebx
c002837b:	c1 e7 0b             	shl    edi,0xb
c002837e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028381:	c1 e1 0b             	shl    ecx,0xb
c0028384:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002838a:	c1 eb 15             	shr    ebx,0x15
c002838d:	09 d9                	or     ecx,ebx
c002838f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028392:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028395:	89 ce                	mov    esi,ecx
c0028397:	c1 ee 14             	shr    esi,0x14
c002839a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283a0:	89 cb                	mov    ebx,ecx
c00283a2:	c1 fb 1f             	sar    ebx,0x1f
c00283a5:	31 de                	xor    esi,ebx
c00283a7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283aa:	89 df                	mov    edi,ebx
c00283ac:	c1 e7 0b             	shl    edi,0xb
c00283af:	c1 e1 0b             	shl    ecx,0xb
c00283b2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283b8:	c1 eb 15             	shr    ebx,0x15
c00283bb:	09 d9                	or     ecx,ebx
c00283bd:	89 d3                	mov    ebx,edx
c00283bf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283c5:	43                   	inc    ebx
c00283c6:	83 fb 01             	cmp    ebx,0x1
c00283c9:	77 08                	ja     c00283d3 <__cmpdf2+0x7e>
c00283cb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283ce:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283d1:	75 68                	jne    c002843b <__cmpdf2+0xe6>
c00283d3:	89 f3                	mov    ebx,esi
c00283d5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283db:	43                   	inc    ebx
c00283dc:	83 fb 01             	cmp    ebx,0x1
c00283df:	77 06                	ja     c00283e7 <__cmpdf2+0x92>
c00283e1:	89 fb                	mov    ebx,edi
c00283e3:	09 cb                	or     ebx,ecx
c00283e5:	75 54                	jne    c002843b <__cmpdf2+0xe6>
c00283e7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283ea:	09 f8                	or     eax,edi
c00283ec:	09 c8                	or     eax,ecx
c00283ee:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283f1:	75 12                	jne    c0028405 <__cmpdf2+0xb0>
c00283f3:	8d 42 01             	lea    eax,[edx+0x1]
c00283f6:	83 f8 01             	cmp    eax,0x1
c00283f9:	77 0a                	ja     c0028405 <__cmpdf2+0xb0>
c00283fb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283fe:	31 c0                	xor    eax,eax
c0028400:	83 fb 01             	cmp    ebx,0x1
c0028403:	76 36                	jbe    c002843b <__cmpdf2+0xe6>
c0028405:	b8 01 00 00 00       	mov    eax,0x1
c002840a:	39 f2                	cmp    edx,esi
c002840c:	7f 2d                	jg     c002843b <__cmpdf2+0xe6>
c002840e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028413:	7c 26                	jl     c002843b <__cmpdf2+0xe6>
c0028415:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028418:	77 07                	ja     c0028421 <__cmpdf2+0xcc>
c002841a:	72 16                	jb     c0028432 <__cmpdf2+0xdd>
c002841c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002841f:	76 0a                	jbe    c002842b <__cmpdf2+0xd6>
c0028421:	89 d0                	mov    eax,edx
c0028423:	c1 f8 1f             	sar    eax,0x1f
c0028426:	83 c8 01             	or     eax,0x1
c0028429:	eb 10                	jmp    c002843b <__cmpdf2+0xe6>
c002842b:	b8 00 00 00 00       	mov    eax,0x0
c0028430:	73 09                	jae    c002843b <__cmpdf2+0xe6>
c0028432:	89 d0                	mov    eax,edx
c0028434:	c1 f8 1f             	sar    eax,0x1f
c0028437:	83 e0 02             	and    eax,0x2
c002843a:	48                   	dec    eax
c002843b:	83 c4 0c             	add    esp,0xc
c002843e:	5b                   	pop    ebx
c002843f:	5e                   	pop    esi
c0028440:	5f                   	pop    edi
c0028441:	5d                   	pop    ebp
c0028442:	c3                   	ret    

c0028443 <__eqdf2>:
c0028443:	55                   	push   ebp
c0028444:	89 e5                	mov    ebp,esp
c0028446:	50                   	push   eax
c0028447:	6a 01                	push   0x1
c0028449:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002844c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002844f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028452:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028455:	e8 fb fe ff ff       	call   c0028355 <__cmpdf2>
c002845a:	83 c4 18             	add    esp,0x18
c002845d:	c9                   	leave  
c002845e:	c3                   	ret    

c002845f <__nedf2>:
c002845f:	eb e2                	jmp    c0028443 <__eqdf2>

c0028461 <__gtdf2>:
c0028461:	55                   	push   ebp
c0028462:	89 e5                	mov    ebp,esp
c0028464:	50                   	push   eax
c0028465:	6a ff                	push   0xffffffff
c0028467:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002846a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002846d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028470:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028473:	e8 dd fe ff ff       	call   c0028355 <__cmpdf2>
c0028478:	83 c4 18             	add    esp,0x18
c002847b:	c9                   	leave  
c002847c:	c3                   	ret    

c002847d <__gedf2>:
c002847d:	eb e2                	jmp    c0028461 <__gtdf2>

c002847f <__ltdf2>:
c002847f:	eb c2                	jmp    c0028443 <__eqdf2>

c0028481 <__ledf2>:
c0028481:	eb c0                	jmp    c0028443 <__eqdf2>

c0028483 <__truncdfsf2>:
c0028483:	55                   	push   ebp
c0028484:	89 e5                	mov    ebp,esp
c0028486:	57                   	push   edi
c0028487:	56                   	push   esi
c0028488:	53                   	push   ebx
c0028489:	83 ec 0c             	sub    esp,0xc
c002848c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002848f:	89 d1                	mov    ecx,edx
c0028491:	c1 f9 14             	sar    ecx,0x14
c0028494:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028497:	89 df                	mov    edi,ebx
c0028499:	c1 e7 0b             	shl    edi,0xb
c002849c:	89 d0                	mov    eax,edx
c002849e:	c1 e0 0b             	shl    eax,0xb
c00284a1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284a6:	c1 eb 15             	shr    ebx,0x15
c00284a9:	09 d8                	or     eax,ebx
c00284ab:	89 cb                	mov    ebx,ecx
c00284ad:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284b3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284b9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284bf:	0f 86 9e 00 00 00    	jbe    c0028563 <__truncdfsf2+0xe0>
c00284c5:	85 db                	test   ebx,ebx
c00284c7:	75 0a                	jne    c00284d3 <__truncdfsf2+0x50>
c00284c9:	c1 fa 17             	sar    edx,0x17
c00284cc:	30 d2                	xor    dl,dl
c00284ce:	e9 84 00 00 00       	jmp    c0028557 <__truncdfsf2+0xd4>
c00284d3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284d9:	83 fe 83             	cmp    esi,0xffffff83
c00284dc:	7d 4b                	jge    c0028529 <__truncdfsf2+0xa6>
c00284de:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284e3:	29 f1                	sub    ecx,esi
c00284e5:	83 f9 1f             	cmp    ecx,0x1f
c00284e8:	7f 6b                	jg     c0028555 <__truncdfsf2+0xd2>
c00284ea:	0d 00 00 00 80       	or     eax,0x80000000
c00284ef:	89 c3                	mov    ebx,eax
c00284f1:	d3 eb                	shr    ebx,cl
c00284f3:	be 01 00 00 00       	mov    esi,0x1
c00284f8:	d3 e6                	shl    esi,cl
c00284fa:	4e                   	dec    esi
c00284fb:	21 f0                	and    eax,esi
c00284fd:	09 f8                	or     eax,edi
c00284ff:	0f 95 c0             	setne  al
c0028502:	0f b6 c0             	movzx  eax,al
c0028505:	09 c3                	or     ebx,eax
c0028507:	89 d9                	mov    ecx,ebx
c0028509:	c1 e9 08             	shr    ecx,0x8
c002850c:	f6 c3 7f             	test   bl,0x7f
c002850f:	0f 95 c0             	setne  al
c0028512:	09 c8                	or     eax,ecx
c0028514:	83 e0 01             	and    eax,0x1
c0028517:	c1 eb 07             	shr    ebx,0x7
c002851a:	21 c3                	and    ebx,eax
c002851c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028522:	09 d1                	or     ecx,edx
c0028524:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028527:	eb 76                	jmp    c002859f <__truncdfsf2+0x11c>
c0028529:	83 c6 80             	add    esi,0xffffff80
c002852c:	7e 1d                	jle    c002854b <__truncdfsf2+0xc8>
c002852e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028534:	75 0b                	jne    c0028541 <__truncdfsf2+0xbe>
c0028536:	09 f8                	or     eax,edi
c0028538:	74 09                	je     c0028543 <__truncdfsf2+0xc0>
c002853a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002853f:	eb 02                	jmp    c0028543 <__truncdfsf2+0xc0>
c0028541:	31 c0                	xor    eax,eax
c0028543:	c1 fa 17             	sar    edx,0x17
c0028546:	80 ca ff             	or     dl,0xff
c0028549:	eb 0e                	jmp    c0028559 <__truncdfsf2+0xd6>
c002854b:	c1 fa 1f             	sar    edx,0x1f
c002854e:	c1 e2 08             	shl    edx,0x8
c0028551:	09 ca                	or     edx,ecx
c0028553:	eb 04                	jmp    c0028559 <__truncdfsf2+0xd6>
c0028555:	31 d2                	xor    edx,edx
c0028557:	31 c0                	xor    eax,eax
c0028559:	c1 e2 17             	shl    edx,0x17
c002855c:	c1 e8 08             	shr    eax,0x8
c002855f:	09 d0                	or     eax,edx
c0028561:	eb 3c                	jmp    c002859f <__truncdfsf2+0x11c>
c0028563:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028569:	89 ca                	mov    edx,ecx
c002856b:	c1 fa 0b             	sar    edx,0xb
c002856e:	c1 e2 08             	shl    edx,0x8
c0028571:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028574:	31 db                	xor    ebx,ebx
c0028576:	85 ff                	test   edi,edi
c0028578:	0f 95 c3             	setne  bl
c002857b:	09 d8                	or     eax,ebx
c002857d:	89 c3                	mov    ebx,eax
c002857f:	c1 eb 08             	shr    ebx,0x8
c0028582:	a8 7f                	test   al,0x7f
c0028584:	0f 95 c2             	setne  dl
c0028587:	89 d6                	mov    esi,edx
c0028589:	09 de                	or     esi,ebx
c002858b:	83 e6 01             	and    esi,0x1
c002858e:	c1 e8 07             	shr    eax,0x7
c0028591:	21 f0                	and    eax,esi
c0028593:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028596:	09 ca                	or     edx,ecx
c0028598:	c1 e2 17             	shl    edx,0x17
c002859b:	09 da                	or     edx,ebx
c002859d:	01 d0                	add    eax,edx
c002859f:	83 c4 0c             	add    esp,0xc
c00285a2:	5b                   	pop    ebx
c00285a3:	5e                   	pop    esi
c00285a4:	5f                   	pop    edi
c00285a5:	5d                   	pop    ebp
c00285a6:	c3                   	ret    

c00285a7 <__extendsfdf2>:
c00285a7:	55                   	push   ebp
c00285a8:	89 e5                	mov    ebp,esp
c00285aa:	57                   	push   edi
c00285ab:	56                   	push   esi
c00285ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285af:	89 d1                	mov    ecx,edx
c00285b1:	c1 f9 17             	sar    ecx,0x17
c00285b4:	c1 e2 08             	shl    edx,0x8
c00285b7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285bd:	89 c8                	mov    eax,ecx
c00285bf:	80 e4 f8             	and    ah,0xf8
c00285c2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285c5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285cb:	75 27                	jne    c00285f4 <__extendsfdf2+0x4d>
c00285cd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285d3:	75 18                	jne    c00285ed <__extendsfdf2+0x46>
c00285d5:	85 d2                	test   edx,edx
c00285d7:	74 20                	je     c00285f9 <__extendsfdf2+0x52>
c00285d9:	41                   	inc    ecx
c00285da:	01 d2                	add    edx,edx
c00285dc:	79 fb                	jns    c00285d9 <__extendsfdf2+0x32>
c00285de:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285e4:	29 c8                	sub    eax,ecx
c00285e6:	05 81 03 00 00       	add    eax,0x381
c00285eb:	eb 0c                	jmp    c00285f9 <__extendsfdf2+0x52>
c00285ed:	05 00 07 00 00       	add    eax,0x700
c00285f2:	eb 05                	jmp    c00285f9 <__extendsfdf2+0x52>
c00285f4:	05 80 03 00 00       	add    eax,0x380
c00285f9:	c1 e0 14             	shl    eax,0x14
c00285fc:	89 c1                	mov    ecx,eax
c00285fe:	89 d0                	mov    eax,edx
c0028600:	c1 e8 0b             	shr    eax,0xb
c0028603:	09 c1                	or     ecx,eax
c0028605:	c1 e2 15             	shl    edx,0x15
c0028608:	89 d0                	mov    eax,edx
c002860a:	89 ca                	mov    edx,ecx
c002860c:	5e                   	pop    esi
c002860d:	5f                   	pop    edi
c002860e:	5d                   	pop    ebp
c002860f:	c3                   	ret    

c0028610 <fabs>:
c0028610:	83 ec 0c             	sub    esp,0xc
c0028613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028617:	89 04 24             	mov    DWORD PTR [esp],eax
c002861a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002861e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028623:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028627:	dd 04 24             	fld    QWORD PTR [esp]
c002862a:	83 c4 0c             	add    esp,0xc
c002862d:	c3                   	ret    
c002862e:	66 90                	xchg   ax,ax

c0028630 <lrint>:
c0028630:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028634:	83 ec 04             	sub    esp,0x4
c0028637:	db 1c 24             	fistp  DWORD PTR [esp]
c002863a:	58                   	pop    eax
c002863b:	c3                   	ret    

c002863c <lrintf>:
c002863c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028640:	83 ec 04             	sub    esp,0x4
c0028643:	db 1c 24             	fistp  DWORD PTR [esp]
c0028646:	58                   	pop    eax
c0028647:	c3                   	ret    

Disassembly of section .init:

c0028648 <_init>:
c0028648:	55                   	push   ebp
c0028649:	89 e5                	mov    ebp,esp
c002864b:	e8 c8 7a fd ff       	call   c0000118 <frame_dummy>
c0028650:	e8 63 e0 ff ff       	call   c00266b8 <__do_global_ctors_aux>
c0028655:	5d                   	pop    ebp
c0028656:	c3                   	ret    

Disassembly of section .fini:

c0028657 <_fini>:
c0028657:	55                   	push   ebp
c0028658:	89 e5                	mov    ebp,esp
c002865a:	e8 49 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002865f:	5d                   	pop    ebp
c0028660:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028662 <Computer::~Computer()>:
c0028662:	83 ec 0c             	sub    esp,0xc
c0028665:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c002866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866e:	89 10                	mov    DWORD PTR [eax],edx
c0028670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028674:	83 ec 0c             	sub    esp,0xc
c0028677:	50                   	push   eax
c0028678:	e8 cb bb fe ff       	call   c0014248 <Device::~Device()>
c002867d:	83 c4 10             	add    esp,0x10
c0028680:	90                   	nop
c0028681:	83 c4 0c             	add    esp,0xc
c0028684:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028686 <Computer::~Computer()>:
c0028686:	83 ec 0c             	sub    esp,0xc
c0028689:	83 ec 0c             	sub    esp,0xc
c002868c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028690:	e8 cd ff ff ff       	call   c0028662 <Computer::~Computer()>
c0028695:	83 c4 10             	add    esp,0x10
c0028698:	83 ec 08             	sub    esp,0x8
c002869b:	68 ec 01 00 00       	push   0x1ec
c00286a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286a4:	e8 c7 a7 fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00286a9:	83 c4 10             	add    esp,0x10
c00286ac:	83 c4 0c             	add    esp,0xc
c00286af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286b0 <idleCommon()>:
c00286b0:	83 ec 0c             	sub    esp,0xc
c00286b3:	e8 14 57 ff ff       	call   c001ddcc <lockScheduler()>
c00286b8:	e8 4b 5a ff ff       	call   c001e108 <schedule()>
c00286bd:	83 c4 0c             	add    esp,0xc
c00286c0:	e9 09 57 ff ff       	jmp    c001ddce <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286c6 <LinkedList<UnixFile>::~LinkedList()>:
c00286c6:	90                   	nop
c00286c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286c8 <LinkedList<UnixFile>::LinkedList()>:
c00286c8:	83 ec 0c             	sub    esp,0xc
c00286cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002870b:	83 ec 0c             	sub    esp,0xc
c002870e:	68 66 a4 02 c0       	push   0xc002a466
c0028713:	e8 38 a8 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0028718:	83 c4 10             	add    esp,0x10
c002871b:	90                   	nop
c002871c:	83 c4 0c             	add    esp,0xc
c002871f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028720:	83 ec 0c             	sub    esp,0xc
c0028723:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028728:	75 10                	jne    c002873a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002872a:	83 ec 0c             	sub    esp,0xc
c002872d:	68 80 a4 02 c0       	push   0xc002a480
c0028732:	e8 ba 1e ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028737:	83 c4 10             	add    esp,0x10
c002873a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028740:	85 c0                	test   eax,eax
c0028742:	74 34                	je     c0028778 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002874b:	85 c0                	test   eax,eax
c002874d:	74 29                	je     c0028778 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002874f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028753:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028756:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002875a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002875d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028761:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028765:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002876f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028776:	eb 65                	jmp    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 00                	mov    eax,DWORD PTR [eax]
c002877e:	85 c0                	test   eax,eax
c0028780:	75 4b                	jne    c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028786:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028789:	85 c0                	test   eax,eax
c002878b:	75 40                	jne    c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028795:	89 10                	mov    DWORD PTR [eax],edx
c0028797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002879f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b7:	85 c0                	test   eax,eax
c00287b9:	74 22                	je     c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287bb:	83 ec 0c             	sub    esp,0xc
c00287be:	68 a2 a4 02 c0       	push   0xc002a4a2
c00287c3:	e8 29 1e ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c00287c8:	83 c4 10             	add    esp,0x10
c00287cb:	eb 10                	jmp    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287cd:	83 ec 0c             	sub    esp,0xc
c00287d0:	68 ac a4 02 c0       	push   0xc002a4ac
c00287d5:	e8 17 1e ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c00287da:	83 c4 10             	add    esp,0x10
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287e4:	8d 50 01             	lea    edx,[eax+0x1]
c00287e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287ee:	90                   	nop
c00287ef:	83 c4 0c             	add    esp,0xc
c00287f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287f4 <LinkedList<UnixFile>::getFirstElement()>:
c00287f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287fc <LinkedList<UnixFile>::removeFirst()>:
c00287fc:	83 ec 0c             	sub    esp,0xc
c00287ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028803:	8b 00                	mov    eax,DWORD PTR [eax]
c0028805:	85 c0                	test   eax,eax
c0028807:	75 12                	jne    c002881b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028809:	83 ec 0c             	sub    esp,0xc
c002880c:	68 b8 a4 02 c0       	push   0xc002a4b8
c0028811:	e8 db 1d ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028816:	83 c4 10             	add    esp,0x10
c0028819:	eb 7e                	jmp    c0028899 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028822:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028825:	85 c0                	test   eax,eax
c0028827:	74 10                	je     c0028839 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028829:	83 ec 0c             	sub    esp,0xc
c002882c:	68 03 a5 02 c0       	push   0xc002a503
c0028831:	e8 bb 1d ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028836:	83 c4 10             	add    esp,0x10
c0028839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883d:	8b 00                	mov    eax,DWORD PTR [eax]
c002883f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028842:	85 c0                	test   eax,eax
c0028844:	75 33                	jne    c0028879 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028862:	83 f8 01             	cmp    eax,0x1
c0028865:	74 21                	je     c0028888 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028867:	83 ec 0c             	sub    esp,0xc
c002886a:	68 dc a4 02 c0       	push   0xc002a4dc
c002886f:	e8 7d 1d ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028874:	83 c4 10             	add    esp,0x10
c0028877:	eb 0f                	jmp    c0028888 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887d:	8b 00                	mov    eax,DWORD PTR [eax]
c002887f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028886:	89 10                	mov    DWORD PTR [eax],edx
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002888f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028899:	83 c4 0c             	add    esp,0xc
c002889c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002889e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002889e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288a6 <DriverlessDevice::~DriverlessDevice()>:
c00288a6:	ba 44 ac 02 c0       	mov    edx,0xc002ac44
c00288ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288af:	89 10                	mov    DWORD PTR [eax],edx
c00288b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b5:	50                   	push   eax
c00288b6:	e8 8d b9 fe ff       	call   c0014248 <Device::~Device()>
c00288bb:	83 c4 04             	add    esp,0x4
c00288be:	90                   	nop
c00288bf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288c0 <DriverlessDevice::~DriverlessDevice()>:
c00288c0:	83 ec 0c             	sub    esp,0xc
c00288c3:	83 ec 0c             	sub    esp,0xc
c00288c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ca:	e8 d7 ff ff ff       	call   c00288a6 <DriverlessDevice::~DriverlessDevice()>
c00288cf:	83 c4 10             	add    esp,0x10
c00288d2:	83 ec 08             	sub    esp,0x8
c00288d5:	68 58 01 00 00       	push   0x158
c00288da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288de:	e8 8d a5 fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00288e3:	83 c4 10             	add    esp,0x10
c00288e6:	83 c4 0c             	add    esp,0xc
c00288e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288ea <LinkedList<Device>::addElement(Device*)>:
c00288ea:	83 ec 0c             	sub    esp,0xc
c00288ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288f2:	75 10                	jne    c0028904 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288f4:	83 ec 0c             	sub    esp,0xc
c00288f7:	68 80 a4 02 c0       	push   0xc002a480
c00288fc:	e8 f0 1c ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028901:	83 c4 10             	add    esp,0x10
c0028904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028908:	8b 00                	mov    eax,DWORD PTR [eax]
c002890a:	85 c0                	test   eax,eax
c002890c:	74 3a                	je     c0028948 <LinkedList<Device>::addElement(Device*)+0x5e>
c002890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028912:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028915:	85 c0                	test   eax,eax
c0028917:	74 2f                	je     c0028948 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028920:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028924:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028932:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028939:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002893c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028946:	eb 68                	jmp    c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	8b 00                	mov    eax,DWORD PTR [eax]
c002894e:	85 c0                	test   eax,eax
c0028950:	75 4e                	jne    c00289a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028959:	85 c0                	test   eax,eax
c002895b:	75 43                	jne    c00289a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028961:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028965:	89 10                	mov    DWORD PTR [eax],edx
c0028967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002896f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028979:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002898a:	85 c0                	test   eax,eax
c002898c:	74 22                	je     c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002898e:	83 ec 0c             	sub    esp,0xc
c0028991:	68 a2 a4 02 c0       	push   0xc002a4a2
c0028996:	e8 56 1c ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c002899b:	83 c4 10             	add    esp,0x10
c002899e:	eb 10                	jmp    c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289a0:	83 ec 0c             	sub    esp,0xc
c00289a3:	68 ac a4 02 c0       	push   0xc002a4ac
c00289a8:	e8 44 1c ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c00289ad:	83 c4 10             	add    esp,0x10
c00289b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b7:	8d 50 01             	lea    edx,[eax+0x1]
c00289ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289c1:	90                   	nop
c00289c2:	83 c4 0c             	add    esp,0xc
c00289c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289c6 <LinkedList<Device>::LinkedList()>:
c00289c6:	83 ec 0c             	sub    esp,0xc
c00289c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a09:	83 ec 0c             	sub    esp,0xc
c0028a0c:	68 66 a4 02 c0       	push   0xc002a466
c0028a11:	e8 3a a5 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0028a16:	83 c4 10             	add    esp,0x10
c0028a19:	90                   	nop
c0028a1a:	83 c4 0c             	add    esp,0xc
c0028a1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a2c:	85 c0                	test   eax,eax
c0028a2e:	75 0e                	jne    c0028a3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a37:	85 c0                	test   eax,eax
c0028a39:	75 03                	jne    c0028a3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a3b:	b0 01                	mov    al,0x1
c0028a3d:	c3                   	ret    
c0028a3e:	b0 00                	mov    al,0x0
c0028a40:	90                   	nop
c0028a41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a42:	83 ec 0c             	sub    esp,0xc
c0028a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a4b:	85 c0                	test   eax,eax
c0028a4d:	75 15                	jne    c0028a64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a4f:	83 ec 0c             	sub    esp,0xc
c0028a52:	68 b8 a4 02 c0       	push   0xc002a4b8
c0028a57:	e8 95 1b ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028a5c:	83 c4 10             	add    esp,0x10
c0028a5f:	e9 88 00 00 00       	jmp    c0028aec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a6e:	85 c0                	test   eax,eax
c0028a70:	0f 95 c0             	setne  al
c0028a73:	84 c0                	test   al,al
c0028a75:	74 10                	je     c0028a87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a77:	83 ec 0c             	sub    esp,0xc
c0028a7a:	68 03 a5 02 c0       	push   0xc002a503
c0028a7f:	e8 6d 1b ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028a84:	83 c4 10             	add    esp,0x10
c0028a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a90:	85 c0                	test   eax,eax
c0028a92:	0f 94 c0             	sete   al
c0028a95:	84 c0                	test   al,al
c0028a97:	74 33                	je     c0028acc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab5:	83 f8 01             	cmp    eax,0x1
c0028ab8:	74 21                	je     c0028adb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aba:	83 ec 0c             	sub    esp,0xc
c0028abd:	68 dc a4 02 c0       	push   0xc002a4dc
c0028ac2:	e8 2a 1b ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	eb 0f                	jmp    c0028adb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad9:	89 10                	mov    DWORD PTR [eax],edx
c0028adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aec:	83 c4 0c             	add    esp,0xc
c0028aef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028af0:	83 ec 0c             	sub    esp,0xc
c0028af3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028af8:	75 10                	jne    c0028b0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028afa:	83 ec 0c             	sub    esp,0xc
c0028afd:	68 80 a4 02 c0       	push   0xc002a480
c0028b02:	e8 ea 1a ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028b07:	83 c4 10             	add    esp,0x10
c0028b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b10:	85 c0                	test   eax,eax
c0028b12:	74 34                	je     c0028b48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b1b:	85 c0                	test   eax,eax
c0028b1d:	74 29                	je     c0028b48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b46:	eb 65                	jmp    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b4e:	85 c0                	test   eax,eax
c0028b50:	75 4b                	jne    c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b59:	85 c0                	test   eax,eax
c0028b5b:	75 40                	jne    c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b65:	89 10                	mov    DWORD PTR [eax],edx
c0028b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b87:	85 c0                	test   eax,eax
c0028b89:	74 22                	je     c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b8b:	83 ec 0c             	sub    esp,0xc
c0028b8e:	68 a2 a4 02 c0       	push   0xc002a4a2
c0028b93:	e8 59 1a ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028b98:	83 c4 10             	add    esp,0x10
c0028b9b:	eb 10                	jmp    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b9d:	83 ec 0c             	sub    esp,0xc
c0028ba0:	68 ac a4 02 c0       	push   0xc002a4ac
c0028ba5:	e8 47 1a ff ff       	call   c001a5f1 <Krnl::panic(char const*)>
c0028baa:	83 c4 10             	add    esp,0x10
c0028bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bbe:	90                   	nop
c0028bbf:	83 c4 0c             	add    esp,0xc
c0028bc2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bc4 <ACPI::~ACPI()>:
c0028bc4:	83 ec 0c             	sub    esp,0xc
c0028bc7:	ba 8c b5 02 c0       	mov    edx,0xc002b58c
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	89 10                	mov    DWORD PTR [eax],edx
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	83 ec 0c             	sub    esp,0xc
c0028bd9:	50                   	push   eax
c0028bda:	e8 69 b6 fe ff       	call   c0014248 <Device::~Device()>
c0028bdf:	83 c4 10             	add    esp,0x10
c0028be2:	90                   	nop
c0028be3:	83 c4 0c             	add    esp,0xc
c0028be6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028be8 <ACPI::~ACPI()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf2:	e8 cd ff ff ff       	call   c0028bc4 <ACPI::~ACPI()>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	83 ec 08             	sub    esp,0x8
c0028bfd:	68 68 12 00 00       	push   0x1268
c0028c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c06:	e8 65 a2 fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028c0b:	83 c4 10             	add    esp,0x10
c0028c0e:	83 c4 0c             	add    esp,0xc
c0028c11:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c12 <CPU::~CPU()>:
c0028c12:	83 ec 0c             	sub    esp,0xc
c0028c15:	ba 7c b9 02 c0       	mov    edx,0xc002b97c
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	89 10                	mov    DWORD PTR [eax],edx
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	50                   	push   eax
c0028c28:	e8 1b b6 fe ff       	call   c0014248 <Device::~Device()>
c0028c2d:	83 c4 10             	add    esp,0x10
c0028c30:	90                   	nop
c0028c31:	83 c4 0c             	add    esp,0xc
c0028c34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c36 <CPU::~CPU()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	83 ec 0c             	sub    esp,0xc
c0028c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c40:	e8 cd ff ff ff       	call   c0028c12 <CPU::~CPU()>
c0028c45:	83 c4 10             	add    esp,0x10
c0028c48:	83 ec 08             	sub    esp,0x8
c0028c4b:	68 98 11 00 00       	push   0x1198
c0028c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c54:	e8 17 a2 fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028c59:	83 c4 10             	add    esp,0x10
c0028c5c:	83 c4 0c             	add    esp,0xc
c0028c5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c60 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c60:	90                   	nop
c0028c61:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c62 <ThreadControlBlock::ThreadControlBlock()>:
c0028c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c7c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c87:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c92:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c9a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c9e:	90                   	nop
c0028c9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ca0:	83 ec 0c             	sub    esp,0xc
c0028ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ce3:	83 ec 0c             	sub    esp,0xc
c0028ce6:	68 66 a4 02 c0       	push   0xc002a466
c0028ceb:	e8 60 a2 fe ff       	call   c0012f50 <Dbg::kprintf(char const*, ...)>
c0028cf0:	83 c4 10             	add    esp,0x10
c0028cf3:	90                   	nop
c0028cf4:	83 c4 0c             	add    esp,0xc
c0028cf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028cf8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028cf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cfc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cff:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d00 <Vm::_FPUState::_FPUState()>:
c0028d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d04:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d0b:	90                   	nop
c0028d0c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d0e <PCI::~PCI()>:
c0028d0e:	83 ec 0c             	sub    esp,0xc
c0028d11:	ba f0 c9 02 c0       	mov    edx,0xc002c9f0
c0028d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1a:	89 10                	mov    DWORD PTR [eax],edx
c0028d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	50                   	push   eax
c0028d24:	e8 f7 ae fe ff       	call   c0013c20 <Bus::~Bus()>
c0028d29:	83 c4 10             	add    esp,0x10
c0028d2c:	90                   	nop
c0028d2d:	83 c4 0c             	add    esp,0xc
c0028d30:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d32 <PCI::~PCI()>:
c0028d32:	83 ec 0c             	sub    esp,0xc
c0028d35:	83 ec 0c             	sub    esp,0xc
c0028d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3c:	e8 cd ff ff ff       	call   c0028d0e <PCI::~PCI()>
c0028d41:	83 c4 10             	add    esp,0x10
c0028d44:	83 ec 08             	sub    esp,0x8
c0028d47:	68 58 01 00 00       	push   0x158
c0028d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d50:	e8 1b a1 fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028d55:	83 c4 10             	add    esp,0x10
c0028d58:	83 c4 0c             	add    esp,0xc
c0028d5b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d5c <IDE::~IDE()>:
c0028d5c:	83 ec 0c             	sub    esp,0xc
c0028d5f:	ba 54 cc 02 c0       	mov    edx,0xc002cc54
c0028d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d68:	89 10                	mov    DWORD PTR [eax],edx
c0028d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	50                   	push   eax
c0028d72:	e8 c1 b9 fe ff       	call   c0014738 <HardDiskController::~HardDiskController()>
c0028d77:	83 c4 10             	add    esp,0x10
c0028d7a:	90                   	nop
c0028d7b:	83 c4 0c             	add    esp,0xc
c0028d7e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d80 <IDE::~IDE()>:
c0028d80:	83 ec 0c             	sub    esp,0xc
c0028d83:	83 ec 0c             	sub    esp,0xc
c0028d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8a:	e8 cd ff ff ff       	call   c0028d5c <IDE::~IDE()>
c0028d8f:	83 c4 10             	add    esp,0x10
c0028d92:	83 ec 08             	sub    esp,0x8
c0028d95:	68 70 02 00 00       	push   0x270
c0028d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9e:	e8 cd a0 fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028da3:	83 c4 10             	add    esp,0x10
c0028da6:	83 c4 0c             	add    esp,0xc
c0028da9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028daa <SATABus::~SATABus()>:
c0028daa:	83 ec 0c             	sub    esp,0xc
c0028dad:	ba 34 cd 02 c0       	mov    edx,0xc002cd34
c0028db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db6:	89 10                	mov    DWORD PTR [eax],edx
c0028db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	50                   	push   eax
c0028dc0:	e8 73 b9 fe ff       	call   c0014738 <HardDiskController::~HardDiskController()>
c0028dc5:	83 c4 10             	add    esp,0x10
c0028dc8:	90                   	nop
c0028dc9:	83 c4 0c             	add    esp,0xc
c0028dcc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dce <SATABus::~SATABus()>:
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	83 ec 0c             	sub    esp,0xc
c0028dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd8:	e8 cd ff ff ff       	call   c0028daa <SATABus::~SATABus()>
c0028ddd:	83 c4 10             	add    esp,0x10
c0028de0:	83 ec 08             	sub    esp,0x8
c0028de3:	68 64 01 00 00       	push   0x164
c0028de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dec:	e8 7f a0 fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028df1:	83 c4 10             	add    esp,0x10
c0028df4:	83 c4 0c             	add    esp,0xc
c0028df7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028df8 <ATA::~ATA()>:
c0028df8:	83 ec 0c             	sub    esp,0xc
c0028dfb:	ba 80 cd 02 c0       	mov    edx,0xc002cd80
c0028e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e04:	89 10                	mov    DWORD PTR [eax],edx
c0028e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	50                   	push   eax
c0028e0e:	e8 17 ba fe ff       	call   c001482a <PhysicalDisk::~PhysicalDisk()>
c0028e13:	83 c4 10             	add    esp,0x10
c0028e16:	90                   	nop
c0028e17:	83 c4 0c             	add    esp,0xc
c0028e1a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e1c <ATA::~ATA()>:
c0028e1c:	83 ec 0c             	sub    esp,0xc
c0028e1f:	83 ec 0c             	sub    esp,0xc
c0028e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e26:	e8 cd ff ff ff       	call   c0028df8 <ATA::~ATA()>
c0028e2b:	83 c4 10             	add    esp,0x10
c0028e2e:	83 ec 08             	sub    esp,0x8
c0028e31:	68 7c 01 00 00       	push   0x17c
c0028e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3a:	e8 31 a0 fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028e3f:	83 c4 10             	add    esp,0x10
c0028e42:	83 c4 0c             	add    esp,0xc
c0028e45:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e46 <ATAPI::~ATAPI()>:
c0028e46:	83 ec 0c             	sub    esp,0xc
c0028e49:	ba b8 cd 02 c0       	mov    edx,0xc002cdb8
c0028e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e52:	89 10                	mov    DWORD PTR [eax],edx
c0028e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e58:	83 ec 0c             	sub    esp,0xc
c0028e5b:	50                   	push   eax
c0028e5c:	e8 c9 b9 fe ff       	call   c001482a <PhysicalDisk::~PhysicalDisk()>
c0028e61:	83 c4 10             	add    esp,0x10
c0028e64:	90                   	nop
c0028e65:	83 c4 0c             	add    esp,0xc
c0028e68:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e6a <ATAPI::~ATAPI()>:
c0028e6a:	83 ec 0c             	sub    esp,0xc
c0028e6d:	83 ec 0c             	sub    esp,0xc
c0028e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e74:	e8 cd ff ff ff       	call   c0028e46 <ATAPI::~ATAPI()>
c0028e79:	83 c4 10             	add    esp,0x10
c0028e7c:	83 ec 08             	sub    esp,0x8
c0028e7f:	68 80 01 00 00       	push   0x180
c0028e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e88:	e8 e3 9f fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028e8d:	83 c4 10             	add    esp,0x10
c0028e90:	83 c4 0c             	add    esp,0xc
c0028e93:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e94 <SATA::~SATA()>:
c0028e94:	83 ec 0c             	sub    esp,0xc
c0028e97:	ba 6c ce 02 c0       	mov    edx,0xc002ce6c
c0028e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea0:	89 10                	mov    DWORD PTR [eax],edx
c0028ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	50                   	push   eax
c0028eaa:	e8 7b b9 fe ff       	call   c001482a <PhysicalDisk::~PhysicalDisk()>
c0028eaf:	83 c4 10             	add    esp,0x10
c0028eb2:	90                   	nop
c0028eb3:	83 c4 0c             	add    esp,0xc
c0028eb6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028eb8 <SATA::~SATA()>:
c0028eb8:	83 ec 0c             	sub    esp,0xc
c0028ebb:	83 ec 0c             	sub    esp,0xc
c0028ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec2:	e8 cd ff ff ff       	call   c0028e94 <SATA::~SATA()>
c0028ec7:	83 c4 10             	add    esp,0x10
c0028eca:	83 ec 08             	sub    esp,0x8
c0028ecd:	68 7c 01 00 00       	push   0x17c
c0028ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed6:	e8 95 9f fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028edb:	83 c4 10             	add    esp,0x10
c0028ede:	83 c4 0c             	add    esp,0xc
c0028ee1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ee2 <SATAPI::~SATAPI()>:
c0028ee2:	83 ec 0c             	sub    esp,0xc
c0028ee5:	ba 48 cf 02 c0       	mov    edx,0xc002cf48
c0028eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eee:	89 10                	mov    DWORD PTR [eax],edx
c0028ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	50                   	push   eax
c0028ef8:	e8 2d b9 fe ff       	call   c001482a <PhysicalDisk::~PhysicalDisk()>
c0028efd:	83 c4 10             	add    esp,0x10
c0028f00:	90                   	nop
c0028f01:	83 c4 0c             	add    esp,0xc
c0028f04:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f06 <SATAPI::~SATAPI()>:
c0028f06:	83 ec 0c             	sub    esp,0xc
c0028f09:	83 ec 0c             	sub    esp,0xc
c0028f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f10:	e8 cd ff ff ff       	call   c0028ee2 <SATAPI::~SATAPI()>
c0028f15:	83 c4 10             	add    esp,0x10
c0028f18:	83 ec 08             	sub    esp,0x8
c0028f1b:	68 80 01 00 00       	push   0x180
c0028f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f24:	e8 47 9f fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028f29:	83 c4 10             	add    esp,0x10
c0028f2c:	83 c4 0c             	add    esp,0xc
c0028f2f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f30 <AVX::~AVX()>:
c0028f30:	83 ec 0c             	sub    esp,0xc
c0028f33:	ba 88 cf 02 c0       	mov    edx,0xc002cf88
c0028f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3c:	89 10                	mov    DWORD PTR [eax],edx
c0028f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f42:	83 ec 0c             	sub    esp,0xc
c0028f45:	50                   	push   eax
c0028f46:	e8 63 b9 fe ff       	call   c00148ae <FPU::~FPU()>
c0028f4b:	83 c4 10             	add    esp,0x10
c0028f4e:	90                   	nop
c0028f4f:	83 c4 0c             	add    esp,0xc
c0028f52:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f54 <AVX::~AVX()>:
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	83 ec 0c             	sub    esp,0xc
c0028f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5e:	e8 cd ff ff ff       	call   c0028f30 <AVX::~AVX()>
c0028f63:	83 c4 10             	add    esp,0x10
c0028f66:	83 ec 08             	sub    esp,0x8
c0028f69:	68 58 01 00 00       	push   0x158
c0028f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f72:	e8 f9 9e fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028f77:	83 c4 10             	add    esp,0x10
c0028f7a:	83 c4 0c             	add    esp,0xc
c0028f7d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f7e <MMX::~MMX()>:
c0028f7e:	83 ec 0c             	sub    esp,0xc
c0028f81:	ba c8 cf 02 c0       	mov    edx,0xc002cfc8
c0028f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8a:	89 10                	mov    DWORD PTR [eax],edx
c0028f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f90:	83 ec 0c             	sub    esp,0xc
c0028f93:	50                   	push   eax
c0028f94:	e8 15 b9 fe ff       	call   c00148ae <FPU::~FPU()>
c0028f99:	83 c4 10             	add    esp,0x10
c0028f9c:	90                   	nop
c0028f9d:	83 c4 0c             	add    esp,0xc
c0028fa0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fa2 <MMX::~MMX()>:
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	83 ec 0c             	sub    esp,0xc
c0028fa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fac:	e8 cd ff ff ff       	call   c0028f7e <MMX::~MMX()>
c0028fb1:	83 c4 10             	add    esp,0x10
c0028fb4:	83 ec 08             	sub    esp,0x8
c0028fb7:	68 58 01 00 00       	push   0x158
c0028fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc0:	e8 ab 9e fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0028fc5:	83 c4 10             	add    esp,0x10
c0028fc8:	83 c4 0c             	add    esp,0xc
c0028fcb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fcc <SSE::~SSE()>:
c0028fcc:	83 ec 0c             	sub    esp,0xc
c0028fcf:	ba 08 d0 02 c0       	mov    edx,0xc002d008
c0028fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd8:	89 10                	mov    DWORD PTR [eax],edx
c0028fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fde:	83 ec 0c             	sub    esp,0xc
c0028fe1:	50                   	push   eax
c0028fe2:	e8 c7 b8 fe ff       	call   c00148ae <FPU::~FPU()>
c0028fe7:	83 c4 10             	add    esp,0x10
c0028fea:	90                   	nop
c0028feb:	83 c4 0c             	add    esp,0xc
c0028fee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ff0 <SSE::~SSE()>:
c0028ff0:	83 ec 0c             	sub    esp,0xc
c0028ff3:	83 ec 0c             	sub    esp,0xc
c0028ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffa:	e8 cd ff ff ff       	call   c0028fcc <SSE::~SSE()>
c0028fff:	83 c4 10             	add    esp,0x10
c0029002:	83 ec 08             	sub    esp,0x8
c0029005:	68 58 01 00 00       	push   0x158
c002900a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900e:	e8 5d 9e fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0029013:	83 c4 10             	add    esp,0x10
c0029016:	83 c4 0c             	add    esp,0xc
c0029019:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002901a <x87::~x87()>:
c002901a:	83 ec 0c             	sub    esp,0xc
c002901d:	ba 48 d0 02 c0       	mov    edx,0xc002d048
c0029022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029026:	89 10                	mov    DWORD PTR [eax],edx
c0029028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902c:	83 ec 0c             	sub    esp,0xc
c002902f:	50                   	push   eax
c0029030:	e8 79 b8 fe ff       	call   c00148ae <FPU::~FPU()>
c0029035:	83 c4 10             	add    esp,0x10
c0029038:	90                   	nop
c0029039:	83 c4 0c             	add    esp,0xc
c002903c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002903e <x87::~x87()>:
c002903e:	83 ec 0c             	sub    esp,0xc
c0029041:	83 ec 0c             	sub    esp,0xc
c0029044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029048:	e8 cd ff ff ff       	call   c002901a <x87::~x87()>
c002904d:	83 c4 10             	add    esp,0x10
c0029050:	83 ec 08             	sub    esp,0x8
c0029053:	68 58 01 00 00       	push   0x158
c0029058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905c:	e8 0f 9e fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0029061:	83 c4 10             	add    esp,0x10
c0029064:	83 c4 0c             	add    esp,0xc
c0029067:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029068 <IOAPIC::~IOAPIC()>:
c0029068:	83 ec 0c             	sub    esp,0xc
c002906b:	ba a0 d1 02 c0       	mov    edx,0xc002d1a0
c0029070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029074:	89 10                	mov    DWORD PTR [eax],edx
c0029076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907a:	83 ec 0c             	sub    esp,0xc
c002907d:	50                   	push   eax
c002907e:	e8 c5 b1 fe ff       	call   c0014248 <Device::~Device()>
c0029083:	83 c4 10             	add    esp,0x10
c0029086:	90                   	nop
c0029087:	83 c4 0c             	add    esp,0xc
c002908a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002908c <IOAPIC::~IOAPIC()>:
c002908c:	83 ec 0c             	sub    esp,0xc
c002908f:	83 ec 0c             	sub    esp,0xc
c0029092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029096:	e8 cd ff ff ff       	call   c0029068 <IOAPIC::~IOAPIC()>
c002909b:	83 c4 10             	add    esp,0x10
c002909e:	83 ec 08             	sub    esp,0x8
c00290a1:	68 68 01 00 00       	push   0x168
c00290a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290aa:	e8 c1 9d fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00290af:	83 c4 10             	add    esp,0x10
c00290b2:	83 c4 0c             	add    esp,0xc
c00290b5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290b6 <APIC::~APIC()>:
c00290b6:	83 ec 0c             	sub    esp,0xc
c00290b9:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c00290be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c2:	89 10                	mov    DWORD PTR [eax],edx
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	83 ec 0c             	sub    esp,0xc
c00290cb:	50                   	push   eax
c00290cc:	e8 a7 bc fe ff       	call   c0014d78 <InterruptController::~InterruptController()>
c00290d1:	83 c4 10             	add    esp,0x10
c00290d4:	90                   	nop
c00290d5:	83 c4 0c             	add    esp,0xc
c00290d8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290da <APIC::~APIC()>:
c00290da:	83 ec 0c             	sub    esp,0xc
c00290dd:	83 ec 0c             	sub    esp,0xc
c00290e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e4:	e8 cd ff ff ff       	call   c00290b6 <APIC::~APIC()>
c00290e9:	83 c4 10             	add    esp,0x10
c00290ec:	83 ec 08             	sub    esp,0x8
c00290ef:	68 58 21 00 00       	push   0x2158
c00290f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f8:	e8 73 9d fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00290fd:	83 c4 10             	add    esp,0x10
c0029100:	83 c4 0c             	add    esp,0xc
c0029103:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029104 <PIC::~PIC()>:
c0029104:	83 ec 0c             	sub    esp,0xc
c0029107:	ba f0 d1 02 c0       	mov    edx,0xc002d1f0
c002910c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029110:	89 10                	mov    DWORD PTR [eax],edx
c0029112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029116:	83 ec 0c             	sub    esp,0xc
c0029119:	50                   	push   eax
c002911a:	e8 59 bc fe ff       	call   c0014d78 <InterruptController::~InterruptController()>
c002911f:	83 c4 10             	add    esp,0x10
c0029122:	90                   	nop
c0029123:	83 c4 0c             	add    esp,0xc
c0029126:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029128 <PIC::~PIC()>:
c0029128:	83 ec 0c             	sub    esp,0xc
c002912b:	83 ec 0c             	sub    esp,0xc
c002912e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029132:	e8 cd ff ff ff       	call   c0029104 <PIC::~PIC()>
c0029137:	83 c4 10             	add    esp,0x10
c002913a:	83 ec 08             	sub    esp,0x8
c002913d:	68 58 21 00 00       	push   0x2158
c0029142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029146:	e8 25 9d fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c002914b:	83 c4 10             	add    esp,0x10
c002914e:	83 c4 0c             	add    esp,0xc
c0029151:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029152 <APICTimer::~APICTimer()>:
c0029152:	83 ec 0c             	sub    esp,0xc
c0029155:	ba 44 d2 02 c0       	mov    edx,0xc002d244
c002915a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915e:	89 10                	mov    DWORD PTR [eax],edx
c0029160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029164:	83 ec 0c             	sub    esp,0xc
c0029167:	50                   	push   eax
c0029168:	e8 57 db fe ff       	call   c0016cc4 <Timer::~Timer()>
c002916d:	83 c4 10             	add    esp,0x10
c0029170:	90                   	nop
c0029171:	83 c4 0c             	add    esp,0xc
c0029174:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029176 <APICTimer::~APICTimer()>:
c0029176:	83 ec 0c             	sub    esp,0xc
c0029179:	83 ec 0c             	sub    esp,0xc
c002917c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029180:	e8 cd ff ff ff       	call   c0029152 <APICTimer::~APICTimer()>
c0029185:	83 c4 10             	add    esp,0x10
c0029188:	83 ec 08             	sub    esp,0x8
c002918b:	68 60 01 00 00       	push   0x160
c0029190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029194:	e8 d7 9c fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c0029199:	83 c4 10             	add    esp,0x10
c002919c:	83 c4 0c             	add    esp,0xc
c002919f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291a0 <PIT::~PIT()>:
c00291a0:	83 ec 0c             	sub    esp,0xc
c00291a3:	ba 94 d2 02 c0       	mov    edx,0xc002d294
c00291a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ac:	89 10                	mov    DWORD PTR [eax],edx
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	83 ec 0c             	sub    esp,0xc
c00291b5:	50                   	push   eax
c00291b6:	e8 09 db fe ff       	call   c0016cc4 <Timer::~Timer()>
c00291bb:	83 c4 10             	add    esp,0x10
c00291be:	90                   	nop
c00291bf:	83 c4 0c             	add    esp,0xc
c00291c2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291c4 <PIT::~PIT()>:
c00291c4:	83 ec 0c             	sub    esp,0xc
c00291c7:	83 ec 0c             	sub    esp,0xc
c00291ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ce:	e8 cd ff ff ff       	call   c00291a0 <PIT::~PIT()>
c00291d3:	83 c4 10             	add    esp,0x10
c00291d6:	83 ec 08             	sub    esp,0x8
c00291d9:	68 5c 01 00 00       	push   0x15c
c00291de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e2:	e8 89 9c fe ff       	call   c0012e70 <operator delete(void*, unsigned long)>
c00291e7:	83 c4 10             	add    esp,0x10
c00291ea:	83 c4 0c             	add    esp,0xc
c00291ed:	c3                   	ret    
